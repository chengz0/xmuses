"use strict";
(function() {

Error.stackTraceLimit = Infinity;

var $global, $module;
if (typeof window !== "undefined") { /* web page */
  $global = window;
} else if (typeof self !== "undefined") { /* web worker */
  $global = self;
} else if (typeof global !== "undefined") { /* Node.js */
  $global = global;
  $global.require = require;
} else {
  console.log("warning: no global object found");
}
if (typeof module !== "undefined") {
  $module = module;
}

var $packages = {}, $reflect, $idCounter = 0;
var $keys = function(m) { return m ? Object.keys(m) : []; };
var $min = Math.min;
var $mod = function(x, y) { return x % y; };
var $parseInt = parseInt;
var $parseFloat = function(f) {
  if (f !== undefined && f !== null && f.constructor === Number) {
    return f;
  }
  return parseFloat(f);
};

var $mapArray = function(array, f) {
  var newArray = new array.constructor(array.length), i;
  for (i = 0; i < array.length; i++) {
    newArray[i] = f(array[i]);
  }
  return newArray;
};

var $methodVal = function(recv, name) {
  var vals = recv.$methodVals || {};
  recv.$methodVals = vals; /* noop for primitives */
  var f = vals[name];
  if (f !== undefined) {
    return f;
  }
  var method = recv[name];
  f = function() {
    $stackDepthOffset--;
    try {
      return method.apply(recv, arguments);
    } finally {
      $stackDepthOffset++;
    }
  };
  vals[name] = f;
  return f;
};

var $methodExpr = function(method) {
  if (method.$expr === undefined) {
    method.$expr = function() {
      $stackDepthOffset--;
      try {
        return Function.call.apply(method, arguments);
      } finally {
        $stackDepthOffset++;
      }
    };
  }
  return method.$expr;
};

var $subslice = function(slice, low, high, max) {
  if (low < 0 || high < low || max < high || high > slice.$capacity || max > slice.$capacity) {
    $throwRuntimeError("slice bounds out of range");
  }
  var s = new slice.constructor(slice.$array);
  s.$offset = slice.$offset + low;
  s.$length = slice.$length - low;
  s.$capacity = slice.$capacity - low;
  if (high !== undefined) {
    s.$length = high - low;
  }
  if (max !== undefined) {
    s.$capacity = max - low;
  }
  return s;
};

var $sliceToArray = function(slice) {
  if (slice.$length === 0) {
    return [];
  }
  if (slice.$array.constructor !== Array) {
    return slice.$array.subarray(slice.$offset, slice.$offset + slice.$length);
  }
  return slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
};

var $decodeRune = function(str, pos) {
  var c0 = str.charCodeAt(pos);

  if (c0 < 0x80) {
    return [c0, 1];
  }

  if (c0 !== c0 || c0 < 0xC0) {
    return [0xFFFD, 1];
  }

  var c1 = str.charCodeAt(pos + 1);
  if (c1 !== c1 || c1 < 0x80 || 0xC0 <= c1) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xE0) {
    var r = (c0 & 0x1F) << 6 | (c1 & 0x3F);
    if (r <= 0x7F) {
      return [0xFFFD, 1];
    }
    return [r, 2];
  }

  var c2 = str.charCodeAt(pos + 2);
  if (c2 !== c2 || c2 < 0x80 || 0xC0 <= c2) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF0) {
    var r = (c0 & 0x0F) << 12 | (c1 & 0x3F) << 6 | (c2 & 0x3F);
    if (r <= 0x7FF) {
      return [0xFFFD, 1];
    }
    if (0xD800 <= r && r <= 0xDFFF) {
      return [0xFFFD, 1];
    }
    return [r, 3];
  }

  var c3 = str.charCodeAt(pos + 3);
  if (c3 !== c3 || c3 < 0x80 || 0xC0 <= c3) {
    return [0xFFFD, 1];
  }

  if (c0 < 0xF8) {
    var r = (c0 & 0x07) << 18 | (c1 & 0x3F) << 12 | (c2 & 0x3F) << 6 | (c3 & 0x3F);
    if (r <= 0xFFFF || 0x10FFFF < r) {
      return [0xFFFD, 1];
    }
    return [r, 4];
  }

  return [0xFFFD, 1];
};

var $encodeRune = function(r) {
  if (r < 0 || r > 0x10FFFF || (0xD800 <= r && r <= 0xDFFF)) {
    r = 0xFFFD;
  }
  if (r <= 0x7F) {
    return String.fromCharCode(r);
  }
  if (r <= 0x7FF) {
    return String.fromCharCode(0xC0 | r >> 6, 0x80 | (r & 0x3F));
  }
  if (r <= 0xFFFF) {
    return String.fromCharCode(0xE0 | r >> 12, 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
  }
  return String.fromCharCode(0xF0 | r >> 18, 0x80 | (r >> 12 & 0x3F), 0x80 | (r >> 6 & 0x3F), 0x80 | (r & 0x3F));
};

var $stringToBytes = function(str) {
  var array = new Uint8Array(str.length), i;
  for (i = 0; i < str.length; i++) {
    array[i] = str.charCodeAt(i);
  }
  return array;
};

var $bytesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "", i;
  for (i = 0; i < slice.$length; i += 10000) {
    str += String.fromCharCode.apply(null, slice.$array.subarray(slice.$offset + i, slice.$offset + Math.min(slice.$length, i + 10000)));
  }
  return str;
};

var $stringToRunes = function(str) {
  var array = new Int32Array(str.length);
  var rune, i, j = 0;
  for (i = 0; i < str.length; i += rune[1], j++) {
    rune = $decodeRune(str, i);
    array[j] = rune[0];
  }
  return array.subarray(0, j);
};

var $runesToString = function(slice) {
  if (slice.$length === 0) {
    return "";
  }
  var str = "", i;
  for (i = 0; i < slice.$length; i++) {
    str += $encodeRune(slice.$array[slice.$offset + i]);
  }
  return str;
};

var $copyString = function(dst, src) {
  var n = Math.min(src.length, dst.$length), i;
  for (i = 0; i < n; i++) {
    dst.$array[dst.$offset + i] = src.charCodeAt(i);
  }
  return n;
};

var $copySlice = function(dst, src) {
  var n = Math.min(src.$length, dst.$length), i;
  $internalCopy(dst.$array, src.$array, dst.$offset, src.$offset, n, dst.constructor.elem);
  return n;
};

var $copy = function(dst, src, type) {
  var i;
  switch (type.kind) {
  case "Array":
    $internalCopy(dst, src, 0, 0, src.length, type.elem);
    return true;
  case "Struct":
    for (i = 0; i < type.fields.length; i++) {
      var field = type.fields[i];
      var name = field[0];
      if (!$copy(dst[name], src[name], field[3])) {
        dst[name] = src[name];
      }
    }
    return true;
  default:
    return false;
  }
};

var $internalCopy = function(dst, src, dstOffset, srcOffset, n, elem) {
  var i;
  if (n === 0) {
    return;
  }

  if (src.subarray) {
    dst.set(src.subarray(srcOffset, srcOffset + n), dstOffset);
    return;
  }

  switch (elem.kind) {
  case "Array":
  case "Struct":
    for (i = 0; i < n; i++) {
      $copy(dst[dstOffset + i], src[srcOffset + i], elem);
    }
    return;
  }

  for (i = 0; i < n; i++) {
    dst[dstOffset + i] = src[srcOffset + i];
  }
};

var $clone = function(src, type) {
  var clone = type.zero();
  $copy(clone, src, type);
  return clone;
};

var $append = function(slice) {
  return $internalAppend(slice, arguments, 1, arguments.length - 1);
};

var $appendSlice = function(slice, toAppend) {
  return $internalAppend(slice, toAppend.$array, toAppend.$offset, toAppend.$length);
};

var $internalAppend = function(slice, array, offset, length) {
  if (length === 0) {
    return slice;
  }

  var newArray = slice.$array;
  var newOffset = slice.$offset;
  var newLength = slice.$length + length;
  var newCapacity = slice.$capacity;

  if (newLength > newCapacity) {
    newOffset = 0;
    newCapacity = Math.max(newLength, slice.$capacity < 1024 ? slice.$capacity * 2 : Math.floor(slice.$capacity * 5 / 4));

    if (slice.$array.constructor === Array) {
      newArray = slice.$array.slice(slice.$offset, slice.$offset + slice.$length);
      newArray.length = newCapacity;
      var zero = slice.constructor.elem.zero, i;
      for (i = slice.$length; i < newCapacity; i++) {
        newArray[i] = zero();
      }
    } else {
      newArray = new slice.$array.constructor(newCapacity);
      newArray.set(slice.$array.subarray(slice.$offset, slice.$offset + slice.$length));
    }
  }

  $internalCopy(newArray, array, newOffset + slice.$length, offset, length, slice.constructor.elem);

  var newSlice = new slice.constructor(newArray);
  newSlice.$offset = newOffset;
  newSlice.$length = newLength;
  newSlice.$capacity = newCapacity;
  return newSlice;
};

var $equal = function(a, b, type) {
  if (a === b) {
    return true;
  }
  var i;
  switch (type.kind) {
  case "Float32":
    return $float32IsEqual(a, b);
  case "Complex64":
    return $float32IsEqual(a.$real, b.$real) && $float32IsEqual(a.$imag, b.$imag);
  case "Complex128":
    return a.$real === b.$real && a.$imag === b.$imag;
  case "Int64":
  case "Uint64":
    return a.$high === b.$high && a.$low === b.$low;
  case "Ptr":
    if (a.constructor.Struct) {
      return false;
    }
    return $pointerIsEqual(a, b);
  case "Array":
    if (a.length != b.length) {
      return false;
    }
    var i;
    for (i = 0; i < a.length; i++) {
      if (!$equal(a[i], b[i], type.elem)) {
        return false;
      }
    }
    return true;
  case "Struct":
    for (i = 0; i < type.fields.length; i++) {
      var field = type.fields[i];
      var name = field[0];
      if (!$equal(a[name], b[name], field[3])) {
        return false;
      }
    }
    return true;
  default:
    return false;
  }
};

var $interfaceIsEqual = function(a, b) {
  if (a === null || b === null || a === undefined || b === undefined || a.constructor !== b.constructor) {
    return a === b;
  }
  switch (a.constructor.kind) {
  case "Func":
  case "Map":
  case "Slice":
  case "Struct":
    $throwRuntimeError("comparing uncomparable type " + a.constructor.string);
  case undefined: /* js.Object */
    return a === b;
  default:
    return $equal(a.$val, b.$val, a.constructor);
  }
};

var $float32IsEqual = function(a, b) {
  if (a === b) {
    return true;
  }
  if (a === 1/0 || b === 1/0 || a === -1/0 || b === -1/0 || a !== a || b !== b) {
    return false;
  }
  var math = $packages["math"];
  return math !== undefined && math.Float32bits(a) === math.Float32bits(b);
};

var $pointerIsEqual = function(a, b) {
  if (a === b) {
    return true;
  }
  if (a.$get === $throwNilPointerError || b.$get === $throwNilPointerError) {
    return a.$get === $throwNilPointerError && b.$get === $throwNilPointerError;
  }
  var va = a.$get();
  var vb = b.$get();
  if (va !== vb) {
    return false;
  }
  var dummy = va + 1;
  a.$set(dummy);
  var equal = b.$get() === dummy;
  a.$set(va);
  return equal;
};

var $newType = function(size, kind, string, name, pkgPath, constructor) {
  var typ;
  switch(kind) {
  case "Bool":
  case "Int":
  case "Int8":
  case "Int16":
  case "Int32":
  case "Uint":
  case "Uint8" :
  case "Uint16":
  case "Uint32":
  case "Uintptr":
  case "String":
  case "UnsafePointer":
    typ = function(v) { this.$val = v; };
    typ.prototype.$key = function() { return string + "$" + this.$val; };
    break;

  case "Float32":
  case "Float64":
    typ = function(v) { this.$val = v; };
    typ.prototype.$key = function() { return string + "$" + $floatKey(this.$val); };
    break;

  case "Int64":
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.prototype.$key = function() { return string + "$" + this.$high + "$" + this.$low; };
    break;

  case "Uint64":
    typ = function(high, low) {
      this.$high = (high + Math.floor(Math.ceil(low) / 4294967296)) >>> 0;
      this.$low = low >>> 0;
      this.$val = this;
    };
    typ.prototype.$key = function() { return string + "$" + this.$high + "$" + this.$low; };
    break;

  case "Complex64":
  case "Complex128":
    typ = function(real, imag) {
      this.$real = real;
      this.$imag = imag;
      this.$val = this;
    };
    typ.prototype.$key = function() { return string + "$" + this.$real + "$" + this.$imag; };
    break;

  case "Array":
    typ = function(v) { this.$val = v; };
    typ.Ptr = $newType(4, "Ptr", "*" + string, "", "", function(array) {
      this.$get = function() { return array; };
      this.$val = array;
    });
    typ.init = function(elem, len) {
      typ.elem = elem;
      typ.len = len;
      typ.prototype.$key = function() {
        return string + "$" + Array.prototype.join.call($mapArray(this.$val, function(e) {
          var key = e.$key ? e.$key() : String(e);
          return key.replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }), "$");
      };
      typ.extendReflectType = function(rt) {
        rt.arrayType = new $reflect.arrayType.Ptr(rt, elem.reflectType(), undefined, len);
      };
      typ.Ptr.init(typ);
      Object.defineProperty(typ.Ptr.nil, "nilCheck", { get: $throwNilPointerError });
    };
    break;

  case "Chan":
    typ = function(capacity) {
      this.$val = this;
      this.$capacity = capacity;
      this.$buffer = [];
      this.$sendQueue = [];
      this.$recvQueue = [];
      this.$closed = false;
    };
    typ.prototype.$key = function() {
      if (this.$id === undefined) {
        $idCounter++;
        this.$id = $idCounter;
      }
      return String(this.$id);
    };
    typ.init = function(elem, sendOnly, recvOnly) {
      typ.elem = elem;
      typ.sendOnly = sendOnly;
      typ.recvOnly = recvOnly;
      typ.nil = new typ(0);
      typ.nil.$sendQueue = typ.nil.$recvQueue = { length: 0, push: function() {}, shift: function() { return undefined; }, indexOf: function() { return -1; } };
      typ.extendReflectType = function(rt) {
        rt.chanType = new $reflect.chanType.Ptr(rt, elem.reflectType(), sendOnly ? $reflect.SendDir : (recvOnly ? $reflect.RecvDir : $reflect.BothDir));
      };
    };
    break;

  case "Func":
    typ = function(v) { this.$val = v; };
    typ.init = function(params, results, variadic) {
      typ.params = params;
      typ.results = results;
      typ.variadic = variadic;
      typ.extendReflectType = function(rt) {
        var typeSlice = ($sliceType($ptrType($reflect.rtype.Ptr)));
        rt.funcType = new $reflect.funcType.Ptr(rt, variadic, new typeSlice($mapArray(params, function(p) { return p.reflectType(); })), new typeSlice($mapArray(results, function(p) { return p.reflectType(); })));
      };
    };
    break;

  case "Interface":
    typ = { implementedBy: {}, missingMethodFor: {} };
    typ.init = function(methods) {
      typ.methods = methods;
      typ.extendReflectType = function(rt) {
        var imethods = $mapArray(methods, function(m) {
          return new $reflect.imethod.Ptr($newStringPtr(m[1]), $newStringPtr(m[2]), m[3].reflectType());
        });
        var methodSlice = ($sliceType($ptrType($reflect.imethod.Ptr)));
        rt.interfaceType = new $reflect.interfaceType.Ptr(rt, new methodSlice(imethods));
      };
    };
    break;

  case "Map":
    typ = function(v) { this.$val = v; };
    typ.init = function(key, elem) {
      typ.key = key;
      typ.elem = elem;
      typ.extendReflectType = function(rt) {
        rt.mapType = new $reflect.mapType.Ptr(rt, key.reflectType(), elem.reflectType(), undefined, undefined);
      };
    };
    break;

  case "Ptr":
    typ = constructor || function(getter, setter, target) {
      this.$get = getter;
      this.$set = setter;
      this.$target = target;
      this.$val = this;
    };
    typ.prototype.$key = function() {
      if (this.$id === undefined) {
        $idCounter++;
        this.$id = $idCounter;
      }
      return String(this.$id);
    };
    typ.init = function(elem) {
      typ.nil = new typ($throwNilPointerError, $throwNilPointerError);
      typ.extendReflectType = function(rt) {
        rt.ptrType = new $reflect.ptrType.Ptr(rt, elem.reflectType());
      };
    };
    break;

  case "Slice":
    var nativeArray;
    typ = function(array) {
      if (array.constructor !== nativeArray) {
        array = new nativeArray(array);
      }
      this.$array = array;
      this.$offset = 0;
      this.$length = array.length;
      this.$capacity = array.length;
      this.$val = this;
    };
    typ.make = function(length, capacity) {
      capacity = capacity || length;
      var array = new nativeArray(capacity), i;
      if (nativeArray === Array) {
        for (i = 0; i < capacity; i++) {
          array[i] = typ.elem.zero();
        }
      }
      var slice = new typ(array);
      slice.$length = length;
      return slice;
    };
    typ.init = function(elem) {
      typ.elem = elem;
      nativeArray = $nativeArray(elem.kind);
      typ.nil = new typ([]);
      typ.extendReflectType = function(rt) {
        rt.sliceType = new $reflect.sliceType.Ptr(rt, elem.reflectType());
      };
    };
    break;

  case "Struct":
    typ = function(v) { this.$val = v; };
    typ.Ptr = $newType(4, "Ptr", "*" + string, "", "", constructor);
    typ.Ptr.Struct = typ;
    typ.Ptr.prototype.$get = function() { return this; };
    typ.init = function(fields) {
      var i;
      typ.fields = fields;
      typ.prototype.$key = function() {
        var val = this.$val;
        return string + "$" + $mapArray(fields, function(field) {
          var e = val[field[0]];
          var key = e.$key ? e.$key() : String(e);
          return key.replace(/\\/g, "\\\\").replace(/\$/g, "\\$");
        }).join("$");
      };
      typ.Ptr.extendReflectType = function(rt) {
        rt.ptrType = new $reflect.ptrType.Ptr(rt, typ.reflectType());
      };
      /* nil value */
      typ.Ptr.nil = Object.create(constructor.prototype);
      typ.Ptr.nil.$val = typ.Ptr.nil;
      for (i = 0; i < fields.length; i++) {
        var field = fields[i];
        Object.defineProperty(typ.Ptr.nil, field[0], { get: $throwNilPointerError, set: $throwNilPointerError });
      }
      /* methods for embedded fields */
      for (i = 0; i < typ.methods.length; i++) {
        var m = typ.methods[i];
        if (m[4] != -1) {
          (function(field, methodName) {
            typ.prototype[methodName] = function() {
              var v = this.$val[field[0]];
              return v[methodName].apply(v, arguments);
            };
          })(fields[m[4]], m[0]);
        }
      }
      for (i = 0; i < typ.Ptr.methods.length; i++) {
        var m = typ.Ptr.methods[i];
        if (m[4] != -1) {
          (function(field, methodName) {
            typ.Ptr.prototype[methodName] = function() {
              var v = this[field[0]];
              if (v.$val === undefined) {
                v = new field[3](v);
              }
              return v[methodName].apply(v, arguments);
            };
          })(fields[m[4]], m[0]);
        }
      }
      /* reflect type */
      typ.extendReflectType = function(rt) {
        var reflectFields = new Array(fields.length), i;
        for (i = 0; i < fields.length; i++) {
          var field = fields[i];
          reflectFields[i] = new $reflect.structField.Ptr($newStringPtr(field[1]), $newStringPtr(field[2]), field[3].reflectType(), $newStringPtr(field[4]), i);
        }
        rt.structType = new $reflect.structType.Ptr(rt, new ($sliceType($reflect.structField.Ptr))(reflectFields));
      };
    };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  switch(kind) {
  case "Bool":
  case "Map":
    typ.zero = function() { return false; };
    break;

  case "Int":
  case "Int8":
  case "Int16":
  case "Int32":
  case "Uint":
  case "Uint8" :
  case "Uint16":
  case "Uint32":
  case "Uintptr":
  case "UnsafePointer":
  case "Float32":
  case "Float64":
    typ.zero = function() { return 0; };
    break;

  case "String":
    typ.zero = function() { return ""; };
    break;

  case "Int64":
  case "Uint64":
  case "Complex64":
  case "Complex128":
    var zero = new typ(0, 0);
    typ.zero = function() { return zero; };
    break;

  case "Chan":
  case "Ptr":
  case "Slice":
    typ.zero = function() { return typ.nil; };
    break;

  case "Func":
    typ.zero = function() { return $throwNilPointerError; };
    break;

  case "Interface":
    typ.zero = function() { return $ifaceNil; };
    break;

  case "Array":
    typ.zero = function() {
      var arrayClass = $nativeArray(typ.elem.kind);
      if (arrayClass !== Array) {
        return new arrayClass(typ.len);
      }
      var array = new Array(typ.len), i;
      for (i = 0; i < typ.len; i++) {
        array[i] = typ.elem.zero();
      }
      return array;
    };
    break;

  case "Struct":
    typ.zero = function() { return new typ.Ptr(); };
    break;

  default:
    $panic(new $String("invalid kind: " + kind));
  }

  typ.kind = kind;
  typ.string = string;
  typ.typeName = name;
  typ.pkgPath = pkgPath;
  typ.methods = [];
  var rt = null;
  typ.reflectType = function() {
    if (rt === null) {
      rt = new $reflect.rtype.Ptr(size, 0, 0, 0, 0, $reflect.kinds[kind], undefined, undefined, $newStringPtr(string), undefined, undefined);
      rt.jsType = typ;

      var methods = [];
      if (typ.methods !== undefined) {
        var i;
        for (i = 0; i < typ.methods.length; i++) {
          var m = typ.methods[i];
          var t = m[3];
          methods.push(new $reflect.method.Ptr($newStringPtr(m[1]), $newStringPtr(m[2]), t.reflectType(), $funcType([typ].concat(t.params), t.results, t.variadic).reflectType(), undefined, undefined));
        }
      }
      if (name !== "" || methods.length !== 0) {
        var methodSlice = ($sliceType($ptrType($reflect.method.Ptr)));
        rt.uncommonType = new $reflect.uncommonType.Ptr($newStringPtr(name), $newStringPtr(pkgPath), new methodSlice(methods));
        rt.uncommonType.jsType = typ;
      }

      if (typ.extendReflectType !== undefined) {
        typ.extendReflectType(rt);
      }
    }
    return rt;
  };
  return typ;
};

var $Bool          = $newType( 1, "Bool",          "bool",           "bool",       "", null);
var $Int           = $newType( 4, "Int",           "int",            "int",        "", null);
var $Int8          = $newType( 1, "Int8",          "int8",           "int8",       "", null);
var $Int16         = $newType( 2, "Int16",         "int16",          "int16",      "", null);
var $Int32         = $newType( 4, "Int32",         "int32",          "int32",      "", null);
var $Int64         = $newType( 8, "Int64",         "int64",          "int64",      "", null);
var $Uint          = $newType( 4, "Uint",          "uint",           "uint",       "", null);
var $Uint8         = $newType( 1, "Uint8",         "uint8",          "uint8",      "", null);
var $Uint16        = $newType( 2, "Uint16",        "uint16",         "uint16",     "", null);
var $Uint32        = $newType( 4, "Uint32",        "uint32",         "uint32",     "", null);
var $Uint64        = $newType( 8, "Uint64",        "uint64",         "uint64",     "", null);
var $Uintptr       = $newType( 4, "Uintptr",       "uintptr",        "uintptr",    "", null);
var $Float32       = $newType( 4, "Float32",       "float32",        "float32",    "", null);
var $Float64       = $newType( 8, "Float64",       "float64",        "float64",    "", null);
var $Complex64     = $newType( 8, "Complex64",     "complex64",      "complex64",  "", null);
var $Complex128    = $newType(16, "Complex128",    "complex128",     "complex128", "", null);
var $String        = $newType( 8, "String",        "string",         "string",     "", null);
var $UnsafePointer = $newType( 4, "UnsafePointer", "unsafe.Pointer", "Pointer",    "", null);

var $nativeArray = function(elemKind) {
  return ({ Int: Int32Array, Int8: Int8Array, Int16: Int16Array, Int32: Int32Array, Uint: Uint32Array, Uint8: Uint8Array, Uint16: Uint16Array, Uint32: Uint32Array, Uintptr: Uint32Array, Float32: Float32Array, Float64: Float64Array })[elemKind] || Array;
};
var $toNativeArray = function(elemKind, array) {
  var nativeArray = $nativeArray(elemKind);
  if (nativeArray === Array) {
    return array;
  }
  return new nativeArray(array);
};
var $arrayTypes = {};
var $arrayType = function(elem, len) {
  var string = "[" + len + "]" + elem.string;
  var typ = $arrayTypes[string];
  if (typ === undefined) {
    typ = $newType(12, "Array", string, "", "", null);
    typ.init(elem, len);
    $arrayTypes[string] = typ;
  }
  return typ;
};

var $chanType = function(elem, sendOnly, recvOnly) {
  var string = (recvOnly ? "<-" : "") + "chan" + (sendOnly ? "<- " : " ") + elem.string;
  var field = sendOnly ? "SendChan" : (recvOnly ? "RecvChan" : "Chan");
  var typ = elem[field];
  if (typ === undefined) {
    typ = $newType(4, "Chan", string, "", "", null);
    typ.init(elem, sendOnly, recvOnly);
    elem[field] = typ;
  }
  return typ;
};

var $funcTypes = {};
var $funcType = function(params, results, variadic) {
  var paramTypes = $mapArray(params, function(p) { return p.string; });
  if (variadic) {
    paramTypes[paramTypes.length - 1] = "..." + paramTypes[paramTypes.length - 1].substr(2);
  }
  var string = "func(" + paramTypes.join(", ") + ")";
  if (results.length === 1) {
    string += " " + results[0].string;
  } else if (results.length > 1) {
    string += " (" + $mapArray(results, function(r) { return r.string; }).join(", ") + ")";
  }
  var typ = $funcTypes[string];
  if (typ === undefined) {
    typ = $newType(4, "Func", string, "", "", null);
    typ.init(params, results, variadic);
    $funcTypes[string] = typ;
  }
  return typ;
};

var $interfaceTypes = {};
var $interfaceType = function(methods) {
  var string = "interface {}";
  if (methods.length !== 0) {
    string = "interface { " + $mapArray(methods, function(m) {
      return (m[2] !== "" ? m[2] + "." : "") + m[1] + m[3].string.substr(4);
    }).join("; ") + " }";
  }
  var typ = $interfaceTypes[string];
  if (typ === undefined) {
    typ = $newType(8, "Interface", string, "", "", null);
    typ.init(methods);
    $interfaceTypes[string] = typ;
  }
  return typ;
};
var $emptyInterface = $interfaceType([]);
var $ifaceNil = { $key: function() { return "nil"; } };
var $error = $newType(8, "Interface", "error", "error", "", null);
$error.init([["Error", "Error", "", $funcType([], [$String], false)]]);

var $Map = function() {};
(function() {
  var names = Object.getOwnPropertyNames(Object.prototype), i;
  for (i = 0; i < names.length; i++) {
    $Map.prototype[names[i]] = undefined;
  }
})();
var $mapTypes = {};
var $mapType = function(key, elem) {
  var string = "map[" + key.string + "]" + elem.string;
  var typ = $mapTypes[string];
  if (typ === undefined) {
    typ = $newType(4, "Map", string, "", "", null);
    typ.init(key, elem);
    $mapTypes[string] = typ;
  }
  return typ;
};


var $throwNilPointerError = function() { $throwRuntimeError("invalid memory address or nil pointer dereference"); };
var $ptrType = function(elem) {
  var typ = elem.Ptr;
  if (typ === undefined) {
    typ = $newType(4, "Ptr", "*" + elem.string, "", "", null);
    typ.init(elem);
    elem.Ptr = typ;
  }
  return typ;
};

var $stringPtrMap = new $Map();
var $newStringPtr = function(str) {
  if (str === undefined || str === "") {
    return $ptrType($String).nil;
  }
  var ptr = $stringPtrMap[str];
  if (ptr === undefined) {
    ptr = new ($ptrType($String))(function() { return str; }, function(v) { str = v; });
    $stringPtrMap[str] = ptr;
  }
  return ptr;
};

var $newDataPointer = function(data, constructor) {
  if (constructor.Struct) {
    return data;
  }
  return new constructor(function() { return data; }, function(v) { data = v; });
};

var $sliceType = function(elem) {
  var typ = elem.Slice;
  if (typ === undefined) {
    typ = $newType(12, "Slice", "[]" + elem.string, "", "", null);
    typ.init(elem);
    elem.Slice = typ;
  }
  return typ;
};

var $structTypes = {};
var $structType = function(fields) {
  var string = "struct { " + $mapArray(fields, function(f) {
    return f[1] + " " + f[3].string + (f[4] !== "" ? (" \"" + f[4].replace(/\\/g, "\\\\").replace(/"/g, "\\\"") + "\"") : "");
  }).join("; ") + " }";
  if (fields.length === 0) {
    string = "struct {}";
  }
  var typ = $structTypes[string];
  if (typ === undefined) {
    typ = $newType(0, "Struct", string, "", "", function() {
      this.$val = this;
      var i;
      for (i = 0; i < fields.length; i++) {
        var field = fields[i];
        var arg = arguments[i];
        this[field[0]] = arg !== undefined ? arg : field[3].zero();
      }
    });
    /* collect methods for anonymous fields */
    var i, j;
    for (i = 0; i < fields.length; i++) {
      var field = fields[i];
      if (field[1] === "") {
        var methods = field[3].methods;
        for (j = 0; j < methods.length; j++) {
          var m = methods[j].slice(0, 6).concat([i]);
          typ.methods.push(m);
          typ.Ptr.methods.push(m);
        }
        if (field[3].kind === "Struct") {
          var methods = field[3].Ptr.methods;
          for (j = 0; j < methods.length; j++) {
            typ.Ptr.methods.push(methods[j].slice(0, 6).concat([i]));
          }
        }
      }
    }
    typ.init(fields);
    $structTypes[string] = typ;
  }
  return typ;
};

var $assertType = function(value, type, returnTuple) {
  var isInterface = (type.kind === "Interface"), ok, missingMethod = "";
  if (value === $ifaceNil) {
    ok = false;
  } else if (!isInterface) {
    ok = value.constructor === type;
  } else if (type.string === "js.Object") {
    ok = true;
  } else {
    var valueTypeString = value.constructor.string;
    ok = type.implementedBy[valueTypeString];
    if (ok === undefined) {
      ok = true;
      var valueMethods = value.constructor.methods;
      var typeMethods = type.methods;
      for (var i = 0; i < typeMethods.length; i++) {
        var tm = typeMethods[i];
        var found = false;
        for (var j = 0; j < valueMethods.length; j++) {
          var vm = valueMethods[j];
          if (vm[1] === tm[1] && vm[2] === tm[2] && vm[3] === tm[3]) {
            found = true;
            break;
          }
        }
        if (!found) {
          ok = false;
          type.missingMethodFor[valueTypeString] = tm[1];
          break;
        }
      }
      type.implementedBy[valueTypeString] = ok;
    }
    if (!ok) {
      missingMethod = type.missingMethodFor[valueTypeString];
    }
  }

  if (!ok) {
    if (returnTuple) {
      return [type.zero(), false];
    }
    $panic(new $packages["runtime"].TypeAssertionError.Ptr("", (value === $ifaceNil ? "" : value.constructor.string), type.string, missingMethod));
  }

  if (!isInterface) {
    value = value.$val;
  }
  return returnTuple ? [value, true] : value;
};

var $coerceFloat32 = function(f) {
  var math = $packages["math"];
  if (math === undefined) {
    return f;
  }
  return math.Float32frombits(math.Float32bits(f));
};

var $floatKey = function(f) {
  if (f !== f) {
    $idCounter++;
    return "NaN$" + $idCounter;
  }
  return String(f);
};

var $flatten64 = function(x) {
  return x.$high * 4294967296 + x.$low;
};

var $shiftLeft64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high << y | x.$low >>> (32 - y), (x.$low << y) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$low << (y - 32), 0);
  }
  return new x.constructor(0, 0);
};

var $shiftRightInt64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(x.$high >> 31, (x.$high >> (y - 32)) >>> 0);
  }
  if (x.$high < 0) {
    return new x.constructor(-1, 4294967295);
  }
  return new x.constructor(0, 0);
};

var $shiftRightUint64 = function(x, y) {
  if (y === 0) {
    return x;
  }
  if (y < 32) {
    return new x.constructor(x.$high >>> y, (x.$low >>> y | x.$high << (32 - y)) >>> 0);
  }
  if (y < 64) {
    return new x.constructor(0, x.$high >>> (y - 32));
  }
  return new x.constructor(0, 0);
};

var $mul64 = function(x, y) {
  var high = 0, low = 0, i;
  if ((y.$low & 1) !== 0) {
    high = x.$high;
    low = x.$low;
  }
  for (i = 1; i < 32; i++) {
    if ((y.$low & 1<<i) !== 0) {
      high += x.$high << i | x.$low >>> (32 - i);
      low += (x.$low << i) >>> 0;
    }
  }
  for (i = 0; i < 32; i++) {
    if ((y.$high & 1<<i) !== 0) {
      high += x.$low << i;
    }
  }
  return new x.constructor(high, low);
};

var $div64 = function(x, y, returnRemainder) {
  if (y.$high === 0 && y.$low === 0) {
    $throwRuntimeError("integer divide by zero");
  }

  var s = 1;
  var rs = 1;

  var xHigh = x.$high;
  var xLow = x.$low;
  if (xHigh < 0) {
    s = -1;
    rs = -1;
    xHigh = -xHigh;
    if (xLow !== 0) {
      xHigh--;
      xLow = 4294967296 - xLow;
    }
  }

  var yHigh = y.$high;
  var yLow = y.$low;
  if (y.$high < 0) {
    s *= -1;
    yHigh = -yHigh;
    if (yLow !== 0) {
      yHigh--;
      yLow = 4294967296 - yLow;
    }
  }

  var high = 0, low = 0, n = 0, i;
  while (yHigh < 2147483648 && ((xHigh > yHigh) || (xHigh === yHigh && xLow > yLow))) {
    yHigh = (yHigh << 1 | yLow >>> 31) >>> 0;
    yLow = (yLow << 1) >>> 0;
    n++;
  }
  for (i = 0; i <= n; i++) {
    high = high << 1 | low >>> 31;
    low = (low << 1) >>> 0;
    if ((xHigh > yHigh) || (xHigh === yHigh && xLow >= yLow)) {
      xHigh = xHigh - yHigh;
      xLow = xLow - yLow;
      if (xLow < 0) {
        xHigh--;
        xLow += 4294967296;
      }
      low++;
      if (low === 4294967296) {
        high++;
        low = 0;
      }
    }
    yLow = (yLow >>> 1 | yHigh << (32 - 1)) >>> 0;
    yHigh = yHigh >>> 1;
  }

  if (returnRemainder) {
    return new x.constructor(xHigh * rs, xLow * rs);
  }
  return new x.constructor(high * s, low * s);
};

var $divComplex = function(n, d) {
  var ninf = n.$real === 1/0 || n.$real === -1/0 || n.$imag === 1/0 || n.$imag === -1/0;
  var dinf = d.$real === 1/0 || d.$real === -1/0 || d.$imag === 1/0 || d.$imag === -1/0;
  var nnan = !ninf && (n.$real !== n.$real || n.$imag !== n.$imag);
  var dnan = !dinf && (d.$real !== d.$real || d.$imag !== d.$imag);
  if(nnan || dnan) {
    return new n.constructor(0/0, 0/0);
  }
  if (ninf && !dinf) {
    return new n.constructor(1/0, 1/0);
  }
  if (!ninf && dinf) {
    return new n.constructor(0, 0);
  }
  if (d.$real === 0 && d.$imag === 0) {
    if (n.$real === 0 && n.$imag === 0) {
      return new n.constructor(0/0, 0/0);
    }
    return new n.constructor(1/0, 1/0);
  }
  var a = Math.abs(d.$real);
  var b = Math.abs(d.$imag);
  if (a <= b) {
    var ratio = d.$real / d.$imag;
    var denom = d.$real * ratio + d.$imag;
    return new n.constructor((n.$real * ratio + n.$imag) / denom, (n.$imag * ratio - n.$real) / denom);
  }
  var ratio = d.$imag / d.$real;
  var denom = d.$imag * ratio + d.$real;
  return new n.constructor((n.$imag * ratio + n.$real) / denom, (n.$imag - n.$real * ratio) / denom);
};

var $stackDepthOffset = 0;
var $getStackDepth = function() {
  var err = new Error();
  if (err.stack === undefined) {
    return undefined;
  }
  return $stackDepthOffset + err.stack.split("\n").length;
};

var $deferFrames = [], $skippedDeferFrames = 0, $jumpToDefer = false, $panicStackDepth = null, $panicValue;
var $callDeferred = function(deferred, jsErr) {
  if ($skippedDeferFrames !== 0) {
    $skippedDeferFrames--;
    throw jsErr;
  }
  if ($jumpToDefer) {
    $jumpToDefer = false;
    throw jsErr;
  }
  if (jsErr) {
    var newErr = null;
    try {
      $deferFrames.push(deferred);
      $panic(new $packages["github.com/gopherjs/gopherjs/js"].Error.Ptr(jsErr));
    } catch (err) {
      newErr = err;
    }
    $deferFrames.pop();
    $callDeferred(deferred, newErr);
    return;
  }

  $stackDepthOffset--;
  var outerPanicStackDepth = $panicStackDepth;
  var outerPanicValue = $panicValue;

  var localPanicValue = $curGoroutine.panicStack.pop();
  if (localPanicValue !== undefined) {
    $panicStackDepth = $getStackDepth();
    $panicValue = localPanicValue;
  }

  var call, localSkippedDeferFrames = 0;
  try {
    while (true) {
      if (deferred === null) {
        deferred = $deferFrames[$deferFrames.length - 1 - localSkippedDeferFrames];
        if (deferred === undefined) {
          var msg;
          if (localPanicValue.constructor === $String) {
            msg = localPanicValue.$val;
          } else if (localPanicValue.Error !== undefined) {
            msg = localPanicValue.Error();
          } else if (localPanicValue.String !== undefined) {
            msg = localPanicValue.String();
          } else {
            msg = localPanicValue;
          }
          var e = new Error(msg);
          if (localPanicValue.Stack !== undefined) {
            e.stack = localPanicValue.Stack();
            e.stack = msg + e.stack.substr(e.stack.indexOf("\n"));
          }
          throw e;
        }
      }
      var call = deferred.pop();
      if (call === undefined) {
        if (localPanicValue !== undefined) {
          localSkippedDeferFrames++;
          deferred = null;
          continue;
        }
        return;
      }
      var r = call[0].apply(undefined, call[1]);
      if (r && r.$blocking) {
        deferred.push([r, []]);
      }

      if (localPanicValue !== undefined && $panicStackDepth === null) {
        throw null; /* error was recovered */
      }
    }
  } finally {
    $skippedDeferFrames += localSkippedDeferFrames;
    if ($curGoroutine.asleep) {
      deferred.push(call);
      $jumpToDefer = true;
    }
    if (localPanicValue !== undefined) {
      if ($panicStackDepth !== null) {
        $curGoroutine.panicStack.push(localPanicValue);
      }
      $panicStackDepth = outerPanicStackDepth;
      $panicValue = outerPanicValue;
    }
    $stackDepthOffset++;
  }
};

var $panic = function(value) {
  $curGoroutine.panicStack.push(value);
  $callDeferred(null, null);
};
var $recover = function() {
  if ($panicStackDepth === null || ($panicStackDepth !== undefined && $panicStackDepth !== $getStackDepth() - 2)) {
    return $ifaceNil;
  }
  $panicStackDepth = null;
  return $panicValue;
};
var $nonblockingCall = function() {
  $panic(new $packages["runtime"].NotSupportedError.Ptr("non-blocking call to blocking function (mark call with \"//gopherjs:blocking\" to fix)"));
};
var $throw = function(err) { throw err; };
var $throwRuntimeError; /* set by package "runtime" */

var $dummyGoroutine = { asleep: false, exit: false, panicStack: [] };
var $curGoroutine = $dummyGoroutine, $totalGoroutines = 0, $awakeGoroutines = 0, $checkForDeadlock = true;
var $go = function(fun, args, direct) {
  $totalGoroutines++;
  $awakeGoroutines++;
  args.push(true);
  var goroutine = function() {
    var rescheduled = false;
    try {
      $curGoroutine = goroutine;
      $skippedDeferFrames = 0;
      $jumpToDefer = false;
      var r = fun.apply(undefined, args);
      if (r && r.$blocking) {
        fun = r;
        args = [];
        $schedule(goroutine, direct);
        rescheduled = true;
        return;
      }
      goroutine.exit = true;
    } catch (err) {
      if (!$curGoroutine.asleep) {
        goroutine.exit = true;
        throw err;
      }
    } finally {
      $curGoroutine = $dummyGoroutine;
      if (goroutine.exit && !rescheduled) { /* also set by runtime.Goexit() */
        $totalGoroutines--;
        goroutine.asleep = true;
      }
      if (goroutine.asleep && !rescheduled) {
        $awakeGoroutines--;
        if ($awakeGoroutines === 0 && $totalGoroutines !== 0 && $checkForDeadlock) {
          console.error("fatal error: all goroutines are asleep - deadlock!");
        }
      }
    }
  };
  goroutine.asleep = false;
  goroutine.exit = false;
  goroutine.panicStack = [];
  $schedule(goroutine, direct);
};

var $scheduled = [], $schedulerLoopActive = false;
var $schedule = function(goroutine, direct) {
  if (goroutine.asleep) {
    goroutine.asleep = false;
    $awakeGoroutines++;
  }

  if (direct) {
    goroutine();
    return;
  }

  $scheduled.push(goroutine);
  if (!$schedulerLoopActive) {
    $schedulerLoopActive = true;
    setTimeout(function() {
      while (true) {
        var r = $scheduled.shift();
        if (r === undefined) {
          $schedulerLoopActive = false;
          break;
        }
        r();
      };
    }, 0);
  }
};

var $send = function(chan, value) {
  if (chan.$closed) {
    $throwRuntimeError("send on closed channel");
  }
  var queuedRecv = chan.$recvQueue.shift();
  if (queuedRecv !== undefined) {
    queuedRecv([value, true]);
    return;
  }
  if (chan.$buffer.length < chan.$capacity) {
    chan.$buffer.push(value);
    return;
  }

  var thisGoroutine = $curGoroutine;
  chan.$sendQueue.push(function() {
    $schedule(thisGoroutine);
    return value;
  });
  var blocked = false;
  var f = function() {
    if (blocked) {
      if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
      }
      return;
    };
    blocked = true;
    $curGoroutine.asleep = true;
    throw null;
  };
  f.$blocking = true;
  return f;
};
var $recv = function(chan) {
  var queuedSend = chan.$sendQueue.shift();
  if (queuedSend !== undefined) {
    chan.$buffer.push(queuedSend());
  }
  var bufferedValue = chan.$buffer.shift();
  if (bufferedValue !== undefined) {
    return [bufferedValue, true];
  }
  if (chan.$closed) {
    return [chan.constructor.elem.zero(), false];
  }

  var thisGoroutine = $curGoroutine, value;
  var queueEntry = function(v) {
    value = v;
    $schedule(thisGoroutine);
  };
  chan.$recvQueue.push(queueEntry);
  var blocked = false;
  var f = function() {
    if (blocked) {
      return value;
    };
    blocked = true;
    $curGoroutine.asleep = true;
    throw null;
  };
  f.$blocking = true;
  return f;
};
var $close = function(chan) {
  if (chan.$closed) {
    $throwRuntimeError("close of closed channel");
  }
  chan.$closed = true;
  while (true) {
    var queuedSend = chan.$sendQueue.shift();
    if (queuedSend === undefined) {
      break;
    }
    queuedSend(); /* will panic because of closed channel */
  }
  while (true) {
    var queuedRecv = chan.$recvQueue.shift();
    if (queuedRecv === undefined) {
      break;
    }
    queuedRecv([chan.constructor.elem.zero(), false]);
  }
};
var $select = function(comms) {
  var ready = [], i;
  var selection = -1;
  for (i = 0; i < comms.length; i++) {
    var comm = comms[i];
    var chan = comm[0];
    switch (comm.length) {
    case 0: /* default */
      selection = i;
      break;
    case 1: /* recv */
      if (chan.$sendQueue.length !== 0 || chan.$buffer.length !== 0 || chan.$closed) {
        ready.push(i);
      }
      break;
    case 2: /* send */
      if (chan.$closed) {
        $throwRuntimeError("send on closed channel");
      }
      if (chan.$recvQueue.length !== 0 || chan.$buffer.length < chan.$capacity) {
        ready.push(i);
      }
      break;
    }
  }

  if (ready.length !== 0) {
    selection = ready[Math.floor(Math.random() * ready.length)];
  }
  if (selection !== -1) {
    var comm = comms[selection];
    switch (comm.length) {
    case 0: /* default */
      return [selection];
    case 1: /* recv */
      return [selection, $recv(comm[0])];
    case 2: /* send */
      $send(comm[0], comm[1]);
      return [selection];
    }
  }

  var entries = [];
  var thisGoroutine = $curGoroutine;
  var removeFromQueues = function() {
    for (i = 0; i < entries.length; i++) {
      var entry = entries[i];
      var queue = entry[0];
      var index = queue.indexOf(entry[1]);
      if (index !== -1) {
        queue.splice(index, 1);
      }
    }
  };
  for (i = 0; i < comms.length; i++) {
    (function(i) {
      var comm = comms[i];
      switch (comm.length) {
      case 1: /* recv */
        var queueEntry = function(value) {
          selection = [i, value];
          removeFromQueues();
          $schedule(thisGoroutine);
        };
        entries.push([comm[0].$recvQueue, queueEntry]);
        comm[0].$recvQueue.push(queueEntry);
        break;
      case 2: /* send */
        var queueEntry = function() {
          if (comm[0].$closed) {
            $throwRuntimeError("send on closed channel");
          }
          selection = [i];
          removeFromQueues();
          $schedule(thisGoroutine);
          return comm[1];
        };
        entries.push([comm[0].$sendQueue, queueEntry]);
        comm[0].$sendQueue.push(queueEntry);
        break;
      }
    })(i);
  }
  var blocked = false;
  var f = function() {
    if (blocked) {
      return selection;
    };
    blocked = true;
    $curGoroutine.asleep = true;
    throw null;
  };
  f.$blocking = true;
  return f;
};

var $needsExternalization = function(t) {
  switch (t.kind) {
    case "Bool":
    case "Int":
    case "Int8":
    case "Int16":
    case "Int32":
    case "Uint":
    case "Uint8":
    case "Uint16":
    case "Uint32":
    case "Uintptr":
    case "Float32":
    case "Float64":
      return false;
    case "Interface":
      return t !== $packages["github.com/gopherjs/gopherjs/js"].Object;
    default:
      return true;
  }
};

var $externalize = function(v, t) {
  switch (t.kind) {
  case "Bool":
  case "Int":
  case "Int8":
  case "Int16":
  case "Int32":
  case "Uint":
  case "Uint8":
  case "Uint16":
  case "Uint32":
  case "Uintptr":
  case "Float32":
  case "Float64":
    return v;
  case "Int64":
  case "Uint64":
    return $flatten64(v);
  case "Array":
    if ($needsExternalization(t.elem)) {
      return $mapArray(v, function(e) { return $externalize(e, t.elem); });
    }
    return v;
  case "Func":
    if (v === $throwNilPointerError) {
      return null;
    }
    if (v.$externalizeWrapper === undefined) {
      $checkForDeadlock = false;
      var convert = false;
      var i;
      for (i = 0; i < t.params.length; i++) {
        convert = convert || (t.params[i] !== $packages["github.com/gopherjs/gopherjs/js"].Object);
      }
      for (i = 0; i < t.results.length; i++) {
        convert = convert || $needsExternalization(t.results[i]);
      }
      if (!convert) {
        return v;
      }
      v.$externalizeWrapper = function() {
        var args = [], i;
        for (i = 0; i < t.params.length; i++) {
          if (t.variadic && i === t.params.length - 1) {
            var vt = t.params[i].elem, varargs = [], j;
            for (j = i; j < arguments.length; j++) {
              varargs.push($internalize(arguments[j], vt));
            }
            args.push(new (t.params[i])(varargs));
            break;
          }
          args.push($internalize(arguments[i], t.params[i]));
        }
        var result = v.apply(this, args);
        switch (t.results.length) {
        case 0:
          return;
        case 1:
          return $externalize(result, t.results[0]);
        default:
          for (i = 0; i < t.results.length; i++) {
            result[i] = $externalize(result[i], t.results[i]);
          }
          return result;
        }
      };
    }
    return v.$externalizeWrapper;
  case "Interface":
    if (v === $ifaceNil) {
      return null;
    }
    if (t === $packages["github.com/gopherjs/gopherjs/js"].Object || v.constructor.kind === undefined) {
      return v;
    }
    return $externalize(v.$val, v.constructor);
  case "Map":
    var m = {};
    var keys = $keys(v), i;
    for (i = 0; i < keys.length; i++) {
      var entry = v[keys[i]];
      m[$externalize(entry.k, t.key)] = $externalize(entry.v, t.elem);
    }
    return m;
  case "Ptr":
    var o = {}, i;
    for (i = 0; i < t.methods.length; i++) {
      var m = t.methods[i];
      if (m[2] !== "") { /* not exported */
        continue;
      }
      (function(m) {
        o[m[1]] = $externalize(function() {
          return v[m[0]].apply(v, arguments);
        }, m[3]);
      })(m);
    }
    return o;
  case "Slice":
    if ($needsExternalization(t.elem)) {
      return $mapArray($sliceToArray(v), function(e) { return $externalize(e, t.elem); });
    }
    return $sliceToArray(v);
  case "String":
    var s = "", r, i, j = 0;
    for (i = 0; i < v.length; i += r[1], j++) {
      r = $decodeRune(v, i);
      s += String.fromCharCode(r[0]);
    }
    return s;
  case "Struct":
    var timePkg = $packages["time"];
    if (timePkg && v.constructor === timePkg.Time.Ptr) {
      var milli = $div64(v.UnixNano(), new $Int64(0, 1000000));
      return new Date($flatten64(milli));
    }
    var o = {}, i;
    for (i = 0; i < t.fields.length; i++) {
      var f = t.fields[i];
      if (f[2] !== "") { /* not exported */
        continue;
      }
      o[f[1]] = $externalize(v[f[0]], f[3]);
    }
    return o;
  }
  $panic(new $String("cannot externalize " + t.string));
};

var $internalize = function(v, t, recv) {
  switch (t.kind) {
  case "Bool":
    return !!v;
  case "Int":
    return parseInt(v);
  case "Int8":
    return parseInt(v) << 24 >> 24;
  case "Int16":
    return parseInt(v) << 16 >> 16;
  case "Int32":
    return parseInt(v) >> 0;
  case "Uint":
    return parseInt(v);
  case "Uint8":
    return parseInt(v) << 24 >>> 24;
  case "Uint16":
    return parseInt(v) << 16 >>> 16;
  case "Uint32":
  case "Uintptr":
    return parseInt(v) >>> 0;
  case "Int64":
  case "Uint64":
    return new t(0, v);
  case "Float32":
  case "Float64":
    return parseFloat(v);
  case "Array":
    if (v.length !== t.len) {
      $throwRuntimeError("got array with wrong size from JavaScript native");
    }
    return $mapArray(v, function(e) { return $internalize(e, t.elem); });
  case "Func":
    return function() {
      var args = [], i;
      for (i = 0; i < t.params.length; i++) {
        if (t.variadic && i === t.params.length - 1) {
          var vt = t.params[i].elem, varargs = arguments[i], j;
          for (j = 0; j < varargs.$length; j++) {
            args.push($externalize(varargs.$array[varargs.$offset + j], vt));
          }
          break;
        }
        args.push($externalize(arguments[i], t.params[i]));
      }
      var result = v.apply(recv, args);
      switch (t.results.length) {
      case 0:
        return;
      case 1:
        return $internalize(result, t.results[0]);
      default:
        for (i = 0; i < t.results.length; i++) {
          result[i] = $internalize(result[i], t.results[i]);
        }
        return result;
      }
    };
  case "Interface":
    if (t === $packages["github.com/gopherjs/gopherjs/js"].Object) {
      return v;
    }
    if (v === null) {
      return $ifaceNil;
    }
    switch (v.constructor) {
    case Int8Array:
      return new ($sliceType($Int8))(v);
    case Int16Array:
      return new ($sliceType($Int16))(v);
    case Int32Array:
      return new ($sliceType($Int))(v);
    case Uint8Array:
      return new ($sliceType($Uint8))(v);
    case Uint16Array:
      return new ($sliceType($Uint16))(v);
    case Uint32Array:
      return new ($sliceType($Uint))(v);
    case Float32Array:
      return new ($sliceType($Float32))(v);
    case Float64Array:
      return new ($sliceType($Float64))(v);
    case Array:
      return $internalize(v, $sliceType($emptyInterface));
    case Boolean:
      return new $Bool(!!v);
    case Date:
      var timePkg = $packages["time"];
      if (timePkg) {
        return new timePkg.Time(timePkg.Unix(new $Int64(0, 0), new $Int64(0, v.getTime() * 1000000)));
      }
    case Function:
      var funcType = $funcType([$sliceType($emptyInterface)], [$packages["github.com/gopherjs/gopherjs/js"].Object], true);
      return new funcType($internalize(v, funcType));
    case Number:
      return new $Float64(parseFloat(v));
    case String:
      return new $String($internalize(v, $String));
    default:
      if ($global.Node && v instanceof $global.Node) {
        return v;
      }
      var mapType = $mapType($String, $emptyInterface);
      return new mapType($internalize(v, mapType));
    }
  case "Map":
    var m = new $Map();
    var keys = $keys(v), i;
    for (i = 0; i < keys.length; i++) {
      var key = $internalize(keys[i], t.key);
      m[key.$key ? key.$key() : key] = { k: key, v: $internalize(v[keys[i]], t.elem) };
    }
    return m;
  case "Slice":
    return new t($mapArray(v, function(e) { return $internalize(e, t.elem); }));
  case "String":
    v = String(v);
    var s = "", i;
    for (i = 0; i < v.length; i++) {
      s += $encodeRune(v.charCodeAt(i));
    }
    return s;
  default:
    $panic(new $String("cannot internalize " + t.string));
  }
};

$packages["github.com/gopherjs/gopherjs/js"] = (function() {
	var $pkg = {}, Object, Error, init;
	Object = $pkg.Object = $newType(8, "Interface", "js.Object", "Object", "github.com/gopherjs/gopherjs/js", null);
	Error = $pkg.Error = $newType(0, "Struct", "js.Error", "Error", "github.com/gopherjs/gopherjs/js", function(Object_) {
		this.$val = this;
		this.Object = Object_ !== undefined ? Object_ : $ifaceNil;
	});
	Error.Ptr.prototype.Error = function() {
		var err;
		err = this;
		return "JavaScript error: " + $internalize(err.Object.message, $String);
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Error.Ptr.prototype.Stack = function() {
		var err;
		err = this;
		return $internalize(err.Object.stack, $String);
	};
	Error.prototype.Stack = function() { return this.$val.Stack(); };
	init = function() {
		var e;
		e = new Error.Ptr($ifaceNil);
	};
	$pkg.$init = function() {
		Object.init([["Bool", "Bool", "", $funcType([], [$Bool], false)], ["Call", "Call", "", $funcType([$String, ($sliceType($emptyInterface))], [Object], true)], ["Delete", "Delete", "", $funcType([$String], [], false)], ["Float", "Float", "", $funcType([], [$Float64], false)], ["Get", "Get", "", $funcType([$String], [Object], false)], ["Index", "Index", "", $funcType([$Int], [Object], false)], ["Int", "Int", "", $funcType([], [$Int], false)], ["Int64", "Int64", "", $funcType([], [$Int64], false)], ["Interface", "Interface", "", $funcType([], [$emptyInterface], false)], ["Invoke", "Invoke", "", $funcType([($sliceType($emptyInterface))], [Object], true)], ["IsNull", "IsNull", "", $funcType([], [$Bool], false)], ["IsUndefined", "IsUndefined", "", $funcType([], [$Bool], false)], ["Length", "Length", "", $funcType([], [$Int], false)], ["New", "New", "", $funcType([($sliceType($emptyInterface))], [Object], true)], ["Set", "Set", "", $funcType([$String, $emptyInterface], [], false)], ["SetIndex", "SetIndex", "", $funcType([$Int, $emptyInterface], [], false)], ["Str", "Str", "", $funcType([], [$String], false)], ["Uint64", "Uint64", "", $funcType([], [$Uint64], false)], ["Unsafe", "Unsafe", "", $funcType([], [$Uintptr], false)]]);
		Error.methods = [["Bool", "Bool", "", $funcType([], [$Bool], false), 0], ["Call", "Call", "", $funcType([$String, ($sliceType($emptyInterface))], [Object], true), 0], ["Delete", "Delete", "", $funcType([$String], [], false), 0], ["Float", "Float", "", $funcType([], [$Float64], false), 0], ["Get", "Get", "", $funcType([$String], [Object], false), 0], ["Index", "Index", "", $funcType([$Int], [Object], false), 0], ["Int", "Int", "", $funcType([], [$Int], false), 0], ["Int64", "Int64", "", $funcType([], [$Int64], false), 0], ["Interface", "Interface", "", $funcType([], [$emptyInterface], false), 0], ["Invoke", "Invoke", "", $funcType([($sliceType($emptyInterface))], [Object], true), 0], ["IsNull", "IsNull", "", $funcType([], [$Bool], false), 0], ["IsUndefined", "IsUndefined", "", $funcType([], [$Bool], false), 0], ["Length", "Length", "", $funcType([], [$Int], false), 0], ["New", "New", "", $funcType([($sliceType($emptyInterface))], [Object], true), 0], ["Set", "Set", "", $funcType([$String, $emptyInterface], [], false), 0], ["SetIndex", "SetIndex", "", $funcType([$Int, $emptyInterface], [], false), 0], ["Str", "Str", "", $funcType([], [$String], false), 0], ["Uint64", "Uint64", "", $funcType([], [$Uint64], false), 0], ["Unsafe", "Unsafe", "", $funcType([], [$Uintptr], false), 0]];
		($ptrType(Error)).methods = [["Bool", "Bool", "", $funcType([], [$Bool], false), 0], ["Call", "Call", "", $funcType([$String, ($sliceType($emptyInterface))], [Object], true), 0], ["Delete", "Delete", "", $funcType([$String], [], false), 0], ["Error", "Error", "", $funcType([], [$String], false), -1], ["Float", "Float", "", $funcType([], [$Float64], false), 0], ["Get", "Get", "", $funcType([$String], [Object], false), 0], ["Index", "Index", "", $funcType([$Int], [Object], false), 0], ["Int", "Int", "", $funcType([], [$Int], false), 0], ["Int64", "Int64", "", $funcType([], [$Int64], false), 0], ["Interface", "Interface", "", $funcType([], [$emptyInterface], false), 0], ["Invoke", "Invoke", "", $funcType([($sliceType($emptyInterface))], [Object], true), 0], ["IsNull", "IsNull", "", $funcType([], [$Bool], false), 0], ["IsUndefined", "IsUndefined", "", $funcType([], [$Bool], false), 0], ["Length", "Length", "", $funcType([], [$Int], false), 0], ["New", "New", "", $funcType([($sliceType($emptyInterface))], [Object], true), 0], ["Set", "Set", "", $funcType([$String, $emptyInterface], [], false), 0], ["SetIndex", "SetIndex", "", $funcType([$Int, $emptyInterface], [], false), 0], ["Stack", "Stack", "", $funcType([], [$String], false), -1], ["Str", "Str", "", $funcType([], [$String], false), 0], ["Uint64", "Uint64", "", $funcType([], [$Uint64], false), 0], ["Unsafe", "Unsafe", "", $funcType([], [$Uintptr], false), 0]];
		Error.init([["Object", "", "", Object, ""]]);
		init();
	};
	return $pkg;
})();
$packages["runtime"] = (function() {
	var $pkg = {}, js = $packages["github.com/gopherjs/gopherjs/js"], NotSupportedError, Error, TypeAssertionError, errorString, MemStats, sizeof_C_MStats, init, getgoroot, Caller, Goexit, GOMAXPROCS, ReadMemStats, SetFinalizer, Stack, GOROOT, init$1;
	NotSupportedError = $pkg.NotSupportedError = $newType(0, "Struct", "runtime.NotSupportedError", "NotSupportedError", "runtime", function(Feature_) {
		this.$val = this;
		this.Feature = Feature_ !== undefined ? Feature_ : "";
	});
	Error = $pkg.Error = $newType(8, "Interface", "runtime.Error", "Error", "runtime", null);
	TypeAssertionError = $pkg.TypeAssertionError = $newType(0, "Struct", "runtime.TypeAssertionError", "TypeAssertionError", "runtime", function(interfaceString_, concreteString_, assertedString_, missingMethod_) {
		this.$val = this;
		this.interfaceString = interfaceString_ !== undefined ? interfaceString_ : "";
		this.concreteString = concreteString_ !== undefined ? concreteString_ : "";
		this.assertedString = assertedString_ !== undefined ? assertedString_ : "";
		this.missingMethod = missingMethod_ !== undefined ? missingMethod_ : "";
	});
	errorString = $pkg.errorString = $newType(8, "String", "runtime.errorString", "errorString", "runtime", null);
	MemStats = $pkg.MemStats = $newType(0, "Struct", "runtime.MemStats", "MemStats", "runtime", function(Alloc_, TotalAlloc_, Sys_, Lookups_, Mallocs_, Frees_, HeapAlloc_, HeapSys_, HeapIdle_, HeapInuse_, HeapReleased_, HeapObjects_, StackInuse_, StackSys_, MSpanInuse_, MSpanSys_, MCacheInuse_, MCacheSys_, BuckHashSys_, GCSys_, OtherSys_, NextGC_, LastGC_, PauseTotalNs_, PauseNs_, NumGC_, EnableGC_, DebugGC_, BySize_) {
		this.$val = this;
		this.Alloc = Alloc_ !== undefined ? Alloc_ : new $Uint64(0, 0);
		this.TotalAlloc = TotalAlloc_ !== undefined ? TotalAlloc_ : new $Uint64(0, 0);
		this.Sys = Sys_ !== undefined ? Sys_ : new $Uint64(0, 0);
		this.Lookups = Lookups_ !== undefined ? Lookups_ : new $Uint64(0, 0);
		this.Mallocs = Mallocs_ !== undefined ? Mallocs_ : new $Uint64(0, 0);
		this.Frees = Frees_ !== undefined ? Frees_ : new $Uint64(0, 0);
		this.HeapAlloc = HeapAlloc_ !== undefined ? HeapAlloc_ : new $Uint64(0, 0);
		this.HeapSys = HeapSys_ !== undefined ? HeapSys_ : new $Uint64(0, 0);
		this.HeapIdle = HeapIdle_ !== undefined ? HeapIdle_ : new $Uint64(0, 0);
		this.HeapInuse = HeapInuse_ !== undefined ? HeapInuse_ : new $Uint64(0, 0);
		this.HeapReleased = HeapReleased_ !== undefined ? HeapReleased_ : new $Uint64(0, 0);
		this.HeapObjects = HeapObjects_ !== undefined ? HeapObjects_ : new $Uint64(0, 0);
		this.StackInuse = StackInuse_ !== undefined ? StackInuse_ : new $Uint64(0, 0);
		this.StackSys = StackSys_ !== undefined ? StackSys_ : new $Uint64(0, 0);
		this.MSpanInuse = MSpanInuse_ !== undefined ? MSpanInuse_ : new $Uint64(0, 0);
		this.MSpanSys = MSpanSys_ !== undefined ? MSpanSys_ : new $Uint64(0, 0);
		this.MCacheInuse = MCacheInuse_ !== undefined ? MCacheInuse_ : new $Uint64(0, 0);
		this.MCacheSys = MCacheSys_ !== undefined ? MCacheSys_ : new $Uint64(0, 0);
		this.BuckHashSys = BuckHashSys_ !== undefined ? BuckHashSys_ : new $Uint64(0, 0);
		this.GCSys = GCSys_ !== undefined ? GCSys_ : new $Uint64(0, 0);
		this.OtherSys = OtherSys_ !== undefined ? OtherSys_ : new $Uint64(0, 0);
		this.NextGC = NextGC_ !== undefined ? NextGC_ : new $Uint64(0, 0);
		this.LastGC = LastGC_ !== undefined ? LastGC_ : new $Uint64(0, 0);
		this.PauseTotalNs = PauseTotalNs_ !== undefined ? PauseTotalNs_ : new $Uint64(0, 0);
		this.PauseNs = PauseNs_ !== undefined ? PauseNs_ : ($arrayType($Uint64, 256)).zero();
		this.NumGC = NumGC_ !== undefined ? NumGC_ : 0;
		this.EnableGC = EnableGC_ !== undefined ? EnableGC_ : false;
		this.DebugGC = DebugGC_ !== undefined ? DebugGC_ : false;
		this.BySize = BySize_ !== undefined ? BySize_ : ($arrayType(($structType([["Size", "Size", "", $Uint32, ""], ["Mallocs", "Mallocs", "", $Uint64, ""], ["Frees", "Frees", "", $Uint64, ""]])), 61)).zero();
	});
	NotSupportedError.Ptr.prototype.Error = function() {
		var err;
		err = this;
		return "not supported by GopherJS: " + err.Feature;
	};
	NotSupportedError.prototype.Error = function() { return this.$val.Error(); };
	init = function() {
		var e;
		$throwRuntimeError = (function(msg) {
			$panic(new errorString(msg));
		});
		e = $ifaceNil;
		e = new TypeAssertionError.Ptr("", "", "", "");
		e = new NotSupportedError.Ptr("");
	};
	getgoroot = function() {
		var process, goroot;
		process = $global.process;
		if (process === undefined) {
			return "/";
		}
		goroot = process.env.GOROOT;
		if (goroot === undefined) {
			return "";
		}
		return $internalize(goroot, $String);
	};
	Caller = $pkg.Caller = function(skip) {
		var pc = 0, file = "", line = 0, ok = false, info, _tmp, _tmp$1, _tmp$2, _tmp$3, parts, _tmp$4, _tmp$5, _tmp$6, _tmp$7;
		info = new ($global.Error)().stack.split($externalize("\n", $String))[(skip + 2 >> 0)];
		if (info === undefined) {
			_tmp = 0; _tmp$1 = ""; _tmp$2 = 0; _tmp$3 = false; pc = _tmp; file = _tmp$1; line = _tmp$2; ok = _tmp$3;
			return [pc, file, line, ok];
		}
		parts = info.substring(($parseInt(info.indexOf($externalize("(", $String))) >> 0) + 1 >> 0, $parseInt(info.indexOf($externalize(")", $String))) >> 0).split($externalize(":", $String));
		_tmp$4 = 0; _tmp$5 = $internalize(parts[0], $String); _tmp$6 = $parseInt(parts[1]) >> 0; _tmp$7 = true; pc = _tmp$4; file = _tmp$5; line = _tmp$6; ok = _tmp$7;
		return [pc, file, line, ok];
	};
	Goexit = $pkg.Goexit = function() {
		$curGoroutine.exit = $externalize(true, $Bool);
		$throw(null);
	};
	GOMAXPROCS = $pkg.GOMAXPROCS = function(n) {
		if (n > 1) {
			$panic(new NotSupportedError.Ptr("GOMAXPROCS > 1"));
		}
		return 1;
	};
	ReadMemStats = $pkg.ReadMemStats = function(m$1) {
	};
	SetFinalizer = $pkg.SetFinalizer = function(x, f) {
	};
	Stack = $pkg.Stack = function() {
		$panic("Native function not implemented: runtime.Stack");
	};
	TypeAssertionError.Ptr.prototype.RuntimeError = function() {
	};
	TypeAssertionError.prototype.RuntimeError = function() { return this.$val.RuntimeError(); };
	TypeAssertionError.Ptr.prototype.Error = function() {
		var e, inter;
		e = this;
		inter = e.interfaceString;
		if (inter === "") {
			inter = "interface";
		}
		if (e.concreteString === "") {
			return "interface conversion: " + inter + " is nil, not " + e.assertedString;
		}
		if (e.missingMethod === "") {
			return "interface conversion: " + inter + " is " + e.concreteString + ", not " + e.assertedString;
		}
		return "interface conversion: " + e.concreteString + " is not " + e.assertedString + ": missing method " + e.missingMethod;
	};
	TypeAssertionError.prototype.Error = function() { return this.$val.Error(); };
	errorString.prototype.RuntimeError = function() {
		var e;
		e = this.$val !== undefined ? this.$val : this;
	};
	$ptrType(errorString).prototype.RuntimeError = function() { return new errorString(this.$get()).RuntimeError(); };
	errorString.prototype.Error = function() {
		var e;
		e = this.$val !== undefined ? this.$val : this;
		return "runtime error: " + e;
	};
	$ptrType(errorString).prototype.Error = function() { return new errorString(this.$get()).Error(); };
	GOROOT = $pkg.GOROOT = function() {
		var s;
		s = getgoroot();
		if (!(s === "")) {
			return s;
		}
		return "/usr/local/go";
	};
	init$1 = function() {
		var memStats;
		memStats = new MemStats.Ptr(); $copy(memStats, new MemStats.Ptr(), MemStats);
		if (!((sizeof_C_MStats === 3712))) {
			console.log(sizeof_C_MStats, 3712);
			$panic(new $String("MStats vs MemStatsType size mismatch"));
		}
	};
	$pkg.$init = function() {
		($ptrType(NotSupportedError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		NotSupportedError.init([["Feature", "Feature", "", $String, ""]]);
		Error.init([["Error", "Error", "", $funcType([], [$String], false)], ["RuntimeError", "RuntimeError", "", $funcType([], [], false)]]);
		($ptrType(TypeAssertionError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1], ["RuntimeError", "RuntimeError", "", $funcType([], [], false), -1]];
		TypeAssertionError.init([["interfaceString", "interfaceString", "runtime", $String, ""], ["concreteString", "concreteString", "runtime", $String, ""], ["assertedString", "assertedString", "runtime", $String, ""], ["missingMethod", "missingMethod", "runtime", $String, ""]]);
		errorString.methods = [["Error", "Error", "", $funcType([], [$String], false), -1], ["RuntimeError", "RuntimeError", "", $funcType([], [], false), -1]];
		($ptrType(errorString)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1], ["RuntimeError", "RuntimeError", "", $funcType([], [], false), -1]];
		MemStats.init([["Alloc", "Alloc", "", $Uint64, ""], ["TotalAlloc", "TotalAlloc", "", $Uint64, ""], ["Sys", "Sys", "", $Uint64, ""], ["Lookups", "Lookups", "", $Uint64, ""], ["Mallocs", "Mallocs", "", $Uint64, ""], ["Frees", "Frees", "", $Uint64, ""], ["HeapAlloc", "HeapAlloc", "", $Uint64, ""], ["HeapSys", "HeapSys", "", $Uint64, ""], ["HeapIdle", "HeapIdle", "", $Uint64, ""], ["HeapInuse", "HeapInuse", "", $Uint64, ""], ["HeapReleased", "HeapReleased", "", $Uint64, ""], ["HeapObjects", "HeapObjects", "", $Uint64, ""], ["StackInuse", "StackInuse", "", $Uint64, ""], ["StackSys", "StackSys", "", $Uint64, ""], ["MSpanInuse", "MSpanInuse", "", $Uint64, ""], ["MSpanSys", "MSpanSys", "", $Uint64, ""], ["MCacheInuse", "MCacheInuse", "", $Uint64, ""], ["MCacheSys", "MCacheSys", "", $Uint64, ""], ["BuckHashSys", "BuckHashSys", "", $Uint64, ""], ["GCSys", "GCSys", "", $Uint64, ""], ["OtherSys", "OtherSys", "", $Uint64, ""], ["NextGC", "NextGC", "", $Uint64, ""], ["LastGC", "LastGC", "", $Uint64, ""], ["PauseTotalNs", "PauseTotalNs", "", $Uint64, ""], ["PauseNs", "PauseNs", "", ($arrayType($Uint64, 256)), ""], ["NumGC", "NumGC", "", $Uint32, ""], ["EnableGC", "EnableGC", "", $Bool, ""], ["DebugGC", "DebugGC", "", $Bool, ""], ["BySize", "BySize", "", ($arrayType(($structType([["Size", "Size", "", $Uint32, ""], ["Mallocs", "Mallocs", "", $Uint64, ""], ["Frees", "Frees", "", $Uint64, ""]])), 61)), ""]]);
		sizeof_C_MStats = 3712;
		init();
		init$1();
	};
	return $pkg;
})();
$packages["errors"] = (function() {
	var $pkg = {}, errorString, New;
	errorString = $pkg.errorString = $newType(0, "Struct", "errors.errorString", "errorString", "errors", function(s_) {
		this.$val = this;
		this.s = s_ !== undefined ? s_ : "";
	});
	New = $pkg.New = function(text) {
		return new errorString.Ptr(text);
	};
	errorString.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.s;
	};
	errorString.prototype.Error = function() { return this.$val.Error(); };
	$pkg.$init = function() {
		($ptrType(errorString)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		errorString.init([["s", "s", "errors", $String, ""]]);
	};
	return $pkg;
})();
$packages["sync/atomic"] = (function() {
	var $pkg = {}, CompareAndSwapInt32, CompareAndSwapUint64, AddInt32, AddUint64, LoadInt32, LoadUint32, LoadUint64, StoreInt32, StoreUint32;
	CompareAndSwapInt32 = $pkg.CompareAndSwapInt32 = function(addr, old, new$1) {
		if (addr.$get() === old) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	CompareAndSwapUint64 = $pkg.CompareAndSwapUint64 = function(addr, old, new$1) {
		var x;
		if ((x = addr.$get(), (x.$high === old.$high && x.$low === old.$low))) {
			addr.$set(new$1);
			return true;
		}
		return false;
	};
	AddInt32 = $pkg.AddInt32 = function(addr, delta) {
		var new$1;
		new$1 = addr.$get() + delta >> 0;
		addr.$set(new$1);
		return new$1;
	};
	AddUint64 = $pkg.AddUint64 = function(addr, delta) {
		var x, new$1;
		new$1 = (x = addr.$get(), new $Uint64(x.$high + delta.$high, x.$low + delta.$low));
		addr.$set(new$1);
		return new$1;
	};
	LoadInt32 = $pkg.LoadInt32 = function(addr) {
		return addr.$get();
	};
	LoadUint32 = $pkg.LoadUint32 = function(addr) {
		return addr.$get();
	};
	LoadUint64 = $pkg.LoadUint64 = function(addr) {
		return addr.$get();
	};
	StoreInt32 = $pkg.StoreInt32 = function(addr, val) {
		addr.$set(val);
	};
	StoreUint32 = $pkg.StoreUint32 = function(addr, val) {
		addr.$set(val);
	};
	$pkg.$init = function() {
	};
	return $pkg;
})();
$packages["sync"] = (function() {
	var $pkg = {}, atomic = $packages["sync/atomic"], runtime = $packages["runtime"], Pool, Mutex, Locker, Once, poolLocal, syncSema, RWMutex, rlocker, WaitGroup, allPools, runtime_registerPoolCleanup, runtime_Syncsemcheck, poolCleanup, init, indexLocal, runtime_Semacquire, runtime_Semrelease, init$1;
	Pool = $pkg.Pool = $newType(0, "Struct", "sync.Pool", "Pool", "sync", function(local_, localSize_, store_, New_) {
		this.$val = this;
		this.local = local_ !== undefined ? local_ : 0;
		this.localSize = localSize_ !== undefined ? localSize_ : 0;
		this.store = store_ !== undefined ? store_ : ($sliceType($emptyInterface)).nil;
		this.New = New_ !== undefined ? New_ : $throwNilPointerError;
	});
	Mutex = $pkg.Mutex = $newType(0, "Struct", "sync.Mutex", "Mutex", "sync", function(state_, sema_) {
		this.$val = this;
		this.state = state_ !== undefined ? state_ : 0;
		this.sema = sema_ !== undefined ? sema_ : 0;
	});
	Locker = $pkg.Locker = $newType(8, "Interface", "sync.Locker", "Locker", "sync", null);
	Once = $pkg.Once = $newType(0, "Struct", "sync.Once", "Once", "sync", function(m_, done_) {
		this.$val = this;
		this.m = m_ !== undefined ? m_ : new Mutex.Ptr();
		this.done = done_ !== undefined ? done_ : 0;
	});
	poolLocal = $pkg.poolLocal = $newType(0, "Struct", "sync.poolLocal", "poolLocal", "sync", function(private$0_, shared_, Mutex_, pad_) {
		this.$val = this;
		this.private$0 = private$0_ !== undefined ? private$0_ : $ifaceNil;
		this.shared = shared_ !== undefined ? shared_ : ($sliceType($emptyInterface)).nil;
		this.Mutex = Mutex_ !== undefined ? Mutex_ : new Mutex.Ptr();
		this.pad = pad_ !== undefined ? pad_ : ($arrayType($Uint8, 128)).zero();
	});
	syncSema = $pkg.syncSema = $newType(12, "Array", "sync.syncSema", "syncSema", "sync", null);
	RWMutex = $pkg.RWMutex = $newType(0, "Struct", "sync.RWMutex", "RWMutex", "sync", function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		this.w = w_ !== undefined ? w_ : new Mutex.Ptr();
		this.writerSem = writerSem_ !== undefined ? writerSem_ : 0;
		this.readerSem = readerSem_ !== undefined ? readerSem_ : 0;
		this.readerCount = readerCount_ !== undefined ? readerCount_ : 0;
		this.readerWait = readerWait_ !== undefined ? readerWait_ : 0;
	});
	rlocker = $pkg.rlocker = $newType(0, "Struct", "sync.rlocker", "rlocker", "sync", function(w_, writerSem_, readerSem_, readerCount_, readerWait_) {
		this.$val = this;
		this.w = w_ !== undefined ? w_ : new Mutex.Ptr();
		this.writerSem = writerSem_ !== undefined ? writerSem_ : 0;
		this.readerSem = readerSem_ !== undefined ? readerSem_ : 0;
		this.readerCount = readerCount_ !== undefined ? readerCount_ : 0;
		this.readerWait = readerWait_ !== undefined ? readerWait_ : 0;
	});
	WaitGroup = $pkg.WaitGroup = $newType(0, "Struct", "sync.WaitGroup", "WaitGroup", "sync", function(m_, counter_, waiters_, sema_) {
		this.$val = this;
		this.m = m_ !== undefined ? m_ : new Mutex.Ptr();
		this.counter = counter_ !== undefined ? counter_ : 0;
		this.waiters = waiters_ !== undefined ? waiters_ : 0;
		this.sema = sema_ !== undefined ? sema_ : ($ptrType($Uint32)).nil;
	});
	Pool.Ptr.prototype.Get = function() {
		var p, x, x$1, x$2;
		p = this;
		if (p.store.$length === 0) {
			if (!(p.New === $throwNilPointerError)) {
				return p.New();
			}
			return $ifaceNil;
		}
		x$2 = (x = p.store, x$1 = p.store.$length - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		p.store = $subslice(p.store, 0, (p.store.$length - 1 >> 0));
		return x$2;
	};
	Pool.prototype.Get = function() { return this.$val.Get(); };
	Pool.Ptr.prototype.Put = function(x) {
		var p;
		p = this;
		if ($interfaceIsEqual(x, $ifaceNil)) {
			return;
		}
		p.store = $append(p.store, x);
	};
	Pool.prototype.Put = function(x) { return this.$val.Put(x); };
	runtime_registerPoolCleanup = function(cleanup) {
	};
	runtime_Syncsemcheck = function(size) {
	};
	Mutex.Ptr.prototype.Lock = function() {
		var m, awoke, old, new$1;
		m = this;
		if (atomic.CompareAndSwapInt32(new ($ptrType($Int32))(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m), 0, 1)) {
			return;
		}
		awoke = false;
		while (true) {
			old = m.state;
			new$1 = old | 1;
			if (!(((old & 1) === 0))) {
				new$1 = old + 4 >> 0;
			}
			if (awoke) {
				new$1 = new$1 & ~(2);
			}
			if (atomic.CompareAndSwapInt32(new ($ptrType($Int32))(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m), old, new$1)) {
				if ((old & 1) === 0) {
					break;
				}
				runtime_Semacquire(new ($ptrType($Uint32))(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m));
				awoke = true;
			}
		}
	};
	Mutex.prototype.Lock = function() { return this.$val.Lock(); };
	Mutex.Ptr.prototype.Unlock = function() {
		var m, new$1, old;
		m = this;
		new$1 = atomic.AddInt32(new ($ptrType($Int32))(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m), -1);
		if ((((new$1 + 1 >> 0)) & 1) === 0) {
			$panic(new $String("sync: unlock of unlocked mutex"));
		}
		old = new$1;
		while (true) {
			if (((old >> 2 >> 0) === 0) || !(((old & 3) === 0))) {
				return;
			}
			new$1 = ((old - 4 >> 0)) | 2;
			if (atomic.CompareAndSwapInt32(new ($ptrType($Int32))(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, m), old, new$1)) {
				runtime_Semrelease(new ($ptrType($Uint32))(function() { return this.$target.sema; }, function($v) { this.$target.sema = $v; }, m));
				return;
			}
			old = m.state;
		}
	};
	Mutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	Once.Ptr.prototype.Do = function(f) {
		var $deferred = [], $err = null, o;
		/* */ try { $deferFrames.push($deferred);
		o = this;
		if (atomic.LoadUint32(new ($ptrType($Uint32))(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o)) === 1) {
			return;
		}
		o.m.Lock();
		$deferred.push([$methodVal(o.m, "Unlock"), []]);
		if (o.done === 0) {
			f();
			atomic.StoreUint32(new ($ptrType($Uint32))(function() { return this.$target.done; }, function($v) { this.$target.done = $v; }, o), 1);
		}
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Once.prototype.Do = function(f) { return this.$val.Do(f); };
	poolCleanup = function() {
		var _ref, _i, i, p, i$1, l, _ref$1, _i$1, j, x;
		_ref = allPools;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			p = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			(i < 0 || i >= allPools.$length) ? $throwRuntimeError("index out of range") : allPools.$array[allPools.$offset + i] = ($ptrType(Pool)).nil;
			i$1 = 0;
			while (i$1 < (p.localSize >> 0)) {
				l = indexLocal(p.local, i$1);
				l.private$0 = $ifaceNil;
				_ref$1 = l.shared;
				_i$1 = 0;
				while (_i$1 < _ref$1.$length) {
					j = _i$1;
					(x = l.shared, (j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j] = $ifaceNil);
					_i$1++;
				}
				l.shared = ($sliceType($emptyInterface)).nil;
				i$1 = i$1 + (1) >> 0;
			}
			_i++;
		}
		allPools = new ($sliceType(($ptrType(Pool))))([]);
	};
	init = function() {
		runtime_registerPoolCleanup(poolCleanup);
	};
	indexLocal = function(l, i) {
		var x;
		return (x = l, (x.nilCheck, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i])));
	};
	runtime_Semacquire = function() {
		$panic("Native function not implemented: sync.runtime_Semacquire");
	};
	runtime_Semrelease = function() {
		$panic("Native function not implemented: sync.runtime_Semrelease");
	};
	init$1 = function() {
		var s;
		s = syncSema.zero(); $copy(s, syncSema.zero(), syncSema);
		runtime_Syncsemcheck(12);
	};
	RWMutex.Ptr.prototype.RLock = function() {
		var rw;
		rw = this;
		if (atomic.AddInt32(new ($ptrType($Int32))(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw), 1) < 0) {
			runtime_Semacquire(new ($ptrType($Uint32))(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw));
		}
	};
	RWMutex.prototype.RLock = function() { return this.$val.RLock(); };
	RWMutex.Ptr.prototype.RUnlock = function() {
		var rw;
		rw = this;
		if (atomic.AddInt32(new ($ptrType($Int32))(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw), -1) < 0) {
			if (atomic.AddInt32(new ($ptrType($Int32))(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw), -1) === 0) {
				runtime_Semrelease(new ($ptrType($Uint32))(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw));
			}
		}
	};
	RWMutex.prototype.RUnlock = function() { return this.$val.RUnlock(); };
	RWMutex.Ptr.prototype.Lock = function() {
		var rw, r;
		rw = this;
		rw.w.Lock();
		r = atomic.AddInt32(new ($ptrType($Int32))(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw), -1073741824) + 1073741824 >> 0;
		if (!((r === 0)) && !((atomic.AddInt32(new ($ptrType($Int32))(function() { return this.$target.readerWait; }, function($v) { this.$target.readerWait = $v; }, rw), r) === 0))) {
			runtime_Semacquire(new ($ptrType($Uint32))(function() { return this.$target.writerSem; }, function($v) { this.$target.writerSem = $v; }, rw));
		}
	};
	RWMutex.prototype.Lock = function() { return this.$val.Lock(); };
	RWMutex.Ptr.prototype.Unlock = function() {
		var rw, r, i;
		rw = this;
		r = atomic.AddInt32(new ($ptrType($Int32))(function() { return this.$target.readerCount; }, function($v) { this.$target.readerCount = $v; }, rw), 1073741824);
		i = 0;
		while (i < (r >> 0)) {
			runtime_Semrelease(new ($ptrType($Uint32))(function() { return this.$target.readerSem; }, function($v) { this.$target.readerSem = $v; }, rw));
			i = i + (1) >> 0;
		}
		rw.w.Unlock();
	};
	RWMutex.prototype.Unlock = function() { return this.$val.Unlock(); };
	RWMutex.Ptr.prototype.RLocker = function() {
		var rw;
		rw = this;
		return $clone(rw, rlocker);
	};
	RWMutex.prototype.RLocker = function() { return this.$val.RLocker(); };
	rlocker.Ptr.prototype.Lock = function() {
		var r;
		r = this;
		$clone(r, RWMutex).RLock();
	};
	rlocker.prototype.Lock = function() { return this.$val.Lock(); };
	rlocker.Ptr.prototype.Unlock = function() {
		var r;
		r = this;
		$clone(r, RWMutex).RUnlock();
	};
	rlocker.prototype.Unlock = function() { return this.$val.Unlock(); };
	WaitGroup.Ptr.prototype.Add = function(delta) {
		var $deferred = [], $err = null, wg, v, i;
		/* */ try { $deferFrames.push($deferred);
		wg = this;
		v = atomic.AddInt32(new ($ptrType($Int32))(function() { return this.$target.counter; }, function($v) { this.$target.counter = $v; }, wg), (delta >> 0));
		if (v < 0) {
			$panic(new $String("sync: negative WaitGroup counter"));
		}
		if (v > 0 || (atomic.LoadInt32(new ($ptrType($Int32))(function() { return this.$target.waiters; }, function($v) { this.$target.waiters = $v; }, wg)) === 0)) {
			return;
		}
		wg.m.Lock();
		if (atomic.LoadInt32(new ($ptrType($Int32))(function() { return this.$target.counter; }, function($v) { this.$target.counter = $v; }, wg)) === 0) {
			i = 0;
			while (i < wg.waiters) {
				runtime_Semrelease(wg.sema);
				i = i + (1) >> 0;
			}
			wg.waiters = 0;
			wg.sema = ($ptrType($Uint32)).nil;
		}
		wg.m.Unlock();
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	WaitGroup.prototype.Add = function(delta) { return this.$val.Add(delta); };
	WaitGroup.Ptr.prototype.Done = function() {
		var wg;
		wg = this;
		wg.Add(-1);
	};
	WaitGroup.prototype.Done = function() { return this.$val.Done(); };
	WaitGroup.Ptr.prototype.Wait = function() {
		var wg, w, s;
		wg = this;
		if (atomic.LoadInt32(new ($ptrType($Int32))(function() { return this.$target.counter; }, function($v) { this.$target.counter = $v; }, wg)) === 0) {
			return;
		}
		wg.m.Lock();
		w = atomic.AddInt32(new ($ptrType($Int32))(function() { return this.$target.waiters; }, function($v) { this.$target.waiters = $v; }, wg), 1);
		if (atomic.LoadInt32(new ($ptrType($Int32))(function() { return this.$target.counter; }, function($v) { this.$target.counter = $v; }, wg)) === 0) {
			atomic.AddInt32(new ($ptrType($Int32))(function() { return this.$target.waiters; }, function($v) { this.$target.waiters = $v; }, wg), -1);
			wg.m.Unlock();
			return;
		}
		if ($pointerIsEqual(wg.sema, ($ptrType($Uint32)).nil)) {
			wg.sema = $newDataPointer(0, ($ptrType($Uint32)));
		}
		s = wg.sema;
		wg.m.Unlock();
		runtime_Semacquire(s);
	};
	WaitGroup.prototype.Wait = function() { return this.$val.Wait(); };
	$pkg.$init = function() {
		($ptrType(Pool)).methods = [["Get", "Get", "", $funcType([], [$emptyInterface], false), -1], ["Put", "Put", "", $funcType([$emptyInterface], [], false), -1], ["getSlow", "getSlow", "sync", $funcType([], [$emptyInterface], false), -1], ["pin", "pin", "sync", $funcType([], [($ptrType(poolLocal))], false), -1], ["pinSlow", "pinSlow", "sync", $funcType([], [($ptrType(poolLocal))], false), -1]];
		Pool.init([["local", "local", "sync", $UnsafePointer, ""], ["localSize", "localSize", "sync", $Uintptr, ""], ["store", "store", "sync", ($sliceType($emptyInterface)), ""], ["New", "New", "", ($funcType([], [$emptyInterface], false)), ""]]);
		($ptrType(Mutex)).methods = [["Lock", "Lock", "", $funcType([], [], false), -1], ["Unlock", "Unlock", "", $funcType([], [], false), -1]];
		Mutex.init([["state", "state", "sync", $Int32, ""], ["sema", "sema", "sync", $Uint32, ""]]);
		Locker.init([["Lock", "Lock", "", $funcType([], [], false)], ["Unlock", "Unlock", "", $funcType([], [], false)]]);
		($ptrType(Once)).methods = [["Do", "Do", "", $funcType([($funcType([], [], false))], [], false), -1]];
		Once.init([["m", "m", "sync", Mutex, ""], ["done", "done", "sync", $Uint32, ""]]);
		($ptrType(poolLocal)).methods = [["Lock", "Lock", "", $funcType([], [], false), 2], ["Unlock", "Unlock", "", $funcType([], [], false), 2]];
		poolLocal.init([["private$0", "private", "sync", $emptyInterface, ""], ["shared", "shared", "sync", ($sliceType($emptyInterface)), ""], ["Mutex", "", "", Mutex, ""], ["pad", "pad", "sync", ($arrayType($Uint8, 128)), ""]]);
		syncSema.init($Uintptr, 3);
		($ptrType(RWMutex)).methods = [["Lock", "Lock", "", $funcType([], [], false), -1], ["RLock", "RLock", "", $funcType([], [], false), -1], ["RLocker", "RLocker", "", $funcType([], [Locker], false), -1], ["RUnlock", "RUnlock", "", $funcType([], [], false), -1], ["Unlock", "Unlock", "", $funcType([], [], false), -1]];
		RWMutex.init([["w", "w", "sync", Mutex, ""], ["writerSem", "writerSem", "sync", $Uint32, ""], ["readerSem", "readerSem", "sync", $Uint32, ""], ["readerCount", "readerCount", "sync", $Int32, ""], ["readerWait", "readerWait", "sync", $Int32, ""]]);
		($ptrType(rlocker)).methods = [["Lock", "Lock", "", $funcType([], [], false), -1], ["Unlock", "Unlock", "", $funcType([], [], false), -1]];
		rlocker.init([["w", "w", "sync", Mutex, ""], ["writerSem", "writerSem", "sync", $Uint32, ""], ["readerSem", "readerSem", "sync", $Uint32, ""], ["readerCount", "readerCount", "sync", $Int32, ""], ["readerWait", "readerWait", "sync", $Int32, ""]]);
		($ptrType(WaitGroup)).methods = [["Add", "Add", "", $funcType([$Int], [], false), -1], ["Done", "Done", "", $funcType([], [], false), -1], ["Wait", "Wait", "", $funcType([], [], false), -1]];
		WaitGroup.init([["m", "m", "sync", Mutex, ""], ["counter", "counter", "sync", $Int32, ""], ["waiters", "waiters", "sync", $Int32, ""], ["sema", "sema", "sync", ($ptrType($Uint32)), ""]]);
		allPools = ($sliceType(($ptrType(Pool)))).nil;
		init();
		init$1();
	};
	return $pkg;
})();
$packages["io"] = (function() {
	var $pkg = {}, runtime = $packages["runtime"], errors = $packages["errors"], sync = $packages["sync"], Reader, Writer, Closer, ReadCloser, WriteCloser, ReaderFrom, WriterTo, ReaderAt, ByteWriter, RuneReader, RuneScanner, stringWriter, LimitedReader, SectionReader, multiReader, errWhence, errOffset, Pipe, WriteString, ReadAtLeast, ReadFull, CopyN, Copy, LimitReader, NewSectionReader, MultiReader;
	Reader = $pkg.Reader = $newType(8, "Interface", "io.Reader", "Reader", "io", null);
	Writer = $pkg.Writer = $newType(8, "Interface", "io.Writer", "Writer", "io", null);
	Closer = $pkg.Closer = $newType(8, "Interface", "io.Closer", "Closer", "io", null);
	ReadCloser = $pkg.ReadCloser = $newType(8, "Interface", "io.ReadCloser", "ReadCloser", "io", null);
	WriteCloser = $pkg.WriteCloser = $newType(8, "Interface", "io.WriteCloser", "WriteCloser", "io", null);
	ReaderFrom = $pkg.ReaderFrom = $newType(8, "Interface", "io.ReaderFrom", "ReaderFrom", "io", null);
	WriterTo = $pkg.WriterTo = $newType(8, "Interface", "io.WriterTo", "WriterTo", "io", null);
	ReaderAt = $pkg.ReaderAt = $newType(8, "Interface", "io.ReaderAt", "ReaderAt", "io", null);
	ByteWriter = $pkg.ByteWriter = $newType(8, "Interface", "io.ByteWriter", "ByteWriter", "io", null);
	RuneReader = $pkg.RuneReader = $newType(8, "Interface", "io.RuneReader", "RuneReader", "io", null);
	RuneScanner = $pkg.RuneScanner = $newType(8, "Interface", "io.RuneScanner", "RuneScanner", "io", null);
	stringWriter = $pkg.stringWriter = $newType(8, "Interface", "io.stringWriter", "stringWriter", "io", null);
	LimitedReader = $pkg.LimitedReader = $newType(0, "Struct", "io.LimitedReader", "LimitedReader", "io", function(R_, N_) {
		this.$val = this;
		this.R = R_ !== undefined ? R_ : $ifaceNil;
		this.N = N_ !== undefined ? N_ : new $Int64(0, 0);
	});
	SectionReader = $pkg.SectionReader = $newType(0, "Struct", "io.SectionReader", "SectionReader", "io", function(r_, base_, off_, limit_) {
		this.$val = this;
		this.r = r_ !== undefined ? r_ : $ifaceNil;
		this.base = base_ !== undefined ? base_ : new $Int64(0, 0);
		this.off = off_ !== undefined ? off_ : new $Int64(0, 0);
		this.limit = limit_ !== undefined ? limit_ : new $Int64(0, 0);
	});
	multiReader = $pkg.multiReader = $newType(0, "Struct", "io.multiReader", "multiReader", "io", function(readers_) {
		this.$val = this;
		this.readers = readers_ !== undefined ? readers_ : ($sliceType(Reader)).nil;
	});
	Pipe = $pkg.Pipe = function() {
		$panic(new runtime.NotSupportedError.Ptr("io.Pipe"));
	};
	WriteString = $pkg.WriteString = function(w, s) {
		var n = 0, err = $ifaceNil, _tuple, sw, ok, _tuple$1, _tuple$2;
		_tuple = $assertType(w, stringWriter, true); sw = _tuple[0]; ok = _tuple[1];
		if (ok) {
			_tuple$1 = sw.WriteString(s); n = _tuple$1[0]; err = _tuple$1[1];
			return [n, err];
		}
		_tuple$2 = w.Write(new ($sliceType($Uint8))($stringToBytes(s))); n = _tuple$2[0]; err = _tuple$2[1];
		return [n, err];
	};
	ReadAtLeast = $pkg.ReadAtLeast = function(r, buf, min) {
		var n = 0, err = $ifaceNil, _tmp, _tmp$1, nn, _tuple;
		if (buf.$length < min) {
			_tmp = 0; _tmp$1 = $pkg.ErrShortBuffer; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		while (n < min && $interfaceIsEqual(err, $ifaceNil)) {
			nn = 0;
			_tuple = r.Read($subslice(buf, n)); nn = _tuple[0]; err = _tuple[1];
			n = n + (nn) >> 0;
		}
		if (n >= min) {
			err = $ifaceNil;
		} else if (n > 0 && $interfaceIsEqual(err, $pkg.EOF)) {
			err = $pkg.ErrUnexpectedEOF;
		}
		return [n, err];
	};
	ReadFull = $pkg.ReadFull = function(r, buf) {
		var n = 0, err = $ifaceNil, _tuple;
		_tuple = ReadAtLeast(r, buf, buf.$length); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	CopyN = $pkg.CopyN = function(dst, src, n) {
		var written = new $Int64(0, 0), err = $ifaceNil, _tuple, _tmp, _tmp$1;
		_tuple = Copy(dst, LimitReader(src, n)); written = _tuple[0]; err = _tuple[1];
		if ((written.$high === n.$high && written.$low === n.$low)) {
			_tmp = n; _tmp$1 = $ifaceNil; written = _tmp; err = _tmp$1;
			return [written, err];
		}
		if ((written.$high < n.$high || (written.$high === n.$high && written.$low < n.$low)) && $interfaceIsEqual(err, $ifaceNil)) {
			err = $pkg.EOF;
		}
		return [written, err];
	};
	Copy = $pkg.Copy = function(dst, src) {
		var written = new $Int64(0, 0), err = $ifaceNil, _tuple, wt, ok, _tuple$1, _tuple$2, rt, ok$1, _tuple$3, buf, _tuple$4, nr, er, _tuple$5, nw, ew, x, _tmp, _tmp$1;
		_tuple = $assertType(src, WriterTo, true); wt = _tuple[0]; ok = _tuple[1];
		if (ok) {
			_tuple$1 = wt.WriteTo(dst); written = _tuple$1[0]; err = _tuple$1[1];
			return [written, err];
		}
		_tuple$2 = $assertType(dst, ReaderFrom, true); rt = _tuple$2[0]; ok$1 = _tuple$2[1];
		if (ok$1) {
			_tuple$3 = rt.ReadFrom(src); written = _tuple$3[0]; err = _tuple$3[1];
			return [written, err];
		}
		buf = ($sliceType($Uint8)).make(32768);
		while (true) {
			_tuple$4 = src.Read(buf); nr = _tuple$4[0]; er = _tuple$4[1];
			if (nr > 0) {
				_tuple$5 = dst.Write($subslice(buf, 0, nr)); nw = _tuple$5[0]; ew = _tuple$5[1];
				if (nw > 0) {
					written = (x = new $Int64(0, nw), new $Int64(written.$high + x.$high, written.$low + x.$low));
				}
				if (!($interfaceIsEqual(ew, $ifaceNil))) {
					err = ew;
					break;
				}
				if (!((nr === nw))) {
					err = $pkg.ErrShortWrite;
					break;
				}
			}
			if ($interfaceIsEqual(er, $pkg.EOF)) {
				break;
			}
			if (!($interfaceIsEqual(er, $ifaceNil))) {
				err = er;
				break;
			}
		}
		_tmp = written; _tmp$1 = err; written = _tmp; err = _tmp$1;
		return [written, err];
	};
	LimitReader = $pkg.LimitReader = function(r, n) {
		return new LimitedReader.Ptr(r, n);
	};
	LimitedReader.Ptr.prototype.Read = function(p) {
		var n = 0, err = $ifaceNil, l, x, _tmp, _tmp$1, x$1, x$2, _tuple, x$3, x$4;
		l = this;
		if ((x = l.N, (x.$high < 0 || (x.$high === 0 && x.$low <= 0)))) {
			_tmp = 0; _tmp$1 = $pkg.EOF; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		if ((x$1 = new $Int64(0, p.$length), x$2 = l.N, (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
			p = $subslice(p, 0, $flatten64(l.N));
		}
		_tuple = l.R.Read(p); n = _tuple[0]; err = _tuple[1];
		l.N = (x$3 = l.N, x$4 = new $Int64(0, n), new $Int64(x$3.$high - x$4.$high, x$3.$low - x$4.$low));
		return [n, err];
	};
	LimitedReader.prototype.Read = function(p) { return this.$val.Read(p); };
	NewSectionReader = $pkg.NewSectionReader = function(r, off, n) {
		return new SectionReader.Ptr(r, off, off, new $Int64(off.$high + n.$high, off.$low + n.$low));
	};
	SectionReader.Ptr.prototype.Read = function(p) {
		var n = 0, err = $ifaceNil, s, x, x$1, _tmp, _tmp$1, x$2, x$3, max, x$4, _tuple, x$5, x$6;
		s = this;
		if ((x = s.off, x$1 = s.limit, (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = 0; _tmp$1 = $pkg.EOF; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		max = (x$2 = s.limit, x$3 = s.off, new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low));
		if ((x$4 = new $Int64(0, p.$length), (x$4.$high > max.$high || (x$4.$high === max.$high && x$4.$low > max.$low)))) {
			p = $subslice(p, 0, $flatten64(max));
		}
		_tuple = s.r.ReadAt(p, s.off); n = _tuple[0]; err = _tuple[1];
		s.off = (x$5 = s.off, x$6 = new $Int64(0, n), new $Int64(x$5.$high + x$6.$high, x$5.$low + x$6.$low));
		return [n, err];
	};
	SectionReader.prototype.Read = function(p) { return this.$val.Read(p); };
	SectionReader.Ptr.prototype.Seek = function(offset, whence) {
		var s, _ref, x, x$1, x$2, x$3, x$4;
		s = this;
		_ref = whence;
		if (_ref === 0) {
			offset = (x = s.base, new $Int64(offset.$high + x.$high, offset.$low + x.$low));
		} else if (_ref === 1) {
			offset = (x$1 = s.off, new $Int64(offset.$high + x$1.$high, offset.$low + x$1.$low));
		} else if (_ref === 2) {
			offset = (x$2 = s.limit, new $Int64(offset.$high + x$2.$high, offset.$low + x$2.$low));
		} else {
			return [new $Int64(0, 0), errWhence];
		}
		if ((x$3 = s.base, (offset.$high < x$3.$high || (offset.$high === x$3.$high && offset.$low < x$3.$low)))) {
			return [new $Int64(0, 0), errOffset];
		}
		s.off = offset;
		return [(x$4 = s.base, new $Int64(offset.$high - x$4.$high, offset.$low - x$4.$low)), $ifaceNil];
	};
	SectionReader.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	SectionReader.Ptr.prototype.ReadAt = function(p, off) {
		var n = 0, err = $ifaceNil, s, x, x$1, x$2, _tmp, _tmp$1, x$3, x$4, max, x$5, _tuple, _tmp$2, _tmp$3, _tuple$1;
		s = this;
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0)) || (x = (x$1 = s.limit, x$2 = s.base, new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low)), (off.$high > x.$high || (off.$high === x.$high && off.$low >= x.$low)))) {
			_tmp = 0; _tmp$1 = $pkg.EOF; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		off = (x$3 = s.base, new $Int64(off.$high + x$3.$high, off.$low + x$3.$low));
		max = (x$4 = s.limit, new $Int64(x$4.$high - off.$high, x$4.$low - off.$low));
		if ((x$5 = new $Int64(0, p.$length), (x$5.$high > max.$high || (x$5.$high === max.$high && x$5.$low > max.$low)))) {
			p = $subslice(p, 0, $flatten64(max));
			_tuple = s.r.ReadAt(p, off); n = _tuple[0]; err = _tuple[1];
			if ($interfaceIsEqual(err, $ifaceNil)) {
				err = $pkg.EOF;
			}
			_tmp$2 = n; _tmp$3 = err; n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		_tuple$1 = s.r.ReadAt(p, off); n = _tuple$1[0]; err = _tuple$1[1];
		return [n, err];
	};
	SectionReader.prototype.ReadAt = function(p, off) { return this.$val.ReadAt(p, off); };
	SectionReader.Ptr.prototype.Size = function() {
		var s, x, x$1;
		s = this;
		return (x = s.limit, x$1 = s.base, new $Int64(x.$high - x$1.$high, x.$low - x$1.$low));
	};
	SectionReader.prototype.Size = function() { return this.$val.Size(); };
	multiReader.Ptr.prototype.Read = function(p) {
		var n = 0, err = $ifaceNil, mr, _tuple, x, _tmp, _tmp$1;
		mr = this;
		while (mr.readers.$length > 0) {
			_tuple = (x = mr.readers, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).Read(p); n = _tuple[0]; err = _tuple[1];
			if (n > 0 || !($interfaceIsEqual(err, $pkg.EOF))) {
				if ($interfaceIsEqual(err, $pkg.EOF)) {
					err = $ifaceNil;
				}
				return [n, err];
			}
			mr.readers = $subslice(mr.readers, 1);
		}
		_tmp = 0; _tmp$1 = $pkg.EOF; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	multiReader.prototype.Read = function(p) { return this.$val.Read(p); };
	MultiReader = $pkg.MultiReader = function(readers) {
		var r;
		r = ($sliceType(Reader)).make(readers.$length);
		$copySlice(r, readers);
		return new multiReader.Ptr(r);
	};
	$pkg.$init = function() {
		Reader.init([["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false)]]);
		Writer.init([["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false)]]);
		Closer.init([["Close", "Close", "", $funcType([], [$error], false)]]);
		ReadCloser.init([["Close", "Close", "", $funcType([], [$error], false)], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false)]]);
		WriteCloser.init([["Close", "Close", "", $funcType([], [$error], false)], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false)]]);
		ReaderFrom.init([["ReadFrom", "ReadFrom", "", $funcType([Reader], [$Int64, $error], false)]]);
		WriterTo.init([["WriteTo", "WriteTo", "", $funcType([Writer], [$Int64, $error], false)]]);
		ReaderAt.init([["ReadAt", "ReadAt", "", $funcType([($sliceType($Uint8)), $Int64], [$Int, $error], false)]]);
		ByteWriter.init([["WriteByte", "WriteByte", "", $funcType([$Uint8], [$error], false)]]);
		RuneReader.init([["ReadRune", "ReadRune", "", $funcType([], [$Int32, $Int, $error], false)]]);
		RuneScanner.init([["ReadRune", "ReadRune", "", $funcType([], [$Int32, $Int, $error], false)], ["UnreadRune", "UnreadRune", "", $funcType([], [$error], false)]]);
		stringWriter.init([["WriteString", "WriteString", "", $funcType([$String], [$Int, $error], false)]]);
		($ptrType(LimitedReader)).methods = [["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1]];
		LimitedReader.init([["R", "R", "", Reader, ""], ["N", "N", "", $Int64, ""]]);
		($ptrType(SectionReader)).methods = [["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["ReadAt", "ReadAt", "", $funcType([($sliceType($Uint8)), $Int64], [$Int, $error], false), -1], ["Seek", "Seek", "", $funcType([$Int64, $Int], [$Int64, $error], false), -1], ["Size", "Size", "", $funcType([], [$Int64], false), -1]];
		SectionReader.init([["r", "r", "io", ReaderAt, ""], ["base", "base", "io", $Int64, ""], ["off", "off", "io", $Int64, ""], ["limit", "limit", "io", $Int64, ""]]);
		($ptrType(multiReader)).methods = [["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1]];
		multiReader.init([["readers", "readers", "io", ($sliceType(Reader)), ""]]);
		$pkg.ErrShortWrite = errors.New("short write");
		$pkg.ErrShortBuffer = errors.New("short buffer");
		$pkg.EOF = errors.New("EOF");
		$pkg.ErrUnexpectedEOF = errors.New("unexpected EOF");
		$pkg.ErrNoProgress = errors.New("multiple Read calls return no data or error");
		errWhence = errors.New("Seek: invalid whence");
		errOffset = errors.New("Seek: invalid offset");
		$pkg.ErrClosedPipe = errors.New("io: read/write on closed pipe");
	};
	return $pkg;
})();
$packages["unicode"] = (function() {
	var $pkg = {}, RangeTable, Range16, Range32, CaseRange, d, foldPair, _L, _Nd, _White_Space, _CaseRanges, properties, caseOrbit, to, IsDigit, IsLetter, IsSpace, is16, is32, isExcludingLatin, To, ToUpper, ToLower, SimpleFold;
	RangeTable = $pkg.RangeTable = $newType(0, "Struct", "unicode.RangeTable", "RangeTable", "unicode", function(R16_, R32_, LatinOffset_) {
		this.$val = this;
		this.R16 = R16_ !== undefined ? R16_ : ($sliceType(Range16)).nil;
		this.R32 = R32_ !== undefined ? R32_ : ($sliceType(Range32)).nil;
		this.LatinOffset = LatinOffset_ !== undefined ? LatinOffset_ : 0;
	});
	Range16 = $pkg.Range16 = $newType(0, "Struct", "unicode.Range16", "Range16", "unicode", function(Lo_, Hi_, Stride_) {
		this.$val = this;
		this.Lo = Lo_ !== undefined ? Lo_ : 0;
		this.Hi = Hi_ !== undefined ? Hi_ : 0;
		this.Stride = Stride_ !== undefined ? Stride_ : 0;
	});
	Range32 = $pkg.Range32 = $newType(0, "Struct", "unicode.Range32", "Range32", "unicode", function(Lo_, Hi_, Stride_) {
		this.$val = this;
		this.Lo = Lo_ !== undefined ? Lo_ : 0;
		this.Hi = Hi_ !== undefined ? Hi_ : 0;
		this.Stride = Stride_ !== undefined ? Stride_ : 0;
	});
	CaseRange = $pkg.CaseRange = $newType(0, "Struct", "unicode.CaseRange", "CaseRange", "unicode", function(Lo_, Hi_, Delta_) {
		this.$val = this;
		this.Lo = Lo_ !== undefined ? Lo_ : 0;
		this.Hi = Hi_ !== undefined ? Hi_ : 0;
		this.Delta = Delta_ !== undefined ? Delta_ : d.zero();
	});
	d = $pkg.d = $newType(12, "Array", "unicode.d", "d", "unicode", null);
	foldPair = $pkg.foldPair = $newType(0, "Struct", "unicode.foldPair", "foldPair", "unicode", function(From_, To_) {
		this.$val = this;
		this.From = From_ !== undefined ? From_ : 0;
		this.To = To_ !== undefined ? To_ : 0;
	});
	to = function(_case, r, caseRange) {
		var lo, hi, _q, m, cr, x, delta;
		if (_case < 0 || 3 <= _case) {
			return 65533;
		}
		lo = 0;
		hi = caseRange.$length;
		while (lo < hi) {
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			cr = ((m < 0 || m >= caseRange.$length) ? $throwRuntimeError("index out of range") : caseRange.$array[caseRange.$offset + m]);
			if ((cr.Lo >> 0) <= r && r <= (cr.Hi >> 0)) {
				delta = (x = cr.Delta, ((_case < 0 || _case >= x.length) ? $throwRuntimeError("index out of range") : x[_case]));
				if (delta > 1114111) {
					return (cr.Lo >> 0) + (((((r - (cr.Lo >> 0) >> 0)) & ~1) | ((_case & 1) >> 0))) >> 0;
				}
				return r + delta >> 0;
			}
			if (r < (cr.Lo >> 0)) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return r;
	};
	IsDigit = $pkg.IsDigit = function(r) {
		if (r <= 255) {
			return 48 <= r && r <= 57;
		}
		return isExcludingLatin($pkg.Digit, r);
	};
	IsLetter = $pkg.IsLetter = function(r) {
		var x;
		if ((r >>> 0) <= 255) {
			return !(((((x = (r << 24 >>> 24), ((x < 0 || x >= properties.length) ? $throwRuntimeError("index out of range") : properties[x])) & 96) >>> 0) === 0));
		}
		return isExcludingLatin($pkg.Letter, r);
	};
	IsSpace = $pkg.IsSpace = function(r) {
		var _ref;
		if ((r >>> 0) <= 255) {
			_ref = r;
			if (_ref === 9 || _ref === 10 || _ref === 11 || _ref === 12 || _ref === 13 || _ref === 32 || _ref === 133 || _ref === 160) {
				return true;
			}
			return false;
		}
		return isExcludingLatin($pkg.White_Space, r);
	};
	is16 = function(ranges, r) {
		var _ref, _i, i, range_, _r, lo, hi, _q, m, range_$1, _r$1;
		if (ranges.$length <= 18 || r <= 255) {
			_ref = ranges;
			_i = 0;
			while (_i < _ref.$length) {
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo << 16 >>> 16)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (lo < hi) {
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = ((m < 0 || m >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + m]);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo << 16 >>> 16)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	is32 = function(ranges, r) {
		var _ref, _i, i, range_, _r, lo, hi, _q, m, range_$1, _r$1;
		if (ranges.$length <= 18) {
			_ref = ranges;
			_i = 0;
			while (_i < _ref.$length) {
				i = _i;
				range_ = ((i < 0 || i >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + i]);
				if (r < range_.Lo) {
					return false;
				}
				if (r <= range_.Hi) {
					return (_r = ((r - range_.Lo >>> 0)) % range_.Stride, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0;
				}
				_i++;
			}
			return false;
		}
		lo = 0;
		hi = ranges.$length;
		while (lo < hi) {
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			range_$1 = new Range32.Ptr(); $copy(range_$1, ((m < 0 || m >= ranges.$length) ? $throwRuntimeError("index out of range") : ranges.$array[ranges.$offset + m]), Range32);
			if (range_$1.Lo <= r && r <= range_$1.Hi) {
				return (_r$1 = ((r - range_$1.Lo >>> 0)) % range_$1.Stride, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0;
			}
			if (r < range_$1.Lo) {
				hi = m;
			} else {
				lo = m + 1 >> 0;
			}
		}
		return false;
	};
	isExcludingLatin = function(rangeTab, r) {
		var r16, off, x, r32;
		r16 = rangeTab.R16;
		off = rangeTab.LatinOffset;
		if (r16.$length > off && r <= ((x = r16.$length - 1 >> 0, ((x < 0 || x >= r16.$length) ? $throwRuntimeError("index out of range") : r16.$array[r16.$offset + x])).Hi >> 0)) {
			return is16($subslice(r16, off), (r << 16 >>> 16));
		}
		r32 = rangeTab.R32;
		if (r32.$length > 0 && r >= (((0 < 0 || 0 >= r32.$length) ? $throwRuntimeError("index out of range") : r32.$array[r32.$offset + 0]).Lo >> 0)) {
			return is32(r32, (r >>> 0));
		}
		return false;
	};
	To = $pkg.To = function(_case, r) {
		return to(_case, r, $pkg.CaseRanges);
	};
	ToUpper = $pkg.ToUpper = function(r) {
		if (r <= 127) {
			if (97 <= r && r <= 122) {
				r = r - (32) >> 0;
			}
			return r;
		}
		return To(0, r);
	};
	ToLower = $pkg.ToLower = function(r) {
		if (r <= 127) {
			if (65 <= r && r <= 90) {
				r = r + (32) >> 0;
			}
			return r;
		}
		return To(1, r);
	};
	SimpleFold = $pkg.SimpleFold = function(r) {
		var lo, hi, _q, m, l;
		lo = 0;
		hi = caseOrbit.$length;
		while (lo < hi) {
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if ((((m < 0 || m >= caseOrbit.$length) ? $throwRuntimeError("index out of range") : caseOrbit.$array[caseOrbit.$offset + m]).From >> 0) < r) {
				lo = m + 1 >> 0;
			} else {
				hi = m;
			}
		}
		if (lo < caseOrbit.$length && ((((lo < 0 || lo >= caseOrbit.$length) ? $throwRuntimeError("index out of range") : caseOrbit.$array[caseOrbit.$offset + lo]).From >> 0) === r)) {
			return (((lo < 0 || lo >= caseOrbit.$length) ? $throwRuntimeError("index out of range") : caseOrbit.$array[caseOrbit.$offset + lo]).To >> 0);
		}
		l = ToLower(r);
		if (!((l === r))) {
			return l;
		}
		return ToUpper(r);
	};
	$pkg.$init = function() {
		RangeTable.init([["R16", "R16", "", ($sliceType(Range16)), ""], ["R32", "R32", "", ($sliceType(Range32)), ""], ["LatinOffset", "LatinOffset", "", $Int, ""]]);
		Range16.init([["Lo", "Lo", "", $Uint16, ""], ["Hi", "Hi", "", $Uint16, ""], ["Stride", "Stride", "", $Uint16, ""]]);
		Range32.init([["Lo", "Lo", "", $Uint32, ""], ["Hi", "Hi", "", $Uint32, ""], ["Stride", "Stride", "", $Uint32, ""]]);
		CaseRange.init([["Lo", "Lo", "", $Uint32, ""], ["Hi", "Hi", "", $Uint32, ""], ["Delta", "Delta", "", d, ""]]);
		d.init($Int32, 3);
		foldPair.init([["From", "From", "", $Uint16, ""], ["To", "To", "", $Uint16, ""]]);
		_L = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(65, 90, 1), new Range16.Ptr(97, 122, 1), new Range16.Ptr(170, 181, 11), new Range16.Ptr(186, 192, 6), new Range16.Ptr(193, 214, 1), new Range16.Ptr(216, 246, 1), new Range16.Ptr(248, 705, 1), new Range16.Ptr(710, 721, 1), new Range16.Ptr(736, 740, 1), new Range16.Ptr(748, 750, 2), new Range16.Ptr(880, 884, 1), new Range16.Ptr(886, 887, 1), new Range16.Ptr(890, 893, 1), new Range16.Ptr(902, 904, 2), new Range16.Ptr(905, 906, 1), new Range16.Ptr(908, 910, 2), new Range16.Ptr(911, 929, 1), new Range16.Ptr(931, 1013, 1), new Range16.Ptr(1015, 1153, 1), new Range16.Ptr(1162, 1319, 1), new Range16.Ptr(1329, 1366, 1), new Range16.Ptr(1369, 1377, 8), new Range16.Ptr(1378, 1415, 1), new Range16.Ptr(1488, 1514, 1), new Range16.Ptr(1520, 1522, 1), new Range16.Ptr(1568, 1610, 1), new Range16.Ptr(1646, 1647, 1), new Range16.Ptr(1649, 1747, 1), new Range16.Ptr(1749, 1765, 16), new Range16.Ptr(1766, 1774, 8), new Range16.Ptr(1775, 1786, 11), new Range16.Ptr(1787, 1788, 1), new Range16.Ptr(1791, 1808, 17), new Range16.Ptr(1810, 1839, 1), new Range16.Ptr(1869, 1957, 1), new Range16.Ptr(1969, 1994, 25), new Range16.Ptr(1995, 2026, 1), new Range16.Ptr(2036, 2037, 1), new Range16.Ptr(2042, 2048, 6), new Range16.Ptr(2049, 2069, 1), new Range16.Ptr(2074, 2084, 10), new Range16.Ptr(2088, 2112, 24), new Range16.Ptr(2113, 2136, 1), new Range16.Ptr(2208, 2210, 2), new Range16.Ptr(2211, 2220, 1), new Range16.Ptr(2308, 2361, 1), new Range16.Ptr(2365, 2384, 19), new Range16.Ptr(2392, 2401, 1), new Range16.Ptr(2417, 2423, 1), new Range16.Ptr(2425, 2431, 1), new Range16.Ptr(2437, 2444, 1), new Range16.Ptr(2447, 2448, 1), new Range16.Ptr(2451, 2472, 1), new Range16.Ptr(2474, 2480, 1), new Range16.Ptr(2482, 2486, 4), new Range16.Ptr(2487, 2489, 1), new Range16.Ptr(2493, 2510, 17), new Range16.Ptr(2524, 2525, 1), new Range16.Ptr(2527, 2529, 1), new Range16.Ptr(2544, 2545, 1), new Range16.Ptr(2565, 2570, 1), new Range16.Ptr(2575, 2576, 1), new Range16.Ptr(2579, 2600, 1), new Range16.Ptr(2602, 2608, 1), new Range16.Ptr(2610, 2611, 1), new Range16.Ptr(2613, 2614, 1), new Range16.Ptr(2616, 2617, 1), new Range16.Ptr(2649, 2652, 1), new Range16.Ptr(2654, 2674, 20), new Range16.Ptr(2675, 2676, 1), new Range16.Ptr(2693, 2701, 1), new Range16.Ptr(2703, 2705, 1), new Range16.Ptr(2707, 2728, 1), new Range16.Ptr(2730, 2736, 1), new Range16.Ptr(2738, 2739, 1), new Range16.Ptr(2741, 2745, 1), new Range16.Ptr(2749, 2768, 19), new Range16.Ptr(2784, 2785, 1), new Range16.Ptr(2821, 2828, 1), new Range16.Ptr(2831, 2832, 1), new Range16.Ptr(2835, 2856, 1), new Range16.Ptr(2858, 2864, 1), new Range16.Ptr(2866, 2867, 1), new Range16.Ptr(2869, 2873, 1), new Range16.Ptr(2877, 2908, 31), new Range16.Ptr(2909, 2911, 2), new Range16.Ptr(2912, 2913, 1), new Range16.Ptr(2929, 2947, 18), new Range16.Ptr(2949, 2954, 1), new Range16.Ptr(2958, 2960, 1), new Range16.Ptr(2962, 2965, 1), new Range16.Ptr(2969, 2970, 1), new Range16.Ptr(2972, 2974, 2), new Range16.Ptr(2975, 2979, 4), new Range16.Ptr(2980, 2984, 4), new Range16.Ptr(2985, 2986, 1), new Range16.Ptr(2990, 3001, 1), new Range16.Ptr(3024, 3077, 53), new Range16.Ptr(3078, 3084, 1), new Range16.Ptr(3086, 3088, 1), new Range16.Ptr(3090, 3112, 1), new Range16.Ptr(3114, 3123, 1), new Range16.Ptr(3125, 3129, 1), new Range16.Ptr(3133, 3160, 27), new Range16.Ptr(3161, 3168, 7), new Range16.Ptr(3169, 3205, 36), new Range16.Ptr(3206, 3212, 1), new Range16.Ptr(3214, 3216, 1), new Range16.Ptr(3218, 3240, 1), new Range16.Ptr(3242, 3251, 1), new Range16.Ptr(3253, 3257, 1), new Range16.Ptr(3261, 3294, 33), new Range16.Ptr(3296, 3297, 1), new Range16.Ptr(3313, 3314, 1), new Range16.Ptr(3333, 3340, 1), new Range16.Ptr(3342, 3344, 1), new Range16.Ptr(3346, 3386, 1), new Range16.Ptr(3389, 3406, 17), new Range16.Ptr(3424, 3425, 1), new Range16.Ptr(3450, 3455, 1), new Range16.Ptr(3461, 3478, 1), new Range16.Ptr(3482, 3505, 1), new Range16.Ptr(3507, 3515, 1), new Range16.Ptr(3517, 3520, 3), new Range16.Ptr(3521, 3526, 1), new Range16.Ptr(3585, 3632, 1), new Range16.Ptr(3634, 3635, 1), new Range16.Ptr(3648, 3654, 1), new Range16.Ptr(3713, 3714, 1), new Range16.Ptr(3716, 3719, 3), new Range16.Ptr(3720, 3722, 2), new Range16.Ptr(3725, 3732, 7), new Range16.Ptr(3733, 3735, 1), new Range16.Ptr(3737, 3743, 1), new Range16.Ptr(3745, 3747, 1), new Range16.Ptr(3749, 3751, 2), new Range16.Ptr(3754, 3755, 1), new Range16.Ptr(3757, 3760, 1), new Range16.Ptr(3762, 3763, 1), new Range16.Ptr(3773, 3776, 3), new Range16.Ptr(3777, 3780, 1), new Range16.Ptr(3782, 3804, 22), new Range16.Ptr(3805, 3807, 1), new Range16.Ptr(3840, 3904, 64), new Range16.Ptr(3905, 3911, 1), new Range16.Ptr(3913, 3948, 1), new Range16.Ptr(3976, 3980, 1), new Range16.Ptr(4096, 4138, 1), new Range16.Ptr(4159, 4176, 17), new Range16.Ptr(4177, 4181, 1), new Range16.Ptr(4186, 4189, 1), new Range16.Ptr(4193, 4197, 4), new Range16.Ptr(4198, 4206, 8), new Range16.Ptr(4207, 4208, 1), new Range16.Ptr(4213, 4225, 1), new Range16.Ptr(4238, 4256, 18), new Range16.Ptr(4257, 4293, 1), new Range16.Ptr(4295, 4301, 6), new Range16.Ptr(4304, 4346, 1), new Range16.Ptr(4348, 4680, 1), new Range16.Ptr(4682, 4685, 1), new Range16.Ptr(4688, 4694, 1), new Range16.Ptr(4696, 4698, 2), new Range16.Ptr(4699, 4701, 1), new Range16.Ptr(4704, 4744, 1), new Range16.Ptr(4746, 4749, 1), new Range16.Ptr(4752, 4784, 1), new Range16.Ptr(4786, 4789, 1), new Range16.Ptr(4792, 4798, 1), new Range16.Ptr(4800, 4802, 2), new Range16.Ptr(4803, 4805, 1), new Range16.Ptr(4808, 4822, 1), new Range16.Ptr(4824, 4880, 1), new Range16.Ptr(4882, 4885, 1), new Range16.Ptr(4888, 4954, 1), new Range16.Ptr(4992, 5007, 1), new Range16.Ptr(5024, 5108, 1), new Range16.Ptr(5121, 5740, 1), new Range16.Ptr(5743, 5759, 1), new Range16.Ptr(5761, 5786, 1), new Range16.Ptr(5792, 5866, 1), new Range16.Ptr(5888, 5900, 1), new Range16.Ptr(5902, 5905, 1), new Range16.Ptr(5920, 5937, 1), new Range16.Ptr(5952, 5969, 1), new Range16.Ptr(5984, 5996, 1), new Range16.Ptr(5998, 6000, 1), new Range16.Ptr(6016, 6067, 1), new Range16.Ptr(6103, 6108, 5), new Range16.Ptr(6176, 6263, 1), new Range16.Ptr(6272, 6312, 1), new Range16.Ptr(6314, 6320, 6), new Range16.Ptr(6321, 6389, 1), new Range16.Ptr(6400, 6428, 1), new Range16.Ptr(6480, 6509, 1), new Range16.Ptr(6512, 6516, 1), new Range16.Ptr(6528, 6571, 1), new Range16.Ptr(6593, 6599, 1), new Range16.Ptr(6656, 6678, 1), new Range16.Ptr(6688, 6740, 1), new Range16.Ptr(6823, 6917, 94), new Range16.Ptr(6918, 6963, 1), new Range16.Ptr(6981, 6987, 1), new Range16.Ptr(7043, 7072, 1), new Range16.Ptr(7086, 7087, 1), new Range16.Ptr(7098, 7141, 1), new Range16.Ptr(7168, 7203, 1), new Range16.Ptr(7245, 7247, 1), new Range16.Ptr(7258, 7293, 1), new Range16.Ptr(7401, 7404, 1), new Range16.Ptr(7406, 7409, 1), new Range16.Ptr(7413, 7414, 1), new Range16.Ptr(7424, 7615, 1), new Range16.Ptr(7680, 7957, 1), new Range16.Ptr(7960, 7965, 1), new Range16.Ptr(7968, 8005, 1), new Range16.Ptr(8008, 8013, 1), new Range16.Ptr(8016, 8023, 1), new Range16.Ptr(8025, 8031, 2), new Range16.Ptr(8032, 8061, 1), new Range16.Ptr(8064, 8116, 1), new Range16.Ptr(8118, 8124, 1), new Range16.Ptr(8126, 8130, 4), new Range16.Ptr(8131, 8132, 1), new Range16.Ptr(8134, 8140, 1), new Range16.Ptr(8144, 8147, 1), new Range16.Ptr(8150, 8155, 1), new Range16.Ptr(8160, 8172, 1), new Range16.Ptr(8178, 8180, 1), new Range16.Ptr(8182, 8188, 1), new Range16.Ptr(8305, 8319, 14), new Range16.Ptr(8336, 8348, 1), new Range16.Ptr(8450, 8455, 5), new Range16.Ptr(8458, 8467, 1), new Range16.Ptr(8469, 8473, 4), new Range16.Ptr(8474, 8477, 1), new Range16.Ptr(8484, 8490, 2), new Range16.Ptr(8491, 8493, 1), new Range16.Ptr(8495, 8505, 1), new Range16.Ptr(8508, 8511, 1), new Range16.Ptr(8517, 8521, 1), new Range16.Ptr(8526, 8579, 53), new Range16.Ptr(8580, 11264, 2684), new Range16.Ptr(11265, 11310, 1), new Range16.Ptr(11312, 11358, 1), new Range16.Ptr(11360, 11492, 1), new Range16.Ptr(11499, 11502, 1), new Range16.Ptr(11506, 11507, 1), new Range16.Ptr(11520, 11557, 1), new Range16.Ptr(11559, 11565, 6), new Range16.Ptr(11568, 11623, 1), new Range16.Ptr(11631, 11648, 17), new Range16.Ptr(11649, 11670, 1), new Range16.Ptr(11680, 11686, 1), new Range16.Ptr(11688, 11694, 1), new Range16.Ptr(11696, 11702, 1), new Range16.Ptr(11704, 11710, 1), new Range16.Ptr(11712, 11718, 1), new Range16.Ptr(11720, 11726, 1), new Range16.Ptr(11728, 11734, 1), new Range16.Ptr(11736, 11742, 1), new Range16.Ptr(11823, 12293, 470), new Range16.Ptr(12294, 12337, 43), new Range16.Ptr(12338, 12341, 1), new Range16.Ptr(12347, 12348, 1), new Range16.Ptr(12353, 12438, 1), new Range16.Ptr(12445, 12447, 1), new Range16.Ptr(12449, 12538, 1), new Range16.Ptr(12540, 12543, 1), new Range16.Ptr(12549, 12589, 1), new Range16.Ptr(12593, 12686, 1), new Range16.Ptr(12704, 12730, 1), new Range16.Ptr(12784, 12799, 1), new Range16.Ptr(13312, 19893, 1), new Range16.Ptr(19968, 40908, 1), new Range16.Ptr(40960, 42124, 1), new Range16.Ptr(42192, 42237, 1), new Range16.Ptr(42240, 42508, 1), new Range16.Ptr(42512, 42527, 1), new Range16.Ptr(42538, 42539, 1), new Range16.Ptr(42560, 42606, 1), new Range16.Ptr(42623, 42647, 1), new Range16.Ptr(42656, 42725, 1), new Range16.Ptr(42775, 42783, 1), new Range16.Ptr(42786, 42888, 1), new Range16.Ptr(42891, 42894, 1), new Range16.Ptr(42896, 42899, 1), new Range16.Ptr(42912, 42922, 1), new Range16.Ptr(43000, 43009, 1), new Range16.Ptr(43011, 43013, 1), new Range16.Ptr(43015, 43018, 1), new Range16.Ptr(43020, 43042, 1), new Range16.Ptr(43072, 43123, 1), new Range16.Ptr(43138, 43187, 1), new Range16.Ptr(43250, 43255, 1), new Range16.Ptr(43259, 43274, 15), new Range16.Ptr(43275, 43301, 1), new Range16.Ptr(43312, 43334, 1), new Range16.Ptr(43360, 43388, 1), new Range16.Ptr(43396, 43442, 1), new Range16.Ptr(43471, 43520, 49), new Range16.Ptr(43521, 43560, 1), new Range16.Ptr(43584, 43586, 1), new Range16.Ptr(43588, 43595, 1), new Range16.Ptr(43616, 43638, 1), new Range16.Ptr(43642, 43648, 6), new Range16.Ptr(43649, 43695, 1), new Range16.Ptr(43697, 43701, 4), new Range16.Ptr(43702, 43705, 3), new Range16.Ptr(43706, 43709, 1), new Range16.Ptr(43712, 43714, 2), new Range16.Ptr(43739, 43741, 1), new Range16.Ptr(43744, 43754, 1), new Range16.Ptr(43762, 43764, 1), new Range16.Ptr(43777, 43782, 1), new Range16.Ptr(43785, 43790, 1), new Range16.Ptr(43793, 43798, 1), new Range16.Ptr(43808, 43814, 1), new Range16.Ptr(43816, 43822, 1), new Range16.Ptr(43968, 44002, 1), new Range16.Ptr(44032, 55203, 1), new Range16.Ptr(55216, 55238, 1), new Range16.Ptr(55243, 55291, 1), new Range16.Ptr(63744, 64109, 1), new Range16.Ptr(64112, 64217, 1), new Range16.Ptr(64256, 64262, 1), new Range16.Ptr(64275, 64279, 1), new Range16.Ptr(64285, 64287, 2), new Range16.Ptr(64288, 64296, 1), new Range16.Ptr(64298, 64310, 1), new Range16.Ptr(64312, 64316, 1), new Range16.Ptr(64318, 64320, 2), new Range16.Ptr(64321, 64323, 2), new Range16.Ptr(64324, 64326, 2), new Range16.Ptr(64327, 64433, 1), new Range16.Ptr(64467, 64829, 1), new Range16.Ptr(64848, 64911, 1), new Range16.Ptr(64914, 64967, 1), new Range16.Ptr(65008, 65019, 1), new Range16.Ptr(65136, 65140, 1), new Range16.Ptr(65142, 65276, 1), new Range16.Ptr(65313, 65338, 1), new Range16.Ptr(65345, 65370, 1), new Range16.Ptr(65382, 65470, 1), new Range16.Ptr(65474, 65479, 1), new Range16.Ptr(65482, 65487, 1), new Range16.Ptr(65490, 65495, 1), new Range16.Ptr(65498, 65500, 1)]), new ($sliceType(Range32))([new Range32.Ptr(65536, 65547, 1), new Range32.Ptr(65549, 65574, 1), new Range32.Ptr(65576, 65594, 1), new Range32.Ptr(65596, 65597, 1), new Range32.Ptr(65599, 65613, 1), new Range32.Ptr(65616, 65629, 1), new Range32.Ptr(65664, 65786, 1), new Range32.Ptr(66176, 66204, 1), new Range32.Ptr(66208, 66256, 1), new Range32.Ptr(66304, 66334, 1), new Range32.Ptr(66352, 66368, 1), new Range32.Ptr(66370, 66377, 1), new Range32.Ptr(66432, 66461, 1), new Range32.Ptr(66464, 66499, 1), new Range32.Ptr(66504, 66511, 1), new Range32.Ptr(66560, 66717, 1), new Range32.Ptr(67584, 67589, 1), new Range32.Ptr(67592, 67594, 2), new Range32.Ptr(67595, 67637, 1), new Range32.Ptr(67639, 67640, 1), new Range32.Ptr(67644, 67647, 3), new Range32.Ptr(67648, 67669, 1), new Range32.Ptr(67840, 67861, 1), new Range32.Ptr(67872, 67897, 1), new Range32.Ptr(67968, 68023, 1), new Range32.Ptr(68030, 68031, 1), new Range32.Ptr(68096, 68112, 16), new Range32.Ptr(68113, 68115, 1), new Range32.Ptr(68117, 68119, 1), new Range32.Ptr(68121, 68147, 1), new Range32.Ptr(68192, 68220, 1), new Range32.Ptr(68352, 68405, 1), new Range32.Ptr(68416, 68437, 1), new Range32.Ptr(68448, 68466, 1), new Range32.Ptr(68608, 68680, 1), new Range32.Ptr(69635, 69687, 1), new Range32.Ptr(69763, 69807, 1), new Range32.Ptr(69840, 69864, 1), new Range32.Ptr(69891, 69926, 1), new Range32.Ptr(70019, 70066, 1), new Range32.Ptr(70081, 70084, 1), new Range32.Ptr(71296, 71338, 1), new Range32.Ptr(73728, 74606, 1), new Range32.Ptr(77824, 78894, 1), new Range32.Ptr(92160, 92728, 1), new Range32.Ptr(93952, 94020, 1), new Range32.Ptr(94032, 94099, 67), new Range32.Ptr(94100, 94111, 1), new Range32.Ptr(110592, 110593, 1), new Range32.Ptr(119808, 119892, 1), new Range32.Ptr(119894, 119964, 1), new Range32.Ptr(119966, 119967, 1), new Range32.Ptr(119970, 119973, 3), new Range32.Ptr(119974, 119977, 3), new Range32.Ptr(119978, 119980, 1), new Range32.Ptr(119982, 119993, 1), new Range32.Ptr(119995, 119997, 2), new Range32.Ptr(119998, 120003, 1), new Range32.Ptr(120005, 120069, 1), new Range32.Ptr(120071, 120074, 1), new Range32.Ptr(120077, 120084, 1), new Range32.Ptr(120086, 120092, 1), new Range32.Ptr(120094, 120121, 1), new Range32.Ptr(120123, 120126, 1), new Range32.Ptr(120128, 120132, 1), new Range32.Ptr(120134, 120138, 4), new Range32.Ptr(120139, 120144, 1), new Range32.Ptr(120146, 120485, 1), new Range32.Ptr(120488, 120512, 1), new Range32.Ptr(120514, 120538, 1), new Range32.Ptr(120540, 120570, 1), new Range32.Ptr(120572, 120596, 1), new Range32.Ptr(120598, 120628, 1), new Range32.Ptr(120630, 120654, 1), new Range32.Ptr(120656, 120686, 1), new Range32.Ptr(120688, 120712, 1), new Range32.Ptr(120714, 120744, 1), new Range32.Ptr(120746, 120770, 1), new Range32.Ptr(120772, 120779, 1), new Range32.Ptr(126464, 126467, 1), new Range32.Ptr(126469, 126495, 1), new Range32.Ptr(126497, 126498, 1), new Range32.Ptr(126500, 126503, 3), new Range32.Ptr(126505, 126514, 1), new Range32.Ptr(126516, 126519, 1), new Range32.Ptr(126521, 126523, 2), new Range32.Ptr(126530, 126535, 5), new Range32.Ptr(126537, 126541, 2), new Range32.Ptr(126542, 126543, 1), new Range32.Ptr(126545, 126546, 1), new Range32.Ptr(126548, 126551, 3), new Range32.Ptr(126553, 126561, 2), new Range32.Ptr(126562, 126564, 2), new Range32.Ptr(126567, 126570, 1), new Range32.Ptr(126572, 126578, 1), new Range32.Ptr(126580, 126583, 1), new Range32.Ptr(126585, 126588, 1), new Range32.Ptr(126590, 126592, 2), new Range32.Ptr(126593, 126601, 1), new Range32.Ptr(126603, 126619, 1), new Range32.Ptr(126625, 126627, 1), new Range32.Ptr(126629, 126633, 1), new Range32.Ptr(126635, 126651, 1), new Range32.Ptr(131072, 173782, 1), new Range32.Ptr(173824, 177972, 1), new Range32.Ptr(177984, 178205, 1), new Range32.Ptr(194560, 195101, 1)]), 6);
		_Nd = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(48, 57, 1), new Range16.Ptr(1632, 1641, 1), new Range16.Ptr(1776, 1785, 1), new Range16.Ptr(1984, 1993, 1), new Range16.Ptr(2406, 2415, 1), new Range16.Ptr(2534, 2543, 1), new Range16.Ptr(2662, 2671, 1), new Range16.Ptr(2790, 2799, 1), new Range16.Ptr(2918, 2927, 1), new Range16.Ptr(3046, 3055, 1), new Range16.Ptr(3174, 3183, 1), new Range16.Ptr(3302, 3311, 1), new Range16.Ptr(3430, 3439, 1), new Range16.Ptr(3664, 3673, 1), new Range16.Ptr(3792, 3801, 1), new Range16.Ptr(3872, 3881, 1), new Range16.Ptr(4160, 4169, 1), new Range16.Ptr(4240, 4249, 1), new Range16.Ptr(6112, 6121, 1), new Range16.Ptr(6160, 6169, 1), new Range16.Ptr(6470, 6479, 1), new Range16.Ptr(6608, 6617, 1), new Range16.Ptr(6784, 6793, 1), new Range16.Ptr(6800, 6809, 1), new Range16.Ptr(6992, 7001, 1), new Range16.Ptr(7088, 7097, 1), new Range16.Ptr(7232, 7241, 1), new Range16.Ptr(7248, 7257, 1), new Range16.Ptr(42528, 42537, 1), new Range16.Ptr(43216, 43225, 1), new Range16.Ptr(43264, 43273, 1), new Range16.Ptr(43472, 43481, 1), new Range16.Ptr(43600, 43609, 1), new Range16.Ptr(44016, 44025, 1), new Range16.Ptr(65296, 65305, 1)]), new ($sliceType(Range32))([new Range32.Ptr(66720, 66729, 1), new Range32.Ptr(69734, 69743, 1), new Range32.Ptr(69872, 69881, 1), new Range32.Ptr(69942, 69951, 1), new Range32.Ptr(70096, 70105, 1), new Range32.Ptr(71360, 71369, 1), new Range32.Ptr(120782, 120831, 1)]), 1);
		$pkg.Digit = _Nd;
		$pkg.Letter = _L;
		_White_Space = new RangeTable.Ptr(new ($sliceType(Range16))([new Range16.Ptr(9, 13, 1), new Range16.Ptr(32, 32, 1), new Range16.Ptr(133, 133, 1), new Range16.Ptr(160, 160, 1), new Range16.Ptr(5760, 5760, 1), new Range16.Ptr(8192, 8202, 1), new Range16.Ptr(8232, 8233, 1), new Range16.Ptr(8239, 8239, 1), new Range16.Ptr(8287, 8287, 1), new Range16.Ptr(12288, 12288, 1)]), ($sliceType(Range32)).nil, 4);
		$pkg.White_Space = _White_Space;
		_CaseRanges = new ($sliceType(CaseRange))([new CaseRange.Ptr(65, 90, $toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(97, 122, $toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(181, 181, $toNativeArray("Int32", [743, 0, 743])), new CaseRange.Ptr(192, 214, $toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(216, 222, $toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(224, 246, $toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(248, 254, $toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(255, 255, $toNativeArray("Int32", [121, 0, 121])), new CaseRange.Ptr(256, 303, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(304, 304, $toNativeArray("Int32", [0, -199, 0])), new CaseRange.Ptr(305, 305, $toNativeArray("Int32", [-232, 0, -232])), new CaseRange.Ptr(306, 311, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(313, 328, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(330, 375, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(376, 376, $toNativeArray("Int32", [0, -121, 0])), new CaseRange.Ptr(377, 382, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(383, 383, $toNativeArray("Int32", [-300, 0, -300])), new CaseRange.Ptr(384, 384, $toNativeArray("Int32", [195, 0, 195])), new CaseRange.Ptr(385, 385, $toNativeArray("Int32", [0, 210, 0])), new CaseRange.Ptr(386, 389, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(390, 390, $toNativeArray("Int32", [0, 206, 0])), new CaseRange.Ptr(391, 392, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(393, 394, $toNativeArray("Int32", [0, 205, 0])), new CaseRange.Ptr(395, 396, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(398, 398, $toNativeArray("Int32", [0, 79, 0])), new CaseRange.Ptr(399, 399, $toNativeArray("Int32", [0, 202, 0])), new CaseRange.Ptr(400, 400, $toNativeArray("Int32", [0, 203, 0])), new CaseRange.Ptr(401, 402, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(403, 403, $toNativeArray("Int32", [0, 205, 0])), new CaseRange.Ptr(404, 404, $toNativeArray("Int32", [0, 207, 0])), new CaseRange.Ptr(405, 405, $toNativeArray("Int32", [97, 0, 97])), new CaseRange.Ptr(406, 406, $toNativeArray("Int32", [0, 211, 0])), new CaseRange.Ptr(407, 407, $toNativeArray("Int32", [0, 209, 0])), new CaseRange.Ptr(408, 409, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(410, 410, $toNativeArray("Int32", [163, 0, 163])), new CaseRange.Ptr(412, 412, $toNativeArray("Int32", [0, 211, 0])), new CaseRange.Ptr(413, 413, $toNativeArray("Int32", [0, 213, 0])), new CaseRange.Ptr(414, 414, $toNativeArray("Int32", [130, 0, 130])), new CaseRange.Ptr(415, 415, $toNativeArray("Int32", [0, 214, 0])), new CaseRange.Ptr(416, 421, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(422, 422, $toNativeArray("Int32", [0, 218, 0])), new CaseRange.Ptr(423, 424, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(425, 425, $toNativeArray("Int32", [0, 218, 0])), new CaseRange.Ptr(428, 429, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(430, 430, $toNativeArray("Int32", [0, 218, 0])), new CaseRange.Ptr(431, 432, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(433, 434, $toNativeArray("Int32", [0, 217, 0])), new CaseRange.Ptr(435, 438, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(439, 439, $toNativeArray("Int32", [0, 219, 0])), new CaseRange.Ptr(440, 441, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(444, 445, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(447, 447, $toNativeArray("Int32", [56, 0, 56])), new CaseRange.Ptr(452, 452, $toNativeArray("Int32", [0, 2, 1])), new CaseRange.Ptr(453, 453, $toNativeArray("Int32", [-1, 1, 0])), new CaseRange.Ptr(454, 454, $toNativeArray("Int32", [-2, 0, -1])), new CaseRange.Ptr(455, 455, $toNativeArray("Int32", [0, 2, 1])), new CaseRange.Ptr(456, 456, $toNativeArray("Int32", [-1, 1, 0])), new CaseRange.Ptr(457, 457, $toNativeArray("Int32", [-2, 0, -1])), new CaseRange.Ptr(458, 458, $toNativeArray("Int32", [0, 2, 1])), new CaseRange.Ptr(459, 459, $toNativeArray("Int32", [-1, 1, 0])), new CaseRange.Ptr(460, 460, $toNativeArray("Int32", [-2, 0, -1])), new CaseRange.Ptr(461, 476, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(477, 477, $toNativeArray("Int32", [-79, 0, -79])), new CaseRange.Ptr(478, 495, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(497, 497, $toNativeArray("Int32", [0, 2, 1])), new CaseRange.Ptr(498, 498, $toNativeArray("Int32", [-1, 1, 0])), new CaseRange.Ptr(499, 499, $toNativeArray("Int32", [-2, 0, -1])), new CaseRange.Ptr(500, 501, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(502, 502, $toNativeArray("Int32", [0, -97, 0])), new CaseRange.Ptr(503, 503, $toNativeArray("Int32", [0, -56, 0])), new CaseRange.Ptr(504, 543, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(544, 544, $toNativeArray("Int32", [0, -130, 0])), new CaseRange.Ptr(546, 563, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(570, 570, $toNativeArray("Int32", [0, 10795, 0])), new CaseRange.Ptr(571, 572, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(573, 573, $toNativeArray("Int32", [0, -163, 0])), new CaseRange.Ptr(574, 574, $toNativeArray("Int32", [0, 10792, 0])), new CaseRange.Ptr(575, 576, $toNativeArray("Int32", [10815, 0, 10815])), new CaseRange.Ptr(577, 578, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(579, 579, $toNativeArray("Int32", [0, -195, 0])), new CaseRange.Ptr(580, 580, $toNativeArray("Int32", [0, 69, 0])), new CaseRange.Ptr(581, 581, $toNativeArray("Int32", [0, 71, 0])), new CaseRange.Ptr(582, 591, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(592, 592, $toNativeArray("Int32", [10783, 0, 10783])), new CaseRange.Ptr(593, 593, $toNativeArray("Int32", [10780, 0, 10780])), new CaseRange.Ptr(594, 594, $toNativeArray("Int32", [10782, 0, 10782])), new CaseRange.Ptr(595, 595, $toNativeArray("Int32", [-210, 0, -210])), new CaseRange.Ptr(596, 596, $toNativeArray("Int32", [-206, 0, -206])), new CaseRange.Ptr(598, 599, $toNativeArray("Int32", [-205, 0, -205])), new CaseRange.Ptr(601, 601, $toNativeArray("Int32", [-202, 0, -202])), new CaseRange.Ptr(603, 603, $toNativeArray("Int32", [-203, 0, -203])), new CaseRange.Ptr(608, 608, $toNativeArray("Int32", [-205, 0, -205])), new CaseRange.Ptr(611, 611, $toNativeArray("Int32", [-207, 0, -207])), new CaseRange.Ptr(613, 613, $toNativeArray("Int32", [42280, 0, 42280])), new CaseRange.Ptr(614, 614, $toNativeArray("Int32", [42308, 0, 42308])), new CaseRange.Ptr(616, 616, $toNativeArray("Int32", [-209, 0, -209])), new CaseRange.Ptr(617, 617, $toNativeArray("Int32", [-211, 0, -211])), new CaseRange.Ptr(619, 619, $toNativeArray("Int32", [10743, 0, 10743])), new CaseRange.Ptr(623, 623, $toNativeArray("Int32", [-211, 0, -211])), new CaseRange.Ptr(625, 625, $toNativeArray("Int32", [10749, 0, 10749])), new CaseRange.Ptr(626, 626, $toNativeArray("Int32", [-213, 0, -213])), new CaseRange.Ptr(629, 629, $toNativeArray("Int32", [-214, 0, -214])), new CaseRange.Ptr(637, 637, $toNativeArray("Int32", [10727, 0, 10727])), new CaseRange.Ptr(640, 640, $toNativeArray("Int32", [-218, 0, -218])), new CaseRange.Ptr(643, 643, $toNativeArray("Int32", [-218, 0, -218])), new CaseRange.Ptr(648, 648, $toNativeArray("Int32", [-218, 0, -218])), new CaseRange.Ptr(649, 649, $toNativeArray("Int32", [-69, 0, -69])), new CaseRange.Ptr(650, 651, $toNativeArray("Int32", [-217, 0, -217])), new CaseRange.Ptr(652, 652, $toNativeArray("Int32", [-71, 0, -71])), new CaseRange.Ptr(658, 658, $toNativeArray("Int32", [-219, 0, -219])), new CaseRange.Ptr(837, 837, $toNativeArray("Int32", [84, 0, 84])), new CaseRange.Ptr(880, 883, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(886, 887, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(891, 893, $toNativeArray("Int32", [130, 0, 130])), new CaseRange.Ptr(902, 902, $toNativeArray("Int32", [0, 38, 0])), new CaseRange.Ptr(904, 906, $toNativeArray("Int32", [0, 37, 0])), new CaseRange.Ptr(908, 908, $toNativeArray("Int32", [0, 64, 0])), new CaseRange.Ptr(910, 911, $toNativeArray("Int32", [0, 63, 0])), new CaseRange.Ptr(913, 929, $toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(931, 939, $toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(940, 940, $toNativeArray("Int32", [-38, 0, -38])), new CaseRange.Ptr(941, 943, $toNativeArray("Int32", [-37, 0, -37])), new CaseRange.Ptr(945, 961, $toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(962, 962, $toNativeArray("Int32", [-31, 0, -31])), new CaseRange.Ptr(963, 971, $toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(972, 972, $toNativeArray("Int32", [-64, 0, -64])), new CaseRange.Ptr(973, 974, $toNativeArray("Int32", [-63, 0, -63])), new CaseRange.Ptr(975, 975, $toNativeArray("Int32", [0, 8, 0])), new CaseRange.Ptr(976, 976, $toNativeArray("Int32", [-62, 0, -62])), new CaseRange.Ptr(977, 977, $toNativeArray("Int32", [-57, 0, -57])), new CaseRange.Ptr(981, 981, $toNativeArray("Int32", [-47, 0, -47])), new CaseRange.Ptr(982, 982, $toNativeArray("Int32", [-54, 0, -54])), new CaseRange.Ptr(983, 983, $toNativeArray("Int32", [-8, 0, -8])), new CaseRange.Ptr(984, 1007, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1008, 1008, $toNativeArray("Int32", [-86, 0, -86])), new CaseRange.Ptr(1009, 1009, $toNativeArray("Int32", [-80, 0, -80])), new CaseRange.Ptr(1010, 1010, $toNativeArray("Int32", [7, 0, 7])), new CaseRange.Ptr(1012, 1012, $toNativeArray("Int32", [0, -60, 0])), new CaseRange.Ptr(1013, 1013, $toNativeArray("Int32", [-96, 0, -96])), new CaseRange.Ptr(1015, 1016, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1017, 1017, $toNativeArray("Int32", [0, -7, 0])), new CaseRange.Ptr(1018, 1019, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1021, 1023, $toNativeArray("Int32", [0, -130, 0])), new CaseRange.Ptr(1024, 1039, $toNativeArray("Int32", [0, 80, 0])), new CaseRange.Ptr(1040, 1071, $toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(1072, 1103, $toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(1104, 1119, $toNativeArray("Int32", [-80, 0, -80])), new CaseRange.Ptr(1120, 1153, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1162, 1215, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1216, 1216, $toNativeArray("Int32", [0, 15, 0])), new CaseRange.Ptr(1217, 1230, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1231, 1231, $toNativeArray("Int32", [-15, 0, -15])), new CaseRange.Ptr(1232, 1319, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(1329, 1366, $toNativeArray("Int32", [0, 48, 0])), new CaseRange.Ptr(1377, 1414, $toNativeArray("Int32", [-48, 0, -48])), new CaseRange.Ptr(4256, 4293, $toNativeArray("Int32", [0, 7264, 0])), new CaseRange.Ptr(4295, 4295, $toNativeArray("Int32", [0, 7264, 0])), new CaseRange.Ptr(4301, 4301, $toNativeArray("Int32", [0, 7264, 0])), new CaseRange.Ptr(7545, 7545, $toNativeArray("Int32", [35332, 0, 35332])), new CaseRange.Ptr(7549, 7549, $toNativeArray("Int32", [3814, 0, 3814])), new CaseRange.Ptr(7680, 7829, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(7835, 7835, $toNativeArray("Int32", [-59, 0, -59])), new CaseRange.Ptr(7838, 7838, $toNativeArray("Int32", [0, -7615, 0])), new CaseRange.Ptr(7840, 7935, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(7936, 7943, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(7944, 7951, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(7952, 7957, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(7960, 7965, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(7968, 7975, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(7976, 7983, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(7984, 7991, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(7992, 7999, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8000, 8005, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8008, 8013, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8017, 8017, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8019, 8019, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8021, 8021, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8023, 8023, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8025, 8025, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8027, 8027, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8029, 8029, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8031, 8031, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8032, 8039, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8040, 8047, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8048, 8049, $toNativeArray("Int32", [74, 0, 74])), new CaseRange.Ptr(8050, 8053, $toNativeArray("Int32", [86, 0, 86])), new CaseRange.Ptr(8054, 8055, $toNativeArray("Int32", [100, 0, 100])), new CaseRange.Ptr(8056, 8057, $toNativeArray("Int32", [128, 0, 128])), new CaseRange.Ptr(8058, 8059, $toNativeArray("Int32", [112, 0, 112])), new CaseRange.Ptr(8060, 8061, $toNativeArray("Int32", [126, 0, 126])), new CaseRange.Ptr(8064, 8071, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8072, 8079, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8080, 8087, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8088, 8095, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8096, 8103, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8104, 8111, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8112, 8113, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8115, 8115, $toNativeArray("Int32", [9, 0, 9])), new CaseRange.Ptr(8120, 8121, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8122, 8123, $toNativeArray("Int32", [0, -74, 0])), new CaseRange.Ptr(8124, 8124, $toNativeArray("Int32", [0, -9, 0])), new CaseRange.Ptr(8126, 8126, $toNativeArray("Int32", [-7205, 0, -7205])), new CaseRange.Ptr(8131, 8131, $toNativeArray("Int32", [9, 0, 9])), new CaseRange.Ptr(8136, 8139, $toNativeArray("Int32", [0, -86, 0])), new CaseRange.Ptr(8140, 8140, $toNativeArray("Int32", [0, -9, 0])), new CaseRange.Ptr(8144, 8145, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8152, 8153, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8154, 8155, $toNativeArray("Int32", [0, -100, 0])), new CaseRange.Ptr(8160, 8161, $toNativeArray("Int32", [8, 0, 8])), new CaseRange.Ptr(8165, 8165, $toNativeArray("Int32", [7, 0, 7])), new CaseRange.Ptr(8168, 8169, $toNativeArray("Int32", [0, -8, 0])), new CaseRange.Ptr(8170, 8171, $toNativeArray("Int32", [0, -112, 0])), new CaseRange.Ptr(8172, 8172, $toNativeArray("Int32", [0, -7, 0])), new CaseRange.Ptr(8179, 8179, $toNativeArray("Int32", [9, 0, 9])), new CaseRange.Ptr(8184, 8185, $toNativeArray("Int32", [0, -128, 0])), new CaseRange.Ptr(8186, 8187, $toNativeArray("Int32", [0, -126, 0])), new CaseRange.Ptr(8188, 8188, $toNativeArray("Int32", [0, -9, 0])), new CaseRange.Ptr(8486, 8486, $toNativeArray("Int32", [0, -7517, 0])), new CaseRange.Ptr(8490, 8490, $toNativeArray("Int32", [0, -8383, 0])), new CaseRange.Ptr(8491, 8491, $toNativeArray("Int32", [0, -8262, 0])), new CaseRange.Ptr(8498, 8498, $toNativeArray("Int32", [0, 28, 0])), new CaseRange.Ptr(8526, 8526, $toNativeArray("Int32", [-28, 0, -28])), new CaseRange.Ptr(8544, 8559, $toNativeArray("Int32", [0, 16, 0])), new CaseRange.Ptr(8560, 8575, $toNativeArray("Int32", [-16, 0, -16])), new CaseRange.Ptr(8579, 8580, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(9398, 9423, $toNativeArray("Int32", [0, 26, 0])), new CaseRange.Ptr(9424, 9449, $toNativeArray("Int32", [-26, 0, -26])), new CaseRange.Ptr(11264, 11310, $toNativeArray("Int32", [0, 48, 0])), new CaseRange.Ptr(11312, 11358, $toNativeArray("Int32", [-48, 0, -48])), new CaseRange.Ptr(11360, 11361, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11362, 11362, $toNativeArray("Int32", [0, -10743, 0])), new CaseRange.Ptr(11363, 11363, $toNativeArray("Int32", [0, -3814, 0])), new CaseRange.Ptr(11364, 11364, $toNativeArray("Int32", [0, -10727, 0])), new CaseRange.Ptr(11365, 11365, $toNativeArray("Int32", [-10795, 0, -10795])), new CaseRange.Ptr(11366, 11366, $toNativeArray("Int32", [-10792, 0, -10792])), new CaseRange.Ptr(11367, 11372, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11373, 11373, $toNativeArray("Int32", [0, -10780, 0])), new CaseRange.Ptr(11374, 11374, $toNativeArray("Int32", [0, -10749, 0])), new CaseRange.Ptr(11375, 11375, $toNativeArray("Int32", [0, -10783, 0])), new CaseRange.Ptr(11376, 11376, $toNativeArray("Int32", [0, -10782, 0])), new CaseRange.Ptr(11378, 11379, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11381, 11382, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11390, 11391, $toNativeArray("Int32", [0, -10815, 0])), new CaseRange.Ptr(11392, 11491, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11499, 11502, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11506, 11507, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(11520, 11557, $toNativeArray("Int32", [-7264, 0, -7264])), new CaseRange.Ptr(11559, 11559, $toNativeArray("Int32", [-7264, 0, -7264])), new CaseRange.Ptr(11565, 11565, $toNativeArray("Int32", [-7264, 0, -7264])), new CaseRange.Ptr(42560, 42605, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42624, 42647, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42786, 42799, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42802, 42863, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42873, 42876, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42877, 42877, $toNativeArray("Int32", [0, -35332, 0])), new CaseRange.Ptr(42878, 42887, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42891, 42892, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42893, 42893, $toNativeArray("Int32", [0, -42280, 0])), new CaseRange.Ptr(42896, 42899, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42912, 42921, $toNativeArray("Int32", [1114112, 1114112, 1114112])), new CaseRange.Ptr(42922, 42922, $toNativeArray("Int32", [0, -42308, 0])), new CaseRange.Ptr(65313, 65338, $toNativeArray("Int32", [0, 32, 0])), new CaseRange.Ptr(65345, 65370, $toNativeArray("Int32", [-32, 0, -32])), new CaseRange.Ptr(66560, 66599, $toNativeArray("Int32", [0, 40, 0])), new CaseRange.Ptr(66600, 66639, $toNativeArray("Int32", [-40, 0, -40]))]);
		$pkg.CaseRanges = _CaseRanges;
		properties = $toNativeArray("Uint8", [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 144, 130, 130, 130, 136, 130, 130, 130, 130, 130, 130, 136, 130, 130, 130, 130, 132, 132, 132, 132, 132, 132, 132, 132, 132, 132, 130, 130, 136, 136, 136, 130, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 130, 130, 130, 136, 130, 136, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 130, 136, 130, 136, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 16, 130, 136, 136, 136, 136, 136, 130, 136, 136, 224, 130, 136, 0, 136, 136, 136, 136, 132, 132, 136, 192, 130, 130, 136, 132, 224, 130, 132, 132, 132, 130, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 136, 160, 160, 160, 160, 160, 160, 160, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 136, 192, 192, 192, 192, 192, 192, 192, 192]);
		caseOrbit = new ($sliceType(foldPair))([new foldPair.Ptr(75, 107), new foldPair.Ptr(83, 115), new foldPair.Ptr(107, 8490), new foldPair.Ptr(115, 383), new foldPair.Ptr(181, 924), new foldPair.Ptr(197, 229), new foldPair.Ptr(223, 7838), new foldPair.Ptr(229, 8491), new foldPair.Ptr(304, 304), new foldPair.Ptr(305, 305), new foldPair.Ptr(383, 83), new foldPair.Ptr(452, 453), new foldPair.Ptr(453, 454), new foldPair.Ptr(454, 452), new foldPair.Ptr(455, 456), new foldPair.Ptr(456, 457), new foldPair.Ptr(457, 455), new foldPair.Ptr(458, 459), new foldPair.Ptr(459, 460), new foldPair.Ptr(460, 458), new foldPair.Ptr(497, 498), new foldPair.Ptr(498, 499), new foldPair.Ptr(499, 497), new foldPair.Ptr(837, 921), new foldPair.Ptr(914, 946), new foldPair.Ptr(917, 949), new foldPair.Ptr(920, 952), new foldPair.Ptr(921, 953), new foldPair.Ptr(922, 954), new foldPair.Ptr(924, 956), new foldPair.Ptr(928, 960), new foldPair.Ptr(929, 961), new foldPair.Ptr(931, 962), new foldPair.Ptr(934, 966), new foldPair.Ptr(937, 969), new foldPair.Ptr(946, 976), new foldPair.Ptr(949, 1013), new foldPair.Ptr(952, 977), new foldPair.Ptr(953, 8126), new foldPair.Ptr(954, 1008), new foldPair.Ptr(956, 181), new foldPair.Ptr(960, 982), new foldPair.Ptr(961, 1009), new foldPair.Ptr(962, 963), new foldPair.Ptr(963, 931), new foldPair.Ptr(966, 981), new foldPair.Ptr(969, 8486), new foldPair.Ptr(976, 914), new foldPair.Ptr(977, 1012), new foldPair.Ptr(981, 934), new foldPair.Ptr(982, 928), new foldPair.Ptr(1008, 922), new foldPair.Ptr(1009, 929), new foldPair.Ptr(1012, 920), new foldPair.Ptr(1013, 917), new foldPair.Ptr(7776, 7777), new foldPair.Ptr(7777, 7835), new foldPair.Ptr(7835, 7776), new foldPair.Ptr(7838, 223), new foldPair.Ptr(8126, 837), new foldPair.Ptr(8486, 937), new foldPair.Ptr(8490, 75), new foldPair.Ptr(8491, 197)]);
	};
	return $pkg;
})();
$packages["unicode/utf8"] = (function() {
	var $pkg = {}, decodeRuneInternal, decodeRuneInStringInternal, FullRune, DecodeRune, DecodeRuneInString, DecodeLastRune, DecodeLastRuneInString, RuneLen, EncodeRune, RuneCountInString, RuneStart, ValidString;
	decodeRuneInternal = function(p) {
		var r = 0, size = 0, short$1 = false, n, _tmp, _tmp$1, _tmp$2, c0, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tmp$10, _tmp$11, c1, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$20, _tmp$21, _tmp$22, _tmp$23, c2, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, c3, _tmp$39, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$50;
		n = p.$length;
		if (n < 1) {
			_tmp = 65533; _tmp$1 = 0; _tmp$2 = true; r = _tmp; size = _tmp$1; short$1 = _tmp$2;
			return [r, size, short$1];
		}
		c0 = ((0 < 0 || 0 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]);
		if (c0 < 128) {
			_tmp$3 = (c0 >> 0); _tmp$4 = 1; _tmp$5 = false; r = _tmp$3; size = _tmp$4; short$1 = _tmp$5;
			return [r, size, short$1];
		}
		if (c0 < 192) {
			_tmp$6 = 65533; _tmp$7 = 1; _tmp$8 = false; r = _tmp$6; size = _tmp$7; short$1 = _tmp$8;
			return [r, size, short$1];
		}
		if (n < 2) {
			_tmp$9 = 65533; _tmp$10 = 1; _tmp$11 = true; r = _tmp$9; size = _tmp$10; short$1 = _tmp$11;
			return [r, size, short$1];
		}
		c1 = ((1 < 0 || 1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1]);
		if (c1 < 128 || 192 <= c1) {
			_tmp$12 = 65533; _tmp$13 = 1; _tmp$14 = false; r = _tmp$12; size = _tmp$13; short$1 = _tmp$14;
			return [r, size, short$1];
		}
		if (c0 < 224) {
			r = ((((c0 & 31) >>> 0) >> 0) << 6 >> 0) | (((c1 & 63) >>> 0) >> 0);
			if (r <= 127) {
				_tmp$15 = 65533; _tmp$16 = 1; _tmp$17 = false; r = _tmp$15; size = _tmp$16; short$1 = _tmp$17;
				return [r, size, short$1];
			}
			_tmp$18 = r; _tmp$19 = 2; _tmp$20 = false; r = _tmp$18; size = _tmp$19; short$1 = _tmp$20;
			return [r, size, short$1];
		}
		if (n < 3) {
			_tmp$21 = 65533; _tmp$22 = 1; _tmp$23 = true; r = _tmp$21; size = _tmp$22; short$1 = _tmp$23;
			return [r, size, short$1];
		}
		c2 = ((2 < 0 || 2 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2]);
		if (c2 < 128 || 192 <= c2) {
			_tmp$24 = 65533; _tmp$25 = 1; _tmp$26 = false; r = _tmp$24; size = _tmp$25; short$1 = _tmp$26;
			return [r, size, short$1];
		}
		if (c0 < 240) {
			r = (((((c0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c2 & 63) >>> 0) >> 0);
			if (r <= 2047) {
				_tmp$27 = 65533; _tmp$28 = 1; _tmp$29 = false; r = _tmp$27; size = _tmp$28; short$1 = _tmp$29;
				return [r, size, short$1];
			}
			if (55296 <= r && r <= 57343) {
				_tmp$30 = 65533; _tmp$31 = 1; _tmp$32 = false; r = _tmp$30; size = _tmp$31; short$1 = _tmp$32;
				return [r, size, short$1];
			}
			_tmp$33 = r; _tmp$34 = 3; _tmp$35 = false; r = _tmp$33; size = _tmp$34; short$1 = _tmp$35;
			return [r, size, short$1];
		}
		if (n < 4) {
			_tmp$36 = 65533; _tmp$37 = 1; _tmp$38 = true; r = _tmp$36; size = _tmp$37; short$1 = _tmp$38;
			return [r, size, short$1];
		}
		c3 = ((3 < 0 || 3 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 3]);
		if (c3 < 128 || 192 <= c3) {
			_tmp$39 = 65533; _tmp$40 = 1; _tmp$41 = false; r = _tmp$39; size = _tmp$40; short$1 = _tmp$41;
			return [r, size, short$1];
		}
		if (c0 < 248) {
			r = ((((((c0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((c2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c3 & 63) >>> 0) >> 0);
			if (r <= 65535 || 1114111 < r) {
				_tmp$42 = 65533; _tmp$43 = 1; _tmp$44 = false; r = _tmp$42; size = _tmp$43; short$1 = _tmp$44;
				return [r, size, short$1];
			}
			_tmp$45 = r; _tmp$46 = 4; _tmp$47 = false; r = _tmp$45; size = _tmp$46; short$1 = _tmp$47;
			return [r, size, short$1];
		}
		_tmp$48 = 65533; _tmp$49 = 1; _tmp$50 = false; r = _tmp$48; size = _tmp$49; short$1 = _tmp$50;
		return [r, size, short$1];
	};
	decodeRuneInStringInternal = function(s) {
		var r = 0, size = 0, short$1 = false, n, _tmp, _tmp$1, _tmp$2, c0, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tmp$10, _tmp$11, c1, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$20, _tmp$21, _tmp$22, _tmp$23, c2, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, c3, _tmp$39, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$50;
		n = s.length;
		if (n < 1) {
			_tmp = 65533; _tmp$1 = 0; _tmp$2 = true; r = _tmp; size = _tmp$1; short$1 = _tmp$2;
			return [r, size, short$1];
		}
		c0 = s.charCodeAt(0);
		if (c0 < 128) {
			_tmp$3 = (c0 >> 0); _tmp$4 = 1; _tmp$5 = false; r = _tmp$3; size = _tmp$4; short$1 = _tmp$5;
			return [r, size, short$1];
		}
		if (c0 < 192) {
			_tmp$6 = 65533; _tmp$7 = 1; _tmp$8 = false; r = _tmp$6; size = _tmp$7; short$1 = _tmp$8;
			return [r, size, short$1];
		}
		if (n < 2) {
			_tmp$9 = 65533; _tmp$10 = 1; _tmp$11 = true; r = _tmp$9; size = _tmp$10; short$1 = _tmp$11;
			return [r, size, short$1];
		}
		c1 = s.charCodeAt(1);
		if (c1 < 128 || 192 <= c1) {
			_tmp$12 = 65533; _tmp$13 = 1; _tmp$14 = false; r = _tmp$12; size = _tmp$13; short$1 = _tmp$14;
			return [r, size, short$1];
		}
		if (c0 < 224) {
			r = ((((c0 & 31) >>> 0) >> 0) << 6 >> 0) | (((c1 & 63) >>> 0) >> 0);
			if (r <= 127) {
				_tmp$15 = 65533; _tmp$16 = 1; _tmp$17 = false; r = _tmp$15; size = _tmp$16; short$1 = _tmp$17;
				return [r, size, short$1];
			}
			_tmp$18 = r; _tmp$19 = 2; _tmp$20 = false; r = _tmp$18; size = _tmp$19; short$1 = _tmp$20;
			return [r, size, short$1];
		}
		if (n < 3) {
			_tmp$21 = 65533; _tmp$22 = 1; _tmp$23 = true; r = _tmp$21; size = _tmp$22; short$1 = _tmp$23;
			return [r, size, short$1];
		}
		c2 = s.charCodeAt(2);
		if (c2 < 128 || 192 <= c2) {
			_tmp$24 = 65533; _tmp$25 = 1; _tmp$26 = false; r = _tmp$24; size = _tmp$25; short$1 = _tmp$26;
			return [r, size, short$1];
		}
		if (c0 < 240) {
			r = (((((c0 & 15) >>> 0) >> 0) << 12 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c2 & 63) >>> 0) >> 0);
			if (r <= 2047) {
				_tmp$27 = 65533; _tmp$28 = 1; _tmp$29 = false; r = _tmp$27; size = _tmp$28; short$1 = _tmp$29;
				return [r, size, short$1];
			}
			if (55296 <= r && r <= 57343) {
				_tmp$30 = 65533; _tmp$31 = 1; _tmp$32 = false; r = _tmp$30; size = _tmp$31; short$1 = _tmp$32;
				return [r, size, short$1];
			}
			_tmp$33 = r; _tmp$34 = 3; _tmp$35 = false; r = _tmp$33; size = _tmp$34; short$1 = _tmp$35;
			return [r, size, short$1];
		}
		if (n < 4) {
			_tmp$36 = 65533; _tmp$37 = 1; _tmp$38 = true; r = _tmp$36; size = _tmp$37; short$1 = _tmp$38;
			return [r, size, short$1];
		}
		c3 = s.charCodeAt(3);
		if (c3 < 128 || 192 <= c3) {
			_tmp$39 = 65533; _tmp$40 = 1; _tmp$41 = false; r = _tmp$39; size = _tmp$40; short$1 = _tmp$41;
			return [r, size, short$1];
		}
		if (c0 < 248) {
			r = ((((((c0 & 7) >>> 0) >> 0) << 18 >> 0) | ((((c1 & 63) >>> 0) >> 0) << 12 >> 0)) | ((((c2 & 63) >>> 0) >> 0) << 6 >> 0)) | (((c3 & 63) >>> 0) >> 0);
			if (r <= 65535 || 1114111 < r) {
				_tmp$42 = 65533; _tmp$43 = 1; _tmp$44 = false; r = _tmp$42; size = _tmp$43; short$1 = _tmp$44;
				return [r, size, short$1];
			}
			_tmp$45 = r; _tmp$46 = 4; _tmp$47 = false; r = _tmp$45; size = _tmp$46; short$1 = _tmp$47;
			return [r, size, short$1];
		}
		_tmp$48 = 65533; _tmp$49 = 1; _tmp$50 = false; r = _tmp$48; size = _tmp$49; short$1 = _tmp$50;
		return [r, size, short$1];
	};
	FullRune = $pkg.FullRune = function(p) {
		var _tuple, short$1;
		_tuple = decodeRuneInternal(p); short$1 = _tuple[2];
		return !short$1;
	};
	DecodeRune = $pkg.DecodeRune = function(p) {
		var r = 0, size = 0, _tuple;
		_tuple = decodeRuneInternal(p); r = _tuple[0]; size = _tuple[1];
		return [r, size];
	};
	DecodeRuneInString = $pkg.DecodeRuneInString = function(s) {
		var r = 0, size = 0, _tuple;
		_tuple = decodeRuneInStringInternal(s); r = _tuple[0]; size = _tuple[1];
		return [r, size];
	};
	DecodeLastRune = $pkg.DecodeLastRune = function(p) {
		var r = 0, size = 0, end, _tmp, _tmp$1, start, _tmp$2, _tmp$3, lim, _tuple, _tmp$4, _tmp$5, _tmp$6, _tmp$7;
		end = p.$length;
		if (end === 0) {
			_tmp = 65533; _tmp$1 = 0; r = _tmp; size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = (((start < 0 || start >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + start]) >> 0);
		if (r < 128) {
			_tmp$2 = r; _tmp$3 = 1; r = _tmp$2; size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (start >= lim) {
			if (RuneStart(((start < 0 || start >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + start]))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRune($subslice(p, start, end)); r = _tuple[0]; size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533; _tmp$5 = 1; r = _tmp$4; size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r; _tmp$7 = size; r = _tmp$6; size = _tmp$7;
		return [r, size];
	};
	DecodeLastRuneInString = $pkg.DecodeLastRuneInString = function(s) {
		var r = 0, size = 0, end, _tmp, _tmp$1, start, _tmp$2, _tmp$3, lim, _tuple, _tmp$4, _tmp$5, _tmp$6, _tmp$7;
		end = s.length;
		if (end === 0) {
			_tmp = 65533; _tmp$1 = 0; r = _tmp; size = _tmp$1;
			return [r, size];
		}
		start = end - 1 >> 0;
		r = (s.charCodeAt(start) >> 0);
		if (r < 128) {
			_tmp$2 = r; _tmp$3 = 1; r = _tmp$2; size = _tmp$3;
			return [r, size];
		}
		lim = end - 4 >> 0;
		if (lim < 0) {
			lim = 0;
		}
		start = start - (1) >> 0;
		while (start >= lim) {
			if (RuneStart(s.charCodeAt(start))) {
				break;
			}
			start = start - (1) >> 0;
		}
		if (start < 0) {
			start = 0;
		}
		_tuple = DecodeRuneInString(s.substring(start, end)); r = _tuple[0]; size = _tuple[1];
		if (!(((start + size >> 0) === end))) {
			_tmp$4 = 65533; _tmp$5 = 1; r = _tmp$4; size = _tmp$5;
			return [r, size];
		}
		_tmp$6 = r; _tmp$7 = size; r = _tmp$6; size = _tmp$7;
		return [r, size];
	};
	RuneLen = $pkg.RuneLen = function(r) {
		if (r < 0) {
			return -1;
		} else if (r <= 127) {
			return 1;
		} else if (r <= 2047) {
			return 2;
		} else if (55296 <= r && r <= 57343) {
			return -1;
		} else if (r <= 65535) {
			return 3;
		} else if (r <= 1114111) {
			return 4;
		}
		return -1;
	};
	EncodeRune = $pkg.EncodeRune = function(p, r) {
		var i;
		i = (r >>> 0);
		if (i <= 127) {
			(0 < 0 || 0 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (r << 24 >>> 24);
			return 1;
		} else if (i <= 2047) {
			(0 < 0 || 0 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (192 | ((r >> 6 >> 0) << 24 >>> 24)) >>> 0;
			(1 < 0 || 1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0;
			return 2;
		} else if (i > 1114111 || 55296 <= i && i <= 57343) {
			r = 65533;
			(0 < 0 || 0 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0;
			(1 < 0 || 1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = (128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0;
			(2 < 0 || 2 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0;
			return 3;
		} else if (i <= 65535) {
			(0 < 0 || 0 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (224 | ((r >> 12 >> 0) << 24 >>> 24)) >>> 0;
			(1 < 0 || 1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = (128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0;
			(2 < 0 || 2 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0;
			return 3;
		} else {
			(0 < 0 || 0 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = (240 | ((r >> 18 >> 0) << 24 >>> 24)) >>> 0;
			(1 < 0 || 1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = (128 | ((((r >> 12 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0;
			(2 < 0 || 2 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = (128 | ((((r >> 6 >> 0) << 24 >>> 24) & 63) >>> 0)) >>> 0;
			(3 < 0 || 3 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 3] = (128 | (((r << 24 >>> 24) & 63) >>> 0)) >>> 0;
			return 4;
		}
	};
	RuneCountInString = $pkg.RuneCountInString = function(s) {
		var n = 0, _ref, _i, _rune;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			n = n + (1) >> 0;
			_i += _rune[1];
		}
		return n;
	};
	RuneStart = $pkg.RuneStart = function(b) {
		return !((((b & 192) >>> 0) === 128));
	};
	ValidString = $pkg.ValidString = function(s) {
		var _ref, _i, _rune, i, r, _tuple, size;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			i = _i;
			r = _rune[0];
			if (r === 65533) {
				_tuple = DecodeRuneInString(s.substring(i)); size = _tuple[1];
				if (size === 1) {
					return false;
				}
			}
			_i += _rune[1];
		}
		return true;
	};
	$pkg.$init = function() {
	};
	return $pkg;
})();
$packages["bytes"] = (function() {
	var $pkg = {}, errors = $packages["errors"], io = $packages["io"], utf8 = $packages["unicode/utf8"], unicode = $packages["unicode"], Buffer, readOp, Reader, IndexByte, Equal, makeSlice, NewBuffer, Index, HasPrefix, HasSuffix, Map, TrimLeftFunc, TrimRightFunc, TrimFunc, indexFunc, lastIndexFunc, makeCutsetFunc, TrimRight, TrimSpace, EqualFold, NewReader;
	Buffer = $pkg.Buffer = $newType(0, "Struct", "bytes.Buffer", "Buffer", "bytes", function(buf_, off_, runeBytes_, bootstrap_, lastRead_) {
		this.$val = this;
		this.buf = buf_ !== undefined ? buf_ : ($sliceType($Uint8)).nil;
		this.off = off_ !== undefined ? off_ : 0;
		this.runeBytes = runeBytes_ !== undefined ? runeBytes_ : ($arrayType($Uint8, 4)).zero();
		this.bootstrap = bootstrap_ !== undefined ? bootstrap_ : ($arrayType($Uint8, 64)).zero();
		this.lastRead = lastRead_ !== undefined ? lastRead_ : 0;
	});
	readOp = $pkg.readOp = $newType(4, "Int", "bytes.readOp", "readOp", "bytes", null);
	Reader = $pkg.Reader = $newType(0, "Struct", "bytes.Reader", "Reader", "bytes", function(s_, i_, prevRune_) {
		this.$val = this;
		this.s = s_ !== undefined ? s_ : ($sliceType($Uint8)).nil;
		this.i = i_ !== undefined ? i_ : new $Int64(0, 0);
		this.prevRune = prevRune_ !== undefined ? prevRune_ : 0;
	});
	IndexByte = $pkg.IndexByte = function(s, c) {
		var _ref, _i, i, b;
		_ref = s;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b === c) {
				return i;
			}
			_i++;
		}
		return -1;
	};
	Equal = $pkg.Equal = function(a, b) {
		var _ref, _i, i, c;
		if (!((a.$length === b.$length))) {
			return false;
		}
		_ref = a;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!((c === ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i])))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	Buffer.Ptr.prototype.Bytes = function() {
		var b;
		b = this;
		return $subslice(b.buf, b.off);
	};
	Buffer.prototype.Bytes = function() { return this.$val.Bytes(); };
	Buffer.Ptr.prototype.String = function() {
		var b;
		b = this;
		if (b === ($ptrType(Buffer)).nil) {
			return "<nil>";
		}
		return $bytesToString($subslice(b.buf, b.off));
	};
	Buffer.prototype.String = function() { return this.$val.String(); };
	Buffer.Ptr.prototype.Len = function() {
		var b;
		b = this;
		return b.buf.$length - b.off >> 0;
	};
	Buffer.prototype.Len = function() { return this.$val.Len(); };
	Buffer.Ptr.prototype.Truncate = function(n) {
		var b;
		b = this;
		b.lastRead = 0;
		if (n < 0 || n > b.Len()) {
			$panic(new $String("bytes.Buffer: truncation out of range"));
		} else if (n === 0) {
			b.off = 0;
		}
		b.buf = $subslice(b.buf, 0, (b.off + n >> 0));
	};
	Buffer.prototype.Truncate = function(n) { return this.$val.Truncate(n); };
	Buffer.Ptr.prototype.Reset = function() {
		var b;
		b = this;
		b.Truncate(0);
	};
	Buffer.prototype.Reset = function() { return this.$val.Reset(); };
	Buffer.Ptr.prototype.grow = function(n) {
		var b, m, buf, _q, x;
		b = this;
		m = b.Len();
		if ((m === 0) && !((b.off === 0))) {
			b.Truncate(0);
		}
		if ((b.buf.$length + n >> 0) > b.buf.$capacity) {
			buf = ($sliceType($Uint8)).nil;
			if (b.buf === ($sliceType($Uint8)).nil && n <= 64) {
				buf = $subslice(new ($sliceType($Uint8))(b.bootstrap), 0);
			} else if ((m + n >> 0) <= (_q = b.buf.$capacity / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) {
				$copySlice(b.buf, $subslice(b.buf, b.off));
				buf = $subslice(b.buf, 0, m);
			} else {
				buf = makeSlice((x = b.buf.$capacity, (((2 >>> 16 << 16) * x >> 0) + (2 << 16 >>> 16) * x) >> 0) + n >> 0);
				$copySlice(buf, $subslice(b.buf, b.off));
			}
			b.buf = buf;
			b.off = 0;
		}
		b.buf = $subslice(b.buf, 0, ((b.off + m >> 0) + n >> 0));
		return b.off + m >> 0;
	};
	Buffer.prototype.grow = function(n) { return this.$val.grow(n); };
	Buffer.Ptr.prototype.Grow = function(n) {
		var b, m;
		b = this;
		if (n < 0) {
			$panic(new $String("bytes.Buffer.Grow: negative count"));
		}
		m = b.grow(n);
		b.buf = $subslice(b.buf, 0, m);
	};
	Buffer.prototype.Grow = function(n) { return this.$val.Grow(n); };
	Buffer.Ptr.prototype.Write = function(p) {
		var n = 0, err = $ifaceNil, b, m, _tmp, _tmp$1;
		b = this;
		b.lastRead = 0;
		m = b.grow(p.$length);
		_tmp = $copySlice($subslice(b.buf, m), p); _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.Write = function(p) { return this.$val.Write(p); };
	Buffer.Ptr.prototype.WriteString = function(s) {
		var n = 0, err = $ifaceNil, b, m, _tmp, _tmp$1;
		b = this;
		b.lastRead = 0;
		m = b.grow(s.length);
		_tmp = $copyString($subslice(b.buf, m), s); _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	Buffer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Buffer.Ptr.prototype.ReadFrom = function(r) {
		var n = new $Int64(0, 0), err = $ifaceNil, b, free, newBuf, x, _tuple, m, e, x$1, _tmp, _tmp$1, _tmp$2, _tmp$3;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
		}
		while (true) {
			free = b.buf.$capacity - b.buf.$length >> 0;
			if (free < 512) {
				newBuf = b.buf;
				if ((b.off + free >> 0) < 512) {
					newBuf = makeSlice((x = b.buf.$capacity, (((2 >>> 16 << 16) * x >> 0) + (2 << 16 >>> 16) * x) >> 0) + 512 >> 0);
				}
				$copySlice(newBuf, $subslice(b.buf, b.off));
				b.buf = $subslice(newBuf, 0, (b.buf.$length - b.off >> 0));
				b.off = 0;
			}
			_tuple = r.Read($subslice(b.buf, b.buf.$length, b.buf.$capacity)); m = _tuple[0]; e = _tuple[1];
			b.buf = $subslice(b.buf, 0, (b.buf.$length + m >> 0));
			n = (x$1 = new $Int64(0, m), new $Int64(n.$high + x$1.$high, n.$low + x$1.$low));
			if ($interfaceIsEqual(e, io.EOF)) {
				break;
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n; _tmp$1 = e; n = _tmp; err = _tmp$1;
				return [n, err];
			}
		}
		_tmp$2 = n; _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;
		return [n, err];
	};
	Buffer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	makeSlice = function(n) {
		var $deferred = [], $err = null;
		/* */ try { $deferFrames.push($deferred);
		$deferred.push([(function() {
			if (!($interfaceIsEqual($recover(), $ifaceNil))) {
				$panic($pkg.ErrTooLarge);
			}
		}), []]);
		return ($sliceType($Uint8)).make(n);
		/* */ } catch(err) { $err = err; return ($sliceType($Uint8)).nil; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Buffer.Ptr.prototype.WriteTo = function(w) {
		var n = new $Int64(0, 0), err = $ifaceNil, b, nBytes, _tuple, m, e, _tmp, _tmp$1, _tmp$2, _tmp$3;
		b = this;
		b.lastRead = 0;
		if (b.off < b.buf.$length) {
			nBytes = b.Len();
			_tuple = w.Write($subslice(b.buf, b.off)); m = _tuple[0]; e = _tuple[1];
			if (m > nBytes) {
				$panic(new $String("bytes.Buffer.WriteTo: invalid Write count"));
			}
			b.off = b.off + (m) >> 0;
			n = new $Int64(0, m);
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tmp = n; _tmp$1 = e; n = _tmp; err = _tmp$1;
				return [n, err];
			}
			if (!((m === nBytes))) {
				_tmp$2 = n; _tmp$3 = io.ErrShortWrite; n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
		}
		b.Truncate(0);
		return [n, err];
	};
	Buffer.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Buffer.Ptr.prototype.WriteByte = function(c) {
		var b, m, x;
		b = this;
		b.lastRead = 0;
		m = b.grow(1);
		(x = b.buf, (m < 0 || m >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + m] = c);
		return $ifaceNil;
	};
	Buffer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Buffer.Ptr.prototype.WriteRune = function(r) {
		var n = 0, err = $ifaceNil, b, _tmp, _tmp$1, _tmp$2, _tmp$3;
		b = this;
		if (r < 128) {
			b.WriteByte((r << 24 >>> 24));
			_tmp = 1; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		n = utf8.EncodeRune($subslice(new ($sliceType($Uint8))(b.runeBytes), 0), r);
		b.Write($subslice(new ($sliceType($Uint8))(b.runeBytes), 0, n));
		_tmp$2 = n; _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;
		return [n, err];
	};
	Buffer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Buffer.Ptr.prototype.Read = function(p) {
		var n = 0, err = $ifaceNil, b, _tmp, _tmp$1;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			if (p.$length === 0) {
				return [n, err];
			}
			_tmp = 0; _tmp$1 = io.EOF; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		n = $copySlice(p, $subslice(b.buf, b.off));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = 2;
		}
		return [n, err];
	};
	Buffer.prototype.Read = function(p) { return this.$val.Read(p); };
	Buffer.Ptr.prototype.Next = function(n) {
		var b, m, data;
		b = this;
		b.lastRead = 0;
		m = b.Len();
		if (n > m) {
			n = m;
		}
		data = $subslice(b.buf, b.off, (b.off + n >> 0));
		b.off = b.off + (n) >> 0;
		if (n > 0) {
			b.lastRead = 2;
		}
		return data;
	};
	Buffer.prototype.Next = function(n) { return this.$val.Next(n); };
	Buffer.Ptr.prototype.ReadByte = function() {
		var c = 0, err = $ifaceNil, b, _tmp, _tmp$1, x, x$1, _tmp$2, _tmp$3;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			_tmp = 0; _tmp$1 = io.EOF; c = _tmp; err = _tmp$1;
			return [c, err];
		}
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		b.off = b.off + (1) >> 0;
		b.lastRead = 2;
		_tmp$2 = c; _tmp$3 = $ifaceNil; c = _tmp$2; err = _tmp$3;
		return [c, err];
	};
	Buffer.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Buffer.Ptr.prototype.ReadRune = function() {
		var r = 0, size = 0, err = $ifaceNil, b, _tmp, _tmp$1, _tmp$2, x, x$1, c, _tmp$3, _tmp$4, _tmp$5, _tuple, n, _tmp$6, _tmp$7, _tmp$8;
		b = this;
		b.lastRead = 0;
		if (b.off >= b.buf.$length) {
			b.Truncate(0);
			_tmp = 0; _tmp$1 = 0; _tmp$2 = io.EOF; r = _tmp; size = _tmp$1; err = _tmp$2;
			return [r, size, err];
		}
		b.lastRead = 1;
		c = (x = b.buf, x$1 = b.off, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		if (c < 128) {
			b.off = b.off + (1) >> 0;
			_tmp$3 = (c >> 0); _tmp$4 = 1; _tmp$5 = $ifaceNil; r = _tmp$3; size = _tmp$4; err = _tmp$5;
			return [r, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(b.buf, b.off)); r = _tuple[0]; n = _tuple[1];
		b.off = b.off + (n) >> 0;
		_tmp$6 = r; _tmp$7 = n; _tmp$8 = $ifaceNil; r = _tmp$6; size = _tmp$7; err = _tmp$8;
		return [r, size, err];
	};
	Buffer.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Buffer.Ptr.prototype.UnreadRune = function() {
		var b, _tuple, n;
		b = this;
		if (!((b.lastRead === 1))) {
			return errors.New("bytes.Buffer: UnreadRune: previous operation was not ReadRune");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			_tuple = utf8.DecodeLastRune($subslice(b.buf, 0, b.off)); n = _tuple[1];
			b.off = b.off - (n) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Buffer.Ptr.prototype.UnreadByte = function() {
		var b;
		b = this;
		if (!((b.lastRead === 1)) && !((b.lastRead === 2))) {
			return errors.New("bytes.Buffer: UnreadByte: previous operation was not a read");
		}
		b.lastRead = 0;
		if (b.off > 0) {
			b.off = b.off - (1) >> 0;
		}
		return $ifaceNil;
	};
	Buffer.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Buffer.Ptr.prototype.ReadBytes = function(delim) {
		var line = ($sliceType($Uint8)).nil, err = $ifaceNil, b, _tuple, slice;
		b = this;
		_tuple = b.readSlice(delim); slice = _tuple[0]; err = _tuple[1];
		line = $appendSlice(line, slice);
		return [line, err];
	};
	Buffer.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Buffer.Ptr.prototype.readSlice = function(delim) {
		var line = ($sliceType($Uint8)).nil, err = $ifaceNil, b, i, end, _tmp, _tmp$1;
		b = this;
		i = IndexByte($subslice(b.buf, b.off), delim);
		end = (b.off + i >> 0) + 1 >> 0;
		if (i < 0) {
			end = b.buf.$length;
			err = io.EOF;
		}
		line = $subslice(b.buf, b.off, end);
		b.off = end;
		b.lastRead = 2;
		_tmp = line; _tmp$1 = err; line = _tmp; err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.readSlice = function(delim) { return this.$val.readSlice(delim); };
	Buffer.Ptr.prototype.ReadString = function(delim) {
		var line = "", err = $ifaceNil, b, _tuple, slice, _tmp, _tmp$1;
		b = this;
		_tuple = b.readSlice(delim); slice = _tuple[0]; err = _tuple[1];
		_tmp = $bytesToString(slice); _tmp$1 = err; line = _tmp; err = _tmp$1;
		return [line, err];
	};
	Buffer.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	NewBuffer = $pkg.NewBuffer = function(buf) {
		return new Buffer.Ptr(buf, 0, ($arrayType($Uint8, 4)).zero(), ($arrayType($Uint8, 64)).zero(), 0);
	};
	Index = $pkg.Index = function(s, sep) {
		var n, c, i, t, o;
		n = sep.$length;
		if (n === 0) {
			return 0;
		}
		if (n > s.$length) {
			return -1;
		}
		c = ((0 < 0 || 0 >= sep.$length) ? $throwRuntimeError("index out of range") : sep.$array[sep.$offset + 0]);
		if (n === 1) {
			return IndexByte(s, c);
		}
		i = 0;
		t = $subslice(s, 0, ((s.$length - n >> 0) + 1 >> 0));
		while (i < t.$length) {
			if (!((((i < 0 || i >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + i]) === c))) {
				o = IndexByte($subslice(t, i), c);
				if (o < 0) {
					break;
				}
				i = i + (o) >> 0;
			}
			if (Equal($subslice(s, i, (i + n >> 0)), sep)) {
				return i;
			}
			i = i + (1) >> 0;
		}
		return -1;
	};
	HasPrefix = $pkg.HasPrefix = function(s, prefix) {
		return s.$length >= prefix.$length && Equal($subslice(s, 0, prefix.$length), prefix);
	};
	HasSuffix = $pkg.HasSuffix = function(s, suffix) {
		return s.$length >= suffix.$length && Equal($subslice(s, (s.$length - suffix.$length >> 0)), suffix);
	};
	Map = $pkg.Map = function(mapping, s) {
		var maxbytes, nbytes, b, i, wid, r, _tuple, rl, nb;
		maxbytes = s.$length;
		nbytes = 0;
		b = ($sliceType($Uint8)).make(maxbytes);
		i = 0;
		while (i < s.$length) {
			wid = 1;
			r = (((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) >> 0);
			if (r >= 128) {
				_tuple = utf8.DecodeRune($subslice(s, i)); r = _tuple[0]; wid = _tuple[1];
			}
			r = mapping(r);
			if (r >= 0) {
				rl = utf8.RuneLen(r);
				if (rl < 0) {
					rl = 3;
				}
				if ((nbytes + rl >> 0) > maxbytes) {
					maxbytes = ((((maxbytes >>> 16 << 16) * 2 >> 0) + (maxbytes << 16 >>> 16) * 2) >> 0) + 4 >> 0;
					nb = ($sliceType($Uint8)).make(maxbytes);
					$copySlice(nb, $subslice(b, 0, nbytes));
					b = nb;
				}
				nbytes = nbytes + (utf8.EncodeRune($subslice(b, nbytes, maxbytes), r)) >> 0;
			}
			i = i + (wid) >> 0;
		}
		return $subslice(b, 0, nbytes);
	};
	TrimLeftFunc = $pkg.TrimLeftFunc = function(s, f) {
		var i;
		i = indexFunc(s, f, false);
		if (i === -1) {
			return ($sliceType($Uint8)).nil;
		}
		return $subslice(s, i);
	};
	TrimRightFunc = $pkg.TrimRightFunc = function(s, f) {
		var i, _tuple, wid;
		i = lastIndexFunc(s, f, false);
		if (i >= 0 && ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) >= 128) {
			_tuple = utf8.DecodeRune($subslice(s, i)); wid = _tuple[1];
			i = i + (wid) >> 0;
		} else {
			i = i + (1) >> 0;
		}
		return $subslice(s, 0, i);
	};
	TrimFunc = $pkg.TrimFunc = function(s, f) {
		return TrimRightFunc(TrimLeftFunc(s, f), f);
	};
	indexFunc = function(s, f, truth) {
		var start, wid, r, _tuple;
		start = 0;
		while (start < s.$length) {
			wid = 1;
			r = (((start < 0 || start >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + start]) >> 0);
			if (r >= 128) {
				_tuple = utf8.DecodeRune($subslice(s, start)); r = _tuple[0]; wid = _tuple[1];
			}
			if (f(r) === truth) {
				return start;
			}
			start = start + (wid) >> 0;
		}
		return -1;
	};
	lastIndexFunc = function(s, f, truth) {
		var i, _tmp, x, _tmp$1, r, size, _tuple;
		i = s.$length;
		while (i > 0) {
			_tmp = ((x = i - 1 >> 0, ((x < 0 || x >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x])) >> 0); _tmp$1 = 1; r = _tmp; size = _tmp$1;
			if (r >= 128) {
				_tuple = utf8.DecodeLastRune($subslice(s, 0, i)); r = _tuple[0]; size = _tuple[1];
			}
			i = i - (size) >> 0;
			if (f(r) === truth) {
				return i;
			}
		}
		return -1;
	};
	makeCutsetFunc = function(cutset) {
		return (function(r) {
			var _ref, _i, _rune, c;
			_ref = cutset;
			_i = 0;
			while (_i < _ref.length) {
				_rune = $decodeRune(_ref, _i);
				c = _rune[0];
				if (c === r) {
					return true;
				}
				_i += _rune[1];
			}
			return false;
		});
	};
	TrimRight = $pkg.TrimRight = function(s, cutset) {
		return TrimRightFunc(s, makeCutsetFunc(cutset));
	};
	TrimSpace = $pkg.TrimSpace = function(s) {
		return TrimFunc(s, unicode.IsSpace);
	};
	EqualFold = $pkg.EqualFold = function(s, t) {
		var _tmp, _tmp$1, sr, tr, _tmp$2, _tmp$3, _tuple, r, size, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple$1, r$1, size$1, _tmp$8, _tmp$9, _tmp$10, _tmp$11, r$2;
		while (!((s.$length === 0)) && !((t.$length === 0))) {
			_tmp = 0; _tmp$1 = 0; sr = _tmp; tr = _tmp$1;
			if (((0 < 0 || 0 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0]) < 128) {
				_tmp$2 = (((0 < 0 || 0 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0]) >> 0); _tmp$3 = $subslice(s, 1); sr = _tmp$2; s = _tmp$3;
			} else {
				_tuple = utf8.DecodeRune(s); r = _tuple[0]; size = _tuple[1];
				_tmp$4 = r; _tmp$5 = $subslice(s, size); sr = _tmp$4; s = _tmp$5;
			}
			if (((0 < 0 || 0 >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + 0]) < 128) {
				_tmp$6 = (((0 < 0 || 0 >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + 0]) >> 0); _tmp$7 = $subslice(t, 1); tr = _tmp$6; t = _tmp$7;
			} else {
				_tuple$1 = utf8.DecodeRune(t); r$1 = _tuple$1[0]; size$1 = _tuple$1[1];
				_tmp$8 = r$1; _tmp$9 = $subslice(t, size$1); tr = _tmp$8; t = _tmp$9;
			}
			if (tr === sr) {
				continue;
			}
			if (tr < sr) {
				_tmp$10 = sr; _tmp$11 = tr; tr = _tmp$10; sr = _tmp$11;
			}
			if (tr < 128 && 65 <= sr && sr <= 90) {
				if (tr === ((sr + 97 >> 0) - 65 >> 0)) {
					continue;
				}
				return false;
			}
			r$2 = unicode.SimpleFold(sr);
			while (!((r$2 === sr)) && r$2 < tr) {
				r$2 = unicode.SimpleFold(r$2);
			}
			if (r$2 === tr) {
				continue;
			}
			return false;
		}
		return s.$length === t.$length;
	};
	Reader.Ptr.prototype.Len = function() {
		var r, x, x$1, x$2, x$3, x$4;
		r = this;
		if ((x = r.i, x$1 = new $Int64(0, r.s.$length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return 0;
		}
		return ((x$2 = (x$3 = new $Int64(0, r.s.$length), x$4 = r.i, new $Int64(x$3.$high - x$4.$high, x$3.$low - x$4.$low)), x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0);
	};
	Reader.prototype.Len = function() { return this.$val.Len(); };
	Reader.Ptr.prototype.Read = function(b) {
		var n = 0, err = $ifaceNil, r, _tmp, _tmp$1, x, x$1, _tmp$2, _tmp$3, x$2, x$3;
		r = this;
		if (b.$length === 0) {
			_tmp = 0; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		if ((x = r.i, x$1 = new $Int64(0, r.s.$length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp$2 = 0; _tmp$3 = io.EOF; n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		r.prevRune = -1;
		n = $copySlice(b, $subslice(r.s, $flatten64(r.i)));
		r.i = (x$2 = r.i, x$3 = new $Int64(0, n), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		return [n, err];
	};
	Reader.prototype.Read = function(b) { return this.$val.Read(b); };
	Reader.Ptr.prototype.ReadAt = function(b, off) {
		var n = 0, err = $ifaceNil, r, _tmp, _tmp$1, x, _tmp$2, _tmp$3;
		r = this;
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp = 0; _tmp$1 = errors.New("bytes.Reader.ReadAt: negative offset"); n = _tmp; err = _tmp$1;
			return [n, err];
		}
		if ((x = new $Int64(0, r.s.$length), (off.$high > x.$high || (off.$high === x.$high && off.$low >= x.$low)))) {
			_tmp$2 = 0; _tmp$3 = io.EOF; n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		n = $copySlice(b, $subslice(r.s, $flatten64(off)));
		if (n < b.$length) {
			err = io.EOF;
		}
		return [n, err];
	};
	Reader.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	Reader.Ptr.prototype.ReadByte = function() {
		var b = 0, err = $ifaceNil, r, x, x$1, _tmp, _tmp$1, x$2, x$3, x$4, x$5;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = new $Int64(0, r.s.$length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = 0; _tmp$1 = io.EOF; b = _tmp; err = _tmp$1;
			return [b, err];
		}
		b = (x$2 = r.s, x$3 = r.i, (($flatten64(x$3) < 0 || $flatten64(x$3) >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + $flatten64(x$3)]));
		r.i = (x$4 = r.i, x$5 = new $Int64(0, 1), new $Int64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
		return [b, err];
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.Ptr.prototype.UnreadByte = function() {
		var r, x, x$1, x$2;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, (x.$high < 0 || (x.$high === 0 && x.$low <= 0)))) {
			return errors.New("bytes.Reader.UnreadByte: at beginning of slice");
		}
		r.i = (x$1 = r.i, x$2 = new $Int64(0, 1), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		return $ifaceNil;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.Ptr.prototype.ReadRune = function() {
		var ch = 0, size = 0, err = $ifaceNil, r, x, x$1, _tmp, _tmp$1, _tmp$2, x$2, x$3, x$4, c, x$5, x$6, _tmp$3, _tmp$4, _tmp$5, _tuple, x$7, x$8;
		r = this;
		if ((x = r.i, x$1 = new $Int64(0, r.s.$length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			r.prevRune = -1;
			_tmp = 0; _tmp$1 = 0; _tmp$2 = io.EOF; ch = _tmp; size = _tmp$1; err = _tmp$2;
			return [ch, size, err];
		}
		r.prevRune = ((x$2 = r.i, x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0);
		c = (x$3 = r.s, x$4 = r.i, (($flatten64(x$4) < 0 || $flatten64(x$4) >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + $flatten64(x$4)]));
		if (c < 128) {
			r.i = (x$5 = r.i, x$6 = new $Int64(0, 1), new $Int64(x$5.$high + x$6.$high, x$5.$low + x$6.$low));
			_tmp$3 = (c >> 0); _tmp$4 = 1; _tmp$5 = $ifaceNil; ch = _tmp$3; size = _tmp$4; err = _tmp$5;
			return [ch, size, err];
		}
		_tuple = utf8.DecodeRune($subslice(r.s, $flatten64(r.i))); ch = _tuple[0]; size = _tuple[1];
		r.i = (x$7 = r.i, x$8 = new $Int64(0, size), new $Int64(x$7.$high + x$8.$high, x$7.$low + x$8.$low));
		return [ch, size, err];
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.Ptr.prototype.UnreadRune = function() {
		var r;
		r = this;
		if (r.prevRune < 0) {
			return errors.New("bytes.Reader.UnreadRune: previous operation was not ReadRune");
		}
		r.i = new $Int64(0, r.prevRune);
		r.prevRune = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.Ptr.prototype.Seek = function(offset, whence) {
		var r, abs, _ref, x, x$1;
		r = this;
		r.prevRune = -1;
		abs = new $Int64(0, 0);
		_ref = whence;
		if (_ref === 0) {
			abs = offset;
		} else if (_ref === 1) {
			abs = (x = r.i, new $Int64(x.$high + offset.$high, x.$low + offset.$low));
		} else if (_ref === 2) {
			abs = (x$1 = new $Int64(0, r.s.$length), new $Int64(x$1.$high + offset.$high, x$1.$low + offset.$low));
		} else {
			return [new $Int64(0, 0), errors.New("bytes.Reader.Seek: invalid whence")];
		}
		if ((abs.$high < 0 || (abs.$high === 0 && abs.$low < 0))) {
			return [new $Int64(0, 0), errors.New("bytes.Reader.Seek: negative position")];
		}
		r.i = abs;
		return [abs, $ifaceNil];
	};
	Reader.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	Reader.Ptr.prototype.WriteTo = function(w) {
		var n = new $Int64(0, 0), err = $ifaceNil, r, x, x$1, _tmp, _tmp$1, b, _tuple, m, x$2, x$3;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = new $Int64(0, r.s.$length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = new $Int64(0, 0); _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		b = $subslice(r.s, $flatten64(r.i));
		_tuple = w.Write(b); m = _tuple[0]; err = _tuple[1];
		if (m > b.$length) {
			$panic(new $String("bytes.Reader.WriteTo: invalid Write count"));
		}
		r.i = (x$2 = r.i, x$3 = new $Int64(0, m), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		n = new $Int64(0, m);
		if (!((m === b.$length)) && $interfaceIsEqual(err, $ifaceNil)) {
			err = io.ErrShortWrite;
		}
		return [n, err];
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	NewReader = $pkg.NewReader = function(b) {
		return new Reader.Ptr(b, new $Int64(0, 0), -1);
	};
	$pkg.$init = function() {
		($ptrType(Buffer)).methods = [["Bytes", "Bytes", "", $funcType([], [($sliceType($Uint8))], false), -1], ["Grow", "Grow", "", $funcType([$Int], [], false), -1], ["Len", "Len", "", $funcType([], [$Int], false), -1], ["Next", "Next", "", $funcType([$Int], [($sliceType($Uint8))], false), -1], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["ReadByte", "ReadByte", "", $funcType([], [$Uint8, $error], false), -1], ["ReadBytes", "ReadBytes", "", $funcType([$Uint8], [($sliceType($Uint8)), $error], false), -1], ["ReadFrom", "ReadFrom", "", $funcType([io.Reader], [$Int64, $error], false), -1], ["ReadRune", "ReadRune", "", $funcType([], [$Int32, $Int, $error], false), -1], ["ReadString", "ReadString", "", $funcType([$Uint8], [$String, $error], false), -1], ["Reset", "Reset", "", $funcType([], [], false), -1], ["String", "String", "", $funcType([], [$String], false), -1], ["Truncate", "Truncate", "", $funcType([$Int], [], false), -1], ["UnreadByte", "UnreadByte", "", $funcType([], [$error], false), -1], ["UnreadRune", "UnreadRune", "", $funcType([], [$error], false), -1], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["WriteByte", "WriteByte", "", $funcType([$Uint8], [$error], false), -1], ["WriteRune", "WriteRune", "", $funcType([$Int32], [$Int, $error], false), -1], ["WriteString", "WriteString", "", $funcType([$String], [$Int, $error], false), -1], ["WriteTo", "WriteTo", "", $funcType([io.Writer], [$Int64, $error], false), -1], ["grow", "grow", "bytes", $funcType([$Int], [$Int], false), -1], ["readSlice", "readSlice", "bytes", $funcType([$Uint8], [($sliceType($Uint8)), $error], false), -1]];
		Buffer.init([["buf", "buf", "bytes", ($sliceType($Uint8)), ""], ["off", "off", "bytes", $Int, ""], ["runeBytes", "runeBytes", "bytes", ($arrayType($Uint8, 4)), ""], ["bootstrap", "bootstrap", "bytes", ($arrayType($Uint8, 64)), ""], ["lastRead", "lastRead", "bytes", readOp, ""]]);
		($ptrType(Reader)).methods = [["Len", "Len", "", $funcType([], [$Int], false), -1], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["ReadAt", "ReadAt", "", $funcType([($sliceType($Uint8)), $Int64], [$Int, $error], false), -1], ["ReadByte", "ReadByte", "", $funcType([], [$Uint8, $error], false), -1], ["ReadRune", "ReadRune", "", $funcType([], [$Int32, $Int, $error], false), -1], ["Seek", "Seek", "", $funcType([$Int64, $Int], [$Int64, $error], false), -1], ["UnreadByte", "UnreadByte", "", $funcType([], [$error], false), -1], ["UnreadRune", "UnreadRune", "", $funcType([], [$error], false), -1], ["WriteTo", "WriteTo", "", $funcType([io.Writer], [$Int64, $error], false), -1]];
		Reader.init([["s", "s", "bytes", ($sliceType($Uint8)), ""], ["i", "i", "bytes", $Int64, ""], ["prevRune", "prevRune", "bytes", $Int, ""]]);
		$pkg.ErrTooLarge = errors.New("bytes.Buffer: too large");
	};
	return $pkg;
})();
$packages["encoding"] = (function() {
	var $pkg = {}, TextMarshaler;
	TextMarshaler = $pkg.TextMarshaler = $newType(8, "Interface", "encoding.TextMarshaler", "TextMarshaler", "encoding", null);
	$pkg.$init = function() {
		TextMarshaler.init([["MarshalText", "MarshalText", "", $funcType([], [($sliceType($Uint8)), $error], false)]]);
	};
	return $pkg;
})();
$packages["math"] = (function() {
	var $pkg = {}, js = $packages["github.com/gopherjs/gopherjs/js"], math, zero, posInf, negInf, nan, pow10tab, init, Abs, Exp, Frexp, Inf, IsInf, IsNaN, Ldexp, Log, Log2, NaN, Float32bits, Float32frombits, Float64bits, Float64frombits, abs, normalize, frexp, log2, init$1;
	init = function() {
		Float32bits(0);
		Float32frombits(0);
	};
	Abs = $pkg.Abs = function(x) {
		return abs(x);
	};
	Exp = $pkg.Exp = function(x) {
		return $parseFloat(math.exp(x));
	};
	Frexp = $pkg.Frexp = function(f) {
		var frac = 0, exp$1 = 0, _tuple;
		_tuple = frexp(f); frac = _tuple[0]; exp$1 = _tuple[1];
		return [frac, exp$1];
	};
	Inf = $pkg.Inf = function(sign) {
		if (sign >= 0) {
			return posInf;
		} else {
			return negInf;
		}
	};
	IsInf = $pkg.IsInf = function(f, sign) {
		if (f === posInf) {
			return sign >= 0;
		}
		if (f === negInf) {
			return sign <= 0;
		}
		return false;
	};
	IsNaN = $pkg.IsNaN = function(f) {
		var is = false;
		is = !((f === f));
		return is;
	};
	Ldexp = $pkg.Ldexp = function(frac, exp$1) {
		if (frac === 0) {
			return frac;
		}
		if (exp$1 >= 1024) {
			return frac * $parseFloat(math.pow(2, 1023)) * $parseFloat(math.pow(2, exp$1 - 1023 >> 0));
		}
		if (exp$1 <= -1024) {
			return frac * $parseFloat(math.pow(2, -1023)) * $parseFloat(math.pow(2, exp$1 + 1023 >> 0));
		}
		return frac * $parseFloat(math.pow(2, exp$1));
	};
	Log = $pkg.Log = function(x) {
		if (!((x === x))) {
			return nan;
		}
		return $parseFloat(math.log(x));
	};
	Log2 = $pkg.Log2 = function(x) {
		return log2(x);
	};
	NaN = $pkg.NaN = function() {
		return nan;
	};
	Float32bits = $pkg.Float32bits = function(f) {
		var s, e, r;
		if (f === 0) {
			if (1 / f === negInf) {
				return 2147483648;
			}
			return 0;
		}
		if (!(f === f)) {
			return 2143289344;
		}
		s = 0;
		if (f < 0) {
			s = 2147483648;
			f = -f;
		}
		e = 150;
		while (f >= 1.6777216e+07) {
			f = f / (2);
			e = e + (1) >>> 0;
			if (e === 255) {
				if (f >= 8.388608e+06) {
					f = posInf;
				}
				break;
			}
		}
		while (f < 8.388608e+06) {
			e = e - (1) >>> 0;
			if (e === 0) {
				break;
			}
			f = f * (2);
		}
		r = $parseFloat($mod(f, 2));
		if ((r > 0.5 && r < 1) || r >= 1.5) {
			f = f + (1);
		}
		return (((s | (e << 23 >>> 0)) >>> 0) | (((f >> 0) & ~8388608))) >>> 0;
	};
	Float32frombits = $pkg.Float32frombits = function(b) {
		var s, e, m;
		s = 1;
		if (!((((b & 2147483648) >>> 0) === 0))) {
			s = -1;
		}
		e = (((b >>> 23 >>> 0)) & 255) >>> 0;
		m = (b & 8388607) >>> 0;
		if (e === 255) {
			if (m === 0) {
				return s / 0;
			}
			return nan;
		}
		if (!((e === 0))) {
			m = m + (8388608) >>> 0;
		}
		if (e === 0) {
			e = 1;
		}
		return Ldexp(m, ((e >> 0) - 127 >> 0) - 23 >> 0) * s;
	};
	Float64bits = $pkg.Float64bits = function(f) {
		var s, e, x, x$1, x$2, x$3;
		if (f === 0) {
			if (1 / f === negInf) {
				return new $Uint64(2147483648, 0);
			}
			return new $Uint64(0, 0);
		}
		if (!((f === f))) {
			return new $Uint64(2146959360, 1);
		}
		s = new $Uint64(0, 0);
		if (f < 0) {
			s = new $Uint64(2147483648, 0);
			f = -f;
		}
		e = 1075;
		while (f >= 9.007199254740992e+15) {
			f = f / (2);
			e = e + (1) >>> 0;
			if (e === 2047) {
				break;
			}
		}
		while (f < 4.503599627370496e+15) {
			e = e - (1) >>> 0;
			if (e === 0) {
				break;
			}
			f = f * (2);
		}
		return (x = (x$1 = $shiftLeft64(new $Uint64(0, e), 52), new $Uint64(s.$high | x$1.$high, (s.$low | x$1.$low) >>> 0)), x$2 = (x$3 = new $Uint64(0, f), new $Uint64(x$3.$high &~ 1048576, (x$3.$low &~ 0) >>> 0)), new $Uint64(x.$high | x$2.$high, (x.$low | x$2.$low) >>> 0));
	};
	Float64frombits = $pkg.Float64frombits = function(b) {
		var s, x, x$1, e, m, x$2;
		s = 1;
		if (!((x = new $Uint64(b.$high & 2147483648, (b.$low & 0) >>> 0), (x.$high === 0 && x.$low === 0)))) {
			s = -1;
		}
		e = (x$1 = $shiftRightUint64(b, 52), new $Uint64(x$1.$high & 0, (x$1.$low & 2047) >>> 0));
		m = new $Uint64(b.$high & 1048575, (b.$low & 4294967295) >>> 0);
		if ((e.$high === 0 && e.$low === 2047)) {
			if ((m.$high === 0 && m.$low === 0)) {
				return s / 0;
			}
			return nan;
		}
		if (!((e.$high === 0 && e.$low === 0))) {
			m = (x$2 = new $Uint64(1048576, 0), new $Uint64(m.$high + x$2.$high, m.$low + x$2.$low));
		}
		if ((e.$high === 0 && e.$low === 0)) {
			e = new $Uint64(0, 1);
		}
		return Ldexp($flatten64(m), ((e.$low >> 0) - 1023 >> 0) - 52 >> 0) * s;
	};
	abs = function(x) {
		if (x < 0) {
			return -x;
		} else if (x === 0) {
			return 0;
		}
		return x;
	};
	normalize = function(x) {
		var y = 0, exp$1 = 0, _tmp, _tmp$1, _tmp$2, _tmp$3;
		if (Abs(x) < 2.2250738585072014e-308) {
			_tmp = x * 4.503599627370496e+15; _tmp$1 = -52; y = _tmp; exp$1 = _tmp$1;
			return [y, exp$1];
		}
		_tmp$2 = x; _tmp$3 = 0; y = _tmp$2; exp$1 = _tmp$3;
		return [y, exp$1];
	};
	frexp = function(f) {
		var frac = 0, exp$1 = 0, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, x, x$1, x$2, x$3;
		if (f === 0) {
			_tmp = f; _tmp$1 = 0; frac = _tmp; exp$1 = _tmp$1;
			return [frac, exp$1];
		} else if (IsInf(f, 0) || IsNaN(f)) {
			_tmp$2 = f; _tmp$3 = 0; frac = _tmp$2; exp$1 = _tmp$3;
			return [frac, exp$1];
		}
		_tuple = normalize(f); f = _tuple[0]; exp$1 = _tuple[1];
		x = Float64bits(f);
		exp$1 = exp$1 + (((((x$1 = $shiftRightUint64(x, 52), new $Uint64(x$1.$high & 0, (x$1.$low & 2047) >>> 0)).$low >> 0) - 1023 >> 0) + 1 >> 0)) >> 0;
		x = (x$2 = new $Uint64(2146435072, 0), new $Uint64(x.$high &~ x$2.$high, (x.$low &~ x$2.$low) >>> 0));
		x = (x$3 = new $Uint64(1071644672, 0), new $Uint64(x.$high | x$3.$high, (x.$low | x$3.$low) >>> 0));
		frac = Float64frombits(x);
		return [frac, exp$1];
	};
	log2 = function(x) {
		var _tuple, frac, exp$1;
		_tuple = Frexp(x); frac = _tuple[0]; exp$1 = _tuple[1];
		return Log(frac) * 1.4426950408889634 + exp$1;
	};
	init$1 = function() {
		var i, _q, m, x;
		pow10tab[0] = 1;
		pow10tab[1] = 10;
		i = 2;
		while (i < 70) {
			m = (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			(i < 0 || i >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[i] = ((m < 0 || m >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[m]) * (x = i - m >> 0, ((x < 0 || x >= pow10tab.length) ? $throwRuntimeError("index out of range") : pow10tab[x]));
			i = i + (1) >> 0;
		}
	};
	$pkg.$init = function() {
		pow10tab = ($arrayType($Float64, 70)).zero();
		math = $global.Math;
		zero = 0;
		posInf = 1 / zero;
		negInf = -1 / zero;
		nan = 0 / zero;
		init();
		init$1();
	};
	return $pkg;
})();
$packages["strconv"] = (function() {
	var $pkg = {}, math = $packages["math"], errors = $packages["errors"], utf8 = $packages["unicode/utf8"], NumError, decimal, leftCheat, extFloat, floatInfo, decimalSlice, optimize, powtab, float64pow10, float32pow10, leftcheats, smallPowersOfTen, powersOfTen, uint64pow10, float32info, float64info, isPrint16, isNotPrint16, isPrint32, isNotPrint32, shifts, ParseBool, equalIgnoreCase, special, readFloat, atof64exact, atof32exact, atof32, atof64, ParseFloat, syntaxError, rangeError, cutoff64, ParseUint, ParseInt, Atoi, digitZero, trim, rightShift, prefixIsLessThan, leftShift, shouldRoundUp, frexp10Many, adjustLastDigitFixed, adjustLastDigit, FormatFloat, AppendFloat, genericFtoa, bigFtoa, formatDigits, roundShortest, fmtE, fmtF, fmtB, max, FormatInt, Itoa, AppendInt, AppendUint, formatBits, quoteWith, Quote, QuoteToASCII, QuoteRune, AppendQuoteRune, QuoteRuneToASCII, AppendQuoteRuneToASCII, CanBackquote, unhex, UnquoteChar, Unquote, contains, bsearch16, bsearch32, IsPrint;
	NumError = $pkg.NumError = $newType(0, "Struct", "strconv.NumError", "NumError", "strconv", function(Func_, Num_, Err_) {
		this.$val = this;
		this.Func = Func_ !== undefined ? Func_ : "";
		this.Num = Num_ !== undefined ? Num_ : "";
		this.Err = Err_ !== undefined ? Err_ : $ifaceNil;
	});
	decimal = $pkg.decimal = $newType(0, "Struct", "strconv.decimal", "decimal", "strconv", function(d_, nd_, dp_, neg_, trunc_) {
		this.$val = this;
		this.d = d_ !== undefined ? d_ : ($arrayType($Uint8, 800)).zero();
		this.nd = nd_ !== undefined ? nd_ : 0;
		this.dp = dp_ !== undefined ? dp_ : 0;
		this.neg = neg_ !== undefined ? neg_ : false;
		this.trunc = trunc_ !== undefined ? trunc_ : false;
	});
	leftCheat = $pkg.leftCheat = $newType(0, "Struct", "strconv.leftCheat", "leftCheat", "strconv", function(delta_, cutoff_) {
		this.$val = this;
		this.delta = delta_ !== undefined ? delta_ : 0;
		this.cutoff = cutoff_ !== undefined ? cutoff_ : "";
	});
	extFloat = $pkg.extFloat = $newType(0, "Struct", "strconv.extFloat", "extFloat", "strconv", function(mant_, exp_, neg_) {
		this.$val = this;
		this.mant = mant_ !== undefined ? mant_ : new $Uint64(0, 0);
		this.exp = exp_ !== undefined ? exp_ : 0;
		this.neg = neg_ !== undefined ? neg_ : false;
	});
	floatInfo = $pkg.floatInfo = $newType(0, "Struct", "strconv.floatInfo", "floatInfo", "strconv", function(mantbits_, expbits_, bias_) {
		this.$val = this;
		this.mantbits = mantbits_ !== undefined ? mantbits_ : 0;
		this.expbits = expbits_ !== undefined ? expbits_ : 0;
		this.bias = bias_ !== undefined ? bias_ : 0;
	});
	decimalSlice = $pkg.decimalSlice = $newType(0, "Struct", "strconv.decimalSlice", "decimalSlice", "strconv", function(d_, nd_, dp_, neg_) {
		this.$val = this;
		this.d = d_ !== undefined ? d_ : ($sliceType($Uint8)).nil;
		this.nd = nd_ !== undefined ? nd_ : 0;
		this.dp = dp_ !== undefined ? dp_ : 0;
		this.neg = neg_ !== undefined ? neg_ : false;
	});
	ParseBool = $pkg.ParseBool = function(str) {
		var value = false, err = $ifaceNil, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		_ref = str;
		if (_ref === "1" || _ref === "t" || _ref === "T" || _ref === "true" || _ref === "TRUE" || _ref === "True") {
			_tmp = true; _tmp$1 = $ifaceNil; value = _tmp; err = _tmp$1;
			return [value, err];
		} else if (_ref === "0" || _ref === "f" || _ref === "F" || _ref === "false" || _ref === "FALSE" || _ref === "False") {
			_tmp$2 = false; _tmp$3 = $ifaceNil; value = _tmp$2; err = _tmp$3;
			return [value, err];
		}
		_tmp$4 = false; _tmp$5 = syntaxError("ParseBool", str); value = _tmp$4; err = _tmp$5;
		return [value, err];
	};
	equalIgnoreCase = function(s1, s2) {
		var i, c1, c2;
		if (!((s1.length === s2.length))) {
			return false;
		}
		i = 0;
		while (i < s1.length) {
			c1 = s1.charCodeAt(i);
			if (65 <= c1 && c1 <= 90) {
				c1 = c1 + (32) << 24 >>> 24;
			}
			c2 = s2.charCodeAt(i);
			if (65 <= c2 && c2 <= 90) {
				c2 = c2 + (32) << 24 >>> 24;
			}
			if (!((c1 === c2))) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	special = function(s) {
		var f = 0, ok = false, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7;
		if (s.length === 0) {
			return [f, ok];
		}
		_ref = s.charCodeAt(0);
		if (_ref === 43) {
			if (equalIgnoreCase(s, "+inf") || equalIgnoreCase(s, "+infinity")) {
				_tmp = math.Inf(1); _tmp$1 = true; f = _tmp; ok = _tmp$1;
				return [f, ok];
			}
		} else if (_ref === 45) {
			if (equalIgnoreCase(s, "-inf") || equalIgnoreCase(s, "-infinity")) {
				_tmp$2 = math.Inf(-1); _tmp$3 = true; f = _tmp$2; ok = _tmp$3;
				return [f, ok];
			}
		} else if (_ref === 110 || _ref === 78) {
			if (equalIgnoreCase(s, "nan")) {
				_tmp$4 = math.NaN(); _tmp$5 = true; f = _tmp$4; ok = _tmp$5;
				return [f, ok];
			}
		} else if (_ref === 105 || _ref === 73) {
			if (equalIgnoreCase(s, "inf") || equalIgnoreCase(s, "infinity")) {
				_tmp$6 = math.Inf(1); _tmp$7 = true; f = _tmp$6; ok = _tmp$7;
				return [f, ok];
			}
		} else {
			return [f, ok];
		}
		return [f, ok];
	};
	decimal.Ptr.prototype.set = function(s) {
		var ok = false, b, i, sawdot, sawdigits, x, x$1, esign, e;
		b = this;
		i = 0;
		b.neg = false;
		b.trunc = false;
		if (i >= s.length) {
			return ok;
		}
		if (s.charCodeAt(i) === 43) {
			i = i + (1) >> 0;
		} else if (s.charCodeAt(i) === 45) {
			b.neg = true;
			i = i + (1) >> 0;
		}
		sawdot = false;
		sawdigits = false;
		while (i < s.length) {
			if (s.charCodeAt(i) === 46) {
				if (sawdot) {
					return ok;
				}
				sawdot = true;
				b.dp = b.nd;
				i = i + (1) >> 0;
				continue;
			} else if (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				sawdigits = true;
				if ((s.charCodeAt(i) === 48) && (b.nd === 0)) {
					b.dp = b.dp - (1) >> 0;
					i = i + (1) >> 0;
					continue;
				}
				if (b.nd < 800) {
					(x = b.d, x$1 = b.nd, (x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1] = s.charCodeAt(i));
					b.nd = b.nd + (1) >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					b.trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return ok;
		}
		if (!sawdot) {
			b.dp = b.nd;
		}
		if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
			i = i + (1) >> 0;
			if (i >= s.length) {
				return ok;
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + (1) >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + (1) >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return ok;
			}
			e = 0;
			while (i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				if (e < 10000) {
					e = (((((e >>> 16 << 16) * 10 >> 0) + (e << 16 >>> 16) * 10) >> 0) + (s.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
				}
				i = i + (1) >> 0;
			}
			b.dp = b.dp + (((((e >>> 16 << 16) * esign >> 0) + (e << 16 >>> 16) * esign) >> 0)) >> 0;
		}
		if (!((i === s.length))) {
			return ok;
		}
		ok = true;
		return ok;
	};
	decimal.prototype.set = function(s) { return this.$val.set(s); };
	readFloat = function(s) {
		var mantissa = new $Uint64(0, 0), exp = 0, neg = false, trunc = false, ok = false, i, sawdot, sawdigits, nd, ndMant, dp, c, _ref, x, esign, e;
		i = 0;
		if (i >= s.length) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if (s.charCodeAt(i) === 43) {
			i = i + (1) >> 0;
		} else if (s.charCodeAt(i) === 45) {
			neg = true;
			i = i + (1) >> 0;
		}
		sawdot = false;
		sawdigits = false;
		nd = 0;
		ndMant = 0;
		dp = 0;
		while (i < s.length) {
			c = s.charCodeAt(i);
			_ref = true;
			if (_ref === (c === 46)) {
				if (sawdot) {
					return [mantissa, exp, neg, trunc, ok];
				}
				sawdot = true;
				dp = nd;
				i = i + (1) >> 0;
				continue;
			} else if (_ref === 48 <= c && c <= 57) {
				sawdigits = true;
				if ((c === 48) && (nd === 0)) {
					dp = dp - (1) >> 0;
					i = i + (1) >> 0;
					continue;
				}
				nd = nd + (1) >> 0;
				if (ndMant < 19) {
					mantissa = $mul64(mantissa, (new $Uint64(0, 10)));
					mantissa = (x = new $Uint64(0, (c - 48 << 24 >>> 24)), new $Uint64(mantissa.$high + x.$high, mantissa.$low + x.$low));
					ndMant = ndMant + (1) >> 0;
				} else if (!((s.charCodeAt(i) === 48))) {
					trunc = true;
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		if (!sawdigits) {
			return [mantissa, exp, neg, trunc, ok];
		}
		if (!sawdot) {
			dp = nd;
		}
		if (i < s.length && ((s.charCodeAt(i) === 101) || (s.charCodeAt(i) === 69))) {
			i = i + (1) >> 0;
			if (i >= s.length) {
				return [mantissa, exp, neg, trunc, ok];
			}
			esign = 1;
			if (s.charCodeAt(i) === 43) {
				i = i + (1) >> 0;
			} else if (s.charCodeAt(i) === 45) {
				i = i + (1) >> 0;
				esign = -1;
			}
			if (i >= s.length || s.charCodeAt(i) < 48 || s.charCodeAt(i) > 57) {
				return [mantissa, exp, neg, trunc, ok];
			}
			e = 0;
			while (i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				if (e < 10000) {
					e = (((((e >>> 16 << 16) * 10 >> 0) + (e << 16 >>> 16) * 10) >> 0) + (s.charCodeAt(i) >> 0) >> 0) - 48 >> 0;
				}
				i = i + (1) >> 0;
			}
			dp = dp + (((((e >>> 16 << 16) * esign >> 0) + (e << 16 >>> 16) * esign) >> 0)) >> 0;
		}
		if (!((i === s.length))) {
			return [mantissa, exp, neg, trunc, ok];
		}
		exp = dp - ndMant >> 0;
		ok = true;
		return [mantissa, exp, neg, trunc, ok];
	};
	decimal.Ptr.prototype.floatBits = function(flt) {
		var $this = this, $args = arguments, b = new $Uint64(0, 0), overflow = false, $s = 0, d, exp, mant, n, x, n$1, x$1, n$2, y, x$2, y$1, x$3, x$4, y$2, x$5, x$6, bits, x$7, y$3, x$8, _tmp, _tmp$1;
		/* */ s: while (true) { switch ($s) { case 0:
		d = $this;
		exp = 0;
		mant = new $Uint64(0, 0);
		/* if (d.nd === 0) { */ if (d.nd === 0) {} else { $s = 3; continue; }
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 1; continue;
		/* } */ case 3:
		/* if (d.dp > 310) { */ if (d.dp > 310) {} else { $s = 4; continue; }
			/* goto overflow */ $s = 2; continue;
		/* } */ case 4:
		/* if (d.dp < -330) { */ if (d.dp < -330) {} else { $s = 5; continue; }
			mant = new $Uint64(0, 0);
			exp = flt.bias;
			/* goto out */ $s = 1; continue;
		/* } */ case 5:
		exp = 0;
		while (d.dp > 0) {
			n = 0;
			if (d.dp >= powtab.$length) {
				n = 27;
			} else {
				n = (x = d.dp, ((x < 0 || x >= powtab.$length) ? $throwRuntimeError("index out of range") : powtab.$array[powtab.$offset + x]));
			}
			d.Shift(-n);
			exp = exp + (n) >> 0;
		}
		while (d.dp < 0 || (d.dp === 0) && d.d[0] < 53) {
			n$1 = 0;
			if (-d.dp >= powtab.$length) {
				n$1 = 27;
			} else {
				n$1 = (x$1 = -d.dp, ((x$1 < 0 || x$1 >= powtab.$length) ? $throwRuntimeError("index out of range") : powtab.$array[powtab.$offset + x$1]));
			}
			d.Shift(n$1);
			exp = exp - (n$1) >> 0;
		}
		exp = exp - (1) >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n$2 = (flt.bias + 1 >> 0) - exp >> 0;
			d.Shift(-n$2);
			exp = exp + (n$2) >> 0;
		}
		/* if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) { */ if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) {} else { $s = 6; continue; }
			/* goto overflow */ $s = 2; continue;
		/* } */ case 6:
		d.Shift(((1 + flt.mantbits >>> 0) >> 0));
		mant = d.RoundedInteger();
		/* if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) { */ if ((x$2 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) {} else { $s = 7; continue; }
			mant = $shiftRightUint64(mant, (1));
			exp = exp + (1) >> 0;
			/* if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) { */ if ((exp - flt.bias >> 0) >= (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) {} else { $s = 8; continue; }
				/* goto overflow */ $s = 2; continue;
			/* } */ case 8:
		/* } */ case 7:
		if ((x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$4.$high, (mant.$low & x$4.$low) >>> 0)), (x$3.$high === 0 && x$3.$low === 0))) {
			exp = flt.bias;
		}
		/* goto out */ $s = 1; continue;
		/* overflow: */ case 2:
		mant = new $Uint64(0, 0);
		exp = (((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
		overflow = true;
		/* out: */ case 1:
		bits = (x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$6.$high - 0, x$6.$low - 1)), new $Uint64(mant.$high & x$5.$high, (mant.$low & x$5.$low) >>> 0));
		bits = (x$7 = $shiftLeft64(new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$3 = flt.expbits, y$3 < 32 ? (1 << y$3) : 0) >> 0) - 1 >> 0)))), flt.mantbits), new $Uint64(bits.$high | x$7.$high, (bits.$low | x$7.$low) >>> 0));
		if (d.neg) {
			bits = (x$8 = $shiftLeft64($shiftLeft64(new $Uint64(0, 1), flt.mantbits), flt.expbits), new $Uint64(bits.$high | x$8.$high, (bits.$low | x$8.$low) >>> 0));
		}
		_tmp = bits; _tmp$1 = overflow; b = _tmp; overflow = _tmp$1;
		return [b, overflow];
		/* */ case -1: } return; }
	};
	decimal.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
	atof64exact = function(mantissa, exp, neg) {
		var f = 0, ok = false, x, _tmp, _tmp$1, x$1, _tmp$2, _tmp$3, _tmp$4, x$2, _tmp$5;
		if (!((x = $shiftRightUint64(mantissa, float64info.mantbits), (x.$high === 0 && x.$low === 0)))) {
			return [f, ok];
		}
		f = $flatten64(mantissa);
		if (neg) {
			f = -f;
		}
		if (exp === 0) {
			_tmp = f; _tmp$1 = true; f = _tmp; ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 37) {
			if (exp > 22) {
				f = f * ((x$1 = exp - 22 >> 0, ((x$1 < 0 || x$1 >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + x$1])));
				exp = 22;
			}
			if (f > 1e+15 || f < -1e+15) {
				return [f, ok];
			}
			_tmp$2 = f * ((exp < 0 || exp >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + exp]); _tmp$3 = true; f = _tmp$2; ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -22) {
			_tmp$4 = f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float64pow10.$length) ? $throwRuntimeError("index out of range") : float64pow10.$array[float64pow10.$offset + x$2])); _tmp$5 = true; f = _tmp$4; ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atof32exact = function(mantissa, exp, neg) {
		var f = 0, ok = false, x, _tmp, _tmp$1, x$1, _tmp$2, _tmp$3, _tmp$4, x$2, _tmp$5;
		if (!((x = $shiftRightUint64(mantissa, float32info.mantbits), (x.$high === 0 && x.$low === 0)))) {
			return [f, ok];
		}
		f = $flatten64(mantissa);
		if (neg) {
			f = -f;
		}
		if (exp === 0) {
			_tmp = f; _tmp$1 = true; f = _tmp; ok = _tmp$1;
			return [f, ok];
		} else if (exp > 0 && exp <= 17) {
			if (exp > 10) {
				f = f * ((x$1 = exp - 10 >> 0, ((x$1 < 0 || x$1 >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + x$1])));
				exp = 10;
			}
			if (f > 1e+07 || f < -1e+07) {
				return [f, ok];
			}
			_tmp$2 = f * ((exp < 0 || exp >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + exp]); _tmp$3 = true; f = _tmp$2; ok = _tmp$3;
			return [f, ok];
		} else if (exp < 0 && exp >= -10) {
			_tmp$4 = f / (x$2 = -exp, ((x$2 < 0 || x$2 >= float32pow10.$length) ? $throwRuntimeError("index out of range") : float32pow10.$array[float32pow10.$offset + x$2])); _tmp$5 = true; f = _tmp$4; ok = _tmp$5;
			return [f, ok];
		}
		return [f, ok];
	};
	atof32 = function(s) {
		var f = 0, err = $ifaceNil, _tuple, val, ok, _tmp, _tmp$1, _tuple$1, mantissa, exp, neg, trunc, ok$1, _tuple$2, f$1, ok$2, _tmp$2, _tmp$3, ext, ok$3, _tuple$3, b, ovf, _tmp$4, _tmp$5, d, _tmp$6, _tmp$7, _tuple$4, b$1, ovf$1, _tmp$8, _tmp$9;
		_tuple = special(s); val = _tuple[0]; ok = _tuple[1];
		if (ok) {
			_tmp = val; _tmp$1 = $ifaceNil; f = _tmp; err = _tmp$1;
			return [f, err];
		}
		if (optimize) {
			_tuple$1 = readFloat(s); mantissa = _tuple$1[0]; exp = _tuple$1[1]; neg = _tuple$1[2]; trunc = _tuple$1[3]; ok$1 = _tuple$1[4];
			if (ok$1) {
				if (!trunc) {
					_tuple$2 = atof32exact(mantissa, exp, neg); f$1 = _tuple$2[0]; ok$2 = _tuple$2[1];
					if (ok$2) {
						_tmp$2 = f$1; _tmp$3 = $ifaceNil; f = _tmp$2; err = _tmp$3;
						return [f, err];
					}
				}
				ext = new extFloat.Ptr();
				ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float32info);
				if (ok$3) {
					_tuple$3 = ext.floatBits(float32info); b = _tuple$3[0]; ovf = _tuple$3[1];
					f = math.Float32frombits((b.$low >>> 0));
					if (ovf) {
						err = rangeError("ParseFloat", s);
					}
					_tmp$4 = f; _tmp$5 = err; f = _tmp$4; err = _tmp$5;
					return [f, err];
				}
			}
		}
		d = new decimal.Ptr(); $copy(d, new decimal.Ptr(), decimal);
		if (!d.set(s)) {
			_tmp$6 = 0; _tmp$7 = syntaxError("ParseFloat", s); f = _tmp$6; err = _tmp$7;
			return [f, err];
		}
		_tuple$4 = d.floatBits(float32info); b$1 = _tuple$4[0]; ovf$1 = _tuple$4[1];
		f = math.Float32frombits((b$1.$low >>> 0));
		if (ovf$1) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$8 = f; _tmp$9 = err; f = _tmp$8; err = _tmp$9;
		return [f, err];
	};
	atof64 = function(s) {
		var f = 0, err = $ifaceNil, _tuple, val, ok, _tmp, _tmp$1, _tuple$1, mantissa, exp, neg, trunc, ok$1, _tuple$2, f$1, ok$2, _tmp$2, _tmp$3, ext, ok$3, _tuple$3, b, ovf, _tmp$4, _tmp$5, d, _tmp$6, _tmp$7, _tuple$4, b$1, ovf$1, _tmp$8, _tmp$9;
		_tuple = special(s); val = _tuple[0]; ok = _tuple[1];
		if (ok) {
			_tmp = val; _tmp$1 = $ifaceNil; f = _tmp; err = _tmp$1;
			return [f, err];
		}
		if (optimize) {
			_tuple$1 = readFloat(s); mantissa = _tuple$1[0]; exp = _tuple$1[1]; neg = _tuple$1[2]; trunc = _tuple$1[3]; ok$1 = _tuple$1[4];
			if (ok$1) {
				if (!trunc) {
					_tuple$2 = atof64exact(mantissa, exp, neg); f$1 = _tuple$2[0]; ok$2 = _tuple$2[1];
					if (ok$2) {
						_tmp$2 = f$1; _tmp$3 = $ifaceNil; f = _tmp$2; err = _tmp$3;
						return [f, err];
					}
				}
				ext = new extFloat.Ptr();
				ok$3 = ext.AssignDecimal(mantissa, exp, neg, trunc, float64info);
				if (ok$3) {
					_tuple$3 = ext.floatBits(float64info); b = _tuple$3[0]; ovf = _tuple$3[1];
					f = math.Float64frombits(b);
					if (ovf) {
						err = rangeError("ParseFloat", s);
					}
					_tmp$4 = f; _tmp$5 = err; f = _tmp$4; err = _tmp$5;
					return [f, err];
				}
			}
		}
		d = new decimal.Ptr(); $copy(d, new decimal.Ptr(), decimal);
		if (!d.set(s)) {
			_tmp$6 = 0; _tmp$7 = syntaxError("ParseFloat", s); f = _tmp$6; err = _tmp$7;
			return [f, err];
		}
		_tuple$4 = d.floatBits(float64info); b$1 = _tuple$4[0]; ovf$1 = _tuple$4[1];
		f = math.Float64frombits(b$1);
		if (ovf$1) {
			err = rangeError("ParseFloat", s);
		}
		_tmp$8 = f; _tmp$9 = err; f = _tmp$8; err = _tmp$9;
		return [f, err];
	};
	ParseFloat = $pkg.ParseFloat = function(s, bitSize) {
		var f = 0, err = $ifaceNil, _tuple, f1, err1, _tmp, _tmp$1, _tuple$1, f1$1, err1$1, _tmp$2, _tmp$3;
		if (bitSize === 32) {
			_tuple = atof32(s); f1 = _tuple[0]; err1 = _tuple[1];
			_tmp = $coerceFloat32(f1); _tmp$1 = err1; f = _tmp; err = _tmp$1;
			return [f, err];
		}
		_tuple$1 = atof64(s); f1$1 = _tuple$1[0]; err1$1 = _tuple$1[1];
		_tmp$2 = f1$1; _tmp$3 = err1$1; f = _tmp$2; err = _tmp$3;
		return [f, err];
	};
	NumError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return "strconv." + e.Func + ": " + "parsing " + Quote(e.Num) + ": " + e.Err.Error();
	};
	NumError.prototype.Error = function() { return this.$val.Error(); };
	syntaxError = function(fn, str) {
		return new NumError.Ptr(fn, str, $pkg.ErrSyntax);
	};
	rangeError = function(fn, str) {
		return new NumError.Ptr(fn, str, $pkg.ErrRange);
	};
	cutoff64 = function(base) {
		var x;
		if (base < 2) {
			return new $Uint64(0, 0);
		}
		return (x = $div64(new $Uint64(4294967295, 4294967295), new $Uint64(0, base), false), new $Uint64(x.$high + 0, x.$low + 1));
	};
	ParseUint = $pkg.ParseUint = function(s, base, bitSize) {
		var $this = this, $args = arguments, n = new $Uint64(0, 0), err = $ifaceNil, $s = 0, _tmp, _tmp$1, cutoff, maxVal, s0, x, i, v, d, x$1, n1, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		/* */ s: while (true) { switch ($s) { case 0:
		_tmp = new $Uint64(0, 0); _tmp$1 = new $Uint64(0, 0); cutoff = _tmp; maxVal = _tmp$1;
		if (bitSize === 0) {
			bitSize = 32;
		}
		s0 = s;
		/* if (s.length < 1) { */ if (s.length < 1) {} else if (2 <= base && base <= 36) { $s = 2; continue; } else if (base === 0) { $s = 3; continue; } else { $s = 4; continue; }
			err = $pkg.ErrSyntax;
			/* goto Error */ $s = 1; continue;
		/* } else if (2 <= base && base <= 36) { */ $s = 5; continue; case 2: 
		/* } else if (base === 0) { */ $s = 5; continue; case 3: 
			/* if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) { */ if ((s.charCodeAt(0) === 48) && s.length > 1 && ((s.charCodeAt(1) === 120) || (s.charCodeAt(1) === 88))) {} else if (s.charCodeAt(0) === 48) { $s = 6; continue; } else { $s = 7; continue; }
				base = 16;
				s = s.substring(2);
				/* if (s.length < 1) { */ if (s.length < 1) {} else { $s = 9; continue; }
					err = $pkg.ErrSyntax;
					/* goto Error */ $s = 1; continue;
				/* } */ case 9:
			/* } else if (s.charCodeAt(0) === 48) { */ $s = 8; continue; case 6: 
				base = 8;
			/* } else { */ $s = 8; continue; case 7: 
				base = 10;
			/* } */ case 8:
		/* } else { */ $s = 5; continue; case 4: 
			err = errors.New("invalid base " + Itoa(base));
			/* goto Error */ $s = 1; continue;
		/* } */ case 5:
		n = new $Uint64(0, 0);
		cutoff = cutoff64(base);
		maxVal = (x = $shiftLeft64(new $Uint64(0, 1), (bitSize >>> 0)), new $Uint64(x.$high - 0, x.$low - 1));
		i = 0;
		/* while (i < s.length) { */ case 10: if(!(i < s.length)) { $s = 11; continue; }
			v = 0;
			d = s.charCodeAt(i);
			/* if (48 <= d && d <= 57) { */ if (48 <= d && d <= 57) {} else if (97 <= d && d <= 122) { $s = 12; continue; } else if (65 <= d && d <= 90) { $s = 13; continue; } else { $s = 14; continue; }
				v = d - 48 << 24 >>> 24;
			/* } else if (97 <= d && d <= 122) { */ $s = 15; continue; case 12: 
				v = (d - 97 << 24 >>> 24) + 10 << 24 >>> 24;
			/* } else if (65 <= d && d <= 90) { */ $s = 15; continue; case 13: 
				v = (d - 65 << 24 >>> 24) + 10 << 24 >>> 24;
			/* } else { */ $s = 15; continue; case 14: 
				n = new $Uint64(0, 0);
				err = $pkg.ErrSyntax;
				/* goto Error */ $s = 1; continue;
			/* } */ case 15:
			/* if ((v >> 0) >= base) { */ if ((v >> 0) >= base) {} else { $s = 16; continue; }
				n = new $Uint64(0, 0);
				err = $pkg.ErrSyntax;
				/* goto Error */ $s = 1; continue;
			/* } */ case 16:
			/* if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) { */ if ((n.$high > cutoff.$high || (n.$high === cutoff.$high && n.$low >= cutoff.$low))) {} else { $s = 17; continue; }
				n = new $Uint64(4294967295, 4294967295);
				err = $pkg.ErrRange;
				/* goto Error */ $s = 1; continue;
			/* } */ case 17:
			n = $mul64(n, (new $Uint64(0, base)));
			n1 = (x$1 = new $Uint64(0, v), new $Uint64(n.$high + x$1.$high, n.$low + x$1.$low));
			/* if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) { */ if ((n1.$high < n.$high || (n1.$high === n.$high && n1.$low < n.$low)) || (n1.$high > maxVal.$high || (n1.$high === maxVal.$high && n1.$low > maxVal.$low))) {} else { $s = 18; continue; }
				n = new $Uint64(4294967295, 4294967295);
				err = $pkg.ErrRange;
				/* goto Error */ $s = 1; continue;
			/* } */ case 18:
			n = n1;
			i = i + (1) >> 0;
		/* } */ $s = 10; continue; case 11:
		_tmp$2 = n; _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;
		return [n, err];
		/* Error: */ case 1:
		_tmp$4 = n; _tmp$5 = new NumError.Ptr("ParseUint", s0, err); n = _tmp$4; err = _tmp$5;
		return [n, err];
		/* */ case -1: } return; }
	};
	ParseInt = $pkg.ParseInt = function(s, base, bitSize) {
		var i = new $Int64(0, 0), err = $ifaceNil, _tmp, _tmp$1, s0, neg, un, _tuple, _tmp$2, _tmp$3, cutoff, _tmp$4, x, _tmp$5, _tmp$6, x$1, _tmp$7, n, _tmp$8, _tmp$9;
		if (bitSize === 0) {
			bitSize = 32;
		}
		if (s.length === 0) {
			_tmp = new $Int64(0, 0); _tmp$1 = syntaxError("ParseInt", s); i = _tmp; err = _tmp$1;
			return [i, err];
		}
		s0 = s;
		neg = false;
		if (s.charCodeAt(0) === 43) {
			s = s.substring(1);
		} else if (s.charCodeAt(0) === 45) {
			neg = true;
			s = s.substring(1);
		}
		un = new $Uint64(0, 0);
		_tuple = ParseUint(s, base, bitSize); un = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual($assertType(err, ($ptrType(NumError))).Err, $pkg.ErrRange))) {
			$assertType(err, ($ptrType(NumError))).Func = "ParseInt";
			$assertType(err, ($ptrType(NumError))).Num = s0;
			_tmp$2 = new $Int64(0, 0); _tmp$3 = err; i = _tmp$2; err = _tmp$3;
			return [i, err];
		}
		cutoff = $shiftLeft64(new $Uint64(0, 1), ((bitSize - 1 >> 0) >>> 0));
		if (!neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low >= cutoff.$low))) {
			_tmp$4 = (x = new $Uint64(cutoff.$high - 0, cutoff.$low - 1), new $Int64(x.$high, x.$low)); _tmp$5 = rangeError("ParseInt", s0); i = _tmp$4; err = _tmp$5;
			return [i, err];
		}
		if (neg && (un.$high > cutoff.$high || (un.$high === cutoff.$high && un.$low > cutoff.$low))) {
			_tmp$6 = (x$1 = new $Int64(cutoff.$high, cutoff.$low), new $Int64(-x$1.$high, -x$1.$low)); _tmp$7 = rangeError("ParseInt", s0); i = _tmp$6; err = _tmp$7;
			return [i, err];
		}
		n = new $Int64(un.$high, un.$low);
		if (neg) {
			n = new $Int64(-n.$high, -n.$low);
		}
		_tmp$8 = n; _tmp$9 = $ifaceNil; i = _tmp$8; err = _tmp$9;
		return [i, err];
	};
	Atoi = $pkg.Atoi = function(s) {
		var i = 0, err = $ifaceNil, _tuple, i64, _tmp, _tmp$1;
		_tuple = ParseInt(s, 10, 0); i64 = _tuple[0]; err = _tuple[1];
		_tmp = ((i64.$low + ((i64.$high >> 31) * 4294967296)) >> 0); _tmp$1 = err; i = _tmp; err = _tmp$1;
		return [i, err];
	};
	decimal.Ptr.prototype.String = function() {
		var a, n, buf, w;
		a = this;
		n = 10 + a.nd >> 0;
		if (a.dp > 0) {
			n = n + (a.dp) >> 0;
		}
		if (a.dp < 0) {
			n = n + (-a.dp) >> 0;
		}
		buf = ($sliceType($Uint8)).make(n);
		w = 0;
		if (a.nd === 0) {
			return "0";
		} else if (a.dp <= 0) {
			(w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 48;
			w = w + (1) >> 0;
			(w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46;
			w = w + (1) >> 0;
			w = w + (digitZero($subslice(buf, w, (w + -a.dp >> 0)))) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new ($sliceType($Uint8))(a.d), 0, a.nd))) >> 0;
		} else if (a.dp < a.nd) {
			w = w + ($copySlice($subslice(buf, w), $subslice(new ($sliceType($Uint8))(a.d), 0, a.dp))) >> 0;
			(w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46;
			w = w + (1) >> 0;
			w = w + ($copySlice($subslice(buf, w), $subslice(new ($sliceType($Uint8))(a.d), a.dp, a.nd))) >> 0;
		} else {
			w = w + ($copySlice($subslice(buf, w), $subslice(new ($sliceType($Uint8))(a.d), 0, a.nd))) >> 0;
			w = w + (digitZero($subslice(buf, w, ((w + a.dp >> 0) - a.nd >> 0)))) >> 0;
		}
		return $bytesToString($subslice(buf, 0, w));
	};
	decimal.prototype.String = function() { return this.$val.String(); };
	digitZero = function(dst) {
		var _ref, _i, i;
		_ref = dst;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			(i < 0 || i >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + i] = 48;
			_i++;
		}
		return dst.$length;
	};
	trim = function(a) {
		var x, x$1;
		while (a.nd > 0 && ((x = a.d, x$1 = a.nd - 1 >> 0, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1])) === 48)) {
			a.nd = a.nd - (1) >> 0;
		}
		if (a.nd === 0) {
			a.dp = 0;
		}
	};
	decimal.Ptr.prototype.Assign = function(v) {
		var a, buf, n, v1, x, x$1, x$2;
		a = this;
		buf = ($arrayType($Uint8, 24)).zero(); $copy(buf, ($arrayType($Uint8, 24)).zero(), ($arrayType($Uint8, 24)));
		n = 0;
		while ((v.$high > 0 || (v.$high === 0 && v.$low > 0))) {
			v1 = $div64(v, new $Uint64(0, 10), false);
			v = (x = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x.$high, v.$low - x.$low));
			(n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = (new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24);
			n = n + (1) >> 0;
			v = v1;
		}
		a.nd = 0;
		n = n - (1) >> 0;
		while (n >= 0) {
			(x$1 = a.d, x$2 = a.nd, (x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2] = ((n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n]));
			a.nd = a.nd + (1) >> 0;
			n = n - (1) >> 0;
		}
		a.dp = a.nd;
		trim(a);
	};
	decimal.prototype.Assign = function(v) { return this.$val.Assign(v); };
	rightShift = function(a, k) {
		var r, w, n, x, c, x$1, c$1, dig, y, x$2, dig$1, y$1, x$3;
		r = 0;
		w = 0;
		n = 0;
		while (((n >> $min(k, 31)) >> 0) === 0) {
			if (r >= a.nd) {
				if (n === 0) {
					a.nd = 0;
					return;
				}
				while (((n >> $min(k, 31)) >> 0) === 0) {
					n = (((n >>> 16 << 16) * 10 >> 0) + (n << 16 >>> 16) * 10) >> 0;
					r = r + (1) >> 0;
				}
				break;
			}
			c = ((x = a.d, ((r < 0 || r >= x.length) ? $throwRuntimeError("index out of range") : x[r])) >> 0);
			n = (((((n >>> 16 << 16) * 10 >> 0) + (n << 16 >>> 16) * 10) >> 0) + c >> 0) - 48 >> 0;
			r = r + (1) >> 0;
		}
		a.dp = a.dp - ((r - 1 >> 0)) >> 0;
		while (r < a.nd) {
			c$1 = ((x$1 = a.d, ((r < 0 || r >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[r])) >> 0);
			dig = (n >> $min(k, 31)) >> 0;
			n = n - (((y = k, y < 32 ? (dig << y) : 0) >> 0)) >> 0;
			(x$2 = a.d, (w < 0 || w >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[w] = ((dig + 48 >> 0) << 24 >>> 24));
			w = w + (1) >> 0;
			n = (((((n >>> 16 << 16) * 10 >> 0) + (n << 16 >>> 16) * 10) >> 0) + c$1 >> 0) - 48 >> 0;
			r = r + (1) >> 0;
		}
		while (n > 0) {
			dig$1 = (n >> $min(k, 31)) >> 0;
			n = n - (((y$1 = k, y$1 < 32 ? (dig$1 << y$1) : 0) >> 0)) >> 0;
			if (w < 800) {
				(x$3 = a.d, (w < 0 || w >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[w] = ((dig$1 + 48 >> 0) << 24 >>> 24));
				w = w + (1) >> 0;
			} else if (dig$1 > 0) {
				a.trunc = true;
			}
			n = (((n >>> 16 << 16) * 10 >> 0) + (n << 16 >>> 16) * 10) >> 0;
		}
		a.nd = w;
		trim(a);
	};
	prefixIsLessThan = function(b, s) {
		var i;
		i = 0;
		while (i < s.length) {
			if (i >= b.$length) {
				return true;
			}
			if (!((((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]) === s.charCodeAt(i)))) {
				return ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]) < s.charCodeAt(i);
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	leftShift = function(a, k) {
		var delta, r, w, n, y, x, _q, quo, rem, x$1, _q$1, quo$1, rem$1, x$2;
		delta = ((k < 0 || k >= leftcheats.$length) ? $throwRuntimeError("index out of range") : leftcheats.$array[leftcheats.$offset + k]).delta;
		if (prefixIsLessThan($subslice(new ($sliceType($Uint8))(a.d), 0, a.nd), ((k < 0 || k >= leftcheats.$length) ? $throwRuntimeError("index out of range") : leftcheats.$array[leftcheats.$offset + k]).cutoff)) {
			delta = delta - (1) >> 0;
		}
		r = a.nd;
		w = a.nd + delta >> 0;
		n = 0;
		r = r - (1) >> 0;
		while (r >= 0) {
			n = n + (((y = k, y < 32 ? (((((x = a.d, ((r < 0 || r >= x.length) ? $throwRuntimeError("index out of range") : x[r])) >> 0) - 48 >> 0)) << y) : 0) >> 0)) >> 0;
			quo = (_q = n / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			rem = n - ((((10 >>> 16 << 16) * quo >> 0) + (10 << 16 >>> 16) * quo) >> 0) >> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$1 = a.d, (w < 0 || w >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[w] = ((rem + 48 >> 0) << 24 >>> 24));
			} else if (!((rem === 0))) {
				a.trunc = true;
			}
			n = quo;
			r = r - (1) >> 0;
		}
		while (n > 0) {
			quo$1 = (_q$1 = n / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			rem$1 = n - ((((10 >>> 16 << 16) * quo$1 >> 0) + (10 << 16 >>> 16) * quo$1) >> 0) >> 0;
			w = w - (1) >> 0;
			if (w < 800) {
				(x$2 = a.d, (w < 0 || w >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[w] = ((rem$1 + 48 >> 0) << 24 >>> 24));
			} else if (!((rem$1 === 0))) {
				a.trunc = true;
			}
			n = quo$1;
		}
		a.nd = a.nd + (delta) >> 0;
		if (a.nd >= 800) {
			a.nd = 800;
		}
		a.dp = a.dp + (delta) >> 0;
		trim(a);
	};
	decimal.Ptr.prototype.Shift = function(k) {
		var a;
		a = this;
		if (a.nd === 0) {
		} else if (k > 0) {
			while (k > 27) {
				leftShift(a, 27);
				k = k - (27) >> 0;
			}
			leftShift(a, (k >>> 0));
		} else if (k < 0) {
			while (k < -27) {
				rightShift(a, 27);
				k = k + (27) >> 0;
			}
			rightShift(a, (-k >>> 0));
		}
	};
	decimal.prototype.Shift = function(k) { return this.$val.Shift(k); };
	shouldRoundUp = function(a, nd) {
		var x, _r, x$1, x$2, x$3;
		if (nd < 0 || nd >= a.nd) {
			return false;
		}
		if (((x = a.d, ((nd < 0 || nd >= x.length) ? $throwRuntimeError("index out of range") : x[nd])) === 53) && ((nd + 1 >> 0) === a.nd)) {
			if (a.trunc) {
				return true;
			}
			return nd > 0 && !(((_r = (((x$1 = a.d, x$2 = nd - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2])) - 48 << 24 >>> 24)) % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0));
		}
		return (x$3 = a.d, ((nd < 0 || nd >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[nd])) >= 53;
	};
	decimal.Ptr.prototype.Round = function(nd) {
		var a;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		if (shouldRoundUp(a, nd)) {
			a.RoundUp(nd);
		} else {
			a.RoundDown(nd);
		}
	};
	decimal.prototype.Round = function(nd) { return this.$val.Round(nd); };
	decimal.Ptr.prototype.RoundDown = function(nd) {
		var a;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		a.nd = nd;
		trim(a);
	};
	decimal.prototype.RoundDown = function(nd) { return this.$val.RoundDown(nd); };
	decimal.Ptr.prototype.RoundUp = function(nd) {
		var a, i, x, c, _lhs, _index;
		a = this;
		if (nd < 0 || nd >= a.nd) {
			return;
		}
		i = nd - 1 >> 0;
		while (i >= 0) {
			c = (x = a.d, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i]));
			if (c < 57) {
				_lhs = a.d; _index = i; (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index] = ((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index]) + (1) << 24 >>> 24;
				a.nd = i + 1 >> 0;
				return;
			}
			i = i - (1) >> 0;
		}
		a.d[0] = 49;
		a.nd = 1;
		a.dp = a.dp + (1) >> 0;
	};
	decimal.prototype.RoundUp = function(nd) { return this.$val.RoundUp(nd); };
	decimal.Ptr.prototype.RoundedInteger = function() {
		var a, i, n, x, x$1, x$2, x$3;
		a = this;
		if (a.dp > 20) {
			return new $Uint64(4294967295, 4294967295);
		}
		i = 0;
		n = new $Uint64(0, 0);
		i = 0;
		while (i < a.dp && i < a.nd) {
			n = (x = $mul64(n, new $Uint64(0, 10)), x$1 = new $Uint64(0, ((x$2 = a.d, ((i < 0 || i >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i])) - 48 << 24 >>> 24)), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
			i = i + (1) >> 0;
		}
		while (i < a.dp) {
			n = $mul64(n, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		if (shouldRoundUp(a, a.dp)) {
			n = (x$3 = new $Uint64(0, 1), new $Uint64(n.$high + x$3.$high, n.$low + x$3.$low));
		}
		return n;
	};
	decimal.prototype.RoundedInteger = function() { return this.$val.RoundedInteger(); };
	extFloat.Ptr.prototype.floatBits = function(flt) {
		var bits = new $Uint64(0, 0), overflow = false, f, exp, n, mant, x, x$1, x$2, x$3, x$4, y, x$5, x$6, y$1, x$7, x$8, x$9, y$2, x$10;
		f = this;
		f.Normalize();
		exp = f.exp + 63 >> 0;
		if (exp < (flt.bias + 1 >> 0)) {
			n = (flt.bias + 1 >> 0) - exp >> 0;
			f.mant = $shiftRightUint64(f.mant, ((n >>> 0)));
			exp = exp + (n) >> 0;
		}
		mant = $shiftRightUint64(f.mant, ((63 - flt.mantbits >>> 0)));
		if (!((x = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, 1), ((62 - flt.mantbits >>> 0))), new $Uint64(x$1.$high & x$2.$high, (x$1.$low & x$2.$low) >>> 0)), (x.$high === 0 && x.$low === 0)))) {
			mant = (x$3 = new $Uint64(0, 1), new $Uint64(mant.$high + x$3.$high, mant.$low + x$3.$low));
		}
		if ((x$4 = $shiftLeft64(new $Uint64(0, 2), flt.mantbits), (mant.$high === x$4.$high && mant.$low === x$4.$low))) {
			mant = $shiftRightUint64(mant, (1));
			exp = exp + (1) >> 0;
		}
		if ((exp - flt.bias >> 0) >= (((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0)) {
			mant = new $Uint64(0, 0);
			exp = (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0) + flt.bias >> 0;
			overflow = true;
		} else if ((x$5 = (x$6 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high & x$6.$high, (mant.$low & x$6.$low) >>> 0)), (x$5.$high === 0 && x$5.$low === 0))) {
			exp = flt.bias;
		}
		bits = (x$7 = (x$8 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$8.$high - 0, x$8.$low - 1)), new $Uint64(mant.$high & x$7.$high, (mant.$low & x$7.$low) >>> 0));
		bits = (x$9 = $shiftLeft64(new $Uint64(0, (((exp - flt.bias >> 0)) & ((((y$2 = flt.expbits, y$2 < 32 ? (1 << y$2) : 0) >> 0) - 1 >> 0)))), flt.mantbits), new $Uint64(bits.$high | x$9.$high, (bits.$low | x$9.$low) >>> 0));
		if (f.neg) {
			bits = (x$10 = $shiftLeft64(new $Uint64(0, 1), ((flt.mantbits + flt.expbits >>> 0))), new $Uint64(bits.$high | x$10.$high, (bits.$low | x$10.$low) >>> 0));
		}
		return [bits, overflow];
	};
	extFloat.prototype.floatBits = function(flt) { return this.$val.floatBits(flt); };
	extFloat.Ptr.prototype.AssignComputeBounds = function(mant, exp, neg, flt) {
		var lower = new extFloat.Ptr(), upper = new extFloat.Ptr(), f, x, _tmp, _tmp$1, expBiased, x$1, x$2, x$3, x$4;
		f = this;
		f.mant = mant;
		f.exp = exp - (flt.mantbits >> 0) >> 0;
		f.neg = neg;
		if (f.exp <= 0 && (x = $shiftLeft64(($shiftRightUint64(mant, (-f.exp >>> 0))), (-f.exp >>> 0)), (mant.$high === x.$high && mant.$low === x.$low))) {
			f.mant = $shiftRightUint64(f.mant, ((-f.exp >>> 0)));
			f.exp = 0;
			_tmp = new extFloat.Ptr(); $copy(_tmp, f, extFloat); _tmp$1 = new extFloat.Ptr(); $copy(_tmp$1, f, extFloat); $copy(lower, _tmp, extFloat); $copy(upper, _tmp$1, extFloat);
			return [lower, upper];
		}
		expBiased = exp - flt.bias >> 0;
		$copy(upper, new extFloat.Ptr((x$1 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$1.$high + 0, x$1.$low + 1)), f.exp - 1 >> 0, f.neg), extFloat);
		if (!((x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high === x$2.$high && mant.$low === x$2.$low))) || (expBiased === 1)) {
			$copy(lower, new extFloat.Ptr((x$3 = $mul64(new $Uint64(0, 2), f.mant), new $Uint64(x$3.$high - 0, x$3.$low - 1)), f.exp - 1 >> 0, f.neg), extFloat);
		} else {
			$copy(lower, new extFloat.Ptr((x$4 = $mul64(new $Uint64(0, 4), f.mant), new $Uint64(x$4.$high - 0, x$4.$low - 1)), f.exp - 2 >> 0, f.neg), extFloat);
		}
		return [lower, upper];
	};
	extFloat.prototype.AssignComputeBounds = function(mant, exp, neg, flt) { return this.$val.AssignComputeBounds(mant, exp, neg, flt); };
	extFloat.Ptr.prototype.Normalize = function() {
		var shift = 0, f, _tmp, _tmp$1, mant, exp, x, x$1, x$2, x$3, x$4, x$5, _tmp$2, _tmp$3;
		f = this;
		_tmp = f.mant; _tmp$1 = f.exp; mant = _tmp; exp = _tmp$1;
		if ((mant.$high === 0 && mant.$low === 0)) {
			shift = 0;
			return shift;
		}
		if ((x = $shiftRightUint64(mant, 32), (x.$high === 0 && x.$low === 0))) {
			mant = $shiftLeft64(mant, (32));
			exp = exp - (32) >> 0;
		}
		if ((x$1 = $shiftRightUint64(mant, 48), (x$1.$high === 0 && x$1.$low === 0))) {
			mant = $shiftLeft64(mant, (16));
			exp = exp - (16) >> 0;
		}
		if ((x$2 = $shiftRightUint64(mant, 56), (x$2.$high === 0 && x$2.$low === 0))) {
			mant = $shiftLeft64(mant, (8));
			exp = exp - (8) >> 0;
		}
		if ((x$3 = $shiftRightUint64(mant, 60), (x$3.$high === 0 && x$3.$low === 0))) {
			mant = $shiftLeft64(mant, (4));
			exp = exp - (4) >> 0;
		}
		if ((x$4 = $shiftRightUint64(mant, 62), (x$4.$high === 0 && x$4.$low === 0))) {
			mant = $shiftLeft64(mant, (2));
			exp = exp - (2) >> 0;
		}
		if ((x$5 = $shiftRightUint64(mant, 63), (x$5.$high === 0 && x$5.$low === 0))) {
			mant = $shiftLeft64(mant, (1));
			exp = exp - (1) >> 0;
		}
		shift = ((f.exp - exp >> 0) >>> 0);
		_tmp$2 = mant; _tmp$3 = exp; f.mant = _tmp$2; f.exp = _tmp$3;
		return shift;
	};
	extFloat.prototype.Normalize = function() { return this.$val.Normalize(); };
	extFloat.Ptr.prototype.Multiply = function(g) {
		var f, _tmp, _tmp$1, fhi, flo, _tmp$2, _tmp$3, ghi, glo, cross1, cross2, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, rem, x$8, x$9, x$10;
		f = this;
		_tmp = $shiftRightUint64(f.mant, 32); _tmp$1 = new $Uint64(0, (f.mant.$low >>> 0)); fhi = _tmp; flo = _tmp$1;
		_tmp$2 = $shiftRightUint64(g.mant, 32); _tmp$3 = new $Uint64(0, (g.mant.$low >>> 0)); ghi = _tmp$2; glo = _tmp$3;
		cross1 = $mul64(fhi, glo);
		cross2 = $mul64(flo, ghi);
		f.mant = (x = (x$1 = $mul64(fhi, ghi), x$2 = $shiftRightUint64(cross1, 32), new $Uint64(x$1.$high + x$2.$high, x$1.$low + x$2.$low)), x$3 = $shiftRightUint64(cross2, 32), new $Uint64(x.$high + x$3.$high, x.$low + x$3.$low));
		rem = (x$4 = (x$5 = new $Uint64(0, (cross1.$low >>> 0)), x$6 = new $Uint64(0, (cross2.$low >>> 0)), new $Uint64(x$5.$high + x$6.$high, x$5.$low + x$6.$low)), x$7 = $shiftRightUint64(($mul64(flo, glo)), 32), new $Uint64(x$4.$high + x$7.$high, x$4.$low + x$7.$low));
		rem = (x$8 = new $Uint64(0, 2147483648), new $Uint64(rem.$high + x$8.$high, rem.$low + x$8.$low));
		f.mant = (x$9 = f.mant, x$10 = ($shiftRightUint64(rem, 32)), new $Uint64(x$9.$high + x$10.$high, x$9.$low + x$10.$low));
		f.exp = (f.exp + g.exp >> 0) + 64 >> 0;
	};
	extFloat.prototype.Multiply = function(g) { return this.$val.Multiply(g); };
	extFloat.Ptr.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) {
		var ok = false, f, errors$1, _q, i, _r, adjExp, x, x$1, shift, y, denormalExp, extrabits, halfway, x$2, x$3, x$4, mant_extra, x$5, x$6, x$7, x$8, x$9, x$10, x$11, x$12;
		f = this;
		errors$1 = 0;
		if (trunc) {
			errors$1 = errors$1 + (4) >> 0;
		}
		f.mant = mantissa;
		f.exp = 0;
		f.neg = neg;
		i = (_q = ((exp10 - -348 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (exp10 < -348 || i >= 87) {
			ok = false;
			return ok;
		}
		adjExp = (_r = ((exp10 - -348 >> 0)) % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		if (adjExp < 19 && (x = (x$1 = 19 - adjExp >> 0, ((x$1 < 0 || x$1 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$1])), (mantissa.$high < x.$high || (mantissa.$high === x.$high && mantissa.$low < x.$low)))) {
			f.mant = $mul64(f.mant, (((adjExp < 0 || adjExp >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[adjExp])));
			f.Normalize();
		} else {
			f.Normalize();
			f.Multiply($clone(((adjExp < 0 || adjExp >= smallPowersOfTen.length) ? $throwRuntimeError("index out of range") : smallPowersOfTen[adjExp]), extFloat));
			errors$1 = errors$1 + (4) >> 0;
		}
		f.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]), extFloat));
		if (errors$1 > 0) {
			errors$1 = errors$1 + (1) >> 0;
		}
		errors$1 = errors$1 + (4) >> 0;
		shift = f.Normalize();
		errors$1 = (y = (shift), y < 32 ? (errors$1 << y) : 0) >> 0;
		denormalExp = flt.bias - 63 >> 0;
		extrabits = 0;
		if (f.exp <= denormalExp) {
			extrabits = (((63 - flt.mantbits >>> 0) + 1 >>> 0) + ((denormalExp - f.exp >> 0) >>> 0) >>> 0);
		} else {
			extrabits = (63 - flt.mantbits >>> 0);
		}
		halfway = $shiftLeft64(new $Uint64(0, 1), ((extrabits - 1 >>> 0)));
		mant_extra = (x$2 = f.mant, x$3 = (x$4 = $shiftLeft64(new $Uint64(0, 1), extrabits), new $Uint64(x$4.$high - 0, x$4.$low - 1)), new $Uint64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		if ((x$5 = (x$6 = new $Int64(halfway.$high, halfway.$low), x$7 = new $Int64(0, errors$1), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low)), x$8 = new $Int64(mant_extra.$high, mant_extra.$low), (x$5.$high < x$8.$high || (x$5.$high === x$8.$high && x$5.$low < x$8.$low))) && (x$9 = new $Int64(mant_extra.$high, mant_extra.$low), x$10 = (x$11 = new $Int64(halfway.$high, halfway.$low), x$12 = new $Int64(0, errors$1), new $Int64(x$11.$high + x$12.$high, x$11.$low + x$12.$low)), (x$9.$high < x$10.$high || (x$9.$high === x$10.$high && x$9.$low < x$10.$low)))) {
			ok = false;
			return ok;
		}
		ok = true;
		return ok;
	};
	extFloat.prototype.AssignDecimal = function(mantissa, exp10, neg, trunc, flt) { return this.$val.AssignDecimal(mantissa, exp10, neg, trunc, flt); };
	extFloat.Ptr.prototype.frexp10 = function() {
		var exp10 = 0, index = 0, f, _q, x, approxExp10, _q$1, i, exp, _tmp, _tmp$1;
		f = this;
		approxExp10 = (_q = (x = (-46 - f.exp >> 0), (((x >>> 16 << 16) * 28 >> 0) + (x << 16 >>> 16) * 28) >> 0) / 93, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		i = (_q$1 = ((approxExp10 - -348 >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		Loop:
		while (true) {
			exp = (f.exp + ((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]).exp >> 0) + 64 >> 0;
			if (exp < -60) {
				i = i + (1) >> 0;
			} else if (exp > -32) {
				i = i - (1) >> 0;
			} else {
				break Loop;
			}
		}
		f.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]), extFloat));
		_tmp = -((-348 + ((((i >>> 16 << 16) * 8 >> 0) + (i << 16 >>> 16) * 8) >> 0) >> 0)); _tmp$1 = i; exp10 = _tmp; index = _tmp$1;
		return [exp10, index];
	};
	extFloat.prototype.frexp10 = function() { return this.$val.frexp10(); };
	frexp10Many = function(a, b, c) {
		var exp10 = 0, _tuple, i;
		_tuple = c.frexp10(); exp10 = _tuple[0]; i = _tuple[1];
		a.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]), extFloat));
		b.Multiply($clone(((i < 0 || i >= powersOfTen.length) ? $throwRuntimeError("index out of range") : powersOfTen[i]), extFloat));
		return exp10;
	};
	extFloat.Ptr.prototype.FixedDecimal = function(d, n) {
		var f, x, _tuple, exp10, shift, integer, x$1, x$2, fraction, nonAsciiName, needed, integerDigits, pow10, _tmp, _tmp$1, i, pow, x$3, rest, x$4, _q, x$5, buf, pos, v, _q$1, v1, i$1, x$6, x$7, nd, x$8, x$9, digit, x$10, x$11, x$12, ok, i$2, x$13;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if (n === 0) {
			$panic(new $String("strconv: internal error: extFloat.FixedDecimal called with n == 0"));
		}
		f.Normalize();
		_tuple = f.frexp10(); exp10 = _tuple[0];
		shift = (-f.exp >>> 0);
		integer = ($shiftRightUint64(f.mant, shift).$low >>> 0);
		fraction = (x$1 = f.mant, x$2 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		nonAsciiName = new $Uint64(0, 1);
		needed = n;
		integerDigits = 0;
		pow10 = new $Uint64(0, 1);
		_tmp = 0; _tmp$1 = new $Uint64(0, 1); i = _tmp; pow = _tmp$1;
		while (i < 20) {
			if ((x$3 = new $Uint64(0, integer), (pow.$high > x$3.$high || (pow.$high === x$3.$high && pow.$low > x$3.$low)))) {
				integerDigits = i;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i = i + (1) >> 0;
		}
		rest = integer;
		if (integerDigits > needed) {
			pow10 = (x$4 = integerDigits - needed >> 0, ((x$4 < 0 || x$4 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$4]));
			integer = (_q = integer / ((pow10.$low >>> 0)), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			rest = rest - ((x$5 = (pow10.$low >>> 0), (((integer >>> 16 << 16) * x$5 >>> 0) + (integer << 16 >>> 16) * x$5) >>> 0)) >>> 0;
		} else {
			rest = 0;
		}
		buf = ($arrayType($Uint8, 32)).zero(); $copy(buf, ($arrayType($Uint8, 32)).zero(), ($arrayType($Uint8, 32)));
		pos = 32;
		v = integer;
		while (v > 0) {
			v1 = (_q$1 = v / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
			v = v - (((((10 >>> 16 << 16) * v1 >>> 0) + (10 << 16 >>> 16) * v1) >>> 0)) >>> 0;
			pos = pos - (1) >> 0;
			(pos < 0 || pos >= buf.length) ? $throwRuntimeError("index out of range") : buf[pos] = ((v + 48 >>> 0) << 24 >>> 24);
			v = v1;
		}
		i$1 = pos;
		while (i$1 < 32) {
			(x$6 = d.d, x$7 = i$1 - pos >> 0, (x$7 < 0 || x$7 >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + x$7] = ((i$1 < 0 || i$1 >= buf.length) ? $throwRuntimeError("index out of range") : buf[i$1]));
			i$1 = i$1 + (1) >> 0;
		}
		nd = 32 - pos >> 0;
		d.nd = nd;
		d.dp = integerDigits + exp10 >> 0;
		needed = needed - (nd) >> 0;
		if (needed > 0) {
			if (!((rest === 0)) || !((pow10.$high === 0 && pow10.$low === 1))) {
				$panic(new $String("strconv: internal error, rest != 0 but needed > 0"));
			}
			while (needed > 0) {
				fraction = $mul64(fraction, (new $Uint64(0, 10)));
				nonAsciiName = $mul64(nonAsciiName, (new $Uint64(0, 10)));
				if ((x$8 = $mul64(new $Uint64(0, 2), nonAsciiName), x$9 = $shiftLeft64(new $Uint64(0, 1), shift), (x$8.$high > x$9.$high || (x$8.$high === x$9.$high && x$8.$low > x$9.$low)))) {
					return false;
				}
				digit = $shiftRightUint64(fraction, shift);
				(x$10 = d.d, (nd < 0 || nd >= x$10.$length) ? $throwRuntimeError("index out of range") : x$10.$array[x$10.$offset + nd] = (new $Uint64(digit.$high + 0, digit.$low + 48).$low << 24 >>> 24));
				fraction = (x$11 = $shiftLeft64(digit, shift), new $Uint64(fraction.$high - x$11.$high, fraction.$low - x$11.$low));
				nd = nd + (1) >> 0;
				needed = needed - (1) >> 0;
			}
			d.nd = nd;
		}
		ok = adjustLastDigitFixed(d, (x$12 = $shiftLeft64(new $Uint64(0, rest), shift), new $Uint64(x$12.$high | fraction.$high, (x$12.$low | fraction.$low) >>> 0)), pow10, shift, nonAsciiName);
		if (!ok) {
			return false;
		}
		i$2 = d.nd - 1 >> 0;
		while (i$2 >= 0) {
			if (!(((x$13 = d.d, ((i$2 < 0 || i$2 >= x$13.$length) ? $throwRuntimeError("index out of range") : x$13.$array[x$13.$offset + i$2])) === 48))) {
				d.nd = i$2 + 1 >> 0;
				break;
			}
			i$2 = i$2 - (1) >> 0;
		}
		return true;
	};
	extFloat.prototype.FixedDecimal = function(d, n) { return this.$val.FixedDecimal(d, n); };
	adjustLastDigitFixed = function(d, num, den, shift, nonAsciiName) {
		var x, x$1, x$2, x$3, x$4, x$5, x$6, i, x$7, x$8, _lhs, _index;
		if ((x = $shiftLeft64(den, shift), (num.$high > x.$high || (num.$high === x.$high && num.$low > x.$low)))) {
			$panic(new $String("strconv: num > den<<shift in adjustLastDigitFixed"));
		}
		if ((x$1 = $mul64(new $Uint64(0, 2), nonAsciiName), x$2 = $shiftLeft64(den, shift), (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
			$panic(new $String("strconv: \xCE\xB5 > (den<<shift)/2"));
		}
		if ((x$3 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high + nonAsciiName.$high, num.$low + nonAsciiName.$low))), x$4 = $shiftLeft64(den, shift), (x$3.$high < x$4.$high || (x$3.$high === x$4.$high && x$3.$low < x$4.$low)))) {
			return true;
		}
		if ((x$5 = $mul64(new $Uint64(0, 2), (new $Uint64(num.$high - nonAsciiName.$high, num.$low - nonAsciiName.$low))), x$6 = $shiftLeft64(den, shift), (x$5.$high > x$6.$high || (x$5.$high === x$6.$high && x$5.$low > x$6.$low)))) {
			i = d.nd - 1 >> 0;
			while (i >= 0) {
				if ((x$7 = d.d, ((i < 0 || i >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + i])) === 57) {
					d.nd = d.nd - (1) >> 0;
				} else {
					break;
				}
				i = i - (1) >> 0;
			}
			if (i < 0) {
				(x$8 = d.d, (0 < 0 || 0 >= x$8.$length) ? $throwRuntimeError("index out of range") : x$8.$array[x$8.$offset + 0] = 49);
				d.nd = 1;
				d.dp = d.dp + (1) >> 0;
			} else {
				_lhs = d.d; _index = i; (_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index] = ((_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index]) + (1) << 24 >>> 24;
			}
			return true;
		}
		return false;
	};
	extFloat.Ptr.prototype.ShortestDecimal = function(d, lower, upper) {
		var f, x, buf, n, v, v1, x$1, nd, i, x$2, x$3, _tmp, _tmp$1, x$4, x$5, exp10, x$6, x$7, x$8, x$9, shift, integer, x$10, x$11, fraction, x$12, x$13, allowance, x$14, x$15, targetDiff, integerDigits, _tmp$2, _tmp$3, i$1, pow, x$16, i$2, x$17, pow$1, _q, digit, x$18, x$19, x$20, currentDiff, digit$1, multiplier, x$21, x$22, x$23, x$24;
		f = this;
		if ((x = f.mant, (x.$high === 0 && x.$low === 0))) {
			d.nd = 0;
			d.dp = 0;
			d.neg = f.neg;
			return true;
		}
		if ((f.exp === 0) && $equal(lower, f, extFloat) && $equal(lower, upper, extFloat)) {
			buf = ($arrayType($Uint8, 24)).zero(); $copy(buf, ($arrayType($Uint8, 24)).zero(), ($arrayType($Uint8, 24)));
			n = 23;
			v = f.mant;
			while ((v.$high > 0 || (v.$high === 0 && v.$low > 0))) {
				v1 = $div64(v, new $Uint64(0, 10), false);
				v = (x$1 = $mul64(new $Uint64(0, 10), v1), new $Uint64(v.$high - x$1.$high, v.$low - x$1.$low));
				(n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = (new $Uint64(v.$high + 0, v.$low + 48).$low << 24 >>> 24);
				n = n - (1) >> 0;
				v = v1;
			}
			nd = (24 - n >> 0) - 1 >> 0;
			i = 0;
			while (i < nd) {
				(x$3 = d.d, (i < 0 || i >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i] = (x$2 = (n + 1 >> 0) + i >> 0, ((x$2 < 0 || x$2 >= buf.length) ? $throwRuntimeError("index out of range") : buf[x$2])));
				i = i + (1) >> 0;
			}
			_tmp = nd; _tmp$1 = nd; d.nd = _tmp; d.dp = _tmp$1;
			while (d.nd > 0 && ((x$4 = d.d, x$5 = d.nd - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5])) === 48)) {
				d.nd = d.nd - (1) >> 0;
			}
			if (d.nd === 0) {
				d.dp = 0;
			}
			d.neg = f.neg;
			return true;
		}
		upper.Normalize();
		if (f.exp > upper.exp) {
			f.mant = $shiftLeft64(f.mant, (((f.exp - upper.exp >> 0) >>> 0)));
			f.exp = upper.exp;
		}
		if (lower.exp > upper.exp) {
			lower.mant = $shiftLeft64(lower.mant, (((lower.exp - upper.exp >> 0) >>> 0)));
			lower.exp = upper.exp;
		}
		exp10 = frexp10Many(lower, f, upper);
		upper.mant = (x$6 = upper.mant, x$7 = new $Uint64(0, 1), new $Uint64(x$6.$high + x$7.$high, x$6.$low + x$7.$low));
		lower.mant = (x$8 = lower.mant, x$9 = new $Uint64(0, 1), new $Uint64(x$8.$high - x$9.$high, x$8.$low - x$9.$low));
		shift = (-upper.exp >>> 0);
		integer = ($shiftRightUint64(upper.mant, shift).$low >>> 0);
		fraction = (x$10 = upper.mant, x$11 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$10.$high - x$11.$high, x$10.$low - x$11.$low));
		allowance = (x$12 = upper.mant, x$13 = lower.mant, new $Uint64(x$12.$high - x$13.$high, x$12.$low - x$13.$low));
		targetDiff = (x$14 = upper.mant, x$15 = f.mant, new $Uint64(x$14.$high - x$15.$high, x$14.$low - x$15.$low));
		integerDigits = 0;
		_tmp$2 = 0; _tmp$3 = new $Uint64(0, 1); i$1 = _tmp$2; pow = _tmp$3;
		while (i$1 < 20) {
			if ((x$16 = new $Uint64(0, integer), (pow.$high > x$16.$high || (pow.$high === x$16.$high && pow.$low > x$16.$low)))) {
				integerDigits = i$1;
				break;
			}
			pow = $mul64(pow, (new $Uint64(0, 10)));
			i$1 = i$1 + (1) >> 0;
		}
		i$2 = 0;
		while (i$2 < integerDigits) {
			pow$1 = (x$17 = (integerDigits - i$2 >> 0) - 1 >> 0, ((x$17 < 0 || x$17 >= uint64pow10.length) ? $throwRuntimeError("index out of range") : uint64pow10[x$17]));
			digit = (_q = integer / (pow$1.$low >>> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			(x$18 = d.d, (i$2 < 0 || i$2 >= x$18.$length) ? $throwRuntimeError("index out of range") : x$18.$array[x$18.$offset + i$2] = ((digit + 48 >>> 0) << 24 >>> 24));
			integer = integer - ((x$19 = (pow$1.$low >>> 0), (((digit >>> 16 << 16) * x$19 >>> 0) + (digit << 16 >>> 16) * x$19) >>> 0)) >>> 0;
			currentDiff = (x$20 = $shiftLeft64(new $Uint64(0, integer), shift), new $Uint64(x$20.$high + fraction.$high, x$20.$low + fraction.$low));
			if ((currentDiff.$high < allowance.$high || (currentDiff.$high === allowance.$high && currentDiff.$low < allowance.$low))) {
				d.nd = i$2 + 1 >> 0;
				d.dp = integerDigits + exp10 >> 0;
				d.neg = f.neg;
				return adjustLastDigit(d, currentDiff, targetDiff, allowance, $shiftLeft64(pow$1, shift), new $Uint64(0, 2));
			}
			i$2 = i$2 + (1) >> 0;
		}
		d.nd = integerDigits;
		d.dp = d.nd + exp10 >> 0;
		d.neg = f.neg;
		digit$1 = 0;
		multiplier = new $Uint64(0, 1);
		while (true) {
			fraction = $mul64(fraction, (new $Uint64(0, 10)));
			multiplier = $mul64(multiplier, (new $Uint64(0, 10)));
			digit$1 = ($shiftRightUint64(fraction, shift).$low >> 0);
			(x$21 = d.d, x$22 = d.nd, (x$22 < 0 || x$22 >= x$21.$length) ? $throwRuntimeError("index out of range") : x$21.$array[x$21.$offset + x$22] = ((digit$1 + 48 >> 0) << 24 >>> 24));
			d.nd = d.nd + (1) >> 0;
			fraction = (x$23 = $shiftLeft64(new $Uint64(0, digit$1), shift), new $Uint64(fraction.$high - x$23.$high, fraction.$low - x$23.$low));
			if ((x$24 = $mul64(allowance, multiplier), (fraction.$high < x$24.$high || (fraction.$high === x$24.$high && fraction.$low < x$24.$low)))) {
				return adjustLastDigit(d, fraction, $mul64(targetDiff, multiplier), $mul64(allowance, multiplier), $shiftLeft64(new $Uint64(0, 1), shift), $mul64(multiplier, new $Uint64(0, 2)));
			}
		}
	};
	extFloat.prototype.ShortestDecimal = function(d, lower, upper) { return this.$val.ShortestDecimal(d, lower, upper); };
	adjustLastDigit = function(d, currentDiff, targetDiff, maxDiff, ulpDecimal, ulpBinary) {
		var x, x$1, x$2, x$3, _lhs, _index, x$4, x$5, x$6, x$7, x$8, x$9, x$10;
		if ((x = $mul64(new $Uint64(0, 2), ulpBinary), (ulpDecimal.$high < x.$high || (ulpDecimal.$high === x.$high && ulpDecimal.$low < x.$low)))) {
			return false;
		}
		while ((x$1 = (x$2 = (x$3 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(currentDiff.$high + x$3.$high, currentDiff.$low + x$3.$low)), new $Uint64(x$2.$high + ulpBinary.$high, x$2.$low + ulpBinary.$low)), (x$1.$high < targetDiff.$high || (x$1.$high === targetDiff.$high && x$1.$low < targetDiff.$low)))) {
			_lhs = d.d; _index = d.nd - 1 >> 0; (_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index] = ((_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index]) - (1) << 24 >>> 24;
			currentDiff = (x$4 = ulpDecimal, new $Uint64(currentDiff.$high + x$4.$high, currentDiff.$low + x$4.$low));
		}
		if ((x$5 = new $Uint64(currentDiff.$high + ulpDecimal.$high, currentDiff.$low + ulpDecimal.$low), x$6 = (x$7 = (x$8 = $div64(ulpDecimal, new $Uint64(0, 2), false), new $Uint64(targetDiff.$high + x$8.$high, targetDiff.$low + x$8.$low)), new $Uint64(x$7.$high + ulpBinary.$high, x$7.$low + ulpBinary.$low)), (x$5.$high < x$6.$high || (x$5.$high === x$6.$high && x$5.$low <= x$6.$low)))) {
			return false;
		}
		if ((currentDiff.$high < ulpBinary.$high || (currentDiff.$high === ulpBinary.$high && currentDiff.$low < ulpBinary.$low)) || (x$9 = new $Uint64(maxDiff.$high - ulpBinary.$high, maxDiff.$low - ulpBinary.$low), (currentDiff.$high > x$9.$high || (currentDiff.$high === x$9.$high && currentDiff.$low > x$9.$low)))) {
			return false;
		}
		if ((d.nd === 1) && ((x$10 = d.d, ((0 < 0 || 0 >= x$10.$length) ? $throwRuntimeError("index out of range") : x$10.$array[x$10.$offset + 0])) === 48)) {
			d.nd = 0;
			d.dp = 0;
		}
		return true;
	};
	FormatFloat = $pkg.FormatFloat = function(f, fmt, prec, bitSize) {
		return $bytesToString(genericFtoa(($sliceType($Uint8)).make(0, max(prec + 4 >> 0, 24)), f, fmt, prec, bitSize));
	};
	AppendFloat = $pkg.AppendFloat = function(dst, f, fmt, prec, bitSize) {
		return genericFtoa(dst, f, fmt, prec, bitSize);
	};
	genericFtoa = function(dst, val, fmt, prec, bitSize) {
		var bits, flt, _ref, x, neg, y, exp, x$1, x$2, mant, _ref$1, y$1, s, x$3, digs, ok, shortest, f, _tuple, lower, upper, buf, _ref$2, digits, _ref$3, buf$1, f$1;
		bits = new $Uint64(0, 0);
		flt = ($ptrType(floatInfo)).nil;
		_ref = bitSize;
		if (_ref === 32) {
			bits = new $Uint64(0, math.Float32bits(val));
			flt = float32info;
		} else if (_ref === 64) {
			bits = math.Float64bits(val);
			flt = float64info;
		} else {
			$panic(new $String("strconv: illegal AppendFloat/FormatFloat bitSize"));
		}
		neg = !((x = $shiftRightUint64(bits, ((flt.expbits + flt.mantbits >>> 0))), (x.$high === 0 && x.$low === 0)));
		exp = ($shiftRightUint64(bits, flt.mantbits).$low >> 0) & ((((y = flt.expbits, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0));
		mant = (x$1 = (x$2 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(x$2.$high - 0, x$2.$low - 1)), new $Uint64(bits.$high & x$1.$high, (bits.$low & x$1.$low) >>> 0));
		_ref$1 = exp;
		if (_ref$1 === (((y$1 = flt.expbits, y$1 < 32 ? (1 << y$1) : 0) >> 0) - 1 >> 0)) {
			s = "";
			if (!((mant.$high === 0 && mant.$low === 0))) {
				s = "NaN";
			} else if (neg) {
				s = "-Inf";
			} else {
				s = "+Inf";
			}
			return $appendSlice(dst, new ($sliceType($Uint8))($stringToBytes(s)));
		} else if (_ref$1 === 0) {
			exp = exp + (1) >> 0;
		} else {
			mant = (x$3 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), new $Uint64(mant.$high | x$3.$high, (mant.$low | x$3.$low) >>> 0));
		}
		exp = exp + (flt.bias) >> 0;
		if (fmt === 98) {
			return fmtB(dst, neg, mant, exp, flt);
		}
		if (!optimize) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		digs = new decimalSlice.Ptr(); $copy(digs, new decimalSlice.Ptr(), decimalSlice);
		ok = false;
		shortest = prec < 0;
		if (shortest) {
			f = new extFloat.Ptr();
			_tuple = f.AssignComputeBounds(mant, exp, neg, flt); lower = new extFloat.Ptr(); $copy(lower, _tuple[0], extFloat); upper = new extFloat.Ptr(); $copy(upper, _tuple[1], extFloat);
			buf = ($arrayType($Uint8, 32)).zero(); $copy(buf, ($arrayType($Uint8, 32)).zero(), ($arrayType($Uint8, 32)));
			digs.d = new ($sliceType($Uint8))(buf);
			ok = f.ShortestDecimal(digs, lower, upper);
			if (!ok) {
				return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
			}
			_ref$2 = fmt;
			if (_ref$2 === 101 || _ref$2 === 69) {
				prec = digs.nd - 1 >> 0;
			} else if (_ref$2 === 102) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if (_ref$2 === 103 || _ref$2 === 71) {
				prec = digs.nd;
			}
		} else if (!((fmt === 102))) {
			digits = prec;
			_ref$3 = fmt;
			if (_ref$3 === 101 || _ref$3 === 69) {
				digits = digits + (1) >> 0;
			} else if (_ref$3 === 103 || _ref$3 === 71) {
				if (prec === 0) {
					prec = 1;
				}
				digits = prec;
			}
			if (digits <= 15) {
				buf$1 = ($arrayType($Uint8, 24)).zero(); $copy(buf$1, ($arrayType($Uint8, 24)).zero(), ($arrayType($Uint8, 24)));
				digs.d = new ($sliceType($Uint8))(buf$1);
				f$1 = new extFloat.Ptr(mant, exp - (flt.mantbits >> 0) >> 0, neg);
				ok = f$1.FixedDecimal(digs, digits);
			}
		}
		if (!ok) {
			return bigFtoa(dst, prec, fmt, neg, mant, exp, flt);
		}
		return formatDigits(dst, shortest, neg, $clone(digs, decimalSlice), prec, fmt);
	};
	bigFtoa = function(dst, prec, fmt, neg, mant, exp, flt) {
		var d, digs, shortest, _ref, _ref$1;
		d = new decimal.Ptr();
		d.Assign(mant);
		d.Shift(exp - (flt.mantbits >> 0) >> 0);
		digs = new decimalSlice.Ptr(); $copy(digs, new decimalSlice.Ptr(), decimalSlice);
		shortest = prec < 0;
		if (shortest) {
			roundShortest(d, mant, exp, flt);
			$copy(digs, new decimalSlice.Ptr(new ($sliceType($Uint8))(d.d), d.nd, d.dp, false), decimalSlice);
			_ref = fmt;
			if (_ref === 101 || _ref === 69) {
				prec = digs.nd - 1 >> 0;
			} else if (_ref === 102) {
				prec = max(digs.nd - digs.dp >> 0, 0);
			} else if (_ref === 103 || _ref === 71) {
				prec = digs.nd;
			}
		} else {
			_ref$1 = fmt;
			if (_ref$1 === 101 || _ref$1 === 69) {
				d.Round(prec + 1 >> 0);
			} else if (_ref$1 === 102) {
				d.Round(d.dp + prec >> 0);
			} else if (_ref$1 === 103 || _ref$1 === 71) {
				if (prec === 0) {
					prec = 1;
				}
				d.Round(prec);
			}
			$copy(digs, new decimalSlice.Ptr(new ($sliceType($Uint8))(d.d), d.nd, d.dp, false), decimalSlice);
		}
		return formatDigits(dst, shortest, neg, $clone(digs, decimalSlice), prec, fmt);
	};
	formatDigits = function(dst, shortest, neg, digs, prec, fmt) {
		var _ref, eprec, exp;
		_ref = fmt;
		if (_ref === 101 || _ref === 69) {
			return fmtE(dst, neg, $clone(digs, decimalSlice), prec, fmt);
		} else if (_ref === 102) {
			return fmtF(dst, neg, $clone(digs, decimalSlice), prec);
		} else if (_ref === 103 || _ref === 71) {
			eprec = prec;
			if (eprec > digs.nd && digs.nd >= digs.dp) {
				eprec = digs.nd;
			}
			if (shortest) {
				eprec = 6;
			}
			exp = digs.dp - 1 >> 0;
			if (exp < -4 || exp >= eprec) {
				if (prec > digs.nd) {
					prec = digs.nd;
				}
				return fmtE(dst, neg, $clone(digs, decimalSlice), prec - 1 >> 0, (fmt + 101 << 24 >>> 24) - 103 << 24 >>> 24);
			}
			if (prec > digs.dp) {
				prec = digs.nd;
			}
			return fmtF(dst, neg, $clone(digs, decimalSlice), max(prec - digs.dp >> 0, 0));
		}
		return $append(dst, 37, fmt);
	};
	roundShortest = function(d, mant, exp, flt) {
		var minexp, x, x$1, upper, x$2, mantlo, explo, x$3, x$4, lower, x$5, x$6, inclusive, i, _tmp, _tmp$1, _tmp$2, l, m, u, x$7, x$8, x$9, okdown, okup;
		if ((mant.$high === 0 && mant.$low === 0)) {
			d.nd = 0;
			return;
		}
		minexp = flt.bias + 1 >> 0;
		if (exp > minexp && (x = (d.dp - d.nd >> 0), (((332 >>> 16 << 16) * x >> 0) + (332 << 16 >>> 16) * x) >> 0) >= (x$1 = (exp - (flt.mantbits >> 0) >> 0), (((100 >>> 16 << 16) * x$1 >> 0) + (100 << 16 >>> 16) * x$1) >> 0)) {
			return;
		}
		upper = new decimal.Ptr();
		upper.Assign((x$2 = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x$2.$high + 0, x$2.$low + 1)));
		upper.Shift((exp - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		mantlo = new $Uint64(0, 0);
		explo = 0;
		if ((x$3 = $shiftLeft64(new $Uint64(0, 1), flt.mantbits), (mant.$high > x$3.$high || (mant.$high === x$3.$high && mant.$low > x$3.$low))) || (exp === minexp)) {
			mantlo = new $Uint64(mant.$high - 0, mant.$low - 1);
			explo = exp;
		} else {
			mantlo = (x$4 = $mul64(mant, new $Uint64(0, 2)), new $Uint64(x$4.$high - 0, x$4.$low - 1));
			explo = exp - 1 >> 0;
		}
		lower = new decimal.Ptr();
		lower.Assign((x$5 = $mul64(mantlo, new $Uint64(0, 2)), new $Uint64(x$5.$high + 0, x$5.$low + 1)));
		lower.Shift((explo - (flt.mantbits >> 0) >> 0) - 1 >> 0);
		inclusive = (x$6 = $div64(mant, new $Uint64(0, 2), true), (x$6.$high === 0 && x$6.$low === 0));
		i = 0;
		while (i < d.nd) {
			_tmp = 0; _tmp$1 = 0; _tmp$2 = 0; l = _tmp; m = _tmp$1; u = _tmp$2;
			if (i < lower.nd) {
				l = (x$7 = lower.d, ((i < 0 || i >= x$7.length) ? $throwRuntimeError("index out of range") : x$7[i]));
			} else {
				l = 48;
			}
			m = (x$8 = d.d, ((i < 0 || i >= x$8.length) ? $throwRuntimeError("index out of range") : x$8[i]));
			if (i < upper.nd) {
				u = (x$9 = upper.d, ((i < 0 || i >= x$9.length) ? $throwRuntimeError("index out of range") : x$9[i]));
			} else {
				u = 48;
			}
			okdown = !((l === m)) || (inclusive && (l === m) && ((i + 1 >> 0) === lower.nd));
			okup = !((m === u)) && (inclusive || (m + 1 << 24 >>> 24) < u || (i + 1 >> 0) < upper.nd);
			if (okdown && okup) {
				d.Round(i + 1 >> 0);
				return;
			} else if (okdown) {
				d.RoundDown(i + 1 >> 0);
				return;
			} else if (okup) {
				d.RoundUp(i + 1 >> 0);
				return;
			}
			i = i + (1) >> 0;
		}
	};
	fmtE = function(dst, neg, d, prec, fmt) {
		var ch, x, i, m, x$1, exp, buf, i$1, _r, _q, _ref;
		if (neg) {
			dst = $append(dst, 45);
		}
		ch = 48;
		if (!((d.nd === 0))) {
			ch = (x = d.d, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		}
		dst = $append(dst, ch);
		if (prec > 0) {
			dst = $append(dst, 46);
			i = 1;
			m = ((d.nd + prec >> 0) + 1 >> 0) - max(d.nd, prec + 1 >> 0) >> 0;
			while (i < m) {
				dst = $append(dst, (x$1 = d.d, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])));
				i = i + (1) >> 0;
			}
			while (i <= prec) {
				dst = $append(dst, 48);
				i = i + (1) >> 0;
			}
		}
		dst = $append(dst, fmt);
		exp = d.dp - 1 >> 0;
		if (d.nd === 0) {
			exp = 0;
		}
		if (exp < 0) {
			ch = 45;
			exp = -exp;
		} else {
			ch = 43;
		}
		dst = $append(dst, ch);
		buf = ($arrayType($Uint8, 3)).zero(); $copy(buf, ($arrayType($Uint8, 3)).zero(), ($arrayType($Uint8, 3)));
		i$1 = 3;
		while (exp >= 10) {
			i$1 = i$1 - (1) >> 0;
			(i$1 < 0 || i$1 >= buf.length) ? $throwRuntimeError("index out of range") : buf[i$1] = (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >> 0) << 24 >>> 24);
			exp = (_q = exp / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		i$1 = i$1 - (1) >> 0;
		(i$1 < 0 || i$1 >= buf.length) ? $throwRuntimeError("index out of range") : buf[i$1] = ((exp + 48 >> 0) << 24 >>> 24);
		_ref = i$1;
		if (_ref === 0) {
			dst = $append(dst, buf[0], buf[1], buf[2]);
		} else if (_ref === 1) {
			dst = $append(dst, buf[1], buf[2]);
		} else if (_ref === 2) {
			dst = $append(dst, 48, buf[2]);
		}
		return dst;
	};
	fmtF = function(dst, neg, d, prec) {
		var i, x, i$1, ch, j, x$1;
		if (neg) {
			dst = $append(dst, 45);
		}
		if (d.dp > 0) {
			i = 0;
			i = 0;
			while (i < d.dp && i < d.nd) {
				dst = $append(dst, (x = d.d, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])));
				i = i + (1) >> 0;
			}
			while (i < d.dp) {
				dst = $append(dst, 48);
				i = i + (1) >> 0;
			}
		} else {
			dst = $append(dst, 48);
		}
		if (prec > 0) {
			dst = $append(dst, 46);
			i$1 = 0;
			while (i$1 < prec) {
				ch = 48;
				j = d.dp + i$1 >> 0;
				if (0 <= j && j < d.nd) {
					ch = (x$1 = d.d, ((j < 0 || j >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + j]));
				}
				dst = $append(dst, ch);
				i$1 = i$1 + (1) >> 0;
			}
		}
		return dst;
	};
	fmtB = function(dst, neg, mant, exp, flt) {
		var buf, w, esign, n, _r, _q, x;
		buf = ($arrayType($Uint8, 50)).zero(); $copy(buf, ($arrayType($Uint8, 50)).zero(), ($arrayType($Uint8, 50)));
		w = 50;
		exp = exp - ((flt.mantbits >> 0)) >> 0;
		esign = 43;
		if (exp < 0) {
			esign = 45;
			exp = -exp;
		}
		n = 0;
		while (exp > 0 || n < 1) {
			n = n + (1) >> 0;
			w = w - (1) >> 0;
			(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = (((_r = exp % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >> 0) << 24 >>> 24);
			exp = (_q = exp / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		w = w - (1) >> 0;
		(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = esign;
		w = w - (1) >> 0;
		(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 112;
		n = 0;
		while ((mant.$high > 0 || (mant.$high === 0 && mant.$low > 0)) || n < 1) {
			n = n + (1) >> 0;
			w = w - (1) >> 0;
			(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = ((x = $div64(mant, new $Uint64(0, 10), true), new $Uint64(x.$high + 0, x.$low + 48)).$low << 24 >>> 24);
			mant = $div64(mant, (new $Uint64(0, 10)), false);
		}
		if (neg) {
			w = w - (1) >> 0;
			(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45;
		}
		return $appendSlice(dst, $subslice(new ($sliceType($Uint8))(buf), w));
	};
	max = function(a, b) {
		if (a > b) {
			return a;
		}
		return b;
	};
	FormatInt = $pkg.FormatInt = function(i, base) {
		var _tuple, s;
		_tuple = formatBits(($sliceType($Uint8)).nil, new $Uint64(i.$high, i.$low), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), false); s = _tuple[1];
		return s;
	};
	Itoa = $pkg.Itoa = function(i) {
		return FormatInt(new $Int64(0, i), 10);
	};
	AppendInt = $pkg.AppendInt = function(dst, i, base) {
		var _tuple;
		_tuple = formatBits(dst, new $Uint64(i.$high, i.$low), base, (i.$high < 0 || (i.$high === 0 && i.$low < 0)), true); dst = _tuple[0];
		return dst;
	};
	AppendUint = $pkg.AppendUint = function(dst, i, base) {
		var _tuple;
		_tuple = formatBits(dst, i, base, false, true); dst = _tuple[0];
		return dst;
	};
	formatBits = function(dst, u, base, neg, append_) {
		var d = ($sliceType($Uint8)).nil, s = "", a, i, q, x, j, x$1, x$2, q$1, x$3, s$1, b, m, b$1;
		if (base < 2 || base > 36) {
			$panic(new $String("strconv: illegal AppendInt/FormatInt base"));
		}
		a = ($arrayType($Uint8, 65)).zero(); $copy(a, ($arrayType($Uint8, 65)).zero(), ($arrayType($Uint8, 65)));
		i = 65;
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if (base === 10) {
			while ((u.$high > 0 || (u.$high === 0 && u.$low >= 100))) {
				i = i - (2) >> 0;
				q = $div64(u, new $Uint64(0, 100), false);
				j = ((x = $mul64(q, new $Uint64(0, 100)), new $Uint64(u.$high - x.$high, u.$low - x.$low)).$low >>> 0);
				(x$1 = i + 1 >> 0, (x$1 < 0 || x$1 >= a.length) ? $throwRuntimeError("index out of range") : a[x$1] = "0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789".charCodeAt(j));
				(x$2 = i + 0 >> 0, (x$2 < 0 || x$2 >= a.length) ? $throwRuntimeError("index out of range") : a[x$2] = "0000000000111111111122222222223333333333444444444455555555556666666666777777777788888888889999999999".charCodeAt(j));
				u = q;
			}
			if ((u.$high > 0 || (u.$high === 0 && u.$low >= 10))) {
				i = i - (1) >> 0;
				q$1 = $div64(u, new $Uint64(0, 10), false);
				(i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(((x$3 = $mul64(q$1, new $Uint64(0, 10)), new $Uint64(u.$high - x$3.$high, u.$low - x$3.$low)).$low >>> 0));
				u = q$1;
			}
		} else {
			s$1 = ((base < 0 || base >= shifts.length) ? $throwRuntimeError("index out of range") : shifts[base]);
			if (s$1 > 0) {
				b = new $Uint64(0, base);
				m = (b.$low >>> 0) - 1 >>> 0;
				while ((u.$high > b.$high || (u.$high === b.$high && u.$low >= b.$low))) {
					i = i - (1) >> 0;
					(i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((((u.$low >>> 0) & m) >>> 0));
					u = $shiftRightUint64(u, (s$1));
				}
			} else {
				b$1 = new $Uint64(0, base);
				while ((u.$high > b$1.$high || (u.$high === b$1.$high && u.$low >= b$1.$low))) {
					i = i - (1) >> 0;
					(i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt(($div64(u, b$1, true).$low >>> 0));
					u = $div64(u, (b$1), false);
				}
			}
		}
		i = i - (1) >> 0;
		(i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = "0123456789abcdefghijklmnopqrstuvwxyz".charCodeAt((u.$low >>> 0));
		if (neg) {
			i = i - (1) >> 0;
			(i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i] = 45;
		}
		if (append_) {
			d = $appendSlice(dst, $subslice(new ($sliceType($Uint8))(a), i));
			return [d, s];
		}
		s = $bytesToString($subslice(new ($sliceType($Uint8))(a), i));
		return [d, s];
	};
	quoteWith = function(s, quote, ASCIIonly) {
		var runeTmp, _q, x, buf, width, r, _tuple, n, _ref, s$1, s$2;
		runeTmp = ($arrayType($Uint8, 4)).zero(); $copy(runeTmp, ($arrayType($Uint8, 4)).zero(), ($arrayType($Uint8, 4)));
		buf = ($sliceType($Uint8)).make(0, (_q = (x = s.length, (((3 >>> 16 << 16) * x >> 0) + (3 << 16 >>> 16) * x) >> 0) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		buf = $append(buf, quote);
		width = 0;
		while (s.length > 0) {
			r = (s.charCodeAt(0) >> 0);
			width = 1;
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; width = _tuple[1];
			}
			if ((width === 1) && (r === 65533)) {
				buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes("\\x")));
				buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
				buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				s = s.substring(width);
				continue;
			}
			if ((r === (quote >> 0)) || (r === 92)) {
				buf = $append(buf, 92);
				buf = $append(buf, (r << 24 >>> 24));
				s = s.substring(width);
				continue;
			}
			if (ASCIIonly) {
				if (r < 128 && IsPrint(r)) {
					buf = $append(buf, (r << 24 >>> 24));
					s = s.substring(width);
					continue;
				}
			} else if (IsPrint(r)) {
				n = utf8.EncodeRune(new ($sliceType($Uint8))(runeTmp), r);
				buf = $appendSlice(buf, $subslice(new ($sliceType($Uint8))(runeTmp), 0, n));
				s = s.substring(width);
				continue;
			}
			_ref = r;
			if (_ref === 7) {
				buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes("\\a")));
			} else if (_ref === 8) {
				buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes("\\b")));
			} else if (_ref === 12) {
				buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes("\\f")));
			} else if (_ref === 10) {
				buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes("\\n")));
			} else if (_ref === 13) {
				buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes("\\r")));
			} else if (_ref === 9) {
				buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes("\\t")));
			} else if (_ref === 11) {
				buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes("\\v")));
			} else {
				if (r < 32) {
					buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes("\\x")));
					buf = $append(buf, "0123456789abcdef".charCodeAt((s.charCodeAt(0) >>> 4 << 24 >>> 24)));
					buf = $append(buf, "0123456789abcdef".charCodeAt(((s.charCodeAt(0) & 15) >>> 0)));
				} else if (r > 1114111) {
					r = 65533;
					buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes("\\u")));
					s$1 = 12;
					while (s$1 >= 0) {
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$1 >>> 0), 31)) >> 0) & 15)));
						s$1 = s$1 - (4) >> 0;
					}
				} else if (r < 65536) {
					buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes("\\u")));
					s$1 = 12;
					while (s$1 >= 0) {
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$1 >>> 0), 31)) >> 0) & 15)));
						s$1 = s$1 - (4) >> 0;
					}
				} else {
					buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes("\\U")));
					s$2 = 28;
					while (s$2 >= 0) {
						buf = $append(buf, "0123456789abcdef".charCodeAt((((r >> $min((s$2 >>> 0), 31)) >> 0) & 15)));
						s$2 = s$2 - (4) >> 0;
					}
				}
			}
			s = s.substring(width);
		}
		buf = $append(buf, quote);
		return $bytesToString(buf);
	};
	Quote = $pkg.Quote = function(s) {
		return quoteWith(s, 34, false);
	};
	QuoteToASCII = $pkg.QuoteToASCII = function(s) {
		return quoteWith(s, 34, true);
	};
	QuoteRune = $pkg.QuoteRune = function(r) {
		return quoteWith($encodeRune(r), 39, false);
	};
	AppendQuoteRune = $pkg.AppendQuoteRune = function(dst, r) {
		return $appendSlice(dst, new ($sliceType($Uint8))($stringToBytes(QuoteRune(r))));
	};
	QuoteRuneToASCII = $pkg.QuoteRuneToASCII = function(r) {
		return quoteWith($encodeRune(r), 39, true);
	};
	AppendQuoteRuneToASCII = $pkg.AppendQuoteRuneToASCII = function(dst, r) {
		return $appendSlice(dst, new ($sliceType($Uint8))($stringToBytes(QuoteRuneToASCII(r))));
	};
	CanBackquote = $pkg.CanBackquote = function(s) {
		var i, c;
		i = 0;
		while (i < s.length) {
			c = s.charCodeAt(i);
			if ((c < 32 && !((c === 9))) || (c === 96) || (c === 127)) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	unhex = function(b) {
		var v = 0, ok = false, c, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		c = (b >> 0);
		if (48 <= c && c <= 57) {
			_tmp = c - 48 >> 0; _tmp$1 = true; v = _tmp; ok = _tmp$1;
			return [v, ok];
		} else if (97 <= c && c <= 102) {
			_tmp$2 = (c - 97 >> 0) + 10 >> 0; _tmp$3 = true; v = _tmp$2; ok = _tmp$3;
			return [v, ok];
		} else if (65 <= c && c <= 70) {
			_tmp$4 = (c - 65 >> 0) + 10 >> 0; _tmp$5 = true; v = _tmp$4; ok = _tmp$5;
			return [v, ok];
		}
		return [v, ok];
	};
	UnquoteChar = $pkg.UnquoteChar = function(s, quote) {
		var value = 0, multibyte = false, tail = "", err = $ifaceNil, c, _tuple, r, size, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, c$1, _ref, n, _ref$1, v, j, _tuple$1, x, ok, v$1, j$1, x$1;
		c = s.charCodeAt(0);
		if ((c === quote) && ((quote === 39) || (quote === 34))) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} else if (c >= 128) {
			_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; size = _tuple[1];
			_tmp = r; _tmp$1 = true; _tmp$2 = s.substring(size); _tmp$3 = $ifaceNil; value = _tmp; multibyte = _tmp$1; tail = _tmp$2; err = _tmp$3;
			return [value, multibyte, tail, err];
		} else if (!((c === 92))) {
			_tmp$4 = (s.charCodeAt(0) >> 0); _tmp$5 = false; _tmp$6 = s.substring(1); _tmp$7 = $ifaceNil; value = _tmp$4; multibyte = _tmp$5; tail = _tmp$6; err = _tmp$7;
			return [value, multibyte, tail, err];
		}
		if (s.length <= 1) {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		}
		c$1 = s.charCodeAt(1);
		s = s.substring(2);
		_ref = c$1;
		switch (0) { default: if (_ref === 97) {
			value = 7;
		} else if (_ref === 98) {
			value = 8;
		} else if (_ref === 102) {
			value = 12;
		} else if (_ref === 110) {
			value = 10;
		} else if (_ref === 114) {
			value = 13;
		} else if (_ref === 116) {
			value = 9;
		} else if (_ref === 118) {
			value = 11;
		} else if (_ref === 120 || _ref === 117 || _ref === 85) {
			n = 0;
			_ref$1 = c$1;
			if (_ref$1 === 120) {
				n = 2;
			} else if (_ref$1 === 117) {
				n = 4;
			} else if (_ref$1 === 85) {
				n = 8;
			}
			v = 0;
			if (s.length < n) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			j = 0;
			while (j < n) {
				_tuple$1 = unhex(s.charCodeAt(j)); x = _tuple$1[0]; ok = _tuple$1[1];
				if (!ok) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				v = (v << 4 >> 0) | x;
				j = j + (1) >> 0;
			}
			s = s.substring(n);
			if (c$1 === 120) {
				value = v;
				break;
			}
			if (v > 1114111) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = v;
			multibyte = true;
		} else if (_ref === 48 || _ref === 49 || _ref === 50 || _ref === 51 || _ref === 52 || _ref === 53 || _ref === 54 || _ref === 55) {
			v$1 = (c$1 >> 0) - 48 >> 0;
			if (s.length < 2) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			j$1 = 0;
			while (j$1 < 2) {
				x$1 = (s.charCodeAt(j$1) >> 0) - 48 >> 0;
				if (x$1 < 0 || x$1 > 7) {
					err = $pkg.ErrSyntax;
					return [value, multibyte, tail, err];
				}
				v$1 = ((v$1 << 3 >> 0)) | x$1;
				j$1 = j$1 + (1) >> 0;
			}
			s = s.substring(2);
			if (v$1 > 255) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = v$1;
		} else if (_ref === 92) {
			value = 92;
		} else if (_ref === 39 || _ref === 34) {
			if (!((c$1 === quote))) {
				err = $pkg.ErrSyntax;
				return [value, multibyte, tail, err];
			}
			value = (c$1 >> 0);
		} else {
			err = $pkg.ErrSyntax;
			return [value, multibyte, tail, err];
		} }
		tail = s;
		return [value, multibyte, tail, err];
	};
	Unquote = $pkg.Unquote = function(s) {
		var t = "", err = $ifaceNil, n, _tmp, _tmp$1, quote, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tmp$10, _tmp$11, _ref, _tmp$12, _tmp$13, _tuple, r, size, _tmp$14, _tmp$15, runeTmp, _q, x, buf, _tuple$1, c, multibyte, ss, err$1, _tmp$16, _tmp$17, n$1, _tmp$18, _tmp$19, _tmp$20, _tmp$21;
		n = s.length;
		if (n < 2) {
			_tmp = ""; _tmp$1 = $pkg.ErrSyntax; t = _tmp; err = _tmp$1;
			return [t, err];
		}
		quote = s.charCodeAt(0);
		if (!((quote === s.charCodeAt((n - 1 >> 0))))) {
			_tmp$2 = ""; _tmp$3 = $pkg.ErrSyntax; t = _tmp$2; err = _tmp$3;
			return [t, err];
		}
		s = s.substring(1, (n - 1 >> 0));
		if (quote === 96) {
			if (contains(s, 96)) {
				_tmp$4 = ""; _tmp$5 = $pkg.ErrSyntax; t = _tmp$4; err = _tmp$5;
				return [t, err];
			}
			_tmp$6 = s; _tmp$7 = $ifaceNil; t = _tmp$6; err = _tmp$7;
			return [t, err];
		}
		if (!((quote === 34)) && !((quote === 39))) {
			_tmp$8 = ""; _tmp$9 = $pkg.ErrSyntax; t = _tmp$8; err = _tmp$9;
			return [t, err];
		}
		if (contains(s, 10)) {
			_tmp$10 = ""; _tmp$11 = $pkg.ErrSyntax; t = _tmp$10; err = _tmp$11;
			return [t, err];
		}
		if (!contains(s, 92) && !contains(s, quote)) {
			_ref = quote;
			if (_ref === 34) {
				_tmp$12 = s; _tmp$13 = $ifaceNil; t = _tmp$12; err = _tmp$13;
				return [t, err];
			} else if (_ref === 39) {
				_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; size = _tuple[1];
				if ((size === s.length) && (!((r === 65533)) || !((size === 1)))) {
					_tmp$14 = s; _tmp$15 = $ifaceNil; t = _tmp$14; err = _tmp$15;
					return [t, err];
				}
			}
		}
		runeTmp = ($arrayType($Uint8, 4)).zero(); $copy(runeTmp, ($arrayType($Uint8, 4)).zero(), ($arrayType($Uint8, 4)));
		buf = ($sliceType($Uint8)).make(0, (_q = (x = s.length, (((3 >>> 16 << 16) * x >> 0) + (3 << 16 >>> 16) * x) >> 0) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		while (s.length > 0) {
			_tuple$1 = UnquoteChar(s, quote); c = _tuple$1[0]; multibyte = _tuple$1[1]; ss = _tuple$1[2]; err$1 = _tuple$1[3];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp$16 = ""; _tmp$17 = err$1; t = _tmp$16; err = _tmp$17;
				return [t, err];
			}
			s = ss;
			if (c < 128 || !multibyte) {
				buf = $append(buf, (c << 24 >>> 24));
			} else {
				n$1 = utf8.EncodeRune(new ($sliceType($Uint8))(runeTmp), c);
				buf = $appendSlice(buf, $subslice(new ($sliceType($Uint8))(runeTmp), 0, n$1));
			}
			if ((quote === 39) && !((s.length === 0))) {
				_tmp$18 = ""; _tmp$19 = $pkg.ErrSyntax; t = _tmp$18; err = _tmp$19;
				return [t, err];
			}
		}
		_tmp$20 = $bytesToString(buf); _tmp$21 = $ifaceNil; t = _tmp$20; err = _tmp$21;
		return [t, err];
	};
	contains = function(s, c) {
		var i;
		i = 0;
		while (i < s.length) {
			if (s.charCodeAt(i) === c) {
				return true;
			}
			i = i + (1) >> 0;
		}
		return false;
	};
	bsearch16 = function(a, x) {
		var _tmp, _tmp$1, i, j, _q, h;
		_tmp = 0; _tmp$1 = a.$length; i = _tmp; j = _tmp$1;
		while (i < j) {
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	bsearch32 = function(a, x) {
		var _tmp, _tmp$1, i, j, _q, h;
		_tmp = 0; _tmp$1 = a.$length; i = _tmp; j = _tmp$1;
		while (i < j) {
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (((h < 0 || h >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + h]) < x) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	IsPrint = $pkg.IsPrint = function(r) {
		var _tmp, _tmp$1, _tmp$2, rr, isPrint, isNotPrint, i, x, x$1, j, _tmp$3, _tmp$4, _tmp$5, rr$1, isPrint$1, isNotPrint$1, i$1, x$2, x$3, j$1;
		if (r <= 255) {
			if (32 <= r && r <= 126) {
				return true;
			}
			if (161 <= r && r <= 255) {
				return !((r === 173));
			}
			return false;
		}
		if (0 <= r && r < 65536) {
			_tmp = (r << 16 >>> 16); _tmp$1 = isPrint16; _tmp$2 = isNotPrint16; rr = _tmp; isPrint = _tmp$1; isNotPrint = _tmp$2;
			i = bsearch16(isPrint, rr);
			if (i >= isPrint.$length || rr < (x = i & ~1, ((x < 0 || x >= isPrint.$length) ? $throwRuntimeError("index out of range") : isPrint.$array[isPrint.$offset + x])) || (x$1 = i | 1, ((x$1 < 0 || x$1 >= isPrint.$length) ? $throwRuntimeError("index out of range") : isPrint.$array[isPrint.$offset + x$1])) < rr) {
				return false;
			}
			j = bsearch16(isNotPrint, rr);
			return j >= isNotPrint.$length || !((((j < 0 || j >= isNotPrint.$length) ? $throwRuntimeError("index out of range") : isNotPrint.$array[isNotPrint.$offset + j]) === rr));
		}
		_tmp$3 = (r >>> 0); _tmp$4 = isPrint32; _tmp$5 = isNotPrint32; rr$1 = _tmp$3; isPrint$1 = _tmp$4; isNotPrint$1 = _tmp$5;
		i$1 = bsearch32(isPrint$1, rr$1);
		if (i$1 >= isPrint$1.$length || rr$1 < (x$2 = i$1 & ~1, ((x$2 < 0 || x$2 >= isPrint$1.$length) ? $throwRuntimeError("index out of range") : isPrint$1.$array[isPrint$1.$offset + x$2])) || (x$3 = i$1 | 1, ((x$3 < 0 || x$3 >= isPrint$1.$length) ? $throwRuntimeError("index out of range") : isPrint$1.$array[isPrint$1.$offset + x$3])) < rr$1) {
			return false;
		}
		if (r >= 131072) {
			return true;
		}
		r = r - (65536) >> 0;
		j$1 = bsearch16(isNotPrint$1, (r << 16 >>> 16));
		return j$1 >= isNotPrint$1.$length || !((((j$1 < 0 || j$1 >= isNotPrint$1.$length) ? $throwRuntimeError("index out of range") : isNotPrint$1.$array[isNotPrint$1.$offset + j$1]) === (r << 16 >>> 16)));
	};
	$pkg.$init = function() {
		($ptrType(NumError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		NumError.init([["Func", "Func", "", $String, ""], ["Num", "Num", "", $String, ""], ["Err", "Err", "", $error, ""]]);
		($ptrType(decimal)).methods = [["Assign", "Assign", "", $funcType([$Uint64], [], false), -1], ["Round", "Round", "", $funcType([$Int], [], false), -1], ["RoundDown", "RoundDown", "", $funcType([$Int], [], false), -1], ["RoundUp", "RoundUp", "", $funcType([$Int], [], false), -1], ["RoundedInteger", "RoundedInteger", "", $funcType([], [$Uint64], false), -1], ["Shift", "Shift", "", $funcType([$Int], [], false), -1], ["String", "String", "", $funcType([], [$String], false), -1], ["floatBits", "floatBits", "strconv", $funcType([($ptrType(floatInfo))], [$Uint64, $Bool], false), -1], ["set", "set", "strconv", $funcType([$String], [$Bool], false), -1]];
		decimal.init([["d", "d", "strconv", ($arrayType($Uint8, 800)), ""], ["nd", "nd", "strconv", $Int, ""], ["dp", "dp", "strconv", $Int, ""], ["neg", "neg", "strconv", $Bool, ""], ["trunc", "trunc", "strconv", $Bool, ""]]);
		leftCheat.init([["delta", "delta", "strconv", $Int, ""], ["cutoff", "cutoff", "strconv", $String, ""]]);
		($ptrType(extFloat)).methods = [["AssignComputeBounds", "AssignComputeBounds", "", $funcType([$Uint64, $Int, $Bool, ($ptrType(floatInfo))], [extFloat, extFloat], false), -1], ["AssignDecimal", "AssignDecimal", "", $funcType([$Uint64, $Int, $Bool, $Bool, ($ptrType(floatInfo))], [$Bool], false), -1], ["FixedDecimal", "FixedDecimal", "", $funcType([($ptrType(decimalSlice)), $Int], [$Bool], false), -1], ["Multiply", "Multiply", "", $funcType([extFloat], [], false), -1], ["Normalize", "Normalize", "", $funcType([], [$Uint], false), -1], ["ShortestDecimal", "ShortestDecimal", "", $funcType([($ptrType(decimalSlice)), ($ptrType(extFloat)), ($ptrType(extFloat))], [$Bool], false), -1], ["floatBits", "floatBits", "strconv", $funcType([($ptrType(floatInfo))], [$Uint64, $Bool], false), -1], ["frexp10", "frexp10", "strconv", $funcType([], [$Int, $Int], false), -1]];
		extFloat.init([["mant", "mant", "strconv", $Uint64, ""], ["exp", "exp", "strconv", $Int, ""], ["neg", "neg", "strconv", $Bool, ""]]);
		floatInfo.init([["mantbits", "mantbits", "strconv", $Uint, ""], ["expbits", "expbits", "strconv", $Uint, ""], ["bias", "bias", "strconv", $Int, ""]]);
		decimalSlice.init([["d", "d", "strconv", ($sliceType($Uint8)), ""], ["nd", "nd", "strconv", $Int, ""], ["dp", "dp", "strconv", $Int, ""], ["neg", "neg", "strconv", $Bool, ""]]);
		optimize = true;
		powtab = new ($sliceType($Int))([1, 3, 6, 9, 13, 16, 19, 23, 26]);
		float64pow10 = new ($sliceType($Float64))([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10, 1e+11, 1e+12, 1e+13, 1e+14, 1e+15, 1e+16, 1e+17, 1e+18, 1e+19, 1e+20, 1e+21, 1e+22]);
		float32pow10 = new ($sliceType($Float32))([1, 10, 100, 1000, 10000, 100000, 1e+06, 1e+07, 1e+08, 1e+09, 1e+10]);
		$pkg.ErrRange = errors.New("value out of range");
		$pkg.ErrSyntax = errors.New("invalid syntax");
		leftcheats = new ($sliceType(leftCheat))([new leftCheat.Ptr(0, ""), new leftCheat.Ptr(1, "5"), new leftCheat.Ptr(1, "25"), new leftCheat.Ptr(1, "125"), new leftCheat.Ptr(2, "625"), new leftCheat.Ptr(2, "3125"), new leftCheat.Ptr(2, "15625"), new leftCheat.Ptr(3, "78125"), new leftCheat.Ptr(3, "390625"), new leftCheat.Ptr(3, "1953125"), new leftCheat.Ptr(4, "9765625"), new leftCheat.Ptr(4, "48828125"), new leftCheat.Ptr(4, "244140625"), new leftCheat.Ptr(4, "1220703125"), new leftCheat.Ptr(5, "6103515625"), new leftCheat.Ptr(5, "30517578125"), new leftCheat.Ptr(5, "152587890625"), new leftCheat.Ptr(6, "762939453125"), new leftCheat.Ptr(6, "3814697265625"), new leftCheat.Ptr(6, "19073486328125"), new leftCheat.Ptr(7, "95367431640625"), new leftCheat.Ptr(7, "476837158203125"), new leftCheat.Ptr(7, "2384185791015625"), new leftCheat.Ptr(7, "11920928955078125"), new leftCheat.Ptr(8, "59604644775390625"), new leftCheat.Ptr(8, "298023223876953125"), new leftCheat.Ptr(8, "1490116119384765625"), new leftCheat.Ptr(9, "7450580596923828125")]);
		smallPowersOfTen = $toNativeArray("Struct", [new extFloat.Ptr(new $Uint64(2147483648, 0), -63, false), new extFloat.Ptr(new $Uint64(2684354560, 0), -60, false), new extFloat.Ptr(new $Uint64(3355443200, 0), -57, false), new extFloat.Ptr(new $Uint64(4194304000, 0), -54, false), new extFloat.Ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.Ptr(new $Uint64(3276800000, 0), -47, false), new extFloat.Ptr(new $Uint64(4096000000, 0), -44, false), new extFloat.Ptr(new $Uint64(2560000000, 0), -40, false)]);
		powersOfTen = $toNativeArray("Struct", [new extFloat.Ptr(new $Uint64(4203730336, 136053384), -1220, false), new extFloat.Ptr(new $Uint64(3132023167, 2722021238), -1193, false), new extFloat.Ptr(new $Uint64(2333539104, 810921078), -1166, false), new extFloat.Ptr(new $Uint64(3477244234, 1573795306), -1140, false), new extFloat.Ptr(new $Uint64(2590748842, 1432697645), -1113, false), new extFloat.Ptr(new $Uint64(3860516611, 1025131999), -1087, false), new extFloat.Ptr(new $Uint64(2876309015, 3348809418), -1060, false), new extFloat.Ptr(new $Uint64(4286034428, 3200048207), -1034, false), new extFloat.Ptr(new $Uint64(3193344495, 1097586188), -1007, false), new extFloat.Ptr(new $Uint64(2379227053, 2424306748), -980, false), new extFloat.Ptr(new $Uint64(3545324584, 827693699), -954, false), new extFloat.Ptr(new $Uint64(2641472655, 2913388981), -927, false), new extFloat.Ptr(new $Uint64(3936100983, 602835915), -901, false), new extFloat.Ptr(new $Uint64(2932623761, 1081627501), -874, false), new extFloat.Ptr(new $Uint64(2184974969, 1572261463), -847, false), new extFloat.Ptr(new $Uint64(3255866422, 1308317239), -821, false), new extFloat.Ptr(new $Uint64(2425809519, 944281679), -794, false), new extFloat.Ptr(new $Uint64(3614737867, 629291719), -768, false), new extFloat.Ptr(new $Uint64(2693189581, 2545915892), -741, false), new extFloat.Ptr(new $Uint64(4013165208, 388672741), -715, false), new extFloat.Ptr(new $Uint64(2990041083, 708162190), -688, false), new extFloat.Ptr(new $Uint64(2227754207, 3536207675), -661, false), new extFloat.Ptr(new $Uint64(3319612455, 450088378), -635, false), new extFloat.Ptr(new $Uint64(2473304014, 3139815830), -608, false), new extFloat.Ptr(new $Uint64(3685510180, 2103616900), -582, false), new extFloat.Ptr(new $Uint64(2745919064, 224385782), -555, false), new extFloat.Ptr(new $Uint64(4091738259, 3737383206), -529, false), new extFloat.Ptr(new $Uint64(3048582568, 2868871352), -502, false), new extFloat.Ptr(new $Uint64(2271371013, 1820084875), -475, false), new extFloat.Ptr(new $Uint64(3384606560, 885076051), -449, false), new extFloat.Ptr(new $Uint64(2521728396, 2444895829), -422, false), new extFloat.Ptr(new $Uint64(3757668132, 1881767613), -396, false), new extFloat.Ptr(new $Uint64(2799680927, 3102062735), -369, false), new extFloat.Ptr(new $Uint64(4171849679, 2289335700), -343, false), new extFloat.Ptr(new $Uint64(3108270227, 2410191823), -316, false), new extFloat.Ptr(new $Uint64(2315841784, 3205436779), -289, false), new extFloat.Ptr(new $Uint64(3450873173, 1697722806), -263, false), new extFloat.Ptr(new $Uint64(2571100870, 3497754540), -236, false), new extFloat.Ptr(new $Uint64(3831238852, 707476230), -210, false), new extFloat.Ptr(new $Uint64(2854495385, 1769181907), -183, false), new extFloat.Ptr(new $Uint64(4253529586, 2197867022), -157, false), new extFloat.Ptr(new $Uint64(3169126500, 2450594539), -130, false), new extFloat.Ptr(new $Uint64(2361183241, 1867548876), -103, false), new extFloat.Ptr(new $Uint64(3518437208, 3793315116), -77, false), new extFloat.Ptr(new $Uint64(2621440000, 0), -50, false), new extFloat.Ptr(new $Uint64(3906250000, 0), -24, false), new extFloat.Ptr(new $Uint64(2910383045, 2892103680), 3, false), new extFloat.Ptr(new $Uint64(2168404344, 4170451332), 30, false), new extFloat.Ptr(new $Uint64(3231174267, 3372684723), 56, false), new extFloat.Ptr(new $Uint64(2407412430, 2078956656), 83, false), new extFloat.Ptr(new $Uint64(3587324068, 2884206696), 109, false), new extFloat.Ptr(new $Uint64(2672764710, 395977285), 136, false), new extFloat.Ptr(new $Uint64(3982729777, 3569679143), 162, false), new extFloat.Ptr(new $Uint64(2967364920, 2361961896), 189, false), new extFloat.Ptr(new $Uint64(2210859150, 447440347), 216, false), new extFloat.Ptr(new $Uint64(3294436857, 1114709402), 242, false), new extFloat.Ptr(new $Uint64(2454546732, 2786846552), 269, false), new extFloat.Ptr(new $Uint64(3657559652, 443583978), 295, false), new extFloat.Ptr(new $Uint64(2725094297, 2599384906), 322, false), new extFloat.Ptr(new $Uint64(4060706939, 3028118405), 348, false), new extFloat.Ptr(new $Uint64(3025462433, 2044532855), 375, false), new extFloat.Ptr(new $Uint64(2254145170, 1536935362), 402, false), new extFloat.Ptr(new $Uint64(3358938053, 3365297469), 428, false), new extFloat.Ptr(new $Uint64(2502603868, 4204241075), 455, false), new extFloat.Ptr(new $Uint64(3729170365, 2577424355), 481, false), new extFloat.Ptr(new $Uint64(2778448436, 3677981733), 508, false), new extFloat.Ptr(new $Uint64(4140210802, 2744688476), 534, false), new extFloat.Ptr(new $Uint64(3084697427, 1424604878), 561, false), new extFloat.Ptr(new $Uint64(2298278679, 4062331362), 588, false), new extFloat.Ptr(new $Uint64(3424702107, 3546052773), 614, false), new extFloat.Ptr(new $Uint64(2551601907, 2065781727), 641, false), new extFloat.Ptr(new $Uint64(3802183132, 2535403578), 667, false), new extFloat.Ptr(new $Uint64(2832847187, 1558426518), 694, false), new extFloat.Ptr(new $Uint64(4221271257, 2762425404), 720, false), new extFloat.Ptr(new $Uint64(3145092172, 2812560400), 747, false), new extFloat.Ptr(new $Uint64(2343276271, 3057687578), 774, false), new extFloat.Ptr(new $Uint64(3491753744, 2790753324), 800, false), new extFloat.Ptr(new $Uint64(2601559269, 3918606633), 827, false), new extFloat.Ptr(new $Uint64(3876625403, 2711358621), 853, false), new extFloat.Ptr(new $Uint64(2888311001, 1648096297), 880, false), new extFloat.Ptr(new $Uint64(2151959390, 2057817989), 907, false), new extFloat.Ptr(new $Uint64(3206669376, 61660461), 933, false), new extFloat.Ptr(new $Uint64(2389154863, 1581580175), 960, false), new extFloat.Ptr(new $Uint64(3560118173, 2626467905), 986, false), new extFloat.Ptr(new $Uint64(2652494738, 3034782633), 1013, false), new extFloat.Ptr(new $Uint64(3952525166, 3135207385), 1039, false), new extFloat.Ptr(new $Uint64(2944860731, 2616258155), 1066, false)]);
		uint64pow10 = $toNativeArray("Uint64", [new $Uint64(0, 1), new $Uint64(0, 10), new $Uint64(0, 100), new $Uint64(0, 1000), new $Uint64(0, 10000), new $Uint64(0, 100000), new $Uint64(0, 1000000), new $Uint64(0, 10000000), new $Uint64(0, 100000000), new $Uint64(0, 1000000000), new $Uint64(2, 1410065408), new $Uint64(23, 1215752192), new $Uint64(232, 3567587328), new $Uint64(2328, 1316134912), new $Uint64(23283, 276447232), new $Uint64(232830, 2764472320), new $Uint64(2328306, 1874919424), new $Uint64(23283064, 1569325056), new $Uint64(232830643, 2808348672), new $Uint64(2328306436, 2313682944)]);
		float32info = new floatInfo.Ptr(23, 8, -127);
		float64info = new floatInfo.Ptr(52, 11, -1023);
		isPrint16 = new ($sliceType($Uint16))([32, 126, 161, 887, 890, 894, 900, 1319, 1329, 1366, 1369, 1418, 1423, 1479, 1488, 1514, 1520, 1524, 1542, 1563, 1566, 1805, 1808, 1866, 1869, 1969, 1984, 2042, 2048, 2093, 2096, 2139, 2142, 2142, 2208, 2220, 2276, 2444, 2447, 2448, 2451, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2531, 2534, 2555, 2561, 2570, 2575, 2576, 2579, 2617, 2620, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2654, 2662, 2677, 2689, 2745, 2748, 2765, 2768, 2768, 2784, 2787, 2790, 2801, 2817, 2828, 2831, 2832, 2835, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2915, 2918, 2935, 2946, 2954, 2958, 2965, 2969, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3021, 3024, 3024, 3031, 3031, 3046, 3066, 3073, 3129, 3133, 3149, 3157, 3161, 3168, 3171, 3174, 3183, 3192, 3199, 3202, 3257, 3260, 3277, 3285, 3286, 3294, 3299, 3302, 3314, 3330, 3386, 3389, 3406, 3415, 3415, 3424, 3427, 3430, 3445, 3449, 3455, 3458, 3478, 3482, 3517, 3520, 3526, 3530, 3530, 3535, 3551, 3570, 3572, 3585, 3642, 3647, 3675, 3713, 3716, 3719, 3722, 3725, 3725, 3732, 3751, 3754, 3773, 3776, 3789, 3792, 3801, 3804, 3807, 3840, 3948, 3953, 4058, 4096, 4295, 4301, 4301, 4304, 4685, 4688, 4701, 4704, 4749, 4752, 4789, 4792, 4805, 4808, 4885, 4888, 4954, 4957, 4988, 4992, 5017, 5024, 5108, 5120, 5788, 5792, 5872, 5888, 5908, 5920, 5942, 5952, 5971, 5984, 6003, 6016, 6109, 6112, 6121, 6128, 6137, 6144, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6464, 6464, 6468, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6618, 6622, 6683, 6686, 6780, 6783, 6793, 6800, 6809, 6816, 6829, 6912, 6987, 6992, 7036, 7040, 7155, 7164, 7223, 7227, 7241, 7245, 7295, 7360, 7367, 7376, 7414, 7424, 7654, 7676, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8061, 8064, 8147, 8150, 8175, 8178, 8190, 8208, 8231, 8240, 8286, 8304, 8305, 8308, 8348, 8352, 8378, 8400, 8432, 8448, 8585, 8592, 9203, 9216, 9254, 9280, 9290, 9312, 11084, 11088, 11097, 11264, 11507, 11513, 11559, 11565, 11565, 11568, 11623, 11631, 11632, 11647, 11670, 11680, 11835, 11904, 12019, 12032, 12245, 12272, 12283, 12289, 12438, 12441, 12543, 12549, 12589, 12593, 12730, 12736, 12771, 12784, 19893, 19904, 40908, 40960, 42124, 42128, 42182, 42192, 42539, 42560, 42647, 42655, 42743, 42752, 42899, 42912, 42922, 43000, 43051, 43056, 43065, 43072, 43127, 43136, 43204, 43214, 43225, 43232, 43259, 43264, 43347, 43359, 43388, 43392, 43481, 43486, 43487, 43520, 43574, 43584, 43597, 43600, 43609, 43612, 43643, 43648, 43714, 43739, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43822, 43968, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64449, 64467, 64831, 64848, 64911, 64914, 64967, 65008, 65021, 65024, 65049, 65056, 65062, 65072, 65131, 65136, 65276, 65281, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500, 65504, 65518, 65532, 65533]);
		isNotPrint16 = new ($sliceType($Uint16))([173, 907, 909, 930, 1376, 1416, 1424, 1757, 2111, 2209, 2303, 2424, 2432, 2436, 2473, 2481, 2526, 2564, 2601, 2609, 2612, 2615, 2621, 2653, 2692, 2702, 2706, 2729, 2737, 2740, 2758, 2762, 2820, 2857, 2865, 2868, 2910, 2948, 2961, 2971, 2973, 3017, 3076, 3085, 3089, 3113, 3124, 3141, 3145, 3159, 3204, 3213, 3217, 3241, 3252, 3269, 3273, 3295, 3312, 3332, 3341, 3345, 3397, 3401, 3460, 3506, 3516, 3541, 3543, 3715, 3721, 3736, 3744, 3748, 3750, 3756, 3770, 3781, 3783, 3912, 3992, 4029, 4045, 4294, 4681, 4695, 4697, 4745, 4785, 4799, 4801, 4823, 4881, 5760, 5901, 5997, 6001, 6751, 8024, 8026, 8028, 8030, 8117, 8133, 8156, 8181, 8335, 9984, 11311, 11359, 11558, 11687, 11695, 11703, 11711, 11719, 11727, 11735, 11743, 11930, 12352, 12687, 12831, 13055, 42895, 43470, 43815, 64311, 64317, 64319, 64322, 64325, 65107, 65127, 65141, 65511]);
		isPrint32 = new ($sliceType($Uint32))([65536, 65613, 65616, 65629, 65664, 65786, 65792, 65794, 65799, 65843, 65847, 65930, 65936, 65947, 66000, 66045, 66176, 66204, 66208, 66256, 66304, 66339, 66352, 66378, 66432, 66499, 66504, 66517, 66560, 66717, 66720, 66729, 67584, 67589, 67592, 67640, 67644, 67644, 67647, 67679, 67840, 67867, 67871, 67897, 67903, 67903, 67968, 68023, 68030, 68031, 68096, 68102, 68108, 68147, 68152, 68154, 68159, 68167, 68176, 68184, 68192, 68223, 68352, 68405, 68409, 68437, 68440, 68466, 68472, 68479, 68608, 68680, 69216, 69246, 69632, 69709, 69714, 69743, 69760, 69825, 69840, 69864, 69872, 69881, 69888, 69955, 70016, 70088, 70096, 70105, 71296, 71351, 71360, 71369, 73728, 74606, 74752, 74850, 74864, 74867, 77824, 78894, 92160, 92728, 93952, 94020, 94032, 94078, 94095, 94111, 110592, 110593, 118784, 119029, 119040, 119078, 119081, 119154, 119163, 119261, 119296, 119365, 119552, 119638, 119648, 119665, 119808, 119967, 119970, 119970, 119973, 119974, 119977, 120074, 120077, 120134, 120138, 120485, 120488, 120779, 120782, 120831, 126464, 126500, 126503, 126523, 126530, 126530, 126535, 126548, 126551, 126564, 126567, 126619, 126625, 126651, 126704, 126705, 126976, 127019, 127024, 127123, 127136, 127150, 127153, 127166, 127169, 127199, 127232, 127242, 127248, 127339, 127344, 127386, 127462, 127490, 127504, 127546, 127552, 127560, 127568, 127569, 127744, 127776, 127792, 127868, 127872, 127891, 127904, 127946, 127968, 127984, 128000, 128252, 128256, 128317, 128320, 128323, 128336, 128359, 128507, 128576, 128581, 128591, 128640, 128709, 128768, 128883, 131072, 173782, 173824, 177972, 177984, 178205, 194560, 195101, 917760, 917999]);
		isNotPrint32 = new ($sliceType($Uint16))([12, 39, 59, 62, 799, 926, 2057, 2102, 2134, 2564, 2580, 2584, 4285, 4405, 54357, 54429, 54445, 54458, 54460, 54468, 54534, 54549, 54557, 54586, 54591, 54597, 54609, 60932, 60960, 60963, 60968, 60979, 60984, 60986, 61000, 61002, 61004, 61008, 61011, 61016, 61018, 61020, 61022, 61024, 61027, 61035, 61043, 61048, 61053, 61055, 61066, 61092, 61098, 61648, 61743, 62262, 62405, 62527, 62529, 62712]);
		shifts = $toNativeArray("Uint", [0, 0, 1, 0, 2, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0]);
	};
	return $pkg;
})();
$packages["strings"] = (function() {
	var $pkg = {}, js = $packages["github.com/gopherjs/gopherjs/js"], errors = $packages["errors"], io = $packages["io"], utf8 = $packages["unicode/utf8"], unicode = $packages["unicode"], Reader, Replacer, replacer, byteBitmap, trieNode, genericReplacer, appendSliceWriter, stringWriterIface, stringWriter, singleStringReplacer, byteReplacer, byteStringReplacer, stringFinder, IndexByte, NewReader, NewReplacer, makeGenericReplacer, getStringWriter, makeSingleStringReplacer, makeStringFinder, longestCommonSuffix, max, explode, hashstr, Count, Contains, ContainsRune, Index, LastIndex, IndexRune, IndexAny, genSplit, SplitN, Split, Join, HasPrefix, HasSuffix, Map, ToUpper, ToLower, TrimLeftFunc, TrimRightFunc, TrimFunc, IndexFunc, indexFunc, lastIndexFunc, makeCutsetFunc, TrimLeft, TrimRight, TrimSpace, TrimPrefix, Replace, EqualFold;
	Reader = $pkg.Reader = $newType(0, "Struct", "strings.Reader", "Reader", "strings", function(s_, i_, prevRune_) {
		this.$val = this;
		this.s = s_ !== undefined ? s_ : "";
		this.i = i_ !== undefined ? i_ : new $Int64(0, 0);
		this.prevRune = prevRune_ !== undefined ? prevRune_ : 0;
	});
	Replacer = $pkg.Replacer = $newType(0, "Struct", "strings.Replacer", "Replacer", "strings", function(r_) {
		this.$val = this;
		this.r = r_ !== undefined ? r_ : $ifaceNil;
	});
	replacer = $pkg.replacer = $newType(8, "Interface", "strings.replacer", "replacer", "strings", null);
	byteBitmap = $pkg.byteBitmap = $newType(32, "Array", "strings.byteBitmap", "byteBitmap", "strings", null);
	trieNode = $pkg.trieNode = $newType(0, "Struct", "strings.trieNode", "trieNode", "strings", function(value_, priority_, prefix_, next_, table_) {
		this.$val = this;
		this.value = value_ !== undefined ? value_ : "";
		this.priority = priority_ !== undefined ? priority_ : 0;
		this.prefix = prefix_ !== undefined ? prefix_ : "";
		this.next = next_ !== undefined ? next_ : ($ptrType(trieNode)).nil;
		this.table = table_ !== undefined ? table_ : ($sliceType(($ptrType(trieNode)))).nil;
	});
	genericReplacer = $pkg.genericReplacer = $newType(0, "Struct", "strings.genericReplacer", "genericReplacer", "strings", function(root_, tableSize_, mapping_) {
		this.$val = this;
		this.root = root_ !== undefined ? root_ : new trieNode.Ptr();
		this.tableSize = tableSize_ !== undefined ? tableSize_ : 0;
		this.mapping = mapping_ !== undefined ? mapping_ : ($arrayType($Uint8, 256)).zero();
	});
	appendSliceWriter = $pkg.appendSliceWriter = $newType(12, "Slice", "strings.appendSliceWriter", "appendSliceWriter", "strings", null);
	stringWriterIface = $pkg.stringWriterIface = $newType(8, "Interface", "strings.stringWriterIface", "stringWriterIface", "strings", null);
	stringWriter = $pkg.stringWriter = $newType(0, "Struct", "strings.stringWriter", "stringWriter", "strings", function(w_) {
		this.$val = this;
		this.w = w_ !== undefined ? w_ : $ifaceNil;
	});
	singleStringReplacer = $pkg.singleStringReplacer = $newType(0, "Struct", "strings.singleStringReplacer", "singleStringReplacer", "strings", function(finder_, value_) {
		this.$val = this;
		this.finder = finder_ !== undefined ? finder_ : ($ptrType(stringFinder)).nil;
		this.value = value_ !== undefined ? value_ : "";
	});
	byteReplacer = $pkg.byteReplacer = $newType(0, "Struct", "strings.byteReplacer", "byteReplacer", "strings", function(old_, new$1_) {
		this.$val = this;
		this.old = old_ !== undefined ? old_ : byteBitmap.zero();
		this.new$1 = new$1_ !== undefined ? new$1_ : ($arrayType($Uint8, 256)).zero();
	});
	byteStringReplacer = $pkg.byteStringReplacer = $newType(0, "Struct", "strings.byteStringReplacer", "byteStringReplacer", "strings", function(old_, new$1_) {
		this.$val = this;
		this.old = old_ !== undefined ? old_ : byteBitmap.zero();
		this.new$1 = new$1_ !== undefined ? new$1_ : ($arrayType(($sliceType($Uint8)), 256)).zero();
	});
	stringFinder = $pkg.stringFinder = $newType(0, "Struct", "strings.stringFinder", "stringFinder", "strings", function(pattern_, badCharSkip_, goodSuffixSkip_) {
		this.$val = this;
		this.pattern = pattern_ !== undefined ? pattern_ : "";
		this.badCharSkip = badCharSkip_ !== undefined ? badCharSkip_ : ($arrayType($Int, 256)).zero();
		this.goodSuffixSkip = goodSuffixSkip_ !== undefined ? goodSuffixSkip_ : ($sliceType($Int)).nil;
	});
	IndexByte = $pkg.IndexByte = function(s, c) {
		return $parseInt(s.indexOf($global.String.fromCharCode(c))) >> 0;
	};
	Reader.Ptr.prototype.Len = function() {
		var r, x, x$1, x$2, x$3, x$4;
		r = this;
		if ((x = r.i, x$1 = new $Int64(0, r.s.length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			return 0;
		}
		return ((x$2 = (x$3 = new $Int64(0, r.s.length), x$4 = r.i, new $Int64(x$3.$high - x$4.$high, x$3.$low - x$4.$low)), x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0);
	};
	Reader.prototype.Len = function() { return this.$val.Len(); };
	Reader.Ptr.prototype.Read = function(b) {
		var n = 0, err = $ifaceNil, r, _tmp, _tmp$1, x, x$1, _tmp$2, _tmp$3, x$2, x$3;
		r = this;
		if (b.$length === 0) {
			_tmp = 0; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		if ((x = r.i, x$1 = new $Int64(0, r.s.length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp$2 = 0; _tmp$3 = io.EOF; n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		r.prevRune = -1;
		n = $copyString(b, r.s.substring($flatten64(r.i)));
		r.i = (x$2 = r.i, x$3 = new $Int64(0, n), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		return [n, err];
	};
	Reader.prototype.Read = function(b) { return this.$val.Read(b); };
	Reader.Ptr.prototype.ReadAt = function(b, off) {
		var n = 0, err = $ifaceNil, r, _tmp, _tmp$1, x, _tmp$2, _tmp$3;
		r = this;
		if ((off.$high < 0 || (off.$high === 0 && off.$low < 0))) {
			_tmp = 0; _tmp$1 = errors.New("strings.Reader.ReadAt: negative offset"); n = _tmp; err = _tmp$1;
			return [n, err];
		}
		if ((x = new $Int64(0, r.s.length), (off.$high > x.$high || (off.$high === x.$high && off.$low >= x.$low)))) {
			_tmp$2 = 0; _tmp$3 = io.EOF; n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		n = $copyString(b, r.s.substring($flatten64(off)));
		if (n < b.$length) {
			err = io.EOF;
		}
		return [n, err];
	};
	Reader.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	Reader.Ptr.prototype.ReadByte = function() {
		var b = 0, err = $ifaceNil, r, x, x$1, _tmp, _tmp$1, x$2, x$3;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = new $Int64(0, r.s.length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = 0; _tmp$1 = io.EOF; b = _tmp; err = _tmp$1;
			return [b, err];
		}
		b = r.s.charCodeAt($flatten64(r.i));
		r.i = (x$2 = r.i, x$3 = new $Int64(0, 1), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		return [b, err];
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.Ptr.prototype.UnreadByte = function() {
		var r, x, x$1, x$2;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, (x.$high < 0 || (x.$high === 0 && x.$low <= 0)))) {
			return errors.New("strings.Reader.UnreadByte: at beginning of string");
		}
		r.i = (x$1 = r.i, x$2 = new $Int64(0, 1), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
		return $ifaceNil;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.Ptr.prototype.ReadRune = function() {
		var ch = 0, size = 0, err = $ifaceNil, r, x, x$1, _tmp, _tmp$1, _tmp$2, x$2, c, x$3, x$4, _tmp$3, _tmp$4, _tmp$5, _tuple, x$5, x$6;
		r = this;
		if ((x = r.i, x$1 = new $Int64(0, r.s.length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			r.prevRune = -1;
			_tmp = 0; _tmp$1 = 0; _tmp$2 = io.EOF; ch = _tmp; size = _tmp$1; err = _tmp$2;
			return [ch, size, err];
		}
		r.prevRune = ((x$2 = r.i, x$2.$low + ((x$2.$high >> 31) * 4294967296)) >> 0);
		c = r.s.charCodeAt($flatten64(r.i));
		if (c < 128) {
			r.i = (x$3 = r.i, x$4 = new $Int64(0, 1), new $Int64(x$3.$high + x$4.$high, x$3.$low + x$4.$low));
			_tmp$3 = (c >> 0); _tmp$4 = 1; _tmp$5 = $ifaceNil; ch = _tmp$3; size = _tmp$4; err = _tmp$5;
			return [ch, size, err];
		}
		_tuple = utf8.DecodeRuneInString(r.s.substring($flatten64(r.i))); ch = _tuple[0]; size = _tuple[1];
		r.i = (x$5 = r.i, x$6 = new $Int64(0, size), new $Int64(x$5.$high + x$6.$high, x$5.$low + x$6.$low));
		return [ch, size, err];
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.Ptr.prototype.UnreadRune = function() {
		var r;
		r = this;
		if (r.prevRune < 0) {
			return errors.New("strings.Reader.UnreadRune: previous operation was not ReadRune");
		}
		r.i = new $Int64(0, r.prevRune);
		r.prevRune = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.Ptr.prototype.Seek = function(offset, whence) {
		var r, abs, _ref, x, x$1;
		r = this;
		r.prevRune = -1;
		abs = new $Int64(0, 0);
		_ref = whence;
		if (_ref === 0) {
			abs = offset;
		} else if (_ref === 1) {
			abs = (x = r.i, new $Int64(x.$high + offset.$high, x.$low + offset.$low));
		} else if (_ref === 2) {
			abs = (x$1 = new $Int64(0, r.s.length), new $Int64(x$1.$high + offset.$high, x$1.$low + offset.$low));
		} else {
			return [new $Int64(0, 0), errors.New("strings.Reader.Seek: invalid whence")];
		}
		if ((abs.$high < 0 || (abs.$high === 0 && abs.$low < 0))) {
			return [new $Int64(0, 0), errors.New("strings.Reader.Seek: negative position")];
		}
		r.i = abs;
		return [abs, $ifaceNil];
	};
	Reader.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	Reader.Ptr.prototype.WriteTo = function(w) {
		var n = new $Int64(0, 0), err = $ifaceNil, r, x, x$1, _tmp, _tmp$1, s, _tuple, m, x$2, x$3;
		r = this;
		r.prevRune = -1;
		if ((x = r.i, x$1 = new $Int64(0, r.s.length), (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low >= x$1.$low)))) {
			_tmp = new $Int64(0, 0); _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		s = r.s.substring($flatten64(r.i));
		_tuple = io.WriteString(w, s); m = _tuple[0]; err = _tuple[1];
		if (m > s.length) {
			$panic(new $String("strings.Reader.WriteTo: invalid WriteString count"));
		}
		r.i = (x$2 = r.i, x$3 = new $Int64(0, m), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		n = new $Int64(0, m);
		if (!((m === s.length)) && $interfaceIsEqual(err, $ifaceNil)) {
			err = io.ErrShortWrite;
		}
		return [n, err];
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	NewReader = $pkg.NewReader = function(s) {
		return new Reader.Ptr(s, new $Int64(0, 0), -1);
	};
	byteBitmap.prototype.set = function(b) {
		var m, _lhs, _index, y;
		m = this.$val !== undefined ? this.$val : this;
		_lhs = m; _index = b >>> 5 << 24 >>> 24; _lhs.nilCheck, (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index] = ((_lhs.nilCheck, ((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index])) | (((y = (((b & 31) >>> 0)), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0;
	};
	$ptrType(byteBitmap).prototype.set = function(b) { return (new byteBitmap(this.$get())).set(b); };
	NewReplacer = $pkg.NewReplacer = function(oldnew) {
		var _r, allNewBytes, i, x, bb, i$1, _tmp, _tmp$1, x$1, o, n, x$2, x$3, y, x$4, bs, i$2, _tmp$2, _tmp$3, x$5, o$1, new$1, x$6, x$7, y$1, x$8;
		if ((_r = oldnew.$length % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 1) {
			$panic(new $String("strings.NewReplacer: odd argument count"));
		}
		if ((oldnew.$length === 2) && ((0 < 0 || 0 >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + 0]).length > 1) {
			return new Replacer.Ptr(makeSingleStringReplacer(((0 < 0 || 0 >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + 0]), ((1 < 0 || 1 >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + 1])));
		}
		allNewBytes = true;
		i = 0;
		while (i < oldnew.$length) {
			if (!((((i < 0 || i >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + i]).length === 1))) {
				return new Replacer.Ptr(makeGenericReplacer(oldnew));
			}
			if (!(((x = i + 1 >> 0, ((x < 0 || x >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + x])).length === 1))) {
				allNewBytes = false;
			}
			i = i + (2) >> 0;
		}
		if (allNewBytes) {
			bb = new byteReplacer.Ptr(byteBitmap.zero(), ($arrayType($Uint8, 256)).zero());
			i$1 = 0;
			while (i$1 < oldnew.$length) {
				_tmp = ((i$1 < 0 || i$1 >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + i$1]).charCodeAt(0); _tmp$1 = (x$1 = i$1 + 1 >> 0, ((x$1 < 0 || x$1 >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + x$1])).charCodeAt(0); o = _tmp; n = _tmp$1;
				if (!(((((x$2 = bb.old, x$3 = o >>> 5 << 24 >>> 24, ((x$3 < 0 || x$3 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[x$3])) & ((y = (((o & 31) >>> 0)), y < 32 ? (1 << y) : 0) >>> 0)) >>> 0) === 0))) {
					i$1 = i$1 + (2) >> 0;
					continue;
				}
				new ($ptrType(byteBitmap))(bb.old).set(o);
				(x$4 = bb.new$1, (o < 0 || o >= x$4.length) ? $throwRuntimeError("index out of range") : x$4[o] = n);
				i$1 = i$1 + (2) >> 0;
			}
			return new Replacer.Ptr(bb);
		}
		bs = new byteStringReplacer.Ptr(byteBitmap.zero(), ($arrayType(($sliceType($Uint8)), 256)).zero());
		i$2 = 0;
		while (i$2 < oldnew.$length) {
			_tmp$2 = ((i$2 < 0 || i$2 >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + i$2]).charCodeAt(0); _tmp$3 = (x$5 = i$2 + 1 >> 0, ((x$5 < 0 || x$5 >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + x$5])); o$1 = _tmp$2; new$1 = _tmp$3;
			if (!(((((x$6 = bs.old, x$7 = o$1 >>> 5 << 24 >>> 24, ((x$7 < 0 || x$7 >= x$6.length) ? $throwRuntimeError("index out of range") : x$6[x$7])) & ((y$1 = (((o$1 & 31) >>> 0)), y$1 < 32 ? (1 << y$1) : 0) >>> 0)) >>> 0) === 0))) {
				i$2 = i$2 + (2) >> 0;
				continue;
			}
			new ($ptrType(byteBitmap))(bs.old).set(o$1);
			(x$8 = bs.new$1, (o$1 < 0 || o$1 >= x$8.length) ? $throwRuntimeError("index out of range") : x$8[o$1] = new ($sliceType($Uint8))($stringToBytes(new$1)));
			i$2 = i$2 + (2) >> 0;
		}
		return new Replacer.Ptr(bs);
	};
	Replacer.Ptr.prototype.Replace = function(s) {
		var r;
		r = this;
		return r.r.Replace(s);
	};
	Replacer.prototype.Replace = function(s) { return this.$val.Replace(s); };
	Replacer.Ptr.prototype.WriteString = function(w, s) {
		var n = 0, err = $ifaceNil, r, _tuple;
		r = this;
		_tuple = r.r.WriteString(w, s); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	Replacer.prototype.WriteString = function(w, s) { return this.$val.WriteString(w, s); };
	trieNode.Ptr.prototype.add = function(key, val, priority, r) {
		var t, n, prefixNode, keyNode, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, next, x$8, x$9, m, x$10, x$11, x$12;
		t = this;
		if (key === "") {
			if (t.priority === 0) {
				t.value = val;
				t.priority = priority;
			}
			return;
		}
		if (!(t.prefix === "")) {
			n = 0;
			while (n < t.prefix.length && n < key.length) {
				if (!((t.prefix.charCodeAt(n) === key.charCodeAt(n)))) {
					break;
				}
				n = n + (1) >> 0;
			}
			if (n === t.prefix.length) {
				t.next.add(key.substring(n), val, priority, r);
			} else if (n === 0) {
				prefixNode = ($ptrType(trieNode)).nil;
				if (t.prefix.length === 1) {
					prefixNode = t.next;
				} else {
					prefixNode = new trieNode.Ptr("", 0, t.prefix.substring(1), t.next, ($sliceType(($ptrType(trieNode)))).nil);
				}
				keyNode = new trieNode.Ptr();
				t.table = ($sliceType(($ptrType(trieNode)))).make(r.tableSize);
				(x = t.table, x$1 = (x$2 = r.mapping, x$3 = t.prefix.charCodeAt(0), ((x$3 < 0 || x$3 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[x$3])), (x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1] = prefixNode);
				(x$4 = t.table, x$5 = (x$6 = r.mapping, x$7 = key.charCodeAt(0), ((x$7 < 0 || x$7 >= x$6.length) ? $throwRuntimeError("index out of range") : x$6[x$7])), (x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5] = keyNode);
				t.prefix = "";
				t.next = ($ptrType(trieNode)).nil;
				keyNode.add(key.substring(1), val, priority, r);
			} else {
				next = new trieNode.Ptr("", 0, t.prefix.substring(n), t.next, ($sliceType(($ptrType(trieNode)))).nil);
				t.prefix = t.prefix.substring(0, n);
				t.next = next;
				next.add(key.substring(n), val, priority, r);
			}
		} else if (!(t.table === ($sliceType(($ptrType(trieNode)))).nil)) {
			m = (x$8 = r.mapping, x$9 = key.charCodeAt(0), ((x$9 < 0 || x$9 >= x$8.length) ? $throwRuntimeError("index out of range") : x$8[x$9]));
			if ((x$10 = t.table, ((m < 0 || m >= x$10.$length) ? $throwRuntimeError("index out of range") : x$10.$array[x$10.$offset + m])) === ($ptrType(trieNode)).nil) {
				(x$11 = t.table, (m < 0 || m >= x$11.$length) ? $throwRuntimeError("index out of range") : x$11.$array[x$11.$offset + m] = new trieNode.Ptr());
			}
			(x$12 = t.table, ((m < 0 || m >= x$12.$length) ? $throwRuntimeError("index out of range") : x$12.$array[x$12.$offset + m])).add(key.substring(1), val, priority, r);
		} else {
			t.prefix = key;
			t.next = new trieNode.Ptr();
			t.next.add("", val, priority, r);
		}
	};
	trieNode.prototype.add = function(key, val, priority, r) { return this.$val.add(key, val, priority, r); };
	genericReplacer.Ptr.prototype.lookup = function(s, ignoreRoot) {
		var val = "", keylen = 0, found = false, r, bestPriority, node, n, x, x$1, index, x$2;
		r = this;
		bestPriority = 0;
		node = r.root;
		n = 0;
		while (!(node === ($ptrType(trieNode)).nil)) {
			if (node.priority > bestPriority && !(ignoreRoot && node === r.root)) {
				bestPriority = node.priority;
				val = node.value;
				keylen = n;
				found = true;
			}
			if (s === "") {
				break;
			}
			if (!(node.table === ($sliceType(($ptrType(trieNode)))).nil)) {
				index = (x = r.mapping, x$1 = s.charCodeAt(0), ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1]));
				if ((index >> 0) === r.tableSize) {
					break;
				}
				node = (x$2 = node.table, ((index < 0 || index >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + index]));
				s = s.substring(1);
				n = n + (1) >> 0;
			} else if (!(node.prefix === "") && HasPrefix(s, node.prefix)) {
				n = n + (node.prefix.length) >> 0;
				s = s.substring(node.prefix.length);
				node = node.next;
			} else {
				break;
			}
		}
		return [val, keylen, found];
	};
	genericReplacer.prototype.lookup = function(s, ignoreRoot) { return this.$val.lookup(s, ignoreRoot); };
	makeGenericReplacer = function(oldnew) {
		var r, i, key, j, x, x$1, _ref, _i, b, index, _ref$1, _i$1, i$1, b$1, x$2, x$3, i$2, x$4;
		r = new genericReplacer.Ptr();
		i = 0;
		while (i < oldnew.$length) {
			key = ((i < 0 || i >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + i]);
			j = 0;
			while (j < key.length) {
				(x = r.mapping, x$1 = key.charCodeAt(j), (x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1] = 1);
				j = j + (1) >> 0;
			}
			i = i + (2) >> 0;
		}
		_ref = r.mapping;
		_i = 0;
		while (_i < 256) {
			b = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
			r.tableSize = r.tableSize + ((b >> 0)) >> 0;
			_i++;
		}
		index = 0;
		_ref$1 = r.mapping;
		_i$1 = 0;
		while (_i$1 < 256) {
			i$1 = _i$1;
			b$1 = ((_i$1 < 0 || _i$1 >= _ref$1.length) ? $throwRuntimeError("index out of range") : _ref$1[_i$1]);
			if (b$1 === 0) {
				(x$2 = r.mapping, (i$1 < 0 || i$1 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i$1] = (r.tableSize << 24 >>> 24));
			} else {
				(x$3 = r.mapping, (i$1 < 0 || i$1 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[i$1] = index);
				index = index + (1) << 24 >>> 24;
			}
			_i$1++;
		}
		r.root.table = ($sliceType(($ptrType(trieNode)))).make(r.tableSize);
		i$2 = 0;
		while (i$2 < oldnew.$length) {
			r.root.add(((i$2 < 0 || i$2 >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + i$2]), (x$4 = i$2 + 1 >> 0, ((x$4 < 0 || x$4 >= oldnew.$length) ? $throwRuntimeError("index out of range") : oldnew.$array[oldnew.$offset + x$4])), oldnew.$length - i$2 >> 0, r);
			i$2 = i$2 + (2) >> 0;
		}
		return r;
	};
	$ptrType(appendSliceWriter).prototype.Write = function(p) {
		var w;
		w = this;
		w.$set($appendSlice(w.$get(), p));
		return [p.$length, $ifaceNil];
	};
	$ptrType(appendSliceWriter).prototype.WriteString = function(s) {
		var w;
		w = this;
		w.$set($appendSlice(w.$get(), new appendSliceWriter($stringToBytes(s))));
		return [s.length, $ifaceNil];
	};
	stringWriter.Ptr.prototype.WriteString = function(s) {
		var w;
		w = new stringWriter.Ptr(); $copy(w, this, stringWriter);
		return w.w.Write(new ($sliceType($Uint8))($stringToBytes(s)));
	};
	stringWriter.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	getStringWriter = function(w) {
		var _tuple, sw, ok, x;
		_tuple = $assertType(w, stringWriterIface, true); sw = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			sw = (x = new stringWriter.Ptr(w), new x.constructor.Struct(x));
		}
		return sw;
	};
	genericReplacer.Ptr.prototype.Replace = function(s) {
		var r, buf;
		r = this;
		buf = appendSliceWriter.make(0, s.length);
		r.WriteString(new ($ptrType(appendSliceWriter))(function() { return buf; }, function($v) { buf = $v; }), s);
		return $bytesToString(buf);
	};
	genericReplacer.prototype.Replace = function(s) { return this.$val.Replace(s); };
	genericReplacer.Ptr.prototype.WriteString = function(w, s) {
		var n = 0, err = $ifaceNil, r, sw, _tmp, _tmp$1, last, wn, prevMatchEmpty, i, _tuple, val, keylen, match, _tuple$1, _tuple$2, _tuple$3;
		r = this;
		sw = getStringWriter(w);
		_tmp = 0; _tmp$1 = 0; last = _tmp; wn = _tmp$1;
		prevMatchEmpty = false;
		i = 0;
		while (i <= s.length) {
			_tuple = r.lookup(s.substring(i), prevMatchEmpty); val = _tuple[0]; keylen = _tuple[1]; match = _tuple[2];
			prevMatchEmpty = match && (keylen === 0);
			if (match) {
				_tuple$1 = sw.WriteString(s.substring(last, i)); wn = _tuple$1[0]; err = _tuple$1[1];
				n = n + (wn) >> 0;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return [n, err];
				}
				_tuple$2 = sw.WriteString(val); wn = _tuple$2[0]; err = _tuple$2[1];
				n = n + (wn) >> 0;
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return [n, err];
				}
				i = i + (keylen) >> 0;
				last = i;
				continue;
			}
			i = i + (1) >> 0;
		}
		if (!((last === s.length))) {
			_tuple$3 = sw.WriteString(s.substring(last)); wn = _tuple$3[0]; err = _tuple$3[1];
			n = n + (wn) >> 0;
		}
		return [n, err];
	};
	genericReplacer.prototype.WriteString = function(w, s) { return this.$val.WriteString(w, s); };
	makeSingleStringReplacer = function(pattern, value) {
		return new singleStringReplacer.Ptr(makeStringFinder(pattern), value);
	};
	singleStringReplacer.Ptr.prototype.Replace = function(s) {
		var r, buf, _tmp, _tmp$1, i, matched, match;
		r = this;
		buf = ($sliceType($Uint8)).nil;
		_tmp = 0; _tmp$1 = false; i = _tmp; matched = _tmp$1;
		while (true) {
			match = r.finder.next(s.substring(i));
			if (match === -1) {
				break;
			}
			matched = true;
			buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes(s.substring(i, (i + match >> 0)))));
			buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes(r.value)));
			i = i + ((match + r.finder.pattern.length >> 0)) >> 0;
		}
		if (!matched) {
			return s;
		}
		buf = $appendSlice(buf, new ($sliceType($Uint8))($stringToBytes(s.substring(i))));
		return $bytesToString(buf);
	};
	singleStringReplacer.prototype.Replace = function(s) { return this.$val.Replace(s); };
	singleStringReplacer.Ptr.prototype.WriteString = function(w, s) {
		var n = 0, err = $ifaceNil, r, sw, _tmp, _tmp$1, i, wn, match, _tuple, _tuple$1, _tuple$2;
		r = this;
		sw = getStringWriter(w);
		_tmp = 0; _tmp$1 = 0; i = _tmp; wn = _tmp$1;
		while (true) {
			match = r.finder.next(s.substring(i));
			if (match === -1) {
				break;
			}
			_tuple = sw.WriteString(s.substring(i, (i + match >> 0))); wn = _tuple[0]; err = _tuple[1];
			n = n + (wn) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [n, err];
			}
			_tuple$1 = sw.WriteString(r.value); wn = _tuple$1[0]; err = _tuple$1[1];
			n = n + (wn) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [n, err];
			}
			i = i + ((match + r.finder.pattern.length >> 0)) >> 0;
		}
		_tuple$2 = sw.WriteString(s.substring(i)); wn = _tuple$2[0]; err = _tuple$2[1];
		n = n + (wn) >> 0;
		return [n, err];
	};
	singleStringReplacer.prototype.WriteString = function(w, s) { return this.$val.WriteString(w, s); };
	byteReplacer.Ptr.prototype.Replace = function(s) {
		var r, buf, i, b, x, x$1, y, x$2;
		r = this;
		buf = ($sliceType($Uint8)).nil;
		i = 0;
		while (i < s.length) {
			b = s.charCodeAt(i);
			if (!(((((x = r.old, x$1 = b >>> 5 << 24 >>> 24, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1])) & ((y = (((b & 31) >>> 0)), y < 32 ? (1 << y) : 0) >>> 0)) >>> 0) === 0))) {
				if (buf === ($sliceType($Uint8)).nil) {
					buf = new ($sliceType($Uint8))($stringToBytes(s));
				}
				(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = (x$2 = r.new$1, ((b < 0 || b >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[b]));
			}
			i = i + (1) >> 0;
		}
		if (buf === ($sliceType($Uint8)).nil) {
			return s;
		}
		return $bytesToString(buf);
	};
	byteReplacer.prototype.Replace = function(s) { return this.$val.Replace(s); };
	byteReplacer.Ptr.prototype.WriteString = function(w, s) {
		var n = 0, err = $ifaceNil, r, bufsize, buf, ncopy, _ref, _i, i, b, x, x$1, y, x$2, _tuple, wn, err$1, _tmp, _tmp$1, _tmp$2, _tmp$3;
		r = this;
		bufsize = 32768;
		if (s.length < bufsize) {
			bufsize = s.length;
		}
		buf = ($sliceType($Uint8)).make(bufsize);
		while (s.length > 0) {
			ncopy = $copyString(buf, s);
			s = s.substring(ncopy);
			_ref = $subslice(buf, 0, ncopy);
			_i = 0;
			while (_i < _ref.$length) {
				i = _i;
				b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (!(((((x = r.old, x$1 = b >>> 5 << 24 >>> 24, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1])) & ((y = (((b & 31) >>> 0)), y < 32 ? (1 << y) : 0) >>> 0)) >>> 0) === 0))) {
					(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = (x$2 = r.new$1, ((b < 0 || b >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[b]));
				}
				_i++;
			}
			_tuple = w.Write($subslice(buf, 0, ncopy)); wn = _tuple[0]; err$1 = _tuple[1];
			n = n + (wn) >> 0;
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp = n; _tmp$1 = err$1; n = _tmp; err = _tmp$1;
				return [n, err];
			}
		}
		_tmp$2 = n; _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;
		return [n, err];
	};
	byteReplacer.prototype.WriteString = function(w, s) { return this.$val.WriteString(w, s); };
	byteStringReplacer.Ptr.prototype.Replace = function(s) {
		var r, newSize, anyChanges, i, b, x, x$1, y, x$2, buf, bi, i$1, b$1, x$3, x$4, y$1, x$5, n;
		r = this;
		newSize = 0;
		anyChanges = false;
		i = 0;
		while (i < s.length) {
			b = s.charCodeAt(i);
			if (!(((((x = r.old, x$1 = b >>> 5 << 24 >>> 24, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1])) & ((y = (((b & 31) >>> 0)), y < 32 ? (1 << y) : 0) >>> 0)) >>> 0) === 0))) {
				anyChanges = true;
				newSize = newSize + ((x$2 = r.new$1, ((b < 0 || b >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[b])).$length) >> 0;
			} else {
				newSize = newSize + (1) >> 0;
			}
			i = i + (1) >> 0;
		}
		if (!anyChanges) {
			return s;
		}
		buf = ($sliceType($Uint8)).make(newSize);
		bi = buf;
		i$1 = 0;
		while (i$1 < s.length) {
			b$1 = s.charCodeAt(i$1);
			if (!(((((x$3 = r.old, x$4 = b$1 >>> 5 << 24 >>> 24, ((x$4 < 0 || x$4 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[x$4])) & ((y$1 = (((b$1 & 31) >>> 0)), y$1 < 32 ? (1 << y$1) : 0) >>> 0)) >>> 0) === 0))) {
				n = $copySlice(bi, (x$5 = r.new$1, ((b$1 < 0 || b$1 >= x$5.length) ? $throwRuntimeError("index out of range") : x$5[b$1])));
				bi = $subslice(bi, n);
			} else {
				(0 < 0 || 0 >= bi.$length) ? $throwRuntimeError("index out of range") : bi.$array[bi.$offset + 0] = b$1;
				bi = $subslice(bi, 1);
			}
			i$1 = i$1 + (1) >> 0;
		}
		return $bytesToString(buf);
	};
	byteStringReplacer.prototype.Replace = function(s) { return this.$val.Replace(s); };
	byteStringReplacer.Ptr.prototype.WriteString = function(w, s) {
		var n = 0, err = $ifaceNil, r, bufsize, buf, bi, i, b, new$1, x, x$1, y, x$2, _tuple, nw, err$1, _tmp, _tmp$1, _tuple$1, nw$1, err$2, _tmp$2, _tmp$3, _tuple$2, nw$2, err$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7;
		r = this;
		bufsize = 32768;
		if (s.length < bufsize) {
			bufsize = s.length;
		}
		buf = ($sliceType($Uint8)).make(bufsize);
		bi = $subslice(buf, 0, 0);
		i = 0;
		while (i < s.length) {
			b = s.charCodeAt(i);
			new$1 = ($sliceType($Uint8)).nil;
			if (!(((((x = r.old, x$1 = b >>> 5 << 24 >>> 24, ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1])) & ((y = (((b & 31) >>> 0)), y < 32 ? (1 << y) : 0) >>> 0)) >>> 0) === 0))) {
				new$1 = (x$2 = r.new$1, ((b < 0 || b >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[b]));
			} else {
				bi = $append(bi, b);
			}
			if ((bi.$length === bi.$capacity) || (bi.$length > 0 && new$1.$length > 0)) {
				_tuple = w.Write(bi); nw = _tuple[0]; err$1 = _tuple[1];
				n = n + (nw) >> 0;
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					_tmp = n; _tmp$1 = err$1; n = _tmp; err = _tmp$1;
					return [n, err];
				}
				bi = $subslice(buf, 0, 0);
			}
			if (new$1.$length > 0) {
				_tuple$1 = w.Write(new$1); nw$1 = _tuple$1[0]; err$2 = _tuple$1[1];
				n = n + (nw$1) >> 0;
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					_tmp$2 = n; _tmp$3 = err$2; n = _tmp$2; err = _tmp$3;
					return [n, err];
				}
			}
			i = i + (1) >> 0;
		}
		if (bi.$length > 0) {
			_tuple$2 = w.Write(bi); nw$2 = _tuple$2[0]; err$3 = _tuple$2[1];
			n = n + (nw$2) >> 0;
			if (!($interfaceIsEqual(err$3, $ifaceNil))) {
				_tmp$4 = n; _tmp$5 = err$3; n = _tmp$4; err = _tmp$5;
				return [n, err];
			}
		}
		_tmp$6 = n; _tmp$7 = $ifaceNil; n = _tmp$6; err = _tmp$7;
		return [n, err];
	};
	byteStringReplacer.prototype.WriteString = function(w, s) { return this.$val.WriteString(w, s); };
	makeStringFinder = function(pattern) {
		var f, last, _ref, _i, i, x, i$1, x$1, x$2, lastPrefix, i$2, x$3, i$3, lenSuffix, x$4, x$5;
		f = new stringFinder.Ptr(pattern, ($arrayType($Int, 256)).zero(), ($sliceType($Int)).make(pattern.length));
		last = pattern.length - 1 >> 0;
		_ref = f.badCharSkip;
		_i = 0;
		while (_i < 256) {
			i = _i;
			(x = f.badCharSkip, (i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i] = pattern.length);
			_i++;
		}
		i$1 = 0;
		while (i$1 < last) {
			(x$1 = f.badCharSkip, x$2 = pattern.charCodeAt(i$1), (x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2] = last - i$1 >> 0);
			i$1 = i$1 + (1) >> 0;
		}
		lastPrefix = last;
		i$2 = last;
		while (i$2 >= 0) {
			if (HasPrefix(pattern, pattern.substring((i$2 + 1 >> 0)))) {
				lastPrefix = i$2 + 1 >> 0;
			}
			(x$3 = f.goodSuffixSkip, (i$2 < 0 || i$2 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i$2] = (lastPrefix + last >> 0) - i$2 >> 0);
			i$2 = i$2 - (1) >> 0;
		}
		i$3 = 0;
		while (i$3 < last) {
			lenSuffix = longestCommonSuffix(pattern, pattern.substring(1, (i$3 + 1 >> 0)));
			if (!((pattern.charCodeAt((i$3 - lenSuffix >> 0)) === pattern.charCodeAt((last - lenSuffix >> 0))))) {
				(x$4 = f.goodSuffixSkip, x$5 = last - lenSuffix >> 0, (x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5] = (lenSuffix + last >> 0) - i$3 >> 0);
			}
			i$3 = i$3 + (1) >> 0;
		}
		return f;
	};
	longestCommonSuffix = function(a, b) {
		var i = 0;
		while (i < a.length && i < b.length) {
			if (!((a.charCodeAt(((a.length - 1 >> 0) - i >> 0)) === b.charCodeAt(((b.length - 1 >> 0) - i >> 0))))) {
				break;
			}
			i = i + (1) >> 0;
		}
		return i;
	};
	stringFinder.Ptr.prototype.next = function(text) {
		var f, i, j, x, x$1, x$2;
		f = this;
		i = f.pattern.length - 1 >> 0;
		while (i < text.length) {
			j = f.pattern.length - 1 >> 0;
			while (j >= 0 && (text.charCodeAt(i) === f.pattern.charCodeAt(j))) {
				i = i - (1) >> 0;
				j = j - (1) >> 0;
			}
			if (j < 0) {
				return i + 1 >> 0;
			}
			i = i + (max((x = f.badCharSkip, x$1 = text.charCodeAt(i), ((x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1])), (x$2 = f.goodSuffixSkip, ((j < 0 || j >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + j])))) >> 0;
		}
		return -1;
	};
	stringFinder.prototype.next = function(text) { return this.$val.next(text); };
	max = function(a, b) {
		if (a > b) {
			return a;
		}
		return b;
	};
	explode = function(s, n) {
		var l, a, size, ch, _tmp, _tmp$1, i, cur, _tuple;
		if (n === 0) {
			return ($sliceType($String)).nil;
		}
		l = utf8.RuneCountInString(s);
		if (n <= 0 || n > l) {
			n = l;
		}
		a = ($sliceType($String)).make(n);
		size = 0;
		ch = 0;
		_tmp = 0; _tmp$1 = 0; i = _tmp; cur = _tmp$1;
		while ((i + 1 >> 0) < n) {
			_tuple = utf8.DecodeRuneInString(s.substring(cur)); ch = _tuple[0]; size = _tuple[1];
			if (ch === 65533) {
				(i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = "\xEF\xBF\xBD";
			} else {
				(i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = s.substring(cur, (cur + size >> 0));
			}
			cur = cur + (size) >> 0;
			i = i + (1) >> 0;
		}
		if (cur < s.length) {
			(i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = s.substring(cur);
		}
		return a;
	};
	hashstr = function(sep) {
		var hash, i, _tmp, _tmp$1, pow, sq, i$1, x, x$1;
		hash = 0;
		i = 0;
		while (i < sep.length) {
			hash = ((((hash >>> 16 << 16) * 16777619 >>> 0) + (hash << 16 >>> 16) * 16777619) >>> 0) + (sep.charCodeAt(i) >>> 0) >>> 0;
			i = i + (1) >> 0;
		}
		_tmp = 1; _tmp$1 = 16777619; pow = _tmp; sq = _tmp$1;
		i$1 = sep.length;
		while (i$1 > 0) {
			if (!(((i$1 & 1) === 0))) {
				pow = (x = sq, (((pow >>> 16 << 16) * x >>> 0) + (pow << 16 >>> 16) * x) >>> 0);
			}
			sq = (x$1 = sq, (((sq >>> 16 << 16) * x$1 >>> 0) + (sq << 16 >>> 16) * x$1) >>> 0);
			i$1 = (i$1 >> $min((1), 31)) >> 0;
		}
		return [hash, pow];
	};
	Count = $pkg.Count = function(s, sep) {
		var n, c, i, _tuple, hashsep, pow, h, i$1, lastmatch, i$2, x, x$1;
		n = 0;
		if (sep.length === 0) {
			return utf8.RuneCountInString(s) + 1 >> 0;
		} else if (sep.length === 1) {
			c = sep.charCodeAt(0);
			i = 0;
			while (i < s.length) {
				if (s.charCodeAt(i) === c) {
					n = n + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			return n;
		} else if (sep.length > s.length) {
			return 0;
		} else if (sep.length === s.length) {
			if (sep === s) {
				return 1;
			}
			return 0;
		}
		_tuple = hashstr(sep); hashsep = _tuple[0]; pow = _tuple[1];
		h = 0;
		i$1 = 0;
		while (i$1 < sep.length) {
			h = ((((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0) + (s.charCodeAt(i$1) >>> 0) >>> 0;
			i$1 = i$1 + (1) >> 0;
		}
		lastmatch = 0;
		if ((h === hashsep) && s.substring(0, sep.length) === sep) {
			n = n + (1) >> 0;
			lastmatch = sep.length;
		}
		i$2 = sep.length;
		while (i$2 < s.length) {
			h = (x = 16777619, (((h >>> 16 << 16) * x >>> 0) + (h << 16 >>> 16) * x) >>> 0);
			h = h + ((s.charCodeAt(i$2) >>> 0)) >>> 0;
			h = h - ((x$1 = (s.charCodeAt((i$2 - sep.length >> 0)) >>> 0), (((pow >>> 16 << 16) * x$1 >>> 0) + (pow << 16 >>> 16) * x$1) >>> 0)) >>> 0;
			i$2 = i$2 + (1) >> 0;
			if ((h === hashsep) && lastmatch <= (i$2 - sep.length >> 0) && s.substring((i$2 - sep.length >> 0), i$2) === sep) {
				n = n + (1) >> 0;
				lastmatch = i$2;
			}
		}
		return n;
	};
	Contains = $pkg.Contains = function(s, substr) {
		return Index(s, substr) >= 0;
	};
	ContainsRune = $pkg.ContainsRune = function(s, r) {
		return IndexRune(s, r) >= 0;
	};
	Index = $pkg.Index = function(s, sep) {
		var n, _tuple, hashsep, pow, h, i, i$1, x, x$1;
		n = sep.length;
		if (n === 0) {
			return 0;
		} else if (n === 1) {
			return IndexByte(s, sep.charCodeAt(0));
		} else if (n === s.length) {
			if (sep === s) {
				return 0;
			}
			return -1;
		} else if (n > s.length) {
			return -1;
		}
		_tuple = hashstr(sep); hashsep = _tuple[0]; pow = _tuple[1];
		h = 0;
		i = 0;
		while (i < n) {
			h = ((((h >>> 16 << 16) * 16777619 >>> 0) + (h << 16 >>> 16) * 16777619) >>> 0) + (s.charCodeAt(i) >>> 0) >>> 0;
			i = i + (1) >> 0;
		}
		if ((h === hashsep) && s.substring(0, n) === sep) {
			return 0;
		}
		i$1 = n;
		while (i$1 < s.length) {
			h = (x = 16777619, (((h >>> 16 << 16) * x >>> 0) + (h << 16 >>> 16) * x) >>> 0);
			h = h + ((s.charCodeAt(i$1) >>> 0)) >>> 0;
			h = h - ((x$1 = (s.charCodeAt((i$1 - n >> 0)) >>> 0), (((pow >>> 16 << 16) * x$1 >>> 0) + (pow << 16 >>> 16) * x$1) >>> 0)) >>> 0;
			i$1 = i$1 + (1) >> 0;
			if ((h === hashsep) && s.substring((i$1 - n >> 0), i$1) === sep) {
				return i$1 - n >> 0;
			}
		}
		return -1;
	};
	LastIndex = $pkg.LastIndex = function(s, sep) {
		var n, c, i, i$1;
		n = sep.length;
		if (n === 0) {
			return s.length;
		}
		c = sep.charCodeAt(0);
		if (n === 1) {
			i = s.length - 1 >> 0;
			while (i >= 0) {
				if (s.charCodeAt(i) === c) {
					return i;
				}
				i = i - (1) >> 0;
			}
			return -1;
		}
		i$1 = s.length - n >> 0;
		while (i$1 >= 0) {
			if ((s.charCodeAt(i$1) === c) && s.substring(i$1, (i$1 + n >> 0)) === sep) {
				return i$1;
			}
			i$1 = i$1 - (1) >> 0;
		}
		return -1;
	};
	IndexRune = $pkg.IndexRune = function(s, r) {
		var b, i, _ref, _i, _rune, i$1, c;
		if (r < 128) {
			b = (r << 24 >>> 24);
			i = 0;
			while (i < s.length) {
				if (s.charCodeAt(i) === b) {
					return i;
				}
				i = i + (1) >> 0;
			}
		} else {
			_ref = s;
			_i = 0;
			while (_i < _ref.length) {
				_rune = $decodeRune(_ref, _i);
				i$1 = _i;
				c = _rune[0];
				if (c === r) {
					return i$1;
				}
				_i += _rune[1];
			}
		}
		return -1;
	};
	IndexAny = $pkg.IndexAny = function(s, chars) {
		var _ref, _i, _rune, i, c, _ref$1, _i$1, _rune$1, m;
		if (chars.length > 0) {
			_ref = s;
			_i = 0;
			while (_i < _ref.length) {
				_rune = $decodeRune(_ref, _i);
				i = _i;
				c = _rune[0];
				_ref$1 = chars;
				_i$1 = 0;
				while (_i$1 < _ref$1.length) {
					_rune$1 = $decodeRune(_ref$1, _i$1);
					m = _rune$1[0];
					if (c === m) {
						return i;
					}
					_i$1 += _rune$1[1];
				}
				_i += _rune[1];
			}
		}
		return -1;
	};
	genSplit = function(s, sep, sepSave, n) {
		var c, start, a, na, i;
		if (n === 0) {
			return ($sliceType($String)).nil;
		}
		if (sep === "") {
			return explode(s, n);
		}
		if (n < 0) {
			n = Count(s, sep) + 1 >> 0;
		}
		c = sep.charCodeAt(0);
		start = 0;
		a = ($sliceType($String)).make(n);
		na = 0;
		i = 0;
		while ((i + sep.length >> 0) <= s.length && (na + 1 >> 0) < n) {
			if ((s.charCodeAt(i) === c) && ((sep.length === 1) || s.substring(i, (i + sep.length >> 0)) === sep)) {
				(na < 0 || na >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + na] = s.substring(start, (i + sepSave >> 0));
				na = na + (1) >> 0;
				start = i + sep.length >> 0;
				i = i + ((sep.length - 1 >> 0)) >> 0;
			}
			i = i + (1) >> 0;
		}
		(na < 0 || na >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + na] = s.substring(start);
		return $subslice(a, 0, (na + 1 >> 0));
	};
	SplitN = $pkg.SplitN = function(s, sep, n) {
		return genSplit(s, sep, 0, n);
	};
	Split = $pkg.Split = function(s, sep) {
		return genSplit(s, sep, 0, -1);
	};
	Join = $pkg.Join = function(a, sep) {
		var x, x$1, n, i, b, bp, _ref, _i, s;
		if (a.$length === 0) {
			return "";
		}
		if (a.$length === 1) {
			return ((0 < 0 || 0 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]);
		}
		n = (x = sep.length, x$1 = (a.$length - 1 >> 0), (((x >>> 16 << 16) * x$1 >> 0) + (x << 16 >>> 16) * x$1) >> 0);
		i = 0;
		while (i < a.$length) {
			n = n + (((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i]).length) >> 0;
			i = i + (1) >> 0;
		}
		b = ($sliceType($Uint8)).make(n);
		bp = $copyString(b, ((0 < 0 || 0 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0]));
		_ref = $subslice(a, 1);
		_i = 0;
		while (_i < _ref.$length) {
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			bp = bp + ($copyString($subslice(b, bp), sep)) >> 0;
			bp = bp + ($copyString($subslice(b, bp), s)) >> 0;
			_i++;
		}
		return $bytesToString(b);
	};
	HasPrefix = $pkg.HasPrefix = function(s, prefix) {
		return s.length >= prefix.length && s.substring(0, prefix.length) === prefix;
	};
	HasSuffix = $pkg.HasSuffix = function(s, suffix) {
		return s.length >= suffix.length && s.substring((s.length - suffix.length >> 0)) === suffix;
	};
	Map = $pkg.Map = function(mapping, s) {
		var maxbytes, nbytes, b, _ref, _i, _rune, i, c, r, wid, nb;
		maxbytes = s.length;
		nbytes = 0;
		b = ($sliceType($Uint8)).nil;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			r = mapping(c);
			if (b === ($sliceType($Uint8)).nil) {
				if (r === c) {
					_i += _rune[1];
					continue;
				}
				b = ($sliceType($Uint8)).make(maxbytes);
				nbytes = $copyString(b, s.substring(0, i));
			}
			if (r >= 0) {
				wid = 1;
				if (r >= 128) {
					wid = utf8.RuneLen(r);
				}
				if ((nbytes + wid >> 0) > maxbytes) {
					maxbytes = ((((maxbytes >>> 16 << 16) * 2 >> 0) + (maxbytes << 16 >>> 16) * 2) >> 0) + 4 >> 0;
					nb = ($sliceType($Uint8)).make(maxbytes);
					$copySlice(nb, $subslice(b, 0, nbytes));
					b = nb;
				}
				nbytes = nbytes + (utf8.EncodeRune($subslice(b, nbytes, maxbytes), r)) >> 0;
			}
			_i += _rune[1];
		}
		if (b === ($sliceType($Uint8)).nil) {
			return s;
		}
		return $bytesToString($subslice(b, 0, nbytes));
	};
	ToUpper = $pkg.ToUpper = function(s) {
		return Map(unicode.ToUpper, s);
	};
	ToLower = $pkg.ToLower = function(s) {
		return Map(unicode.ToLower, s);
	};
	TrimLeftFunc = $pkg.TrimLeftFunc = function(s, f) {
		var i;
		i = indexFunc(s, f, false);
		if (i === -1) {
			return "";
		}
		return s.substring(i);
	};
	TrimRightFunc = $pkg.TrimRightFunc = function(s, f) {
		var i, _tuple, wid;
		i = lastIndexFunc(s, f, false);
		if (i >= 0 && s.charCodeAt(i) >= 128) {
			_tuple = utf8.DecodeRuneInString(s.substring(i)); wid = _tuple[1];
			i = i + (wid) >> 0;
		} else {
			i = i + (1) >> 0;
		}
		return s.substring(0, i);
	};
	TrimFunc = $pkg.TrimFunc = function(s, f) {
		return TrimRightFunc(TrimLeftFunc(s, f), f);
	};
	IndexFunc = $pkg.IndexFunc = function(s, f) {
		return indexFunc(s, f, true);
	};
	indexFunc = function(s, f, truth) {
		var start, wid, r, _tuple;
		start = 0;
		while (start < s.length) {
			wid = 1;
			r = (s.charCodeAt(start) >> 0);
			if (r >= 128) {
				_tuple = utf8.DecodeRuneInString(s.substring(start)); r = _tuple[0]; wid = _tuple[1];
			}
			if (f(r) === truth) {
				return start;
			}
			start = start + (wid) >> 0;
		}
		return -1;
	};
	lastIndexFunc = function(s, f, truth) {
		var i, _tuple, r, size;
		i = s.length;
		while (i > 0) {
			_tuple = utf8.DecodeLastRuneInString(s.substring(0, i)); r = _tuple[0]; size = _tuple[1];
			i = i - (size) >> 0;
			if (f(r) === truth) {
				return i;
			}
		}
		return -1;
	};
	makeCutsetFunc = function(cutset) {
		return (function(r) {
			return IndexRune(cutset, r) >= 0;
		});
	};
	TrimLeft = $pkg.TrimLeft = function(s, cutset) {
		if (s === "" || cutset === "") {
			return s;
		}
		return TrimLeftFunc(s, makeCutsetFunc(cutset));
	};
	TrimRight = $pkg.TrimRight = function(s, cutset) {
		if (s === "" || cutset === "") {
			return s;
		}
		return TrimRightFunc(s, makeCutsetFunc(cutset));
	};
	TrimSpace = $pkg.TrimSpace = function(s) {
		return TrimFunc(s, unicode.IsSpace);
	};
	TrimPrefix = $pkg.TrimPrefix = function(s, prefix) {
		if (HasPrefix(s, prefix)) {
			return s.substring(prefix.length);
		}
		return s;
	};
	Replace = $pkg.Replace = function(s, old, new$1, n) {
		var m, x, t, w, start, i, j, _tuple, wid;
		if (old === new$1 || (n === 0)) {
			return s;
		}
		m = Count(s, old);
		if (m === 0) {
			return s;
		} else if (n < 0 || m < n) {
			n = m;
		}
		t = ($sliceType($Uint8)).make((s.length + (x = (new$1.length - old.length >> 0), (((n >>> 16 << 16) * x >> 0) + (n << 16 >>> 16) * x) >> 0) >> 0));
		w = 0;
		start = 0;
		i = 0;
		while (i < n) {
			j = start;
			if (old.length === 0) {
				if (i > 0) {
					_tuple = utf8.DecodeRuneInString(s.substring(start)); wid = _tuple[1];
					j = j + (wid) >> 0;
				}
			} else {
				j = j + (Index(s.substring(start), old)) >> 0;
			}
			w = w + ($copyString($subslice(t, w), s.substring(start, j))) >> 0;
			w = w + ($copyString($subslice(t, w), new$1)) >> 0;
			start = j + old.length >> 0;
			i = i + (1) >> 0;
		}
		w = w + ($copyString($subslice(t, w), s.substring(start))) >> 0;
		return $bytesToString($subslice(t, 0, w));
	};
	EqualFold = $pkg.EqualFold = function(s, t) {
		var _tmp, _tmp$1, sr, tr, _tmp$2, _tmp$3, _tuple, r, size, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tuple$1, r$1, size$1, _tmp$8, _tmp$9, _tmp$10, _tmp$11, r$2;
		while (!(s === "") && !(t === "")) {
			_tmp = 0; _tmp$1 = 0; sr = _tmp; tr = _tmp$1;
			if (s.charCodeAt(0) < 128) {
				_tmp$2 = (s.charCodeAt(0) >> 0); _tmp$3 = s.substring(1); sr = _tmp$2; s = _tmp$3;
			} else {
				_tuple = utf8.DecodeRuneInString(s); r = _tuple[0]; size = _tuple[1];
				_tmp$4 = r; _tmp$5 = s.substring(size); sr = _tmp$4; s = _tmp$5;
			}
			if (t.charCodeAt(0) < 128) {
				_tmp$6 = (t.charCodeAt(0) >> 0); _tmp$7 = t.substring(1); tr = _tmp$6; t = _tmp$7;
			} else {
				_tuple$1 = utf8.DecodeRuneInString(t); r$1 = _tuple$1[0]; size$1 = _tuple$1[1];
				_tmp$8 = r$1; _tmp$9 = t.substring(size$1); tr = _tmp$8; t = _tmp$9;
			}
			if (tr === sr) {
				continue;
			}
			if (tr < sr) {
				_tmp$10 = sr; _tmp$11 = tr; tr = _tmp$10; sr = _tmp$11;
			}
			if (tr < 128 && 65 <= sr && sr <= 90) {
				if (tr === ((sr + 97 >> 0) - 65 >> 0)) {
					continue;
				}
				return false;
			}
			r$2 = unicode.SimpleFold(sr);
			while (!((r$2 === sr)) && r$2 < tr) {
				r$2 = unicode.SimpleFold(r$2);
			}
			if (r$2 === tr) {
				continue;
			}
			return false;
		}
		return s === t;
	};
	$pkg.$init = function() {
		($ptrType(Reader)).methods = [["Len", "Len", "", $funcType([], [$Int], false), -1], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["ReadAt", "ReadAt", "", $funcType([($sliceType($Uint8)), $Int64], [$Int, $error], false), -1], ["ReadByte", "ReadByte", "", $funcType([], [$Uint8, $error], false), -1], ["ReadRune", "ReadRune", "", $funcType([], [$Int32, $Int, $error], false), -1], ["Seek", "Seek", "", $funcType([$Int64, $Int], [$Int64, $error], false), -1], ["UnreadByte", "UnreadByte", "", $funcType([], [$error], false), -1], ["UnreadRune", "UnreadRune", "", $funcType([], [$error], false), -1], ["WriteTo", "WriteTo", "", $funcType([io.Writer], [$Int64, $error], false), -1]];
		Reader.init([["s", "s", "strings", $String, ""], ["i", "i", "strings", $Int64, ""], ["prevRune", "prevRune", "strings", $Int, ""]]);
		($ptrType(Replacer)).methods = [["Replace", "Replace", "", $funcType([$String], [$String], false), -1], ["WriteString", "WriteString", "", $funcType([io.Writer, $String], [$Int, $error], false), -1]];
		Replacer.init([["r", "r", "strings", replacer, ""]]);
		replacer.init([["Replace", "Replace", "", $funcType([$String], [$String], false)], ["WriteString", "WriteString", "", $funcType([io.Writer, $String], [$Int, $error], false)]]);
		($ptrType(byteBitmap)).methods = [["set", "set", "strings", $funcType([$Uint8], [], false), -1]];
		byteBitmap.init($Uint32, 8);
		($ptrType(trieNode)).methods = [["add", "add", "strings", $funcType([$String, $String, $Int, ($ptrType(genericReplacer))], [], false), -1]];
		trieNode.init([["value", "value", "strings", $String, ""], ["priority", "priority", "strings", $Int, ""], ["prefix", "prefix", "strings", $String, ""], ["next", "next", "strings", ($ptrType(trieNode)), ""], ["table", "table", "strings", ($sliceType(($ptrType(trieNode)))), ""]]);
		($ptrType(genericReplacer)).methods = [["Replace", "Replace", "", $funcType([$String], [$String], false), -1], ["WriteString", "WriteString", "", $funcType([io.Writer, $String], [$Int, $error], false), -1], ["lookup", "lookup", "strings", $funcType([$String, $Bool], [$String, $Int, $Bool], false), -1]];
		genericReplacer.init([["root", "root", "strings", trieNode, ""], ["tableSize", "tableSize", "strings", $Int, ""], ["mapping", "mapping", "strings", ($arrayType($Uint8, 256)), ""]]);
		($ptrType(appendSliceWriter)).methods = [["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["WriteString", "WriteString", "", $funcType([$String], [$Int, $error], false), -1]];
		appendSliceWriter.init($Uint8);
		stringWriterIface.init([["WriteString", "WriteString", "", $funcType([$String], [$Int, $error], false)]]);
		stringWriter.methods = [["WriteString", "WriteString", "", $funcType([$String], [$Int, $error], false), -1]];
		($ptrType(stringWriter)).methods = [["WriteString", "WriteString", "", $funcType([$String], [$Int, $error], false), -1]];
		stringWriter.init([["w", "w", "strings", io.Writer, ""]]);
		($ptrType(singleStringReplacer)).methods = [["Replace", "Replace", "", $funcType([$String], [$String], false), -1], ["WriteString", "WriteString", "", $funcType([io.Writer, $String], [$Int, $error], false), -1]];
		singleStringReplacer.init([["finder", "finder", "strings", ($ptrType(stringFinder)), ""], ["value", "value", "strings", $String, ""]]);
		($ptrType(byteReplacer)).methods = [["Replace", "Replace", "", $funcType([$String], [$String], false), -1], ["WriteString", "WriteString", "", $funcType([io.Writer, $String], [$Int, $error], false), -1]];
		byteReplacer.init([["old", "old", "strings", byteBitmap, ""], ["new$1", "new", "strings", ($arrayType($Uint8, 256)), ""]]);
		($ptrType(byteStringReplacer)).methods = [["Replace", "Replace", "", $funcType([$String], [$String], false), -1], ["WriteString", "WriteString", "", $funcType([io.Writer, $String], [$Int, $error], false), -1]];
		byteStringReplacer.init([["old", "old", "strings", byteBitmap, ""], ["new$1", "new", "strings", ($arrayType(($sliceType($Uint8)), 256)), ""]]);
		($ptrType(stringFinder)).methods = [["next", "next", "strings", $funcType([$String], [$Int], false), -1]];
		stringFinder.init([["pattern", "pattern", "strings", $String, ""], ["badCharSkip", "badCharSkip", "strings", ($arrayType($Int, 256)), ""], ["goodSuffixSkip", "goodSuffixSkip", "strings", ($sliceType($Int)), ""]]);
	};
	return $pkg;
})();
$packages["syscall"] = (function() {
	var $pkg = {}, bytes = $packages["bytes"], js = $packages["github.com/gopherjs/gopherjs/js"], sync = $packages["sync"], runtime = $packages["runtime"], errors = $packages["errors"], SysProcAttr, Credential, ProcAttr, RoutingMessage, anyMessage, RouteMessage, InterfaceMessage, InterfaceAddrMessage, InterfaceMulticastAddrMessage, WaitStatus, SockaddrDatalink, mmapper, Errno, Signal, Sockaddr, SockaddrInet4, SockaddrInet6, SockaddrUnix, _C_int, Timespec, Timeval, Timeval32, Rusage, Stat_t, Dirent, RawSockaddrInet4, RawSockaddrInet6, RawSockaddrUnix, RawSockaddrDatalink, RawSockaddr, RawSockaddrAny, _Socklen, Linger, IfMsghdr, IfData, IfaMsghdr, IfmaMsghdr2, RtMsghdr, RtMetrics, warningPrinted, lineBuffer, syscallModule, alreadyTriedToLoad, minusOne, envOnce, envLock, env, envs, zeroProcAttr, zeroSysProcAttr, mapper, errors$1, signals, printWarning, printToConsole, init, syscall, Syscall, Syscall6, RawSyscall, BytePtrFromString, copyenv, Getenv, Environ, runtime_BeforeFork, runtime_AfterFork, forkAndExecInChild, forkExecPipe, SlicePtrFromStrings, CloseOnExec, SetNonblock, forkExec, StartProcess, rsaAlignOf, RouteRIB, ParseRoutingMessage, ParseRoutingSockaddr, itoa, ByteSliceFromString, ReadDirent, Wait4, anyToSockaddr, Accept, Getsockname, Sysctl, SysctlUint32, nametomib, ParseDirent, Pipe, Kill, Read, Write, Bind, SetsockoptInt, SetsockoptLinger, Socket, wait4, accept, bind, socket, setsockopt, getsockname, Shutdown, sysctl, fcntl, pipe, kill, Close, Dup, Exit, Fchdir, Fchmod, Fchown, Fstat, Fsync, Ftruncate, Getdirentries, Getpid, Lstat, Open, Pread, Pwrite, read, Rmdir, Seek, Stat, Unlink, write, mmap, munmap, readlen;
	SysProcAttr = $pkg.SysProcAttr = $newType(0, "Struct", "syscall.SysProcAttr", "SysProcAttr", "syscall", function(Chroot_, Credential_, Ptrace_, Setsid_, Setpgid_, Setctty_, Noctty_) {
		this.$val = this;
		this.Chroot = Chroot_ !== undefined ? Chroot_ : "";
		this.Credential = Credential_ !== undefined ? Credential_ : ($ptrType(Credential)).nil;
		this.Ptrace = Ptrace_ !== undefined ? Ptrace_ : false;
		this.Setsid = Setsid_ !== undefined ? Setsid_ : false;
		this.Setpgid = Setpgid_ !== undefined ? Setpgid_ : false;
		this.Setctty = Setctty_ !== undefined ? Setctty_ : false;
		this.Noctty = Noctty_ !== undefined ? Noctty_ : false;
	});
	Credential = $pkg.Credential = $newType(0, "Struct", "syscall.Credential", "Credential", "syscall", function(Uid_, Gid_, Groups_) {
		this.$val = this;
		this.Uid = Uid_ !== undefined ? Uid_ : 0;
		this.Gid = Gid_ !== undefined ? Gid_ : 0;
		this.Groups = Groups_ !== undefined ? Groups_ : ($sliceType($Uint32)).nil;
	});
	ProcAttr = $pkg.ProcAttr = $newType(0, "Struct", "syscall.ProcAttr", "ProcAttr", "syscall", function(Dir_, Env_, Files_, Sys_) {
		this.$val = this;
		this.Dir = Dir_ !== undefined ? Dir_ : "";
		this.Env = Env_ !== undefined ? Env_ : ($sliceType($String)).nil;
		this.Files = Files_ !== undefined ? Files_ : ($sliceType($Uintptr)).nil;
		this.Sys = Sys_ !== undefined ? Sys_ : ($ptrType(SysProcAttr)).nil;
	});
	RoutingMessage = $pkg.RoutingMessage = $newType(8, "Interface", "syscall.RoutingMessage", "RoutingMessage", "syscall", null);
	anyMessage = $pkg.anyMessage = $newType(0, "Struct", "syscall.anyMessage", "anyMessage", "syscall", function(Msglen_, Version_, Type_) {
		this.$val = this;
		this.Msglen = Msglen_ !== undefined ? Msglen_ : 0;
		this.Version = Version_ !== undefined ? Version_ : 0;
		this.Type = Type_ !== undefined ? Type_ : 0;
	});
	RouteMessage = $pkg.RouteMessage = $newType(0, "Struct", "syscall.RouteMessage", "RouteMessage", "syscall", function(Header_, Data_) {
		this.$val = this;
		this.Header = Header_ !== undefined ? Header_ : new RtMsghdr.Ptr();
		this.Data = Data_ !== undefined ? Data_ : ($sliceType($Uint8)).nil;
	});
	InterfaceMessage = $pkg.InterfaceMessage = $newType(0, "Struct", "syscall.InterfaceMessage", "InterfaceMessage", "syscall", function(Header_, Data_) {
		this.$val = this;
		this.Header = Header_ !== undefined ? Header_ : new IfMsghdr.Ptr();
		this.Data = Data_ !== undefined ? Data_ : ($sliceType($Uint8)).nil;
	});
	InterfaceAddrMessage = $pkg.InterfaceAddrMessage = $newType(0, "Struct", "syscall.InterfaceAddrMessage", "InterfaceAddrMessage", "syscall", function(Header_, Data_) {
		this.$val = this;
		this.Header = Header_ !== undefined ? Header_ : new IfaMsghdr.Ptr();
		this.Data = Data_ !== undefined ? Data_ : ($sliceType($Uint8)).nil;
	});
	InterfaceMulticastAddrMessage = $pkg.InterfaceMulticastAddrMessage = $newType(0, "Struct", "syscall.InterfaceMulticastAddrMessage", "InterfaceMulticastAddrMessage", "syscall", function(Header_, Data_) {
		this.$val = this;
		this.Header = Header_ !== undefined ? Header_ : new IfmaMsghdr2.Ptr();
		this.Data = Data_ !== undefined ? Data_ : ($sliceType($Uint8)).nil;
	});
	WaitStatus = $pkg.WaitStatus = $newType(4, "Uint32", "syscall.WaitStatus", "WaitStatus", "syscall", null);
	SockaddrDatalink = $pkg.SockaddrDatalink = $newType(0, "Struct", "syscall.SockaddrDatalink", "SockaddrDatalink", "syscall", function(Len_, Family_, Index_, Type_, Nlen_, Alen_, Slen_, Data_, raw_) {
		this.$val = this;
		this.Len = Len_ !== undefined ? Len_ : 0;
		this.Family = Family_ !== undefined ? Family_ : 0;
		this.Index = Index_ !== undefined ? Index_ : 0;
		this.Type = Type_ !== undefined ? Type_ : 0;
		this.Nlen = Nlen_ !== undefined ? Nlen_ : 0;
		this.Alen = Alen_ !== undefined ? Alen_ : 0;
		this.Slen = Slen_ !== undefined ? Slen_ : 0;
		this.Data = Data_ !== undefined ? Data_ : ($arrayType($Int8, 12)).zero();
		this.raw = raw_ !== undefined ? raw_ : new RawSockaddrDatalink.Ptr();
	});
	mmapper = $pkg.mmapper = $newType(0, "Struct", "syscall.mmapper", "mmapper", "syscall", function(Mutex_, active_, mmap_, munmap_) {
		this.$val = this;
		this.Mutex = Mutex_ !== undefined ? Mutex_ : new sync.Mutex.Ptr();
		this.active = active_ !== undefined ? active_ : false;
		this.mmap = mmap_ !== undefined ? mmap_ : $throwNilPointerError;
		this.munmap = munmap_ !== undefined ? munmap_ : $throwNilPointerError;
	});
	Errno = $pkg.Errno = $newType(4, "Uintptr", "syscall.Errno", "Errno", "syscall", null);
	Signal = $pkg.Signal = $newType(4, "Int", "syscall.Signal", "Signal", "syscall", null);
	Sockaddr = $pkg.Sockaddr = $newType(8, "Interface", "syscall.Sockaddr", "Sockaddr", "syscall", null);
	SockaddrInet4 = $pkg.SockaddrInet4 = $newType(0, "Struct", "syscall.SockaddrInet4", "SockaddrInet4", "syscall", function(Port_, Addr_, raw_) {
		this.$val = this;
		this.Port = Port_ !== undefined ? Port_ : 0;
		this.Addr = Addr_ !== undefined ? Addr_ : ($arrayType($Uint8, 4)).zero();
		this.raw = raw_ !== undefined ? raw_ : new RawSockaddrInet4.Ptr();
	});
	SockaddrInet6 = $pkg.SockaddrInet6 = $newType(0, "Struct", "syscall.SockaddrInet6", "SockaddrInet6", "syscall", function(Port_, ZoneId_, Addr_, raw_) {
		this.$val = this;
		this.Port = Port_ !== undefined ? Port_ : 0;
		this.ZoneId = ZoneId_ !== undefined ? ZoneId_ : 0;
		this.Addr = Addr_ !== undefined ? Addr_ : ($arrayType($Uint8, 16)).zero();
		this.raw = raw_ !== undefined ? raw_ : new RawSockaddrInet6.Ptr();
	});
	SockaddrUnix = $pkg.SockaddrUnix = $newType(0, "Struct", "syscall.SockaddrUnix", "SockaddrUnix", "syscall", function(Name_, raw_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.raw = raw_ !== undefined ? raw_ : new RawSockaddrUnix.Ptr();
	});
	_C_int = $pkg._C_int = $newType(4, "Int32", "syscall._C_int", "_C_int", "syscall", null);
	Timespec = $pkg.Timespec = $newType(0, "Struct", "syscall.Timespec", "Timespec", "syscall", function(Sec_, Nsec_) {
		this.$val = this;
		this.Sec = Sec_ !== undefined ? Sec_ : new $Int64(0, 0);
		this.Nsec = Nsec_ !== undefined ? Nsec_ : new $Int64(0, 0);
	});
	Timeval = $pkg.Timeval = $newType(0, "Struct", "syscall.Timeval", "Timeval", "syscall", function(Sec_, Usec_, Pad_cgo_0_) {
		this.$val = this;
		this.Sec = Sec_ !== undefined ? Sec_ : new $Int64(0, 0);
		this.Usec = Usec_ !== undefined ? Usec_ : 0;
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : ($arrayType($Uint8, 4)).zero();
	});
	Timeval32 = $pkg.Timeval32 = $newType(0, "Struct", "syscall.Timeval32", "Timeval32", "syscall", function(Sec_, Usec_) {
		this.$val = this;
		this.Sec = Sec_ !== undefined ? Sec_ : 0;
		this.Usec = Usec_ !== undefined ? Usec_ : 0;
	});
	Rusage = $pkg.Rusage = $newType(0, "Struct", "syscall.Rusage", "Rusage", "syscall", function(Utime_, Stime_, Maxrss_, Ixrss_, Idrss_, Isrss_, Minflt_, Majflt_, Nswap_, Inblock_, Oublock_, Msgsnd_, Msgrcv_, Nsignals_, Nvcsw_, Nivcsw_) {
		this.$val = this;
		this.Utime = Utime_ !== undefined ? Utime_ : new Timeval.Ptr();
		this.Stime = Stime_ !== undefined ? Stime_ : new Timeval.Ptr();
		this.Maxrss = Maxrss_ !== undefined ? Maxrss_ : new $Int64(0, 0);
		this.Ixrss = Ixrss_ !== undefined ? Ixrss_ : new $Int64(0, 0);
		this.Idrss = Idrss_ !== undefined ? Idrss_ : new $Int64(0, 0);
		this.Isrss = Isrss_ !== undefined ? Isrss_ : new $Int64(0, 0);
		this.Minflt = Minflt_ !== undefined ? Minflt_ : new $Int64(0, 0);
		this.Majflt = Majflt_ !== undefined ? Majflt_ : new $Int64(0, 0);
		this.Nswap = Nswap_ !== undefined ? Nswap_ : new $Int64(0, 0);
		this.Inblock = Inblock_ !== undefined ? Inblock_ : new $Int64(0, 0);
		this.Oublock = Oublock_ !== undefined ? Oublock_ : new $Int64(0, 0);
		this.Msgsnd = Msgsnd_ !== undefined ? Msgsnd_ : new $Int64(0, 0);
		this.Msgrcv = Msgrcv_ !== undefined ? Msgrcv_ : new $Int64(0, 0);
		this.Nsignals = Nsignals_ !== undefined ? Nsignals_ : new $Int64(0, 0);
		this.Nvcsw = Nvcsw_ !== undefined ? Nvcsw_ : new $Int64(0, 0);
		this.Nivcsw = Nivcsw_ !== undefined ? Nivcsw_ : new $Int64(0, 0);
	});
	Stat_t = $pkg.Stat_t = $newType(0, "Struct", "syscall.Stat_t", "Stat_t", "syscall", function(Dev_, Mode_, Nlink_, Ino_, Uid_, Gid_, Rdev_, Pad_cgo_0_, Atimespec_, Mtimespec_, Ctimespec_, Birthtimespec_, Size_, Blocks_, Blksize_, Flags_, Gen_, Lspare_, Qspare_) {
		this.$val = this;
		this.Dev = Dev_ !== undefined ? Dev_ : 0;
		this.Mode = Mode_ !== undefined ? Mode_ : 0;
		this.Nlink = Nlink_ !== undefined ? Nlink_ : 0;
		this.Ino = Ino_ !== undefined ? Ino_ : new $Uint64(0, 0);
		this.Uid = Uid_ !== undefined ? Uid_ : 0;
		this.Gid = Gid_ !== undefined ? Gid_ : 0;
		this.Rdev = Rdev_ !== undefined ? Rdev_ : 0;
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : ($arrayType($Uint8, 4)).zero();
		this.Atimespec = Atimespec_ !== undefined ? Atimespec_ : new Timespec.Ptr();
		this.Mtimespec = Mtimespec_ !== undefined ? Mtimespec_ : new Timespec.Ptr();
		this.Ctimespec = Ctimespec_ !== undefined ? Ctimespec_ : new Timespec.Ptr();
		this.Birthtimespec = Birthtimespec_ !== undefined ? Birthtimespec_ : new Timespec.Ptr();
		this.Size = Size_ !== undefined ? Size_ : new $Int64(0, 0);
		this.Blocks = Blocks_ !== undefined ? Blocks_ : new $Int64(0, 0);
		this.Blksize = Blksize_ !== undefined ? Blksize_ : 0;
		this.Flags = Flags_ !== undefined ? Flags_ : 0;
		this.Gen = Gen_ !== undefined ? Gen_ : 0;
		this.Lspare = Lspare_ !== undefined ? Lspare_ : 0;
		this.Qspare = Qspare_ !== undefined ? Qspare_ : ($arrayType($Int64, 2)).zero();
	});
	Dirent = $pkg.Dirent = $newType(0, "Struct", "syscall.Dirent", "Dirent", "syscall", function(Ino_, Seekoff_, Reclen_, Namlen_, Type_, Name_, Pad_cgo_0_) {
		this.$val = this;
		this.Ino = Ino_ !== undefined ? Ino_ : new $Uint64(0, 0);
		this.Seekoff = Seekoff_ !== undefined ? Seekoff_ : new $Uint64(0, 0);
		this.Reclen = Reclen_ !== undefined ? Reclen_ : 0;
		this.Namlen = Namlen_ !== undefined ? Namlen_ : 0;
		this.Type = Type_ !== undefined ? Type_ : 0;
		this.Name = Name_ !== undefined ? Name_ : ($arrayType($Int8, 1024)).zero();
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : ($arrayType($Uint8, 3)).zero();
	});
	RawSockaddrInet4 = $pkg.RawSockaddrInet4 = $newType(0, "Struct", "syscall.RawSockaddrInet4", "RawSockaddrInet4", "syscall", function(Len_, Family_, Port_, Addr_, Zero_) {
		this.$val = this;
		this.Len = Len_ !== undefined ? Len_ : 0;
		this.Family = Family_ !== undefined ? Family_ : 0;
		this.Port = Port_ !== undefined ? Port_ : 0;
		this.Addr = Addr_ !== undefined ? Addr_ : ($arrayType($Uint8, 4)).zero();
		this.Zero = Zero_ !== undefined ? Zero_ : ($arrayType($Int8, 8)).zero();
	});
	RawSockaddrInet6 = $pkg.RawSockaddrInet6 = $newType(0, "Struct", "syscall.RawSockaddrInet6", "RawSockaddrInet6", "syscall", function(Len_, Family_, Port_, Flowinfo_, Addr_, Scope_id_) {
		this.$val = this;
		this.Len = Len_ !== undefined ? Len_ : 0;
		this.Family = Family_ !== undefined ? Family_ : 0;
		this.Port = Port_ !== undefined ? Port_ : 0;
		this.Flowinfo = Flowinfo_ !== undefined ? Flowinfo_ : 0;
		this.Addr = Addr_ !== undefined ? Addr_ : ($arrayType($Uint8, 16)).zero();
		this.Scope_id = Scope_id_ !== undefined ? Scope_id_ : 0;
	});
	RawSockaddrUnix = $pkg.RawSockaddrUnix = $newType(0, "Struct", "syscall.RawSockaddrUnix", "RawSockaddrUnix", "syscall", function(Len_, Family_, Path_) {
		this.$val = this;
		this.Len = Len_ !== undefined ? Len_ : 0;
		this.Family = Family_ !== undefined ? Family_ : 0;
		this.Path = Path_ !== undefined ? Path_ : ($arrayType($Int8, 104)).zero();
	});
	RawSockaddrDatalink = $pkg.RawSockaddrDatalink = $newType(0, "Struct", "syscall.RawSockaddrDatalink", "RawSockaddrDatalink", "syscall", function(Len_, Family_, Index_, Type_, Nlen_, Alen_, Slen_, Data_) {
		this.$val = this;
		this.Len = Len_ !== undefined ? Len_ : 0;
		this.Family = Family_ !== undefined ? Family_ : 0;
		this.Index = Index_ !== undefined ? Index_ : 0;
		this.Type = Type_ !== undefined ? Type_ : 0;
		this.Nlen = Nlen_ !== undefined ? Nlen_ : 0;
		this.Alen = Alen_ !== undefined ? Alen_ : 0;
		this.Slen = Slen_ !== undefined ? Slen_ : 0;
		this.Data = Data_ !== undefined ? Data_ : ($arrayType($Int8, 12)).zero();
	});
	RawSockaddr = $pkg.RawSockaddr = $newType(0, "Struct", "syscall.RawSockaddr", "RawSockaddr", "syscall", function(Len_, Family_, Data_) {
		this.$val = this;
		this.Len = Len_ !== undefined ? Len_ : 0;
		this.Family = Family_ !== undefined ? Family_ : 0;
		this.Data = Data_ !== undefined ? Data_ : ($arrayType($Int8, 14)).zero();
	});
	RawSockaddrAny = $pkg.RawSockaddrAny = $newType(0, "Struct", "syscall.RawSockaddrAny", "RawSockaddrAny", "syscall", function(Addr_, Pad_) {
		this.$val = this;
		this.Addr = Addr_ !== undefined ? Addr_ : new RawSockaddr.Ptr();
		this.Pad = Pad_ !== undefined ? Pad_ : ($arrayType($Int8, 92)).zero();
	});
	_Socklen = $pkg._Socklen = $newType(4, "Uint32", "syscall._Socklen", "_Socklen", "syscall", null);
	Linger = $pkg.Linger = $newType(0, "Struct", "syscall.Linger", "Linger", "syscall", function(Onoff_, Linger_) {
		this.$val = this;
		this.Onoff = Onoff_ !== undefined ? Onoff_ : 0;
		this.Linger = Linger_ !== undefined ? Linger_ : 0;
	});
	IfMsghdr = $pkg.IfMsghdr = $newType(0, "Struct", "syscall.IfMsghdr", "IfMsghdr", "syscall", function(Msglen_, Version_, Type_, Addrs_, Flags_, Index_, Pad_cgo_0_, Data_) {
		this.$val = this;
		this.Msglen = Msglen_ !== undefined ? Msglen_ : 0;
		this.Version = Version_ !== undefined ? Version_ : 0;
		this.Type = Type_ !== undefined ? Type_ : 0;
		this.Addrs = Addrs_ !== undefined ? Addrs_ : 0;
		this.Flags = Flags_ !== undefined ? Flags_ : 0;
		this.Index = Index_ !== undefined ? Index_ : 0;
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : ($arrayType($Uint8, 2)).zero();
		this.Data = Data_ !== undefined ? Data_ : new IfData.Ptr();
	});
	IfData = $pkg.IfData = $newType(0, "Struct", "syscall.IfData", "IfData", "syscall", function(Type_, Typelen_, Physical_, Addrlen_, Hdrlen_, Recvquota_, Xmitquota_, Unused1_, Mtu_, Metric_, Baudrate_, Ipackets_, Ierrors_, Opackets_, Oerrors_, Collisions_, Ibytes_, Obytes_, Imcasts_, Omcasts_, Iqdrops_, Noproto_, Recvtiming_, Xmittiming_, Lastchange_, Unused2_, Hwassist_, Reserved1_, Reserved2_) {
		this.$val = this;
		this.Type = Type_ !== undefined ? Type_ : 0;
		this.Typelen = Typelen_ !== undefined ? Typelen_ : 0;
		this.Physical = Physical_ !== undefined ? Physical_ : 0;
		this.Addrlen = Addrlen_ !== undefined ? Addrlen_ : 0;
		this.Hdrlen = Hdrlen_ !== undefined ? Hdrlen_ : 0;
		this.Recvquota = Recvquota_ !== undefined ? Recvquota_ : 0;
		this.Xmitquota = Xmitquota_ !== undefined ? Xmitquota_ : 0;
		this.Unused1 = Unused1_ !== undefined ? Unused1_ : 0;
		this.Mtu = Mtu_ !== undefined ? Mtu_ : 0;
		this.Metric = Metric_ !== undefined ? Metric_ : 0;
		this.Baudrate = Baudrate_ !== undefined ? Baudrate_ : 0;
		this.Ipackets = Ipackets_ !== undefined ? Ipackets_ : 0;
		this.Ierrors = Ierrors_ !== undefined ? Ierrors_ : 0;
		this.Opackets = Opackets_ !== undefined ? Opackets_ : 0;
		this.Oerrors = Oerrors_ !== undefined ? Oerrors_ : 0;
		this.Collisions = Collisions_ !== undefined ? Collisions_ : 0;
		this.Ibytes = Ibytes_ !== undefined ? Ibytes_ : 0;
		this.Obytes = Obytes_ !== undefined ? Obytes_ : 0;
		this.Imcasts = Imcasts_ !== undefined ? Imcasts_ : 0;
		this.Omcasts = Omcasts_ !== undefined ? Omcasts_ : 0;
		this.Iqdrops = Iqdrops_ !== undefined ? Iqdrops_ : 0;
		this.Noproto = Noproto_ !== undefined ? Noproto_ : 0;
		this.Recvtiming = Recvtiming_ !== undefined ? Recvtiming_ : 0;
		this.Xmittiming = Xmittiming_ !== undefined ? Xmittiming_ : 0;
		this.Lastchange = Lastchange_ !== undefined ? Lastchange_ : new Timeval32.Ptr();
		this.Unused2 = Unused2_ !== undefined ? Unused2_ : 0;
		this.Hwassist = Hwassist_ !== undefined ? Hwassist_ : 0;
		this.Reserved1 = Reserved1_ !== undefined ? Reserved1_ : 0;
		this.Reserved2 = Reserved2_ !== undefined ? Reserved2_ : 0;
	});
	IfaMsghdr = $pkg.IfaMsghdr = $newType(0, "Struct", "syscall.IfaMsghdr", "IfaMsghdr", "syscall", function(Msglen_, Version_, Type_, Addrs_, Flags_, Index_, Pad_cgo_0_, Metric_) {
		this.$val = this;
		this.Msglen = Msglen_ !== undefined ? Msglen_ : 0;
		this.Version = Version_ !== undefined ? Version_ : 0;
		this.Type = Type_ !== undefined ? Type_ : 0;
		this.Addrs = Addrs_ !== undefined ? Addrs_ : 0;
		this.Flags = Flags_ !== undefined ? Flags_ : 0;
		this.Index = Index_ !== undefined ? Index_ : 0;
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : ($arrayType($Uint8, 2)).zero();
		this.Metric = Metric_ !== undefined ? Metric_ : 0;
	});
	IfmaMsghdr2 = $pkg.IfmaMsghdr2 = $newType(0, "Struct", "syscall.IfmaMsghdr2", "IfmaMsghdr2", "syscall", function(Msglen_, Version_, Type_, Addrs_, Flags_, Index_, Pad_cgo_0_, Refcount_) {
		this.$val = this;
		this.Msglen = Msglen_ !== undefined ? Msglen_ : 0;
		this.Version = Version_ !== undefined ? Version_ : 0;
		this.Type = Type_ !== undefined ? Type_ : 0;
		this.Addrs = Addrs_ !== undefined ? Addrs_ : 0;
		this.Flags = Flags_ !== undefined ? Flags_ : 0;
		this.Index = Index_ !== undefined ? Index_ : 0;
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : ($arrayType($Uint8, 2)).zero();
		this.Refcount = Refcount_ !== undefined ? Refcount_ : 0;
	});
	RtMsghdr = $pkg.RtMsghdr = $newType(0, "Struct", "syscall.RtMsghdr", "RtMsghdr", "syscall", function(Msglen_, Version_, Type_, Index_, Pad_cgo_0_, Flags_, Addrs_, Pid_, Seq_, Errno_, Use_, Inits_, Rmx_) {
		this.$val = this;
		this.Msglen = Msglen_ !== undefined ? Msglen_ : 0;
		this.Version = Version_ !== undefined ? Version_ : 0;
		this.Type = Type_ !== undefined ? Type_ : 0;
		this.Index = Index_ !== undefined ? Index_ : 0;
		this.Pad_cgo_0 = Pad_cgo_0_ !== undefined ? Pad_cgo_0_ : ($arrayType($Uint8, 2)).zero();
		this.Flags = Flags_ !== undefined ? Flags_ : 0;
		this.Addrs = Addrs_ !== undefined ? Addrs_ : 0;
		this.Pid = Pid_ !== undefined ? Pid_ : 0;
		this.Seq = Seq_ !== undefined ? Seq_ : 0;
		this.Errno = Errno_ !== undefined ? Errno_ : 0;
		this.Use = Use_ !== undefined ? Use_ : 0;
		this.Inits = Inits_ !== undefined ? Inits_ : 0;
		this.Rmx = Rmx_ !== undefined ? Rmx_ : new RtMetrics.Ptr();
	});
	RtMetrics = $pkg.RtMetrics = $newType(0, "Struct", "syscall.RtMetrics", "RtMetrics", "syscall", function(Locks_, Mtu_, Hopcount_, Expire_, Recvpipe_, Sendpipe_, Ssthresh_, Rtt_, Rttvar_, Pksent_, Filler_) {
		this.$val = this;
		this.Locks = Locks_ !== undefined ? Locks_ : 0;
		this.Mtu = Mtu_ !== undefined ? Mtu_ : 0;
		this.Hopcount = Hopcount_ !== undefined ? Hopcount_ : 0;
		this.Expire = Expire_ !== undefined ? Expire_ : 0;
		this.Recvpipe = Recvpipe_ !== undefined ? Recvpipe_ : 0;
		this.Sendpipe = Sendpipe_ !== undefined ? Sendpipe_ : 0;
		this.Ssthresh = Ssthresh_ !== undefined ? Ssthresh_ : 0;
		this.Rtt = Rtt_ !== undefined ? Rtt_ : 0;
		this.Rttvar = Rttvar_ !== undefined ? Rttvar_ : 0;
		this.Pksent = Pksent_ !== undefined ? Pksent_ : 0;
		this.Filler = Filler_ !== undefined ? Filler_ : ($arrayType($Uint32, 4)).zero();
	});
	printWarning = function() {
		if (!warningPrinted) {
			console.log("warning: system calls not available, see https://github.com/gopherjs/gopherjs/blob/master/doc/syscalls.md");
		}
		warningPrinted = true;
	};
	printToConsole = function(b) {
		var goPrintToConsole, i;
		goPrintToConsole = $global.goPrintToConsole;
		if (!(goPrintToConsole === undefined)) {
			goPrintToConsole(b);
			return;
		}
		lineBuffer = $appendSlice(lineBuffer, b);
		while (true) {
			i = bytes.IndexByte(lineBuffer, 10);
			if (i === -1) {
				break;
			}
			$global.console.log($externalize($bytesToString($subslice(lineBuffer, 0, i)), $String));
			lineBuffer = $subslice(lineBuffer, (i + 1 >> 0));
		}
	};
	init = function() {
		var process, jsEnv, envkeys, i, key;
		process = $global.process;
		if (!(process === undefined)) {
			jsEnv = process.env;
			envkeys = $global.Object.keys(jsEnv);
			envs = ($sliceType($String)).make($parseInt(envkeys.length));
			i = 0;
			while (i < $parseInt(envkeys.length)) {
				key = $internalize(envkeys[i], $String);
				(i < 0 || i >= envs.$length) ? $throwRuntimeError("index out of range") : envs.$array[envs.$offset + i] = key + "=" + $internalize(jsEnv[$externalize(key, $String)], $String);
				i = i + (1) >> 0;
			}
		}
	};
	syscall = function(name) {
		var $deferred = [], $err = null, require;
		/* */ try { $deferFrames.push($deferred);
		$deferred.push([(function() {
			$recover();
		}), []]);
		if (syscallModule === $ifaceNil) {
			if (alreadyTriedToLoad) {
				return $ifaceNil;
			}
			alreadyTriedToLoad = true;
			require = $global.require;
			if (require === undefined) {
				$panic(new $String(""));
			}
			syscallModule = require($externalize("syscall", $String));
		}
		return syscallModule[$externalize(name, $String)];
		/* */ } catch(err) { $err = err; return $ifaceNil; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Syscall = $pkg.Syscall = function(trap, a1, a2, a3) {
		var r1 = 0, r2 = 0, err = 0, f, r, _tmp, _tmp$1, _tmp$2, array, slice, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8;
		f = syscall("Syscall");
		if (!(f === $ifaceNil)) {
			r = f(trap, a1, a2, a3);
			_tmp = (($parseInt(r[0]) >> 0) >>> 0); _tmp$1 = (($parseInt(r[1]) >> 0) >>> 0); _tmp$2 = (($parseInt(r[2]) >> 0) >>> 0); r1 = _tmp; r2 = _tmp$1; err = _tmp$2;
			return [r1, r2, err];
		}
		if ((trap === 4) && ((a1 === 1) || (a1 === 2))) {
			array = a2;
			slice = ($sliceType($Uint8)).make($parseInt(array.length));
			slice.$array = array;
			printToConsole(slice);
			_tmp$3 = ($parseInt(array.length) >>> 0); _tmp$4 = 0; _tmp$5 = 0; r1 = _tmp$3; r2 = _tmp$4; err = _tmp$5;
			return [r1, r2, err];
		}
		printWarning();
		_tmp$6 = (minusOne >>> 0); _tmp$7 = 0; _tmp$8 = 13; r1 = _tmp$6; r2 = _tmp$7; err = _tmp$8;
		return [r1, r2, err];
	};
	Syscall6 = $pkg.Syscall6 = function(trap, a1, a2, a3, a4, a5, a6) {
		var r1 = 0, r2 = 0, err = 0, f, r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		f = syscall("Syscall6");
		if (!(f === $ifaceNil)) {
			r = f(trap, a1, a2, a3, a4, a5, a6);
			_tmp = (($parseInt(r[0]) >> 0) >>> 0); _tmp$1 = (($parseInt(r[1]) >> 0) >>> 0); _tmp$2 = (($parseInt(r[2]) >> 0) >>> 0); r1 = _tmp; r2 = _tmp$1; err = _tmp$2;
			return [r1, r2, err];
		}
		if (!((trap === 202))) {
			printWarning();
		}
		_tmp$3 = (minusOne >>> 0); _tmp$4 = 0; _tmp$5 = 13; r1 = _tmp$3; r2 = _tmp$4; err = _tmp$5;
		return [r1, r2, err];
	};
	RawSyscall = $pkg.RawSyscall = function(trap, a1, a2, a3) {
		var r1 = 0, r2 = 0, err = 0, f, r, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		f = syscall("Syscall");
		if (!(f === $ifaceNil)) {
			r = f(trap, a1, a2, a3);
			_tmp = (($parseInt(r[0]) >> 0) >>> 0); _tmp$1 = (($parseInt(r[1]) >> 0) >>> 0); _tmp$2 = (($parseInt(r[2]) >> 0) >>> 0); r1 = _tmp; r2 = _tmp$1; err = _tmp$2;
			return [r1, r2, err];
		}
		printWarning();
		_tmp$3 = (minusOne >>> 0); _tmp$4 = 0; _tmp$5 = 13; r1 = _tmp$3; r2 = _tmp$4; err = _tmp$5;
		return [r1, r2, err];
	};
	BytePtrFromString = $pkg.BytePtrFromString = function(s) {
		var array, _ref, _i, i, b;
		array = new ($global.Uint8Array)(s.length + 1 >> 0);
		_ref = new ($sliceType($Uint8))($stringToBytes(s));
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b === 0) {
				return [($ptrType($Uint8)).nil, new Errno(22)];
			}
			array[i] = b;
			_i++;
		}
		array[s.length] = 0;
		return [array, $ifaceNil];
	};
	copyenv = function() {
		var _ref, _i, i, s, j, key, _tuple, _entry, ok, _key;
		env = new $Map();
		_ref = envs;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			j = 0;
			while (j < s.length) {
				if (s.charCodeAt(j) === 61) {
					key = s.substring(0, j);
					_tuple = (_entry = env[key], _entry !== undefined ? [_entry.v, true] : [0, false]); ok = _tuple[1];
					if (!ok) {
						_key = key; (env || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: i };
					}
					break;
				}
				j = j + (1) >> 0;
			}
			_i++;
		}
	};
	Getenv = $pkg.Getenv = function(key) {
		var value = "", found = false, $deferred = [], $err = null, _tmp, _tmp$1, _tuple, _entry, i, ok, _tmp$2, _tmp$3, s, i$1, _tmp$4, _tmp$5, _tmp$6, _tmp$7;
		/* */ try { $deferFrames.push($deferred);
		envOnce.Do(copyenv);
		if (key.length === 0) {
			_tmp = ""; _tmp$1 = false; value = _tmp; found = _tmp$1;
			return [value, found];
		}
		envLock.RLock();
		$deferred.push([$methodVal(envLock, "RUnlock"), []]);
		_tuple = (_entry = env[key], _entry !== undefined ? [_entry.v, true] : [0, false]); i = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			_tmp$2 = ""; _tmp$3 = false; value = _tmp$2; found = _tmp$3;
			return [value, found];
		}
		s = ((i < 0 || i >= envs.$length) ? $throwRuntimeError("index out of range") : envs.$array[envs.$offset + i]);
		i$1 = 0;
		while (i$1 < s.length) {
			if (s.charCodeAt(i$1) === 61) {
				_tmp$4 = s.substring((i$1 + 1 >> 0)); _tmp$5 = true; value = _tmp$4; found = _tmp$5;
				return [value, found];
			}
			i$1 = i$1 + (1) >> 0;
		}
		_tmp$6 = ""; _tmp$7 = false; value = _tmp$6; found = _tmp$7;
		return [value, found];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [value, found]; }
	};
	Environ = $pkg.Environ = function() {
		var $deferred = [], $err = null, a;
		/* */ try { $deferFrames.push($deferred);
		envOnce.Do(copyenv);
		envLock.RLock();
		$deferred.push([$methodVal(envLock, "RUnlock"), []]);
		a = ($sliceType($String)).make(envs.$length);
		$copySlice(a, envs);
		return a;
		/* */ } catch(err) { $err = err; return ($sliceType($String)).nil; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	runtime_BeforeFork = function() {
		$panic("Native function not implemented: syscall.runtime_BeforeFork");
	};
	runtime_AfterFork = function() {
		$panic("Native function not implemented: syscall.runtime_AfterFork");
	};
	forkAndExecInChild = function(argv0, argv, envv, chroot, dir, attr, sys, pipe$1) {
		var $this = this, $args = arguments, pid = 0, err = 0, $s = 0, _tmp, _tmp$1, r1, r2, err1, nextfd, i, fd, _ref, _i, i$1, ufd, darwin, _tuple, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple$1, _tuple$2, _tuple$3, _tuple$4, cred, ngroups, groups, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15;
		/* */ s: while (true) { switch ($s) { case 0:
		_tmp = 0; _tmp$1 = 0; r1 = _tmp; r2 = _tmp$1;
		err1 = 0;
		nextfd = 0;
		i = 0;
		fd = ($sliceType($Int)).make(attr.Files.$length);
		nextfd = attr.Files.$length;
		_ref = attr.Files;
		_i = 0;
		while (_i < _ref.$length) {
			i$1 = _i;
			ufd = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (nextfd < (ufd >> 0)) {
				nextfd = (ufd >> 0);
			}
			(i$1 < 0 || i$1 >= fd.$length) ? $throwRuntimeError("index out of range") : fd.$array[fd.$offset + i$1] = (ufd >> 0);
			_i++;
		}
		nextfd = nextfd + (1) >> 0;
		darwin = true;
		runtime_BeforeFork();
		_tuple = RawSyscall(2, 0, 0, 0); r1 = _tuple[0]; r2 = _tuple[1]; err1 = _tuple[2];
		if (!((err1 === 0))) {
			runtime_AfterFork();
			_tmp$2 = 0; _tmp$3 = err1; pid = _tmp$2; err = _tmp$3;
			return [pid, err];
		}
		if (darwin && (r2 === 1)) {
			r1 = 0;
		}
		if (!((r1 === 0))) {
			runtime_AfterFork();
			_tmp$4 = (r1 >> 0); _tmp$5 = 0; pid = _tmp$4; err = _tmp$5;
			return [pid, err];
		}
		/* if (sys.Ptrace) { */ if (sys.Ptrace) {} else { $s = 2; continue; }
			_tuple$1 = RawSyscall(26, 0, 0, 0); err1 = _tuple$1[2];
			/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 3; continue; }
				/* goto childerror */ $s = 1; continue;
			/* } */ case 3:
		/* } */ case 2:
		/* if (sys.Setsid) { */ if (sys.Setsid) {} else { $s = 4; continue; }
			_tuple$2 = RawSyscall(147, 0, 0, 0); err1 = _tuple$2[2];
			/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 5; continue; }
				/* goto childerror */ $s = 1; continue;
			/* } */ case 5:
		/* } */ case 4:
		/* if (sys.Setpgid) { */ if (sys.Setpgid) {} else { $s = 6; continue; }
			_tuple$3 = RawSyscall(82, 0, 0, 0); err1 = _tuple$3[2];
			/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 7; continue; }
				/* goto childerror */ $s = 1; continue;
			/* } */ case 7:
		/* } */ case 6:
		/* if (!($pointerIsEqual(chroot, ($ptrType($Uint8)).nil))) { */ if (!($pointerIsEqual(chroot, ($ptrType($Uint8)).nil))) {} else { $s = 8; continue; }
			_tuple$4 = RawSyscall(61, chroot, 0, 0); err1 = _tuple$4[2];
			/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 9; continue; }
				/* goto childerror */ $s = 1; continue;
			/* } */ case 9:
		/* } */ case 8:
		cred = sys.Credential;
		/* if (!(cred === ($ptrType(Credential)).nil)) { */ if (!(cred === ($ptrType(Credential)).nil)) {} else { $s = 10; continue; }
			ngroups = (cred.Groups.$length >>> 0);
			groups = 0;
			if (ngroups > 0) {
				groups = $sliceToArray(cred.Groups);
			}
			_tuple$5 = RawSyscall(80, ngroups, groups, 0); err1 = _tuple$5[2];
			/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 11; continue; }
				/* goto childerror */ $s = 1; continue;
			/* } */ case 11:
			_tuple$6 = RawSyscall(181, (cred.Gid >>> 0), 0, 0); err1 = _tuple$6[2];
			/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 12; continue; }
				/* goto childerror */ $s = 1; continue;
			/* } */ case 12:
			_tuple$7 = RawSyscall(23, (cred.Uid >>> 0), 0, 0); err1 = _tuple$7[2];
			/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 13; continue; }
				/* goto childerror */ $s = 1; continue;
			/* } */ case 13:
		/* } */ case 10:
		/* if (!($pointerIsEqual(dir, ($ptrType($Uint8)).nil))) { */ if (!($pointerIsEqual(dir, ($ptrType($Uint8)).nil))) {} else { $s = 14; continue; }
			_tuple$8 = RawSyscall(12, dir, 0, 0); err1 = _tuple$8[2];
			/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 15; continue; }
				/* goto childerror */ $s = 1; continue;
			/* } */ case 15:
		/* } */ case 14:
		/* if (pipe$1 < nextfd) { */ if (pipe$1 < nextfd) {} else { $s = 16; continue; }
			_tuple$9 = RawSyscall(90, (pipe$1 >>> 0), (nextfd >>> 0), 0); err1 = _tuple$9[2];
			/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 17; continue; }
				/* goto childerror */ $s = 1; continue;
			/* } */ case 17:
			RawSyscall(92, (nextfd >>> 0), 2, 1);
			pipe$1 = nextfd;
			nextfd = nextfd + (1) >> 0;
		/* } */ case 16:
		i = 0;
		/* while (i < fd.$length) { */ case 18: if(!(i < fd.$length)) { $s = 19; continue; }
			/* if (((i < 0 || i >= fd.$length) ? $throwRuntimeError("index out of range") : fd.$array[fd.$offset + i]) >= 0 && ((i < 0 || i >= fd.$length) ? $throwRuntimeError("index out of range") : fd.$array[fd.$offset + i]) < i) { */ if (((i < 0 || i >= fd.$length) ? $throwRuntimeError("index out of range") : fd.$array[fd.$offset + i]) >= 0 && ((i < 0 || i >= fd.$length) ? $throwRuntimeError("index out of range") : fd.$array[fd.$offset + i]) < i) {} else { $s = 20; continue; }
				_tuple$10 = RawSyscall(90, (((i < 0 || i >= fd.$length) ? $throwRuntimeError("index out of range") : fd.$array[fd.$offset + i]) >>> 0), (nextfd >>> 0), 0); err1 = _tuple$10[2];
				/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 21; continue; }
					/* goto childerror */ $s = 1; continue;
				/* } */ case 21:
				RawSyscall(92, (nextfd >>> 0), 2, 1);
				(i < 0 || i >= fd.$length) ? $throwRuntimeError("index out of range") : fd.$array[fd.$offset + i] = nextfd;
				nextfd = nextfd + (1) >> 0;
				if (nextfd === pipe$1) {
					nextfd = nextfd + (1) >> 0;
				}
			/* } */ case 20:
			i = i + (1) >> 0;
		/* } */ $s = 18; continue; case 19:
		i = 0;
		/* while (i < fd.$length) { */ case 22: if(!(i < fd.$length)) { $s = 23; continue; }
			if (((i < 0 || i >= fd.$length) ? $throwRuntimeError("index out of range") : fd.$array[fd.$offset + i]) === -1) {
				RawSyscall(6, (i >>> 0), 0, 0);
				i = i + (1) >> 0;
				/* continue; */ $s = 22; continue;
			}
			/* if (((i < 0 || i >= fd.$length) ? $throwRuntimeError("index out of range") : fd.$array[fd.$offset + i]) === i) { */ if (((i < 0 || i >= fd.$length) ? $throwRuntimeError("index out of range") : fd.$array[fd.$offset + i]) === i) {} else { $s = 24; continue; }
				_tuple$11 = RawSyscall(92, (((i < 0 || i >= fd.$length) ? $throwRuntimeError("index out of range") : fd.$array[fd.$offset + i]) >>> 0), 2, 0); err1 = _tuple$11[2];
				/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 25; continue; }
					/* goto childerror */ $s = 1; continue;
				/* } */ case 25:
				i = i + (1) >> 0;
				/* continue; */ $s = 22; continue;
			/* } */ case 24:
			_tuple$12 = RawSyscall(90, (((i < 0 || i >= fd.$length) ? $throwRuntimeError("index out of range") : fd.$array[fd.$offset + i]) >>> 0), (i >>> 0), 0); err1 = _tuple$12[2];
			/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 26; continue; }
				/* goto childerror */ $s = 1; continue;
			/* } */ case 26:
			i = i + (1) >> 0;
		/* } */ $s = 22; continue; case 23:
		i = fd.$length;
		while (i < 3) {
			RawSyscall(6, (i >>> 0), 0, 0);
			i = i + (1) >> 0;
		}
		/* if (sys.Noctty) { */ if (sys.Noctty) {} else { $s = 27; continue; }
			_tuple$13 = RawSyscall(54, 0, 536900721, 0); err1 = _tuple$13[2];
			/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 28; continue; }
				/* goto childerror */ $s = 1; continue;
			/* } */ case 28:
		/* } */ case 27:
		/* if (sys.Setctty) { */ if (sys.Setctty) {} else { $s = 29; continue; }
			_tuple$14 = RawSyscall(54, 0, 536900705, 0); err1 = _tuple$14[2];
			/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 30; continue; }
				/* goto childerror */ $s = 1; continue;
			/* } */ case 30:
		/* } */ case 29:
		_tuple$15 = RawSyscall(59, argv0, $sliceToArray(argv), $sliceToArray(envv)); err1 = _tuple$15[2];
		/* childerror: */ case 1:
		RawSyscall(4, (pipe$1 >>> 0), new ($ptrType(Errno))(function() { return err1; }, function($v) { err1 = $v; }), 4);
		while (true) {
			RawSyscall(1, 253, 0, 0);
		}
		/* */ case -1: } return; }
	};
	forkExecPipe = function(p) {
		var err, _tuple, _tuple$1;
		err = Pipe(p);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_tuple = fcntl(((0 < 0 || 0 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]), 2, 1); err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_tuple$1 = fcntl(((1 < 0 || 1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1]), 2, 1); err = _tuple$1[1];
		return err;
	};
	SlicePtrFromStrings = $pkg.SlicePtrFromStrings = function(ss) {
		var err, bb, i, _tuple, x;
		err = $ifaceNil;
		bb = ($sliceType(($ptrType($Uint8)))).make((ss.$length + 1 >> 0));
		i = 0;
		while (i < ss.$length) {
			_tuple = BytePtrFromString(((i < 0 || i >= ss.$length) ? $throwRuntimeError("index out of range") : ss.$array[ss.$offset + i])); (i < 0 || i >= bb.$length) ? $throwRuntimeError("index out of range") : bb.$array[bb.$offset + i] = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [($sliceType(($ptrType($Uint8)))).nil, err];
			}
			i = i + (1) >> 0;
		}
		(x = ss.$length, (x < 0 || x >= bb.$length) ? $throwRuntimeError("index out of range") : bb.$array[bb.$offset + x] = ($ptrType($Uint8)).nil);
		return [bb, $ifaceNil];
	};
	CloseOnExec = $pkg.CloseOnExec = function(fd) {
		fcntl(fd, 2, 1);
	};
	SetNonblock = $pkg.SetNonblock = function(fd, nonblocking) {
		var err = $ifaceNil, _tuple, flag, _tuple$1;
		_tuple = fcntl(fd, 3, 0); flag = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = err;
			return err;
		}
		if (nonblocking) {
			flag = flag | (4);
		} else {
			flag = flag & (-5);
		}
		_tuple$1 = fcntl(fd, 4, flag); err = _tuple$1[1];
		err = err;
		return err;
	};
	forkExec = function(argv0, argv, attr) {
		var $this = this, $args = arguments, pid = 0, err = $ifaceNil, $s = 0, p, n, err1, wstatus, sys, _tuple, argv0p, _tmp, _tmp$1, _tuple$1, argvp, _tmp$2, _tmp$3, _tuple$2, envvp, _tmp$4, _tmp$5, chroot, _tuple$3, _tmp$6, _tmp$7, dir, _tuple$4, _tmp$8, _tmp$9, _tuple$5, _tuple$6, _tuple$7, err1$1, _tuple$8, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15;
		/* */ s: while (true) { switch ($s) { case 0:
		p = ($arrayType($Int, 2)).zero(); $copy(p, ($arrayType($Int, 2)).zero(), ($arrayType($Int, 2)));
		n = 0;
		err1 = 0;
		wstatus = 0;
		if (attr === ($ptrType(ProcAttr)).nil) {
			attr = zeroProcAttr;
		}
		sys = attr.Sys;
		if (sys === ($ptrType(SysProcAttr)).nil) {
			sys = zeroSysProcAttr;
		}
		p[0] = -1;
		p[1] = -1;
		_tuple = BytePtrFromString(argv0); argv0p = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = 0; _tmp$1 = err; pid = _tmp; err = _tmp$1;
			return [pid, err];
		}
		_tuple$1 = SlicePtrFromStrings(argv); argvp = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = 0; _tmp$3 = err; pid = _tmp$2; err = _tmp$3;
			return [pid, err];
		}
		_tuple$2 = SlicePtrFromStrings(attr.Env); envvp = _tuple$2[0]; err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$4 = 0; _tmp$5 = err; pid = _tmp$4; err = _tmp$5;
			return [pid, err];
		}
		chroot = ($ptrType($Uint8)).nil;
		if (!(sys.Chroot === "")) {
			_tuple$3 = BytePtrFromString(sys.Chroot); chroot = _tuple$3[0]; err = _tuple$3[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$6 = 0; _tmp$7 = err; pid = _tmp$6; err = _tmp$7;
				return [pid, err];
			}
		}
		dir = ($ptrType($Uint8)).nil;
		if (!(attr.Dir === "")) {
			_tuple$4 = BytePtrFromString(attr.Dir); dir = _tuple$4[0]; err = _tuple$4[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$8 = 0; _tmp$9 = err; pid = _tmp$8; err = _tmp$9;
				return [pid, err];
			}
		}
		$pkg.ForkLock.Lock();
		err = forkExecPipe(new ($sliceType($Int))(p));
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ if (!($interfaceIsEqual(err, $ifaceNil))) {} else { $s = 2; continue; }
			/* goto error */ $s = 1; continue;
		/* } */ case 2:
		_tuple$5 = forkAndExecInChild(argv0p, argvp, envvp, chroot, dir, attr, sys, p[1]); pid = _tuple$5[0]; err1 = _tuple$5[1];
		/* if (!((err1 === 0))) { */ if (!((err1 === 0))) {} else { $s = 3; continue; }
			err = new Errno(err1);
			/* goto error */ $s = 1; continue;
		/* } */ case 3:
		$pkg.ForkLock.Unlock();
		Close(p[1]);
		_tuple$6 = readlen(p[0], new ($ptrType(Errno))(function() { return err1; }, function($v) { err1 = $v; }), 4); n = _tuple$6[0]; err = _tuple$6[1];
		Close(p[0]);
		if (!($interfaceIsEqual(err, $ifaceNil)) || !((n === 0))) {
			if (n === 4) {
				err = new Errno(err1);
			}
			if ($interfaceIsEqual(err, $ifaceNil)) {
				err = new Errno(32);
			}
			_tuple$7 = Wait4(pid, new ($ptrType(WaitStatus))(function() { return wstatus; }, function($v) { wstatus = $v; }), 0, ($ptrType(Rusage)).nil); err1$1 = _tuple$7[1];
			while ($interfaceIsEqual(err1$1, new Errno(4))) {
				_tuple$8 = Wait4(pid, new ($ptrType(WaitStatus))(function() { return wstatus; }, function($v) { wstatus = $v; }), 0, ($ptrType(Rusage)).nil); err1$1 = _tuple$8[1];
			}
			_tmp$10 = 0; _tmp$11 = err; pid = _tmp$10; err = _tmp$11;
			return [pid, err];
		}
		_tmp$12 = pid; _tmp$13 = $ifaceNil; pid = _tmp$12; err = _tmp$13;
		return [pid, err];
		/* error: */ case 1:
		if (p[0] >= 0) {
			Close(p[0]);
			Close(p[1]);
		}
		$pkg.ForkLock.Unlock();
		_tmp$14 = 0; _tmp$15 = err; pid = _tmp$14; err = _tmp$15;
		return [pid, err];
		/* */ case -1: } return; }
	};
	StartProcess = $pkg.StartProcess = function(argv0, argv, attr) {
		var pid = 0, handle = 0, err = $ifaceNil, _tuple, _tmp, _tmp$1, _tmp$2;
		_tuple = forkExec(argv0, argv, attr); pid = _tuple[0]; err = _tuple[1];
		_tmp = pid; _tmp$1 = 0; _tmp$2 = err; pid = _tmp; handle = _tmp$1; err = _tmp$2;
		return [pid, handle, err];
	};
	rsaAlignOf = function(salen) {
		var salign;
		salign = 8;
		salign = 4;
		if (salen === 0) {
			return salign;
		}
		return (((salen + salign >> 0) - 1 >> 0)) & (~((salign - 1 >> 0)) >> 0);
	};
	RouteRIB = $pkg.RouteRIB = function(facility, param) {
		var mib, n, err, tab, err$1;
		mib = new ($sliceType(_C_int))([4, 17, 0, 0, (facility >> 0), (param >> 0)]);
		n = 0;
		err = sysctl(mib, ($ptrType($Uint8)).nil, new ($ptrType($Uintptr))(function() { return n; }, function($v) { n = $v; }), ($ptrType($Uint8)).nil, 0);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($sliceType($Uint8)).nil, err];
		}
		if (n === 0) {
			return [($sliceType($Uint8)).nil, $ifaceNil];
		}
		tab = ($sliceType($Uint8)).make(n);
		err$1 = sysctl(mib, new ($ptrType($Uint8))(function() { return ((0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0]); }, function($v) { (0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0] = $v; }, tab), new ($ptrType($Uintptr))(function() { return n; }, function($v) { n = $v; }), ($ptrType($Uint8)).nil, 0);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			return [($sliceType($Uint8)).nil, err$1];
		}
		return [$subslice(tab, 0, n), $ifaceNil];
	};
	RouteMessage.Ptr.prototype.sockaddr = function() {
		var m, af, sas, b, i, y, _array, _struct, _view, rsa, _ref, _tuple, _array$1, _struct$1, _view$1, _array$2, _struct$2, _view$2, sa, err, _ref$1, _array$3, _struct$3, _view$3, rsa4, sa$1, j, x, x$1, _array$4, _struct$4, _view$4, rsa6, sa$2, j$1, x$2, x$3;
		m = this;
		af = 0;
		sas = ($arrayType(Sockaddr, 4)).zero(); $copy(sas, ($arrayType(Sockaddr, 4)).zero(), ($arrayType(Sockaddr, 4)));
		b = m.Data;
		i = 0;
		while (i < 8) {
			if (((m.Header.Addrs & 15) & (((y = i, y < 32 ? (1 << y) : 0) >> 0))) === 0) {
				i = i + (1) >>> 0;
				continue;
			}
			rsa = (_array = $sliceToArray(b), _struct = new RawSockaddr.Ptr(), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Len = _view.getUint8(0, true), _struct.Family = _view.getUint8(1, true), _struct.Data = new ($nativeArray("Int8"))(_array.buffer, $min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct);
			_ref = i;
			if (_ref === 0 || _ref === 1) {
				_array$2 = new Uint8Array(16);
				_tuple = anyToSockaddr((_array$1 = _array$2, _struct$1 = new RawSockaddrAny.Ptr(), _view$1 = new DataView(_array$1.buffer, _array$1.byteOffset), _struct$1.Addr.Len = _view$1.getUint8(0, true), _struct$1.Addr.Family = _view$1.getUint8(1, true), _struct$1.Addr.Data = new ($nativeArray("Int8"))(_array$1.buffer, $min(_array$1.byteOffset + 2, _array$1.buffer.byteLength)), _struct$1.Pad = new ($nativeArray("Int8"))(_array$1.buffer, $min(_array$1.byteOffset + 16, _array$1.buffer.byteLength)), _struct$1)); sa = _tuple[0]; err = _tuple[1];
				_struct$2 = rsa, _view$2 = new DataView(_array$2.buffer, _array$2.byteOffset), _struct$2.Len = _view$2.getUint8(0, true), _struct$2.Family = _view$2.getUint8(1, true), _struct$2.Data = new ($nativeArray("Int8"))(_array$2.buffer, $min(_array$2.byteOffset + 2, _array$2.buffer.byteLength));
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return ($sliceType(Sockaddr)).nil;
				}
				if (i === 0) {
					af = (rsa.Family >> 0);
				}
				(i < 0 || i >= sas.length) ? $throwRuntimeError("index out of range") : sas[i] = sa;
			} else if (_ref === 2 || _ref === 3) {
				_ref$1 = af;
				if (_ref$1 === 2) {
					rsa4 = (_array$3 = $sliceToArray(b), _struct$3 = new RawSockaddrInet4.Ptr(), _view$3 = new DataView(_array$3.buffer, _array$3.byteOffset), _struct$3.Len = _view$3.getUint8(0, true), _struct$3.Family = _view$3.getUint8(1, true), _struct$3.Port = _view$3.getUint16(2, true), _struct$3.Addr = new ($nativeArray("Uint8"))(_array$3.buffer, $min(_array$3.byteOffset + 4, _array$3.buffer.byteLength)), _struct$3.Zero = new ($nativeArray("Int8"))(_array$3.buffer, $min(_array$3.byteOffset + 8, _array$3.buffer.byteLength)), _struct$3);
					sa$1 = new SockaddrInet4.Ptr();
					j = 0;
					while (rsa4.Len > 0 && j < ((rsa4.Len >> 0) - 4 >> 0)) {
						(x$1 = sa$1.Addr, (j < 0 || j >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[j] = (x = rsa4.Addr, ((j < 0 || j >= x.length) ? $throwRuntimeError("index out of range") : x[j])));
						j = j + (1) >> 0;
					}
					(i < 0 || i >= sas.length) ? $throwRuntimeError("index out of range") : sas[i] = sa$1;
				} else if (_ref$1 === 30) {
					rsa6 = (_array$4 = $sliceToArray(b), _struct$4 = new RawSockaddrInet6.Ptr(), _view$4 = new DataView(_array$4.buffer, _array$4.byteOffset), _struct$4.Len = _view$4.getUint8(0, true), _struct$4.Family = _view$4.getUint8(1, true), _struct$4.Port = _view$4.getUint16(2, true), _struct$4.Flowinfo = _view$4.getUint32(4, true), _struct$4.Addr = new ($nativeArray("Uint8"))(_array$4.buffer, $min(_array$4.byteOffset + 8, _array$4.buffer.byteLength)), _struct$4.Scope_id = _view$4.getUint32(24, true), _struct$4);
					sa$2 = new SockaddrInet6.Ptr();
					j$1 = 0;
					while (rsa6.Len > 0 && j$1 < ((rsa6.Len >> 0) - 8 >> 0)) {
						(x$3 = sa$2.Addr, (j$1 < 0 || j$1 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[j$1] = (x$2 = rsa6.Addr, ((j$1 < 0 || j$1 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[j$1])));
						j$1 = j$1 + (1) >> 0;
					}
					(i < 0 || i >= sas.length) ? $throwRuntimeError("index out of range") : sas[i] = sa$2;
				}
			}
			b = $subslice(b, rsaAlignOf((rsa.Len >> 0)));
			i = i + (1) >>> 0;
		}
		return new ($sliceType(Sockaddr))(sas);
	};
	RouteMessage.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	InterfaceMessage.Ptr.prototype.sockaddr = function() {
		var sas = ($sliceType(Sockaddr)).nil, m, _tuple, _array, _struct, _view, sa, err;
		m = this;
		if ((m.Header.Addrs & 16) === 0) {
			sas = ($sliceType(Sockaddr)).nil;
			return sas;
		}
		_tuple = anyToSockaddr((_array = $sliceToArray(m.Data), _struct = new RawSockaddrAny.Ptr(), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Len = _view.getUint8(0, true), _struct.Addr.Family = _view.getUint8(1, true), _struct.Addr.Data = new ($nativeArray("Int8"))(_array.buffer, $min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new ($nativeArray("Int8"))(_array.buffer, $min(_array.byteOffset + 16, _array.buffer.byteLength)), _struct)); sa = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			sas = ($sliceType(Sockaddr)).nil;
			return sas;
		}
		sas = $append(sas, sa);
		return sas;
	};
	InterfaceMessage.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	InterfaceAddrMessage.Ptr.prototype.sockaddr = function() {
		var sas = ($sliceType(Sockaddr)).nil, m, b, preferredFamily, i, y, _array, _struct, _view, rsa, _ref, _tuple, _array$1, _struct$1, _view$1, _array$2, _struct$2, _view$2, sa, err, _ref$1, _ref$2, _tuple$1, _array$3, _struct$3, _view$3, _array$4, _struct$4, _view$4, sa$1, err$1;
		m = this;
		if ((m.Header.Addrs & 164) === 0) {
			sas = ($sliceType(Sockaddr)).nil;
			return sas;
		}
		b = m.Data;
		preferredFamily = 0;
		i = 0;
		while (i < 8) {
			if (((m.Header.Addrs & 164) & (((y = i, y < 32 ? (1 << y) : 0) >> 0))) === 0) {
				i = i + (1) >>> 0;
				continue;
			}
			rsa = (_array = $sliceToArray(b), _struct = new RawSockaddr.Ptr(), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Len = _view.getUint8(0, true), _struct.Family = _view.getUint8(1, true), _struct.Data = new ($nativeArray("Int8"))(_array.buffer, $min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct);
			_ref = i;
			if (_ref === 5) {
				if (rsa.Family === 0) {
					rsa.Family = preferredFamily;
				}
				_array$2 = new Uint8Array(16);
				_tuple = anyToSockaddr((_array$1 = _array$2, _struct$1 = new RawSockaddrAny.Ptr(), _view$1 = new DataView(_array$1.buffer, _array$1.byteOffset), _struct$1.Addr.Len = _view$1.getUint8(0, true), _struct$1.Addr.Family = _view$1.getUint8(1, true), _struct$1.Addr.Data = new ($nativeArray("Int8"))(_array$1.buffer, $min(_array$1.byteOffset + 2, _array$1.buffer.byteLength)), _struct$1.Pad = new ($nativeArray("Int8"))(_array$1.buffer, $min(_array$1.byteOffset + 16, _array$1.buffer.byteLength)), _struct$1)); sa = _tuple[0]; err = _tuple[1];
				_struct$2 = rsa, _view$2 = new DataView(_array$2.buffer, _array$2.byteOffset), _struct$2.Len = _view$2.getUint8(0, true), _struct$2.Family = _view$2.getUint8(1, true), _struct$2.Data = new ($nativeArray("Int8"))(_array$2.buffer, $min(_array$2.byteOffset + 2, _array$2.buffer.byteLength));
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					sas = ($sliceType(Sockaddr)).nil;
					return sas;
				}
				sas = $append(sas, sa);
			} else if (_ref === 2) {
				_ref$1 = rsa.Family;
				if (_ref$1 === 0) {
					_ref$2 = rsa.Len;
					if (_ref$2 === 16) {
						rsa.Family = 2;
					} else if (_ref$2 === 28) {
						rsa.Family = 30;
					} else {
						rsa.Family = 2;
					}
				} else if (_ref$1 === 2 || _ref$1 === 30) {
					preferredFamily = rsa.Family;
				} else {
					sas = ($sliceType(Sockaddr)).nil;
					return sas;
				}
				_array$4 = new Uint8Array(16);
				_tuple$1 = anyToSockaddr((_array$3 = _array$4, _struct$3 = new RawSockaddrAny.Ptr(), _view$3 = new DataView(_array$3.buffer, _array$3.byteOffset), _struct$3.Addr.Len = _view$3.getUint8(0, true), _struct$3.Addr.Family = _view$3.getUint8(1, true), _struct$3.Addr.Data = new ($nativeArray("Int8"))(_array$3.buffer, $min(_array$3.byteOffset + 2, _array$3.buffer.byteLength)), _struct$3.Pad = new ($nativeArray("Int8"))(_array$3.buffer, $min(_array$3.byteOffset + 16, _array$3.buffer.byteLength)), _struct$3)); sa$1 = _tuple$1[0]; err$1 = _tuple$1[1];
				_struct$4 = rsa, _view$4 = new DataView(_array$4.buffer, _array$4.byteOffset), _struct$4.Len = _view$4.getUint8(0, true), _struct$4.Family = _view$4.getUint8(1, true), _struct$4.Data = new ($nativeArray("Int8"))(_array$4.buffer, $min(_array$4.byteOffset + 2, _array$4.buffer.byteLength));
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					sas = ($sliceType(Sockaddr)).nil;
					return sas;
				}
				sas = $append(sas, sa$1);
			}
			b = $subslice(b, rsaAlignOf((rsa.Len >> 0)));
			i = i + (1) >>> 0;
		}
		sas = sas;
		return sas;
	};
	InterfaceAddrMessage.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	ParseRoutingMessage = $pkg.ParseRoutingMessage = function(b) {
		var msgs = ($sliceType(RoutingMessage)).nil, err = $ifaceNil, msgCount, _array, _struct, _view, any, _tmp, _tmp$1, _tmp$2, _tmp$3;
		msgCount = 0;
		while (b.$length >= 4) {
			msgCount = msgCount + (1) >> 0;
			any = (_array = $sliceToArray(b), _struct = new anyMessage.Ptr(), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Msglen = _view.getUint16(0, true), _struct.Version = _view.getUint8(2, true), _struct.Type = _view.getUint8(3, true), _struct);
			if (!((any.Version === 5))) {
				b = $subslice(b, any.Msglen);
				continue;
			}
			msgs = $append(msgs, any.toRoutingMessage(b));
			b = $subslice(b, any.Msglen);
		}
		if (msgCount > 0 && (msgs.$length === 0)) {
			_tmp = ($sliceType(RoutingMessage)).nil; _tmp$1 = new Errno(22); msgs = _tmp; err = _tmp$1;
			return [msgs, err];
		}
		_tmp$2 = msgs; _tmp$3 = $ifaceNil; msgs = _tmp$2; err = _tmp$3;
		return [msgs, err];
	};
	ParseRoutingSockaddr = $pkg.ParseRoutingSockaddr = function(msg) {
		var sas = ($sliceType(Sockaddr)).nil, err = $ifaceNil, _tmp, _tmp$1;
		_tmp = $appendSlice(sas, msg.sockaddr()); _tmp$1 = $ifaceNil; sas = _tmp; err = _tmp$1;
		return [sas, err];
	};
	anyMessage.Ptr.prototype.toRoutingMessage = function(b) {
		var any, _ref, _array, _struct, _view, _array$1, _struct$1, _view$1, p, _array$2, _struct$2, _view$2, _array$3, _struct$3, _view$3, p$1, _array$4, _struct$4, _view$4, _array$5, _struct$5, _view$5, p$2, _array$6, _struct$6, _view$6, _array$7, _struct$7, _view$7, p$3;
		any = this;
		_ref = any.Type;
		if (_ref === 1 || _ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6 || _ref === 7 || _ref === 8 || _ref === 11) {
			_array$1 = new Uint8Array(4);
			p = (_array = _array$1, _struct = new RouteMessage.Ptr(), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Header.Msglen = _view.getUint16(0, true), _struct.Header.Version = _view.getUint8(2, true), _struct.Header.Type = _view.getUint8(3, true), _struct.Header.Index = _view.getUint16(4, true), _struct.Header.Pad_cgo_0 = new ($nativeArray("Uint8"))(_array.buffer, $min(_array.byteOffset + 6, _array.buffer.byteLength)), _struct.Header.Flags = _view.getInt32(8, true), _struct.Header.Addrs = _view.getInt32(12, true), _struct.Header.Pid = _view.getInt32(16, true), _struct.Header.Seq = _view.getInt32(20, true), _struct.Header.Errno = _view.getInt32(24, true), _struct.Header.Use = _view.getInt32(28, true), _struct.Header.Inits = _view.getUint32(32, true), _struct.Header.Rmx.Locks = _view.getUint32(36, true), _struct.Header.Rmx.Mtu = _view.getUint32(40, true), _struct.Header.Rmx.Hopcount = _view.getUint32(44, true), _struct.Header.Rmx.Expire = _view.getInt32(48, true), _struct.Header.Rmx.Recvpipe = _view.getUint32(52, true), _struct.Header.Rmx.Sendpipe = _view.getUint32(56, true), _struct.Header.Rmx.Ssthresh = _view.getUint32(60, true), _struct.Header.Rmx.Rtt = _view.getUint32(64, true), _struct.Header.Rmx.Rttvar = _view.getUint32(68, true), _struct.Header.Rmx.Pksent = _view.getUint32(72, true), _struct.Header.Rmx.Filler = new ($nativeArray("Uint32"))(_array.buffer, $min(_array.byteOffset + 76, _array.buffer.byteLength)), _struct);
			_struct$1 = any, _view$1 = new DataView(_array$1.buffer, _array$1.byteOffset), _struct$1.Msglen = _view$1.getUint16(0, true), _struct$1.Version = _view$1.getUint8(2, true), _struct$1.Type = _view$1.getUint8(3, true);
			return new RouteMessage.Ptr($clone(p.Header, RtMsghdr), $subslice(b, 92, any.Msglen));
		} else if (_ref === 14) {
			_array$3 = new Uint8Array(4);
			p$1 = (_array$2 = _array$3, _struct$2 = new InterfaceMessage.Ptr(), _view$2 = new DataView(_array$2.buffer, _array$2.byteOffset), _struct$2.Header.Msglen = _view$2.getUint16(0, true), _struct$2.Header.Version = _view$2.getUint8(2, true), _struct$2.Header.Type = _view$2.getUint8(3, true), _struct$2.Header.Addrs = _view$2.getInt32(4, true), _struct$2.Header.Flags = _view$2.getInt32(8, true), _struct$2.Header.Index = _view$2.getUint16(12, true), _struct$2.Header.Pad_cgo_0 = new ($nativeArray("Uint8"))(_array$2.buffer, $min(_array$2.byteOffset + 14, _array$2.buffer.byteLength)), _struct$2.Header.Data.Type = _view$2.getUint8(16, true), _struct$2.Header.Data.Typelen = _view$2.getUint8(17, true), _struct$2.Header.Data.Physical = _view$2.getUint8(18, true), _struct$2.Header.Data.Addrlen = _view$2.getUint8(19, true), _struct$2.Header.Data.Hdrlen = _view$2.getUint8(20, true), _struct$2.Header.Data.Recvquota = _view$2.getUint8(21, true), _struct$2.Header.Data.Xmitquota = _view$2.getUint8(22, true), _struct$2.Header.Data.Unused1 = _view$2.getUint8(23, true), _struct$2.Header.Data.Mtu = _view$2.getUint32(24, true), _struct$2.Header.Data.Metric = _view$2.getUint32(28, true), _struct$2.Header.Data.Baudrate = _view$2.getUint32(32, true), _struct$2.Header.Data.Ipackets = _view$2.getUint32(36, true), _struct$2.Header.Data.Ierrors = _view$2.getUint32(40, true), _struct$2.Header.Data.Opackets = _view$2.getUint32(44, true), _struct$2.Header.Data.Oerrors = _view$2.getUint32(48, true), _struct$2.Header.Data.Collisions = _view$2.getUint32(52, true), _struct$2.Header.Data.Ibytes = _view$2.getUint32(56, true), _struct$2.Header.Data.Obytes = _view$2.getUint32(60, true), _struct$2.Header.Data.Imcasts = _view$2.getUint32(64, true), _struct$2.Header.Data.Omcasts = _view$2.getUint32(68, true), _struct$2.Header.Data.Iqdrops = _view$2.getUint32(72, true), _struct$2.Header.Data.Noproto = _view$2.getUint32(76, true), _struct$2.Header.Data.Recvtiming = _view$2.getUint32(80, true), _struct$2.Header.Data.Xmittiming = _view$2.getUint32(84, true), _struct$2.Header.Data.Lastchange.Sec = _view$2.getInt32(88, true), _struct$2.Header.Data.Lastchange.Usec = _view$2.getInt32(92, true), _struct$2.Header.Data.Unused2 = _view$2.getUint32(96, true), _struct$2.Header.Data.Hwassist = _view$2.getUint32(100, true), _struct$2.Header.Data.Reserved1 = _view$2.getUint32(104, true), _struct$2.Header.Data.Reserved2 = _view$2.getUint32(108, true), _struct$2);
			_struct$3 = any, _view$3 = new DataView(_array$3.buffer, _array$3.byteOffset), _struct$3.Msglen = _view$3.getUint16(0, true), _struct$3.Version = _view$3.getUint8(2, true), _struct$3.Type = _view$3.getUint8(3, true);
			return new InterfaceMessage.Ptr($clone(p$1.Header, IfMsghdr), $subslice(b, 112, any.Msglen));
		} else if (_ref === 12 || _ref === 13) {
			_array$5 = new Uint8Array(4);
			p$2 = (_array$4 = _array$5, _struct$4 = new InterfaceAddrMessage.Ptr(), _view$4 = new DataView(_array$4.buffer, _array$4.byteOffset), _struct$4.Header.Msglen = _view$4.getUint16(0, true), _struct$4.Header.Version = _view$4.getUint8(2, true), _struct$4.Header.Type = _view$4.getUint8(3, true), _struct$4.Header.Addrs = _view$4.getInt32(4, true), _struct$4.Header.Flags = _view$4.getInt32(8, true), _struct$4.Header.Index = _view$4.getUint16(12, true), _struct$4.Header.Pad_cgo_0 = new ($nativeArray("Uint8"))(_array$4.buffer, $min(_array$4.byteOffset + 14, _array$4.buffer.byteLength)), _struct$4.Header.Metric = _view$4.getInt32(16, true), _struct$4);
			_struct$5 = any, _view$5 = new DataView(_array$5.buffer, _array$5.byteOffset), _struct$5.Msglen = _view$5.getUint16(0, true), _struct$5.Version = _view$5.getUint8(2, true), _struct$5.Type = _view$5.getUint8(3, true);
			return new InterfaceAddrMessage.Ptr($clone(p$2.Header, IfaMsghdr), $subslice(b, 20, any.Msglen));
		} else if (_ref === 19 || _ref === 16) {
			_array$7 = new Uint8Array(4);
			p$3 = (_array$6 = _array$7, _struct$6 = new InterfaceMulticastAddrMessage.Ptr(), _view$6 = new DataView(_array$6.buffer, _array$6.byteOffset), _struct$6.Header.Msglen = _view$6.getUint16(0, true), _struct$6.Header.Version = _view$6.getUint8(2, true), _struct$6.Header.Type = _view$6.getUint8(3, true), _struct$6.Header.Addrs = _view$6.getInt32(4, true), _struct$6.Header.Flags = _view$6.getInt32(8, true), _struct$6.Header.Index = _view$6.getUint16(12, true), _struct$6.Header.Pad_cgo_0 = new ($nativeArray("Uint8"))(_array$6.buffer, $min(_array$6.byteOffset + 14, _array$6.buffer.byteLength)), _struct$6.Header.Refcount = _view$6.getInt32(16, true), _struct$6);
			_struct$7 = any, _view$7 = new DataView(_array$7.buffer, _array$7.byteOffset), _struct$7.Msglen = _view$7.getUint16(0, true), _struct$7.Version = _view$7.getUint8(2, true), _struct$7.Type = _view$7.getUint8(3, true);
			return new InterfaceMulticastAddrMessage.Ptr($clone(p$3.Header, IfmaMsghdr2), $subslice(b, 20, any.Msglen));
		}
		return $ifaceNil;
	};
	anyMessage.prototype.toRoutingMessage = function(b) { return this.$val.toRoutingMessage(b); };
	InterfaceMulticastAddrMessage.Ptr.prototype.sockaddr = function() {
		var sas = ($sliceType(Sockaddr)).nil, m, b, i, y, _array, _struct, _view, rsa, _ref, _tuple, _array$1, _struct$1, _view$1, _array$2, _struct$2, _view$2, sa, e;
		m = this;
		if ((m.Header.Addrs & 50) === 0) {
			sas = ($sliceType(Sockaddr)).nil;
			return sas;
		}
		b = m.Data;
		i = 0;
		while (i < 8) {
			if (((m.Header.Addrs & 50) & (((y = i, y < 32 ? (1 << y) : 0) >> 0))) === 0) {
				i = i + (1) >>> 0;
				continue;
			}
			rsa = (_array = $sliceToArray(b), _struct = new RawSockaddr.Ptr(), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Len = _view.getUint8(0, true), _struct.Family = _view.getUint8(1, true), _struct.Data = new ($nativeArray("Int8"))(_array.buffer, $min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct);
			_ref = i;
			if (_ref === 5) {
				_array$2 = new Uint8Array(16);
				_tuple = anyToSockaddr((_array$1 = _array$2, _struct$1 = new RawSockaddrAny.Ptr(), _view$1 = new DataView(_array$1.buffer, _array$1.byteOffset), _struct$1.Addr.Len = _view$1.getUint8(0, true), _struct$1.Addr.Family = _view$1.getUint8(1, true), _struct$1.Addr.Data = new ($nativeArray("Int8"))(_array$1.buffer, $min(_array$1.byteOffset + 2, _array$1.buffer.byteLength)), _struct$1.Pad = new ($nativeArray("Int8"))(_array$1.buffer, $min(_array$1.byteOffset + 16, _array$1.buffer.byteLength)), _struct$1)); sa = _tuple[0]; e = _tuple[1];
				_struct$2 = rsa, _view$2 = new DataView(_array$2.buffer, _array$2.byteOffset), _struct$2.Len = _view$2.getUint8(0, true), _struct$2.Family = _view$2.getUint8(1, true), _struct$2.Data = new ($nativeArray("Int8"))(_array$2.buffer, $min(_array$2.byteOffset + 2, _array$2.buffer.byteLength));
				if (!($interfaceIsEqual(e, $ifaceNil))) {
					sas = ($sliceType(Sockaddr)).nil;
					return sas;
				}
				sas = $append(sas, sa);
			}
			b = $subslice(b, rsaAlignOf((rsa.Len >> 0)));
			i = i + (1) >>> 0;
		}
		sas = sas;
		return sas;
	};
	InterfaceMulticastAddrMessage.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	itoa = function(val) {
		var buf, i, _r, _q;
		if (val < 0) {
			return "-" + itoa(-val);
		}
		buf = ($arrayType($Uint8, 32)).zero(); $copy(buf, ($arrayType($Uint8, 32)).zero(), ($arrayType($Uint8, 32)));
		i = 31;
		while (val >= 10) {
			(i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = (((_r = val % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >> 0) << 24 >>> 24);
			i = i - (1) >> 0;
			val = (_q = val / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		}
		(i < 0 || i >= buf.length) ? $throwRuntimeError("index out of range") : buf[i] = ((val + 48 >> 0) << 24 >>> 24);
		return $bytesToString($subslice(new ($sliceType($Uint8))(buf), i));
	};
	ByteSliceFromString = $pkg.ByteSliceFromString = function(s) {
		var i, a;
		i = 0;
		while (i < s.length) {
			if (s.charCodeAt(i) === 0) {
				return [($sliceType($Uint8)).nil, new Errno(22)];
			}
			i = i + (1) >> 0;
		}
		a = ($sliceType($Uint8)).make((s.length + 1 >> 0));
		$copyString(a, s);
		return [a, $ifaceNil];
	};
	Timespec.Ptr.prototype.Unix = function() {
		var sec = new $Int64(0, 0), nsec = new $Int64(0, 0), ts, _tmp, _tmp$1;
		ts = this;
		_tmp = ts.Sec; _tmp$1 = ts.Nsec; sec = _tmp; nsec = _tmp$1;
		return [sec, nsec];
	};
	Timespec.prototype.Unix = function() { return this.$val.Unix(); };
	Timeval.Ptr.prototype.Unix = function() {
		var sec = new $Int64(0, 0), nsec = new $Int64(0, 0), tv, _tmp, _tmp$1;
		tv = this;
		_tmp = tv.Sec; _tmp$1 = $mul64(new $Int64(0, tv.Usec), new $Int64(0, 1000)); sec = _tmp; nsec = _tmp$1;
		return [sec, nsec];
	};
	Timeval.prototype.Unix = function() { return this.$val.Unix(); };
	Timespec.Ptr.prototype.Nano = function() {
		var ts, x, x$1;
		ts = this;
		return (x = $mul64(ts.Sec, new $Int64(0, 1000000000)), x$1 = ts.Nsec, new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	Timespec.prototype.Nano = function() { return this.$val.Nano(); };
	Timeval.Ptr.prototype.Nano = function() {
		var tv, x, x$1;
		tv = this;
		return (x = $mul64(tv.Sec, new $Int64(0, 1000000000)), x$1 = $mul64(new $Int64(0, tv.Usec), new $Int64(0, 1000)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
	};
	Timeval.prototype.Nano = function() { return this.$val.Nano(); };
	ReadDirent = $pkg.ReadDirent = function(fd, buf) {
		var n = 0, err = $ifaceNil, base, _tuple;
		base = new Uint8Array(8);
		_tuple = Getdirentries(fd, buf, base); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	WaitStatus.prototype.Exited = function() {
		var w;
		w = this.$val !== undefined ? this.$val : this;
		return ((w & 127) >>> 0) === 0;
	};
	$ptrType(WaitStatus).prototype.Exited = function() { return new WaitStatus(this.$get()).Exited(); };
	WaitStatus.prototype.ExitStatus = function() {
		var w;
		w = this.$val !== undefined ? this.$val : this;
		if (!((((w & 127) >>> 0) === 0))) {
			return -1;
		}
		return ((w >>> 8 >>> 0) >> 0);
	};
	$ptrType(WaitStatus).prototype.ExitStatus = function() { return new WaitStatus(this.$get()).ExitStatus(); };
	WaitStatus.prototype.Signaled = function() {
		var w;
		w = this.$val !== undefined ? this.$val : this;
		return !((((w & 127) >>> 0) === 127)) && !((((w & 127) >>> 0) === 0));
	};
	$ptrType(WaitStatus).prototype.Signaled = function() { return new WaitStatus(this.$get()).Signaled(); };
	WaitStatus.prototype.Signal = function() {
		var w, sig;
		w = this.$val !== undefined ? this.$val : this;
		sig = (((w & 127) >>> 0) >> 0);
		if ((sig === 127) || (sig === 0)) {
			return -1;
		}
		return sig;
	};
	$ptrType(WaitStatus).prototype.Signal = function() { return new WaitStatus(this.$get()).Signal(); };
	WaitStatus.prototype.CoreDump = function() {
		var w;
		w = this.$val !== undefined ? this.$val : this;
		return new WaitStatus(w).Signaled() && !((((w & 128) >>> 0) === 0));
	};
	$ptrType(WaitStatus).prototype.CoreDump = function() { return new WaitStatus(this.$get()).CoreDump(); };
	WaitStatus.prototype.Stopped = function() {
		var w;
		w = this.$val !== undefined ? this.$val : this;
		return (((w & 127) >>> 0) === 127) && !((((w >>> 8 >>> 0) >> 0) === 17));
	};
	$ptrType(WaitStatus).prototype.Stopped = function() { return new WaitStatus(this.$get()).Stopped(); };
	WaitStatus.prototype.Continued = function() {
		var w;
		w = this.$val !== undefined ? this.$val : this;
		return (((w & 127) >>> 0) === 127) && (((w >>> 8 >>> 0) >> 0) === 17);
	};
	$ptrType(WaitStatus).prototype.Continued = function() { return new WaitStatus(this.$get()).Continued(); };
	WaitStatus.prototype.StopSignal = function() {
		var w;
		w = this.$val !== undefined ? this.$val : this;
		if (!new WaitStatus(w).Stopped()) {
			return -1;
		}
		return ((w >>> 8 >>> 0) >> 0) & 255;
	};
	$ptrType(WaitStatus).prototype.StopSignal = function() { return new WaitStatus(this.$get()).StopSignal(); };
	WaitStatus.prototype.TrapCause = function() {
		var w;
		w = this.$val !== undefined ? this.$val : this;
		return -1;
	};
	$ptrType(WaitStatus).prototype.TrapCause = function() { return new WaitStatus(this.$get()).TrapCause(); };
	Wait4 = $pkg.Wait4 = function(pid, wstatus, options, rusage) {
		var wpid = 0, err = $ifaceNil, status, _tuple;
		status = 0;
		_tuple = wait4(pid, new ($ptrType(_C_int))(function() { return status; }, function($v) { status = $v; }), options, rusage); wpid = _tuple[0]; err = _tuple[1];
		if (!($pointerIsEqual(wstatus, ($ptrType(WaitStatus)).nil))) {
			wstatus.$set((status >>> 0));
		}
		return [wpid, err];
	};
	SockaddrInet4.Ptr.prototype.sockaddr = function() {
		var sa, p, i, x, x$1, _array, _struct, _view;
		sa = this;
		if (sa.Port < 0 || sa.Port > 65535) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Len = 16;
		sa.raw.Family = 2;
		p = new ($ptrType($Uint16))(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, sa.raw);
		p.nilCheck, p[0] = ((sa.Port >> 8 >> 0) << 24 >>> 24);
		p.nilCheck, p[1] = (sa.Port << 24 >>> 24);
		i = 0;
		while (i < 4) {
			(x$1 = sa.raw.Addr, (i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[i] = (x = sa.Addr, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i])));
			i = i + (1) >> 0;
		}
		_array = new Uint8Array(16);
		return [_array, (sa.raw.Len >>> 0), $ifaceNil];
	};
	SockaddrInet4.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	SockaddrInet6.Ptr.prototype.sockaddr = function() {
		var sa, p, i, x, x$1, _array, _struct, _view;
		sa = this;
		if (sa.Port < 0 || sa.Port > 65535) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Len = 28;
		sa.raw.Family = 30;
		p = new ($ptrType($Uint16))(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, sa.raw);
		p.nilCheck, p[0] = ((sa.Port >> 8 >> 0) << 24 >>> 24);
		p.nilCheck, p[1] = (sa.Port << 24 >>> 24);
		sa.raw.Scope_id = sa.ZoneId;
		i = 0;
		while (i < 16) {
			(x$1 = sa.raw.Addr, (i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[i] = (x = sa.Addr, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i])));
			i = i + (1) >> 0;
		}
		_array = new Uint8Array(28);
		return [_array, (sa.raw.Len >>> 0), $ifaceNil];
	};
	SockaddrInet6.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	SockaddrUnix.Ptr.prototype.sockaddr = function() {
		var sa, name, n, i, x, _array, _struct, _view;
		sa = this;
		name = sa.Name;
		n = name.length;
		if (n >= 104 || (n === 0)) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Len = ((3 + n >> 0) << 24 >>> 24);
		sa.raw.Family = 1;
		i = 0;
		while (i < n) {
			(x = sa.raw.Path, (i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i] = (name.charCodeAt(i) << 24 >> 24));
			i = i + (1) >> 0;
		}
		_array = new Uint8Array(106);
		return [_array, (sa.raw.Len >>> 0), $ifaceNil];
	};
	SockaddrUnix.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	SockaddrDatalink.Ptr.prototype.sockaddr = function() {
		var sa, i, x, x$1, _array, _struct, _view;
		sa = this;
		if (sa.Index === 0) {
			return [0, 0, new Errno(22)];
		}
		sa.raw.Len = sa.Len;
		sa.raw.Family = 18;
		sa.raw.Index = sa.Index;
		sa.raw.Type = sa.Type;
		sa.raw.Nlen = sa.Nlen;
		sa.raw.Alen = sa.Alen;
		sa.raw.Slen = sa.Slen;
		i = 0;
		while (i < 12) {
			(x$1 = sa.raw.Data, (i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[i] = (x = sa.Data, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i])));
			i = i + (1) >> 0;
		}
		_array = new Uint8Array(20);
		return [_array, 20, $ifaceNil];
	};
	SockaddrDatalink.prototype.sockaddr = function() { return this.$val.sockaddr(); };
	anyToSockaddr = function(rsa) {
		var _ref, _array, _struct, _view, _array$1, _struct$1, _view$1, pp, sa, i, x, x$1, _array$2, _struct$2, _view$2, _array$3, _struct$3, _view$3, pp$1, sa$1, n, i$1, x$2, bytes$1, _array$4, _struct$4, _view$4, _array$5, _struct$5, _view$5, pp$2, sa$2, p, i$2, x$3, x$4, _array$6, _struct$6, _view$6, _array$7, _struct$7, _view$7, pp$3, sa$3, p$1, i$3, x$5, x$6;
		_ref = rsa.Addr.Family;
		if (_ref === 18) {
			_array$1 = new Uint8Array(108);
			pp = (_array = _array$1, _struct = new RawSockaddrDatalink.Ptr(), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Len = _view.getUint8(0, true), _struct.Family = _view.getUint8(1, true), _struct.Index = _view.getUint16(2, true), _struct.Type = _view.getUint8(4, true), _struct.Nlen = _view.getUint8(5, true), _struct.Alen = _view.getUint8(6, true), _struct.Slen = _view.getUint8(7, true), _struct.Data = new ($nativeArray("Int8"))(_array.buffer, $min(_array.byteOffset + 8, _array.buffer.byteLength)), _struct);
			_struct$1 = rsa, _view$1 = new DataView(_array$1.buffer, _array$1.byteOffset), _struct$1.Addr.Len = _view$1.getUint8(0, true), _struct$1.Addr.Family = _view$1.getUint8(1, true), _struct$1.Addr.Data = new ($nativeArray("Int8"))(_array$1.buffer, $min(_array$1.byteOffset + 2, _array$1.buffer.byteLength)), _struct$1.Pad = new ($nativeArray("Int8"))(_array$1.buffer, $min(_array$1.byteOffset + 16, _array$1.buffer.byteLength));
			sa = new SockaddrDatalink.Ptr();
			sa.Len = pp.Len;
			sa.Family = pp.Family;
			sa.Index = pp.Index;
			sa.Type = pp.Type;
			sa.Nlen = pp.Nlen;
			sa.Alen = pp.Alen;
			sa.Slen = pp.Slen;
			i = 0;
			while (i < 12) {
				(x$1 = sa.Data, (i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[i] = (x = pp.Data, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i])));
				i = i + (1) >> 0;
			}
			return [sa, $ifaceNil];
		} else if (_ref === 1) {
			_array$3 = new Uint8Array(108);
			pp$1 = (_array$2 = _array$3, _struct$2 = new RawSockaddrUnix.Ptr(), _view$2 = new DataView(_array$2.buffer, _array$2.byteOffset), _struct$2.Len = _view$2.getUint8(0, true), _struct$2.Family = _view$2.getUint8(1, true), _struct$2.Path = new ($nativeArray("Int8"))(_array$2.buffer, $min(_array$2.byteOffset + 2, _array$2.buffer.byteLength)), _struct$2);
			_struct$3 = rsa, _view$3 = new DataView(_array$3.buffer, _array$3.byteOffset), _struct$3.Addr.Len = _view$3.getUint8(0, true), _struct$3.Addr.Family = _view$3.getUint8(1, true), _struct$3.Addr.Data = new ($nativeArray("Int8"))(_array$3.buffer, $min(_array$3.byteOffset + 2, _array$3.buffer.byteLength)), _struct$3.Pad = new ($nativeArray("Int8"))(_array$3.buffer, $min(_array$3.byteOffset + 16, _array$3.buffer.byteLength));
			if (pp$1.Len < 2 || pp$1.Len > 106) {
				return [$ifaceNil, new Errno(22)];
			}
			sa$1 = new SockaddrUnix.Ptr();
			n = (pp$1.Len >> 0) - 2 >> 0;
			i$1 = 0;
			while (i$1 < n) {
				if ((x$2 = pp$1.Path, ((i$1 < 0 || i$1 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i$1])) === 0) {
					n = i$1;
					break;
				}
				i$1 = i$1 + (1) >> 0;
			}
			bytes$1 = $subslice(new ($sliceType($Uint8))($sliceToArray(new ($sliceType($Uint8))(pp$1.Path))), 0, n);
			sa$1.Name = $bytesToString(bytes$1);
			return [sa$1, $ifaceNil];
		} else if (_ref === 2) {
			_array$5 = new Uint8Array(108);
			pp$2 = (_array$4 = _array$5, _struct$4 = new RawSockaddrInet4.Ptr(), _view$4 = new DataView(_array$4.buffer, _array$4.byteOffset), _struct$4.Len = _view$4.getUint8(0, true), _struct$4.Family = _view$4.getUint8(1, true), _struct$4.Port = _view$4.getUint16(2, true), _struct$4.Addr = new ($nativeArray("Uint8"))(_array$4.buffer, $min(_array$4.byteOffset + 4, _array$4.buffer.byteLength)), _struct$4.Zero = new ($nativeArray("Int8"))(_array$4.buffer, $min(_array$4.byteOffset + 8, _array$4.buffer.byteLength)), _struct$4);
			_struct$5 = rsa, _view$5 = new DataView(_array$5.buffer, _array$5.byteOffset), _struct$5.Addr.Len = _view$5.getUint8(0, true), _struct$5.Addr.Family = _view$5.getUint8(1, true), _struct$5.Addr.Data = new ($nativeArray("Int8"))(_array$5.buffer, $min(_array$5.byteOffset + 2, _array$5.buffer.byteLength)), _struct$5.Pad = new ($nativeArray("Int8"))(_array$5.buffer, $min(_array$5.byteOffset + 16, _array$5.buffer.byteLength));
			sa$2 = new SockaddrInet4.Ptr();
			p = new ($ptrType($Uint16))(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, pp$2);
			sa$2.Port = (((p.nilCheck, p[0]) >> 0) << 8 >> 0) + ((p.nilCheck, p[1]) >> 0) >> 0;
			i$2 = 0;
			while (i$2 < 4) {
				(x$4 = sa$2.Addr, (i$2 < 0 || i$2 >= x$4.length) ? $throwRuntimeError("index out of range") : x$4[i$2] = (x$3 = pp$2.Addr, ((i$2 < 0 || i$2 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[i$2])));
				i$2 = i$2 + (1) >> 0;
			}
			return [sa$2, $ifaceNil];
		} else if (_ref === 30) {
			_array$7 = new Uint8Array(108);
			pp$3 = (_array$6 = _array$7, _struct$6 = new RawSockaddrInet6.Ptr(), _view$6 = new DataView(_array$6.buffer, _array$6.byteOffset), _struct$6.Len = _view$6.getUint8(0, true), _struct$6.Family = _view$6.getUint8(1, true), _struct$6.Port = _view$6.getUint16(2, true), _struct$6.Flowinfo = _view$6.getUint32(4, true), _struct$6.Addr = new ($nativeArray("Uint8"))(_array$6.buffer, $min(_array$6.byteOffset + 8, _array$6.buffer.byteLength)), _struct$6.Scope_id = _view$6.getUint32(24, true), _struct$6);
			_struct$7 = rsa, _view$7 = new DataView(_array$7.buffer, _array$7.byteOffset), _struct$7.Addr.Len = _view$7.getUint8(0, true), _struct$7.Addr.Family = _view$7.getUint8(1, true), _struct$7.Addr.Data = new ($nativeArray("Int8"))(_array$7.buffer, $min(_array$7.byteOffset + 2, _array$7.buffer.byteLength)), _struct$7.Pad = new ($nativeArray("Int8"))(_array$7.buffer, $min(_array$7.byteOffset + 16, _array$7.buffer.byteLength));
			sa$3 = new SockaddrInet6.Ptr();
			p$1 = new ($ptrType($Uint16))(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, pp$3);
			sa$3.Port = (((p$1.nilCheck, p$1[0]) >> 0) << 8 >> 0) + ((p$1.nilCheck, p$1[1]) >> 0) >> 0;
			sa$3.ZoneId = pp$3.Scope_id;
			i$3 = 0;
			while (i$3 < 16) {
				(x$6 = sa$3.Addr, (i$3 < 0 || i$3 >= x$6.length) ? $throwRuntimeError("index out of range") : x$6[i$3] = (x$5 = pp$3.Addr, ((i$3 < 0 || i$3 >= x$5.length) ? $throwRuntimeError("index out of range") : x$5[i$3])));
				i$3 = i$3 + (1) >> 0;
			}
			return [sa$3, $ifaceNil];
		}
		return [$ifaceNil, new Errno(47)];
	};
	Accept = $pkg.Accept = function(fd) {
		var nfd = 0, sa = $ifaceNil, err = $ifaceNil, rsa, len, _tuple, _tmp, _tmp$1, _tmp$2, _tuple$1;
		rsa = new RawSockaddrAny.Ptr(); $copy(rsa, new RawSockaddrAny.Ptr(), RawSockaddrAny);
		len = 108;
		_tuple = accept(fd, rsa, new ($ptrType(_Socklen))(function() { return len; }, function($v) { len = $v; })); nfd = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [nfd, sa, err];
		}
		if (true && (len === 0)) {
			Close(nfd);
			_tmp = 0; _tmp$1 = $ifaceNil; _tmp$2 = new Errno(53); nfd = _tmp; sa = _tmp$1; err = _tmp$2;
			return [nfd, sa, err];
		}
		_tuple$1 = anyToSockaddr(rsa); sa = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			Close(nfd);
			nfd = 0;
		}
		return [nfd, sa, err];
	};
	Getsockname = $pkg.Getsockname = function(fd) {
		var sa = $ifaceNil, err = $ifaceNil, rsa, len, _tuple;
		rsa = new RawSockaddrAny.Ptr(); $copy(rsa, new RawSockaddrAny.Ptr(), RawSockaddrAny);
		len = 108;
		err = getsockname(fd, rsa, new ($ptrType(_Socklen))(function() { return len; }, function($v) { len = $v; }));
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [sa, err];
		}
		_tuple = anyToSockaddr(rsa); sa = _tuple[0]; err = _tuple[1];
		return [sa, err];
	};
	Sysctl = $pkg.Sysctl = function(name) {
		var value = "", err = $ifaceNil, _tuple, mib, _tmp, _tmp$1, n, _tmp$2, _tmp$3, _tmp$4, _tmp$5, buf, _tmp$6, _tmp$7, x, _tmp$8, _tmp$9;
		_tuple = nametomib(name); mib = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = ""; _tmp$1 = err; value = _tmp; err = _tmp$1;
			return [value, err];
		}
		n = 0;
		err = sysctl(mib, ($ptrType($Uint8)).nil, new ($ptrType($Uintptr))(function() { return n; }, function($v) { n = $v; }), ($ptrType($Uint8)).nil, 0);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = ""; _tmp$3 = err; value = _tmp$2; err = _tmp$3;
			return [value, err];
		}
		if (n === 0) {
			_tmp$4 = ""; _tmp$5 = $ifaceNil; value = _tmp$4; err = _tmp$5;
			return [value, err];
		}
		buf = ($sliceType($Uint8)).make(n);
		err = sysctl(mib, new ($ptrType($Uint8))(function() { return ((0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0]); }, function($v) { (0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0] = $v; }, buf), new ($ptrType($Uintptr))(function() { return n; }, function($v) { n = $v; }), ($ptrType($Uint8)).nil, 0);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$6 = ""; _tmp$7 = err; value = _tmp$6; err = _tmp$7;
			return [value, err];
		}
		if (n > 0 && ((x = n - 1 >>> 0, ((x < 0 || x >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + x])) === 0)) {
			n = n - (1) >>> 0;
		}
		_tmp$8 = $bytesToString($subslice(buf, 0, n)); _tmp$9 = $ifaceNil; value = _tmp$8; err = _tmp$9;
		return [value, err];
	};
	SysctlUint32 = $pkg.SysctlUint32 = function(name) {
		var value = 0, err = $ifaceNil, _tuple, mib, _tmp, _tmp$1, n, buf, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7;
		_tuple = nametomib(name); mib = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = 0; _tmp$1 = err; value = _tmp; err = _tmp$1;
			return [value, err];
		}
		n = 4;
		buf = ($sliceType($Uint8)).make(4);
		err = sysctl(mib, new ($ptrType($Uint8))(function() { return ((0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0]); }, function($v) { (0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0] = $v; }, buf), new ($ptrType($Uintptr))(function() { return n; }, function($v) { n = $v; }), ($ptrType($Uint8)).nil, 0);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = 0; _tmp$3 = err; value = _tmp$2; err = _tmp$3;
			return [value, err];
		}
		if (!((n === 4))) {
			_tmp$4 = 0; _tmp$5 = new Errno(5); value = _tmp$4; err = _tmp$5;
			return [value, err];
		}
		_tmp$6 = ((0 < 0 || 0 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]); _tmp$7 = $ifaceNil; value = _tmp$6; err = _tmp$7;
		return [value, err];
	};
	nametomib = function(name) {
		var mib = ($sliceType(_C_int)).nil, err = $ifaceNil, buf, n, p, _tuple, bytes$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _q, _tmp$5;
		buf = ($arrayType(_C_int, 14)).zero(); $copy(buf, ($arrayType(_C_int, 14)).zero(), ($arrayType(_C_int, 14)));
		n = 48;
		p = $sliceToArray(new ($sliceType($Uint8))(buf));
		_tuple = ByteSliceFromString(name); bytes$1 = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = ($sliceType(_C_int)).nil; _tmp$1 = err; mib = _tmp; err = _tmp$1;
			return [mib, err];
		}
		err = sysctl(new ($sliceType(_C_int))([0, 3]), p, new ($ptrType($Uintptr))(function() { return n; }, function($v) { n = $v; }), new ($ptrType($Uint8))(function() { return ((0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0]); }, function($v) { (0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0] = $v; }, bytes$1), (name.length >>> 0));
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = ($sliceType(_C_int)).nil; _tmp$3 = err; mib = _tmp$2; err = _tmp$3;
			return [mib, err];
		}
		_tmp$4 = $subslice(new ($sliceType(_C_int))(buf), 0, (_q = n / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"))); _tmp$5 = $ifaceNil; mib = _tmp$4; err = _tmp$5;
		return [mib, err];
	};
	ParseDirent = $pkg.ParseDirent = function(buf, max, names) {
		var consumed = 0, count = 0, newnames = ($sliceType($String)).nil, origlen, dirent, _array, _struct, _view, x, bytes$1, name, _tmp, _tmp$1, _tmp$2;
		origlen = buf.$length;
		while (!((max === 0)) && buf.$length > 0) {
			dirent = [undefined];
			dirent[0] = (_array = $sliceToArray(buf), _struct = new Dirent.Ptr(), _view = new DataView(_array.buffer, _array.byteOffset), _struct.Ino = new $Uint64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Seekoff = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Reclen = _view.getUint16(16, true), _struct.Namlen = _view.getUint16(18, true), _struct.Type = _view.getUint8(20, true), _struct.Name = new ($nativeArray("Int8"))(_array.buffer, $min(_array.byteOffset + 21, _array.buffer.byteLength)), _struct.Pad_cgo_0 = new ($nativeArray("Uint8"))(_array.buffer, $min(_array.byteOffset + 1045, _array.buffer.byteLength)), _struct);
			if (dirent[0].Reclen === 0) {
				buf = ($sliceType($Uint8)).nil;
				break;
			}
			buf = $subslice(buf, dirent[0].Reclen);
			if ((x = dirent[0].Ino, (x.$high === 0 && x.$low === 0))) {
				continue;
			}
			bytes$1 = $sliceToArray(new ($sliceType($Uint8))(dirent[0].Name));
			name = $bytesToString($subslice(new ($sliceType($Uint8))(bytes$1), 0, dirent[0].Namlen));
			if (name === "." || name === "..") {
				continue;
			}
			max = max - (1) >> 0;
			count = count + (1) >> 0;
			names = $append(names, name);
		}
		_tmp = origlen - buf.$length >> 0; _tmp$1 = count; _tmp$2 = names; consumed = _tmp; count = _tmp$1; newnames = _tmp$2;
		return [consumed, count, newnames];
	};
	Pipe = $pkg.Pipe = function(p) {
		var err = $ifaceNil, _tuple;
		if (!((p.$length === 2))) {
			err = new Errno(22);
			return err;
		}
		_tuple = pipe(); (0 < 0 || 0 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = _tuple[0]; (1 < 0 || 1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = _tuple[1]; err = _tuple[2];
		return err;
	};
	Kill = $pkg.Kill = function(pid, signum) {
		var err = $ifaceNil;
		err = kill(pid, (signum >> 0), 1);
		return err;
	};
	mmapper.Ptr.prototype.Mmap = function(fd, offset, length, prot, flags) {
		var data = ($sliceType($Uint8)).nil, err = $ifaceNil, $deferred = [], $err = null, m, _tmp, _tmp$1, _tuple, addr, errno, _tmp$2, _tmp$3, sl, b, x, x$1, p, _key, _tmp$4, _tmp$5;
		/* */ try { $deferFrames.push($deferred);
		m = this;
		if (length <= 0) {
			_tmp = ($sliceType($Uint8)).nil; _tmp$1 = new Errno(22); data = _tmp; err = _tmp$1;
			return [data, err];
		}
		_tuple = m.mmap(0, (length >>> 0), prot, flags, fd, offset); addr = _tuple[0]; errno = _tuple[1];
		if (!($interfaceIsEqual(errno, $ifaceNil))) {
			_tmp$2 = ($sliceType($Uint8)).nil; _tmp$3 = errno; data = _tmp$2; err = _tmp$3;
			return [data, err];
		}
		sl = new ($structType([["addr", "addr", "syscall", $Uintptr, ""], ["len", "len", "syscall", $Int, ""], ["cap", "cap", "syscall", $Int, ""]])).Ptr(addr, length, length);
		b = sl;
		p = new ($ptrType($Uint8))(function() { return (x$1 = b.$capacity - 1 >> 0, ((x$1 < 0 || x$1 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + x$1])); }, function($v) { (x = b.$capacity - 1 >> 0, (x < 0 || x >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + x] = $v); }, b);
		m.Mutex.Lock();
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		_key = p; (m.active || $throwRuntimeError("assignment to entry in nil map"))[_key.$key()] = { k: _key, v: b };
		_tmp$4 = b; _tmp$5 = $ifaceNil; data = _tmp$4; err = _tmp$5;
		return [data, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [data, err]; }
	};
	mmapper.prototype.Mmap = function(fd, offset, length, prot, flags) { return this.$val.Mmap(fd, offset, length, prot, flags); };
	mmapper.Ptr.prototype.Munmap = function(data) {
		var err = $ifaceNil, $deferred = [], $err = null, m, x, x$1, p, _entry, b, errno;
		/* */ try { $deferFrames.push($deferred);
		m = this;
		if ((data.$length === 0) || !((data.$length === data.$capacity))) {
			err = new Errno(22);
			return err;
		}
		p = new ($ptrType($Uint8))(function() { return (x$1 = data.$capacity - 1 >> 0, ((x$1 < 0 || x$1 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + x$1])); }, function($v) { (x = data.$capacity - 1 >> 0, (x < 0 || x >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + x] = $v); }, data);
		m.Mutex.Lock();
		$deferred.push([$methodVal(m.Mutex, "Unlock"), []]);
		b = (_entry = m.active[p.$key()], _entry !== undefined ? _entry.v : ($sliceType($Uint8)).nil);
		if (b === ($sliceType($Uint8)).nil || !($pointerIsEqual(new ($ptrType($Uint8))(function() { return ((0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0]); }, function($v) { (0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0] = $v; }, b), new ($ptrType($Uint8))(function() { return ((0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0]); }, function($v) { (0 < 0 || 0 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + 0] = $v; }, data)))) {
			err = new Errno(22);
			return err;
		}
		errno = m.munmap($sliceToArray(b), (b.$length >>> 0));
		if (!($interfaceIsEqual(errno, $ifaceNil))) {
			err = errno;
			return err;
		}
		delete m.active[p.$key()];
		err = $ifaceNil;
		return err;
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return err; }
	};
	mmapper.prototype.Munmap = function(data) { return this.$val.Munmap(data); };
	Errno.prototype.Error = function() {
		var e, s;
		e = this.$val !== undefined ? this.$val : this;
		if (0 <= (e >> 0) && (e >> 0) < 106) {
			s = ((e < 0 || e >= errors$1.length) ? $throwRuntimeError("index out of range") : errors$1[e]);
			if (!(s === "")) {
				return s;
			}
		}
		return "errno " + itoa((e >> 0));
	};
	$ptrType(Errno).prototype.Error = function() { return new Errno(this.$get()).Error(); };
	Errno.prototype.Temporary = function() {
		var e;
		e = this.$val !== undefined ? this.$val : this;
		return (e === 4) || (e === 24) || new Errno(e).Timeout();
	};
	$ptrType(Errno).prototype.Temporary = function() { return new Errno(this.$get()).Temporary(); };
	Errno.prototype.Timeout = function() {
		var e;
		e = this.$val !== undefined ? this.$val : this;
		return (e === 35) || (e === 35) || (e === 60);
	};
	$ptrType(Errno).prototype.Timeout = function() { return new Errno(this.$get()).Timeout(); };
	Signal.prototype.Signal = function() {
		var s;
		s = this.$val !== undefined ? this.$val : this;
	};
	$ptrType(Signal).prototype.Signal = function() { return new Signal(this.$get()).Signal(); };
	Signal.prototype.String = function() {
		var s, str;
		s = this.$val !== undefined ? this.$val : this;
		if (0 <= s && (s >> 0) < 32) {
			str = ((s < 0 || s >= signals.length) ? $throwRuntimeError("index out of range") : signals[s]);
			if (!(str === "")) {
				return str;
			}
		}
		return "signal " + itoa((s >> 0));
	};
	$ptrType(Signal).prototype.String = function() { return new Signal(this.$get()).String(); };
	Read = $pkg.Read = function(fd, p) {
		var n = 0, err = $ifaceNil, _tuple;
		_tuple = read(fd, p); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	Write = $pkg.Write = function(fd, p) {
		var n = 0, err = $ifaceNil, _tuple;
		_tuple = write(fd, p); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	Bind = $pkg.Bind = function(fd, sa) {
		var err = $ifaceNil, _tuple, ptr, n;
		_tuple = sa.sockaddr(); ptr = _tuple[0]; n = _tuple[1]; err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = err;
			return err;
		}
		err = bind(fd, ptr, n);
		return err;
	};
	SetsockoptInt = $pkg.SetsockoptInt = function(fd, level, opt, value) {
		var err = $ifaceNil, n;
		n = (value >> 0);
		err = setsockopt(fd, level, opt, new ($ptrType($Int32))(function() { return n; }, function($v) { n = $v; }), 4);
		return err;
	};
	SetsockoptLinger = $pkg.SetsockoptLinger = function(fd, level, opt, l) {
		var err = $ifaceNil, _array, _struct, _view;
		_array = new Uint8Array(8);
		err = setsockopt(fd, level, opt, _array, 8);
		_struct = l, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Onoff = _view.getInt32(0, true), _struct.Linger = _view.getInt32(4, true);
		return err;
	};
	Socket = $pkg.Socket = function(domain, typ, proto) {
		var fd = 0, err = $ifaceNil, _tmp, _tmp$1, _tuple;
		if ((domain === 30) && $pkg.SocketDisableIPv6) {
			_tmp = -1; _tmp$1 = new Errno(47); fd = _tmp; err = _tmp$1;
			return [fd, err];
		}
		_tuple = socket(domain, typ, proto); fd = _tuple[0]; err = _tuple[1];
		return [fd, err];
	};
	wait4 = function(pid, wstatus, options, rusage) {
		var wpid = 0, err = $ifaceNil, _tuple, _array, _struct, _view, r0, e1;
		_array = new Uint8Array(144);
		_tuple = Syscall6(7, (pid >>> 0), wstatus, (options >>> 0), _array, 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		_struct = rusage, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Utime.Sec = new $Int64(_view.getUint32(4, true), _view.getUint32(0, true)), _struct.Utime.Usec = _view.getInt32(8, true), _struct.Utime.Pad_cgo_0 = new ($nativeArray("Uint8"))(_array.buffer, $min(_array.byteOffset + 12, _array.buffer.byteLength)), _struct.Stime.Sec = new $Int64(_view.getUint32(20, true), _view.getUint32(16, true)), _struct.Stime.Usec = _view.getInt32(24, true), _struct.Stime.Pad_cgo_0 = new ($nativeArray("Uint8"))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Maxrss = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Ixrss = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Idrss = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Isrss = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Minflt = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Majflt = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Nswap = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Inblock = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Oublock = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Msgsnd = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Msgrcv = new $Int64(_view.getUint32(116, true), _view.getUint32(112, true)), _struct.Nsignals = new $Int64(_view.getUint32(124, true), _view.getUint32(120, true)), _struct.Nvcsw = new $Int64(_view.getUint32(132, true), _view.getUint32(128, true)), _struct.Nivcsw = new $Int64(_view.getUint32(140, true), _view.getUint32(136, true));
		wpid = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [wpid, err];
	};
	accept = function(s, rsa, addrlen) {
		var fd = 0, err = $ifaceNil, _tuple, _array, _struct, _view, r0, e1;
		_array = new Uint8Array(108);
		_tuple = Syscall(30, (s >>> 0), _array, addrlen); r0 = _tuple[0]; e1 = _tuple[2];
		_struct = rsa, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Len = _view.getUint8(0, true), _struct.Addr.Family = _view.getUint8(1, true), _struct.Addr.Data = new ($nativeArray("Int8"))(_array.buffer, $min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new ($nativeArray("Int8"))(_array.buffer, $min(_array.byteOffset + 16, _array.buffer.byteLength));
		fd = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [fd, err];
	};
	bind = function(s, addr, addrlen) {
		var err = $ifaceNil, _tuple, e1;
		_tuple = Syscall(104, (s >>> 0), addr, (addrlen >>> 0)); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	socket = function(domain, typ, proto) {
		var fd = 0, err = $ifaceNil, _tuple, r0, e1;
		_tuple = RawSyscall(97, (domain >>> 0), (typ >>> 0), (proto >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];
		fd = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [fd, err];
	};
	setsockopt = function(s, level, name, val, vallen) {
		var err = $ifaceNil, _tuple, e1;
		_tuple = Syscall6(105, (s >>> 0), (level >>> 0), (name >>> 0), val, vallen, 0); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	getsockname = function(fd, rsa, addrlen) {
		var err = $ifaceNil, _tuple, _array, _struct, _view, e1;
		_array = new Uint8Array(108);
		_tuple = RawSyscall(32, (fd >>> 0), _array, addrlen); e1 = _tuple[2];
		_struct = rsa, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Addr.Len = _view.getUint8(0, true), _struct.Addr.Family = _view.getUint8(1, true), _struct.Addr.Data = new ($nativeArray("Int8"))(_array.buffer, $min(_array.byteOffset + 2, _array.buffer.byteLength)), _struct.Pad = new ($nativeArray("Int8"))(_array.buffer, $min(_array.byteOffset + 16, _array.buffer.byteLength));
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Shutdown = $pkg.Shutdown = function(s, how) {
		var err = $ifaceNil, _tuple, e1;
		_tuple = Syscall(134, (s >>> 0), (how >>> 0), 0); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	sysctl = function(mib, old, oldlen, new$1, newlen) {
		var err = $ifaceNil, _p0, _tuple, e1;
		_p0 = 0;
		if (mib.$length > 0) {
			_p0 = $sliceToArray(mib);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(202, _p0, (mib.$length >>> 0), old, oldlen, new$1, newlen); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	fcntl = function(fd, cmd, arg) {
		var val = 0, err = $ifaceNil, _tuple, r0, e1;
		_tuple = Syscall(92, (fd >>> 0), (cmd >>> 0), (arg >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];
		val = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [val, err];
	};
	pipe = function() {
		var r = 0, w = 0, err = $ifaceNil, _tuple, r0, r1, e1;
		_tuple = RawSyscall(42, 0, 0, 0); r0 = _tuple[0]; r1 = _tuple[1]; e1 = _tuple[2];
		r = (r0 >> 0);
		w = (r1 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [r, w, err];
	};
	kill = function(pid, signum, posix) {
		var err = $ifaceNil, _tuple, e1;
		_tuple = Syscall(37, (pid >>> 0), (signum >>> 0), (posix >>> 0)); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Close = $pkg.Close = function(fd) {
		var err = $ifaceNil, _tuple, e1;
		_tuple = Syscall(6, (fd >>> 0), 0, 0); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Dup = $pkg.Dup = function(fd) {
		var nfd = 0, err = $ifaceNil, _tuple, r0, e1;
		_tuple = RawSyscall(41, (fd >>> 0), 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		nfd = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [nfd, err];
	};
	Exit = $pkg.Exit = function(code) {
		Syscall(1, (code >>> 0), 0, 0);
		return;
	};
	Fchdir = $pkg.Fchdir = function(fd) {
		var err = $ifaceNil, _tuple, e1;
		_tuple = Syscall(13, (fd >>> 0), 0, 0); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Fchmod = $pkg.Fchmod = function(fd, mode) {
		var err = $ifaceNil, _tuple, e1;
		_tuple = Syscall(124, (fd >>> 0), (mode >>> 0), 0); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Fchown = $pkg.Fchown = function(fd, uid, gid) {
		var err = $ifaceNil, _tuple, e1;
		_tuple = Syscall(123, (fd >>> 0), (uid >>> 0), (gid >>> 0)); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Fstat = $pkg.Fstat = function(fd, stat) {
		var err = $ifaceNil, _tuple, _array, _struct, _view, e1;
		_array = new Uint8Array(144);
		_tuple = Syscall(339, (fd >>> 0), _array, 0); e1 = _tuple[2];
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new ($nativeArray("Uint8"))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new ($nativeArray("Int64"))(_array.buffer, $min(_array.byteOffset + 128, _array.buffer.byteLength));
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Fsync = $pkg.Fsync = function(fd) {
		var err = $ifaceNil, _tuple, e1;
		_tuple = Syscall(95, (fd >>> 0), 0, 0); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Ftruncate = $pkg.Ftruncate = function(fd, length) {
		var err = $ifaceNil, _tuple, e1;
		_tuple = Syscall(201, (fd >>> 0), (length.$low >>> 0), 0); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Getdirentries = $pkg.Getdirentries = function(fd, buf, basep) {
		var n = 0, err = $ifaceNil, _p0, _tuple, r0, e1;
		_p0 = 0;
		if (buf.$length > 0) {
			_p0 = $sliceToArray(buf);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(344, (fd >>> 0), _p0, (buf.$length >>> 0), basep, 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	Getpid = $pkg.Getpid = function() {
		var pid = 0, _tuple, r0;
		_tuple = RawSyscall(20, 0, 0, 0); r0 = _tuple[0];
		pid = (r0 >> 0);
		return pid;
	};
	Lstat = $pkg.Lstat = function(path, stat) {
		var err = $ifaceNil, _p0, _tuple, _tuple$1, _array, _struct, _view, e1;
		_p0 = ($ptrType($Uint8)).nil;
		_tuple = BytePtrFromString(path); _p0 = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_array = new Uint8Array(144);
		_tuple$1 = Syscall(340, _p0, _array, 0); e1 = _tuple$1[2];
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new ($nativeArray("Uint8"))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new ($nativeArray("Int64"))(_array.buffer, $min(_array.byteOffset + 128, _array.buffer.byteLength));
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Open = $pkg.Open = function(path, mode, perm) {
		var fd = 0, err = $ifaceNil, _p0, _tuple, _tuple$1, r0, e1;
		_p0 = ($ptrType($Uint8)).nil;
		_tuple = BytePtrFromString(path); _p0 = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [fd, err];
		}
		_tuple$1 = Syscall(5, _p0, (mode >>> 0), (perm >>> 0)); r0 = _tuple$1[0]; e1 = _tuple$1[2];
		fd = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [fd, err];
	};
	Pread = $pkg.Pread = function(fd, p, offset) {
		var n = 0, err = $ifaceNil, _p0, _tuple, r0, e1;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(153, (fd >>> 0), _p0, (p.$length >>> 0), (offset.$low >>> 0), 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	Pwrite = $pkg.Pwrite = function(fd, p, offset) {
		var n = 0, err = $ifaceNil, _p0, _tuple, r0, e1;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall6(154, (fd >>> 0), _p0, (p.$length >>> 0), (offset.$low >>> 0), 0, 0); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	read = function(fd, p) {
		var n = 0, err = $ifaceNil, _p0, _tuple, r0, e1;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(3, (fd >>> 0), _p0, (p.$length >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	Rmdir = $pkg.Rmdir = function(path) {
		var err = $ifaceNil, _p0, _tuple, _tuple$1, e1;
		_p0 = ($ptrType($Uint8)).nil;
		_tuple = BytePtrFromString(path); _p0 = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_tuple$1 = Syscall(137, _p0, 0, 0); e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Seek = $pkg.Seek = function(fd, offset, whence) {
		var newoffset = new $Int64(0, 0), err = $ifaceNil, _tuple, r0, e1;
		_tuple = Syscall(199, (fd >>> 0), (offset.$low >>> 0), (whence >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];
		newoffset = new $Int64(0, r0.constructor === Number ? r0 : 1);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [newoffset, err];
	};
	Stat = $pkg.Stat = function(path, stat) {
		var err = $ifaceNil, _p0, _tuple, _tuple$1, _array, _struct, _view, e1;
		_p0 = ($ptrType($Uint8)).nil;
		_tuple = BytePtrFromString(path); _p0 = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_array = new Uint8Array(144);
		_tuple$1 = Syscall(338, _p0, _array, 0); e1 = _tuple$1[2];
		_struct = stat, _view = new DataView(_array.buffer, _array.byteOffset), _struct.Dev = _view.getInt32(0, true), _struct.Mode = _view.getUint16(4, true), _struct.Nlink = _view.getUint16(6, true), _struct.Ino = new $Uint64(_view.getUint32(12, true), _view.getUint32(8, true)), _struct.Uid = _view.getUint32(16, true), _struct.Gid = _view.getUint32(20, true), _struct.Rdev = _view.getInt32(24, true), _struct.Pad_cgo_0 = new ($nativeArray("Uint8"))(_array.buffer, $min(_array.byteOffset + 28, _array.buffer.byteLength)), _struct.Atimespec.Sec = new $Int64(_view.getUint32(36, true), _view.getUint32(32, true)), _struct.Atimespec.Nsec = new $Int64(_view.getUint32(44, true), _view.getUint32(40, true)), _struct.Mtimespec.Sec = new $Int64(_view.getUint32(52, true), _view.getUint32(48, true)), _struct.Mtimespec.Nsec = new $Int64(_view.getUint32(60, true), _view.getUint32(56, true)), _struct.Ctimespec.Sec = new $Int64(_view.getUint32(68, true), _view.getUint32(64, true)), _struct.Ctimespec.Nsec = new $Int64(_view.getUint32(76, true), _view.getUint32(72, true)), _struct.Birthtimespec.Sec = new $Int64(_view.getUint32(84, true), _view.getUint32(80, true)), _struct.Birthtimespec.Nsec = new $Int64(_view.getUint32(92, true), _view.getUint32(88, true)), _struct.Size = new $Int64(_view.getUint32(100, true), _view.getUint32(96, true)), _struct.Blocks = new $Int64(_view.getUint32(108, true), _view.getUint32(104, true)), _struct.Blksize = _view.getInt32(112, true), _struct.Flags = _view.getUint32(116, true), _struct.Gen = _view.getUint32(120, true), _struct.Lspare = _view.getInt32(124, true), _struct.Qspare = new ($nativeArray("Int64"))(_array.buffer, $min(_array.byteOffset + 128, _array.buffer.byteLength));
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	Unlink = $pkg.Unlink = function(path) {
		var err = $ifaceNil, _p0, _tuple, _tuple$1, e1;
		_p0 = ($ptrType($Uint8)).nil;
		_tuple = BytePtrFromString(path); _p0 = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_tuple$1 = Syscall(10, _p0, 0, 0); e1 = _tuple$1[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	write = function(fd, p) {
		var n = 0, err = $ifaceNil, _p0, _tuple, r0, e1;
		_p0 = 0;
		if (p.$length > 0) {
			_p0 = $sliceToArray(p);
		} else {
			_p0 = new Uint8Array(0);
		}
		_tuple = Syscall(4, (fd >>> 0), _p0, (p.$length >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	mmap = function(addr, length, prot, flag, fd, pos) {
		var ret = 0, err = $ifaceNil, _tuple, r0, e1;
		_tuple = Syscall6(197, addr, length, (prot >>> 0), (flag >>> 0), (fd >>> 0), (pos.$low >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];
		ret = r0;
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [ret, err];
	};
	munmap = function(addr, length) {
		var err = $ifaceNil, _tuple, e1;
		_tuple = Syscall(73, addr, length, 0); e1 = _tuple[2];
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return err;
	};
	readlen = function(fd, buf, nbuf) {
		var n = 0, err = $ifaceNil, _tuple, r0, e1;
		_tuple = Syscall(3, (fd >>> 0), buf, (nbuf >>> 0)); r0 = _tuple[0]; e1 = _tuple[2];
		n = (r0 >> 0);
		if (!((e1 === 0))) {
			err = new Errno(e1);
		}
		return [n, err];
	};
	$pkg.$init = function() {
		SysProcAttr.init([["Chroot", "Chroot", "", $String, ""], ["Credential", "Credential", "", ($ptrType(Credential)), ""], ["Ptrace", "Ptrace", "", $Bool, ""], ["Setsid", "Setsid", "", $Bool, ""], ["Setpgid", "Setpgid", "", $Bool, ""], ["Setctty", "Setctty", "", $Bool, ""], ["Noctty", "Noctty", "", $Bool, ""]]);
		Credential.init([["Uid", "Uid", "", $Uint32, ""], ["Gid", "Gid", "", $Uint32, ""], ["Groups", "Groups", "", ($sliceType($Uint32)), ""]]);
		ProcAttr.init([["Dir", "Dir", "", $String, ""], ["Env", "Env", "", ($sliceType($String)), ""], ["Files", "Files", "", ($sliceType($Uintptr)), ""], ["Sys", "Sys", "", ($ptrType(SysProcAttr)), ""]]);
		RoutingMessage.init([["sockaddr", "sockaddr", "syscall", $funcType([], [($sliceType(Sockaddr))], false)]]);
		($ptrType(anyMessage)).methods = [["toRoutingMessage", "toRoutingMessage", "syscall", $funcType([($sliceType($Uint8))], [RoutingMessage], false), -1]];
		anyMessage.init([["Msglen", "Msglen", "", $Uint16, ""], ["Version", "Version", "", $Uint8, ""], ["Type", "Type", "", $Uint8, ""]]);
		($ptrType(RouteMessage)).methods = [["sockaddr", "sockaddr", "syscall", $funcType([], [($sliceType(Sockaddr))], false), -1]];
		RouteMessage.init([["Header", "Header", "", RtMsghdr, ""], ["Data", "Data", "", ($sliceType($Uint8)), ""]]);
		($ptrType(InterfaceMessage)).methods = [["sockaddr", "sockaddr", "syscall", $funcType([], [($sliceType(Sockaddr))], false), -1]];
		InterfaceMessage.init([["Header", "Header", "", IfMsghdr, ""], ["Data", "Data", "", ($sliceType($Uint8)), ""]]);
		($ptrType(InterfaceAddrMessage)).methods = [["sockaddr", "sockaddr", "syscall", $funcType([], [($sliceType(Sockaddr))], false), -1]];
		InterfaceAddrMessage.init([["Header", "Header", "", IfaMsghdr, ""], ["Data", "Data", "", ($sliceType($Uint8)), ""]]);
		($ptrType(InterfaceMulticastAddrMessage)).methods = [["sockaddr", "sockaddr", "syscall", $funcType([], [($sliceType(Sockaddr))], false), -1]];
		InterfaceMulticastAddrMessage.init([["Header", "Header", "", IfmaMsghdr2, ""], ["Data", "Data", "", ($sliceType($Uint8)), ""]]);
		WaitStatus.methods = [["Continued", "Continued", "", $funcType([], [$Bool], false), -1], ["CoreDump", "CoreDump", "", $funcType([], [$Bool], false), -1], ["ExitStatus", "ExitStatus", "", $funcType([], [$Int], false), -1], ["Exited", "Exited", "", $funcType([], [$Bool], false), -1], ["Signal", "Signal", "", $funcType([], [Signal], false), -1], ["Signaled", "Signaled", "", $funcType([], [$Bool], false), -1], ["StopSignal", "StopSignal", "", $funcType([], [Signal], false), -1], ["Stopped", "Stopped", "", $funcType([], [$Bool], false), -1], ["TrapCause", "TrapCause", "", $funcType([], [$Int], false), -1]];
		($ptrType(WaitStatus)).methods = [["Continued", "Continued", "", $funcType([], [$Bool], false), -1], ["CoreDump", "CoreDump", "", $funcType([], [$Bool], false), -1], ["ExitStatus", "ExitStatus", "", $funcType([], [$Int], false), -1], ["Exited", "Exited", "", $funcType([], [$Bool], false), -1], ["Signal", "Signal", "", $funcType([], [Signal], false), -1], ["Signaled", "Signaled", "", $funcType([], [$Bool], false), -1], ["StopSignal", "StopSignal", "", $funcType([], [Signal], false), -1], ["Stopped", "Stopped", "", $funcType([], [$Bool], false), -1], ["TrapCause", "TrapCause", "", $funcType([], [$Int], false), -1]];
		($ptrType(SockaddrDatalink)).methods = [["sockaddr", "sockaddr", "syscall", $funcType([], [$UnsafePointer, _Socklen, $error], false), -1]];
		SockaddrDatalink.init([["Len", "Len", "", $Uint8, ""], ["Family", "Family", "", $Uint8, ""], ["Index", "Index", "", $Uint16, ""], ["Type", "Type", "", $Uint8, ""], ["Nlen", "Nlen", "", $Uint8, ""], ["Alen", "Alen", "", $Uint8, ""], ["Slen", "Slen", "", $Uint8, ""], ["Data", "Data", "", ($arrayType($Int8, 12)), ""], ["raw", "raw", "syscall", RawSockaddrDatalink, ""]]);
		($ptrType(mmapper)).methods = [["Lock", "Lock", "", $funcType([], [], false), 0], ["Mmap", "Mmap", "", $funcType([$Int, $Int64, $Int, $Int, $Int], [($sliceType($Uint8)), $error], false), -1], ["Munmap", "Munmap", "", $funcType([($sliceType($Uint8))], [$error], false), -1], ["Unlock", "Unlock", "", $funcType([], [], false), 0]];
		mmapper.init([["Mutex", "", "", sync.Mutex, ""], ["active", "active", "syscall", ($mapType(($ptrType($Uint8)), ($sliceType($Uint8)))), ""], ["mmap", "mmap", "syscall", ($funcType([$Uintptr, $Uintptr, $Int, $Int, $Int, $Int64], [$Uintptr, $error], false)), ""], ["munmap", "munmap", "syscall", ($funcType([$Uintptr, $Uintptr], [$error], false)), ""]]);
		Errno.methods = [["Error", "Error", "", $funcType([], [$String], false), -1], ["Temporary", "Temporary", "", $funcType([], [$Bool], false), -1], ["Timeout", "Timeout", "", $funcType([], [$Bool], false), -1]];
		($ptrType(Errno)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1], ["Temporary", "Temporary", "", $funcType([], [$Bool], false), -1], ["Timeout", "Timeout", "", $funcType([], [$Bool], false), -1]];
		Signal.methods = [["Signal", "Signal", "", $funcType([], [], false), -1], ["String", "String", "", $funcType([], [$String], false), -1]];
		($ptrType(Signal)).methods = [["Signal", "Signal", "", $funcType([], [], false), -1], ["String", "String", "", $funcType([], [$String], false), -1]];
		Sockaddr.init([["sockaddr", "sockaddr", "syscall", $funcType([], [$UnsafePointer, _Socklen, $error], false)]]);
		($ptrType(SockaddrInet4)).methods = [["sockaddr", "sockaddr", "syscall", $funcType([], [$UnsafePointer, _Socklen, $error], false), -1]];
		SockaddrInet4.init([["Port", "Port", "", $Int, ""], ["Addr", "Addr", "", ($arrayType($Uint8, 4)), ""], ["raw", "raw", "syscall", RawSockaddrInet4, ""]]);
		($ptrType(SockaddrInet6)).methods = [["sockaddr", "sockaddr", "syscall", $funcType([], [$UnsafePointer, _Socklen, $error], false), -1]];
		SockaddrInet6.init([["Port", "Port", "", $Int, ""], ["ZoneId", "ZoneId", "", $Uint32, ""], ["Addr", "Addr", "", ($arrayType($Uint8, 16)), ""], ["raw", "raw", "syscall", RawSockaddrInet6, ""]]);
		($ptrType(SockaddrUnix)).methods = [["sockaddr", "sockaddr", "syscall", $funcType([], [$UnsafePointer, _Socklen, $error], false), -1]];
		SockaddrUnix.init([["Name", "Name", "", $String, ""], ["raw", "raw", "syscall", RawSockaddrUnix, ""]]);
		($ptrType(Timespec)).methods = [["Nano", "Nano", "", $funcType([], [$Int64], false), -1], ["Unix", "Unix", "", $funcType([], [$Int64, $Int64], false), -1]];
		Timespec.init([["Sec", "Sec", "", $Int64, ""], ["Nsec", "Nsec", "", $Int64, ""]]);
		($ptrType(Timeval)).methods = [["Nano", "Nano", "", $funcType([], [$Int64], false), -1], ["Unix", "Unix", "", $funcType([], [$Int64, $Int64], false), -1]];
		Timeval.init([["Sec", "Sec", "", $Int64, ""], ["Usec", "Usec", "", $Int32, ""], ["Pad_cgo_0", "Pad_cgo_0", "", ($arrayType($Uint8, 4)), ""]]);
		Timeval32.init([["Sec", "Sec", "", $Int32, ""], ["Usec", "Usec", "", $Int32, ""]]);
		Rusage.init([["Utime", "Utime", "", Timeval, ""], ["Stime", "Stime", "", Timeval, ""], ["Maxrss", "Maxrss", "", $Int64, ""], ["Ixrss", "Ixrss", "", $Int64, ""], ["Idrss", "Idrss", "", $Int64, ""], ["Isrss", "Isrss", "", $Int64, ""], ["Minflt", "Minflt", "", $Int64, ""], ["Majflt", "Majflt", "", $Int64, ""], ["Nswap", "Nswap", "", $Int64, ""], ["Inblock", "Inblock", "", $Int64, ""], ["Oublock", "Oublock", "", $Int64, ""], ["Msgsnd", "Msgsnd", "", $Int64, ""], ["Msgrcv", "Msgrcv", "", $Int64, ""], ["Nsignals", "Nsignals", "", $Int64, ""], ["Nvcsw", "Nvcsw", "", $Int64, ""], ["Nivcsw", "Nivcsw", "", $Int64, ""]]);
		Stat_t.init([["Dev", "Dev", "", $Int32, ""], ["Mode", "Mode", "", $Uint16, ""], ["Nlink", "Nlink", "", $Uint16, ""], ["Ino", "Ino", "", $Uint64, ""], ["Uid", "Uid", "", $Uint32, ""], ["Gid", "Gid", "", $Uint32, ""], ["Rdev", "Rdev", "", $Int32, ""], ["Pad_cgo_0", "Pad_cgo_0", "", ($arrayType($Uint8, 4)), ""], ["Atimespec", "Atimespec", "", Timespec, ""], ["Mtimespec", "Mtimespec", "", Timespec, ""], ["Ctimespec", "Ctimespec", "", Timespec, ""], ["Birthtimespec", "Birthtimespec", "", Timespec, ""], ["Size", "Size", "", $Int64, ""], ["Blocks", "Blocks", "", $Int64, ""], ["Blksize", "Blksize", "", $Int32, ""], ["Flags", "Flags", "", $Uint32, ""], ["Gen", "Gen", "", $Uint32, ""], ["Lspare", "Lspare", "", $Int32, ""], ["Qspare", "Qspare", "", ($arrayType($Int64, 2)), ""]]);
		Dirent.init([["Ino", "Ino", "", $Uint64, ""], ["Seekoff", "Seekoff", "", $Uint64, ""], ["Reclen", "Reclen", "", $Uint16, ""], ["Namlen", "Namlen", "", $Uint16, ""], ["Type", "Type", "", $Uint8, ""], ["Name", "Name", "", ($arrayType($Int8, 1024)), ""], ["Pad_cgo_0", "Pad_cgo_0", "", ($arrayType($Uint8, 3)), ""]]);
		RawSockaddrInet4.init([["Len", "Len", "", $Uint8, ""], ["Family", "Family", "", $Uint8, ""], ["Port", "Port", "", $Uint16, ""], ["Addr", "Addr", "", ($arrayType($Uint8, 4)), ""], ["Zero", "Zero", "", ($arrayType($Int8, 8)), ""]]);
		RawSockaddrInet6.init([["Len", "Len", "", $Uint8, ""], ["Family", "Family", "", $Uint8, ""], ["Port", "Port", "", $Uint16, ""], ["Flowinfo", "Flowinfo", "", $Uint32, ""], ["Addr", "Addr", "", ($arrayType($Uint8, 16)), ""], ["Scope_id", "Scope_id", "", $Uint32, ""]]);
		RawSockaddrUnix.init([["Len", "Len", "", $Uint8, ""], ["Family", "Family", "", $Uint8, ""], ["Path", "Path", "", ($arrayType($Int8, 104)), ""]]);
		RawSockaddrDatalink.init([["Len", "Len", "", $Uint8, ""], ["Family", "Family", "", $Uint8, ""], ["Index", "Index", "", $Uint16, ""], ["Type", "Type", "", $Uint8, ""], ["Nlen", "Nlen", "", $Uint8, ""], ["Alen", "Alen", "", $Uint8, ""], ["Slen", "Slen", "", $Uint8, ""], ["Data", "Data", "", ($arrayType($Int8, 12)), ""]]);
		RawSockaddr.init([["Len", "Len", "", $Uint8, ""], ["Family", "Family", "", $Uint8, ""], ["Data", "Data", "", ($arrayType($Int8, 14)), ""]]);
		RawSockaddrAny.init([["Addr", "Addr", "", RawSockaddr, ""], ["Pad", "Pad", "", ($arrayType($Int8, 92)), ""]]);
		Linger.init([["Onoff", "Onoff", "", $Int32, ""], ["Linger", "Linger", "", $Int32, ""]]);
		IfMsghdr.init([["Msglen", "Msglen", "", $Uint16, ""], ["Version", "Version", "", $Uint8, ""], ["Type", "Type", "", $Uint8, ""], ["Addrs", "Addrs", "", $Int32, ""], ["Flags", "Flags", "", $Int32, ""], ["Index", "Index", "", $Uint16, ""], ["Pad_cgo_0", "Pad_cgo_0", "", ($arrayType($Uint8, 2)), ""], ["Data", "Data", "", IfData, ""]]);
		IfData.init([["Type", "Type", "", $Uint8, ""], ["Typelen", "Typelen", "", $Uint8, ""], ["Physical", "Physical", "", $Uint8, ""], ["Addrlen", "Addrlen", "", $Uint8, ""], ["Hdrlen", "Hdrlen", "", $Uint8, ""], ["Recvquota", "Recvquota", "", $Uint8, ""], ["Xmitquota", "Xmitquota", "", $Uint8, ""], ["Unused1", "Unused1", "", $Uint8, ""], ["Mtu", "Mtu", "", $Uint32, ""], ["Metric", "Metric", "", $Uint32, ""], ["Baudrate", "Baudrate", "", $Uint32, ""], ["Ipackets", "Ipackets", "", $Uint32, ""], ["Ierrors", "Ierrors", "", $Uint32, ""], ["Opackets", "Opackets", "", $Uint32, ""], ["Oerrors", "Oerrors", "", $Uint32, ""], ["Collisions", "Collisions", "", $Uint32, ""], ["Ibytes", "Ibytes", "", $Uint32, ""], ["Obytes", "Obytes", "", $Uint32, ""], ["Imcasts", "Imcasts", "", $Uint32, ""], ["Omcasts", "Omcasts", "", $Uint32, ""], ["Iqdrops", "Iqdrops", "", $Uint32, ""], ["Noproto", "Noproto", "", $Uint32, ""], ["Recvtiming", "Recvtiming", "", $Uint32, ""], ["Xmittiming", "Xmittiming", "", $Uint32, ""], ["Lastchange", "Lastchange", "", Timeval32, ""], ["Unused2", "Unused2", "", $Uint32, ""], ["Hwassist", "Hwassist", "", $Uint32, ""], ["Reserved1", "Reserved1", "", $Uint32, ""], ["Reserved2", "Reserved2", "", $Uint32, ""]]);
		IfaMsghdr.init([["Msglen", "Msglen", "", $Uint16, ""], ["Version", "Version", "", $Uint8, ""], ["Type", "Type", "", $Uint8, ""], ["Addrs", "Addrs", "", $Int32, ""], ["Flags", "Flags", "", $Int32, ""], ["Index", "Index", "", $Uint16, ""], ["Pad_cgo_0", "Pad_cgo_0", "", ($arrayType($Uint8, 2)), ""], ["Metric", "Metric", "", $Int32, ""]]);
		IfmaMsghdr2.init([["Msglen", "Msglen", "", $Uint16, ""], ["Version", "Version", "", $Uint8, ""], ["Type", "Type", "", $Uint8, ""], ["Addrs", "Addrs", "", $Int32, ""], ["Flags", "Flags", "", $Int32, ""], ["Index", "Index", "", $Uint16, ""], ["Pad_cgo_0", "Pad_cgo_0", "", ($arrayType($Uint8, 2)), ""], ["Refcount", "Refcount", "", $Int32, ""]]);
		RtMsghdr.init([["Msglen", "Msglen", "", $Uint16, ""], ["Version", "Version", "", $Uint8, ""], ["Type", "Type", "", $Uint8, ""], ["Index", "Index", "", $Uint16, ""], ["Pad_cgo_0", "Pad_cgo_0", "", ($arrayType($Uint8, 2)), ""], ["Flags", "Flags", "", $Int32, ""], ["Addrs", "Addrs", "", $Int32, ""], ["Pid", "Pid", "", $Int32, ""], ["Seq", "Seq", "", $Int32, ""], ["Errno", "Errno", "", $Int32, ""], ["Use", "Use", "", $Int32, ""], ["Inits", "Inits", "", $Uint32, ""], ["Rmx", "Rmx", "", RtMetrics, ""]]);
		RtMetrics.init([["Locks", "Locks", "", $Uint32, ""], ["Mtu", "Mtu", "", $Uint32, ""], ["Hopcount", "Hopcount", "", $Uint32, ""], ["Expire", "Expire", "", $Int32, ""], ["Recvpipe", "Recvpipe", "", $Uint32, ""], ["Sendpipe", "Sendpipe", "", $Uint32, ""], ["Ssthresh", "Ssthresh", "", $Uint32, ""], ["Rtt", "Rtt", "", $Uint32, ""], ["Rttvar", "Rttvar", "", $Uint32, ""], ["Pksent", "Pksent", "", $Uint32, ""], ["Filler", "Filler", "", ($arrayType($Uint32, 4)), ""]]);
		lineBuffer = ($sliceType($Uint8)).nil;
		syscallModule = $ifaceNil;
		envOnce = new sync.Once.Ptr();
		envLock = new sync.RWMutex.Ptr();
		env = false;
		envs = ($sliceType($String)).nil;
		$pkg.ForkLock = new sync.RWMutex.Ptr();
		zeroProcAttr = new ProcAttr.Ptr();
		zeroSysProcAttr = new SysProcAttr.Ptr();
		$pkg.SocketDisableIPv6 = false;
		warningPrinted = false;
		alreadyTriedToLoad = false;
		minusOne = -1;
		$pkg.Stdin = 0;
		$pkg.Stdout = 1;
		$pkg.Stderr = 2;
		errors$1 = $toNativeArray("String", ["", "operation not permitted", "no such file or directory", "no such process", "interrupted system call", "input/output error", "device not configured", "argument list too long", "exec format error", "bad file descriptor", "no child processes", "resource deadlock avoided", "cannot allocate memory", "permission denied", "bad address", "block device required", "resource busy", "file exists", "cross-device link", "operation not supported by device", "not a directory", "is a directory", "invalid argument", "too many open files in system", "too many open files", "inappropriate ioctl for device", "text file busy", "file too large", "no space left on device", "illegal seek", "read-only file system", "too many links", "broken pipe", "numerical argument out of domain", "result too large", "resource temporarily unavailable", "operation now in progress", "operation already in progress", "socket operation on non-socket", "destination address required", "message too long", "protocol wrong type for socket", "protocol not available", "protocol not supported", "socket type not supported", "operation not supported", "protocol family not supported", "address family not supported by protocol family", "address already in use", "can't assign requested address", "network is down", "network is unreachable", "network dropped connection on reset", "software caused connection abort", "connection reset by peer", "no buffer space available", "socket is already connected", "socket is not connected", "can't send after socket shutdown", "too many references: can't splice", "operation timed out", "connection refused", "too many levels of symbolic links", "file name too long", "host is down", "no route to host", "directory not empty", "too many processes", "too many users", "disc quota exceeded", "stale NFS file handle", "too many levels of remote in path", "RPC struct is bad", "RPC version wrong", "RPC prog. not avail", "program version wrong", "bad procedure for program", "no locks available", "function not implemented", "inappropriate file type or format", "authentication error", "need authenticator", "device power is off", "device error", "value too large to be stored in data type", "bad executable (or shared library)", "bad CPU type in executable", "shared library version mismatch", "malformed Mach-o file", "operation canceled", "identifier removed", "no message of desired type", "illegal byte sequence", "attribute not found", "bad message", "EMULTIHOP (Reserved)", "no message available on STREAM", "ENOLINK (Reserved)", "no STREAM resources", "not a STREAM", "protocol error", "STREAM ioctl timeout", "operation not supported on socket", "policy not found", "state not recoverable", "previous owner died"]);
		signals = $toNativeArray("String", ["", "hangup", "interrupt", "quit", "illegal instruction", "trace/BPT trap", "abort trap", "EMT trap", "floating point exception", "killed", "bus error", "segmentation fault", "bad system call", "broken pipe", "alarm clock", "terminated", "urgent I/O condition", "suspended (signal)", "suspended", "continued", "child exited", "stopped (tty input)", "stopped (tty output)", "I/O possible", "cputime limit exceeded", "filesize limit exceeded", "virtual timer expired", "profiling timer expired", "window size changes", "information request", "user defined signal 1", "user defined signal 2"]);
		mapper = new mmapper.Ptr(new sync.Mutex.Ptr(), new $Map(), mmap, munmap);
		init();
	};
	return $pkg;
})();
$packages["time"] = (function() {
	var $pkg = {}, strings = $packages["strings"], js = $packages["github.com/gopherjs/gopherjs/js"], errors = $packages["errors"], syscall = $packages["syscall"], sync = $packages["sync"], runtime = $packages["runtime"], runtimeTimer, ParseError, Timer, Time, Month, Weekday, Duration, Location, zone, zoneTrans, std0x, longDayNames, shortDayNames, shortMonthNames, longMonthNames, atoiError, errBad, errLeadingInt, unitMap, months, days, daysBefore, utcLoc, localLoc, localOnce, zoneinfo, badData, zoneDirs, _map, _key, _tuple, initLocal, runtimeNano, now, Sleep, startTimer, stopTimer, startsWithLowerCase, nextStdChunk, match, lookup, appendUint, atoi, formatNano, quote, isDigit, getnum, cutspace, skip, Parse, parse, parseTimeZone, parseGMT, parseNanoseconds, leadingInt, ParseDuration, when, NewTimer, sendTime, After, absWeekday, absClock, fmtFrac, fmtInt, absDate, Now, Unix, isLeap, norm, Date, div, FixedZone;
	runtimeTimer = $pkg.runtimeTimer = $newType(0, "Struct", "time.runtimeTimer", "runtimeTimer", "time", function(i_, when_, period_, f_, arg_, timeout_, active_) {
		this.$val = this;
		this.i = i_ !== undefined ? i_ : 0;
		this.when = when_ !== undefined ? when_ : new $Int64(0, 0);
		this.period = period_ !== undefined ? period_ : new $Int64(0, 0);
		this.f = f_ !== undefined ? f_ : $throwNilPointerError;
		this.arg = arg_ !== undefined ? arg_ : $ifaceNil;
		this.timeout = timeout_ !== undefined ? timeout_ : $ifaceNil;
		this.active = active_ !== undefined ? active_ : false;
	});
	ParseError = $pkg.ParseError = $newType(0, "Struct", "time.ParseError", "ParseError", "time", function(Layout_, Value_, LayoutElem_, ValueElem_, Message_) {
		this.$val = this;
		this.Layout = Layout_ !== undefined ? Layout_ : "";
		this.Value = Value_ !== undefined ? Value_ : "";
		this.LayoutElem = LayoutElem_ !== undefined ? LayoutElem_ : "";
		this.ValueElem = ValueElem_ !== undefined ? ValueElem_ : "";
		this.Message = Message_ !== undefined ? Message_ : "";
	});
	Timer = $pkg.Timer = $newType(0, "Struct", "time.Timer", "Timer", "time", function(C_, r_) {
		this.$val = this;
		this.C = C_ !== undefined ? C_ : ($chanType(Time, false, true)).nil;
		this.r = r_ !== undefined ? r_ : new runtimeTimer.Ptr();
	});
	Time = $pkg.Time = $newType(0, "Struct", "time.Time", "Time", "time", function(sec_, nsec_, loc_) {
		this.$val = this;
		this.sec = sec_ !== undefined ? sec_ : new $Int64(0, 0);
		this.nsec = nsec_ !== undefined ? nsec_ : 0;
		this.loc = loc_ !== undefined ? loc_ : ($ptrType(Location)).nil;
	});
	Month = $pkg.Month = $newType(4, "Int", "time.Month", "Month", "time", null);
	Weekday = $pkg.Weekday = $newType(4, "Int", "time.Weekday", "Weekday", "time", null);
	Duration = $pkg.Duration = $newType(8, "Int64", "time.Duration", "Duration", "time", null);
	Location = $pkg.Location = $newType(0, "Struct", "time.Location", "Location", "time", function(name_, zone_, tx_, cacheStart_, cacheEnd_, cacheZone_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.zone = zone_ !== undefined ? zone_ : ($sliceType(zone)).nil;
		this.tx = tx_ !== undefined ? tx_ : ($sliceType(zoneTrans)).nil;
		this.cacheStart = cacheStart_ !== undefined ? cacheStart_ : new $Int64(0, 0);
		this.cacheEnd = cacheEnd_ !== undefined ? cacheEnd_ : new $Int64(0, 0);
		this.cacheZone = cacheZone_ !== undefined ? cacheZone_ : ($ptrType(zone)).nil;
	});
	zone = $pkg.zone = $newType(0, "Struct", "time.zone", "zone", "time", function(name_, offset_, isDST_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.offset = offset_ !== undefined ? offset_ : 0;
		this.isDST = isDST_ !== undefined ? isDST_ : false;
	});
	zoneTrans = $pkg.zoneTrans = $newType(0, "Struct", "time.zoneTrans", "zoneTrans", "time", function(when_, index_, isstd_, isutc_) {
		this.$val = this;
		this.when = when_ !== undefined ? when_ : new $Int64(0, 0);
		this.index = index_ !== undefined ? index_ : 0;
		this.isstd = isstd_ !== undefined ? isstd_ : false;
		this.isutc = isutc_ !== undefined ? isutc_ : false;
	});
	initLocal = function() {
		var d, s, i, j, x;
		d = new ($global.Date)();
		s = $internalize(d, $String);
		i = strings.IndexByte(s, 40);
		j = strings.IndexByte(s, 41);
		if ((i === -1) || (j === -1)) {
			localLoc.name = "UTC";
			return;
		}
		localLoc.name = s.substring((i + 1 >> 0), j);
		localLoc.zone = new ($sliceType(zone))([new zone.Ptr(localLoc.name, (x = $parseInt(d.getTimezoneOffset()) >> 0, (((x >>> 16 << 16) * -60 >> 0) + (x << 16 >>> 16) * -60) >> 0), false)]);
	};
	runtimeNano = function() {
		return $mul64($internalize(new ($global.Date)().getTime(), $Int64), new $Int64(0, 1000000));
	};
	now = function() {
		var sec = new $Int64(0, 0), nsec = 0, n, _tmp, _tmp$1, x;
		n = runtimeNano();
		_tmp = $div64(n, new $Int64(0, 1000000000), false); _tmp$1 = ((x = $div64(n, new $Int64(0, 1000000000), true), x.$low + ((x.$high >> 31) * 4294967296)) >> 0); sec = _tmp; nsec = _tmp$1;
		return [sec, nsec];
	};
	Sleep = $pkg.Sleep = function(d, $b) {
		var $this = this, $args = arguments, $r, $s = 0, c, x, _r;
		/* */ if(!$b) { $nonblockingCall(); }; var $blocking_Sleep = function() { s: while (true) { switch ($s) { case 0:
		c = new ($chanType(($structType([])), false, false))(0);
		$global.setTimeout($externalize((function() {
			$close(c);
		}), ($funcType([], [], false))), ((x = $div64(d, new Duration(0, 1000000), false), x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		_r = $recv(c, true); /* */ $s = 1; case 1: if (_r && _r.$blocking) { _r = _r(); }
		_r[0];
		/* */ case -1: } return; } }; $blocking_Sleep.$blocking = true; return $blocking_Sleep;
	};
	startTimer = function(t) {
		var x, x$1, diff;
		t.active = true;
		diff = $div64(((x = t.when, x$1 = runtimeNano(), new $Int64(x.$high - x$1.$high, x.$low - x$1.$low))), new $Int64(0, 1000000), false);
		if ((diff.$high > 0 || (diff.$high === 0 && diff.$low > 2147483647))) {
			return;
		}
		if ((diff.$high < 0 || (diff.$high === 0 && diff.$low < 0))) {
			diff = new $Int64(0, 0);
		}
		t.timeout = $global.setTimeout($externalize((function() {
			var now$1, x$2, x$3, x$4, x$5;
			t.active = false;
			now$1 = runtimeNano();
			if ((x$2 = t.when, (now$1.$high < x$2.$high || (now$1.$high === x$2.$high && now$1.$low < x$2.$low)))) {
				now$1 = t.when;
			}
			t.f(now$1, t.arg);
			if (!((x$3 = t.period, (x$3.$high === 0 && x$3.$low === 0)))) {
				t.when = (x$4 = t.when, x$5 = t.period, new $Int64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
				startTimer(t);
			}
		}), ($funcType([], [], false))), $externalize(diff, $Int64));
	};
	stopTimer = function(t) {
		var wasActive;
		$global.clearTimeout(t.timeout);
		wasActive = t.active;
		t.active = false;
		return wasActive;
	};
	startsWithLowerCase = function(str) {
		var c;
		if (str.length === 0) {
			return false;
		}
		c = str.charCodeAt(0);
		return 97 <= c && c <= 122;
	};
	nextStdChunk = function(layout) {
		var prefix = "", std = 0, suffix = "", i, c, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, x, _tmp$17, _tmp$18, _tmp$19, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$40, _tmp$41, _tmp$42, _tmp$43, _tmp$44, _tmp$45, _tmp$46, _tmp$47, _tmp$48, _tmp$49, _tmp$50, _tmp$51, _tmp$52, _tmp$53, _tmp$54, _tmp$55, _tmp$56, _tmp$57, _tmp$58, _tmp$59, _tmp$60, _tmp$61, _tmp$62, _tmp$63, _tmp$64, _tmp$65, _tmp$66, _tmp$67, _tmp$68, _tmp$69, _tmp$70, _tmp$71, _tmp$72, _tmp$73, _tmp$74, ch, j, std$1, _tmp$75, _tmp$76, _tmp$77, _tmp$78, _tmp$79, _tmp$80;
		i = 0;
		while (i < layout.length) {
			c = (layout.charCodeAt(i) >> 0);
			_ref = c;
			if (_ref === 74) {
				if (layout.length >= (i + 3 >> 0) && layout.substring(i, (i + 3 >> 0)) === "Jan") {
					if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "January") {
						_tmp = layout.substring(0, i); _tmp$1 = 257; _tmp$2 = layout.substring((i + 7 >> 0)); prefix = _tmp; std = _tmp$1; suffix = _tmp$2;
						return [prefix, std, suffix];
					}
					if (!startsWithLowerCase(layout.substring((i + 3 >> 0)))) {
						_tmp$3 = layout.substring(0, i); _tmp$4 = 258; _tmp$5 = layout.substring((i + 3 >> 0)); prefix = _tmp$3; std = _tmp$4; suffix = _tmp$5;
						return [prefix, std, suffix];
					}
				}
			} else if (_ref === 77) {
				if (layout.length >= (i + 3 >> 0)) {
					if (layout.substring(i, (i + 3 >> 0)) === "Mon") {
						if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "Monday") {
							_tmp$6 = layout.substring(0, i); _tmp$7 = 261; _tmp$8 = layout.substring((i + 6 >> 0)); prefix = _tmp$6; std = _tmp$7; suffix = _tmp$8;
							return [prefix, std, suffix];
						}
						if (!startsWithLowerCase(layout.substring((i + 3 >> 0)))) {
							_tmp$9 = layout.substring(0, i); _tmp$10 = 262; _tmp$11 = layout.substring((i + 3 >> 0)); prefix = _tmp$9; std = _tmp$10; suffix = _tmp$11;
							return [prefix, std, suffix];
						}
					}
					if (layout.substring(i, (i + 3 >> 0)) === "MST") {
						_tmp$12 = layout.substring(0, i); _tmp$13 = 21; _tmp$14 = layout.substring((i + 3 >> 0)); prefix = _tmp$12; std = _tmp$13; suffix = _tmp$14;
						return [prefix, std, suffix];
					}
				}
			} else if (_ref === 48) {
				if (layout.length >= (i + 2 >> 0) && 49 <= layout.charCodeAt((i + 1 >> 0)) && layout.charCodeAt((i + 1 >> 0)) <= 54) {
					_tmp$15 = layout.substring(0, i); _tmp$16 = (x = layout.charCodeAt((i + 1 >> 0)) - 49 << 24 >>> 24, ((x < 0 || x >= std0x.length) ? $throwRuntimeError("index out of range") : std0x[x])); _tmp$17 = layout.substring((i + 2 >> 0)); prefix = _tmp$15; std = _tmp$16; suffix = _tmp$17;
					return [prefix, std, suffix];
				}
			} else if (_ref === 49) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 53)) {
					_tmp$18 = layout.substring(0, i); _tmp$19 = 522; _tmp$20 = layout.substring((i + 2 >> 0)); prefix = _tmp$18; std = _tmp$19; suffix = _tmp$20;
					return [prefix, std, suffix];
				}
				_tmp$21 = layout.substring(0, i); _tmp$22 = 259; _tmp$23 = layout.substring((i + 1 >> 0)); prefix = _tmp$21; std = _tmp$22; suffix = _tmp$23;
				return [prefix, std, suffix];
			} else if (_ref === 50) {
				if (layout.length >= (i + 4 >> 0) && layout.substring(i, (i + 4 >> 0)) === "2006") {
					_tmp$24 = layout.substring(0, i); _tmp$25 = 273; _tmp$26 = layout.substring((i + 4 >> 0)); prefix = _tmp$24; std = _tmp$25; suffix = _tmp$26;
					return [prefix, std, suffix];
				}
				_tmp$27 = layout.substring(0, i); _tmp$28 = 263; _tmp$29 = layout.substring((i + 1 >> 0)); prefix = _tmp$27; std = _tmp$28; suffix = _tmp$29;
				return [prefix, std, suffix];
			} else if (_ref === 95) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 50)) {
					_tmp$30 = layout.substring(0, i); _tmp$31 = 264; _tmp$32 = layout.substring((i + 2 >> 0)); prefix = _tmp$30; std = _tmp$31; suffix = _tmp$32;
					return [prefix, std, suffix];
				}
			} else if (_ref === 51) {
				_tmp$33 = layout.substring(0, i); _tmp$34 = 523; _tmp$35 = layout.substring((i + 1 >> 0)); prefix = _tmp$33; std = _tmp$34; suffix = _tmp$35;
				return [prefix, std, suffix];
			} else if (_ref === 52) {
				_tmp$36 = layout.substring(0, i); _tmp$37 = 525; _tmp$38 = layout.substring((i + 1 >> 0)); prefix = _tmp$36; std = _tmp$37; suffix = _tmp$38;
				return [prefix, std, suffix];
			} else if (_ref === 53) {
				_tmp$39 = layout.substring(0, i); _tmp$40 = 527; _tmp$41 = layout.substring((i + 1 >> 0)); prefix = _tmp$39; std = _tmp$40; suffix = _tmp$41;
				return [prefix, std, suffix];
			} else if (_ref === 80) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 77)) {
					_tmp$42 = layout.substring(0, i); _tmp$43 = 531; _tmp$44 = layout.substring((i + 2 >> 0)); prefix = _tmp$42; std = _tmp$43; suffix = _tmp$44;
					return [prefix, std, suffix];
				}
			} else if (_ref === 112) {
				if (layout.length >= (i + 2 >> 0) && (layout.charCodeAt((i + 1 >> 0)) === 109)) {
					_tmp$45 = layout.substring(0, i); _tmp$46 = 532; _tmp$47 = layout.substring((i + 2 >> 0)); prefix = _tmp$45; std = _tmp$46; suffix = _tmp$47;
					return [prefix, std, suffix];
				}
			} else if (_ref === 45) {
				if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "-070000") {
					_tmp$48 = layout.substring(0, i); _tmp$49 = 27; _tmp$50 = layout.substring((i + 7 >> 0)); prefix = _tmp$48; std = _tmp$49; suffix = _tmp$50;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && layout.substring(i, (i + 9 >> 0)) === "-07:00:00") {
					_tmp$51 = layout.substring(0, i); _tmp$52 = 30; _tmp$53 = layout.substring((i + 9 >> 0)); prefix = _tmp$51; std = _tmp$52; suffix = _tmp$53;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && layout.substring(i, (i + 5 >> 0)) === "-0700") {
					_tmp$54 = layout.substring(0, i); _tmp$55 = 26; _tmp$56 = layout.substring((i + 5 >> 0)); prefix = _tmp$54; std = _tmp$55; suffix = _tmp$56;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "-07:00") {
					_tmp$57 = layout.substring(0, i); _tmp$58 = 29; _tmp$59 = layout.substring((i + 6 >> 0)); prefix = _tmp$57; std = _tmp$58; suffix = _tmp$59;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 3 >> 0) && layout.substring(i, (i + 3 >> 0)) === "-07") {
					_tmp$60 = layout.substring(0, i); _tmp$61 = 28; _tmp$62 = layout.substring((i + 3 >> 0)); prefix = _tmp$60; std = _tmp$61; suffix = _tmp$62;
					return [prefix, std, suffix];
				}
			} else if (_ref === 90) {
				if (layout.length >= (i + 7 >> 0) && layout.substring(i, (i + 7 >> 0)) === "Z070000") {
					_tmp$63 = layout.substring(0, i); _tmp$64 = 23; _tmp$65 = layout.substring((i + 7 >> 0)); prefix = _tmp$63; std = _tmp$64; suffix = _tmp$65;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 9 >> 0) && layout.substring(i, (i + 9 >> 0)) === "Z07:00:00") {
					_tmp$66 = layout.substring(0, i); _tmp$67 = 25; _tmp$68 = layout.substring((i + 9 >> 0)); prefix = _tmp$66; std = _tmp$67; suffix = _tmp$68;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 5 >> 0) && layout.substring(i, (i + 5 >> 0)) === "Z0700") {
					_tmp$69 = layout.substring(0, i); _tmp$70 = 22; _tmp$71 = layout.substring((i + 5 >> 0)); prefix = _tmp$69; std = _tmp$70; suffix = _tmp$71;
					return [prefix, std, suffix];
				}
				if (layout.length >= (i + 6 >> 0) && layout.substring(i, (i + 6 >> 0)) === "Z07:00") {
					_tmp$72 = layout.substring(0, i); _tmp$73 = 24; _tmp$74 = layout.substring((i + 6 >> 0)); prefix = _tmp$72; std = _tmp$73; suffix = _tmp$74;
					return [prefix, std, suffix];
				}
			} else if (_ref === 46) {
				if ((i + 1 >> 0) < layout.length && ((layout.charCodeAt((i + 1 >> 0)) === 48) || (layout.charCodeAt((i + 1 >> 0)) === 57))) {
					ch = layout.charCodeAt((i + 1 >> 0));
					j = i + 1 >> 0;
					while (j < layout.length && (layout.charCodeAt(j) === ch)) {
						j = j + (1) >> 0;
					}
					if (!isDigit(layout, j)) {
						std$1 = 31;
						if (layout.charCodeAt((i + 1 >> 0)) === 57) {
							std$1 = 32;
						}
						std$1 = std$1 | ((((j - ((i + 1 >> 0)) >> 0)) << 16 >> 0));
						_tmp$75 = layout.substring(0, i); _tmp$76 = std$1; _tmp$77 = layout.substring(j); prefix = _tmp$75; std = _tmp$76; suffix = _tmp$77;
						return [prefix, std, suffix];
					}
				}
			}
			i = i + (1) >> 0;
		}
		_tmp$78 = layout; _tmp$79 = 0; _tmp$80 = ""; prefix = _tmp$78; std = _tmp$79; suffix = _tmp$80;
		return [prefix, std, suffix];
	};
	match = function(s1, s2) {
		var i, c1, c2;
		i = 0;
		while (i < s1.length) {
			c1 = s1.charCodeAt(i);
			c2 = s2.charCodeAt(i);
			if (!((c1 === c2))) {
				c1 = (c1 | (32)) >>> 0;
				c2 = (c2 | (32)) >>> 0;
				if (!((c1 === c2)) || c1 < 97 || c1 > 122) {
					return false;
				}
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	lookup = function(tab, val) {
		var _ref, _i, i, v;
		_ref = tab;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (val.length >= v.length && match(val.substring(0, v.length), v)) {
				return [i, val.substring(v.length), $ifaceNil];
			}
			_i++;
		}
		return [-1, val, errBad];
	};
	appendUint = function(b, x, pad) {
		var _q, _r, buf, n, _r$1, _q$1;
		if (x < 10) {
			if (!((pad === 0))) {
				b = $append(b, pad);
			}
			return $append(b, ((48 + x >>> 0) << 24 >>> 24));
		}
		if (x < 100) {
			b = $append(b, ((48 + (_q = x / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >>> 0) << 24 >>> 24));
			b = $append(b, ((48 + (_r = x % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >>> 0) << 24 >>> 24));
			return b;
		}
		buf = ($arrayType($Uint8, 32)).zero(); $copy(buf, ($arrayType($Uint8, 32)).zero(), ($arrayType($Uint8, 32)));
		n = 32;
		if (x === 0) {
			return $append(b, 48);
		}
		while (x >= 10) {
			n = n - (1) >> 0;
			(n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = (((_r$1 = x % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24);
			x = (_q$1 = x / (10), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		n = n - (1) >> 0;
		(n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = ((x + 48 >>> 0) << 24 >>> 24);
		return $appendSlice(b, $subslice(new ($sliceType($Uint8))(buf), n));
	};
	atoi = function(s) {
		var x = 0, err = $ifaceNil, neg, _tuple$1, q, rem, _tmp, _tmp$1, _tmp$2, _tmp$3;
		neg = false;
		if (!(s === "") && ((s.charCodeAt(0) === 45) || (s.charCodeAt(0) === 43))) {
			neg = s.charCodeAt(0) === 45;
			s = s.substring(1);
		}
		_tuple$1 = leadingInt(s); q = _tuple$1[0]; rem = _tuple$1[1]; err = _tuple$1[2];
		x = ((q.$low + ((q.$high >> 31) * 4294967296)) >> 0);
		if (!($interfaceIsEqual(err, $ifaceNil)) || !(rem === "")) {
			_tmp = 0; _tmp$1 = atoiError; x = _tmp; err = _tmp$1;
			return [x, err];
		}
		if (neg) {
			x = -x;
		}
		_tmp$2 = x; _tmp$3 = $ifaceNil; x = _tmp$2; err = _tmp$3;
		return [x, err];
	};
	formatNano = function(b, nanosec, n, trim) {
		var u, buf, start, _r, _q, x;
		u = nanosec;
		buf = ($arrayType($Uint8, 9)).zero(); $copy(buf, ($arrayType($Uint8, 9)).zero(), ($arrayType($Uint8, 9)));
		start = 9;
		while (start > 0) {
			start = start - (1) >> 0;
			(start < 0 || start >= buf.length) ? $throwRuntimeError("index out of range") : buf[start] = (((_r = u % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) + 48 >>> 0) << 24 >>> 24);
			u = (_q = u / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		if (n > 9) {
			n = 9;
		}
		if (trim) {
			while (n > 0 && ((x = n - 1 >> 0, ((x < 0 || x >= buf.length) ? $throwRuntimeError("index out of range") : buf[x])) === 48)) {
				n = n - (1) >> 0;
			}
			if (n === 0) {
				return b;
			}
		}
		b = $append(b, 46);
		return $appendSlice(b, $subslice(new ($sliceType($Uint8))(buf), 0, n));
	};
	Time.Ptr.prototype.String = function() {
		var t;
		t = new Time.Ptr(); $copy(t, this, Time);
		return t.Format("2006-01-02 15:04:05.999999999 -0700 MST");
	};
	Time.prototype.String = function() { return this.$val.String(); };
	Time.Ptr.prototype.Format = function(layout) {
		var t, _tuple$1, name, offset, abs, year, month, day, hour, min, sec, b, buf, max, _tuple$2, prefix, std, suffix, _tuple$3, _tuple$4, _ref, y, _r, y$1, m, s, _r$1, hr, _r$2, hr$1, _q, zone$1, absoffset, _q$1, _r$3, _r$4, _q$2, zone$2, _q$3, _r$5;
		t = new Time.Ptr(); $copy(t, this, Time);
		_tuple$1 = t.locabs(); name = _tuple$1[0]; offset = _tuple$1[1]; abs = _tuple$1[2];
		year = -1;
		month = 0;
		day = 0;
		hour = -1;
		min = 0;
		sec = 0;
		b = ($sliceType($Uint8)).nil;
		buf = ($arrayType($Uint8, 64)).zero(); $copy(buf, ($arrayType($Uint8, 64)).zero(), ($arrayType($Uint8, 64)));
		max = layout.length + 10 >> 0;
		if (max <= 64) {
			b = $subslice(new ($sliceType($Uint8))(buf), 0, 0);
		} else {
			b = ($sliceType($Uint8)).make(0, max);
		}
		while (!(layout === "")) {
			_tuple$2 = nextStdChunk(layout); prefix = _tuple$2[0]; std = _tuple$2[1]; suffix = _tuple$2[2];
			if (!(prefix === "")) {
				b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes(prefix)));
			}
			if (std === 0) {
				break;
			}
			layout = suffix;
			if (year < 0 && !(((std & 256) === 0))) {
				_tuple$3 = absDate(abs, true); year = _tuple$3[0]; month = _tuple$3[1]; day = _tuple$3[2];
			}
			if (hour < 0 && !(((std & 512) === 0))) {
				_tuple$4 = absClock(abs); hour = _tuple$4[0]; min = _tuple$4[1]; sec = _tuple$4[2];
			}
			_ref = std & 65535;
			switch (0) { default: if (_ref === 274) {
				y = year;
				if (y < 0) {
					y = -y;
				}
				b = appendUint(b, ((_r = y % 100, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
			} else if (_ref === 273) {
				y$1 = year;
				if (year <= -1000) {
					b = $append(b, 45);
					y$1 = -y$1;
				} else if (year <= -100) {
					b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes("-0")));
					y$1 = -y$1;
				} else if (year <= -10) {
					b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes("-00")));
					y$1 = -y$1;
				} else if (year < 0) {
					b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes("-000")));
					y$1 = -y$1;
				} else if (year < 10) {
					b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes("000")));
				} else if (year < 100) {
					b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes("00")));
				} else if (year < 1000) {
					b = $append(b, 48);
				}
				b = appendUint(b, (y$1 >>> 0), 0);
			} else if (_ref === 258) {
				b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes(new Month(month).String().substring(0, 3))));
			} else if (_ref === 257) {
				m = new Month(month).String();
				b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes(m)));
			} else if (_ref === 259) {
				b = appendUint(b, (month >>> 0), 0);
			} else if (_ref === 260) {
				b = appendUint(b, (month >>> 0), 48);
			} else if (_ref === 262) {
				b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes(new Weekday(absWeekday(abs)).String().substring(0, 3))));
			} else if (_ref === 261) {
				s = new Weekday(absWeekday(abs)).String();
				b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes(s)));
			} else if (_ref === 263) {
				b = appendUint(b, (day >>> 0), 0);
			} else if (_ref === 264) {
				b = appendUint(b, (day >>> 0), 32);
			} else if (_ref === 265) {
				b = appendUint(b, (day >>> 0), 48);
			} else if (_ref === 522) {
				b = appendUint(b, (hour >>> 0), 48);
			} else if (_ref === 523) {
				hr = (_r$1 = hour % 12, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
				if (hr === 0) {
					hr = 12;
				}
				b = appendUint(b, (hr >>> 0), 0);
			} else if (_ref === 524) {
				hr$1 = (_r$2 = hour % 12, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
				if (hr$1 === 0) {
					hr$1 = 12;
				}
				b = appendUint(b, (hr$1 >>> 0), 48);
			} else if (_ref === 525) {
				b = appendUint(b, (min >>> 0), 0);
			} else if (_ref === 526) {
				b = appendUint(b, (min >>> 0), 48);
			} else if (_ref === 527) {
				b = appendUint(b, (sec >>> 0), 0);
			} else if (_ref === 528) {
				b = appendUint(b, (sec >>> 0), 48);
			} else if (_ref === 531) {
				if (hour >= 12) {
					b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes("PM")));
				} else {
					b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes("AM")));
				}
			} else if (_ref === 532) {
				if (hour >= 12) {
					b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes("pm")));
				} else {
					b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes("am")));
				}
			} else if (_ref === 22 || _ref === 24 || _ref === 23 || _ref === 25 || _ref === 26 || _ref === 29 || _ref === 27 || _ref === 30) {
				if ((offset === 0) && ((std === 22) || (std === 24) || (std === 23) || (std === 25))) {
					b = $append(b, 90);
					break;
				}
				zone$1 = (_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
				absoffset = offset;
				if (zone$1 < 0) {
					b = $append(b, 45);
					zone$1 = -zone$1;
					absoffset = -absoffset;
				} else {
					b = $append(b, 43);
				}
				b = appendUint(b, ((_q$1 = zone$1 / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
				if ((std === 24) || (std === 29)) {
					b = $append(b, 58);
				}
				b = appendUint(b, ((_r$3 = zone$1 % 60, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
				if ((std === 23) || (std === 27) || (std === 30) || (std === 25)) {
					if ((std === 30) || (std === 25)) {
						b = $append(b, 58);
					}
					b = appendUint(b, ((_r$4 = absoffset % 60, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
				}
			} else if (_ref === 21) {
				if (!(name === "")) {
					b = $appendSlice(b, new ($sliceType($Uint8))($stringToBytes(name)));
					break;
				}
				zone$2 = (_q$2 = offset / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
				if (zone$2 < 0) {
					b = $append(b, 45);
					zone$2 = -zone$2;
				} else {
					b = $append(b, 43);
				}
				b = appendUint(b, ((_q$3 = zone$2 / 60, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
				b = appendUint(b, ((_r$5 = zone$2 % 60, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")) >>> 0), 48);
			} else if (_ref === 31 || _ref === 32) {
				b = formatNano(b, (t.Nanosecond() >>> 0), std >> 16 >> 0, (std & 65535) === 32);
			} }
		}
		return $bytesToString(b);
	};
	Time.prototype.Format = function(layout) { return this.$val.Format(layout); };
	quote = function(s) {
		return "\"" + s + "\"";
	};
	ParseError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Message === "") {
			return "parsing time " + quote(e.Value) + " as " + quote(e.Layout) + ": cannot parse " + quote(e.ValueElem) + " as " + quote(e.LayoutElem);
		}
		return "parsing time " + quote(e.Value) + e.Message;
	};
	ParseError.prototype.Error = function() { return this.$val.Error(); };
	isDigit = function(s, i) {
		var c;
		if (s.length <= i) {
			return false;
		}
		c = s.charCodeAt(i);
		return 48 <= c && c <= 57;
	};
	getnum = function(s, fixed) {
		var x;
		if (!isDigit(s, 0)) {
			return [0, s, errBad];
		}
		if (!isDigit(s, 1)) {
			if (fixed) {
				return [0, s, errBad];
			}
			return [((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0), s.substring(1), $ifaceNil];
		}
		return [(x = ((s.charCodeAt(0) - 48 << 24 >>> 24) >> 0), (((x >>> 16 << 16) * 10 >> 0) + (x << 16 >>> 16) * 10) >> 0) + ((s.charCodeAt(1) - 48 << 24 >>> 24) >> 0) >> 0, s.substring(2), $ifaceNil];
	};
	cutspace = function(s) {
		while (s.length > 0 && (s.charCodeAt(0) === 32)) {
			s = s.substring(1);
		}
		return s;
	};
	skip = function(value, prefix) {
		while (prefix.length > 0) {
			if (prefix.charCodeAt(0) === 32) {
				if (value.length > 0 && !((value.charCodeAt(0) === 32))) {
					return [value, errBad];
				}
				prefix = cutspace(prefix);
				value = cutspace(value);
				continue;
			}
			if ((value.length === 0) || !((value.charCodeAt(0) === prefix.charCodeAt(0)))) {
				return [value, errBad];
			}
			prefix = prefix.substring(1);
			value = value.substring(1);
		}
		return [value, $ifaceNil];
	};
	Parse = $pkg.Parse = function(layout, value) {
		return parse(layout, value, $pkg.UTC, $pkg.Local);
	};
	parse = function(layout, value, defaultLocation, local) {
		var _tmp, _tmp$1, alayout, avalue, rangeErrString, amSet, pmSet, year, month, day, hour, min, sec, nsec, z, zoneOffset, zoneName, err, _tuple$1, prefix, std, suffix, stdstr, _tuple$2, p, _ref, _tmp$2, _tmp$3, _tuple$3, _tmp$4, _tmp$5, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, _tuple$10, _tuple$11, _tuple$12, _tuple$13, _tuple$14, _tuple$15, n, _tuple$16, _tmp$6, _tmp$7, _ref$1, _tmp$8, _tmp$9, _ref$2, _tmp$10, _tmp$11, _tmp$12, _tmp$13, sign, hour$1, min$1, seconds, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39, _tmp$40, _tmp$41, hr, mm, ss, _tuple$17, _tuple$18, _tuple$19, x, _ref$3, _tuple$20, n$1, ok, _tmp$42, _tmp$43, ndigit, _tuple$21, i, _tuple$22, t, x$1, x$2, _tuple$23, x$3, name, offset, t$1, _tuple$24, x$4, offset$1, ok$1, x$5, x$6, _tuple$25, x$7;
		_tmp = layout; _tmp$1 = value; alayout = _tmp; avalue = _tmp$1;
		rangeErrString = "";
		amSet = false;
		pmSet = false;
		year = 0;
		month = 1;
		day = 1;
		hour = 0;
		min = 0;
		sec = 0;
		nsec = 0;
		z = ($ptrType(Location)).nil;
		zoneOffset = -1;
		zoneName = "";
		while (true) {
			err = $ifaceNil;
			_tuple$1 = nextStdChunk(layout); prefix = _tuple$1[0]; std = _tuple$1[1]; suffix = _tuple$1[2];
			stdstr = layout.substring(prefix.length, (layout.length - suffix.length >> 0));
			_tuple$2 = skip(value, prefix); value = _tuple$2[0]; err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [new Time.Ptr(new $Int64(0, 0), 0, ($ptrType(Location)).nil), new ParseError.Ptr(alayout, avalue, prefix, value, "")];
			}
			if (std === 0) {
				if (!((value.length === 0))) {
					return [new Time.Ptr(new $Int64(0, 0), 0, ($ptrType(Location)).nil), new ParseError.Ptr(alayout, avalue, "", value, ": extra text: " + value)];
				}
				break;
			}
			layout = suffix;
			p = "";
			_ref = std & 65535;
			switch (0) { default: if (_ref === 274) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tmp$2 = value.substring(0, 2); _tmp$3 = value.substring(2); p = _tmp$2; value = _tmp$3;
				_tuple$3 = atoi(p); year = _tuple$3[0]; err = _tuple$3[1];
				if (year >= 69) {
					year = year + (1900) >> 0;
				} else {
					year = year + (2000) >> 0;
				}
			} else if (_ref === 273) {
				if (value.length < 4 || !isDigit(value, 0)) {
					err = errBad;
					break;
				}
				_tmp$4 = value.substring(0, 4); _tmp$5 = value.substring(4); p = _tmp$4; value = _tmp$5;
				_tuple$4 = atoi(p); year = _tuple$4[0]; err = _tuple$4[1];
			} else if (_ref === 258) {
				_tuple$5 = lookup(shortMonthNames, value); month = _tuple$5[0]; value = _tuple$5[1]; err = _tuple$5[2];
			} else if (_ref === 257) {
				_tuple$6 = lookup(longMonthNames, value); month = _tuple$6[0]; value = _tuple$6[1]; err = _tuple$6[2];
			} else if (_ref === 259 || _ref === 260) {
				_tuple$7 = getnum(value, std === 260); month = _tuple$7[0]; value = _tuple$7[1]; err = _tuple$7[2];
				if (month <= 0 || 12 < month) {
					rangeErrString = "month";
				}
			} else if (_ref === 262) {
				_tuple$8 = lookup(shortDayNames, value); value = _tuple$8[1]; err = _tuple$8[2];
			} else if (_ref === 261) {
				_tuple$9 = lookup(longDayNames, value); value = _tuple$9[1]; err = _tuple$9[2];
			} else if (_ref === 263 || _ref === 264 || _ref === 265) {
				if ((std === 264) && value.length > 0 && (value.charCodeAt(0) === 32)) {
					value = value.substring(1);
				}
				_tuple$10 = getnum(value, std === 265); day = _tuple$10[0]; value = _tuple$10[1]; err = _tuple$10[2];
				if (day < 0 || 31 < day) {
					rangeErrString = "day";
				}
			} else if (_ref === 522) {
				_tuple$11 = getnum(value, false); hour = _tuple$11[0]; value = _tuple$11[1]; err = _tuple$11[2];
				if (hour < 0 || 24 <= hour) {
					rangeErrString = "hour";
				}
			} else if (_ref === 523 || _ref === 524) {
				_tuple$12 = getnum(value, std === 524); hour = _tuple$12[0]; value = _tuple$12[1]; err = _tuple$12[2];
				if (hour < 0 || 12 < hour) {
					rangeErrString = "hour";
				}
			} else if (_ref === 525 || _ref === 526) {
				_tuple$13 = getnum(value, std === 526); min = _tuple$13[0]; value = _tuple$13[1]; err = _tuple$13[2];
				if (min < 0 || 60 <= min) {
					rangeErrString = "minute";
				}
			} else if (_ref === 527 || _ref === 528) {
				_tuple$14 = getnum(value, std === 528); sec = _tuple$14[0]; value = _tuple$14[1]; err = _tuple$14[2];
				if (sec < 0 || 60 <= sec) {
					rangeErrString = "second";
				}
				if (value.length >= 2 && (value.charCodeAt(0) === 46) && isDigit(value, 1)) {
					_tuple$15 = nextStdChunk(layout); std = _tuple$15[1];
					std = std & (65535);
					if ((std === 31) || (std === 32)) {
						break;
					}
					n = 2;
					while (n < value.length && isDigit(value, n)) {
						n = n + (1) >> 0;
					}
					_tuple$16 = parseNanoseconds(value, n); nsec = _tuple$16[0]; rangeErrString = _tuple$16[1]; err = _tuple$16[2];
					value = value.substring(n);
				}
			} else if (_ref === 531) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tmp$6 = value.substring(0, 2); _tmp$7 = value.substring(2); p = _tmp$6; value = _tmp$7;
				_ref$1 = p;
				if (_ref$1 === "PM") {
					pmSet = true;
				} else if (_ref$1 === "AM") {
					amSet = true;
				} else {
					err = errBad;
				}
			} else if (_ref === 532) {
				if (value.length < 2) {
					err = errBad;
					break;
				}
				_tmp$8 = value.substring(0, 2); _tmp$9 = value.substring(2); p = _tmp$8; value = _tmp$9;
				_ref$2 = p;
				if (_ref$2 === "pm") {
					pmSet = true;
				} else if (_ref$2 === "am") {
					amSet = true;
				} else {
					err = errBad;
				}
			} else if (_ref === 22 || _ref === 24 || _ref === 23 || _ref === 25 || _ref === 26 || _ref === 28 || _ref === 29 || _ref === 27 || _ref === 30) {
				if (((std === 22) || (std === 24)) && value.length >= 1 && (value.charCodeAt(0) === 90)) {
					value = value.substring(1);
					z = $pkg.UTC;
					break;
				}
				_tmp$10 = ""; _tmp$11 = ""; _tmp$12 = ""; _tmp$13 = ""; sign = _tmp$10; hour$1 = _tmp$11; min$1 = _tmp$12; seconds = _tmp$13;
				if ((std === 24) || (std === 29)) {
					if (value.length < 6) {
						err = errBad;
						break;
					}
					if (!((value.charCodeAt(3) === 58))) {
						err = errBad;
						break;
					}
					_tmp$14 = value.substring(0, 1); _tmp$15 = value.substring(1, 3); _tmp$16 = value.substring(4, 6); _tmp$17 = "00"; _tmp$18 = value.substring(6); sign = _tmp$14; hour$1 = _tmp$15; min$1 = _tmp$16; seconds = _tmp$17; value = _tmp$18;
				} else if (std === 28) {
					if (value.length < 3) {
						err = errBad;
						break;
					}
					_tmp$19 = value.substring(0, 1); _tmp$20 = value.substring(1, 3); _tmp$21 = "00"; _tmp$22 = "00"; _tmp$23 = value.substring(3); sign = _tmp$19; hour$1 = _tmp$20; min$1 = _tmp$21; seconds = _tmp$22; value = _tmp$23;
				} else if ((std === 25) || (std === 30)) {
					if (value.length < 9) {
						err = errBad;
						break;
					}
					if (!((value.charCodeAt(3) === 58)) || !((value.charCodeAt(6) === 58))) {
						err = errBad;
						break;
					}
					_tmp$24 = value.substring(0, 1); _tmp$25 = value.substring(1, 3); _tmp$26 = value.substring(4, 6); _tmp$27 = value.substring(7, 9); _tmp$28 = value.substring(9); sign = _tmp$24; hour$1 = _tmp$25; min$1 = _tmp$26; seconds = _tmp$27; value = _tmp$28;
				} else if ((std === 23) || (std === 27)) {
					if (value.length < 7) {
						err = errBad;
						break;
					}
					_tmp$29 = value.substring(0, 1); _tmp$30 = value.substring(1, 3); _tmp$31 = value.substring(3, 5); _tmp$32 = value.substring(5, 7); _tmp$33 = value.substring(7); sign = _tmp$29; hour$1 = _tmp$30; min$1 = _tmp$31; seconds = _tmp$32; value = _tmp$33;
				} else {
					if (value.length < 5) {
						err = errBad;
						break;
					}
					_tmp$34 = value.substring(0, 1); _tmp$35 = value.substring(1, 3); _tmp$36 = value.substring(3, 5); _tmp$37 = "00"; _tmp$38 = value.substring(5); sign = _tmp$34; hour$1 = _tmp$35; min$1 = _tmp$36; seconds = _tmp$37; value = _tmp$38;
				}
				_tmp$39 = 0; _tmp$40 = 0; _tmp$41 = 0; hr = _tmp$39; mm = _tmp$40; ss = _tmp$41;
				_tuple$17 = atoi(hour$1); hr = _tuple$17[0]; err = _tuple$17[1];
				if ($interfaceIsEqual(err, $ifaceNil)) {
					_tuple$18 = atoi(min$1); mm = _tuple$18[0]; err = _tuple$18[1];
				}
				if ($interfaceIsEqual(err, $ifaceNil)) {
					_tuple$19 = atoi(seconds); ss = _tuple$19[0]; err = _tuple$19[1];
				}
				zoneOffset = (x = (((((hr >>> 16 << 16) * 60 >> 0) + (hr << 16 >>> 16) * 60) >> 0) + mm >> 0), (((x >>> 16 << 16) * 60 >> 0) + (x << 16 >>> 16) * 60) >> 0) + ss >> 0;
				_ref$3 = sign.charCodeAt(0);
				if (_ref$3 === 43) {
				} else if (_ref$3 === 45) {
					zoneOffset = -zoneOffset;
				} else {
					err = errBad;
				}
			} else if (_ref === 21) {
				if (value.length >= 3 && value.substring(0, 3) === "UTC") {
					z = $pkg.UTC;
					value = value.substring(3);
					break;
				}
				_tuple$20 = parseTimeZone(value); n$1 = _tuple$20[0]; ok = _tuple$20[1];
				if (!ok) {
					err = errBad;
					break;
				}
				_tmp$42 = value.substring(0, n$1); _tmp$43 = value.substring(n$1); zoneName = _tmp$42; value = _tmp$43;
			} else if (_ref === 31) {
				ndigit = 1 + ((std >> 16 >> 0)) >> 0;
				if (value.length < ndigit) {
					err = errBad;
					break;
				}
				_tuple$21 = parseNanoseconds(value, ndigit); nsec = _tuple$21[0]; rangeErrString = _tuple$21[1]; err = _tuple$21[2];
				value = value.substring(ndigit);
			} else if (_ref === 32) {
				if (value.length < 2 || !((value.charCodeAt(0) === 46)) || value.charCodeAt(1) < 48 || 57 < value.charCodeAt(1)) {
					break;
				}
				i = 0;
				while (i < 9 && (i + 1 >> 0) < value.length && 48 <= value.charCodeAt((i + 1 >> 0)) && value.charCodeAt((i + 1 >> 0)) <= 57) {
					i = i + (1) >> 0;
				}
				_tuple$22 = parseNanoseconds(value, 1 + i >> 0); nsec = _tuple$22[0]; rangeErrString = _tuple$22[1]; err = _tuple$22[2];
				value = value.substring((1 + i >> 0));
			} }
			if (!(rangeErrString === "")) {
				return [new Time.Ptr(new $Int64(0, 0), 0, ($ptrType(Location)).nil), new ParseError.Ptr(alayout, avalue, stdstr, value, ": " + rangeErrString + " out of range")];
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [new Time.Ptr(new $Int64(0, 0), 0, ($ptrType(Location)).nil), new ParseError.Ptr(alayout, avalue, stdstr, value, "")];
			}
		}
		if (pmSet && hour < 12) {
			hour = hour + (12) >> 0;
		} else if (amSet && (hour === 12)) {
			hour = 0;
		}
		if (!(z === ($ptrType(Location)).nil)) {
			return [Date(year, (month >> 0), day, hour, min, sec, nsec, z), $ifaceNil];
		}
		if (!((zoneOffset === -1))) {
			t = new Time.Ptr(); $copy(t, Date(year, (month >> 0), day, hour, min, sec, nsec, $pkg.UTC), Time);
			t.sec = (x$1 = t.sec, x$2 = new $Int64(0, zoneOffset), new $Int64(x$1.$high - x$2.$high, x$1.$low - x$2.$low));
			_tuple$23 = local.lookup((x$3 = t.sec, new $Int64(x$3.$high + -15, x$3.$low + 2288912640))); name = _tuple$23[0]; offset = _tuple$23[1];
			if ((offset === zoneOffset) && (zoneName === "" || name === zoneName)) {
				t.loc = local;
				return [t, $ifaceNil];
			}
			t.loc = FixedZone(zoneName, zoneOffset);
			return [t, $ifaceNil];
		}
		if (!(zoneName === "")) {
			t$1 = new Time.Ptr(); $copy(t$1, Date(year, (month >> 0), day, hour, min, sec, nsec, $pkg.UTC), Time);
			_tuple$24 = local.lookupName(zoneName, (x$4 = t$1.sec, new $Int64(x$4.$high + -15, x$4.$low + 2288912640))); offset$1 = _tuple$24[0]; ok$1 = _tuple$24[2];
			if (ok$1) {
				t$1.sec = (x$5 = t$1.sec, x$6 = new $Int64(0, offset$1), new $Int64(x$5.$high - x$6.$high, x$5.$low - x$6.$low));
				t$1.loc = local;
				return [t$1, $ifaceNil];
			}
			if (zoneName.length > 3 && zoneName.substring(0, 3) === "GMT") {
				_tuple$25 = atoi(zoneName.substring(3)); offset$1 = _tuple$25[0];
				offset$1 = (x$7 = 3600, (((offset$1 >>> 16 << 16) * x$7 >> 0) + (offset$1 << 16 >>> 16) * x$7) >> 0);
			}
			t$1.loc = FixedZone(zoneName, offset$1);
			return [t$1, $ifaceNil];
		}
		return [Date(year, (month >> 0), day, hour, min, sec, nsec, defaultLocation), $ifaceNil];
	};
	parseTimeZone = function(value) {
		var length = 0, ok = false, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, nUpper, c, _ref, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15;
		if (value.length < 3) {
			_tmp = 0; _tmp$1 = false; length = _tmp; ok = _tmp$1;
			return [length, ok];
		}
		if (value.length >= 4 && (value.substring(0, 4) === "ChST" || value.substring(0, 4) === "MeST")) {
			_tmp$2 = 4; _tmp$3 = true; length = _tmp$2; ok = _tmp$3;
			return [length, ok];
		}
		if (value.substring(0, 3) === "GMT") {
			length = parseGMT(value);
			_tmp$4 = length; _tmp$5 = true; length = _tmp$4; ok = _tmp$5;
			return [length, ok];
		}
		nUpper = 0;
		nUpper = 0;
		while (nUpper < 6) {
			if (nUpper >= value.length) {
				break;
			}
			c = value.charCodeAt(nUpper);
			if (c < 65 || 90 < c) {
				break;
			}
			nUpper = nUpper + (1) >> 0;
		}
		_ref = nUpper;
		if (_ref === 0 || _ref === 1 || _ref === 2 || _ref === 6) {
			_tmp$6 = 0; _tmp$7 = false; length = _tmp$6; ok = _tmp$7;
			return [length, ok];
		} else if (_ref === 5) {
			if (value.charCodeAt(4) === 84) {
				_tmp$8 = 5; _tmp$9 = true; length = _tmp$8; ok = _tmp$9;
				return [length, ok];
			}
		} else if (_ref === 4) {
			if (value.charCodeAt(3) === 84) {
				_tmp$10 = 4; _tmp$11 = true; length = _tmp$10; ok = _tmp$11;
				return [length, ok];
			}
		} else if (_ref === 3) {
			_tmp$12 = 3; _tmp$13 = true; length = _tmp$12; ok = _tmp$13;
			return [length, ok];
		}
		_tmp$14 = 0; _tmp$15 = false; length = _tmp$14; ok = _tmp$15;
		return [length, ok];
	};
	parseGMT = function(value) {
		var sign, _tuple$1, x, rem, err;
		value = value.substring(3);
		if (value.length === 0) {
			return 3;
		}
		sign = value.charCodeAt(0);
		if (!((sign === 45)) && !((sign === 43))) {
			return 3;
		}
		_tuple$1 = leadingInt(value.substring(1)); x = _tuple$1[0]; rem = _tuple$1[1]; err = _tuple$1[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return 3;
		}
		if (sign === 45) {
			x = new $Int64(-x.$high, -x.$low);
		}
		if ((x.$high === 0 && x.$low === 0) || (x.$high < -1 || (x.$high === -1 && x.$low < 4294967282)) || (0 < x.$high || (0 === x.$high && 12 < x.$low))) {
			return 3;
		}
		return (3 + value.length >> 0) - rem.length >> 0;
	};
	parseNanoseconds = function(value, nbytes) {
		var ns = 0, rangeErrString = "", err = $ifaceNil, _tuple$1, scaleDigits, i, x;
		if (!((value.charCodeAt(0) === 46))) {
			err = errBad;
			return [ns, rangeErrString, err];
		}
		_tuple$1 = atoi(value.substring(1, nbytes)); ns = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [ns, rangeErrString, err];
		}
		if (ns < 0 || 1000000000 <= ns) {
			rangeErrString = "fractional second";
			return [ns, rangeErrString, err];
		}
		scaleDigits = 10 - nbytes >> 0;
		i = 0;
		while (i < scaleDigits) {
			ns = (x = 10, (((ns >>> 16 << 16) * x >> 0) + (ns << 16 >>> 16) * x) >> 0);
			i = i + (1) >> 0;
		}
		return [ns, rangeErrString, err];
	};
	leadingInt = function(s) {
		var x = new $Int64(0, 0), rem = "", err = $ifaceNil, i, c, _tmp, _tmp$1, _tmp$2, x$1, x$2, x$3, _tmp$3, _tmp$4, _tmp$5;
		i = 0;
		while (i < s.length) {
			c = s.charCodeAt(i);
			if (c < 48 || c > 57) {
				break;
			}
			if ((x.$high > 214748364 || (x.$high === 214748364 && x.$low >= 3435973835))) {
				_tmp = new $Int64(0, 0); _tmp$1 = ""; _tmp$2 = errLeadingInt; x = _tmp; rem = _tmp$1; err = _tmp$2;
				return [x, rem, err];
			}
			x = (x$1 = (x$2 = $mul64(x, new $Int64(0, 10)), x$3 = new $Int64(0, c), new $Int64(x$2.$high + x$3.$high, x$2.$low + x$3.$low)), new $Int64(x$1.$high - 0, x$1.$low - 48));
			i = i + (1) >> 0;
		}
		_tmp$3 = x; _tmp$4 = s.substring(i); _tmp$5 = $ifaceNil; x = _tmp$3; rem = _tmp$4; err = _tmp$5;
		return [x, rem, err];
	};
	ParseDuration = $pkg.ParseDuration = function(s) {
		var orig, f, neg, c, g, x, err, pl, _tuple$1, pre, post, pl$1, _tuple$2, scale, n, i, c$1, u, _tuple$3, _entry, unit, ok;
		orig = s;
		f = 0;
		neg = false;
		if (!(s === "")) {
			c = s.charCodeAt(0);
			if ((c === 45) || (c === 43)) {
				neg = c === 45;
				s = s.substring(1);
			}
		}
		if (s === "0") {
			return [new Duration(0, 0), $ifaceNil];
		}
		if (s === "") {
			return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
		}
		while (!(s === "")) {
			g = 0;
			x = new $Int64(0, 0);
			err = $ifaceNil;
			if (!((s.charCodeAt(0) === 46) || (48 <= s.charCodeAt(0) && s.charCodeAt(0) <= 57))) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
			}
			pl = s.length;
			_tuple$1 = leadingInt(s); x = _tuple$1[0]; s = _tuple$1[1]; err = _tuple$1[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
			}
			g = $flatten64(x);
			pre = !((pl === s.length));
			post = false;
			if (!(s === "") && (s.charCodeAt(0) === 46)) {
				s = s.substring(1);
				pl$1 = s.length;
				_tuple$2 = leadingInt(s); x = _tuple$2[0]; s = _tuple$2[1]; err = _tuple$2[2];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
				}
				scale = 1;
				n = pl$1 - s.length >> 0;
				while (n > 0) {
					scale = scale * (10);
					n = n - (1) >> 0;
				}
				g = g + ($flatten64(x) / scale);
				post = !((pl$1 === s.length));
			}
			if (!pre && !post) {
				return [new Duration(0, 0), errors.New("time: invalid duration " + orig)];
			}
			i = 0;
			while (i < s.length) {
				c$1 = s.charCodeAt(i);
				if ((c$1 === 46) || (48 <= c$1 && c$1 <= 57)) {
					break;
				}
				i = i + (1) >> 0;
			}
			if (i === 0) {
				return [new Duration(0, 0), errors.New("time: missing unit in duration " + orig)];
			}
			u = s.substring(0, i);
			s = s.substring(i);
			_tuple$3 = (_entry = unitMap[u], _entry !== undefined ? [_entry.v, true] : [0, false]); unit = _tuple$3[0]; ok = _tuple$3[1];
			if (!ok) {
				return [new Duration(0, 0), errors.New("time: unknown unit " + u + " in duration " + orig)];
			}
			f = f + (g * unit);
		}
		if (neg) {
			f = -f;
		}
		if (f < -9.223372036854776e+18 || f > 9.223372036854776e+18) {
			return [new Duration(0, 0), errors.New("time: overflow parsing duration")];
		}
		return [new Duration(0, f), $ifaceNil];
	};
	when = function(d) {
		var x, x$1, t;
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return runtimeNano();
		}
		t = (x = runtimeNano(), x$1 = new $Int64(d.$high, d.$low), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		if ((t.$high < 0 || (t.$high === 0 && t.$low < 0))) {
			t = new $Int64(2147483647, 4294967295);
		}
		return t;
	};
	Timer.Ptr.prototype.Stop = function() {
		var t;
		t = this;
		return stopTimer(t.r);
	};
	Timer.prototype.Stop = function() { return this.$val.Stop(); };
	NewTimer = $pkg.NewTimer = function(d) {
		var c, t;
		c = new ($chanType(Time, false, false))(1);
		t = new Timer.Ptr(c, new runtimeTimer.Ptr(0, when(d), new $Int64(0, 0), sendTime, c, $ifaceNil, false));
		startTimer(t.r);
		return t;
	};
	Timer.Ptr.prototype.Reset = function(d) {
		var t, w, active;
		t = this;
		w = when(d);
		active = stopTimer(t.r);
		t.r.when = w;
		startTimer(t.r);
		return active;
	};
	Timer.prototype.Reset = function(d) { return this.$val.Reset(d); };
	sendTime = function(now$1, c) {
		var _selection;
		_selection = $select([[$assertType(c, ($chanType(Time, false, false))), Now()], []]);
	};
	After = $pkg.After = function(d) {
		return NewTimer(d).C;
	};
	Time.Ptr.prototype.After = function(u) {
		var t, x, x$1, x$2, x$3;
		t = new Time.Ptr(); $copy(t, this, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high > x$1.$high || (x.$high === x$1.$high && x.$low > x$1.$low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && t.nsec > u.nsec;
	};
	Time.prototype.After = function(u) { return this.$val.After(u); };
	Time.Ptr.prototype.Before = function(u) {
		var t, x, x$1, x$2, x$3;
		t = new Time.Ptr(); $copy(t, this, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high < x$1.$high || (x.$high === x$1.$high && x.$low < x$1.$low))) || (x$2 = t.sec, x$3 = u.sec, (x$2.$high === x$3.$high && x$2.$low === x$3.$low)) && t.nsec < u.nsec;
	};
	Time.prototype.Before = function(u) { return this.$val.Before(u); };
	Time.Ptr.prototype.Equal = function(u) {
		var t, x, x$1;
		t = new Time.Ptr(); $copy(t, this, Time);
		return (x = t.sec, x$1 = u.sec, (x.$high === x$1.$high && x.$low === x$1.$low)) && (t.nsec === u.nsec);
	};
	Time.prototype.Equal = function(u) { return this.$val.Equal(u); };
	Month.prototype.String = function() {
		var m, x;
		m = this.$val !== undefined ? this.$val : this;
		return (x = m - 1 >> 0, ((x < 0 || x >= months.length) ? $throwRuntimeError("index out of range") : months[x]));
	};
	$ptrType(Month).prototype.String = function() { return new Month(this.$get()).String(); };
	Weekday.prototype.String = function() {
		var d;
		d = this.$val !== undefined ? this.$val : this;
		return ((d < 0 || d >= days.length) ? $throwRuntimeError("index out of range") : days[d]);
	};
	$ptrType(Weekday).prototype.String = function() { return new Weekday(this.$get()).String(); };
	Time.Ptr.prototype.IsZero = function() {
		var t, x;
		t = new Time.Ptr(); $copy(t, this, Time);
		return (x = t.sec, (x.$high === 0 && x.$low === 0)) && (t.nsec === 0);
	};
	Time.prototype.IsZero = function() { return this.$val.IsZero(); };
	Time.Ptr.prototype.abs = function() {
		var t, l, x, sec, x$1, x$2, x$3, _tuple$1, offset, x$4, x$5;
		t = new Time.Ptr(); $copy(t, this, Time);
		l = t.loc;
		if (l === ($ptrType(Location)).nil || l === localLoc) {
			l = l.get();
		}
		sec = (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
		if (!(l === utcLoc)) {
			if (!(l.cacheZone === ($ptrType(zone)).nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
				sec = (x$3 = new $Int64(0, l.cacheZone.offset), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
			} else {
				_tuple$1 = l.lookup(sec); offset = _tuple$1[1];
				sec = (x$4 = new $Int64(0, offset), new $Int64(sec.$high + x$4.$high, sec.$low + x$4.$low));
			}
		}
		return (x$5 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$5.$high, x$5.$low));
	};
	Time.prototype.abs = function() { return this.$val.abs(); };
	Time.Ptr.prototype.locabs = function() {
		var name = "", offset = 0, abs = new $Uint64(0, 0), t, l, x, sec, x$1, x$2, _tuple$1, x$3, x$4;
		t = new Time.Ptr(); $copy(t, this, Time);
		l = t.loc;
		if (l === ($ptrType(Location)).nil || l === localLoc) {
			l = l.get();
		}
		sec = (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
		if (!(l === utcLoc)) {
			if (!(l.cacheZone === ($ptrType(zone)).nil) && (x$1 = l.cacheStart, (x$1.$high < sec.$high || (x$1.$high === sec.$high && x$1.$low <= sec.$low))) && (x$2 = l.cacheEnd, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
				name = l.cacheZone.name;
				offset = l.cacheZone.offset;
			} else {
				_tuple$1 = l.lookup(sec); name = _tuple$1[0]; offset = _tuple$1[1];
			}
			sec = (x$3 = new $Int64(0, offset), new $Int64(sec.$high + x$3.$high, sec.$low + x$3.$low));
		} else {
			name = "UTC";
		}
		abs = (x$4 = new $Int64(sec.$high + 2147483646, sec.$low + 450480384), new $Uint64(x$4.$high, x$4.$low));
		return [name, offset, abs];
	};
	Time.prototype.locabs = function() { return this.$val.locabs(); };
	Time.Ptr.prototype.Date = function() {
		var year = 0, month = 0, day = 0, t, _tuple$1;
		t = new Time.Ptr(); $copy(t, this, Time);
		_tuple$1 = t.date(true); year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2];
		return [year, month, day];
	};
	Time.prototype.Date = function() { return this.$val.Date(); };
	Time.Ptr.prototype.Year = function() {
		var t, _tuple$1, year;
		t = new Time.Ptr(); $copy(t, this, Time);
		_tuple$1 = t.date(false); year = _tuple$1[0];
		return year;
	};
	Time.prototype.Year = function() { return this.$val.Year(); };
	Time.Ptr.prototype.Month = function() {
		var t, _tuple$1, month;
		t = new Time.Ptr(); $copy(t, this, Time);
		_tuple$1 = t.date(true); month = _tuple$1[1];
		return month;
	};
	Time.prototype.Month = function() { return this.$val.Month(); };
	Time.Ptr.prototype.Day = function() {
		var t, _tuple$1, day;
		t = new Time.Ptr(); $copy(t, this, Time);
		_tuple$1 = t.date(true); day = _tuple$1[2];
		return day;
	};
	Time.prototype.Day = function() { return this.$val.Day(); };
	Time.Ptr.prototype.Weekday = function() {
		var t;
		t = new Time.Ptr(); $copy(t, this, Time);
		return absWeekday(t.abs());
	};
	Time.prototype.Weekday = function() { return this.$val.Weekday(); };
	absWeekday = function(abs) {
		var sec, _q;
		sec = $div64((new $Uint64(abs.$high + 0, abs.$low + 86400)), new $Uint64(0, 604800), true);
		return ((_q = (sec.$low >> 0) / 86400, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
	};
	Time.Ptr.prototype.ISOWeek = function() {
		var year = 0, week = 0, t, _tuple$1, month, day, yday, _r, wday, _q, _r$1, jan1wday, _r$2, dec31wday;
		t = new Time.Ptr(); $copy(t, this, Time);
		_tuple$1 = t.date(true); year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2]; yday = _tuple$1[3];
		wday = (_r = ((t.Weekday() + 6 >> 0) >> 0) % 7, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		week = (_q = (((yday - wday >> 0) + 7 >> 0)) / 7, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		jan1wday = (_r$1 = (((wday - yday >> 0) + 371 >> 0)) % 7, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
		if (1 <= jan1wday && jan1wday <= 3) {
			week = week + (1) >> 0;
		}
		if (week === 0) {
			year = year - (1) >> 0;
			week = 52;
			if ((jan1wday === 4) || ((jan1wday === 5) && isLeap(year))) {
				week = week + (1) >> 0;
			}
		}
		if ((month === 12) && day >= 29 && wday < 3) {
			dec31wday = (_r$2 = (((wday + 31 >> 0) - day >> 0)) % 7, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero"));
			if (0 <= dec31wday && dec31wday <= 2) {
				year = year + (1) >> 0;
				week = 1;
			}
		}
		return [year, week];
	};
	Time.prototype.ISOWeek = function() { return this.$val.ISOWeek(); };
	Time.Ptr.prototype.Clock = function() {
		var hour = 0, min = 0, sec = 0, t, _tuple$1;
		t = new Time.Ptr(); $copy(t, this, Time);
		_tuple$1 = absClock(t.abs()); hour = _tuple$1[0]; min = _tuple$1[1]; sec = _tuple$1[2];
		return [hour, min, sec];
	};
	Time.prototype.Clock = function() { return this.$val.Clock(); };
	absClock = function(abs) {
		var hour = 0, min = 0, sec = 0, _q, _q$1;
		sec = ($div64(abs, new $Uint64(0, 86400), true).$low >> 0);
		hour = (_q = sec / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (((((hour >>> 16 << 16) * 3600 >> 0) + (hour << 16 >>> 16) * 3600) >> 0)) >> 0;
		min = (_q$1 = sec / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		sec = sec - (((((min >>> 16 << 16) * 60 >> 0) + (min << 16 >>> 16) * 60) >> 0)) >> 0;
		return [hour, min, sec];
	};
	Time.Ptr.prototype.Hour = function() {
		var t, _q;
		t = new Time.Ptr(); $copy(t, this, Time);
		return (_q = ($div64(t.abs(), new $Uint64(0, 86400), true).$low >> 0) / 3600, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
	};
	Time.prototype.Hour = function() { return this.$val.Hour(); };
	Time.Ptr.prototype.Minute = function() {
		var t, _q;
		t = new Time.Ptr(); $copy(t, this, Time);
		return (_q = ($div64(t.abs(), new $Uint64(0, 3600), true).$low >> 0) / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
	};
	Time.prototype.Minute = function() { return this.$val.Minute(); };
	Time.Ptr.prototype.Second = function() {
		var t;
		t = new Time.Ptr(); $copy(t, this, Time);
		return ($div64(t.abs(), new $Uint64(0, 60), true).$low >> 0);
	};
	Time.prototype.Second = function() { return this.$val.Second(); };
	Time.Ptr.prototype.Nanosecond = function() {
		var t;
		t = new Time.Ptr(); $copy(t, this, Time);
		return (t.nsec >> 0);
	};
	Time.prototype.Nanosecond = function() { return this.$val.Nanosecond(); };
	Time.Ptr.prototype.YearDay = function() {
		var t, _tuple$1, yday;
		t = new Time.Ptr(); $copy(t, this, Time);
		_tuple$1 = t.date(false); yday = _tuple$1[3];
		return yday + 1 >> 0;
	};
	Time.prototype.YearDay = function() { return this.$val.YearDay(); };
	Duration.prototype.String = function() {
		var d, buf, w, u, neg, prec, unit, x, _tuple$1, _tuple$2;
		d = this;
		buf = ($arrayType($Uint8, 32)).zero(); $copy(buf, ($arrayType($Uint8, 32)).zero(), ($arrayType($Uint8, 32)));
		w = 32;
		u = new $Uint64(d.$high, d.$low);
		neg = (d.$high < 0 || (d.$high === 0 && d.$low < 0));
		if (neg) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000000))) {
			prec = 0;
			unit = 0;
			if ((u.$high === 0 && u.$low === 0)) {
				return "0";
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000))) {
				prec = 0;
				unit = 110;
			} else if ((u.$high < 0 || (u.$high === 0 && u.$low < 1000000))) {
				prec = 3;
				unit = 117;
			} else {
				prec = 6;
				unit = 109;
			}
			w = w - (2) >> 0;
			(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = unit;
			(x = w + 1 >> 0, (x < 0 || x >= buf.length) ? $throwRuntimeError("index out of range") : buf[x] = 115);
			_tuple$1 = fmtFrac($subslice(new ($sliceType($Uint8))(buf), 0, w), u, prec); w = _tuple$1[0]; u = _tuple$1[1];
			w = fmtInt($subslice(new ($sliceType($Uint8))(buf), 0, w), u);
		} else {
			w = w - (1) >> 0;
			(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 115;
			_tuple$2 = fmtFrac($subslice(new ($sliceType($Uint8))(buf), 0, w), u, 9); w = _tuple$2[0]; u = _tuple$2[1];
			w = fmtInt($subslice(new ($sliceType($Uint8))(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
			u = $div64(u, (new $Uint64(0, 60)), false);
			if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
				w = w - (1) >> 0;
				(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 109;
				w = fmtInt($subslice(new ($sliceType($Uint8))(buf), 0, w), $div64(u, new $Uint64(0, 60), true));
				u = $div64(u, (new $Uint64(0, 60)), false);
				if ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
					w = w - (1) >> 0;
					(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 104;
					w = fmtInt($subslice(new ($sliceType($Uint8))(buf), 0, w), u);
				}
			}
		}
		if (neg) {
			w = w - (1) >> 0;
			(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45;
		}
		return $bytesToString($subslice(new ($sliceType($Uint8))(buf), w));
	};
	$ptrType(Duration).prototype.String = function() { return this.$get().String(); };
	fmtFrac = function(buf, v, prec) {
		var nw = 0, nv = new $Uint64(0, 0), w, print, i, digit, _tmp, _tmp$1;
		w = buf.$length;
		print = false;
		i = 0;
		while (i < prec) {
			digit = $div64(v, new $Uint64(0, 10), true);
			print = print || !((digit.$high === 0 && digit.$low === 0));
			if (print) {
				w = w - (1) >> 0;
				(w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = (digit.$low << 24 >>> 24) + 48 << 24 >>> 24;
			}
			v = $div64(v, (new $Uint64(0, 10)), false);
			i = i + (1) >> 0;
		}
		if (print) {
			w = w - (1) >> 0;
			(w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 46;
		}
		_tmp = w; _tmp$1 = v; nw = _tmp; nv = _tmp$1;
		return [nw, nv];
	};
	fmtInt = function(buf, v) {
		var w;
		w = buf.$length;
		if ((v.$high === 0 && v.$low === 0)) {
			w = w - (1) >> 0;
			(w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = 48;
		} else {
			while ((v.$high > 0 || (v.$high === 0 && v.$low > 0))) {
				w = w - (1) >> 0;
				(w < 0 || w >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + w] = ($div64(v, new $Uint64(0, 10), true).$low << 24 >>> 24) + 48 << 24 >>> 24;
				v = $div64(v, (new $Uint64(0, 10)), false);
			}
		}
		return w;
	};
	Duration.prototype.Nanoseconds = function() {
		var d;
		d = this;
		return new $Int64(d.$high, d.$low);
	};
	$ptrType(Duration).prototype.Nanoseconds = function() { return this.$get().Nanoseconds(); };
	Duration.prototype.Seconds = function() {
		var d, sec, nsec;
		d = this;
		sec = $div64(d, new Duration(0, 1000000000), false);
		nsec = $div64(d, new Duration(0, 1000000000), true);
		return $flatten64(sec) + $flatten64(nsec) * 1e-09;
	};
	$ptrType(Duration).prototype.Seconds = function() { return this.$get().Seconds(); };
	Duration.prototype.Minutes = function() {
		var d, min, nsec;
		d = this;
		min = $div64(d, new Duration(13, 4165425152), false);
		nsec = $div64(d, new Duration(13, 4165425152), true);
		return $flatten64(min) + $flatten64(nsec) * 1.6666666666666667e-11;
	};
	$ptrType(Duration).prototype.Minutes = function() { return this.$get().Minutes(); };
	Duration.prototype.Hours = function() {
		var d, hour, nsec;
		d = this;
		hour = $div64(d, new Duration(838, 817405952), false);
		nsec = $div64(d, new Duration(838, 817405952), true);
		return $flatten64(hour) + $flatten64(nsec) * 2.777777777777778e-13;
	};
	$ptrType(Duration).prototype.Hours = function() { return this.$get().Hours(); };
	Time.Ptr.prototype.Add = function(d) {
		var t, x, x$1, x$2, x$3, nsec, x$4, x$5, x$6, x$7;
		t = new Time.Ptr(); $copy(t, this, Time);
		t.sec = (x = t.sec, x$1 = (x$2 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$2.$high, x$2.$low)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		nsec = (t.nsec >> 0) + ((x$3 = $div64(d, new Duration(0, 1000000000), true), x$3.$low + ((x$3.$high >> 31) * 4294967296)) >> 0) >> 0;
		if (nsec >= 1000000000) {
			t.sec = (x$4 = t.sec, x$5 = new $Int64(0, 1), new $Int64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
			nsec = nsec - (1000000000) >> 0;
		} else if (nsec < 0) {
			t.sec = (x$6 = t.sec, x$7 = new $Int64(0, 1), new $Int64(x$6.$high - x$7.$high, x$6.$low - x$7.$low));
			nsec = nsec + (1000000000) >> 0;
		}
		t.nsec = (nsec >>> 0);
		return t;
	};
	Time.prototype.Add = function(d) { return this.$val.Add(d); };
	Time.Ptr.prototype.Sub = function(u) {
		var t, x, x$1, x$2, x$3, x$4, d;
		t = new Time.Ptr(); $copy(t, this, Time);
		d = (x = $mul64((x$1 = (x$2 = t.sec, x$3 = u.sec, new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low)), new Duration(x$1.$high, x$1.$low)), new Duration(0, 1000000000)), x$4 = new Duration(0, ((t.nsec >> 0) - (u.nsec >> 0) >> 0)), new Duration(x.$high + x$4.$high, x.$low + x$4.$low));
		if (u.Add(d).Equal($clone(t, Time))) {
			return d;
		} else if (t.Before($clone(u, Time))) {
			return new Duration(-2147483648, 0);
		} else {
			return new Duration(2147483647, 4294967295);
		}
	};
	Time.prototype.Sub = function(u) { return this.$val.Sub(u); };
	Time.Ptr.prototype.AddDate = function(years, months$1, days$1) {
		var t, _tuple$1, year, month, day, _tuple$2, hour, min, sec;
		t = new Time.Ptr(); $copy(t, this, Time);
		_tuple$1 = t.Date(); year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2];
		_tuple$2 = t.Clock(); hour = _tuple$2[0]; min = _tuple$2[1]; sec = _tuple$2[2];
		return Date(year + years >> 0, month + (months$1 >> 0) >> 0, day + days$1 >> 0, hour, min, sec, (t.nsec >> 0), t.loc);
	};
	Time.prototype.AddDate = function(years, months$1, days$1) { return this.$val.AddDate(years, months$1, days$1); };
	Time.Ptr.prototype.date = function(full) {
		var year = 0, month = 0, day = 0, yday = 0, t, _tuple$1;
		t = new Time.Ptr(); $copy(t, this, Time);
		_tuple$1 = absDate(t.abs(), full); year = _tuple$1[0]; month = _tuple$1[1]; day = _tuple$1[2]; yday = _tuple$1[3];
		return [year, month, day, yday];
	};
	Time.prototype.date = function(full) { return this.$val.date(full); };
	absDate = function(abs, full) {
		var year = 0, month = 0, day = 0, yday = 0, d, n, y, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x$10, _q, x$11, end, begin;
		d = $div64(abs, new $Uint64(0, 86400), false);
		n = $div64(d, new $Uint64(0, 146097), false);
		y = $mul64(new $Uint64(0, 400), n);
		d = (x = $mul64(new $Uint64(0, 146097), n), new $Uint64(d.$high - x.$high, d.$low - x.$low));
		n = $div64(d, new $Uint64(0, 36524), false);
		n = (x$1 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$1.$high, n.$low - x$1.$low));
		y = (x$2 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high + x$2.$high, y.$low + x$2.$low));
		d = (x$3 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high - x$3.$high, d.$low - x$3.$low));
		n = $div64(d, new $Uint64(0, 1461), false);
		y = (x$4 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high + x$4.$high, y.$low + x$4.$low));
		d = (x$5 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high - x$5.$high, d.$low - x$5.$low));
		n = $div64(d, new $Uint64(0, 365), false);
		n = (x$6 = $shiftRightUint64(n, 2), new $Uint64(n.$high - x$6.$high, n.$low - x$6.$low));
		y = (x$7 = n, new $Uint64(y.$high + x$7.$high, y.$low + x$7.$low));
		d = (x$8 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high - x$8.$high, d.$low - x$8.$low));
		year = ((x$9 = (x$10 = new $Int64(y.$high, y.$low), new $Int64(x$10.$high + -69, x$10.$low + 4075721025)), x$9.$low + ((x$9.$high >> 31) * 4294967296)) >> 0);
		yday = (d.$low >> 0);
		if (!full) {
			return [year, month, day, yday];
		}
		day = yday;
		if (isLeap(year)) {
			if (day > 59) {
				day = day - (1) >> 0;
			} else if (day === 59) {
				month = 2;
				day = 29;
				return [year, month, day, yday];
			}
		}
		month = ((_q = day / 31, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
		end = ((x$11 = month + 1 >> 0, ((x$11 < 0 || x$11 >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[x$11])) >> 0);
		begin = 0;
		if (day >= end) {
			month = month + (1) >> 0;
			begin = end;
		} else {
			begin = (((month < 0 || month >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[month]) >> 0);
		}
		month = month + (1) >> 0;
		day = (day - begin >> 0) + 1 >> 0;
		return [year, month, day, yday];
	};
	Now = $pkg.Now = function() {
		var _tuple$1, sec, nsec;
		_tuple$1 = now(); sec = _tuple$1[0]; nsec = _tuple$1[1];
		return new Time.Ptr(new $Int64(sec.$high + 14, sec.$low + 2006054656), (nsec >>> 0), $pkg.Local);
	};
	Time.Ptr.prototype.UTC = function() {
		var t;
		t = new Time.Ptr(); $copy(t, this, Time);
		t.loc = $pkg.UTC;
		return t;
	};
	Time.prototype.UTC = function() { return this.$val.UTC(); };
	Time.Ptr.prototype.Local = function() {
		var t;
		t = new Time.Ptr(); $copy(t, this, Time);
		t.loc = $pkg.Local;
		return t;
	};
	Time.prototype.Local = function() { return this.$val.Local(); };
	Time.Ptr.prototype.In = function(loc) {
		var t;
		t = new Time.Ptr(); $copy(t, this, Time);
		if (loc === ($ptrType(Location)).nil) {
			$panic(new $String("time: missing Location in call to Time.In"));
		}
		t.loc = loc;
		return t;
	};
	Time.prototype.In = function(loc) { return this.$val.In(loc); };
	Time.Ptr.prototype.Location = function() {
		var t, l;
		t = new Time.Ptr(); $copy(t, this, Time);
		l = t.loc;
		if (l === ($ptrType(Location)).nil) {
			l = $pkg.UTC;
		}
		return l;
	};
	Time.prototype.Location = function() { return this.$val.Location(); };
	Time.Ptr.prototype.Zone = function() {
		var name = "", offset = 0, t, _tuple$1, x;
		t = new Time.Ptr(); $copy(t, this, Time);
		_tuple$1 = t.loc.lookup((x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640))); name = _tuple$1[0]; offset = _tuple$1[1];
		return [name, offset];
	};
	Time.prototype.Zone = function() { return this.$val.Zone(); };
	Time.Ptr.prototype.Unix = function() {
		var t, x;
		t = new Time.Ptr(); $copy(t, this, Time);
		return (x = t.sec, new $Int64(x.$high + -15, x.$low + 2288912640));
	};
	Time.prototype.Unix = function() { return this.$val.Unix(); };
	Time.Ptr.prototype.UnixNano = function() {
		var t, x, x$1, x$2, x$3;
		t = new Time.Ptr(); $copy(t, this, Time);
		return (x = $mul64(((x$1 = t.sec, new $Int64(x$1.$high + -15, x$1.$low + 2288912640))), new $Int64(0, 1000000000)), x$2 = (x$3 = t.nsec, new $Int64(0, x$3.constructor === Number ? x$3 : 1)), new $Int64(x.$high + x$2.$high, x.$low + x$2.$low));
	};
	Time.prototype.UnixNano = function() { return this.$val.UnixNano(); };
	Time.Ptr.prototype.MarshalBinary = function() {
		var t, offsetMin, _tuple$1, offset, _r, _q, enc;
		t = new Time.Ptr(); $copy(t, this, Time);
		offsetMin = 0;
		if (t.Location() === utcLoc) {
			offsetMin = -1;
		} else {
			_tuple$1 = t.Zone(); offset = _tuple$1[1];
			if (!(((_r = offset % 60, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0))) {
				return [($sliceType($Uint8)).nil, errors.New("Time.MarshalBinary: zone offset has fractional minute")];
			}
			offset = (_q = offset / (60), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			if (offset < -32768 || (offset === -1) || offset > 32767) {
				return [($sliceType($Uint8)).nil, errors.New("Time.MarshalBinary: unexpected zone offset")];
			}
			offsetMin = (offset << 16 >> 16);
		}
		enc = new ($sliceType($Uint8))([1, ($shiftRightInt64(t.sec, 56).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 48).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 40).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 32).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 24).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 16).$low << 24 >>> 24), ($shiftRightInt64(t.sec, 8).$low << 24 >>> 24), (t.sec.$low << 24 >>> 24), ((t.nsec >>> 24 >>> 0) << 24 >>> 24), ((t.nsec >>> 16 >>> 0) << 24 >>> 24), ((t.nsec >>> 8 >>> 0) << 24 >>> 24), (t.nsec << 24 >>> 24), ((offsetMin >> 8 << 16 >> 16) << 24 >>> 24), (offsetMin << 24 >>> 24)]);
		return [enc, $ifaceNil];
	};
	Time.prototype.MarshalBinary = function() { return this.$val.MarshalBinary(); };
	Time.Ptr.prototype.UnmarshalBinary = function(data$1) {
		var t, buf, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x$10, x$11, x$12, x$13, x$14, offset, _tuple$1, x$15, localoff;
		t = this;
		buf = data$1;
		if (buf.$length === 0) {
			return errors.New("Time.UnmarshalBinary: no data");
		}
		if (!((((0 < 0 || 0 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) === 1))) {
			return errors.New("Time.UnmarshalBinary: unsupported version");
		}
		if (!((buf.$length === 15))) {
			return errors.New("Time.UnmarshalBinary: invalid length");
		}
		buf = $subslice(buf, 1);
		t.sec = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = new $Int64(0, ((7 < 0 || 7 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 7])), x$7 = $shiftLeft64(new $Int64(0, ((6 < 0 || 6 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 6])), 8), new $Int64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64(new $Int64(0, ((5 < 0 || 5 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 5])), 16), new $Int64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64(new $Int64(0, ((4 < 0 || 4 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 4])), 24), new $Int64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64(new $Int64(0, ((3 < 0 || 3 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 3])), 32), new $Int64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64(new $Int64(0, ((2 < 0 || 2 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 2])), 40), new $Int64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64(new $Int64(0, ((1 < 0 || 1 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1])), 48), new $Int64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64(new $Int64(0, ((0 < 0 || 0 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0])), 56), new $Int64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
		buf = $subslice(buf, 8);
		t.nsec = (((((((3 < 0 || 3 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 3]) >> 0) | ((((2 < 0 || 2 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 2]) >> 0) << 8 >> 0)) | ((((1 < 0 || 1 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1]) >> 0) << 16 >> 0)) | ((((0 < 0 || 0 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) >> 0) << 24 >> 0)) >>> 0);
		buf = $subslice(buf, 4);
		offset = (x$14 = (((((1 < 0 || 1 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 1]) << 16 >> 16) | ((((0 < 0 || 0 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]) << 16 >> 16) << 8 << 16 >> 16)) >> 0), (((x$14 >>> 16 << 16) * 60 >> 0) + (x$14 << 16 >>> 16) * 60) >> 0);
		if (offset === -60) {
			t.loc = utcLoc;
		} else {
			_tuple$1 = $pkg.Local.lookup((x$15 = t.sec, new $Int64(x$15.$high + -15, x$15.$low + 2288912640))); localoff = _tuple$1[1];
			if (offset === localoff) {
				t.loc = $pkg.Local;
			} else {
				t.loc = FixedZone("", offset);
			}
		}
		return $ifaceNil;
	};
	Time.prototype.UnmarshalBinary = function(data$1) { return this.$val.UnmarshalBinary(data$1); };
	Time.Ptr.prototype.GobEncode = function() {
		var t;
		t = new Time.Ptr(); $copy(t, this, Time);
		return t.MarshalBinary();
	};
	Time.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Time.Ptr.prototype.GobDecode = function(data$1) {
		var t;
		t = this;
		return t.UnmarshalBinary(data$1);
	};
	Time.prototype.GobDecode = function(data$1) { return this.$val.GobDecode(data$1); };
	Time.Ptr.prototype.MarshalJSON = function() {
		var t, y;
		t = new Time.Ptr(); $copy(t, this, Time);
		y = t.Year();
		if (y < 0 || y >= 10000) {
			return [($sliceType($Uint8)).nil, errors.New("Time.MarshalJSON: year outside of range [0,9999]")];
		}
		return [new ($sliceType($Uint8))($stringToBytes(t.Format("\"2006-01-02T15:04:05.999999999Z07:00\""))), $ifaceNil];
	};
	Time.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
	Time.Ptr.prototype.UnmarshalJSON = function(data$1) {
		var err = $ifaceNil, t, _tuple$1;
		t = this;
		_tuple$1 = Parse("\"2006-01-02T15:04:05Z07:00\"", $bytesToString(data$1)); $copy(t, _tuple$1[0], Time); err = _tuple$1[1];
		return err;
	};
	Time.prototype.UnmarshalJSON = function(data$1) { return this.$val.UnmarshalJSON(data$1); };
	Time.Ptr.prototype.MarshalText = function() {
		var t, y;
		t = new Time.Ptr(); $copy(t, this, Time);
		y = t.Year();
		if (y < 0 || y >= 10000) {
			return [($sliceType($Uint8)).nil, errors.New("Time.MarshalText: year outside of range [0,9999]")];
		}
		return [new ($sliceType($Uint8))($stringToBytes(t.Format("2006-01-02T15:04:05.999999999Z07:00"))), $ifaceNil];
	};
	Time.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Time.Ptr.prototype.UnmarshalText = function(data$1) {
		var err = $ifaceNil, t, _tuple$1;
		t = this;
		_tuple$1 = Parse("2006-01-02T15:04:05Z07:00", $bytesToString(data$1)); $copy(t, _tuple$1[0], Time); err = _tuple$1[1];
		return err;
	};
	Time.prototype.UnmarshalText = function(data$1) { return this.$val.UnmarshalText(data$1); };
	Unix = $pkg.Unix = function(sec, nsec) {
		var n, x, x$1, x$2, x$3;
		if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0)) || (nsec.$high > 0 || (nsec.$high === 0 && nsec.$low >= 1000000000))) {
			n = $div64(nsec, new $Int64(0, 1000000000), false);
			sec = (x = n, new $Int64(sec.$high + x.$high, sec.$low + x.$low));
			nsec = (x$1 = $mul64(n, new $Int64(0, 1000000000)), new $Int64(nsec.$high - x$1.$high, nsec.$low - x$1.$low));
			if ((nsec.$high < 0 || (nsec.$high === 0 && nsec.$low < 0))) {
				nsec = (x$2 = new $Int64(0, 1000000000), new $Int64(nsec.$high + x$2.$high, nsec.$low + x$2.$low));
				sec = (x$3 = new $Int64(0, 1), new $Int64(sec.$high - x$3.$high, sec.$low - x$3.$low));
			}
		}
		return new Time.Ptr(new $Int64(sec.$high + 14, sec.$low + 2006054656), (nsec.$low >>> 0), $pkg.Local);
	};
	isLeap = function(year) {
		var _r, _r$1, _r$2;
		return ((_r = year % 4, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0) && (!(((_r$1 = year % 100, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0)) || ((_r$2 = year % 400, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0));
	};
	norm = function(hi, lo, base) {
		var nhi = 0, nlo = 0, _q, n, _q$1, n$1, _tmp, _tmp$1;
		if (lo < 0) {
			n = (_q = ((-lo - 1 >> 0)) / base, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 1 >> 0;
			hi = hi - (n) >> 0;
			lo = lo + (((((n >>> 16 << 16) * base >> 0) + (n << 16 >>> 16) * base) >> 0)) >> 0;
		}
		if (lo >= base) {
			n$1 = (_q$1 = lo / base, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			hi = hi + (n$1) >> 0;
			lo = lo - (((((n$1 >>> 16 << 16) * base >> 0) + (n$1 << 16 >>> 16) * base) >> 0)) >> 0;
		}
		_tmp = hi; _tmp$1 = lo; nhi = _tmp; nlo = _tmp$1;
		return [nhi, nlo];
	};
	Date = $pkg.Date = function(year, month, day, hour, min, sec, nsec, loc) {
		var m, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, x, x$1, y, n, x$2, d, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x$10, x$11, abs, x$12, x$13, unix, _tuple$6, offset, start, end, x$14, utc, _tuple$7, _tuple$8, x$15;
		if (loc === ($ptrType(Location)).nil) {
			$panic(new $String("time: missing Location in call to Date"));
		}
		m = (month >> 0) - 1 >> 0;
		_tuple$1 = norm(year, m, 12); year = _tuple$1[0]; m = _tuple$1[1];
		month = (m >> 0) + 1 >> 0;
		_tuple$2 = norm(sec, nsec, 1000000000); sec = _tuple$2[0]; nsec = _tuple$2[1];
		_tuple$3 = norm(min, sec, 60); min = _tuple$3[0]; sec = _tuple$3[1];
		_tuple$4 = norm(hour, min, 60); hour = _tuple$4[0]; min = _tuple$4[1];
		_tuple$5 = norm(day, hour, 24); day = _tuple$5[0]; hour = _tuple$5[1];
		y = (x = (x$1 = new $Int64(0, year), new $Int64(x$1.$high - -69, x$1.$low - 4075721025)), new $Uint64(x.$high, x.$low));
		n = $div64(y, new $Uint64(0, 400), false);
		y = (x$2 = $mul64(new $Uint64(0, 400), n), new $Uint64(y.$high - x$2.$high, y.$low - x$2.$low));
		d = $mul64(new $Uint64(0, 146097), n);
		n = $div64(y, new $Uint64(0, 100), false);
		y = (x$3 = $mul64(new $Uint64(0, 100), n), new $Uint64(y.$high - x$3.$high, y.$low - x$3.$low));
		d = (x$4 = $mul64(new $Uint64(0, 36524), n), new $Uint64(d.$high + x$4.$high, d.$low + x$4.$low));
		n = $div64(y, new $Uint64(0, 4), false);
		y = (x$5 = $mul64(new $Uint64(0, 4), n), new $Uint64(y.$high - x$5.$high, y.$low - x$5.$low));
		d = (x$6 = $mul64(new $Uint64(0, 1461), n), new $Uint64(d.$high + x$6.$high, d.$low + x$6.$low));
		n = y;
		d = (x$7 = $mul64(new $Uint64(0, 365), n), new $Uint64(d.$high + x$7.$high, d.$low + x$7.$low));
		d = (x$8 = new $Uint64(0, (x$9 = month - 1 >> 0, ((x$9 < 0 || x$9 >= daysBefore.length) ? $throwRuntimeError("index out of range") : daysBefore[x$9]))), new $Uint64(d.$high + x$8.$high, d.$low + x$8.$low));
		if (isLeap(year) && month >= 3) {
			d = (x$10 = new $Uint64(0, 1), new $Uint64(d.$high + x$10.$high, d.$low + x$10.$low));
		}
		d = (x$11 = new $Uint64(0, (day - 1 >> 0)), new $Uint64(d.$high + x$11.$high, d.$low + x$11.$low));
		abs = $mul64(d, new $Uint64(0, 86400));
		abs = (x$12 = new $Uint64(0, ((((((hour >>> 16 << 16) * 3600 >> 0) + (hour << 16 >>> 16) * 3600) >> 0) + ((((min >>> 16 << 16) * 60 >> 0) + (min << 16 >>> 16) * 60) >> 0) >> 0) + sec >> 0)), new $Uint64(abs.$high + x$12.$high, abs.$low + x$12.$low));
		unix = (x$13 = new $Int64(abs.$high, abs.$low), new $Int64(x$13.$high + -2147483647, x$13.$low + 3844486912));
		_tuple$6 = loc.lookup(unix); offset = _tuple$6[1]; start = _tuple$6[3]; end = _tuple$6[4];
		if (!((offset === 0))) {
			utc = (x$14 = new $Int64(0, offset), new $Int64(unix.$high - x$14.$high, unix.$low - x$14.$low));
			if ((utc.$high < start.$high || (utc.$high === start.$high && utc.$low < start.$low))) {
				_tuple$7 = loc.lookup(new $Int64(start.$high - 0, start.$low - 1)); offset = _tuple$7[1];
			} else if ((utc.$high > end.$high || (utc.$high === end.$high && utc.$low >= end.$low))) {
				_tuple$8 = loc.lookup(end); offset = _tuple$8[1];
			}
			unix = (x$15 = new $Int64(0, offset), new $Int64(unix.$high - x$15.$high, unix.$low - x$15.$low));
		}
		return new Time.Ptr(new $Int64(unix.$high + 14, unix.$low + 2006054656), (nsec >>> 0), loc);
	};
	Time.Ptr.prototype.Truncate = function(d) {
		var t, _tuple$1, r;
		t = new Time.Ptr(); $copy(t, this, Time);
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple$1 = div($clone(t, Time), d); r = _tuple$1[1];
		return t.Add(new Duration(-r.$high, -r.$low));
	};
	Time.prototype.Truncate = function(d) { return this.$val.Truncate(d); };
	Time.Ptr.prototype.Round = function(d) {
		var t, _tuple$1, r, x;
		t = new Time.Ptr(); $copy(t, this, Time);
		if ((d.$high < 0 || (d.$high === 0 && d.$low <= 0))) {
			return t;
		}
		_tuple$1 = div($clone(t, Time), d); r = _tuple$1[1];
		if ((x = new Duration(r.$high + r.$high, r.$low + r.$low), (x.$high < d.$high || (x.$high === d.$high && x.$low < d.$low)))) {
			return t.Add(new Duration(-r.$high, -r.$low));
		}
		return t.Add(new Duration(d.$high - r.$high, d.$low - r.$low));
	};
	Time.prototype.Round = function(d) { return this.$val.Round(d); };
	div = function(t, d) {
		var qmod2 = 0, r = new Duration(0, 0), neg, nsec, x, x$1, x$2, x$3, x$4, x$5, _q, _r, x$6, d1, x$7, x$8, x$9, x$10, x$11, sec, tmp, u1, u0, _tmp, _tmp$1, u0x, x$12, _tmp$2, _tmp$3, x$13, x$14, d1$1, x$15, d0, _tmp$4, _tmp$5, x$16, x$17, x$18, x$19;
		neg = false;
		nsec = (t.nsec >> 0);
		if ((x = t.sec, (x.$high < 0 || (x.$high === 0 && x.$low < 0)))) {
			neg = true;
			t.sec = (x$1 = t.sec, new $Int64(-x$1.$high, -x$1.$low));
			nsec = -nsec;
			if (nsec < 0) {
				nsec = nsec + (1000000000) >> 0;
				t.sec = (x$2 = t.sec, x$3 = new $Int64(0, 1), new $Int64(x$2.$high - x$3.$high, x$2.$low - x$3.$low));
			}
		}
		if ((d.$high < 0 || (d.$high === 0 && d.$low < 1000000000)) && (x$4 = $div64(new Duration(0, 1000000000), (new Duration(d.$high + d.$high, d.$low + d.$low)), true), (x$4.$high === 0 && x$4.$low === 0))) {
			qmod2 = ((_q = nsec / ((d.$low + ((d.$high >> 31) * 4294967296)) >> 0), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) & 1;
			r = new Duration(0, (_r = nsec % ((d.$low + ((d.$high >> 31) * 4294967296)) >> 0), _r === _r ? _r : $throwRuntimeError("integer divide by zero")));
		} else if ((x$5 = $div64(d, new Duration(0, 1000000000), true), (x$5.$high === 0 && x$5.$low === 0))) {
			d1 = (x$6 = $div64(d, new Duration(0, 1000000000), false), new $Int64(x$6.$high, x$6.$low));
			qmod2 = ((x$7 = $div64(t.sec, d1, false), x$7.$low + ((x$7.$high >> 31) * 4294967296)) >> 0) & 1;
			r = (x$8 = $mul64((x$9 = $div64(t.sec, d1, true), new Duration(x$9.$high, x$9.$low)), new Duration(0, 1000000000)), x$10 = new Duration(0, nsec), new Duration(x$8.$high + x$10.$high, x$8.$low + x$10.$low));
		} else {
			sec = (x$11 = t.sec, new $Uint64(x$11.$high, x$11.$low));
			tmp = $mul64(($shiftRightUint64(sec, 32)), new $Uint64(0, 1000000000));
			u1 = $shiftRightUint64(tmp, 32);
			u0 = $shiftLeft64(tmp, 32);
			tmp = $mul64(new $Uint64(sec.$high & 0, (sec.$low & 4294967295) >>> 0), new $Uint64(0, 1000000000));
			_tmp = u0; _tmp$1 = new $Uint64(u0.$high + tmp.$high, u0.$low + tmp.$low); u0x = _tmp; u0 = _tmp$1;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$12 = new $Uint64(0, 1), new $Uint64(u1.$high + x$12.$high, u1.$low + x$12.$low));
			}
			_tmp$2 = u0; _tmp$3 = (x$13 = new $Uint64(0, nsec), new $Uint64(u0.$high + x$13.$high, u0.$low + x$13.$low)); u0x = _tmp$2; u0 = _tmp$3;
			if ((u0.$high < u0x.$high || (u0.$high === u0x.$high && u0.$low < u0x.$low))) {
				u1 = (x$14 = new $Uint64(0, 1), new $Uint64(u1.$high + x$14.$high, u1.$low + x$14.$low));
			}
			d1$1 = new $Uint64(d.$high, d.$low);
			while (!((x$15 = $shiftRightUint64(d1$1, 63), (x$15.$high === 0 && x$15.$low === 1)))) {
				d1$1 = $shiftLeft64(d1$1, (1));
			}
			d0 = new $Uint64(0, 0);
			while (true) {
				qmod2 = 0;
				if ((u1.$high > d1$1.$high || (u1.$high === d1$1.$high && u1.$low > d1$1.$low)) || (u1.$high === d1$1.$high && u1.$low === d1$1.$low) && (u0.$high > d0.$high || (u0.$high === d0.$high && u0.$low >= d0.$low))) {
					qmod2 = 1;
					_tmp$4 = u0; _tmp$5 = new $Uint64(u0.$high - d0.$high, u0.$low - d0.$low); u0x = _tmp$4; u0 = _tmp$5;
					if ((u0.$high > u0x.$high || (u0.$high === u0x.$high && u0.$low > u0x.$low))) {
						u1 = (x$16 = new $Uint64(0, 1), new $Uint64(u1.$high - x$16.$high, u1.$low - x$16.$low));
					}
					u1 = (x$17 = d1$1, new $Uint64(u1.$high - x$17.$high, u1.$low - x$17.$low));
				}
				if ((d1$1.$high === 0 && d1$1.$low === 0) && (x$18 = new $Uint64(d.$high, d.$low), (d0.$high === x$18.$high && d0.$low === x$18.$low))) {
					break;
				}
				d0 = $shiftRightUint64(d0, (1));
				d0 = (x$19 = $shiftLeft64((new $Uint64(d1$1.$high & 0, (d1$1.$low & 1) >>> 0)), 63), new $Uint64(d0.$high | x$19.$high, (d0.$low | x$19.$low) >>> 0));
				d1$1 = $shiftRightUint64(d1$1, (1));
			}
			r = new Duration(u0.$high, u0.$low);
		}
		if (neg && !((r.$high === 0 && r.$low === 0))) {
			qmod2 = (qmod2 ^ (1)) >> 0;
			r = new Duration(d.$high - r.$high, d.$low - r.$low);
		}
		return [qmod2, r];
	};
	Location.Ptr.prototype.get = function() {
		var l;
		l = this;
		if (l === ($ptrType(Location)).nil) {
			return utcLoc;
		}
		if (l === localLoc) {
			localOnce.Do(initLocal);
		}
		return l;
	};
	Location.prototype.get = function() { return this.$val.get(); };
	Location.Ptr.prototype.String = function() {
		var l;
		l = this;
		return l.get().name;
	};
	Location.prototype.String = function() { return this.$val.String(); };
	FixedZone = $pkg.FixedZone = function(name, offset) {
		var l, x;
		l = new Location.Ptr(name, new ($sliceType(zone))([new zone.Ptr(name, offset, false)]), new ($sliceType(zoneTrans))([new zoneTrans.Ptr(new $Int64(-2147483648, 0), 0, false, false)]), new $Int64(-2147483648, 0), new $Int64(2147483647, 4294967295), ($ptrType(zone)).nil);
		l.cacheZone = (x = l.zone, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		return l;
	};
	Location.Ptr.prototype.lookup = function(sec) {
		var name = "", offset = 0, isDST = false, start = new $Int64(0, 0), end = new $Int64(0, 0), l, zone$1, x, x$1, x$2, x$3, x$4, x$5, zone$2, x$6, tx, lo, hi, _q, m, lim, x$7, x$8, zone$3;
		l = this;
		l = l.get();
		if (l.zone.$length === 0) {
			name = "UTC";
			offset = 0;
			isDST = false;
			start = new $Int64(-2147483648, 0);
			end = new $Int64(2147483647, 4294967295);
			return [name, offset, isDST, start, end];
		}
		zone$1 = l.cacheZone;
		if (!(zone$1 === ($ptrType(zone)).nil) && (x = l.cacheStart, (x.$high < sec.$high || (x.$high === sec.$high && x.$low <= sec.$low))) && (x$1 = l.cacheEnd, (sec.$high < x$1.$high || (sec.$high === x$1.$high && sec.$low < x$1.$low)))) {
			name = zone$1.name;
			offset = zone$1.offset;
			isDST = zone$1.isDST;
			start = l.cacheStart;
			end = l.cacheEnd;
			return [name, offset, isDST, start, end];
		}
		if ((l.tx.$length === 0) || (x$2 = (x$3 = l.tx, ((0 < 0 || 0 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])).when, (sec.$high < x$2.$high || (sec.$high === x$2.$high && sec.$low < x$2.$low)))) {
			zone$2 = (x$4 = l.zone, x$5 = l.lookupFirstZone(), ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5]));
			name = zone$2.name;
			offset = zone$2.offset;
			isDST = zone$2.isDST;
			start = new $Int64(-2147483648, 0);
			if (l.tx.$length > 0) {
				end = (x$6 = l.tx, ((0 < 0 || 0 >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + 0])).when;
			} else {
				end = new $Int64(2147483647, 4294967295);
			}
			return [name, offset, isDST, start, end];
		}
		tx = l.tx;
		end = new $Int64(2147483647, 4294967295);
		lo = 0;
		hi = tx.$length;
		while ((hi - lo >> 0) > 1) {
			m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			lim = ((m < 0 || m >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + m]).when;
			if ((sec.$high < lim.$high || (sec.$high === lim.$high && sec.$low < lim.$low))) {
				end = lim;
				hi = m;
			} else {
				lo = m;
			}
		}
		zone$3 = (x$7 = l.zone, x$8 = ((lo < 0 || lo >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + lo]).index, ((x$8 < 0 || x$8 >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + x$8]));
		name = zone$3.name;
		offset = zone$3.offset;
		isDST = zone$3.isDST;
		start = ((lo < 0 || lo >= tx.$length) ? $throwRuntimeError("index out of range") : tx.$array[tx.$offset + lo]).when;
		return [name, offset, isDST, start, end];
	};
	Location.prototype.lookup = function(sec) { return this.$val.lookup(sec); };
	Location.Ptr.prototype.lookupFirstZone = function() {
		var l, x, x$1, x$2, x$3, zi, x$4, _ref, _i, zi$1, x$5;
		l = this;
		if (!l.firstZoneUsed()) {
			return 0;
		}
		if (l.tx.$length > 0 && (x = l.zone, x$1 = (x$2 = l.tx, ((0 < 0 || 0 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0])).index, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])).isDST) {
			zi = ((x$3 = l.tx, ((0 < 0 || 0 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])).index >> 0) - 1 >> 0;
			while (zi >= 0) {
				if (!(x$4 = l.zone, ((zi < 0 || zi >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + zi])).isDST) {
					return zi;
				}
				zi = zi - (1) >> 0;
			}
		}
		_ref = l.zone;
		_i = 0;
		while (_i < _ref.$length) {
			zi$1 = _i;
			if (!(x$5 = l.zone, ((zi$1 < 0 || zi$1 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + zi$1])).isDST) {
				return zi$1;
			}
			_i++;
		}
		return 0;
	};
	Location.prototype.lookupFirstZone = function() { return this.$val.lookupFirstZone(); };
	Location.Ptr.prototype.firstZoneUsed = function() {
		var l, _ref, _i, tx;
		l = this;
		_ref = l.tx;
		_i = 0;
		while (_i < _ref.$length) {
			tx = new zoneTrans.Ptr(); $copy(tx, ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), zoneTrans);
			if (tx.index === 0) {
				return true;
			}
			_i++;
		}
		return false;
	};
	Location.prototype.firstZoneUsed = function() { return this.$val.firstZoneUsed(); };
	Location.Ptr.prototype.lookupName = function(name, unix) {
		var offset = 0, isDST = false, ok = false, l, _ref, _i, i, x, zone$1, _tuple$1, x$1, nam, offset$1, isDST$1, _tmp, _tmp$1, _tmp$2, _ref$1, _i$1, i$1, x$2, zone$2, _tmp$3, _tmp$4, _tmp$5;
		l = this;
		l = l.get();
		_ref = l.zone;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			zone$1 = (x = l.zone, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (zone$1.name === name) {
				_tuple$1 = l.lookup((x$1 = new $Int64(0, zone$1.offset), new $Int64(unix.$high - x$1.$high, unix.$low - x$1.$low))); nam = _tuple$1[0]; offset$1 = _tuple$1[1]; isDST$1 = _tuple$1[2];
				if (nam === zone$1.name) {
					_tmp = offset$1; _tmp$1 = isDST$1; _tmp$2 = true; offset = _tmp; isDST = _tmp$1; ok = _tmp$2;
					return [offset, isDST, ok];
				}
			}
			_i++;
		}
		_ref$1 = l.zone;
		_i$1 = 0;
		while (_i$1 < _ref$1.$length) {
			i$1 = _i$1;
			zone$2 = (x$2 = l.zone, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$1]));
			if (zone$2.name === name) {
				_tmp$3 = zone$2.offset; _tmp$4 = zone$2.isDST; _tmp$5 = true; offset = _tmp$3; isDST = _tmp$4; ok = _tmp$5;
				return [offset, isDST, ok];
			}
			_i$1++;
		}
		return [offset, isDST, ok];
	};
	Location.prototype.lookupName = function(name, unix) { return this.$val.lookupName(name, unix); };
	$pkg.$init = function() {
		runtimeTimer.init([["i", "i", "time", $Int32, ""], ["when", "when", "time", $Int64, ""], ["period", "period", "time", $Int64, ""], ["f", "f", "time", ($funcType([$Int64, $emptyInterface], [], false)), ""], ["arg", "arg", "time", $emptyInterface, ""], ["timeout", "timeout", "time", js.Object, ""], ["active", "active", "time", $Bool, ""]]);
		($ptrType(ParseError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		ParseError.init([["Layout", "Layout", "", $String, ""], ["Value", "Value", "", $String, ""], ["LayoutElem", "LayoutElem", "", $String, ""], ["ValueElem", "ValueElem", "", $String, ""], ["Message", "Message", "", $String, ""]]);
		($ptrType(Timer)).methods = [["Reset", "Reset", "", $funcType([Duration], [$Bool], false), -1], ["Stop", "Stop", "", $funcType([], [$Bool], false), -1]];
		Timer.init([["C", "C", "", ($chanType(Time, false, true)), ""], ["r", "r", "time", runtimeTimer, ""]]);
		Time.methods = [["Add", "Add", "", $funcType([Duration], [Time], false), -1], ["AddDate", "AddDate", "", $funcType([$Int, $Int, $Int], [Time], false), -1], ["After", "After", "", $funcType([Time], [$Bool], false), -1], ["Before", "Before", "", $funcType([Time], [$Bool], false), -1], ["Clock", "Clock", "", $funcType([], [$Int, $Int, $Int], false), -1], ["Date", "Date", "", $funcType([], [$Int, Month, $Int], false), -1], ["Day", "Day", "", $funcType([], [$Int], false), -1], ["Equal", "Equal", "", $funcType([Time], [$Bool], false), -1], ["Format", "Format", "", $funcType([$String], [$String], false), -1], ["GobEncode", "GobEncode", "", $funcType([], [($sliceType($Uint8)), $error], false), -1], ["Hour", "Hour", "", $funcType([], [$Int], false), -1], ["ISOWeek", "ISOWeek", "", $funcType([], [$Int, $Int], false), -1], ["In", "In", "", $funcType([($ptrType(Location))], [Time], false), -1], ["IsZero", "IsZero", "", $funcType([], [$Bool], false), -1], ["Local", "Local", "", $funcType([], [Time], false), -1], ["Location", "Location", "", $funcType([], [($ptrType(Location))], false), -1], ["MarshalBinary", "MarshalBinary", "", $funcType([], [($sliceType($Uint8)), $error], false), -1], ["MarshalJSON", "MarshalJSON", "", $funcType([], [($sliceType($Uint8)), $error], false), -1], ["MarshalText", "MarshalText", "", $funcType([], [($sliceType($Uint8)), $error], false), -1], ["Minute", "Minute", "", $funcType([], [$Int], false), -1], ["Month", "Month", "", $funcType([], [Month], false), -1], ["Nanosecond", "Nanosecond", "", $funcType([], [$Int], false), -1], ["Round", "Round", "", $funcType([Duration], [Time], false), -1], ["Second", "Second", "", $funcType([], [$Int], false), -1], ["String", "String", "", $funcType([], [$String], false), -1], ["Sub", "Sub", "", $funcType([Time], [Duration], false), -1], ["Truncate", "Truncate", "", $funcType([Duration], [Time], false), -1], ["UTC", "UTC", "", $funcType([], [Time], false), -1], ["Unix", "Unix", "", $funcType([], [$Int64], false), -1], ["UnixNano", "UnixNano", "", $funcType([], [$Int64], false), -1], ["Weekday", "Weekday", "", $funcType([], [Weekday], false), -1], ["Year", "Year", "", $funcType([], [$Int], false), -1], ["YearDay", "YearDay", "", $funcType([], [$Int], false), -1], ["Zone", "Zone", "", $funcType([], [$String, $Int], false), -1], ["abs", "abs", "time", $funcType([], [$Uint64], false), -1], ["date", "date", "time", $funcType([$Bool], [$Int, Month, $Int, $Int], false), -1], ["locabs", "locabs", "time", $funcType([], [$String, $Int, $Uint64], false), -1]];
		($ptrType(Time)).methods = [["Add", "Add", "", $funcType([Duration], [Time], false), -1], ["AddDate", "AddDate", "", $funcType([$Int, $Int, $Int], [Time], false), -1], ["After", "After", "", $funcType([Time], [$Bool], false), -1], ["Before", "Before", "", $funcType([Time], [$Bool], false), -1], ["Clock", "Clock", "", $funcType([], [$Int, $Int, $Int], false), -1], ["Date", "Date", "", $funcType([], [$Int, Month, $Int], false), -1], ["Day", "Day", "", $funcType([], [$Int], false), -1], ["Equal", "Equal", "", $funcType([Time], [$Bool], false), -1], ["Format", "Format", "", $funcType([$String], [$String], false), -1], ["GobDecode", "GobDecode", "", $funcType([($sliceType($Uint8))], [$error], false), -1], ["GobEncode", "GobEncode", "", $funcType([], [($sliceType($Uint8)), $error], false), -1], ["Hour", "Hour", "", $funcType([], [$Int], false), -1], ["ISOWeek", "ISOWeek", "", $funcType([], [$Int, $Int], false), -1], ["In", "In", "", $funcType([($ptrType(Location))], [Time], false), -1], ["IsZero", "IsZero", "", $funcType([], [$Bool], false), -1], ["Local", "Local", "", $funcType([], [Time], false), -1], ["Location", "Location", "", $funcType([], [($ptrType(Location))], false), -1], ["MarshalBinary", "MarshalBinary", "", $funcType([], [($sliceType($Uint8)), $error], false), -1], ["MarshalJSON", "MarshalJSON", "", $funcType([], [($sliceType($Uint8)), $error], false), -1], ["MarshalText", "MarshalText", "", $funcType([], [($sliceType($Uint8)), $error], false), -1], ["Minute", "Minute", "", $funcType([], [$Int], false), -1], ["Month", "Month", "", $funcType([], [Month], false), -1], ["Nanosecond", "Nanosecond", "", $funcType([], [$Int], false), -1], ["Round", "Round", "", $funcType([Duration], [Time], false), -1], ["Second", "Second", "", $funcType([], [$Int], false), -1], ["String", "String", "", $funcType([], [$String], false), -1], ["Sub", "Sub", "", $funcType([Time], [Duration], false), -1], ["Truncate", "Truncate", "", $funcType([Duration], [Time], false), -1], ["UTC", "UTC", "", $funcType([], [Time], false), -1], ["Unix", "Unix", "", $funcType([], [$Int64], false), -1], ["UnixNano", "UnixNano", "", $funcType([], [$Int64], false), -1], ["UnmarshalBinary", "UnmarshalBinary", "", $funcType([($sliceType($Uint8))], [$error], false), -1], ["UnmarshalJSON", "UnmarshalJSON", "", $funcType([($sliceType($Uint8))], [$error], false), -1], ["UnmarshalText", "UnmarshalText", "", $funcType([($sliceType($Uint8))], [$error], false), -1], ["Weekday", "Weekday", "", $funcType([], [Weekday], false), -1], ["Year", "Year", "", $funcType([], [$Int], false), -1], ["YearDay", "YearDay", "", $funcType([], [$Int], false), -1], ["Zone", "Zone", "", $funcType([], [$String, $Int], false), -1], ["abs", "abs", "time", $funcType([], [$Uint64], false), -1], ["date", "date", "time", $funcType([$Bool], [$Int, Month, $Int, $Int], false), -1], ["locabs", "locabs", "time", $funcType([], [$String, $Int, $Uint64], false), -1]];
		Time.init([["sec", "sec", "time", $Int64, ""], ["nsec", "nsec", "time", $Uintptr, ""], ["loc", "loc", "time", ($ptrType(Location)), ""]]);
		Month.methods = [["String", "String", "", $funcType([], [$String], false), -1]];
		($ptrType(Month)).methods = [["String", "String", "", $funcType([], [$String], false), -1]];
		Weekday.methods = [["String", "String", "", $funcType([], [$String], false), -1]];
		($ptrType(Weekday)).methods = [["String", "String", "", $funcType([], [$String], false), -1]];
		Duration.methods = [["Hours", "Hours", "", $funcType([], [$Float64], false), -1], ["Minutes", "Minutes", "", $funcType([], [$Float64], false), -1], ["Nanoseconds", "Nanoseconds", "", $funcType([], [$Int64], false), -1], ["Seconds", "Seconds", "", $funcType([], [$Float64], false), -1], ["String", "String", "", $funcType([], [$String], false), -1]];
		($ptrType(Duration)).methods = [["Hours", "Hours", "", $funcType([], [$Float64], false), -1], ["Minutes", "Minutes", "", $funcType([], [$Float64], false), -1], ["Nanoseconds", "Nanoseconds", "", $funcType([], [$Int64], false), -1], ["Seconds", "Seconds", "", $funcType([], [$Float64], false), -1], ["String", "String", "", $funcType([], [$String], false), -1]];
		($ptrType(Location)).methods = [["String", "String", "", $funcType([], [$String], false), -1], ["firstZoneUsed", "firstZoneUsed", "time", $funcType([], [$Bool], false), -1], ["get", "get", "time", $funcType([], [($ptrType(Location))], false), -1], ["lookup", "lookup", "time", $funcType([$Int64], [$String, $Int, $Bool, $Int64, $Int64], false), -1], ["lookupFirstZone", "lookupFirstZone", "time", $funcType([], [$Int], false), -1], ["lookupName", "lookupName", "time", $funcType([$String, $Int64], [$Int, $Bool, $Bool], false), -1]];
		Location.init([["name", "name", "time", $String, ""], ["zone", "zone", "time", ($sliceType(zone)), ""], ["tx", "tx", "time", ($sliceType(zoneTrans)), ""], ["cacheStart", "cacheStart", "time", $Int64, ""], ["cacheEnd", "cacheEnd", "time", $Int64, ""], ["cacheZone", "cacheZone", "time", ($ptrType(zone)), ""]]);
		zone.init([["name", "name", "time", $String, ""], ["offset", "offset", "time", $Int, ""], ["isDST", "isDST", "time", $Bool, ""]]);
		zoneTrans.init([["when", "when", "time", $Int64, ""], ["index", "index", "time", $Uint8, ""], ["isstd", "isstd", "time", $Bool, ""], ["isutc", "isutc", "time", $Bool, ""]]);
		localLoc = new Location.Ptr();
		localOnce = new sync.Once.Ptr();
		std0x = $toNativeArray("Int", [260, 265, 524, 526, 528, 274]);
		longDayNames = new ($sliceType($String))(["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		shortDayNames = new ($sliceType($String))(["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]);
		shortMonthNames = new ($sliceType($String))(["---", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]);
		longMonthNames = new ($sliceType($String))(["---", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		atoiError = errors.New("time: invalid number");
		errBad = errors.New("bad value for field");
		errLeadingInt = errors.New("time: bad [0-9]*");
		months = $toNativeArray("String", ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]);
		days = $toNativeArray("String", ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]);
		unitMap = (_map = new $Map(), _key = "ns", _map[_key] = { k: _key, v: 1 }, _key = "us", _map[_key] = { k: _key, v: 1000 }, _key = "\xC2\xB5s", _map[_key] = { k: _key, v: 1000 }, _key = "\xCE\xBCs", _map[_key] = { k: _key, v: 1000 }, _key = "ms", _map[_key] = { k: _key, v: 1e+06 }, _key = "s", _map[_key] = { k: _key, v: 1e+09 }, _key = "m", _map[_key] = { k: _key, v: 6e+10 }, _key = "h", _map[_key] = { k: _key, v: 3.6e+12 }, _map);
		daysBefore = $toNativeArray("Int32", [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365]);
		utcLoc = new Location.Ptr("UTC", ($sliceType(zone)).nil, ($sliceType(zoneTrans)).nil, new $Int64(0, 0), new $Int64(0, 0), ($ptrType(zone)).nil);
		$pkg.UTC = utcLoc;
		$pkg.Local = localLoc;
		_tuple = syscall.Getenv("ZONEINFO"); zoneinfo = _tuple[0];
		badData = errors.New("malformed time zone information");
		zoneDirs = new ($sliceType($String))(["/usr/share/zoneinfo/", "/usr/share/lib/zoneinfo/", "/usr/lib/locale/TZ/", runtime.GOROOT() + "/lib/time/zoneinfo.zip"]);
	};
	return $pkg;
})();
$packages["os"] = (function() {
	var $pkg = {}, js = $packages["github.com/gopherjs/gopherjs/js"], io = $packages["io"], syscall = $packages["syscall"], time = $packages["time"], errors = $packages["errors"], runtime = $packages["runtime"], atomic = $packages["sync/atomic"], sync = $packages["sync"], PathError, SyscallError, Process, ProcAttr, Signal, ProcessState, LinkError, File, file, dirInfo, FileInfo, FileMode, fileStat, lstat, useSyscallwd, supportsCloseOnExec, init, StartProcess, Getenv, Environ, NewSyscallError, IsExist, IsNotExist, isExist, isNotExist, newProcess, Getpid, startProcess, itod, Open, sigpipe, syscallMode, NewFile, epipecheck, OpenFile, Stat, Lstat, Remove, basename, TempDir, init$1, useSyscallwdDarwin, IsPathSeparator, Pipe, Exit, fileInfoFromStat, timespecToTime, init$2;
	PathError = $pkg.PathError = $newType(0, "Struct", "os.PathError", "PathError", "os", function(Op_, Path_, Err_) {
		this.$val = this;
		this.Op = Op_ !== undefined ? Op_ : "";
		this.Path = Path_ !== undefined ? Path_ : "";
		this.Err = Err_ !== undefined ? Err_ : $ifaceNil;
	});
	SyscallError = $pkg.SyscallError = $newType(0, "Struct", "os.SyscallError", "SyscallError", "os", function(Syscall_, Err_) {
		this.$val = this;
		this.Syscall = Syscall_ !== undefined ? Syscall_ : "";
		this.Err = Err_ !== undefined ? Err_ : $ifaceNil;
	});
	Process = $pkg.Process = $newType(0, "Struct", "os.Process", "Process", "os", function(Pid_, handle_, isdone_) {
		this.$val = this;
		this.Pid = Pid_ !== undefined ? Pid_ : 0;
		this.handle = handle_ !== undefined ? handle_ : 0;
		this.isdone = isdone_ !== undefined ? isdone_ : 0;
	});
	ProcAttr = $pkg.ProcAttr = $newType(0, "Struct", "os.ProcAttr", "ProcAttr", "os", function(Dir_, Env_, Files_, Sys_) {
		this.$val = this;
		this.Dir = Dir_ !== undefined ? Dir_ : "";
		this.Env = Env_ !== undefined ? Env_ : ($sliceType($String)).nil;
		this.Files = Files_ !== undefined ? Files_ : ($sliceType(($ptrType(File)))).nil;
		this.Sys = Sys_ !== undefined ? Sys_ : ($ptrType(syscall.SysProcAttr)).nil;
	});
	Signal = $pkg.Signal = $newType(8, "Interface", "os.Signal", "Signal", "os", null);
	ProcessState = $pkg.ProcessState = $newType(0, "Struct", "os.ProcessState", "ProcessState", "os", function(pid_, status_, rusage_) {
		this.$val = this;
		this.pid = pid_ !== undefined ? pid_ : 0;
		this.status = status_ !== undefined ? status_ : 0;
		this.rusage = rusage_ !== undefined ? rusage_ : ($ptrType(syscall.Rusage)).nil;
	});
	LinkError = $pkg.LinkError = $newType(0, "Struct", "os.LinkError", "LinkError", "os", function(Op_, Old_, New_, Err_) {
		this.$val = this;
		this.Op = Op_ !== undefined ? Op_ : "";
		this.Old = Old_ !== undefined ? Old_ : "";
		this.New = New_ !== undefined ? New_ : "";
		this.Err = Err_ !== undefined ? Err_ : $ifaceNil;
	});
	File = $pkg.File = $newType(0, "Struct", "os.File", "File", "os", function(file_) {
		this.$val = this;
		this.file = file_ !== undefined ? file_ : ($ptrType(file)).nil;
	});
	file = $pkg.file = $newType(0, "Struct", "os.file", "file", "os", function(fd_, name_, dirinfo_, nepipe_) {
		this.$val = this;
		this.fd = fd_ !== undefined ? fd_ : 0;
		this.name = name_ !== undefined ? name_ : "";
		this.dirinfo = dirinfo_ !== undefined ? dirinfo_ : ($ptrType(dirInfo)).nil;
		this.nepipe = nepipe_ !== undefined ? nepipe_ : 0;
	});
	dirInfo = $pkg.dirInfo = $newType(0, "Struct", "os.dirInfo", "dirInfo", "os", function(buf_, nbuf_, bufp_) {
		this.$val = this;
		this.buf = buf_ !== undefined ? buf_ : ($sliceType($Uint8)).nil;
		this.nbuf = nbuf_ !== undefined ? nbuf_ : 0;
		this.bufp = bufp_ !== undefined ? bufp_ : 0;
	});
	FileInfo = $pkg.FileInfo = $newType(8, "Interface", "os.FileInfo", "FileInfo", "os", null);
	FileMode = $pkg.FileMode = $newType(4, "Uint32", "os.FileMode", "FileMode", "os", null);
	fileStat = $pkg.fileStat = $newType(0, "Struct", "os.fileStat", "fileStat", "os", function(name_, size_, mode_, modTime_, sys_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.size = size_ !== undefined ? size_ : new $Int64(0, 0);
		this.mode = mode_ !== undefined ? mode_ : 0;
		this.modTime = modTime_ !== undefined ? modTime_ : new time.Time.Ptr();
		this.sys = sys_ !== undefined ? sys_ : $ifaceNil;
	});
	init = function() {
		var process, args, i;
		process = $global.process;
		if (process === undefined) {
			$pkg.Args = new ($sliceType($String))(["browser"]);
			return;
		}
		args = process.argv;
		$pkg.Args = ($sliceType($String)).make(($parseInt(args.length) - 1 >> 0));
		i = 0;
		while (i < ($parseInt(args.length) - 1 >> 0)) {
			(i < 0 || i >= $pkg.Args.$length) ? $throwRuntimeError("index out of range") : $pkg.Args.$array[$pkg.Args.$offset + i] = $internalize(args[(i + 1 >> 0)], $String);
			i = i + (1) >> 0;
		}
	};
	File.Ptr.prototype.readdirnames = function(n) {
		var names = ($sliceType($String)).nil, err = $ifaceNil, f, d, size, errno, _tuple, _tmp, _tmp$1, _tmp$2, _tmp$3, nb, nc, _tuple$1, _tmp$4, _tmp$5, _tmp$6, _tmp$7;
		f = this;
		if (f.file.dirinfo === ($ptrType(dirInfo)).nil) {
			f.file.dirinfo = new dirInfo.Ptr();
			f.file.dirinfo.buf = ($sliceType($Uint8)).make(4096);
		}
		d = f.file.dirinfo;
		size = n;
		if (size <= 0) {
			size = 100;
			n = -1;
		}
		names = ($sliceType($String)).make(0, size);
		while (!((n === 0))) {
			if (d.bufp >= d.nbuf) {
				d.bufp = 0;
				errno = $ifaceNil;
				_tuple = syscall.ReadDirent(f.file.fd, d.buf); d.nbuf = _tuple[0]; errno = _tuple[1];
				if (!($interfaceIsEqual(errno, $ifaceNil))) {
					_tmp = names; _tmp$1 = NewSyscallError("readdirent", errno); names = _tmp; err = _tmp$1;
					return [names, err];
				}
				if (d.nbuf <= 0) {
					break;
				}
			}
			_tmp$2 = 0; _tmp$3 = 0; nb = _tmp$2; nc = _tmp$3;
			_tuple$1 = syscall.ParseDirent($subslice(d.buf, d.bufp, d.nbuf), n, names); nb = _tuple$1[0]; nc = _tuple$1[1]; names = _tuple$1[2];
			d.bufp = d.bufp + (nb) >> 0;
			n = n - (nc) >> 0;
		}
		if (n >= 0 && (names.$length === 0)) {
			_tmp$4 = names; _tmp$5 = io.EOF; names = _tmp$4; err = _tmp$5;
			return [names, err];
		}
		_tmp$6 = names; _tmp$7 = $ifaceNil; names = _tmp$6; err = _tmp$7;
		return [names, err];
	};
	File.prototype.readdirnames = function(n) { return this.$val.readdirnames(n); };
	StartProcess = $pkg.StartProcess = function(name, argv, attr) {
		return startProcess(name, argv, attr);
	};
	Process.Ptr.prototype.Release = function() {
		var p;
		p = this;
		return p.release();
	};
	Process.prototype.Release = function() { return this.$val.Release(); };
	Process.Ptr.prototype.Kill = function() {
		var p;
		p = this;
		return p.kill();
	};
	Process.prototype.Kill = function() { return this.$val.Kill(); };
	Process.Ptr.prototype.Wait = function() {
		var p;
		p = this;
		return p.wait();
	};
	Process.prototype.Wait = function() { return this.$val.Wait(); };
	Process.Ptr.prototype.Signal = function(sig) {
		var p;
		p = this;
		return p.signal(sig);
	};
	Process.prototype.Signal = function(sig) { return this.$val.Signal(sig); };
	ProcessState.Ptr.prototype.UserTime = function() {
		var p;
		p = this;
		return p.userTime();
	};
	ProcessState.prototype.UserTime = function() { return this.$val.UserTime(); };
	ProcessState.Ptr.prototype.SystemTime = function() {
		var p;
		p = this;
		return p.systemTime();
	};
	ProcessState.prototype.SystemTime = function() { return this.$val.SystemTime(); };
	ProcessState.Ptr.prototype.Exited = function() {
		var p;
		p = this;
		return p.exited();
	};
	ProcessState.prototype.Exited = function() { return this.$val.Exited(); };
	ProcessState.Ptr.prototype.Success = function() {
		var p;
		p = this;
		return p.success();
	};
	ProcessState.prototype.Success = function() { return this.$val.Success(); };
	ProcessState.Ptr.prototype.Sys = function() {
		var p;
		p = this;
		return p.sys();
	};
	ProcessState.prototype.Sys = function() { return this.$val.Sys(); };
	ProcessState.Ptr.prototype.SysUsage = function() {
		var p;
		p = this;
		return p.sysUsage();
	};
	ProcessState.prototype.SysUsage = function() { return this.$val.SysUsage(); };
	File.Ptr.prototype.Readdir = function(n) {
		var fi = ($sliceType(FileInfo)).nil, err = $ifaceNil, f, _tmp, _tmp$1, _tuple;
		f = this;
		if (f === ($ptrType(File)).nil) {
			_tmp = ($sliceType(FileInfo)).nil; _tmp$1 = $pkg.ErrInvalid; fi = _tmp; err = _tmp$1;
			return [fi, err];
		}
		_tuple = f.readdir(n); fi = _tuple[0]; err = _tuple[1];
		return [fi, err];
	};
	File.prototype.Readdir = function(n) { return this.$val.Readdir(n); };
	File.Ptr.prototype.Readdirnames = function(n) {
		var names = ($sliceType($String)).nil, err = $ifaceNil, f, _tmp, _tmp$1, _tuple;
		f = this;
		if (f === ($ptrType(File)).nil) {
			_tmp = ($sliceType($String)).nil; _tmp$1 = $pkg.ErrInvalid; names = _tmp; err = _tmp$1;
			return [names, err];
		}
		_tuple = f.readdirnames(n); names = _tuple[0]; err = _tuple[1];
		return [names, err];
	};
	File.prototype.Readdirnames = function(n) { return this.$val.Readdirnames(n); };
	Getenv = $pkg.Getenv = function(key) {
		var _tuple, v;
		_tuple = syscall.Getenv(key); v = _tuple[0];
		return v;
	};
	Environ = $pkg.Environ = function() {
		return syscall.Environ();
	};
	PathError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.Op + " " + e.Path + ": " + e.Err.Error();
	};
	PathError.prototype.Error = function() { return this.$val.Error(); };
	SyscallError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.Syscall + ": " + e.Err.Error();
	};
	SyscallError.prototype.Error = function() { return this.$val.Error(); };
	NewSyscallError = $pkg.NewSyscallError = function(syscall$1, err) {
		if ($interfaceIsEqual(err, $ifaceNil)) {
			return $ifaceNil;
		}
		return new SyscallError.Ptr(syscall$1, err);
	};
	IsExist = $pkg.IsExist = function(err) {
		return isExist(err);
	};
	IsNotExist = $pkg.IsNotExist = function(err) {
		return isNotExist(err);
	};
	isExist = function(err) {
		var pe, _ref;
		_ref = err;
		if (_ref === $ifaceNil) {
			pe = _ref;
			return false;
		} else if ($assertType(_ref, ($ptrType(PathError)), true)[1]) {
			pe = _ref.$val;
			err = pe.Err;
		} else if ($assertType(_ref, ($ptrType(LinkError)), true)[1]) {
			pe = _ref.$val;
			err = pe.Err;
		}
		return $interfaceIsEqual(err, new syscall.Errno(17)) || $interfaceIsEqual(err, $pkg.ErrExist);
	};
	isNotExist = function(err) {
		var pe, _ref;
		_ref = err;
		if (_ref === $ifaceNil) {
			pe = _ref;
			return false;
		} else if ($assertType(_ref, ($ptrType(PathError)), true)[1]) {
			pe = _ref.$val;
			err = pe.Err;
		} else if ($assertType(_ref, ($ptrType(LinkError)), true)[1]) {
			pe = _ref.$val;
			err = pe.Err;
		}
		return $interfaceIsEqual(err, new syscall.Errno(2)) || $interfaceIsEqual(err, $pkg.ErrNotExist);
	};
	newProcess = function(pid, handle) {
		var p;
		p = new Process.Ptr(pid, handle, 0);
		runtime.SetFinalizer(p, new ($funcType([($ptrType(Process))], [$error], false))($methodExpr(($ptrType(Process)).prototype.Release)));
		return p;
	};
	Process.Ptr.prototype.setDone = function() {
		var p;
		p = this;
		atomic.StoreUint32(new ($ptrType($Uint32))(function() { return this.$target.isdone; }, function($v) { this.$target.isdone = $v; }, p), 1);
	};
	Process.prototype.setDone = function() { return this.$val.setDone(); };
	Process.Ptr.prototype.done = function() {
		var p;
		p = this;
		return atomic.LoadUint32(new ($ptrType($Uint32))(function() { return this.$target.isdone; }, function($v) { this.$target.isdone = $v; }, p)) > 0;
	};
	Process.prototype.done = function() { return this.$val.done(); };
	Getpid = $pkg.Getpid = function() {
		return syscall.Getpid();
	};
	startProcess = function(name, argv, attr) {
		var p = ($ptrType(Process)).nil, err = $ifaceNil, _tuple, err$1, pe, _tmp, _tmp$1, sysattr, _ref, _i, f, _tuple$1, pid, h, e, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		if (!(attr === ($ptrType(ProcAttr)).nil) && attr.Sys === ($ptrType(syscall.SysProcAttr)).nil && !(attr.Dir === "")) {
			_tuple = Stat(attr.Dir); err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				pe = $assertType(err$1, ($ptrType(PathError)));
				pe.Op = "chdir";
				_tmp = ($ptrType(Process)).nil; _tmp$1 = pe; p = _tmp; err = _tmp$1;
				return [p, err];
			}
		}
		sysattr = new syscall.ProcAttr.Ptr(attr.Dir, attr.Env, ($sliceType($Uintptr)).nil, attr.Sys);
		if (sysattr.Env === ($sliceType($String)).nil) {
			sysattr.Env = Environ();
		}
		_ref = attr.Files;
		_i = 0;
		while (_i < _ref.$length) {
			f = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			sysattr.Files = $append(sysattr.Files, f.Fd());
			_i++;
		}
		_tuple$1 = syscall.StartProcess(name, argv, sysattr); pid = _tuple$1[0]; h = _tuple$1[1]; e = _tuple$1[2];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = ($ptrType(Process)).nil; _tmp$3 = new PathError.Ptr("fork/exec", name, e); p = _tmp$2; err = _tmp$3;
			return [p, err];
		}
		_tmp$4 = newProcess(pid, h); _tmp$5 = $ifaceNil; p = _tmp$4; err = _tmp$5;
		return [p, err];
	};
	Process.Ptr.prototype.kill = function() {
		var p;
		p = this;
		return p.Signal($pkg.Kill);
	};
	Process.prototype.kill = function() { return this.$val.kill(); };
	ProcessState.Ptr.prototype.Pid = function() {
		var p;
		p = this;
		return p.pid;
	};
	ProcessState.prototype.Pid = function() { return this.$val.Pid(); };
	ProcessState.Ptr.prototype.exited = function() {
		var p;
		p = this;
		return new syscall.WaitStatus(p.status).Exited();
	};
	ProcessState.prototype.exited = function() { return this.$val.exited(); };
	ProcessState.Ptr.prototype.success = function() {
		var p;
		p = this;
		return new syscall.WaitStatus(p.status).ExitStatus() === 0;
	};
	ProcessState.prototype.success = function() { return this.$val.success(); };
	ProcessState.Ptr.prototype.sys = function() {
		var p;
		p = this;
		return new syscall.WaitStatus(p.status);
	};
	ProcessState.prototype.sys = function() { return this.$val.sys(); };
	ProcessState.Ptr.prototype.sysUsage = function() {
		var p;
		p = this;
		return p.rusage;
	};
	ProcessState.prototype.sysUsage = function() { return this.$val.sysUsage(); };
	itod = function(i) {
		var u, b, bp;
		if (i === 0) {
			return "0";
		}
		u = new $Uint64(0, i);
		if (i < 0) {
			u = new $Uint64(-u.$high, -u.$low);
		}
		b = ($arrayType($Uint8, 32)).zero(); $copy(b, ($arrayType($Uint8, 32)).zero(), ($arrayType($Uint8, 32)));
		bp = 32;
		while ((u.$high > 0 || (u.$high === 0 && u.$low > 0))) {
			bp = bp - (1) >> 0;
			(bp < 0 || bp >= b.length) ? $throwRuntimeError("index out of range") : b[bp] = ($div64(u, new $Uint64(0, 10), true).$low << 24 >>> 24) + 48 << 24 >>> 24;
			u = $div64(u, (new $Uint64(0, 10)), false);
		}
		if (i < 0) {
			bp = bp - (1) >> 0;
			(bp < 0 || bp >= b.length) ? $throwRuntimeError("index out of range") : b[bp] = 45;
		}
		return $bytesToString($subslice(new ($sliceType($Uint8))(b), bp));
	};
	ProcessState.Ptr.prototype.String = function() {
		var p, status, res;
		p = this;
		if (p === ($ptrType(ProcessState)).nil) {
			return "<nil>";
		}
		status = $assertType(p.Sys(), syscall.WaitStatus);
		res = "";
		if (new syscall.WaitStatus(status).Exited()) {
			res = "exit status " + itod(new syscall.WaitStatus(status).ExitStatus());
		} else if (new syscall.WaitStatus(status).Signaled()) {
			res = "signal: " + new syscall.Signal(new syscall.WaitStatus(status).Signal()).String();
		} else if (new syscall.WaitStatus(status).Stopped()) {
			res = "stop signal: " + new syscall.Signal(new syscall.WaitStatus(status).StopSignal()).String();
			if ((new syscall.WaitStatus(status).StopSignal() === 5) && !((new syscall.WaitStatus(status).TrapCause() === 0))) {
				res = res + (" (trap " + itod(new syscall.WaitStatus(status).TrapCause()) + ")");
			}
		} else if (new syscall.WaitStatus(status).Continued()) {
			res = "continued";
		}
		if (new syscall.WaitStatus(status).CoreDump()) {
			res = res + (" (core dumped)");
		}
		return res;
	};
	ProcessState.prototype.String = function() { return this.$val.String(); };
	Process.Ptr.prototype.wait = function() {
		var ps = ($ptrType(ProcessState)).nil, err = $ifaceNil, p, _tmp, _tmp$1, status, rusage, _tuple, pid1, e, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		p = this;
		if (p.Pid === -1) {
			_tmp = ($ptrType(ProcessState)).nil; _tmp$1 = new syscall.Errno(22); ps = _tmp; err = _tmp$1;
			return [ps, err];
		}
		status = 0;
		rusage = new syscall.Rusage.Ptr(); $copy(rusage, new syscall.Rusage.Ptr(), syscall.Rusage);
		_tuple = syscall.Wait4(p.Pid, new ($ptrType(syscall.WaitStatus))(function() { return status; }, function($v) { status = $v; }), 0, rusage); pid1 = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = ($ptrType(ProcessState)).nil; _tmp$3 = NewSyscallError("wait", e); ps = _tmp$2; err = _tmp$3;
			return [ps, err];
		}
		if (!((pid1 === 0))) {
			p.setDone();
		}
		ps = new ProcessState.Ptr(pid1, status, rusage);
		_tmp$4 = ps; _tmp$5 = $ifaceNil; ps = _tmp$4; err = _tmp$5;
		return [ps, err];
	};
	Process.prototype.wait = function() { return this.$val.wait(); };
	Process.Ptr.prototype.signal = function(sig) {
		var p, _tuple, s, ok, e;
		p = this;
		if (p.done()) {
			return errors.New("os: process already finished");
		}
		if (p.Pid === -1) {
			return errors.New("os: process already released");
		}
		_tuple = $assertType(sig, syscall.Signal, true); s = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			return errors.New("os: unsupported signal type");
		}
		e = syscall.Kill(p.Pid, s);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return e;
		}
		return $ifaceNil;
	};
	Process.prototype.signal = function(sig) { return this.$val.signal(sig); };
	Process.Ptr.prototype.release = function() {
		var p;
		p = this;
		p.Pid = -1;
		runtime.SetFinalizer(p, $ifaceNil);
		return $ifaceNil;
	};
	Process.prototype.release = function() { return this.$val.release(); };
	ProcessState.Ptr.prototype.userTime = function() {
		var p, x;
		p = this;
		return $mul64((x = p.rusage.Utime.Nano(), new time.Duration(x.$high, x.$low)), new time.Duration(0, 1));
	};
	ProcessState.prototype.userTime = function() { return this.$val.userTime(); };
	ProcessState.Ptr.prototype.systemTime = function() {
		var p, x;
		p = this;
		return $mul64((x = p.rusage.Stime.Nano(), new time.Duration(x.$high, x.$low)), new time.Duration(0, 1));
	};
	ProcessState.prototype.systemTime = function() { return this.$val.systemTime(); };
	File.Ptr.prototype.Name = function() {
		var f;
		f = this;
		return f.file.name;
	};
	File.prototype.Name = function() { return this.$val.Name(); };
	LinkError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.Op + " " + e.Old + " " + e.New + ": " + e.Err.Error();
	};
	LinkError.prototype.Error = function() { return this.$val.Error(); };
	File.Ptr.prototype.Read = function(b) {
		var n = 0, err = $ifaceNil, f, _tmp, _tmp$1, _tuple, e, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		f = this;
		if (f === ($ptrType(File)).nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		_tuple = f.read(b); n = _tuple[0]; e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if ((n === 0) && b.$length > 0 && $interfaceIsEqual(e, $ifaceNil)) {
			_tmp$2 = 0; _tmp$3 = io.EOF; n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.Ptr("read", f.file.name, e);
		}
		_tmp$4 = n; _tmp$5 = err; n = _tmp$4; err = _tmp$5;
		return [n, err];
	};
	File.prototype.Read = function(b) { return this.$val.Read(b); };
	File.Ptr.prototype.ReadAt = function(b, off) {
		var n = 0, err = $ifaceNil, f, _tmp, _tmp$1, _tuple, m, e, _tmp$2, _tmp$3, x;
		f = this;
		if (f === ($ptrType(File)).nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		while (b.$length > 0) {
			_tuple = f.pread(b, off); m = _tuple[0]; e = _tuple[1];
			if ((m === 0) && $interfaceIsEqual(e, $ifaceNil)) {
				_tmp$2 = n; _tmp$3 = io.EOF; n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = new PathError.Ptr("read", f.file.name, e);
				break;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = new $Int64(0, m), new $Int64(off.$high + x.$high, off.$low + x.$low));
		}
		return [n, err];
	};
	File.prototype.ReadAt = function(b, off) { return this.$val.ReadAt(b, off); };
	File.Ptr.prototype.Write = function(b) {
		var n = 0, err = $ifaceNil, f, _tmp, _tmp$1, _tuple, e, _tmp$2, _tmp$3;
		f = this;
		if (f === ($ptrType(File)).nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		_tuple = f.write(b); n = _tuple[0]; e = _tuple[1];
		if (n < 0) {
			n = 0;
		}
		if (!((n === b.$length))) {
			err = io.ErrShortWrite;
		}
		epipecheck(f, e);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.Ptr("write", f.file.name, e);
		}
		_tmp$2 = n; _tmp$3 = err; n = _tmp$2; err = _tmp$3;
		return [n, err];
	};
	File.prototype.Write = function(b) { return this.$val.Write(b); };
	File.Ptr.prototype.WriteAt = function(b, off) {
		var n = 0, err = $ifaceNil, f, _tmp, _tmp$1, _tuple, m, e, x;
		f = this;
		if (f === ($ptrType(File)).nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		while (b.$length > 0) {
			_tuple = f.pwrite(b, off); m = _tuple[0]; e = _tuple[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				err = new PathError.Ptr("write", f.file.name, e);
				break;
			}
			n = n + (m) >> 0;
			b = $subslice(b, m);
			off = (x = new $Int64(0, m), new $Int64(off.$high + x.$high, off.$low + x.$low));
		}
		return [n, err];
	};
	File.prototype.WriteAt = function(b, off) { return this.$val.WriteAt(b, off); };
	File.Ptr.prototype.Seek = function(offset, whence) {
		var ret = new $Int64(0, 0), err = $ifaceNil, f, _tmp, _tmp$1, _tuple, r, e, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		f = this;
		if (f === ($ptrType(File)).nil) {
			_tmp = new $Int64(0, 0); _tmp$1 = $pkg.ErrInvalid; ret = _tmp; err = _tmp$1;
			return [ret, err];
		}
		_tuple = f.seek(offset, whence); r = _tuple[0]; e = _tuple[1];
		if ($interfaceIsEqual(e, $ifaceNil) && !(f.file.dirinfo === ($ptrType(dirInfo)).nil) && !((r.$high === 0 && r.$low === 0))) {
			e = new syscall.Errno(21);
		}
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp$2 = new $Int64(0, 0); _tmp$3 = new PathError.Ptr("seek", f.file.name, e); ret = _tmp$2; err = _tmp$3;
			return [ret, err];
		}
		_tmp$4 = r; _tmp$5 = $ifaceNil; ret = _tmp$4; err = _tmp$5;
		return [ret, err];
	};
	File.prototype.Seek = function(offset, whence) { return this.$val.Seek(offset, whence); };
	File.Ptr.prototype.WriteString = function(s) {
		var ret = 0, err = $ifaceNil, f, _tmp, _tmp$1, _tuple;
		f = this;
		if (f === ($ptrType(File)).nil) {
			_tmp = 0; _tmp$1 = $pkg.ErrInvalid; ret = _tmp; err = _tmp$1;
			return [ret, err];
		}
		_tuple = f.Write(new ($sliceType($Uint8))($stringToBytes(s))); ret = _tuple[0]; err = _tuple[1];
		return [ret, err];
	};
	File.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	File.Ptr.prototype.Chdir = function() {
		var f, e;
		f = this;
		if (f === ($ptrType(File)).nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchdir(f.file.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.Ptr("chdir", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chdir = function() { return this.$val.Chdir(); };
	Open = $pkg.Open = function(name) {
		var file$1 = ($ptrType(File)).nil, err = $ifaceNil, _tuple;
		_tuple = OpenFile(name, 0, 0); file$1 = _tuple[0]; err = _tuple[1];
		return [file$1, err];
	};
	sigpipe = function() {
		$panic("Native function not implemented: os.sigpipe");
	};
	syscallMode = function(i) {
		var o = 0;
		o = (o | ((new FileMode(i).Perm() >>> 0))) >>> 0;
		if (!((((i & 8388608) >>> 0) === 0))) {
			o = (o | (2048)) >>> 0;
		}
		if (!((((i & 4194304) >>> 0) === 0))) {
			o = (o | (1024)) >>> 0;
		}
		if (!((((i & 1048576) >>> 0) === 0))) {
			o = (o | (512)) >>> 0;
		}
		return o;
	};
	File.Ptr.prototype.Chmod = function(mode) {
		var f, e;
		f = this;
		if (f === ($ptrType(File)).nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchmod(f.file.fd, syscallMode(mode));
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.Ptr("chmod", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chmod = function(mode) { return this.$val.Chmod(mode); };
	File.Ptr.prototype.Chown = function(uid, gid) {
		var f, e;
		f = this;
		if (f === ($ptrType(File)).nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Fchown(f.file.fd, uid, gid);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.Ptr("chown", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Chown = function(uid, gid) { return this.$val.Chown(uid, gid); };
	File.Ptr.prototype.Truncate = function(size) {
		var f, e;
		f = this;
		if (f === ($ptrType(File)).nil) {
			return $pkg.ErrInvalid;
		}
		e = syscall.Ftruncate(f.file.fd, size);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			return new PathError.Ptr("truncate", f.file.name, e);
		}
		return $ifaceNil;
	};
	File.prototype.Truncate = function(size) { return this.$val.Truncate(size); };
	File.Ptr.prototype.Sync = function() {
		var err = $ifaceNil, f, e;
		f = this;
		if (f === ($ptrType(File)).nil) {
			err = $pkg.ErrInvalid;
			return err;
		}
		e = syscall.Fsync(f.file.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = NewSyscallError("fsync", e);
			return err;
		}
		err = $ifaceNil;
		return err;
	};
	File.prototype.Sync = function() { return this.$val.Sync(); };
	File.Ptr.prototype.Fd = function() {
		var f;
		f = this;
		if (f === ($ptrType(File)).nil) {
			return 4294967295;
		}
		return (f.file.fd >>> 0);
	};
	File.prototype.Fd = function() { return this.$val.Fd(); };
	NewFile = $pkg.NewFile = function(fd, name) {
		var fdi, f;
		fdi = (fd >> 0);
		if (fdi < 0) {
			return ($ptrType(File)).nil;
		}
		f = new File.Ptr(new file.Ptr(fdi, name, ($ptrType(dirInfo)).nil, 0));
		runtime.SetFinalizer(f.file, new ($funcType([($ptrType(file))], [$error], false))($methodExpr(($ptrType(file)).prototype.close)));
		return f;
	};
	epipecheck = function(file$1, e) {
		if ($interfaceIsEqual(e, new syscall.Errno(32))) {
			if (atomic.AddInt32(new ($ptrType($Int32))(function() { return this.$target.file.nepipe; }, function($v) { this.$target.file.nepipe = $v; }, file$1), 1) >= 10) {
				sigpipe();
			}
		} else {
			atomic.StoreInt32(new ($ptrType($Int32))(function() { return this.$target.file.nepipe; }, function($v) { this.$target.file.nepipe = $v; }, file$1), 0);
		}
	};
	OpenFile = $pkg.OpenFile = function(name, flag, perm) {
		var file$1 = ($ptrType(File)).nil, err = $ifaceNil, _tuple, r, e, _tmp, _tmp$1, _tmp$2, _tmp$3;
		_tuple = syscall.Open(name, flag | 16777216, syscallMode(perm)); r = _tuple[0]; e = _tuple[1];
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			_tmp = ($ptrType(File)).nil; _tmp$1 = new PathError.Ptr("open", name, e); file$1 = _tmp; err = _tmp$1;
			return [file$1, err];
		}
		if (!supportsCloseOnExec) {
			syscall.CloseOnExec(r);
		}
		_tmp$2 = NewFile((r >>> 0), name); _tmp$3 = $ifaceNil; file$1 = _tmp$2; err = _tmp$3;
		return [file$1, err];
	};
	File.Ptr.prototype.Close = function() {
		var f;
		f = this;
		if (f === ($ptrType(File)).nil) {
			return $pkg.ErrInvalid;
		}
		return f.file.close();
	};
	File.prototype.Close = function() { return this.$val.Close(); };
	file.Ptr.prototype.close = function() {
		var file$1, err, e;
		file$1 = this;
		if (file$1 === ($ptrType(file)).nil || file$1.fd < 0) {
			return new syscall.Errno(22);
		}
		err = $ifaceNil;
		e = syscall.Close(file$1.fd);
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			err = new PathError.Ptr("close", file$1.name, e);
		}
		file$1.fd = -1;
		runtime.SetFinalizer(file$1, $ifaceNil);
		return err;
	};
	file.prototype.close = function() { return this.$val.close(); };
	File.Ptr.prototype.Stat = function() {
		var fi = $ifaceNil, err = $ifaceNil, f, _tmp, _tmp$1, stat, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		f = this;
		if (f === ($ptrType(File)).nil) {
			_tmp = $ifaceNil; _tmp$1 = $pkg.ErrInvalid; fi = _tmp; err = _tmp$1;
			return [fi, err];
		}
		stat = new syscall.Stat_t.Ptr(); $copy(stat, new syscall.Stat_t.Ptr(), syscall.Stat_t);
		err = syscall.Fstat(f.file.fd, stat);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = $ifaceNil; _tmp$3 = new PathError.Ptr("stat", f.file.name, err); fi = _tmp$2; err = _tmp$3;
			return [fi, err];
		}
		_tmp$4 = fileInfoFromStat(stat, f.file.name); _tmp$5 = $ifaceNil; fi = _tmp$4; err = _tmp$5;
		return [fi, err];
	};
	File.prototype.Stat = function() { return this.$val.Stat(); };
	Stat = $pkg.Stat = function(name) {
		var fi = $ifaceNil, err = $ifaceNil, stat, _tmp, _tmp$1, _tmp$2, _tmp$3;
		stat = new syscall.Stat_t.Ptr(); $copy(stat, new syscall.Stat_t.Ptr(), syscall.Stat_t);
		err = syscall.Stat(name, stat);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = $ifaceNil; _tmp$1 = new PathError.Ptr("stat", name, err); fi = _tmp; err = _tmp$1;
			return [fi, err];
		}
		_tmp$2 = fileInfoFromStat(stat, name); _tmp$3 = $ifaceNil; fi = _tmp$2; err = _tmp$3;
		return [fi, err];
	};
	Lstat = $pkg.Lstat = function(name) {
		var fi = $ifaceNil, err = $ifaceNil, stat, _tmp, _tmp$1, _tmp$2, _tmp$3;
		stat = new syscall.Stat_t.Ptr(); $copy(stat, new syscall.Stat_t.Ptr(), syscall.Stat_t);
		err = syscall.Lstat(name, stat);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = $ifaceNil; _tmp$1 = new PathError.Ptr("lstat", name, err); fi = _tmp; err = _tmp$1;
			return [fi, err];
		}
		_tmp$2 = fileInfoFromStat(stat, name); _tmp$3 = $ifaceNil; fi = _tmp$2; err = _tmp$3;
		return [fi, err];
	};
	File.Ptr.prototype.readdir = function(n) {
		var fi = ($sliceType(FileInfo)).nil, err = $ifaceNil, f, dirname, _tuple, names, _ref, _i, filename, _tuple$1, fip, lerr, _tmp, _tmp$1, _tmp$2, _tmp$3;
		f = this;
		dirname = f.file.name;
		if (dirname === "") {
			dirname = ".";
		}
		_tuple = f.Readdirnames(n); names = _tuple[0]; err = _tuple[1];
		fi = ($sliceType(FileInfo)).make(0, names.$length);
		_ref = names;
		_i = 0;
		while (_i < _ref.$length) {
			filename = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_tuple$1 = lstat(dirname + "/" + filename); fip = _tuple$1[0]; lerr = _tuple$1[1];
			if (IsNotExist(lerr)) {
				_i++;
				continue;
			}
			if (!($interfaceIsEqual(lerr, $ifaceNil))) {
				_tmp = fi; _tmp$1 = lerr; fi = _tmp; err = _tmp$1;
				return [fi, err];
			}
			fi = $append(fi, fip);
			_i++;
		}
		_tmp$2 = fi; _tmp$3 = err; fi = _tmp$2; err = _tmp$3;
		return [fi, err];
	};
	File.prototype.readdir = function(n) { return this.$val.readdir(n); };
	File.Ptr.prototype.read = function(b) {
		var n = 0, err = $ifaceNil, f, _tuple;
		f = this;
		if (true && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple = syscall.Read(f.file.fd, b); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	File.prototype.read = function(b) { return this.$val.read(b); };
	File.Ptr.prototype.pread = function(b, off) {
		var n = 0, err = $ifaceNil, f, _tuple;
		f = this;
		if (true && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple = syscall.Pread(f.file.fd, b, off); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	File.prototype.pread = function(b, off) { return this.$val.pread(b, off); };
	File.Ptr.prototype.write = function(b) {
		var n = 0, err = $ifaceNil, f, bcap, _tuple, m, err$1, _tmp, _tmp$1;
		f = this;
		while (true) {
			bcap = b;
			if (true && bcap.$length > 1073741824) {
				bcap = $subslice(bcap, 0, 1073741824);
			}
			_tuple = syscall.Write(f.file.fd, bcap); m = _tuple[0]; err$1 = _tuple[1];
			n = n + (m) >> 0;
			if (0 < m && m < bcap.$length || $interfaceIsEqual(err$1, new syscall.Errno(4))) {
				b = $subslice(b, m);
				continue;
			}
			if (true && !((bcap.$length === b.$length)) && $interfaceIsEqual(err$1, $ifaceNil)) {
				b = $subslice(b, m);
				continue;
			}
			_tmp = n; _tmp$1 = err$1; n = _tmp; err = _tmp$1;
			return [n, err];
		}
	};
	File.prototype.write = function(b) { return this.$val.write(b); };
	File.Ptr.prototype.pwrite = function(b, off) {
		var n = 0, err = $ifaceNil, f, _tuple;
		f = this;
		if (true && b.$length > 1073741824) {
			b = $subslice(b, 0, 1073741824);
		}
		_tuple = syscall.Pwrite(f.file.fd, b, off); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	File.prototype.pwrite = function(b, off) { return this.$val.pwrite(b, off); };
	File.Ptr.prototype.seek = function(offset, whence) {
		var ret = new $Int64(0, 0), err = $ifaceNil, f, _tuple;
		f = this;
		_tuple = syscall.Seek(f.file.fd, offset, whence); ret = _tuple[0]; err = _tuple[1];
		return [ret, err];
	};
	File.prototype.seek = function(offset, whence) { return this.$val.seek(offset, whence); };
	Remove = $pkg.Remove = function(name) {
		var e, e1;
		e = syscall.Unlink(name);
		if ($interfaceIsEqual(e, $ifaceNil)) {
			return $ifaceNil;
		}
		e1 = syscall.Rmdir(name);
		if ($interfaceIsEqual(e1, $ifaceNil)) {
			return $ifaceNil;
		}
		if (!($interfaceIsEqual(e1, new syscall.Errno(20)))) {
			e = e1;
		}
		return new PathError.Ptr("remove", name, e);
	};
	basename = function(name) {
		var i;
		i = name.length - 1 >> 0;
		while (i > 0 && (name.charCodeAt(i) === 47)) {
			name = name.substring(0, i);
			i = i - (1) >> 0;
		}
		i = i - (1) >> 0;
		while (i >= 0) {
			if (name.charCodeAt(i) === 47) {
				name = name.substring((i + 1 >> 0));
				break;
			}
			i = i - (1) >> 0;
		}
		return name;
	};
	TempDir = $pkg.TempDir = function() {
		var dir;
		dir = Getenv("TMPDIR");
		if (dir === "") {
			dir = "/tmp";
		}
		return dir;
	};
	init$1 = function() {
		useSyscallwd = useSyscallwdDarwin;
	};
	useSyscallwdDarwin = function(err) {
		return !($interfaceIsEqual(err, new syscall.Errno(45)));
	};
	IsPathSeparator = $pkg.IsPathSeparator = function(c) {
		return 47 === c;
	};
	Pipe = $pkg.Pipe = function() {
		var r = ($ptrType(File)).nil, w = ($ptrType(File)).nil, err = $ifaceNil, p, e, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		p = ($arrayType($Int, 2)).zero(); $copy(p, ($arrayType($Int, 2)).zero(), ($arrayType($Int, 2)));
		syscall.ForkLock.RLock();
		e = syscall.Pipe($subslice(new ($sliceType($Int))(p), 0));
		if (!($interfaceIsEqual(e, $ifaceNil))) {
			syscall.ForkLock.RUnlock();
			_tmp = ($ptrType(File)).nil; _tmp$1 = ($ptrType(File)).nil; _tmp$2 = NewSyscallError("pipe", e); r = _tmp; w = _tmp$1; err = _tmp$2;
			return [r, w, err];
		}
		syscall.CloseOnExec(p[0]);
		syscall.CloseOnExec(p[1]);
		syscall.ForkLock.RUnlock();
		_tmp$3 = NewFile((p[0] >>> 0), "|0"); _tmp$4 = NewFile((p[1] >>> 0), "|1"); _tmp$5 = $ifaceNil; r = _tmp$3; w = _tmp$4; err = _tmp$5;
		return [r, w, err];
	};
	Exit = $pkg.Exit = function(code) {
		syscall.Exit(code);
	};
	fileInfoFromStat = function(st, name) {
		var fs, _ref;
		fs = new fileStat.Ptr(basename(name), st.Size, 0, $clone(timespecToTime($clone(st.Mtimespec, syscall.Timespec)), time.Time), st);
		fs.mode = (((st.Mode & 511) >>> 0) >>> 0);
		_ref = (st.Mode & 61440) >>> 0;
		if (_ref === 24576 || _ref === 57344) {
			fs.mode = (fs.mode | (67108864)) >>> 0;
		} else if (_ref === 8192) {
			fs.mode = (fs.mode | (69206016)) >>> 0;
		} else if (_ref === 16384) {
			fs.mode = (fs.mode | (2147483648)) >>> 0;
		} else if (_ref === 4096) {
			fs.mode = (fs.mode | (33554432)) >>> 0;
		} else if (_ref === 40960) {
			fs.mode = (fs.mode | (134217728)) >>> 0;
		} else if (_ref === 32768) {
		} else if (_ref === 49152) {
			fs.mode = (fs.mode | (16777216)) >>> 0;
		}
		if (!((((st.Mode & 1024) >>> 0) === 0))) {
			fs.mode = (fs.mode | (4194304)) >>> 0;
		}
		if (!((((st.Mode & 2048) >>> 0) === 0))) {
			fs.mode = (fs.mode | (8388608)) >>> 0;
		}
		if (!((((st.Mode & 512) >>> 0) === 0))) {
			fs.mode = (fs.mode | (1048576)) >>> 0;
		}
		return fs;
	};
	timespecToTime = function(ts) {
		return time.Unix(ts.Sec, ts.Nsec);
	};
	init$2 = function() {
		var _tuple, osver, err, i, _ref, _i, _rune;
		_tuple = syscall.Sysctl("kern.osrelease"); osver = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return;
		}
		i = 0;
		_ref = osver;
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			i = _i;
			if (!((osver.charCodeAt(i) === 46))) {
				_i += _rune[1];
				continue;
			}
			_i += _rune[1];
		}
		if (i > 2 || (i === 2) && osver.charCodeAt(0) >= 49 && osver.charCodeAt(1) >= 49) {
			supportsCloseOnExec = true;
		}
	};
	FileMode.prototype.String = function() {
		var m, buf, w, _ref, _i, _rune, i, c, y, _ref$1, _i$1, _rune$1, i$1, c$1, y$1;
		m = this.$val !== undefined ? this.$val : this;
		buf = ($arrayType($Uint8, 32)).zero(); $copy(buf, ($arrayType($Uint8, 32)).zero(), ($arrayType($Uint8, 32)));
		w = 0;
		_ref = "dalTLDpSugct";
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (!((((m & (((y = ((31 - i >> 0) >>> 0), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
				(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = (c << 24 >>> 24);
				w = w + (1) >> 0;
			}
			_i += _rune[1];
		}
		if (w === 0) {
			(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45;
			w = w + (1) >> 0;
		}
		_ref$1 = "rwxrwxrwx";
		_i$1 = 0;
		while (_i$1 < _ref$1.length) {
			_rune$1 = $decodeRune(_ref$1, _i$1);
			i$1 = _i$1;
			c$1 = _rune$1[0];
			if (!((((m & (((y$1 = ((8 - i$1 >> 0) >>> 0), y$1 < 32 ? (1 << y$1) : 0) >>> 0))) >>> 0) === 0))) {
				(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = (c$1 << 24 >>> 24);
			} else {
				(w < 0 || w >= buf.length) ? $throwRuntimeError("index out of range") : buf[w] = 45;
			}
			w = w + (1) >> 0;
			_i$1 += _rune$1[1];
		}
		return $bytesToString($subslice(new ($sliceType($Uint8))(buf), 0, w));
	};
	$ptrType(FileMode).prototype.String = function() { return new FileMode(this.$get()).String(); };
	FileMode.prototype.IsDir = function() {
		var m;
		m = this.$val !== undefined ? this.$val : this;
		return !((((m & 2147483648) >>> 0) === 0));
	};
	$ptrType(FileMode).prototype.IsDir = function() { return new FileMode(this.$get()).IsDir(); };
	FileMode.prototype.IsRegular = function() {
		var m;
		m = this.$val !== undefined ? this.$val : this;
		return ((m & 2399141888) >>> 0) === 0;
	};
	$ptrType(FileMode).prototype.IsRegular = function() { return new FileMode(this.$get()).IsRegular(); };
	FileMode.prototype.Perm = function() {
		var m;
		m = this.$val !== undefined ? this.$val : this;
		return (m & 511) >>> 0;
	};
	$ptrType(FileMode).prototype.Perm = function() { return new FileMode(this.$get()).Perm(); };
	fileStat.Ptr.prototype.Name = function() {
		var fs;
		fs = this;
		return fs.name;
	};
	fileStat.prototype.Name = function() { return this.$val.Name(); };
	fileStat.Ptr.prototype.IsDir = function() {
		var fs;
		fs = this;
		return new FileMode(fs.Mode()).IsDir();
	};
	fileStat.prototype.IsDir = function() { return this.$val.IsDir(); };
	fileStat.Ptr.prototype.Size = function() {
		var fs;
		fs = this;
		return fs.size;
	};
	fileStat.prototype.Size = function() { return this.$val.Size(); };
	fileStat.Ptr.prototype.Mode = function() {
		var fs;
		fs = this;
		return fs.mode;
	};
	fileStat.prototype.Mode = function() { return this.$val.Mode(); };
	fileStat.Ptr.prototype.ModTime = function() {
		var fs;
		fs = this;
		return fs.modTime;
	};
	fileStat.prototype.ModTime = function() { return this.$val.ModTime(); };
	fileStat.Ptr.prototype.Sys = function() {
		var fs;
		fs = this;
		return fs.sys;
	};
	fileStat.prototype.Sys = function() { return this.$val.Sys(); };
	$pkg.$init = function() {
		($ptrType(PathError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		PathError.init([["Op", "Op", "", $String, ""], ["Path", "Path", "", $String, ""], ["Err", "Err", "", $error, ""]]);
		($ptrType(SyscallError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		SyscallError.init([["Syscall", "Syscall", "", $String, ""], ["Err", "Err", "", $error, ""]]);
		($ptrType(Process)).methods = [["Kill", "Kill", "", $funcType([], [$error], false), -1], ["Release", "Release", "", $funcType([], [$error], false), -1], ["Signal", "Signal", "", $funcType([Signal], [$error], false), -1], ["Wait", "Wait", "", $funcType([], [($ptrType(ProcessState)), $error], false), -1], ["done", "done", "os", $funcType([], [$Bool], false), -1], ["kill", "kill", "os", $funcType([], [$error], false), -1], ["release", "release", "os", $funcType([], [$error], false), -1], ["setDone", "setDone", "os", $funcType([], [], false), -1], ["signal", "signal", "os", $funcType([Signal], [$error], false), -1], ["wait", "wait", "os", $funcType([], [($ptrType(ProcessState)), $error], false), -1]];
		Process.init([["Pid", "Pid", "", $Int, ""], ["handle", "handle", "os", $Uintptr, ""], ["isdone", "isdone", "os", $Uint32, ""]]);
		ProcAttr.init([["Dir", "Dir", "", $String, ""], ["Env", "Env", "", ($sliceType($String)), ""], ["Files", "Files", "", ($sliceType(($ptrType(File)))), ""], ["Sys", "Sys", "", ($ptrType(syscall.SysProcAttr)), ""]]);
		Signal.init([["Signal", "Signal", "", $funcType([], [], false)], ["String", "String", "", $funcType([], [$String], false)]]);
		($ptrType(ProcessState)).methods = [["Exited", "Exited", "", $funcType([], [$Bool], false), -1], ["Pid", "Pid", "", $funcType([], [$Int], false), -1], ["String", "String", "", $funcType([], [$String], false), -1], ["Success", "Success", "", $funcType([], [$Bool], false), -1], ["Sys", "Sys", "", $funcType([], [$emptyInterface], false), -1], ["SysUsage", "SysUsage", "", $funcType([], [$emptyInterface], false), -1], ["SystemTime", "SystemTime", "", $funcType([], [time.Duration], false), -1], ["UserTime", "UserTime", "", $funcType([], [time.Duration], false), -1], ["exited", "exited", "os", $funcType([], [$Bool], false), -1], ["success", "success", "os", $funcType([], [$Bool], false), -1], ["sys", "sys", "os", $funcType([], [$emptyInterface], false), -1], ["sysUsage", "sysUsage", "os", $funcType([], [$emptyInterface], false), -1], ["systemTime", "systemTime", "os", $funcType([], [time.Duration], false), -1], ["userTime", "userTime", "os", $funcType([], [time.Duration], false), -1]];
		ProcessState.init([["pid", "pid", "os", $Int, ""], ["status", "status", "os", syscall.WaitStatus, ""], ["rusage", "rusage", "os", ($ptrType(syscall.Rusage)), ""]]);
		($ptrType(LinkError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		LinkError.init([["Op", "Op", "", $String, ""], ["Old", "Old", "", $String, ""], ["New", "New", "", $String, ""], ["Err", "Err", "", $error, ""]]);
		File.methods = [["close", "close", "os", $funcType([], [$error], false), 0]];
		($ptrType(File)).methods = [["Chdir", "Chdir", "", $funcType([], [$error], false), -1], ["Chmod", "Chmod", "", $funcType([FileMode], [$error], false), -1], ["Chown", "Chown", "", $funcType([$Int, $Int], [$error], false), -1], ["Close", "Close", "", $funcType([], [$error], false), -1], ["Fd", "Fd", "", $funcType([], [$Uintptr], false), -1], ["Name", "Name", "", $funcType([], [$String], false), -1], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["ReadAt", "ReadAt", "", $funcType([($sliceType($Uint8)), $Int64], [$Int, $error], false), -1], ["Readdir", "Readdir", "", $funcType([$Int], [($sliceType(FileInfo)), $error], false), -1], ["Readdirnames", "Readdirnames", "", $funcType([$Int], [($sliceType($String)), $error], false), -1], ["Seek", "Seek", "", $funcType([$Int64, $Int], [$Int64, $error], false), -1], ["Stat", "Stat", "", $funcType([], [FileInfo, $error], false), -1], ["Sync", "Sync", "", $funcType([], [$error], false), -1], ["Truncate", "Truncate", "", $funcType([$Int64], [$error], false), -1], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["WriteAt", "WriteAt", "", $funcType([($sliceType($Uint8)), $Int64], [$Int, $error], false), -1], ["WriteString", "WriteString", "", $funcType([$String], [$Int, $error], false), -1], ["close", "close", "os", $funcType([], [$error], false), 0], ["pread", "pread", "os", $funcType([($sliceType($Uint8)), $Int64], [$Int, $error], false), -1], ["pwrite", "pwrite", "os", $funcType([($sliceType($Uint8)), $Int64], [$Int, $error], false), -1], ["read", "read", "os", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["readdir", "readdir", "os", $funcType([$Int], [($sliceType(FileInfo)), $error], false), -1], ["readdirnames", "readdirnames", "os", $funcType([$Int], [($sliceType($String)), $error], false), -1], ["seek", "seek", "os", $funcType([$Int64, $Int], [$Int64, $error], false), -1], ["write", "write", "os", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1]];
		File.init([["file", "", "os", ($ptrType(file)), ""]]);
		($ptrType(file)).methods = [["close", "close", "os", $funcType([], [$error], false), -1]];
		file.init([["fd", "fd", "os", $Int, ""], ["name", "name", "os", $String, ""], ["dirinfo", "dirinfo", "os", ($ptrType(dirInfo)), ""], ["nepipe", "nepipe", "os", $Int32, ""]]);
		dirInfo.init([["buf", "buf", "os", ($sliceType($Uint8)), ""], ["nbuf", "nbuf", "os", $Int, ""], ["bufp", "bufp", "os", $Int, ""]]);
		FileInfo.init([["IsDir", "IsDir", "", $funcType([], [$Bool], false)], ["ModTime", "ModTime", "", $funcType([], [time.Time], false)], ["Mode", "Mode", "", $funcType([], [FileMode], false)], ["Name", "Name", "", $funcType([], [$String], false)], ["Size", "Size", "", $funcType([], [$Int64], false)], ["Sys", "Sys", "", $funcType([], [$emptyInterface], false)]]);
		FileMode.methods = [["IsDir", "IsDir", "", $funcType([], [$Bool], false), -1], ["IsRegular", "IsRegular", "", $funcType([], [$Bool], false), -1], ["Perm", "Perm", "", $funcType([], [FileMode], false), -1], ["String", "String", "", $funcType([], [$String], false), -1]];
		($ptrType(FileMode)).methods = [["IsDir", "IsDir", "", $funcType([], [$Bool], false), -1], ["IsRegular", "IsRegular", "", $funcType([], [$Bool], false), -1], ["Perm", "Perm", "", $funcType([], [FileMode], false), -1], ["String", "String", "", $funcType([], [$String], false), -1]];
		($ptrType(fileStat)).methods = [["IsDir", "IsDir", "", $funcType([], [$Bool], false), -1], ["ModTime", "ModTime", "", $funcType([], [time.Time], false), -1], ["Mode", "Mode", "", $funcType([], [FileMode], false), -1], ["Name", "Name", "", $funcType([], [$String], false), -1], ["Size", "Size", "", $funcType([], [$Int64], false), -1], ["Sys", "Sys", "", $funcType([], [$emptyInterface], false), -1]];
		fileStat.init([["name", "name", "os", $String, ""], ["size", "size", "os", $Int64, ""], ["mode", "mode", "os", FileMode, ""], ["modTime", "modTime", "os", time.Time, ""], ["sys", "sys", "os", $emptyInterface, ""]]);
		$pkg.Args = ($sliceType($String)).nil;
		supportsCloseOnExec = false;
		$pkg.ErrInvalid = errors.New("invalid argument");
		$pkg.ErrPermission = errors.New("permission denied");
		$pkg.ErrExist = errors.New("file already exists");
		$pkg.ErrNotExist = errors.New("file does not exist");
		$pkg.Kill = new syscall.Signal(9);
		$pkg.Stdin = NewFile((syscall.Stdin >>> 0), "/dev/stdin");
		$pkg.Stdout = NewFile((syscall.Stdout >>> 0), "/dev/stdout");
		$pkg.Stderr = NewFile((syscall.Stderr >>> 0), "/dev/stderr");
		useSyscallwd = (function(param) {
			return true;
		});
		lstat = Lstat;
		init();
		init$1();
		init$2();
	};
	return $pkg;
})();
$packages["reflect"] = (function() {
	var $pkg = {}, runtime = $packages["runtime"], js = $packages["github.com/gopherjs/gopherjs/js"], strconv = $packages["strconv"], sync = $packages["sync"], math = $packages["math"], mapIter, Type, Kind, rtype, method, uncommonType, ChanDir, arrayType, chanType, funcType, imethod, interfaceType, mapType, ptrType, sliceType, structField, structType, Method, StructField, StructTag, fieldScan, Value, flag, ValueError, iword, nonEmptyInterface, initialized, kindNames, uint8Type, init, jsType, reflectType, isWrapped, copyStruct, makeValue, MakeSlice, jsObject, TypeOf, ValueOf, SliceOf, Zero, unsafe_New, makeInt, memmove, loadScalar, mapaccess, mapassign, mapdelete, mapiterinit, mapiterkey, mapiternext, maplen, cvtDirect, Copy, methodReceiver, valueInterface, ifaceE2I, methodName, makeMethodValue, DeepEqual, deepValueEqualJs, PtrTo, implements$1, directlyAssignable, haveIdenticalUnderlyingType, toType, overflowFloat32, typesMustMatch, New, convertOp, makeFloat, makeComplex, makeString, makeBytes, makeRunes, cvtInt, cvtUint, cvtFloatInt, cvtFloatUint, cvtIntFloat, cvtUintFloat, cvtFloat, cvtComplex, cvtIntString, cvtUintString, cvtBytesString, cvtStringBytes, cvtRunesString, cvtStringRunes, cvtT2I, cvtI2I, call;
	mapIter = $pkg.mapIter = $newType(0, "Struct", "reflect.mapIter", "mapIter", "reflect", function(t_, m_, keys_, i_) {
		this.$val = this;
		this.t = t_ !== undefined ? t_ : $ifaceNil;
		this.m = m_ !== undefined ? m_ : $ifaceNil;
		this.keys = keys_ !== undefined ? keys_ : $ifaceNil;
		this.i = i_ !== undefined ? i_ : 0;
	});
	Type = $pkg.Type = $newType(8, "Interface", "reflect.Type", "Type", "reflect", null);
	Kind = $pkg.Kind = $newType(4, "Uint", "reflect.Kind", "Kind", "reflect", null);
	rtype = $pkg.rtype = $newType(0, "Struct", "reflect.rtype", "rtype", "reflect", function(size_, hash_, _$2_, align_, fieldAlign_, kind_, alg_, gc_, string_, uncommonType_, ptrToThis_, zero_) {
		this.$val = this;
		this.size = size_ !== undefined ? size_ : 0;
		this.hash = hash_ !== undefined ? hash_ : 0;
		this._$2 = _$2_ !== undefined ? _$2_ : 0;
		this.align = align_ !== undefined ? align_ : 0;
		this.fieldAlign = fieldAlign_ !== undefined ? fieldAlign_ : 0;
		this.kind = kind_ !== undefined ? kind_ : 0;
		this.alg = alg_ !== undefined ? alg_ : ($ptrType($Uintptr)).nil;
		this.gc = gc_ !== undefined ? gc_ : 0;
		this.string = string_ !== undefined ? string_ : ($ptrType($String)).nil;
		this.uncommonType = uncommonType_ !== undefined ? uncommonType_ : ($ptrType(uncommonType)).nil;
		this.ptrToThis = ptrToThis_ !== undefined ? ptrToThis_ : ($ptrType(rtype)).nil;
		this.zero = zero_ !== undefined ? zero_ : 0;
	});
	method = $pkg.method = $newType(0, "Struct", "reflect.method", "method", "reflect", function(name_, pkgPath_, mtyp_, typ_, ifn_, tfn_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : ($ptrType($String)).nil;
		this.pkgPath = pkgPath_ !== undefined ? pkgPath_ : ($ptrType($String)).nil;
		this.mtyp = mtyp_ !== undefined ? mtyp_ : ($ptrType(rtype)).nil;
		this.typ = typ_ !== undefined ? typ_ : ($ptrType(rtype)).nil;
		this.ifn = ifn_ !== undefined ? ifn_ : 0;
		this.tfn = tfn_ !== undefined ? tfn_ : 0;
	});
	uncommonType = $pkg.uncommonType = $newType(0, "Struct", "reflect.uncommonType", "uncommonType", "reflect", function(name_, pkgPath_, methods_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : ($ptrType($String)).nil;
		this.pkgPath = pkgPath_ !== undefined ? pkgPath_ : ($ptrType($String)).nil;
		this.methods = methods_ !== undefined ? methods_ : ($sliceType(method)).nil;
	});
	ChanDir = $pkg.ChanDir = $newType(4, "Int", "reflect.ChanDir", "ChanDir", "reflect", null);
	arrayType = $pkg.arrayType = $newType(0, "Struct", "reflect.arrayType", "arrayType", "reflect", function(rtype_, elem_, slice_, len_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.elem = elem_ !== undefined ? elem_ : ($ptrType(rtype)).nil;
		this.slice = slice_ !== undefined ? slice_ : ($ptrType(rtype)).nil;
		this.len = len_ !== undefined ? len_ : 0;
	});
	chanType = $pkg.chanType = $newType(0, "Struct", "reflect.chanType", "chanType", "reflect", function(rtype_, elem_, dir_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.elem = elem_ !== undefined ? elem_ : ($ptrType(rtype)).nil;
		this.dir = dir_ !== undefined ? dir_ : 0;
	});
	funcType = $pkg.funcType = $newType(0, "Struct", "reflect.funcType", "funcType", "reflect", function(rtype_, dotdotdot_, in$2_, out_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.dotdotdot = dotdotdot_ !== undefined ? dotdotdot_ : false;
		this.in$2 = in$2_ !== undefined ? in$2_ : ($sliceType(($ptrType(rtype)))).nil;
		this.out = out_ !== undefined ? out_ : ($sliceType(($ptrType(rtype)))).nil;
	});
	imethod = $pkg.imethod = $newType(0, "Struct", "reflect.imethod", "imethod", "reflect", function(name_, pkgPath_, typ_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : ($ptrType($String)).nil;
		this.pkgPath = pkgPath_ !== undefined ? pkgPath_ : ($ptrType($String)).nil;
		this.typ = typ_ !== undefined ? typ_ : ($ptrType(rtype)).nil;
	});
	interfaceType = $pkg.interfaceType = $newType(0, "Struct", "reflect.interfaceType", "interfaceType", "reflect", function(rtype_, methods_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.methods = methods_ !== undefined ? methods_ : ($sliceType(imethod)).nil;
	});
	mapType = $pkg.mapType = $newType(0, "Struct", "reflect.mapType", "mapType", "reflect", function(rtype_, key_, elem_, bucket_, hmap_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.key = key_ !== undefined ? key_ : ($ptrType(rtype)).nil;
		this.elem = elem_ !== undefined ? elem_ : ($ptrType(rtype)).nil;
		this.bucket = bucket_ !== undefined ? bucket_ : ($ptrType(rtype)).nil;
		this.hmap = hmap_ !== undefined ? hmap_ : ($ptrType(rtype)).nil;
	});
	ptrType = $pkg.ptrType = $newType(0, "Struct", "reflect.ptrType", "ptrType", "reflect", function(rtype_, elem_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.elem = elem_ !== undefined ? elem_ : ($ptrType(rtype)).nil;
	});
	sliceType = $pkg.sliceType = $newType(0, "Struct", "reflect.sliceType", "sliceType", "reflect", function(rtype_, elem_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.elem = elem_ !== undefined ? elem_ : ($ptrType(rtype)).nil;
	});
	structField = $pkg.structField = $newType(0, "Struct", "reflect.structField", "structField", "reflect", function(name_, pkgPath_, typ_, tag_, offset_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : ($ptrType($String)).nil;
		this.pkgPath = pkgPath_ !== undefined ? pkgPath_ : ($ptrType($String)).nil;
		this.typ = typ_ !== undefined ? typ_ : ($ptrType(rtype)).nil;
		this.tag = tag_ !== undefined ? tag_ : ($ptrType($String)).nil;
		this.offset = offset_ !== undefined ? offset_ : 0;
	});
	structType = $pkg.structType = $newType(0, "Struct", "reflect.structType", "structType", "reflect", function(rtype_, fields_) {
		this.$val = this;
		this.rtype = rtype_ !== undefined ? rtype_ : new rtype.Ptr();
		this.fields = fields_ !== undefined ? fields_ : ($sliceType(structField)).nil;
	});
	Method = $pkg.Method = $newType(0, "Struct", "reflect.Method", "Method", "reflect", function(Name_, PkgPath_, Type_, Func_, Index_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.PkgPath = PkgPath_ !== undefined ? PkgPath_ : "";
		this.Type = Type_ !== undefined ? Type_ : $ifaceNil;
		this.Func = Func_ !== undefined ? Func_ : new Value.Ptr();
		this.Index = Index_ !== undefined ? Index_ : 0;
	});
	StructField = $pkg.StructField = $newType(0, "Struct", "reflect.StructField", "StructField", "reflect", function(Name_, PkgPath_, Type_, Tag_, Offset_, Index_, Anonymous_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.PkgPath = PkgPath_ !== undefined ? PkgPath_ : "";
		this.Type = Type_ !== undefined ? Type_ : $ifaceNil;
		this.Tag = Tag_ !== undefined ? Tag_ : "";
		this.Offset = Offset_ !== undefined ? Offset_ : 0;
		this.Index = Index_ !== undefined ? Index_ : ($sliceType($Int)).nil;
		this.Anonymous = Anonymous_ !== undefined ? Anonymous_ : false;
	});
	StructTag = $pkg.StructTag = $newType(8, "String", "reflect.StructTag", "StructTag", "reflect", null);
	fieldScan = $pkg.fieldScan = $newType(0, "Struct", "reflect.fieldScan", "fieldScan", "reflect", function(typ_, index_) {
		this.$val = this;
		this.typ = typ_ !== undefined ? typ_ : ($ptrType(structType)).nil;
		this.index = index_ !== undefined ? index_ : ($sliceType($Int)).nil;
	});
	Value = $pkg.Value = $newType(0, "Struct", "reflect.Value", "Value", "reflect", function(typ_, ptr_, scalar_, flag_) {
		this.$val = this;
		this.typ = typ_ !== undefined ? typ_ : ($ptrType(rtype)).nil;
		this.ptr = ptr_ !== undefined ? ptr_ : 0;
		this.scalar = scalar_ !== undefined ? scalar_ : 0;
		this.flag = flag_ !== undefined ? flag_ : 0;
	});
	flag = $pkg.flag = $newType(4, "Uintptr", "reflect.flag", "flag", "reflect", null);
	ValueError = $pkg.ValueError = $newType(0, "Struct", "reflect.ValueError", "ValueError", "reflect", function(Method_, Kind_) {
		this.$val = this;
		this.Method = Method_ !== undefined ? Method_ : "";
		this.Kind = Kind_ !== undefined ? Kind_ : 0;
	});
	iword = $pkg.iword = $newType(4, "UnsafePointer", "reflect.iword", "iword", "reflect", null);
	nonEmptyInterface = $pkg.nonEmptyInterface = $newType(0, "Struct", "reflect.nonEmptyInterface", "nonEmptyInterface", "reflect", function(itab_, word_) {
		this.$val = this;
		this.itab = itab_ !== undefined ? itab_ : ($ptrType(($structType([["ityp", "ityp", "reflect", ($ptrType(rtype)), ""], ["typ", "typ", "reflect", ($ptrType(rtype)), ""], ["link", "link", "reflect", $UnsafePointer, ""], ["bad", "bad", "reflect", $Int32, ""], ["unused", "unused", "reflect", $Int32, ""], ["fun", "fun", "reflect", ($arrayType($UnsafePointer, 100000)), ""]])))).nil;
		this.word = word_ !== undefined ? word_ : 0;
	});
	init = function() {
		var used, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x$10, x$11, x$12, pkg, _map, _key;
		used = (function(i) {
		});
		used((x = new rtype.Ptr(0, 0, 0, 0, 0, 0, ($ptrType($Uintptr)).nil, 0, ($ptrType($String)).nil, ($ptrType(uncommonType)).nil, ($ptrType(rtype)).nil, 0), new x.constructor.Struct(x)));
		used((x$1 = new uncommonType.Ptr(($ptrType($String)).nil, ($ptrType($String)).nil, ($sliceType(method)).nil), new x$1.constructor.Struct(x$1)));
		used((x$2 = new method.Ptr(($ptrType($String)).nil, ($ptrType($String)).nil, ($ptrType(rtype)).nil, ($ptrType(rtype)).nil, 0, 0), new x$2.constructor.Struct(x$2)));
		used((x$3 = new arrayType.Ptr(new rtype.Ptr(), ($ptrType(rtype)).nil, ($ptrType(rtype)).nil, 0), new x$3.constructor.Struct(x$3)));
		used((x$4 = new chanType.Ptr(new rtype.Ptr(), ($ptrType(rtype)).nil, 0), new x$4.constructor.Struct(x$4)));
		used((x$5 = new funcType.Ptr(new rtype.Ptr(), false, ($sliceType(($ptrType(rtype)))).nil, ($sliceType(($ptrType(rtype)))).nil), new x$5.constructor.Struct(x$5)));
		used((x$6 = new interfaceType.Ptr(new rtype.Ptr(), ($sliceType(imethod)).nil), new x$6.constructor.Struct(x$6)));
		used((x$7 = new mapType.Ptr(new rtype.Ptr(), ($ptrType(rtype)).nil, ($ptrType(rtype)).nil, ($ptrType(rtype)).nil, ($ptrType(rtype)).nil), new x$7.constructor.Struct(x$7)));
		used((x$8 = new ptrType.Ptr(new rtype.Ptr(), ($ptrType(rtype)).nil), new x$8.constructor.Struct(x$8)));
		used((x$9 = new sliceType.Ptr(new rtype.Ptr(), ($ptrType(rtype)).nil), new x$9.constructor.Struct(x$9)));
		used((x$10 = new structType.Ptr(new rtype.Ptr(), ($sliceType(structField)).nil), new x$10.constructor.Struct(x$10)));
		used((x$11 = new imethod.Ptr(($ptrType($String)).nil, ($ptrType($String)).nil, ($ptrType(rtype)).nil), new x$11.constructor.Struct(x$11)));
		used((x$12 = new structField.Ptr(($ptrType($String)).nil, ($ptrType($String)).nil, ($ptrType(rtype)).nil, ($ptrType($String)).nil, 0), new x$12.constructor.Struct(x$12)));
		pkg = $pkg;
		pkg.kinds = $externalize((_map = new $Map(), _key = "Bool", _map[_key] = { k: _key, v: 1 }, _key = "Int", _map[_key] = { k: _key, v: 2 }, _key = "Int8", _map[_key] = { k: _key, v: 3 }, _key = "Int16", _map[_key] = { k: _key, v: 4 }, _key = "Int32", _map[_key] = { k: _key, v: 5 }, _key = "Int64", _map[_key] = { k: _key, v: 6 }, _key = "Uint", _map[_key] = { k: _key, v: 7 }, _key = "Uint8", _map[_key] = { k: _key, v: 8 }, _key = "Uint16", _map[_key] = { k: _key, v: 9 }, _key = "Uint32", _map[_key] = { k: _key, v: 10 }, _key = "Uint64", _map[_key] = { k: _key, v: 11 }, _key = "Uintptr", _map[_key] = { k: _key, v: 12 }, _key = "Float32", _map[_key] = { k: _key, v: 13 }, _key = "Float64", _map[_key] = { k: _key, v: 14 }, _key = "Complex64", _map[_key] = { k: _key, v: 15 }, _key = "Complex128", _map[_key] = { k: _key, v: 16 }, _key = "Array", _map[_key] = { k: _key, v: 17 }, _key = "Chan", _map[_key] = { k: _key, v: 18 }, _key = "Func", _map[_key] = { k: _key, v: 19 }, _key = "Interface", _map[_key] = { k: _key, v: 20 }, _key = "Map", _map[_key] = { k: _key, v: 21 }, _key = "Ptr", _map[_key] = { k: _key, v: 22 }, _key = "Slice", _map[_key] = { k: _key, v: 23 }, _key = "String", _map[_key] = { k: _key, v: 24 }, _key = "Struct", _map[_key] = { k: _key, v: 25 }, _key = "UnsafePointer", _map[_key] = { k: _key, v: 26 }, _map), ($mapType($String, Kind)));
		pkg.RecvDir = 1;
		pkg.SendDir = 2;
		pkg.BothDir = 3;
		$reflect = pkg;
		initialized = true;
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ($ptrType(rtype)));
	};
	jsType = function(typ) {
		return typ.jsType;
	};
	reflectType = function(typ) {
		return typ.reflectType();
	};
	isWrapped = function(typ) {
		var _ref;
		_ref = typ.Kind();
		if (_ref === 1 || _ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 12 || _ref === 13 || _ref === 14 || _ref === 17 || _ref === 21 || _ref === 19 || _ref === 24 || _ref === 25) {
			return true;
		} else if (_ref === 22) {
			return typ.Elem().Kind() === 17;
		}
		return false;
	};
	copyStruct = function(dst, src, typ) {
		var fields, i, name;
		fields = jsType(typ).fields;
		i = 0;
		while (i < $parseInt(fields.length)) {
			name = $internalize(fields[i][0], $String);
			dst[$externalize(name, $String)] = src[$externalize(name, $String)];
			i = i + (1) >> 0;
		}
	};
	makeValue = function(t, v, fl) {
		var rt;
		rt = t.common();
		if ((t.Kind() === 17) || (t.Kind() === 25) || rt.pointers()) {
			return new Value.Ptr(rt, v, 0, (fl | ((t.Kind() >>> 0) << 4 >>> 0)) >>> 0);
		}
		if (t.Size() > 4 || (t.Kind() === 24)) {
			return new Value.Ptr(rt, $newDataPointer(v, jsType(rt.ptrTo())), 0, (((fl | ((t.Kind() >>> 0) << 4 >>> 0)) >>> 0) | 2) >>> 0);
		}
		return new Value.Ptr(rt, 0, v, (fl | ((t.Kind() >>> 0) << 4 >>> 0)) >>> 0);
	};
	MakeSlice = $pkg.MakeSlice = function(typ, len, cap) {
		if (!((typ.Kind() === 23))) {
			$panic(new $String("reflect.MakeSlice of non-slice type"));
		}
		if (len < 0) {
			$panic(new $String("reflect.MakeSlice: negative len"));
		}
		if (cap < 0) {
			$panic(new $String("reflect.MakeSlice: negative cap"));
		}
		if (len > cap) {
			$panic(new $String("reflect.MakeSlice: len > cap"));
		}
		return makeValue(typ, jsType(typ).make(len, cap, $externalize((function() {
			return jsType(typ.Elem()).zero();
		}), ($funcType([], [js.Object], false)))), 0);
	};
	jsObject = function() {
		return reflectType($packages[$externalize("github.com/gopherjs/gopherjs/js", $String)].Object);
	};
	TypeOf = $pkg.TypeOf = function(i) {
		var c;
		if (!initialized) {
			return new rtype.Ptr(0, 0, 0, 0, 0, 0, ($ptrType($Uintptr)).nil, 0, ($ptrType($String)).nil, ($ptrType(uncommonType)).nil, ($ptrType(rtype)).nil, 0);
		}
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return $ifaceNil;
		}
		c = i.constructor;
		if (c.kind === undefined) {
			return jsObject();
		}
		return reflectType(c);
	};
	ValueOf = $pkg.ValueOf = function(i) {
		var c;
		if ($interfaceIsEqual(i, $ifaceNil)) {
			return new Value.Ptr(($ptrType(rtype)).nil, 0, 0, 0);
		}
		c = i.constructor;
		if (c.kind === undefined) {
			return new Value.Ptr(jsObject(), 0, i, 320);
		}
		return makeValue(reflectType(c), i.$val, 0);
	};
	rtype.Ptr.prototype.ptrTo = function() {
		var t;
		t = this;
		return reflectType($ptrType(jsType(t)));
	};
	rtype.prototype.ptrTo = function() { return this.$val.ptrTo(); };
	SliceOf = $pkg.SliceOf = function(t) {
		return reflectType($sliceType(jsType(t)));
	};
	Zero = $pkg.Zero = function(typ) {
		return makeValue(typ, jsType(typ).zero(), 0);
	};
	unsafe_New = function(typ) {
		var _ref;
		_ref = typ.Kind();
		if (_ref === 25) {
			return new (jsType(typ).Ptr)();
		} else if (_ref === 17) {
			return jsType(typ).zero();
		} else {
			return $newDataPointer(jsType(typ).zero(), jsType(typ.ptrTo()));
		}
	};
	makeInt = function(f, bits, t) {
		var typ, ptr, s, _ref;
		typ = t.common();
		if (typ.size > 4) {
			ptr = unsafe_New(typ);
			ptr.$set(bits);
			return new Value.Ptr(typ, ptr, 0, (((f | 2) >>> 0) | ((typ.Kind() >>> 0) << 4 >>> 0)) >>> 0);
		}
		s = 0;
		_ref = typ.Kind();
		if (_ref === 3) {
			new ($ptrType($Uintptr))(function() { return s; }, function($v) { s = $v; }).$set((bits.$low << 24 >> 24));
		} else if (_ref === 4) {
			new ($ptrType($Uintptr))(function() { return s; }, function($v) { s = $v; }).$set((bits.$low << 16 >> 16));
		} else if (_ref === 2 || _ref === 5) {
			new ($ptrType($Uintptr))(function() { return s; }, function($v) { s = $v; }).$set((bits.$low >> 0));
		} else if (_ref === 8) {
			new ($ptrType($Uintptr))(function() { return s; }, function($v) { s = $v; }).$set((bits.$low << 24 >>> 24));
		} else if (_ref === 9) {
			new ($ptrType($Uintptr))(function() { return s; }, function($v) { s = $v; }).$set((bits.$low << 16 >>> 16));
		} else if (_ref === 7 || _ref === 10 || _ref === 12) {
			new ($ptrType($Uintptr))(function() { return s; }, function($v) { s = $v; }).$set((bits.$low >>> 0));
		}
		return new Value.Ptr(typ, 0, s, (f | ((typ.Kind() >>> 0) << 4 >>> 0)) >>> 0);
	};
	memmove = function(adst, asrc, n) {
		adst.$set(asrc.$get());
	};
	loadScalar = function(p, n) {
		return p.$get();
	};
	mapaccess = function(t, m, key) {
		var k, entry;
		k = key.$get();
		if (!(k.$key === undefined)) {
			k = k.$key();
		}
		entry = m[$externalize($internalize(k, $String), $String)];
		if (entry === undefined) {
			return 0;
		}
		return $newDataPointer(entry.v, jsType(PtrTo(t.Elem())));
	};
	mapassign = function(t, m, key, val) {
		var kv, k, jsVal, et, newVal, entry;
		kv = key.$get();
		k = kv;
		if (!(k.$key === undefined)) {
			k = k.$key();
		}
		jsVal = val.$get();
		et = t.Elem();
		if (et.Kind() === 25) {
			newVal = jsType(et).zero();
			copyStruct(newVal, jsVal, et);
			jsVal = newVal;
		}
		entry = new ($global.Object)();
		entry.k = kv;
		entry.v = jsVal;
		m[$externalize($internalize(k, $String), $String)] = entry;
	};
	mapdelete = function(t, m, key) {
		var k;
		k = key.$get();
		if (!(k.$key === undefined)) {
			k = k.$key();
		}
		delete m[$externalize($internalize(k, $String), $String)];
	};
	mapiterinit = function(t, m) {
		return new mapIter.Ptr(t, m, $keys(m), 0);
	};
	mapiterkey = function(it) {
		var iter, k;
		iter = it;
		k = iter.keys[iter.i];
		return $newDataPointer(iter.m[$externalize($internalize(k, $String), $String)].k, jsType(PtrTo(iter.t.Key())));
	};
	mapiternext = function(it) {
		var iter;
		iter = it;
		iter.i = iter.i + (1) >> 0;
	};
	maplen = function(m) {
		return $parseInt($keys(m).length);
	};
	cvtDirect = function(v, typ) {
		var srcVal, val, k, _ref, slice;
		srcVal = v.iword();
		if (srcVal === jsType(v.typ).nil) {
			return makeValue(typ, jsType(typ).nil, v.flag);
		}
		val = $ifaceNil;
		k = typ.Kind();
		_ref = k;
		switch (0) { default: if (_ref === 18) {
			val = new (jsType(typ))();
		} else if (_ref === 23) {
			slice = new (jsType(typ))(srcVal.$array);
			slice.$offset = srcVal.$offset;
			slice.$length = srcVal.$length;
			slice.$capacity = srcVal.$capacity;
			val = $newDataPointer(slice, jsType(PtrTo(typ)));
		} else if (_ref === 22) {
			if (typ.Elem().Kind() === 25) {
				if ($interfaceIsEqual(typ.Elem(), v.typ.Elem())) {
					val = srcVal;
					break;
				}
				val = new (jsType(typ))();
				copyStruct(val, srcVal, typ.Elem());
				break;
			}
			val = new (jsType(typ))(srcVal.$get, srcVal.$set);
		} else if (_ref === 25) {
			val = new (jsType(typ).Ptr)();
			copyStruct(val, srcVal, typ);
		} else if (_ref === 17 || _ref === 19 || _ref === 20 || _ref === 21 || _ref === 24) {
			val = v.ptr;
		} else {
			$panic(new ValueError.Ptr("reflect.Convert", k));
		} }
		return new Value.Ptr(typ.common(), val, 0, (((v.flag & 3) >>> 0) | ((typ.Kind() >>> 0) << 4 >>> 0)) >>> 0);
	};
	Copy = $pkg.Copy = function(dst, src) {
		var dk, sk, dstVal, srcVal;
		dk = new flag(dst.flag).kind();
		if (!((dk === 17)) && !((dk === 23))) {
			$panic(new ValueError.Ptr("reflect.Copy", dk));
		}
		if (dk === 17) {
			new flag(dst.flag).mustBeAssignable();
		}
		new flag(dst.flag).mustBeExported();
		sk = new flag(src.flag).kind();
		if (!((sk === 17)) && !((sk === 23))) {
			$panic(new ValueError.Ptr("reflect.Copy", sk));
		}
		new flag(src.flag).mustBeExported();
		typesMustMatch("reflect.Copy", dst.typ.Elem(), src.typ.Elem());
		dstVal = dst.iword();
		if (dk === 17) {
			dstVal = new (jsType(SliceOf(dst.typ.Elem())))(dstVal);
		}
		srcVal = src.iword();
		if (sk === 17) {
			srcVal = new (jsType(SliceOf(src.typ.Elem())))(srcVal);
		}
		return $parseInt($copySlice(dstVal, srcVal)) >> 0;
	};
	methodReceiver = function(op, v, i) {
		var rcvrtype = ($ptrType(rtype)).nil, t = ($ptrType(rtype)).nil, fn = 0, name, tt, x, m, iface, ut, x$1, m$1, rcvr;
		name = "";
		if (v.typ.Kind() === 20) {
			tt = v.typ.interfaceType;
			if (i < 0 || i >= tt.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (!($pointerIsEqual(m.pkgPath, ($ptrType($String)).nil))) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			iface = $clone(v.ptr, nonEmptyInterface);
			if (iface.itab === ($ptrType(($structType([["ityp", "ityp", "reflect", ($ptrType(rtype)), ""], ["typ", "typ", "reflect", ($ptrType(rtype)), ""], ["link", "link", "reflect", $UnsafePointer, ""], ["bad", "bad", "reflect", $Int32, ""], ["unused", "unused", "reflect", $Int32, ""], ["fun", "fun", "reflect", ($arrayType($UnsafePointer, 100000)), ""]])))).nil) {
				$panic(new $String("reflect: " + op + " of method on nil interface value"));
			}
			t = m.typ;
			name = m.name.$get();
		} else {
			ut = v.typ.uncommonType.uncommon();
			if (ut === ($ptrType(uncommonType)).nil || i < 0 || i >= ut.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m$1 = (x$1 = ut.methods, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
			if (!($pointerIsEqual(m$1.pkgPath, ($ptrType($String)).nil))) {
				$panic(new $String("reflect: " + op + " of unexported method"));
			}
			t = m$1.mtyp;
			name = $internalize(jsType(v.typ).methods[i][0], $String);
		}
		rcvr = v.iword();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fn = rcvr[$externalize(name, $String)];
		return [rcvrtype, t, fn];
	};
	valueInterface = function(v, safe) {
		if (v.flag === 0) {
			$panic(new ValueError.Ptr("reflect.Value.Interface", 0));
		}
		if (safe && !((((v.flag & 1) >>> 0) === 0))) {
			$panic(new $String("reflect.Value.Interface: cannot return value obtained from unexported field or method"));
		}
		if (!((((v.flag & 8) >>> 0) === 0))) {
			$copy(v, makeMethodValue("Interface", $clone(v, Value)), Value);
		}
		if (isWrapped(v.typ)) {
			return new (jsType(v.typ))(v.iword());
		}
		return v.iword();
	};
	ifaceE2I = function(t, src, dst) {
		dst.$set(src);
	};
	methodName = function() {
		return "?FIXME?";
	};
	makeMethodValue = function(op, v) {
		var _tuple, fn, rcvr, fv;
		if (((v.flag & 8) >>> 0) === 0) {
			$panic(new $String("reflect: internal error: invalid use of makePartialFunc"));
		}
		_tuple = methodReceiver(op, $clone(v, Value), (v.flag >> 0) >> 9 >> 0); fn = _tuple[2];
		rcvr = v.iword();
		if (isWrapped(v.typ)) {
			rcvr = new (jsType(v.typ))(rcvr);
		}
		fv = (function() {
			return fn.apply(rcvr, $externalize(new ($sliceType(js.Object))($global.Array.prototype.slice.call(arguments, [])), ($sliceType(js.Object))));
		});
		return new Value.Ptr(v.Type().common(), fv, 0, (((v.flag & 1) >>> 0) | 304) >>> 0);
	};
	rtype.Ptr.prototype.pointers = function() {
		var t, _ref;
		t = this;
		_ref = t.Kind();
		if (_ref === 22 || _ref === 21 || _ref === 18 || _ref === 19 || _ref === 25 || _ref === 17) {
			return true;
		} else {
			return false;
		}
	};
	rtype.prototype.pointers = function() { return this.$val.pointers(); };
	uncommonType.Ptr.prototype.Method = function(i) {
		var m = new Method.Ptr(), t, x, p, fl, mt, name, fn;
		t = this;
		if (t === ($ptrType(uncommonType)).nil || i < 0 || i >= t.methods.$length) {
			$panic(new $String("reflect: Method index out of range"));
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		if (!($pointerIsEqual(p.name, ($ptrType($String)).nil))) {
			m.Name = p.name.$get();
		}
		fl = 304;
		if (!($pointerIsEqual(p.pkgPath, ($ptrType($String)).nil))) {
			m.PkgPath = p.pkgPath.$get();
			fl = (fl | (1)) >>> 0;
		}
		mt = p.typ;
		m.Type = mt;
		name = $internalize(t.jsType.methods[i][0], $String);
		fn = (function(rcvr) {
			return rcvr[$externalize(name, $String)].apply(rcvr, $externalize($subslice(new ($sliceType(js.Object))($global.Array.prototype.slice.call(arguments, [])), 1), ($sliceType(js.Object))));
		});
		$copy(m.Func, new Value.Ptr(mt, fn, 0, fl), Value);
		m.Index = i;
		return m;
	};
	uncommonType.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.Ptr.prototype.iword = function() {
		var v, val, _ref, newVal;
		v = new Value.Ptr(); $copy(v, this, Value);
		if ((v.typ.Kind() === 17) || (v.typ.Kind() === 25)) {
			return v.ptr;
		}
		if (!((((v.flag & 2) >>> 0) === 0))) {
			val = v.ptr.$get();
			if (!(val === $ifaceNil) && !(val.constructor === jsType(v.typ))) {
				_ref = v.typ.Kind();
				switch (0) { default: if (_ref === 11 || _ref === 6) {
					val = new (jsType(v.typ))(val.$high, val.$low);
				} else if (_ref === 15 || _ref === 16) {
					val = new (jsType(v.typ))(val.$real, val.$imag);
				} else if (_ref === 23) {
					if (val === val.constructor.nil) {
						val = jsType(v.typ).nil;
						break;
					}
					newVal = new (jsType(v.typ))(val.$array);
					newVal.$offset = val.$offset;
					newVal.$length = val.$length;
					newVal.$capacity = val.$capacity;
					val = newVal;
				} }
			}
			return val;
		}
		if (v.typ.pointers()) {
			return v.ptr;
		}
		return v.scalar;
	};
	Value.prototype.iword = function() { return this.$val.iword(); };
	Value.Ptr.prototype.call = function(op, in$1) {
		var v, t, fn, rcvr, _tuple, isSlice, n, _ref, _i, x, i, _tmp, _tmp$1, xt, targ, m, slice, elem, i$1, x$1, x$2, xt$1, origIn, nin, nout, argsArray, _ref$1, _i$1, i$2, arg, results, _ref$2, ret, _ref$3, _i$2, i$3;
		v = new Value.Ptr(); $copy(v, this, Value);
		t = v.typ;
		fn = 0;
		rcvr = $ifaceNil;
		if (!((((v.flag & 8) >>> 0) === 0))) {
			_tuple = methodReceiver(op, $clone(v, Value), (v.flag >> 0) >> 9 >> 0); t = _tuple[1]; fn = _tuple[2];
			rcvr = v.iword();
			if (isWrapped(v.typ)) {
				rcvr = new (jsType(v.typ))(rcvr);
			}
		} else {
			fn = v.iword();
		}
		if (fn === 0) {
			$panic(new $String("reflect.Value.Call: call of nil function"));
		}
		isSlice = op === "CallSlice";
		n = t.NumIn();
		if (isSlice) {
			if (!t.IsVariadic()) {
				$panic(new $String("reflect: CallSlice of non-variadic function"));
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: CallSlice with too few input arguments"));
			}
			if (in$1.$length > n) {
				$panic(new $String("reflect: CallSlice with too many input arguments"));
			}
		} else {
			if (t.IsVariadic()) {
				n = n - (1) >> 0;
			}
			if (in$1.$length < n) {
				$panic(new $String("reflect: Call with too few input arguments"));
			}
			if (!t.IsVariadic() && in$1.$length > n) {
				$panic(new $String("reflect: Call with too many input arguments"));
			}
		}
		_ref = in$1;
		_i = 0;
		while (_i < _ref.$length) {
			x = new Value.Ptr(); $copy(x, ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Value);
			if (x.Kind() === 0) {
				$panic(new $String("reflect: " + op + " using zero Value argument"));
			}
			_i++;
		}
		i = 0;
		while (i < n) {
			_tmp = ((i < 0 || i >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + i]).Type(); _tmp$1 = t.In(i); xt = _tmp; targ = _tmp$1;
			if (!xt.AssignableTo(targ)) {
				$panic(new $String("reflect: " + op + " using " + xt.String() + " as type " + targ.String()));
			}
			i = i + (1) >> 0;
		}
		if (!isSlice && t.IsVariadic()) {
			m = in$1.$length - n >> 0;
			slice = new Value.Ptr(); $copy(slice, MakeSlice(t.In(n), m, m), Value);
			elem = t.In(n).Elem();
			i$1 = 0;
			while (i$1 < m) {
				x$2 = new Value.Ptr(); $copy(x$2, (x$1 = n + i$1 >> 0, ((x$1 < 0 || x$1 >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + x$1])), Value);
				xt$1 = x$2.Type();
				if (!xt$1.AssignableTo(elem)) {
					$panic(new $String("reflect: cannot use " + xt$1.String() + " as type " + elem.String() + " in " + op));
				}
				slice.Index(i$1).Set($clone(x$2, Value));
				i$1 = i$1 + (1) >> 0;
			}
			origIn = in$1;
			in$1 = ($sliceType(Value)).make((n + 1 >> 0));
			$copySlice($subslice(in$1, 0, n), origIn);
			$copy(((n < 0 || n >= in$1.$length) ? $throwRuntimeError("index out of range") : in$1.$array[in$1.$offset + n]), slice, Value);
		}
		nin = in$1.$length;
		if (!((nin === t.NumIn()))) {
			$panic(new $String("reflect.Value.Call: wrong argument count"));
		}
		nout = t.NumOut();
		argsArray = new ($global.Array)(t.NumIn());
		_ref$1 = in$1;
		_i$1 = 0;
		while (_i$1 < _ref$1.$length) {
			i$2 = _i$1;
			arg = new Value.Ptr(); $copy(arg, ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]), Value);
			argsArray[i$2] = arg.assignTo("reflect.Value.Call", t.In(i$2).common(), ($ptrType($emptyInterface)).nil).iword();
			_i$1++;
		}
		results = fn.apply(rcvr, argsArray);
		_ref$2 = nout;
		if (_ref$2 === 0) {
			return ($sliceType(Value)).nil;
		} else if (_ref$2 === 1) {
			return new ($sliceType(Value))([$clone(makeValue(t.Out(0), results, 0), Value)]);
		} else {
			ret = ($sliceType(Value)).make(nout);
			_ref$3 = ret;
			_i$2 = 0;
			while (_i$2 < _ref$3.$length) {
				i$3 = _i$2;
				$copy(((i$3 < 0 || i$3 >= ret.$length) ? $throwRuntimeError("index out of range") : ret.$array[ret.$offset + i$3]), makeValue(t.Out(i$3), results[i$3], 0), Value);
				_i$2++;
			}
			return ret;
		}
	};
	Value.prototype.call = function(op, in$1) { return this.$val.call(op, in$1); };
	Value.Ptr.prototype.Cap = function() {
		var v, k, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 17) {
			return v.typ.Len();
		} else if (_ref === 18 || _ref === 23) {
			return $parseInt(v.iword().$capacity) >> 0;
		}
		$panic(new ValueError.Ptr("reflect.Value.Cap", k));
	};
	Value.prototype.Cap = function() { return this.$val.Cap(); };
	Value.Ptr.prototype.Elem = function() {
		var v, k, _ref, val, typ, val$1, tt, fl;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 20) {
			val = v.iword();
			if (val === $ifaceNil) {
				return new Value.Ptr(($ptrType(rtype)).nil, 0, 0, 0);
			}
			typ = reflectType(val.constructor);
			return makeValue(typ, val.$val, (v.flag & 1) >>> 0);
		} else if (_ref === 22) {
			if (v.IsNil()) {
				return new Value.Ptr(($ptrType(rtype)).nil, 0, 0, 0);
			}
			val$1 = v.iword();
			tt = v.typ.ptrType;
			fl = (((((v.flag & 1) >>> 0) | 2) >>> 0) | 4) >>> 0;
			fl = (fl | (((tt.elem.Kind() >>> 0) << 4 >>> 0))) >>> 0;
			return new Value.Ptr(tt.elem, val$1, 0, fl);
		} else {
			$panic(new ValueError.Ptr("reflect.Value.Elem", k));
		}
	};
	Value.prototype.Elem = function() { return this.$val.Elem(); };
	Value.Ptr.prototype.Field = function(i) {
		var v, tt, x, field, name, typ, fl, s;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBe(25);
		tt = v.typ.structType;
		if (i < 0 || i >= tt.fields.$length) {
			$panic(new $String("reflect: Field index out of range"));
		}
		field = (x = tt.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		name = $internalize(jsType(v.typ).fields[i][0], $String);
		typ = field.typ;
		fl = (v.flag & 7) >>> 0;
		if (!($pointerIsEqual(field.pkgPath, ($ptrType($String)).nil))) {
			fl = (fl | (1)) >>> 0;
		}
		fl = (fl | (((typ.Kind() >>> 0) << 4 >>> 0))) >>> 0;
		s = v.ptr;
		if (!((((fl & 2) >>> 0) === 0)) && !((typ.Kind() === 17)) && !((typ.Kind() === 25))) {
			return new Value.Ptr(typ, new (jsType(PtrTo(typ)))($externalize((function() {
				return s[$externalize(name, $String)];
			}), ($funcType([], [js.Object], false))), $externalize((function(v$1) {
				s[$externalize(name, $String)] = v$1;
			}), ($funcType([js.Object], [], false)))), 0, fl);
		}
		return makeValue(typ, s[$externalize(name, $String)], fl);
	};
	Value.prototype.Field = function(i) { return this.$val.Field(i); };
	Value.Ptr.prototype.Index = function(i) {
		var v, k, _ref, tt, typ, fl, a, s, tt$1, typ$1, fl$1, a$1, str, fl$2;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 17) {
			tt = v.typ.arrayType;
			if (i < 0 || i > (tt.len >> 0)) {
				$panic(new $String("reflect: array index out of range"));
			}
			typ = tt.elem;
			fl = (v.flag & 7) >>> 0;
			fl = (fl | (((typ.Kind() >>> 0) << 4 >>> 0))) >>> 0;
			a = v.ptr;
			if (!((((fl & 2) >>> 0) === 0)) && !((typ.Kind() === 17)) && !((typ.Kind() === 25))) {
				return new Value.Ptr(typ, new (jsType(PtrTo(typ)))($externalize((function() {
					return a[i];
				}), ($funcType([], [js.Object], false))), $externalize((function(v$1) {
					a[i] = v$1;
				}), ($funcType([js.Object], [], false)))), 0, fl);
			}
			return makeValue(typ, a[i], fl);
		} else if (_ref === 23) {
			s = v.iword();
			if (i < 0 || i >= ($parseInt(s.$length) >> 0)) {
				$panic(new $String("reflect: slice index out of range"));
			}
			tt$1 = v.typ.sliceType;
			typ$1 = tt$1.elem;
			fl$1 = (6 | ((v.flag & 1) >>> 0)) >>> 0;
			fl$1 = (fl$1 | (((typ$1.Kind() >>> 0) << 4 >>> 0))) >>> 0;
			i = i + (($parseInt(s.$offset) >> 0)) >> 0;
			a$1 = s.$array;
			if (!((((fl$1 & 2) >>> 0) === 0)) && !((typ$1.Kind() === 17)) && !((typ$1.Kind() === 25))) {
				return new Value.Ptr(typ$1, new (jsType(PtrTo(typ$1)))($externalize((function() {
					return a$1[i];
				}), ($funcType([], [js.Object], false))), $externalize((function(v$1) {
					a$1[i] = v$1;
				}), ($funcType([js.Object], [], false)))), 0, fl$1);
			}
			return makeValue(typ$1, a$1[i], fl$1);
		} else if (_ref === 24) {
			str = v.ptr.$get();
			if (i < 0 || i >= str.length) {
				$panic(new $String("reflect: string index out of range"));
			}
			fl$2 = (((v.flag & 1) >>> 0) | 128) >>> 0;
			return new Value.Ptr(uint8Type, 0, (str.charCodeAt(i) >>> 0), fl$2);
		} else {
			$panic(new ValueError.Ptr("reflect.Value.Index", k));
		}
	};
	Value.prototype.Index = function(i) { return this.$val.Index(i); };
	Value.Ptr.prototype.IsNil = function() {
		var v, k, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 18 || _ref === 22 || _ref === 23) {
			return v.iword() === jsType(v.typ).nil;
		} else if (_ref === 19) {
			return v.iword() === $throwNilPointerError;
		} else if (_ref === 21) {
			return v.iword() === false;
		} else if (_ref === 20) {
			return v.iword() === $ifaceNil;
		} else {
			$panic(new ValueError.Ptr("reflect.Value.IsNil", k));
		}
	};
	Value.prototype.IsNil = function() { return this.$val.IsNil(); };
	Value.Ptr.prototype.Len = function() {
		var v, k, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 17 || _ref === 24) {
			return $parseInt(v.iword().length);
		} else if (_ref === 23) {
			return $parseInt(v.iword().$length) >> 0;
		} else if (_ref === 18) {
			return $parseInt(v.iword().$buffer.length) >> 0;
		} else if (_ref === 21) {
			return $parseInt($keys(v.iword()).length);
		} else {
			$panic(new ValueError.Ptr("reflect.Value.Len", k));
		}
	};
	Value.prototype.Len = function() { return this.$val.Len(); };
	Value.Ptr.prototype.Pointer = function() {
		var v, k, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 18 || _ref === 21 || _ref === 22 || _ref === 23 || _ref === 26) {
			if (v.IsNil()) {
				return 0;
			}
			return v.iword();
		} else if (_ref === 19) {
			if (v.IsNil()) {
				return 0;
			}
			return 1;
		} else {
			$panic(new ValueError.Ptr("reflect.Value.Pointer", k));
		}
	};
	Value.prototype.Pointer = function() { return this.$val.Pointer(); };
	Value.Ptr.prototype.Set = function(x) {
		var v, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBeAssignable();
		new flag(x.flag).mustBeExported();
		$copy(x, x.assignTo("reflect.Set", v.typ, ($ptrType($emptyInterface)).nil), Value);
		if (!((((v.flag & 2) >>> 0) === 0))) {
			_ref = v.typ.Kind();
			if (_ref === 17) {
				$copy(v.ptr, x.ptr, jsType(v.typ));
			} else if (_ref === 20) {
				v.ptr.$set(valueInterface($clone(x, Value), false));
			} else if (_ref === 25) {
				copyStruct(v.ptr, x.ptr, v.typ);
			} else {
				v.ptr.$set(x.iword());
			}
			return;
		}
		v.ptr = x.ptr;
	};
	Value.prototype.Set = function(x) { return this.$val.Set(x); };
	Value.Ptr.prototype.SetCap = function(n) {
		var v, s, newSlice;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < ($parseInt(s.$length) >> 0) || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice capacity out of range in SetCap"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = s.$length;
		newSlice.$capacity = n;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetCap = function(n) { return this.$val.SetCap(n); };
	Value.Ptr.prototype.SetLen = function(n) {
		var v, s, newSlice;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		s = v.ptr.$get();
		if (n < 0 || n > ($parseInt(s.$capacity) >> 0)) {
			$panic(new $String("reflect: slice length out of range in SetLen"));
		}
		newSlice = new (jsType(v.typ))(s.$array);
		newSlice.$offset = s.$offset;
		newSlice.$length = n;
		newSlice.$capacity = s.$capacity;
		v.ptr.$set(newSlice);
	};
	Value.prototype.SetLen = function(n) { return this.$val.SetLen(n); };
	Value.Ptr.prototype.Slice = function(i, j) {
		var v, cap, typ, s, kind, _ref, tt, str;
		v = new Value.Ptr(); $copy(v, this, Value);
		cap = 0;
		typ = $ifaceNil;
		s = $ifaceNil;
		kind = new flag(v.flag).kind();
		_ref = kind;
		if (_ref === 17) {
			if (((v.flag & 4) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = v.typ.arrayType;
			cap = (tt.len >> 0);
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))(v.iword());
		} else if (_ref === 23) {
			typ = v.typ;
			s = v.iword();
			cap = $parseInt(s.$capacity) >> 0;
		} else if (_ref === 24) {
			str = v.ptr.$get();
			if (i < 0 || j < i || j > str.length) {
				$panic(new $String("reflect.Value.Slice: string slice index out of bounds"));
			}
			return ValueOf(new $String(str.substring(i, j)));
		} else {
			$panic(new ValueError.Ptr("reflect.Value.Slice", kind));
		}
		if (i < 0 || j < i || j > cap) {
			$panic(new $String("reflect.Value.Slice: slice index out of bounds"));
		}
		return makeValue(typ, $subslice(s, i, j), (v.flag & 1) >>> 0);
	};
	Value.prototype.Slice = function(i, j) { return this.$val.Slice(i, j); };
	Value.Ptr.prototype.Slice3 = function(i, j, k) {
		var v, cap, typ, s, kind, _ref, tt;
		v = new Value.Ptr(); $copy(v, this, Value);
		cap = 0;
		typ = $ifaceNil;
		s = $ifaceNil;
		kind = new flag(v.flag).kind();
		_ref = kind;
		if (_ref === 17) {
			if (((v.flag & 4) >>> 0) === 0) {
				$panic(new $String("reflect.Value.Slice: slice of unaddressable array"));
			}
			tt = v.typ.arrayType;
			cap = (tt.len >> 0);
			typ = SliceOf(tt.elem);
			s = new (jsType(typ))(v.iword());
		} else if (_ref === 23) {
			typ = v.typ;
			s = v.iword();
			cap = $parseInt(s.$capacity) >> 0;
		} else {
			$panic(new ValueError.Ptr("reflect.Value.Slice3", kind));
		}
		if (i < 0 || j < i || k < j || k > cap) {
			$panic(new $String("reflect.Value.Slice3: slice index out of bounds"));
		}
		return makeValue(typ, $subslice(s, i, j, k), (v.flag & 1) >>> 0);
	};
	Value.prototype.Slice3 = function(i, j, k) { return this.$val.Slice3(i, j, k); };
	Value.Ptr.prototype.Close = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		$close(v.iword());
	};
	Value.prototype.Close = function() { return this.$val.Close(); };
	Value.Ptr.prototype.TrySend = function(x) {
		var v, tt, c;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		tt = v.typ.chanType;
		if (((tt.dir >> 0) & 2) === 0) {
			$panic(new $String("reflect: send on recv-only channel"));
		}
		new flag(x.flag).mustBeExported();
		c = v.iword();
		if (!!!(c.$closed) && ($parseInt(c.$recvQueue.length) === 0) && ($parseInt(c.$buffer.length) === ($parseInt(c.$capacity) >> 0))) {
			return false;
		}
		$copy(x, x.assignTo("reflect.Value.Send", tt.elem, ($ptrType($emptyInterface)).nil), Value);
		$send(c, x.iword());
		return true;
	};
	Value.prototype.TrySend = function(x) { return this.$val.TrySend(x); };
	Value.Ptr.prototype.Send = function(x) {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		$panic(new runtime.NotSupportedError.Ptr("reflect.Value.Send, use reflect.Value.TrySend is possible"));
	};
	Value.prototype.Send = function(x) { return this.$val.Send(x); };
	Value.Ptr.prototype.TryRecv = function() {
		var x = new Value.Ptr(), ok = false, v, tt, res, _tmp, _tmp$1, _tmp$2, _tmp$3;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBe(18);
		new flag(v.flag).mustBeExported();
		tt = v.typ.chanType;
		if (((tt.dir >> 0) & 1) === 0) {
			$panic(new $String("reflect: recv on send-only channel"));
		}
		res = $recv(v.iword());
		if (res.constructor === $global.Function) {
			_tmp = new Value.Ptr(($ptrType(rtype)).nil, 0, 0, 0); _tmp$1 = false; $copy(x, _tmp, Value); ok = _tmp$1;
			return [x, ok];
		}
		_tmp$2 = new Value.Ptr(); $copy(_tmp$2, makeValue(tt.elem, res[0], 0), Value); _tmp$3 = !!(res[1]); $copy(x, _tmp$2, Value); ok = _tmp$3;
		return [x, ok];
	};
	Value.prototype.TryRecv = function() { return this.$val.TryRecv(); };
	Value.Ptr.prototype.Recv = function() {
		var x = new Value.Ptr(), ok = false, v;
		v = new Value.Ptr(); $copy(v, this, Value);
		$panic(new runtime.NotSupportedError.Ptr("reflect.Value.Recv, use reflect.Value.TryRecv is possible"));
	};
	Value.prototype.Recv = function() { return this.$val.Recv(); };
	DeepEqual = $pkg.DeepEqual = function(a1, a2) {
		var i1, i2;
		i1 = a1;
		i2 = a2;
		if (i1 === i2) {
			return true;
		}
		if (i1 === $ifaceNil || i2 === $ifaceNil || !(i1.constructor === i2.constructor)) {
			return false;
		}
		return deepValueEqualJs($clone(ValueOf(a1), Value), $clone(ValueOf(a2), Value), ($sliceType(($arrayType($UnsafePointer, 2)))).nil);
	};
	deepValueEqualJs = function(v1, v2, visited) {
		var _ref, _ref$1, _i, entry, _ref$2, n, i, n$1, i$1, keys, _ref$3, _i$1, k;
		if (!v1.IsValid() || !v2.IsValid()) {
			return !v1.IsValid() && !v2.IsValid();
		}
		if (!($interfaceIsEqual(v1.Type(), v2.Type()))) {
			return false;
		}
		_ref = v1.Kind();
		if (_ref === 17 || _ref === 21 || _ref === 23 || _ref === 25) {
			_ref$1 = visited;
			_i = 0;
			while (_i < _ref$1.$length) {
				entry = ($arrayType($UnsafePointer, 2)).zero(); $copy(entry, ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]), ($arrayType($UnsafePointer, 2)));
				if (v1.ptr === entry[0] && v2.ptr === entry[1]) {
					return true;
				}
				_i++;
			}
			visited = $append(visited, $toNativeArray("UnsafePointer", [v1.ptr, v2.ptr]));
		}
		_ref$2 = v1.Kind();
		if (_ref$2 === 17 || _ref$2 === 23) {
			if (v1.Kind() === 23) {
				if (!(v1.IsNil() === v2.IsNil())) {
					return false;
				}
				if (v1.iword() === v2.iword()) {
					return true;
				}
			}
			n = v1.Len();
			if (!((n === v2.Len()))) {
				return false;
			}
			i = 0;
			while (i < n) {
				if (!deepValueEqualJs($clone(v1.Index(i), Value), $clone(v2.Index(i), Value), visited)) {
					return false;
				}
				i = i + (1) >> 0;
			}
			return true;
		} else if (_ref$2 === 20) {
			if (v1.IsNil() || v2.IsNil()) {
				return v1.IsNil() && v2.IsNil();
			}
			return deepValueEqualJs($clone(v1.Elem(), Value), $clone(v2.Elem(), Value), visited);
		} else if (_ref$2 === 22) {
			return deepValueEqualJs($clone(v1.Elem(), Value), $clone(v2.Elem(), Value), visited);
		} else if (_ref$2 === 25) {
			n$1 = v1.NumField();
			i$1 = 0;
			while (i$1 < n$1) {
				if (!deepValueEqualJs($clone(v1.Field(i$1), Value), $clone(v2.Field(i$1), Value), visited)) {
					return false;
				}
				i$1 = i$1 + (1) >> 0;
			}
			return true;
		} else if (_ref$2 === 21) {
			if (!(v1.IsNil() === v2.IsNil())) {
				return false;
			}
			if (v1.iword() === v2.iword()) {
				return true;
			}
			keys = v1.MapKeys();
			if (!((keys.$length === v2.Len()))) {
				return false;
			}
			_ref$3 = keys;
			_i$1 = 0;
			while (_i$1 < _ref$3.$length) {
				k = new Value.Ptr(); $copy(k, ((_i$1 < 0 || _i$1 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$1]), Value);
				if (!deepValueEqualJs($clone(v1.MapIndex($clone(k, Value)), Value), $clone(v2.MapIndex($clone(k, Value)), Value), visited)) {
					return false;
				}
				_i$1++;
			}
			return true;
		} else if (_ref$2 === 19) {
			return v1.IsNil() && v2.IsNil();
		}
		return !!($interfaceIsEqual(valueInterface($clone(v1, Value), false), valueInterface($clone(v2, Value), false)));
	};
	Kind.prototype.String = function() {
		var k;
		k = this.$val !== undefined ? this.$val : this;
		if ((k >> 0) < kindNames.$length) {
			return ((k < 0 || k >= kindNames.$length) ? $throwRuntimeError("index out of range") : kindNames.$array[kindNames.$offset + k]);
		}
		return "kind" + strconv.Itoa((k >> 0));
	};
	$ptrType(Kind).prototype.String = function() { return new Kind(this.$get()).String(); };
	uncommonType.Ptr.prototype.uncommon = function() {
		var t;
		t = this;
		return t;
	};
	uncommonType.prototype.uncommon = function() { return this.$val.uncommon(); };
	uncommonType.Ptr.prototype.PkgPath = function() {
		var t;
		t = this;
		if (t === ($ptrType(uncommonType)).nil || $pointerIsEqual(t.pkgPath, ($ptrType($String)).nil)) {
			return "";
		}
		return t.pkgPath.$get();
	};
	uncommonType.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	uncommonType.Ptr.prototype.Name = function() {
		var t;
		t = this;
		if (t === ($ptrType(uncommonType)).nil || $pointerIsEqual(t.name, ($ptrType($String)).nil)) {
			return "";
		}
		return t.name.$get();
	};
	uncommonType.prototype.Name = function() { return this.$val.Name(); };
	rtype.Ptr.prototype.String = function() {
		var t;
		t = this;
		return t.string.$get();
	};
	rtype.prototype.String = function() { return this.$val.String(); };
	rtype.Ptr.prototype.Size = function() {
		var t;
		t = this;
		return t.size;
	};
	rtype.prototype.Size = function() { return this.$val.Size(); };
	rtype.Ptr.prototype.Bits = function() {
		var t, k, x;
		t = this;
		if (t === ($ptrType(rtype)).nil) {
			$panic(new $String("reflect: Bits of nil Type"));
		}
		k = t.Kind();
		if (k < 2 || k > 16) {
			$panic(new $String("reflect: Bits of non-arithmetic Type " + t.String()));
		}
		return (x = (t.size >> 0), (((x >>> 16 << 16) * 8 >> 0) + (x << 16 >>> 16) * 8) >> 0);
	};
	rtype.prototype.Bits = function() { return this.$val.Bits(); };
	rtype.Ptr.prototype.Align = function() {
		var t;
		t = this;
		return (t.align >> 0);
	};
	rtype.prototype.Align = function() { return this.$val.Align(); };
	rtype.Ptr.prototype.FieldAlign = function() {
		var t;
		t = this;
		return (t.fieldAlign >> 0);
	};
	rtype.prototype.FieldAlign = function() { return this.$val.FieldAlign(); };
	rtype.Ptr.prototype.Kind = function() {
		var t;
		t = this;
		return (((t.kind & 127) >>> 0) >>> 0);
	};
	rtype.prototype.Kind = function() { return this.$val.Kind(); };
	rtype.Ptr.prototype.common = function() {
		var t;
		t = this;
		return t;
	};
	rtype.prototype.common = function() { return this.$val.common(); };
	uncommonType.Ptr.prototype.NumMethod = function() {
		var t;
		t = this;
		if (t === ($ptrType(uncommonType)).nil) {
			return 0;
		}
		return t.methods.$length;
	};
	uncommonType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	uncommonType.Ptr.prototype.MethodByName = function(name) {
		var m = new Method.Ptr(), ok = false, t, p, _ref, _i, i, x, _tmp, _tmp$1;
		t = this;
		if (t === ($ptrType(uncommonType)).nil) {
			return [m, ok];
		}
		p = ($ptrType(method)).nil;
		_ref = t.methods;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (!($pointerIsEqual(p.name, ($ptrType($String)).nil)) && p.name.$get() === name) {
				_tmp = new Method.Ptr(); $copy(_tmp, t.Method(i), Method); _tmp$1 = true; $copy(m, _tmp, Method); ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	uncommonType.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	rtype.Ptr.prototype.NumMethod = function() {
		var t, tt;
		t = this;
		if (t.Kind() === 20) {
			tt = t.interfaceType;
			return tt.NumMethod();
		}
		return t.uncommonType.NumMethod();
	};
	rtype.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	rtype.Ptr.prototype.Method = function(i) {
		var m = new Method.Ptr(), t, tt;
		t = this;
		if (t.Kind() === 20) {
			tt = t.interfaceType;
			$copy(m, tt.Method(i), Method);
			return m;
		}
		$copy(m, t.uncommonType.Method(i), Method);
		return m;
	};
	rtype.prototype.Method = function(i) { return this.$val.Method(i); };
	rtype.Ptr.prototype.MethodByName = function(name) {
		var m = new Method.Ptr(), ok = false, t, tt, _tuple, _tuple$1;
		t = this;
		if (t.Kind() === 20) {
			tt = t.interfaceType;
			_tuple = tt.MethodByName(name); $copy(m, _tuple[0], Method); ok = _tuple[1];
			return [m, ok];
		}
		_tuple$1 = t.uncommonType.MethodByName(name); $copy(m, _tuple$1[0], Method); ok = _tuple$1[1];
		return [m, ok];
	};
	rtype.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	rtype.Ptr.prototype.PkgPath = function() {
		var t;
		t = this;
		return t.uncommonType.PkgPath();
	};
	rtype.prototype.PkgPath = function() { return this.$val.PkgPath(); };
	rtype.Ptr.prototype.Name = function() {
		var t;
		t = this;
		return t.uncommonType.Name();
	};
	rtype.prototype.Name = function() { return this.$val.Name(); };
	rtype.Ptr.prototype.ChanDir = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 18))) {
			$panic(new $String("reflect: ChanDir of non-chan type"));
		}
		tt = t.chanType;
		return (tt.dir >> 0);
	};
	rtype.prototype.ChanDir = function() { return this.$val.ChanDir(); };
	rtype.Ptr.prototype.IsVariadic = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: IsVariadic of non-func type"));
		}
		tt = t.funcType;
		return tt.dotdotdot;
	};
	rtype.prototype.IsVariadic = function() { return this.$val.IsVariadic(); };
	rtype.Ptr.prototype.Elem = function() {
		var t, _ref, tt, tt$1, tt$2, tt$3, tt$4;
		t = this;
		_ref = t.Kind();
		if (_ref === 17) {
			tt = t.arrayType;
			return toType(tt.elem);
		} else if (_ref === 18) {
			tt$1 = t.chanType;
			return toType(tt$1.elem);
		} else if (_ref === 21) {
			tt$2 = t.mapType;
			return toType(tt$2.elem);
		} else if (_ref === 22) {
			tt$3 = t.ptrType;
			return toType(tt$3.elem);
		} else if (_ref === 23) {
			tt$4 = t.sliceType;
			return toType(tt$4.elem);
		}
		$panic(new $String("reflect: Elem of invalid type"));
	};
	rtype.prototype.Elem = function() { return this.$val.Elem(); };
	rtype.Ptr.prototype.Field = function(i) {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: Field of non-struct type"));
		}
		tt = t.structType;
		return tt.Field(i);
	};
	rtype.prototype.Field = function(i) { return this.$val.Field(i); };
	rtype.Ptr.prototype.FieldByIndex = function(index) {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByIndex of non-struct type"));
		}
		tt = t.structType;
		return tt.FieldByIndex(index);
	};
	rtype.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	rtype.Ptr.prototype.FieldByName = function(name) {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByName of non-struct type"));
		}
		tt = t.structType;
		return tt.FieldByName(name);
	};
	rtype.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	rtype.Ptr.prototype.FieldByNameFunc = function(match) {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: FieldByNameFunc of non-struct type"));
		}
		tt = t.structType;
		return tt.FieldByNameFunc(match);
	};
	rtype.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	rtype.Ptr.prototype.In = function(i) {
		var t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: In of non-func type"));
		}
		tt = t.funcType;
		return toType((x = tt.in$2, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])));
	};
	rtype.prototype.In = function(i) { return this.$val.In(i); };
	rtype.Ptr.prototype.Key = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 21))) {
			$panic(new $String("reflect: Key of non-map type"));
		}
		tt = t.mapType;
		return toType(tt.key);
	};
	rtype.prototype.Key = function() { return this.$val.Key(); };
	rtype.Ptr.prototype.Len = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 17))) {
			$panic(new $String("reflect: Len of non-array type"));
		}
		tt = t.arrayType;
		return (tt.len >> 0);
	};
	rtype.prototype.Len = function() { return this.$val.Len(); };
	rtype.Ptr.prototype.NumField = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 25))) {
			$panic(new $String("reflect: NumField of non-struct type"));
		}
		tt = t.structType;
		return tt.fields.$length;
	};
	rtype.prototype.NumField = function() { return this.$val.NumField(); };
	rtype.Ptr.prototype.NumIn = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumIn of non-func type"));
		}
		tt = t.funcType;
		return tt.in$2.$length;
	};
	rtype.prototype.NumIn = function() { return this.$val.NumIn(); };
	rtype.Ptr.prototype.NumOut = function() {
		var t, tt;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: NumOut of non-func type"));
		}
		tt = t.funcType;
		return tt.out.$length;
	};
	rtype.prototype.NumOut = function() { return this.$val.NumOut(); };
	rtype.Ptr.prototype.Out = function(i) {
		var t, tt, x;
		t = this;
		if (!((t.Kind() === 19))) {
			$panic(new $String("reflect: Out of non-func type"));
		}
		tt = t.funcType;
		return toType((x = tt.out, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])));
	};
	rtype.prototype.Out = function(i) { return this.$val.Out(i); };
	ChanDir.prototype.String = function() {
		var d, _ref;
		d = this.$val !== undefined ? this.$val : this;
		_ref = d;
		if (_ref === 2) {
			return "chan<-";
		} else if (_ref === 1) {
			return "<-chan";
		} else if (_ref === 3) {
			return "chan";
		}
		return "ChanDir" + strconv.Itoa((d >> 0));
	};
	$ptrType(ChanDir).prototype.String = function() { return new ChanDir(this.$get()).String(); };
	interfaceType.Ptr.prototype.Method = function(i) {
		var m = new Method.Ptr(), t, x, p;
		t = this;
		if (i < 0 || i >= t.methods.$length) {
			return m;
		}
		p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		m.Name = p.name.$get();
		if (!($pointerIsEqual(p.pkgPath, ($ptrType($String)).nil))) {
			m.PkgPath = p.pkgPath.$get();
		}
		m.Type = toType(p.typ);
		m.Index = i;
		return m;
	};
	interfaceType.prototype.Method = function(i) { return this.$val.Method(i); };
	interfaceType.Ptr.prototype.NumMethod = function() {
		var t;
		t = this;
		return t.methods.$length;
	};
	interfaceType.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	interfaceType.Ptr.prototype.MethodByName = function(name) {
		var m = new Method.Ptr(), ok = false, t, p, _ref, _i, i, x, _tmp, _tmp$1;
		t = this;
		if (t === ($ptrType(interfaceType)).nil) {
			return [m, ok];
		}
		p = ($ptrType(imethod)).nil;
		_ref = t.methods;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			p = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			if (p.name.$get() === name) {
				_tmp = new Method.Ptr(); $copy(_tmp, t.Method(i), Method); _tmp$1 = true; $copy(m, _tmp, Method); ok = _tmp$1;
				return [m, ok];
			}
			_i++;
		}
		return [m, ok];
	};
	interfaceType.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	StructTag.prototype.Get = function(key) {
		var tag, i, name, qvalue, _tuple, value;
		tag = this.$val !== undefined ? this.$val : this;
		while (!(tag === "")) {
			i = 0;
			while (i < tag.length && (tag.charCodeAt(i) === 32)) {
				i = i + (1) >> 0;
			}
			tag = tag.substring(i);
			if (tag === "") {
				break;
			}
			i = 0;
			while (i < tag.length && !((tag.charCodeAt(i) === 32)) && !((tag.charCodeAt(i) === 58)) && !((tag.charCodeAt(i) === 34))) {
				i = i + (1) >> 0;
			}
			if ((i + 1 >> 0) >= tag.length || !((tag.charCodeAt(i) === 58)) || !((tag.charCodeAt((i + 1 >> 0)) === 34))) {
				break;
			}
			name = tag.substring(0, i);
			tag = tag.substring((i + 1 >> 0));
			i = 1;
			while (i < tag.length && !((tag.charCodeAt(i) === 34))) {
				if (tag.charCodeAt(i) === 92) {
					i = i + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			if (i >= tag.length) {
				break;
			}
			qvalue = tag.substring(0, (i + 1 >> 0));
			tag = tag.substring((i + 1 >> 0));
			if (key === name) {
				_tuple = strconv.Unquote(qvalue); value = _tuple[0];
				return value;
			}
		}
		return "";
	};
	$ptrType(StructTag).prototype.Get = function(key) { return new StructTag(this.$get()).Get(key); };
	structType.Ptr.prototype.Field = function(i) {
		var f = new StructField.Ptr(), t, x, p, t$1;
		t = this;
		if (i < 0 || i >= t.fields.$length) {
			return f;
		}
		p = (x = t.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		f.Type = toType(p.typ);
		if (!($pointerIsEqual(p.name, ($ptrType($String)).nil))) {
			f.Name = p.name.$get();
		} else {
			t$1 = f.Type;
			if (t$1.Kind() === 22) {
				t$1 = t$1.Elem();
			}
			f.Name = t$1.Name();
			f.Anonymous = true;
		}
		if (!($pointerIsEqual(p.pkgPath, ($ptrType($String)).nil))) {
			f.PkgPath = p.pkgPath.$get();
		}
		if (!($pointerIsEqual(p.tag, ($ptrType($String)).nil))) {
			f.Tag = p.tag.$get();
		}
		f.Offset = p.offset;
		f.Index = new ($sliceType($Int))([i]);
		return f;
	};
	structType.prototype.Field = function(i) { return this.$val.Field(i); };
	structType.Ptr.prototype.FieldByIndex = function(index) {
		var f = new StructField.Ptr(), t, _ref, _i, i, x, ft;
		t = this;
		f.Type = toType(t.rtype);
		_ref = index;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				ft = f.Type;
				if ((ft.Kind() === 22) && (ft.Elem().Kind() === 25)) {
					ft = ft.Elem();
				}
				f.Type = ft;
			}
			$copy(f, f.Type.Field(x), StructField);
			_i++;
		}
		return f;
	};
	structType.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	structType.Ptr.prototype.FieldByNameFunc = function(match) {
		var result = new StructField.Ptr(), ok = false, t, current, next, nextCount, visited, _map, _key, _tmp, _tmp$1, count, _ref, _i, scan, t$1, _entry, _key$1, _ref$1, _i$1, i, x, f, fname, ntyp, _entry$1, _tmp$2, _tmp$3, styp, _entry$2, _key$2, _map$1, _key$3, _key$4, _entry$3, _key$5, index;
		t = this;
		current = new ($sliceType(fieldScan))([]);
		next = new ($sliceType(fieldScan))([new fieldScan.Ptr(t, ($sliceType($Int)).nil)]);
		nextCount = false;
		visited = (_map = new $Map(), _map);
		while (next.$length > 0) {
			_tmp = next; _tmp$1 = $subslice(current, 0, 0); current = _tmp; next = _tmp$1;
			count = nextCount;
			nextCount = false;
			_ref = current;
			_i = 0;
			while (_i < _ref.$length) {
				scan = new fieldScan.Ptr(); $copy(scan, ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), fieldScan);
				t$1 = scan.typ;
				if ((_entry = visited[t$1.$key()], _entry !== undefined ? _entry.v : false)) {
					_i++;
					continue;
				}
				_key$1 = t$1; (visited || $throwRuntimeError("assignment to entry in nil map"))[_key$1.$key()] = { k: _key$1, v: true };
				_ref$1 = t$1.fields;
				_i$1 = 0;
				while (_i$1 < _ref$1.$length) {
					i = _i$1;
					f = (x = t$1.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
					fname = "";
					ntyp = ($ptrType(rtype)).nil;
					if (!($pointerIsEqual(f.name, ($ptrType($String)).nil))) {
						fname = f.name.$get();
					} else {
						ntyp = f.typ;
						if (ntyp.Kind() === 22) {
							ntyp = ntyp.Elem().common();
						}
						fname = ntyp.Name();
					}
					if (match(fname)) {
						if ((_entry$1 = count[t$1.$key()], _entry$1 !== undefined ? _entry$1.v : 0) > 1 || ok) {
							_tmp$2 = new StructField.Ptr("", "", $ifaceNil, "", 0, ($sliceType($Int)).nil, false); _tmp$3 = false; $copy(result, _tmp$2, StructField); ok = _tmp$3;
							return [result, ok];
						}
						$copy(result, t$1.Field(i), StructField);
						result.Index = ($sliceType($Int)).nil;
						result.Index = $appendSlice(result.Index, scan.index);
						result.Index = $append(result.Index, i);
						ok = true;
						_i$1++;
						continue;
					}
					if (ok || ntyp === ($ptrType(rtype)).nil || !((ntyp.Kind() === 25))) {
						_i$1++;
						continue;
					}
					styp = ntyp.structType;
					if ((_entry$2 = nextCount[styp.$key()], _entry$2 !== undefined ? _entry$2.v : 0) > 0) {
						_key$2 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[_key$2.$key()] = { k: _key$2, v: 2 };
						_i$1++;
						continue;
					}
					if (nextCount === false) {
						nextCount = (_map$1 = new $Map(), _map$1);
					}
					_key$4 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[_key$4.$key()] = { k: _key$4, v: 1 };
					if ((_entry$3 = count[t$1.$key()], _entry$3 !== undefined ? _entry$3.v : 0) > 1) {
						_key$5 = styp; (nextCount || $throwRuntimeError("assignment to entry in nil map"))[_key$5.$key()] = { k: _key$5, v: 2 };
					}
					index = ($sliceType($Int)).nil;
					index = $appendSlice(index, scan.index);
					index = $append(index, i);
					next = $append(next, new fieldScan.Ptr(styp, index));
					_i$1++;
				}
				_i++;
			}
			if (ok) {
				break;
			}
		}
		return [result, ok];
	};
	structType.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	structType.Ptr.prototype.FieldByName = function(name) {
		var f = new StructField.Ptr(), present = false, t, hasAnon, _ref, _i, i, x, tf, _tmp, _tmp$1, _tuple;
		t = this;
		hasAnon = false;
		if (!(name === "")) {
			_ref = t.fields;
			_i = 0;
			while (_i < _ref.$length) {
				i = _i;
				tf = (x = t.fields, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
				if ($pointerIsEqual(tf.name, ($ptrType($String)).nil)) {
					hasAnon = true;
					_i++;
					continue;
				}
				if (tf.name.$get() === name) {
					_tmp = new StructField.Ptr(); $copy(_tmp, t.Field(i), StructField); _tmp$1 = true; $copy(f, _tmp, StructField); present = _tmp$1;
					return [f, present];
				}
				_i++;
			}
		}
		if (!hasAnon) {
			return [f, present];
		}
		_tuple = t.FieldByNameFunc((function(s) {
			return s === name;
		})); $copy(f, _tuple[0], StructField); present = _tuple[1];
		return [f, present];
	};
	structType.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	PtrTo = $pkg.PtrTo = function(t) {
		return $assertType(t, ($ptrType(rtype))).ptrTo();
	};
	rtype.Ptr.prototype.Implements = function(u) {
		var t;
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.Implements"));
		}
		if (!((u.Kind() === 20))) {
			$panic(new $String("reflect: non-interface type passed to Type.Implements"));
		}
		return implements$1($assertType(u, ($ptrType(rtype))), t);
	};
	rtype.prototype.Implements = function(u) { return this.$val.Implements(u); };
	rtype.Ptr.prototype.AssignableTo = function(u) {
		var t, uu;
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.AssignableTo"));
		}
		uu = $assertType(u, ($ptrType(rtype)));
		return directlyAssignable(uu, t) || implements$1(uu, t);
	};
	rtype.prototype.AssignableTo = function(u) { return this.$val.AssignableTo(u); };
	rtype.Ptr.prototype.ConvertibleTo = function(u) {
		var t, uu;
		t = this;
		if ($interfaceIsEqual(u, $ifaceNil)) {
			$panic(new $String("reflect: nil type passed to Type.ConvertibleTo"));
		}
		uu = $assertType(u, ($ptrType(rtype)));
		return !(convertOp(uu, t) === $throwNilPointerError);
	};
	rtype.prototype.ConvertibleTo = function(u) { return this.$val.ConvertibleTo(u); };
	implements$1 = function(T, V) {
		var t, v, i, j, x, tm, x$1, vm, v$1, i$1, j$1, x$2, tm$1, x$3, vm$1;
		if (!((T.Kind() === 20))) {
			return false;
		}
		t = T.interfaceType;
		if (t.methods.$length === 0) {
			return true;
		}
		if (V.Kind() === 20) {
			v = V.interfaceType;
			i = 0;
			j = 0;
			while (j < v.methods.$length) {
				tm = (x = t.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
				vm = (x$1 = v.methods, ((j < 0 || j >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + j]));
				if ($pointerIsEqual(vm.name, tm.name) && $pointerIsEqual(vm.pkgPath, tm.pkgPath) && vm.typ === tm.typ) {
					i = i + (1) >> 0;
					if (i >= t.methods.$length) {
						return true;
					}
				}
				j = j + (1) >> 0;
			}
			return false;
		}
		v$1 = V.uncommonType.uncommon();
		if (v$1 === ($ptrType(uncommonType)).nil) {
			return false;
		}
		i$1 = 0;
		j$1 = 0;
		while (j$1 < v$1.methods.$length) {
			tm$1 = (x$2 = t.methods, ((i$1 < 0 || i$1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$1]));
			vm$1 = (x$3 = v$1.methods, ((j$1 < 0 || j$1 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + j$1]));
			if ($pointerIsEqual(vm$1.name, tm$1.name) && $pointerIsEqual(vm$1.pkgPath, tm$1.pkgPath) && vm$1.mtyp === tm$1.typ) {
				i$1 = i$1 + (1) >> 0;
				if (i$1 >= t.methods.$length) {
					return true;
				}
			}
			j$1 = j$1 + (1) >> 0;
		}
		return false;
	};
	directlyAssignable = function(T, V) {
		if (T === V) {
			return true;
		}
		if (!(T.Name() === "") && !(V.Name() === "") || !((T.Kind() === V.Kind()))) {
			return false;
		}
		return haveIdenticalUnderlyingType(T, V);
	};
	haveIdenticalUnderlyingType = function(T, V) {
		var kind, _ref, t, v, _ref$1, _i, i, typ, x, _ref$2, _i$1, i$1, typ$1, x$1, t$1, v$1, t$2, v$2, _ref$3, _i$2, i$2, x$2, tf, x$3, vf;
		if (T === V) {
			return true;
		}
		kind = T.Kind();
		if (!((kind === V.Kind()))) {
			return false;
		}
		if (1 <= kind && kind <= 16 || (kind === 24) || (kind === 26)) {
			return true;
		}
		_ref = kind;
		if (_ref === 17) {
			return $interfaceIsEqual(T.Elem(), V.Elem()) && (T.Len() === V.Len());
		} else if (_ref === 18) {
			if ((V.ChanDir() === 3) && $interfaceIsEqual(T.Elem(), V.Elem())) {
				return true;
			}
			return (V.ChanDir() === T.ChanDir()) && $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 19) {
			t = T.funcType;
			v = V.funcType;
			if (!(t.dotdotdot === v.dotdotdot) || !((t.in$2.$length === v.in$2.$length)) || !((t.out.$length === v.out.$length))) {
				return false;
			}
			_ref$1 = t.in$2;
			_i = 0;
			while (_i < _ref$1.$length) {
				i = _i;
				typ = ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]);
				if (!(typ === (x = v.in$2, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])))) {
					return false;
				}
				_i++;
			}
			_ref$2 = t.out;
			_i$1 = 0;
			while (_i$1 < _ref$2.$length) {
				i$1 = _i$1;
				typ$1 = ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$1]);
				if (!(typ$1 === (x$1 = v.out, ((i$1 < 0 || i$1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i$1])))) {
					return false;
				}
				_i$1++;
			}
			return true;
		} else if (_ref === 20) {
			t$1 = T.interfaceType;
			v$1 = V.interfaceType;
			if ((t$1.methods.$length === 0) && (v$1.methods.$length === 0)) {
				return true;
			}
			return false;
		} else if (_ref === 21) {
			return $interfaceIsEqual(T.Key(), V.Key()) && $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 22 || _ref === 23) {
			return $interfaceIsEqual(T.Elem(), V.Elem());
		} else if (_ref === 25) {
			t$2 = T.structType;
			v$2 = V.structType;
			if (!((t$2.fields.$length === v$2.fields.$length))) {
				return false;
			}
			_ref$3 = t$2.fields;
			_i$2 = 0;
			while (_i$2 < _ref$3.$length) {
				i$2 = _i$2;
				tf = (x$2 = t$2.fields, ((i$2 < 0 || i$2 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i$2]));
				vf = (x$3 = v$2.fields, ((i$2 < 0 || i$2 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i$2]));
				if (!($pointerIsEqual(tf.name, vf.name)) && ($pointerIsEqual(tf.name, ($ptrType($String)).nil) || $pointerIsEqual(vf.name, ($ptrType($String)).nil) || !(tf.name.$get() === vf.name.$get()))) {
					return false;
				}
				if (!($pointerIsEqual(tf.pkgPath, vf.pkgPath)) && ($pointerIsEqual(tf.pkgPath, ($ptrType($String)).nil) || $pointerIsEqual(vf.pkgPath, ($ptrType($String)).nil) || !(tf.pkgPath.$get() === vf.pkgPath.$get()))) {
					return false;
				}
				if (!(tf.typ === vf.typ)) {
					return false;
				}
				if (!($pointerIsEqual(tf.tag, vf.tag)) && ($pointerIsEqual(tf.tag, ($ptrType($String)).nil) || $pointerIsEqual(vf.tag, ($ptrType($String)).nil) || !(tf.tag.$get() === vf.tag.$get()))) {
					return false;
				}
				if (!((tf.offset === vf.offset))) {
					return false;
				}
				_i$2++;
			}
			return true;
		}
		return false;
	};
	toType = function(t) {
		if (t === ($ptrType(rtype)).nil) {
			return $ifaceNil;
		}
		return t;
	};
	flag.prototype.kind = function() {
		var f;
		f = this.$val !== undefined ? this.$val : this;
		return (((((f >>> 4 >>> 0)) & 31) >>> 0) >>> 0);
	};
	$ptrType(flag).prototype.kind = function() { return new flag(this.$get()).kind(); };
	Value.Ptr.prototype.pointer = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		if (!((v.typ.size === 4)) || !v.typ.pointers()) {
			$panic(new $String("can't call pointer on a non-pointer Value"));
		}
		if (!((((v.flag & 2) >>> 0) === 0))) {
			return v.ptr.$get();
		}
		return v.ptr;
	};
	Value.prototype.pointer = function() { return this.$val.pointer(); };
	ValueError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		if (e.Kind === 0) {
			return "reflect: call of " + e.Method + " on zero Value";
		}
		return "reflect: call of " + e.Method + " on " + new Kind(e.Kind).String() + " Value";
	};
	ValueError.prototype.Error = function() { return this.$val.Error(); };
	flag.prototype.mustBe = function(expected) {
		var f, k;
		f = this.$val !== undefined ? this.$val : this;
		k = new flag(f).kind();
		if (!((k === expected))) {
			$panic(new ValueError.Ptr(methodName(), k));
		}
	};
	$ptrType(flag).prototype.mustBe = function(expected) { return new flag(this.$get()).mustBe(expected); };
	flag.prototype.mustBeExported = function() {
		var f;
		f = this.$val !== undefined ? this.$val : this;
		if (f === 0) {
			$panic(new ValueError.Ptr(methodName(), 0));
		}
		if (!((((f & 1) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
	};
	$ptrType(flag).prototype.mustBeExported = function() { return new flag(this.$get()).mustBeExported(); };
	flag.prototype.mustBeAssignable = function() {
		var f;
		f = this.$val !== undefined ? this.$val : this;
		if (f === 0) {
			$panic(new ValueError.Ptr(methodName(), 0));
		}
		if (!((((f & 1) >>> 0) === 0))) {
			$panic(new $String("reflect: " + methodName() + " using value obtained using unexported field"));
		}
		if (((f & 4) >>> 0) === 0) {
			$panic(new $String("reflect: " + methodName() + " using unaddressable value"));
		}
	};
	$ptrType(flag).prototype.mustBeAssignable = function() { return new flag(this.$get()).mustBeAssignable(); };
	Value.Ptr.prototype.Addr = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		if (((v.flag & 4) >>> 0) === 0) {
			$panic(new $String("reflect.Value.Addr of unaddressable value"));
		}
		return new Value.Ptr(v.typ.ptrTo(), v.ptr, 0, ((((v.flag & 1) >>> 0)) | 352) >>> 0);
	};
	Value.prototype.Addr = function() { return this.$val.Addr(); };
	Value.Ptr.prototype.Bool = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBe(1);
		if (!((((v.flag & 2) >>> 0) === 0))) {
			return v.ptr.$get();
		}
		return v.scalar;
	};
	Value.prototype.Bool = function() { return this.$val.Bool(); };
	Value.Ptr.prototype.Bytes = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBe(23);
		if (!((v.typ.Elem().Kind() === 8))) {
			$panic(new $String("reflect.Value.Bytes of non-byte slice"));
		}
		return v.ptr.$get();
	};
	Value.prototype.Bytes = function() { return this.$val.Bytes(); };
	Value.Ptr.prototype.runes = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBe(23);
		if (!((v.typ.Elem().Kind() === 5))) {
			$panic(new $String("reflect.Value.Bytes of non-rune slice"));
		}
		return v.ptr.$get();
	};
	Value.prototype.runes = function() { return this.$val.runes(); };
	Value.Ptr.prototype.CanAddr = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		return !((((v.flag & 4) >>> 0) === 0));
	};
	Value.prototype.CanAddr = function() { return this.$val.CanAddr(); };
	Value.Ptr.prototype.CanSet = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		return ((v.flag & 5) >>> 0) === 4;
	};
	Value.prototype.CanSet = function() { return this.$val.CanSet(); };
	Value.Ptr.prototype.Call = function(in$1) {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		return v.call("Call", in$1);
	};
	Value.prototype.Call = function(in$1) { return this.$val.Call(in$1); };
	Value.Ptr.prototype.CallSlice = function(in$1) {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBe(19);
		new flag(v.flag).mustBeExported();
		return v.call("CallSlice", in$1);
	};
	Value.prototype.CallSlice = function(in$1) { return this.$val.CallSlice(in$1); };
	Value.Ptr.prototype.Complex = function() {
		var v, k, _ref, x, x$1;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 15) {
			if (!((((v.flag & 2) >>> 0) === 0))) {
				return (x = v.ptr.$get(), new $Complex128(x.$real, x.$imag));
			}
			return (x$1 = v.scalar, new $Complex128(x$1.$real, x$1.$imag));
		} else if (_ref === 16) {
			return v.ptr.$get();
		}
		$panic(new ValueError.Ptr("reflect.Value.Complex", k));
	};
	Value.prototype.Complex = function() { return this.$val.Complex(); };
	Value.Ptr.prototype.FieldByIndex = function(index) {
		var v, _ref, _i, i, x;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBe(25);
		_ref = index;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			x = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				if ((v.Kind() === 22) && (v.typ.Elem().Kind() === 25)) {
					if (v.IsNil()) {
						$panic(new $String("reflect: indirection through nil pointer to embedded struct"));
					}
					$copy(v, v.Elem(), Value);
				}
			}
			$copy(v, v.Field(x), Value);
			_i++;
		}
		return v;
	};
	Value.prototype.FieldByIndex = function(index) { return this.$val.FieldByIndex(index); };
	Value.Ptr.prototype.FieldByName = function(name) {
		var v, _tuple, f, ok;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBe(25);
		_tuple = v.typ.FieldByName(name); f = new StructField.Ptr(); $copy(f, _tuple[0], StructField); ok = _tuple[1];
		if (ok) {
			return v.FieldByIndex(f.Index);
		}
		return new Value.Ptr(($ptrType(rtype)).nil, 0, 0, 0);
	};
	Value.prototype.FieldByName = function(name) { return this.$val.FieldByName(name); };
	Value.Ptr.prototype.FieldByNameFunc = function(match) {
		var v, _tuple, f, ok;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBe(25);
		_tuple = v.typ.FieldByNameFunc(match); f = new StructField.Ptr(); $copy(f, _tuple[0], StructField); ok = _tuple[1];
		if (ok) {
			return v.FieldByIndex(f.Index);
		}
		return new Value.Ptr(($ptrType(rtype)).nil, 0, 0, 0);
	};
	Value.prototype.FieldByNameFunc = function(match) { return this.$val.FieldByNameFunc(match); };
	Value.Ptr.prototype.Float = function() {
		var v, k, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 13) {
			if (!((((v.flag & 2) >>> 0) === 0))) {
				return $coerceFloat32(v.ptr.$get());
			}
			return $coerceFloat32(v.scalar);
		} else if (_ref === 14) {
			if (!((((v.flag & 2) >>> 0) === 0))) {
				return v.ptr.$get();
			}
			return v.scalar;
		}
		$panic(new ValueError.Ptr("reflect.Value.Float", k));
	};
	Value.prototype.Float = function() { return this.$val.Float(); };
	Value.Ptr.prototype.Int = function() {
		var v, k, p, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = new flag(v.flag).kind();
		p = 0;
		if (!((((v.flag & 2) >>> 0) === 0))) {
			p = v.ptr;
		} else {
			p = new ($ptrType($Uintptr))(function() { return this.$target.scalar; }, function($v) { this.$target.scalar = $v; }, v);
		}
		_ref = k;
		if (_ref === 2) {
			return new $Int64(0, p.$get());
		} else if (_ref === 3) {
			return new $Int64(0, p.$get());
		} else if (_ref === 4) {
			return new $Int64(0, p.$get());
		} else if (_ref === 5) {
			return new $Int64(0, p.$get());
		} else if (_ref === 6) {
			return p.$get();
		}
		$panic(new ValueError.Ptr("reflect.Value.Int", k));
	};
	Value.prototype.Int = function() { return this.$val.Int(); };
	Value.Ptr.prototype.CanInterface = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		if (v.flag === 0) {
			$panic(new ValueError.Ptr("reflect.Value.CanInterface", 0));
		}
		return ((v.flag & 1) >>> 0) === 0;
	};
	Value.prototype.CanInterface = function() { return this.$val.CanInterface(); };
	Value.Ptr.prototype.Interface = function() {
		var i = $ifaceNil, v;
		v = new Value.Ptr(); $copy(v, this, Value);
		i = valueInterface($clone(v, Value), true);
		return i;
	};
	Value.prototype.Interface = function() { return this.$val.Interface(); };
	Value.Ptr.prototype.InterfaceData = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBe(20);
		return v.ptr;
	};
	Value.prototype.InterfaceData = function() { return this.$val.InterfaceData(); };
	Value.Ptr.prototype.IsValid = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		return !((v.flag === 0));
	};
	Value.prototype.IsValid = function() { return this.$val.IsValid(); };
	Value.Ptr.prototype.Kind = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		return new flag(v.flag).kind();
	};
	Value.prototype.Kind = function() { return this.$val.Kind(); };
	Value.Ptr.prototype.MapIndex = function(key) {
		var v, tt, k, e, typ, fl, c;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBe(21);
		tt = v.typ.mapType;
		$copy(key, key.assignTo("reflect.Value.MapIndex", tt.key, ($ptrType($emptyInterface)).nil), Value);
		k = 0;
		if (!((((key.flag & 2) >>> 0) === 0))) {
			k = key.ptr;
		} else if (key.typ.pointers()) {
			k = new ($ptrType($UnsafePointer))(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key);
		} else {
			k = new ($ptrType($Uintptr))(function() { return this.$target.scalar; }, function($v) { this.$target.scalar = $v; }, key);
		}
		e = mapaccess(v.typ, v.pointer(), k);
		if (e === 0) {
			return new Value.Ptr(($ptrType(rtype)).nil, 0, 0, 0);
		}
		typ = tt.elem;
		fl = ((((v.flag | key.flag) >>> 0)) & 1) >>> 0;
		fl = (fl | (((typ.Kind() >>> 0) << 4 >>> 0))) >>> 0;
		if (typ.size > 4) {
			c = unsafe_New(typ);
			memmove(c, e, typ.size);
			return new Value.Ptr(typ, c, 0, (fl | 2) >>> 0);
		} else if (typ.pointers()) {
			return new Value.Ptr(typ, e.$get(), 0, fl);
		} else {
			return new Value.Ptr(typ, 0, loadScalar(e, typ.size), fl);
		}
	};
	Value.prototype.MapIndex = function(key) { return this.$val.MapIndex(key); };
	Value.Ptr.prototype.MapKeys = function() {
		var v, tt, keyType, fl, m, mlen, it, a, i, key, c;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBe(21);
		tt = v.typ.mapType;
		keyType = tt.key;
		fl = (((v.flag & 1) >>> 0) | ((keyType.Kind() >>> 0) << 4 >>> 0)) >>> 0;
		m = v.pointer();
		mlen = 0;
		if (!(m === 0)) {
			mlen = maplen(m);
		}
		it = mapiterinit(v.typ, m);
		a = ($sliceType(Value)).make(mlen);
		i = 0;
		i = 0;
		while (i < a.$length) {
			key = mapiterkey(it);
			if (key === 0) {
				break;
			}
			if (keyType.size > 4) {
				c = unsafe_New(keyType);
				memmove(c, key, keyType.size);
				$copy(((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i]), new Value.Ptr(keyType, c, 0, (fl | 2) >>> 0), Value);
			} else if (keyType.pointers()) {
				$copy(((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i]), new Value.Ptr(keyType, key.$get(), 0, fl), Value);
			} else {
				$copy(((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i]), new Value.Ptr(keyType, 0, loadScalar(key, keyType.size), fl), Value);
			}
			mapiternext(it);
			i = i + (1) >> 0;
		}
		return $subslice(a, 0, i);
	};
	Value.prototype.MapKeys = function() { return this.$val.MapKeys(); };
	Value.Ptr.prototype.Method = function(i) {
		var v, fl;
		v = new Value.Ptr(); $copy(v, this, Value);
		if (v.typ === ($ptrType(rtype)).nil) {
			$panic(new ValueError.Ptr("reflect.Value.Method", 0));
		}
		if (!((((v.flag & 8) >>> 0) === 0)) || i < 0 || i >= v.typ.NumMethod()) {
			$panic(new $String("reflect: Method index out of range"));
		}
		if ((v.typ.Kind() === 20) && v.IsNil()) {
			$panic(new $String("reflect: Method on nil interface value"));
		}
		fl = (v.flag & 3) >>> 0;
		fl = (fl | (304)) >>> 0;
		fl = (fl | (((((i >>> 0) << 9 >>> 0) | 8) >>> 0))) >>> 0;
		return new Value.Ptr(v.typ, v.ptr, v.scalar, fl);
	};
	Value.prototype.Method = function(i) { return this.$val.Method(i); };
	Value.Ptr.prototype.NumMethod = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		if (v.typ === ($ptrType(rtype)).nil) {
			$panic(new ValueError.Ptr("reflect.Value.NumMethod", 0));
		}
		if (!((((v.flag & 8) >>> 0) === 0))) {
			return 0;
		}
		return v.typ.NumMethod();
	};
	Value.prototype.NumMethod = function() { return this.$val.NumMethod(); };
	Value.Ptr.prototype.MethodByName = function(name) {
		var v, _tuple, m, ok;
		v = new Value.Ptr(); $copy(v, this, Value);
		if (v.typ === ($ptrType(rtype)).nil) {
			$panic(new ValueError.Ptr("reflect.Value.MethodByName", 0));
		}
		if (!((((v.flag & 8) >>> 0) === 0))) {
			return new Value.Ptr(($ptrType(rtype)).nil, 0, 0, 0);
		}
		_tuple = v.typ.MethodByName(name); m = new Method.Ptr(); $copy(m, _tuple[0], Method); ok = _tuple[1];
		if (!ok) {
			return new Value.Ptr(($ptrType(rtype)).nil, 0, 0, 0);
		}
		return v.Method(m.Index);
	};
	Value.prototype.MethodByName = function(name) { return this.$val.MethodByName(name); };
	Value.Ptr.prototype.NumField = function() {
		var v, tt;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBe(25);
		tt = v.typ.structType;
		return tt.fields.$length;
	};
	Value.prototype.NumField = function() { return this.$val.NumField(); };
	Value.Ptr.prototype.OverflowComplex = function(x) {
		var v, k, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 15) {
			return overflowFloat32(x.$real) || overflowFloat32(x.$imag);
		} else if (_ref === 16) {
			return false;
		}
		$panic(new ValueError.Ptr("reflect.Value.OverflowComplex", k));
	};
	Value.prototype.OverflowComplex = function(x) { return this.$val.OverflowComplex(x); };
	Value.Ptr.prototype.OverflowFloat = function(x) {
		var v, k, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 13) {
			return overflowFloat32(x);
		} else if (_ref === 14) {
			return false;
		}
		$panic(new ValueError.Ptr("reflect.Value.OverflowFloat", k));
	};
	Value.prototype.OverflowFloat = function(x) { return this.$val.OverflowFloat(x); };
	overflowFloat32 = function(x) {
		if (x < 0) {
			x = -x;
		}
		return 3.4028234663852886e+38 < x && x <= 1.7976931348623157e+308;
	};
	Value.Ptr.prototype.OverflowInt = function(x) {
		var v, k, _ref, x$1, bitSize, trunc;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			bitSize = (x$1 = v.typ.size, (((x$1 >>> 16 << 16) * 8 >>> 0) + (x$1 << 16 >>> 16) * 8) >>> 0);
			trunc = $shiftRightInt64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.Ptr("reflect.Value.OverflowInt", k));
	};
	Value.prototype.OverflowInt = function(x) { return this.$val.OverflowInt(x); };
	Value.Ptr.prototype.OverflowUint = function(x) {
		var v, k, _ref, x$1, bitSize, trunc;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 7 || _ref === 12 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11) {
			bitSize = (x$1 = v.typ.size, (((x$1 >>> 16 << 16) * 8 >>> 0) + (x$1 << 16 >>> 16) * 8) >>> 0);
			trunc = $shiftRightUint64(($shiftLeft64(x, ((64 - bitSize >>> 0)))), ((64 - bitSize >>> 0)));
			return !((x.$high === trunc.$high && x.$low === trunc.$low));
		}
		$panic(new ValueError.Ptr("reflect.Value.OverflowUint", k));
	};
	Value.prototype.OverflowUint = function(x) { return this.$val.OverflowUint(x); };
	Value.Ptr.prototype.SetBool = function(x) {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(1);
		v.ptr.$set(x);
	};
	Value.prototype.SetBool = function(x) { return this.$val.SetBool(x); };
	Value.Ptr.prototype.SetBytes = function(x) {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		if (!((v.typ.Elem().Kind() === 8))) {
			$panic(new $String("reflect.Value.SetBytes of non-byte slice"));
		}
		v.ptr.$set(x);
	};
	Value.prototype.SetBytes = function(x) { return this.$val.SetBytes(x); };
	Value.Ptr.prototype.setRunes = function(x) {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(23);
		if (!((v.typ.Elem().Kind() === 5))) {
			$panic(new $String("reflect.Value.setRunes of non-rune slice"));
		}
		v.ptr.$set(x);
	};
	Value.prototype.setRunes = function(x) { return this.$val.setRunes(x); };
	Value.Ptr.prototype.SetComplex = function(x) {
		var v, k, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 15) {
			v.ptr.$set(new $Complex64(x.$real, x.$imag));
		} else if (_ref === 16) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.Ptr("reflect.Value.SetComplex", k));
		}
	};
	Value.prototype.SetComplex = function(x) { return this.$val.SetComplex(x); };
	Value.Ptr.prototype.SetFloat = function(x) {
		var v, k, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 13) {
			v.ptr.$set(x);
		} else if (_ref === 14) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.Ptr("reflect.Value.SetFloat", k));
		}
	};
	Value.prototype.SetFloat = function(x) { return this.$val.SetFloat(x); };
	Value.Ptr.prototype.SetInt = function(x) {
		var v, k, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 2) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		} else if (_ref === 3) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) << 24 >> 24));
		} else if (_ref === 4) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) << 16 >> 16));
		} else if (_ref === 5) {
			v.ptr.$set(((x.$low + ((x.$high >> 31) * 4294967296)) >> 0));
		} else if (_ref === 6) {
			v.ptr.$set(x);
		} else {
			$panic(new ValueError.Ptr("reflect.Value.SetInt", k));
		}
	};
	Value.prototype.SetInt = function(x) { return this.$val.SetInt(x); };
	Value.Ptr.prototype.SetMapIndex = function(key, val) {
		var v, tt, k, e;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBe(21);
		new flag(v.flag).mustBeExported();
		new flag(key.flag).mustBeExported();
		tt = v.typ.mapType;
		$copy(key, key.assignTo("reflect.Value.SetMapIndex", tt.key, ($ptrType($emptyInterface)).nil), Value);
		k = 0;
		if (!((((key.flag & 2) >>> 0) === 0))) {
			k = key.ptr;
		} else if (key.typ.pointers()) {
			k = new ($ptrType($UnsafePointer))(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, key);
		} else {
			k = new ($ptrType($Uintptr))(function() { return this.$target.scalar; }, function($v) { this.$target.scalar = $v; }, key);
		}
		if (val.typ === ($ptrType(rtype)).nil) {
			mapdelete(v.typ, v.pointer(), k);
			return;
		}
		new flag(val.flag).mustBeExported();
		$copy(val, val.assignTo("reflect.Value.SetMapIndex", tt.elem, ($ptrType($emptyInterface)).nil), Value);
		e = 0;
		if (!((((val.flag & 2) >>> 0) === 0))) {
			e = val.ptr;
		} else if (val.typ.pointers()) {
			e = new ($ptrType($UnsafePointer))(function() { return this.$target.ptr; }, function($v) { this.$target.ptr = $v; }, val);
		} else {
			e = new ($ptrType($Uintptr))(function() { return this.$target.scalar; }, function($v) { this.$target.scalar = $v; }, val);
		}
		mapassign(v.typ, v.pointer(), k, e);
	};
	Value.prototype.SetMapIndex = function(key, val) { return this.$val.SetMapIndex(key, val); };
	Value.Ptr.prototype.SetUint = function(x) {
		var v, k, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBeAssignable();
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 7) {
			v.ptr.$set((x.$low >>> 0));
		} else if (_ref === 8) {
			v.ptr.$set((x.$low << 24 >>> 24));
		} else if (_ref === 9) {
			v.ptr.$set((x.$low << 16 >>> 16));
		} else if (_ref === 10) {
			v.ptr.$set((x.$low >>> 0));
		} else if (_ref === 11) {
			v.ptr.$set(x);
		} else if (_ref === 12) {
			v.ptr.$set((x.$low >>> 0));
		} else {
			$panic(new ValueError.Ptr("reflect.Value.SetUint", k));
		}
	};
	Value.prototype.SetUint = function(x) { return this.$val.SetUint(x); };
	Value.Ptr.prototype.SetPointer = function(x) {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(26);
		v.ptr.$set(x);
	};
	Value.prototype.SetPointer = function(x) { return this.$val.SetPointer(x); };
	Value.Ptr.prototype.SetString = function(x) {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		new flag(v.flag).mustBeAssignable();
		new flag(v.flag).mustBe(24);
		v.ptr.$set(x);
	};
	Value.prototype.SetString = function(x) { return this.$val.SetString(x); };
	Value.Ptr.prototype.String = function() {
		var v, k, _ref;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = new flag(v.flag).kind();
		_ref = k;
		if (_ref === 0) {
			return "<invalid Value>";
		} else if (_ref === 24) {
			return v.ptr.$get();
		}
		return "<" + v.typ.String() + " Value>";
	};
	Value.prototype.String = function() { return this.$val.String(); };
	Value.Ptr.prototype.Type = function() {
		var v, f, i, tt, x, m, ut, x$1, m$1;
		v = new Value.Ptr(); $copy(v, this, Value);
		f = v.flag;
		if (f === 0) {
			$panic(new ValueError.Ptr("reflect.Value.Type", 0));
		}
		if (((f & 8) >>> 0) === 0) {
			return v.typ;
		}
		i = (v.flag >> 0) >> 9 >> 0;
		if (v.typ.Kind() === 20) {
			tt = v.typ.interfaceType;
			if (i < 0 || i >= tt.methods.$length) {
				$panic(new $String("reflect: internal error: invalid method index"));
			}
			m = (x = tt.methods, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			return m.typ;
		}
		ut = v.typ.uncommonType.uncommon();
		if (ut === ($ptrType(uncommonType)).nil || i < 0 || i >= ut.methods.$length) {
			$panic(new $String("reflect: internal error: invalid method index"));
		}
		m$1 = (x$1 = ut.methods, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
		return m$1.mtyp;
	};
	Value.prototype.Type = function() { return this.$val.Type(); };
	Value.Ptr.prototype.Uint = function() {
		var v, k, p, _ref, x;
		v = new Value.Ptr(); $copy(v, this, Value);
		k = new flag(v.flag).kind();
		p = 0;
		if (!((((v.flag & 2) >>> 0) === 0))) {
			p = v.ptr;
		} else {
			p = new ($ptrType($Uintptr))(function() { return this.$target.scalar; }, function($v) { this.$target.scalar = $v; }, v);
		}
		_ref = k;
		if (_ref === 7) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 8) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 9) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 10) {
			return new $Uint64(0, p.$get());
		} else if (_ref === 11) {
			return p.$get();
		} else if (_ref === 12) {
			return (x = p.$get(), new $Uint64(0, x.constructor === Number ? x : 1));
		}
		$panic(new ValueError.Ptr("reflect.Value.Uint", k));
	};
	Value.prototype.Uint = function() { return this.$val.Uint(); };
	Value.Ptr.prototype.UnsafeAddr = function() {
		var v;
		v = new Value.Ptr(); $copy(v, this, Value);
		if (v.typ === ($ptrType(rtype)).nil) {
			$panic(new ValueError.Ptr("reflect.Value.UnsafeAddr", 0));
		}
		if (((v.flag & 4) >>> 0) === 0) {
			$panic(new $String("reflect.Value.UnsafeAddr of unaddressable value"));
		}
		return v.ptr;
	};
	Value.prototype.UnsafeAddr = function() { return this.$val.UnsafeAddr(); };
	typesMustMatch = function(what, t1, t2) {
		if (!($interfaceIsEqual(t1, t2))) {
			$panic(new $String(what + ": " + t1.String() + " != " + t2.String()));
		}
	};
	New = $pkg.New = function(typ) {
		var ptr, fl;
		if ($interfaceIsEqual(typ, $ifaceNil)) {
			$panic(new $String("reflect: New(nil)"));
		}
		ptr = unsafe_New($assertType(typ, ($ptrType(rtype))));
		fl = 352;
		return new Value.Ptr(typ.common().ptrTo(), ptr, 0, fl);
	};
	Value.Ptr.prototype.assignTo = function(context, dst, target) {
		var v, fl, x;
		v = new Value.Ptr(); $copy(v, this, Value);
		if (!((((v.flag & 8) >>> 0) === 0))) {
			$copy(v, makeMethodValue(context, $clone(v, Value)), Value);
		}
		if (directlyAssignable(dst, v.typ)) {
			v.typ = dst;
			fl = (v.flag & 7) >>> 0;
			fl = (fl | (((dst.Kind() >>> 0) << 4 >>> 0))) >>> 0;
			return new Value.Ptr(dst, v.ptr, v.scalar, fl);
		} else if (implements$1(dst, v.typ)) {
			if (target === ($ptrType($emptyInterface)).nil) {
				target = $newDataPointer($ifaceNil, ($ptrType($emptyInterface)));
			}
			x = valueInterface($clone(v, Value), false);
			if (dst.NumMethod() === 0) {
				target.$set(x);
			} else {
				ifaceE2I(dst, x, target);
			}
			return new Value.Ptr(dst, target, 0, 322);
		}
		$panic(new $String(context + ": value of type " + v.typ.String() + " is not assignable to type " + dst.String()));
	};
	Value.prototype.assignTo = function(context, dst, target) { return this.$val.assignTo(context, dst, target); };
	Value.Ptr.prototype.Convert = function(t) {
		var v, op;
		v = new Value.Ptr(); $copy(v, this, Value);
		if (!((((v.flag & 8) >>> 0) === 0))) {
			$copy(v, makeMethodValue("Convert", $clone(v, Value)), Value);
		}
		op = convertOp(t.common(), v.typ);
		if (op === $throwNilPointerError) {
			$panic(new $String("reflect.Value.Convert: value of type " + v.typ.String() + " cannot be converted to type " + t.String()));
		}
		return op($clone(v, Value), t);
	};
	Value.prototype.Convert = function(t) { return this.$val.Convert(t); };
	convertOp = function(dst, src) {
		var _ref, _ref$1, _ref$2, _ref$3, _ref$4, _ref$5, _ref$6;
		_ref = src.Kind();
		if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			_ref$1 = dst.Kind();
			if (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 6 || _ref$1 === 7 || _ref$1 === 8 || _ref$1 === 9 || _ref$1 === 10 || _ref$1 === 11 || _ref$1 === 12) {
				return cvtInt;
			} else if (_ref$1 === 13 || _ref$1 === 14) {
				return cvtIntFloat;
			} else if (_ref$1 === 24) {
				return cvtIntString;
			}
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			_ref$2 = dst.Kind();
			if (_ref$2 === 2 || _ref$2 === 3 || _ref$2 === 4 || _ref$2 === 5 || _ref$2 === 6 || _ref$2 === 7 || _ref$2 === 8 || _ref$2 === 9 || _ref$2 === 10 || _ref$2 === 11 || _ref$2 === 12) {
				return cvtUint;
			} else if (_ref$2 === 13 || _ref$2 === 14) {
				return cvtUintFloat;
			} else if (_ref$2 === 24) {
				return cvtUintString;
			}
		} else if (_ref === 13 || _ref === 14) {
			_ref$3 = dst.Kind();
			if (_ref$3 === 2 || _ref$3 === 3 || _ref$3 === 4 || _ref$3 === 5 || _ref$3 === 6) {
				return cvtFloatInt;
			} else if (_ref$3 === 7 || _ref$3 === 8 || _ref$3 === 9 || _ref$3 === 10 || _ref$3 === 11 || _ref$3 === 12) {
				return cvtFloatUint;
			} else if (_ref$3 === 13 || _ref$3 === 14) {
				return cvtFloat;
			}
		} else if (_ref === 15 || _ref === 16) {
			_ref$4 = dst.Kind();
			if (_ref$4 === 15 || _ref$4 === 16) {
				return cvtComplex;
			}
		} else if (_ref === 24) {
			if ((dst.Kind() === 23) && dst.Elem().PkgPath() === "") {
				_ref$5 = dst.Elem().Kind();
				if (_ref$5 === 8) {
					return cvtStringBytes;
				} else if (_ref$5 === 5) {
					return cvtStringRunes;
				}
			}
		} else if (_ref === 23) {
			if ((dst.Kind() === 24) && src.Elem().PkgPath() === "") {
				_ref$6 = src.Elem().Kind();
				if (_ref$6 === 8) {
					return cvtBytesString;
				} else if (_ref$6 === 5) {
					return cvtRunesString;
				}
			}
		}
		if (haveIdenticalUnderlyingType(dst, src)) {
			return cvtDirect;
		}
		if ((dst.Kind() === 22) && dst.Name() === "" && (src.Kind() === 22) && src.Name() === "" && haveIdenticalUnderlyingType(dst.Elem().common(), src.Elem().common())) {
			return cvtDirect;
		}
		if (implements$1(dst, src)) {
			if (src.Kind() === 20) {
				return cvtI2I;
			}
			return cvtT2I;
		}
		return $throwNilPointerError;
	};
	makeFloat = function(f, v, t) {
		var typ, ptr, s, _ref;
		typ = t.common();
		if (typ.size > 4) {
			ptr = unsafe_New(typ);
			ptr.$set(v);
			return new Value.Ptr(typ, ptr, 0, (((f | 2) >>> 0) | ((typ.Kind() >>> 0) << 4 >>> 0)) >>> 0);
		}
		s = 0;
		_ref = typ.size;
		if (_ref === 4) {
			new ($ptrType($Uintptr))(function() { return s; }, function($v) { s = $v; }).$set(v);
		} else if (_ref === 8) {
			new ($ptrType($Uintptr))(function() { return s; }, function($v) { s = $v; }).$set(v);
		}
		return new Value.Ptr(typ, 0, s, (f | ((typ.Kind() >>> 0) << 4 >>> 0)) >>> 0);
	};
	makeComplex = function(f, v, t) {
		var typ, ptr, _ref, s;
		typ = t.common();
		if (typ.size > 4) {
			ptr = unsafe_New(typ);
			_ref = typ.size;
			if (_ref === 8) {
				ptr.$set(new $Complex64(v.$real, v.$imag));
			} else if (_ref === 16) {
				ptr.$set(v);
			}
			return new Value.Ptr(typ, ptr, 0, (((f | 2) >>> 0) | ((typ.Kind() >>> 0) << 4 >>> 0)) >>> 0);
		}
		s = 0;
		new ($ptrType($Uintptr))(function() { return s; }, function($v) { s = $v; }).$set(new $Complex64(v.$real, v.$imag));
		return new Value.Ptr(typ, 0, s, (f | ((typ.Kind() >>> 0) << 4 >>> 0)) >>> 0);
	};
	makeString = function(f, v, t) {
		var ret;
		ret = new Value.Ptr(); $copy(ret, New(t).Elem(), Value);
		ret.SetString(v);
		ret.flag = ((ret.flag & ~4) | f) >>> 0;
		return ret;
	};
	makeBytes = function(f, v, t) {
		var ret;
		ret = new Value.Ptr(); $copy(ret, New(t).Elem(), Value);
		ret.SetBytes(v);
		ret.flag = ((ret.flag & ~4) | f) >>> 0;
		return ret;
	};
	makeRunes = function(f, v, t) {
		var ret;
		ret = new Value.Ptr(); $copy(ret, New(t).Elem(), Value);
		ret.setRunes(v);
		ret.flag = ((ret.flag & ~4) | f) >>> 0;
		return ret;
	};
	cvtInt = function(v, t) {
		var x;
		return makeInt((v.flag & 1) >>> 0, (x = v.Int(), new $Uint64(x.$high, x.$low)), t);
	};
	cvtUint = function(v, t) {
		return makeInt((v.flag & 1) >>> 0, v.Uint(), t);
	};
	cvtFloatInt = function(v, t) {
		var x;
		return makeInt((v.flag & 1) >>> 0, (x = new $Int64(0, v.Float()), new $Uint64(x.$high, x.$low)), t);
	};
	cvtFloatUint = function(v, t) {
		return makeInt((v.flag & 1) >>> 0, new $Uint64(0, v.Float()), t);
	};
	cvtIntFloat = function(v, t) {
		return makeFloat((v.flag & 1) >>> 0, $flatten64(v.Int()), t);
	};
	cvtUintFloat = function(v, t) {
		return makeFloat((v.flag & 1) >>> 0, $flatten64(v.Uint()), t);
	};
	cvtFloat = function(v, t) {
		return makeFloat((v.flag & 1) >>> 0, v.Float(), t);
	};
	cvtComplex = function(v, t) {
		return makeComplex((v.flag & 1) >>> 0, v.Complex(), t);
	};
	cvtIntString = function(v, t) {
		return makeString((v.flag & 1) >>> 0, $encodeRune(v.Int().$low), t);
	};
	cvtUintString = function(v, t) {
		return makeString((v.flag & 1) >>> 0, $encodeRune(v.Uint().$low), t);
	};
	cvtBytesString = function(v, t) {
		return makeString((v.flag & 1) >>> 0, $bytesToString(v.Bytes()), t);
	};
	cvtStringBytes = function(v, t) {
		return makeBytes((v.flag & 1) >>> 0, new ($sliceType($Uint8))($stringToBytes(v.String())), t);
	};
	cvtRunesString = function(v, t) {
		return makeString((v.flag & 1) >>> 0, $runesToString(v.runes()), t);
	};
	cvtStringRunes = function(v, t) {
		return makeRunes((v.flag & 1) >>> 0, new ($sliceType($Int32))($stringToRunes(v.String())), t);
	};
	cvtT2I = function(v, typ) {
		var target, x;
		target = $newDataPointer($ifaceNil, ($ptrType($emptyInterface)));
		x = valueInterface($clone(v, Value), false);
		if (typ.NumMethod() === 0) {
			target.$set(x);
		} else {
			ifaceE2I($assertType(typ, ($ptrType(rtype))), x, target);
		}
		return new Value.Ptr(typ.common(), target, 0, (((((v.flag & 1) >>> 0) | 2) >>> 0) | 320) >>> 0);
	};
	cvtI2I = function(v, typ) {
		var ret;
		if (v.IsNil()) {
			ret = new Value.Ptr(); $copy(ret, Zero(typ), Value);
			ret.flag = (ret.flag | (((v.flag & 1) >>> 0))) >>> 0;
			return ret;
		}
		return cvtT2I($clone(v.Elem(), Value), typ);
	};
	call = function() {
		$panic("Native function not implemented: reflect.call");
	};
	$pkg.$init = function() {
		mapIter.init([["t", "t", "reflect", Type, ""], ["m", "m", "reflect", js.Object, ""], ["keys", "keys", "reflect", js.Object, ""], ["i", "i", "reflect", $Int, ""]]);
		Type.init([["Align", "Align", "", $funcType([], [$Int], false)], ["AssignableTo", "AssignableTo", "", $funcType([Type], [$Bool], false)], ["Bits", "Bits", "", $funcType([], [$Int], false)], ["ChanDir", "ChanDir", "", $funcType([], [ChanDir], false)], ["ConvertibleTo", "ConvertibleTo", "", $funcType([Type], [$Bool], false)], ["Elem", "Elem", "", $funcType([], [Type], false)], ["Field", "Field", "", $funcType([$Int], [StructField], false)], ["FieldAlign", "FieldAlign", "", $funcType([], [$Int], false)], ["FieldByIndex", "FieldByIndex", "", $funcType([($sliceType($Int))], [StructField], false)], ["FieldByName", "FieldByName", "", $funcType([$String], [StructField, $Bool], false)], ["FieldByNameFunc", "FieldByNameFunc", "", $funcType([($funcType([$String], [$Bool], false))], [StructField, $Bool], false)], ["Implements", "Implements", "", $funcType([Type], [$Bool], false)], ["In", "In", "", $funcType([$Int], [Type], false)], ["IsVariadic", "IsVariadic", "", $funcType([], [$Bool], false)], ["Key", "Key", "", $funcType([], [Type], false)], ["Kind", "Kind", "", $funcType([], [Kind], false)], ["Len", "Len", "", $funcType([], [$Int], false)], ["Method", "Method", "", $funcType([$Int], [Method], false)], ["MethodByName", "MethodByName", "", $funcType([$String], [Method, $Bool], false)], ["Name", "Name", "", $funcType([], [$String], false)], ["NumField", "NumField", "", $funcType([], [$Int], false)], ["NumIn", "NumIn", "", $funcType([], [$Int], false)], ["NumMethod", "NumMethod", "", $funcType([], [$Int], false)], ["NumOut", "NumOut", "", $funcType([], [$Int], false)], ["Out", "Out", "", $funcType([$Int], [Type], false)], ["PkgPath", "PkgPath", "", $funcType([], [$String], false)], ["Size", "Size", "", $funcType([], [$Uintptr], false)], ["String", "String", "", $funcType([], [$String], false)], ["common", "common", "reflect", $funcType([], [($ptrType(rtype))], false)], ["uncommon", "uncommon", "reflect", $funcType([], [($ptrType(uncommonType))], false)]]);
		Kind.methods = [["String", "String", "", $funcType([], [$String], false), -1]];
		($ptrType(Kind)).methods = [["String", "String", "", $funcType([], [$String], false), -1]];
		rtype.methods = [["uncommon", "uncommon", "reflect", $funcType([], [($ptrType(uncommonType))], false), 9]];
		($ptrType(rtype)).methods = [["Align", "Align", "", $funcType([], [$Int], false), -1], ["AssignableTo", "AssignableTo", "", $funcType([Type], [$Bool], false), -1], ["Bits", "Bits", "", $funcType([], [$Int], false), -1], ["ChanDir", "ChanDir", "", $funcType([], [ChanDir], false), -1], ["ConvertibleTo", "ConvertibleTo", "", $funcType([Type], [$Bool], false), -1], ["Elem", "Elem", "", $funcType([], [Type], false), -1], ["Field", "Field", "", $funcType([$Int], [StructField], false), -1], ["FieldAlign", "FieldAlign", "", $funcType([], [$Int], false), -1], ["FieldByIndex", "FieldByIndex", "", $funcType([($sliceType($Int))], [StructField], false), -1], ["FieldByName", "FieldByName", "", $funcType([$String], [StructField, $Bool], false), -1], ["FieldByNameFunc", "FieldByNameFunc", "", $funcType([($funcType([$String], [$Bool], false))], [StructField, $Bool], false), -1], ["Implements", "Implements", "", $funcType([Type], [$Bool], false), -1], ["In", "In", "", $funcType([$Int], [Type], false), -1], ["IsVariadic", "IsVariadic", "", $funcType([], [$Bool], false), -1], ["Key", "Key", "", $funcType([], [Type], false), -1], ["Kind", "Kind", "", $funcType([], [Kind], false), -1], ["Len", "Len", "", $funcType([], [$Int], false), -1], ["Method", "Method", "", $funcType([$Int], [Method], false), -1], ["MethodByName", "MethodByName", "", $funcType([$String], [Method, $Bool], false), -1], ["Name", "Name", "", $funcType([], [$String], false), -1], ["NumField", "NumField", "", $funcType([], [$Int], false), -1], ["NumIn", "NumIn", "", $funcType([], [$Int], false), -1], ["NumMethod", "NumMethod", "", $funcType([], [$Int], false), -1], ["NumOut", "NumOut", "", $funcType([], [$Int], false), -1], ["Out", "Out", "", $funcType([$Int], [Type], false), -1], ["PkgPath", "PkgPath", "", $funcType([], [$String], false), -1], ["Size", "Size", "", $funcType([], [$Uintptr], false), -1], ["String", "String", "", $funcType([], [$String], false), -1], ["common", "common", "reflect", $funcType([], [($ptrType(rtype))], false), -1], ["pointers", "pointers", "reflect", $funcType([], [$Bool], false), -1], ["ptrTo", "ptrTo", "reflect", $funcType([], [($ptrType(rtype))], false), -1], ["uncommon", "uncommon", "reflect", $funcType([], [($ptrType(uncommonType))], false), 9]];
		rtype.init([["size", "size", "reflect", $Uintptr, ""], ["hash", "hash", "reflect", $Uint32, ""], ["_$2", "_", "reflect", $Uint8, ""], ["align", "align", "reflect", $Uint8, ""], ["fieldAlign", "fieldAlign", "reflect", $Uint8, ""], ["kind", "kind", "reflect", $Uint8, ""], ["alg", "alg", "reflect", ($ptrType($Uintptr)), ""], ["gc", "gc", "reflect", $UnsafePointer, ""], ["string", "string", "reflect", ($ptrType($String)), ""], ["uncommonType", "", "reflect", ($ptrType(uncommonType)), ""], ["ptrToThis", "ptrToThis", "reflect", ($ptrType(rtype)), ""], ["zero", "zero", "reflect", $UnsafePointer, ""]]);
		method.init([["name", "name", "reflect", ($ptrType($String)), ""], ["pkgPath", "pkgPath", "reflect", ($ptrType($String)), ""], ["mtyp", "mtyp", "reflect", ($ptrType(rtype)), ""], ["typ", "typ", "reflect", ($ptrType(rtype)), ""], ["ifn", "ifn", "reflect", $UnsafePointer, ""], ["tfn", "tfn", "reflect", $UnsafePointer, ""]]);
		($ptrType(uncommonType)).methods = [["Method", "Method", "", $funcType([$Int], [Method], false), -1], ["MethodByName", "MethodByName", "", $funcType([$String], [Method, $Bool], false), -1], ["Name", "Name", "", $funcType([], [$String], false), -1], ["NumMethod", "NumMethod", "", $funcType([], [$Int], false), -1], ["PkgPath", "PkgPath", "", $funcType([], [$String], false), -1], ["uncommon", "uncommon", "reflect", $funcType([], [($ptrType(uncommonType))], false), -1]];
		uncommonType.init([["name", "name", "reflect", ($ptrType($String)), ""], ["pkgPath", "pkgPath", "reflect", ($ptrType($String)), ""], ["methods", "methods", "reflect", ($sliceType(method)), ""]]);
		ChanDir.methods = [["String", "String", "", $funcType([], [$String], false), -1]];
		($ptrType(ChanDir)).methods = [["String", "String", "", $funcType([], [$String], false), -1]];
		arrayType.methods = [["uncommon", "uncommon", "reflect", $funcType([], [($ptrType(uncommonType))], false), 0]];
		($ptrType(arrayType)).methods = [["Align", "Align", "", $funcType([], [$Int], false), 0], ["AssignableTo", "AssignableTo", "", $funcType([Type], [$Bool], false), 0], ["Bits", "Bits", "", $funcType([], [$Int], false), 0], ["ChanDir", "ChanDir", "", $funcType([], [ChanDir], false), 0], ["ConvertibleTo", "ConvertibleTo", "", $funcType([Type], [$Bool], false), 0], ["Elem", "Elem", "", $funcType([], [Type], false), 0], ["Field", "Field", "", $funcType([$Int], [StructField], false), 0], ["FieldAlign", "FieldAlign", "", $funcType([], [$Int], false), 0], ["FieldByIndex", "FieldByIndex", "", $funcType([($sliceType($Int))], [StructField], false), 0], ["FieldByName", "FieldByName", "", $funcType([$String], [StructField, $Bool], false), 0], ["FieldByNameFunc", "FieldByNameFunc", "", $funcType([($funcType([$String], [$Bool], false))], [StructField, $Bool], false), 0], ["Implements", "Implements", "", $funcType([Type], [$Bool], false), 0], ["In", "In", "", $funcType([$Int], [Type], false), 0], ["IsVariadic", "IsVariadic", "", $funcType([], [$Bool], false), 0], ["Key", "Key", "", $funcType([], [Type], false), 0], ["Kind", "Kind", "", $funcType([], [Kind], false), 0], ["Len", "Len", "", $funcType([], [$Int], false), 0], ["Method", "Method", "", $funcType([$Int], [Method], false), 0], ["MethodByName", "MethodByName", "", $funcType([$String], [Method, $Bool], false), 0], ["Name", "Name", "", $funcType([], [$String], false), 0], ["NumField", "NumField", "", $funcType([], [$Int], false), 0], ["NumIn", "NumIn", "", $funcType([], [$Int], false), 0], ["NumMethod", "NumMethod", "", $funcType([], [$Int], false), 0], ["NumOut", "NumOut", "", $funcType([], [$Int], false), 0], ["Out", "Out", "", $funcType([$Int], [Type], false), 0], ["PkgPath", "PkgPath", "", $funcType([], [$String], false), 0], ["Size", "Size", "", $funcType([], [$Uintptr], false), 0], ["String", "String", "", $funcType([], [$String], false), 0], ["common", "common", "reflect", $funcType([], [($ptrType(rtype))], false), 0], ["pointers", "pointers", "reflect", $funcType([], [$Bool], false), 0], ["ptrTo", "ptrTo", "reflect", $funcType([], [($ptrType(rtype))], false), 0], ["uncommon", "uncommon", "reflect", $funcType([], [($ptrType(uncommonType))], false), 0]];
		arrayType.init([["rtype", "", "reflect", rtype, "reflect:\"array\""], ["elem", "elem", "reflect", ($ptrType(rtype)), ""], ["slice", "slice", "reflect", ($ptrType(rtype)), ""], ["len", "len", "reflect", $Uintptr, ""]]);
		chanType.methods = [["uncommon", "uncommon", "reflect", $funcType([], [($ptrType(uncommonType))], false), 0]];
		($ptrType(chanType)).methods = [["Align", "Align", "", $funcType([], [$Int], false), 0], ["AssignableTo", "AssignableTo", "", $funcType([Type], [$Bool], false), 0], ["Bits", "Bits", "", $funcType([], [$Int], false), 0], ["ChanDir", "ChanDir", "", $funcType([], [ChanDir], false), 0], ["ConvertibleTo", "ConvertibleTo", "", $funcType([Type], [$Bool], false), 0], ["Elem", "Elem", "", $funcType([], [Type], false), 0], ["Field", "Field", "", $funcType([$Int], [StructField], false), 0], ["FieldAlign", "FieldAlign", "", $funcType([], [$Int], false), 0], ["FieldByIndex", "FieldByIndex", "", $funcType([($sliceType($Int))], [StructField], false), 0], ["FieldByName", "FieldByName", "", $funcType([$String], [StructField, $Bool], false), 0], ["FieldByNameFunc", "FieldByNameFunc", "", $funcType([($funcType([$String], [$Bool], false))], [StructField, $Bool], false), 0], ["Implements", "Implements", "", $funcType([Type], [$Bool], false), 0], ["In", "In", "", $funcType([$Int], [Type], false), 0], ["IsVariadic", "IsVariadic", "", $funcType([], [$Bool], false), 0], ["Key", "Key", "", $funcType([], [Type], false), 0], ["Kind", "Kind", "", $funcType([], [Kind], false), 0], ["Len", "Len", "", $funcType([], [$Int], false), 0], ["Method", "Method", "", $funcType([$Int], [Method], false), 0], ["MethodByName", "MethodByName", "", $funcType([$String], [Method, $Bool], false), 0], ["Name", "Name", "", $funcType([], [$String], false), 0], ["NumField", "NumField", "", $funcType([], [$Int], false), 0], ["NumIn", "NumIn", "", $funcType([], [$Int], false), 0], ["NumMethod", "NumMethod", "", $funcType([], [$Int], false), 0], ["NumOut", "NumOut", "", $funcType([], [$Int], false), 0], ["Out", "Out", "", $funcType([$Int], [Type], false), 0], ["PkgPath", "PkgPath", "", $funcType([], [$String], false), 0], ["Size", "Size", "", $funcType([], [$Uintptr], false), 0], ["String", "String", "", $funcType([], [$String], false), 0], ["common", "common", "reflect", $funcType([], [($ptrType(rtype))], false), 0], ["pointers", "pointers", "reflect", $funcType([], [$Bool], false), 0], ["ptrTo", "ptrTo", "reflect", $funcType([], [($ptrType(rtype))], false), 0], ["uncommon", "uncommon", "reflect", $funcType([], [($ptrType(uncommonType))], false), 0]];
		chanType.init([["rtype", "", "reflect", rtype, "reflect:\"chan\""], ["elem", "elem", "reflect", ($ptrType(rtype)), ""], ["dir", "dir", "reflect", $Uintptr, ""]]);
		funcType.methods = [["uncommon", "uncommon", "reflect", $funcType([], [($ptrType(uncommonType))], false), 0]];
		($ptrType(funcType)).methods = [["Align", "Align", "", $funcType([], [$Int], false), 0], ["AssignableTo", "AssignableTo", "", $funcType([Type], [$Bool], false), 0], ["Bits", "Bits", "", $funcType([], [$Int], false), 0], ["ChanDir", "ChanDir", "", $funcType([], [ChanDir], false), 0], ["ConvertibleTo", "ConvertibleTo", "", $funcType([Type], [$Bool], false), 0], ["Elem", "Elem", "", $funcType([], [Type], false), 0], ["Field", "Field", "", $funcType([$Int], [StructField], false), 0], ["FieldAlign", "FieldAlign", "", $funcType([], [$Int], false), 0], ["FieldByIndex", "FieldByIndex", "", $funcType([($sliceType($Int))], [StructField], false), 0], ["FieldByName", "FieldByName", "", $funcType([$String], [StructField, $Bool], false), 0], ["FieldByNameFunc", "FieldByNameFunc", "", $funcType([($funcType([$String], [$Bool], false))], [StructField, $Bool], false), 0], ["Implements", "Implements", "", $funcType([Type], [$Bool], false), 0], ["In", "In", "", $funcType([$Int], [Type], false), 0], ["IsVariadic", "IsVariadic", "", $funcType([], [$Bool], false), 0], ["Key", "Key", "", $funcType([], [Type], false), 0], ["Kind", "Kind", "", $funcType([], [Kind], false), 0], ["Len", "Len", "", $funcType([], [$Int], false), 0], ["Method", "Method", "", $funcType([$Int], [Method], false), 0], ["MethodByName", "MethodByName", "", $funcType([$String], [Method, $Bool], false), 0], ["Name", "Name", "", $funcType([], [$String], false), 0], ["NumField", "NumField", "", $funcType([], [$Int], false), 0], ["NumIn", "NumIn", "", $funcType([], [$Int], false), 0], ["NumMethod", "NumMethod", "", $funcType([], [$Int], false), 0], ["NumOut", "NumOut", "", $funcType([], [$Int], false), 0], ["Out", "Out", "", $funcType([$Int], [Type], false), 0], ["PkgPath", "PkgPath", "", $funcType([], [$String], false), 0], ["Size", "Size", "", $funcType([], [$Uintptr], false), 0], ["String", "String", "", $funcType([], [$String], false), 0], ["common", "common", "reflect", $funcType([], [($ptrType(rtype))], false), 0], ["pointers", "pointers", "reflect", $funcType([], [$Bool], false), 0], ["ptrTo", "ptrTo", "reflect", $funcType([], [($ptrType(rtype))], false), 0], ["uncommon", "uncommon", "reflect", $funcType([], [($ptrType(uncommonType))], false), 0]];
		funcType.init([["rtype", "", "reflect", rtype, "reflect:\"func\""], ["dotdotdot", "dotdotdot", "reflect", $Bool, ""], ["in$2", "in", "reflect", ($sliceType(($ptrType(rtype)))), ""], ["out", "out", "reflect", ($sliceType(($ptrType(rtype)))), ""]]);
		imethod.init([["name", "name", "reflect", ($ptrType($String)), ""], ["pkgPath", "pkgPath", "reflect", ($ptrType($String)), ""], ["typ", "typ", "reflect", ($ptrType(rtype)), ""]]);
		interfaceType.methods = [["uncommon", "uncommon", "reflect", $funcType([], [($ptrType(uncommonType))], false), 0]];
		($ptrType(interfaceType)).methods = [["Align", "Align", "", $funcType([], [$Int], false), 0], ["AssignableTo", "AssignableTo", "", $funcType([Type], [$Bool], false), 0], ["Bits", "Bits", "", $funcType([], [$Int], false), 0], ["ChanDir", "ChanDir", "", $funcType([], [ChanDir], false), 0], ["ConvertibleTo", "ConvertibleTo", "", $funcType([Type], [$Bool], false), 0], ["Elem", "Elem", "", $funcType([], [Type], false), 0], ["Field", "Field", "", $funcType([$Int], [StructField], false), 0], ["FieldAlign", "FieldAlign", "", $funcType([], [$Int], false), 0], ["FieldByIndex", "FieldByIndex", "", $funcType([($sliceType($Int))], [StructField], false), 0], ["FieldByName", "FieldByName", "", $funcType([$String], [StructField, $Bool], false), 0], ["FieldByNameFunc", "FieldByNameFunc", "", $funcType([($funcType([$String], [$Bool], false))], [StructField, $Bool], false), 0], ["Implements", "Implements", "", $funcType([Type], [$Bool], false), 0], ["In", "In", "", $funcType([$Int], [Type], false), 0], ["IsVariadic", "IsVariadic", "", $funcType([], [$Bool], false), 0], ["Key", "Key", "", $funcType([], [Type], false), 0], ["Kind", "Kind", "", $funcType([], [Kind], false), 0], ["Len", "Len", "", $funcType([], [$Int], false), 0], ["Method", "Method", "", $funcType([$Int], [Method], false), -1], ["MethodByName", "MethodByName", "", $funcType([$String], [Method, $Bool], false), -1], ["Name", "Name", "", $funcType([], [$String], false), 0], ["NumField", "NumField", "", $funcType([], [$Int], false), 0], ["NumIn", "NumIn", "", $funcType([], [$Int], false), 0], ["NumMethod", "NumMethod", "", $funcType([], [$Int], false), -1], ["NumOut", "NumOut", "", $funcType([], [$Int], false), 0], ["Out", "Out", "", $funcType([$Int], [Type], false), 0], ["PkgPath", "PkgPath", "", $funcType([], [$String], false), 0], ["Size", "Size", "", $funcType([], [$Uintptr], false), 0], ["String", "String", "", $funcType([], [$String], false), 0], ["common", "common", "reflect", $funcType([], [($ptrType(rtype))], false), 0], ["pointers", "pointers", "reflect", $funcType([], [$Bool], false), 0], ["ptrTo", "ptrTo", "reflect", $funcType([], [($ptrType(rtype))], false), 0], ["uncommon", "uncommon", "reflect", $funcType([], [($ptrType(uncommonType))], false), 0]];
		interfaceType.init([["rtype", "", "reflect", rtype, "reflect:\"interface\""], ["methods", "methods", "reflect", ($sliceType(imethod)), ""]]);
		mapType.methods = [["uncommon", "uncommon", "reflect", $funcType([], [($ptrType(uncommonType))], false), 0]];
		($ptrType(mapType)).methods = [["Align", "Align", "", $funcType([], [$Int], false), 0], ["AssignableTo", "AssignableTo", "", $funcType([Type], [$Bool], false), 0], ["Bits", "Bits", "", $funcType([], [$Int], false), 0], ["ChanDir", "ChanDir", "", $funcType([], [ChanDir], false), 0], ["ConvertibleTo", "ConvertibleTo", "", $funcType([Type], [$Bool], false), 0], ["Elem", "Elem", "", $funcType([], [Type], false), 0], ["Field", "Field", "", $funcType([$Int], [StructField], false), 0], ["FieldAlign", "FieldAlign", "", $funcType([], [$Int], false), 0], ["FieldByIndex", "FieldByIndex", "", $funcType([($sliceType($Int))], [StructField], false), 0], ["FieldByName", "FieldByName", "", $funcType([$String], [StructField, $Bool], false), 0], ["FieldByNameFunc", "FieldByNameFunc", "", $funcType([($funcType([$String], [$Bool], false))], [StructField, $Bool], false), 0], ["Implements", "Implements", "", $funcType([Type], [$Bool], false), 0], ["In", "In", "", $funcType([$Int], [Type], false), 0], ["IsVariadic", "IsVariadic", "", $funcType([], [$Bool], false), 0], ["Key", "Key", "", $funcType([], [Type], false), 0], ["Kind", "Kind", "", $funcType([], [Kind], false), 0], ["Len", "Len", "", $funcType([], [$Int], false), 0], ["Method", "Method", "", $funcType([$Int], [Method], false), 0], ["MethodByName", "MethodByName", "", $funcType([$String], [Method, $Bool], false), 0], ["Name", "Name", "", $funcType([], [$String], false), 0], ["NumField", "NumField", "", $funcType([], [$Int], false), 0], ["NumIn", "NumIn", "", $funcType([], [$Int], false), 0], ["NumMethod", "NumMethod", "", $funcType([], [$Int], false), 0], ["NumOut", "NumOut", "", $funcType([], [$Int], false), 0], ["Out", "Out", "", $funcType([$Int], [Type], false), 0], ["PkgPath", "PkgPath", "", $funcType([], [$String], false), 0], ["Size", "Size", "", $funcType([], [$Uintptr], false), 0], ["String", "String", "", $funcType([], [$String], false), 0], ["common", "common", "reflect", $funcType([], [($ptrType(rtype))], false), 0], ["pointers", "pointers", "reflect", $funcType([], [$Bool], false), 0], ["ptrTo", "ptrTo", "reflect", $funcType([], [($ptrType(rtype))], false), 0], ["uncommon", "uncommon", "reflect", $funcType([], [($ptrType(uncommonType))], false), 0]];
		mapType.init([["rtype", "", "reflect", rtype, "reflect:\"map\""], ["key", "key", "reflect", ($ptrType(rtype)), ""], ["elem", "elem", "reflect", ($ptrType(rtype)), ""], ["bucket", "bucket", "reflect", ($ptrType(rtype)), ""], ["hmap", "hmap", "reflect", ($ptrType(rtype)), ""]]);
		ptrType.methods = [["uncommon", "uncommon", "reflect", $funcType([], [($ptrType(uncommonType))], false), 0]];
		($ptrType(ptrType)).methods = [["Align", "Align", "", $funcType([], [$Int], false), 0], ["AssignableTo", "AssignableTo", "", $funcType([Type], [$Bool], false), 0], ["Bits", "Bits", "", $funcType([], [$Int], false), 0], ["ChanDir", "ChanDir", "", $funcType([], [ChanDir], false), 0], ["ConvertibleTo", "ConvertibleTo", "", $funcType([Type], [$Bool], false), 0], ["Elem", "Elem", "", $funcType([], [Type], false), 0], ["Field", "Field", "", $funcType([$Int], [StructField], false), 0], ["FieldAlign", "FieldAlign", "", $funcType([], [$Int], false), 0], ["FieldByIndex", "FieldByIndex", "", $funcType([($sliceType($Int))], [StructField], false), 0], ["FieldByName", "FieldByName", "", $funcType([$String], [StructField, $Bool], false), 0], ["FieldByNameFunc", "FieldByNameFunc", "", $funcType([($funcType([$String], [$Bool], false))], [StructField, $Bool], false), 0], ["Implements", "Implements", "", $funcType([Type], [$Bool], false), 0], ["In", "In", "", $funcType([$Int], [Type], false), 0], ["IsVariadic", "IsVariadic", "", $funcType([], [$Bool], false), 0], ["Key", "Key", "", $funcType([], [Type], false), 0], ["Kind", "Kind", "", $funcType([], [Kind], false), 0], ["Len", "Len", "", $funcType([], [$Int], false), 0], ["Method", "Method", "", $funcType([$Int], [Method], false), 0], ["MethodByName", "MethodByName", "", $funcType([$String], [Method, $Bool], false), 0], ["Name", "Name", "", $funcType([], [$String], false), 0], ["NumField", "NumField", "", $funcType([], [$Int], false), 0], ["NumIn", "NumIn", "", $funcType([], [$Int], false), 0], ["NumMethod", "NumMethod", "", $funcType([], [$Int], false), 0], ["NumOut", "NumOut", "", $funcType([], [$Int], false), 0], ["Out", "Out", "", $funcType([$Int], [Type], false), 0], ["PkgPath", "PkgPath", "", $funcType([], [$String], false), 0], ["Size", "Size", "", $funcType([], [$Uintptr], false), 0], ["String", "String", "", $funcType([], [$String], false), 0], ["common", "common", "reflect", $funcType([], [($ptrType(rtype))], false), 0], ["pointers", "pointers", "reflect", $funcType([], [$Bool], false), 0], ["ptrTo", "ptrTo", "reflect", $funcType([], [($ptrType(rtype))], false), 0], ["uncommon", "uncommon", "reflect", $funcType([], [($ptrType(uncommonType))], false), 0]];
		ptrType.init([["rtype", "", "reflect", rtype, "reflect:\"ptr\""], ["elem", "elem", "reflect", ($ptrType(rtype)), ""]]);
		sliceType.methods = [["uncommon", "uncommon", "reflect", $funcType([], [($ptrType(uncommonType))], false), 0]];
		($ptrType(sliceType)).methods = [["Align", "Align", "", $funcType([], [$Int], false), 0], ["AssignableTo", "AssignableTo", "", $funcType([Type], [$Bool], false), 0], ["Bits", "Bits", "", $funcType([], [$Int], false), 0], ["ChanDir", "ChanDir", "", $funcType([], [ChanDir], false), 0], ["ConvertibleTo", "ConvertibleTo", "", $funcType([Type], [$Bool], false), 0], ["Elem", "Elem", "", $funcType([], [Type], false), 0], ["Field", "Field", "", $funcType([$Int], [StructField], false), 0], ["FieldAlign", "FieldAlign", "", $funcType([], [$Int], false), 0], ["FieldByIndex", "FieldByIndex", "", $funcType([($sliceType($Int))], [StructField], false), 0], ["FieldByName", "FieldByName", "", $funcType([$String], [StructField, $Bool], false), 0], ["FieldByNameFunc", "FieldByNameFunc", "", $funcType([($funcType([$String], [$Bool], false))], [StructField, $Bool], false), 0], ["Implements", "Implements", "", $funcType([Type], [$Bool], false), 0], ["In", "In", "", $funcType([$Int], [Type], false), 0], ["IsVariadic", "IsVariadic", "", $funcType([], [$Bool], false), 0], ["Key", "Key", "", $funcType([], [Type], false), 0], ["Kind", "Kind", "", $funcType([], [Kind], false), 0], ["Len", "Len", "", $funcType([], [$Int], false), 0], ["Method", "Method", "", $funcType([$Int], [Method], false), 0], ["MethodByName", "MethodByName", "", $funcType([$String], [Method, $Bool], false), 0], ["Name", "Name", "", $funcType([], [$String], false), 0], ["NumField", "NumField", "", $funcType([], [$Int], false), 0], ["NumIn", "NumIn", "", $funcType([], [$Int], false), 0], ["NumMethod", "NumMethod", "", $funcType([], [$Int], false), 0], ["NumOut", "NumOut", "", $funcType([], [$Int], false), 0], ["Out", "Out", "", $funcType([$Int], [Type], false), 0], ["PkgPath", "PkgPath", "", $funcType([], [$String], false), 0], ["Size", "Size", "", $funcType([], [$Uintptr], false), 0], ["String", "String", "", $funcType([], [$String], false), 0], ["common", "common", "reflect", $funcType([], [($ptrType(rtype))], false), 0], ["pointers", "pointers", "reflect", $funcType([], [$Bool], false), 0], ["ptrTo", "ptrTo", "reflect", $funcType([], [($ptrType(rtype))], false), 0], ["uncommon", "uncommon", "reflect", $funcType([], [($ptrType(uncommonType))], false), 0]];
		sliceType.init([["rtype", "", "reflect", rtype, "reflect:\"slice\""], ["elem", "elem", "reflect", ($ptrType(rtype)), ""]]);
		structField.init([["name", "name", "reflect", ($ptrType($String)), ""], ["pkgPath", "pkgPath", "reflect", ($ptrType($String)), ""], ["typ", "typ", "reflect", ($ptrType(rtype)), ""], ["tag", "tag", "reflect", ($ptrType($String)), ""], ["offset", "offset", "reflect", $Uintptr, ""]]);
		structType.methods = [["uncommon", "uncommon", "reflect", $funcType([], [($ptrType(uncommonType))], false), 0]];
		($ptrType(structType)).methods = [["Align", "Align", "", $funcType([], [$Int], false), 0], ["AssignableTo", "AssignableTo", "", $funcType([Type], [$Bool], false), 0], ["Bits", "Bits", "", $funcType([], [$Int], false), 0], ["ChanDir", "ChanDir", "", $funcType([], [ChanDir], false), 0], ["ConvertibleTo", "ConvertibleTo", "", $funcType([Type], [$Bool], false), 0], ["Elem", "Elem", "", $funcType([], [Type], false), 0], ["Field", "Field", "", $funcType([$Int], [StructField], false), -1], ["FieldAlign", "FieldAlign", "", $funcType([], [$Int], false), 0], ["FieldByIndex", "FieldByIndex", "", $funcType([($sliceType($Int))], [StructField], false), -1], ["FieldByName", "FieldByName", "", $funcType([$String], [StructField, $Bool], false), -1], ["FieldByNameFunc", "FieldByNameFunc", "", $funcType([($funcType([$String], [$Bool], false))], [StructField, $Bool], false), -1], ["Implements", "Implements", "", $funcType([Type], [$Bool], false), 0], ["In", "In", "", $funcType([$Int], [Type], false), 0], ["IsVariadic", "IsVariadic", "", $funcType([], [$Bool], false), 0], ["Key", "Key", "", $funcType([], [Type], false), 0], ["Kind", "Kind", "", $funcType([], [Kind], false), 0], ["Len", "Len", "", $funcType([], [$Int], false), 0], ["Method", "Method", "", $funcType([$Int], [Method], false), 0], ["MethodByName", "MethodByName", "", $funcType([$String], [Method, $Bool], false), 0], ["Name", "Name", "", $funcType([], [$String], false), 0], ["NumField", "NumField", "", $funcType([], [$Int], false), 0], ["NumIn", "NumIn", "", $funcType([], [$Int], false), 0], ["NumMethod", "NumMethod", "", $funcType([], [$Int], false), 0], ["NumOut", "NumOut", "", $funcType([], [$Int], false), 0], ["Out", "Out", "", $funcType([$Int], [Type], false), 0], ["PkgPath", "PkgPath", "", $funcType([], [$String], false), 0], ["Size", "Size", "", $funcType([], [$Uintptr], false), 0], ["String", "String", "", $funcType([], [$String], false), 0], ["common", "common", "reflect", $funcType([], [($ptrType(rtype))], false), 0], ["pointers", "pointers", "reflect", $funcType([], [$Bool], false), 0], ["ptrTo", "ptrTo", "reflect", $funcType([], [($ptrType(rtype))], false), 0], ["uncommon", "uncommon", "reflect", $funcType([], [($ptrType(uncommonType))], false), 0]];
		structType.init([["rtype", "", "reflect", rtype, "reflect:\"struct\""], ["fields", "fields", "reflect", ($sliceType(structField)), ""]]);
		Method.init([["Name", "Name", "", $String, ""], ["PkgPath", "PkgPath", "", $String, ""], ["Type", "Type", "", Type, ""], ["Func", "Func", "", Value, ""], ["Index", "Index", "", $Int, ""]]);
		StructField.init([["Name", "Name", "", $String, ""], ["PkgPath", "PkgPath", "", $String, ""], ["Type", "Type", "", Type, ""], ["Tag", "Tag", "", StructTag, ""], ["Offset", "Offset", "", $Uintptr, ""], ["Index", "Index", "", ($sliceType($Int)), ""], ["Anonymous", "Anonymous", "", $Bool, ""]]);
		StructTag.methods = [["Get", "Get", "", $funcType([$String], [$String], false), -1]];
		($ptrType(StructTag)).methods = [["Get", "Get", "", $funcType([$String], [$String], false), -1]];
		fieldScan.init([["typ", "typ", "reflect", ($ptrType(structType)), ""], ["index", "index", "reflect", ($sliceType($Int)), ""]]);
		Value.methods = [["Addr", "Addr", "", $funcType([], [Value], false), -1], ["Bool", "Bool", "", $funcType([], [$Bool], false), -1], ["Bytes", "Bytes", "", $funcType([], [($sliceType($Uint8))], false), -1], ["Call", "Call", "", $funcType([($sliceType(Value))], [($sliceType(Value))], false), -1], ["CallSlice", "CallSlice", "", $funcType([($sliceType(Value))], [($sliceType(Value))], false), -1], ["CanAddr", "CanAddr", "", $funcType([], [$Bool], false), -1], ["CanInterface", "CanInterface", "", $funcType([], [$Bool], false), -1], ["CanSet", "CanSet", "", $funcType([], [$Bool], false), -1], ["Cap", "Cap", "", $funcType([], [$Int], false), -1], ["Close", "Close", "", $funcType([], [], false), -1], ["Complex", "Complex", "", $funcType([], [$Complex128], false), -1], ["Convert", "Convert", "", $funcType([Type], [Value], false), -1], ["Elem", "Elem", "", $funcType([], [Value], false), -1], ["Field", "Field", "", $funcType([$Int], [Value], false), -1], ["FieldByIndex", "FieldByIndex", "", $funcType([($sliceType($Int))], [Value], false), -1], ["FieldByName", "FieldByName", "", $funcType([$String], [Value], false), -1], ["FieldByNameFunc", "FieldByNameFunc", "", $funcType([($funcType([$String], [$Bool], false))], [Value], false), -1], ["Float", "Float", "", $funcType([], [$Float64], false), -1], ["Index", "Index", "", $funcType([$Int], [Value], false), -1], ["Int", "Int", "", $funcType([], [$Int64], false), -1], ["Interface", "Interface", "", $funcType([], [$emptyInterface], false), -1], ["InterfaceData", "InterfaceData", "", $funcType([], [($arrayType($Uintptr, 2))], false), -1], ["IsNil", "IsNil", "", $funcType([], [$Bool], false), -1], ["IsValid", "IsValid", "", $funcType([], [$Bool], false), -1], ["Kind", "Kind", "", $funcType([], [Kind], false), -1], ["Len", "Len", "", $funcType([], [$Int], false), -1], ["MapIndex", "MapIndex", "", $funcType([Value], [Value], false), -1], ["MapKeys", "MapKeys", "", $funcType([], [($sliceType(Value))], false), -1], ["Method", "Method", "", $funcType([$Int], [Value], false), -1], ["MethodByName", "MethodByName", "", $funcType([$String], [Value], false), -1], ["NumField", "NumField", "", $funcType([], [$Int], false), -1], ["NumMethod", "NumMethod", "", $funcType([], [$Int], false), -1], ["OverflowComplex", "OverflowComplex", "", $funcType([$Complex128], [$Bool], false), -1], ["OverflowFloat", "OverflowFloat", "", $funcType([$Float64], [$Bool], false), -1], ["OverflowInt", "OverflowInt", "", $funcType([$Int64], [$Bool], false), -1], ["OverflowUint", "OverflowUint", "", $funcType([$Uint64], [$Bool], false), -1], ["Pointer", "Pointer", "", $funcType([], [$Uintptr], false), -1], ["Recv", "Recv", "", $funcType([], [Value, $Bool], false), -1], ["Send", "Send", "", $funcType([Value], [], false), -1], ["Set", "Set", "", $funcType([Value], [], false), -1], ["SetBool", "SetBool", "", $funcType([$Bool], [], false), -1], ["SetBytes", "SetBytes", "", $funcType([($sliceType($Uint8))], [], false), -1], ["SetCap", "SetCap", "", $funcType([$Int], [], false), -1], ["SetComplex", "SetComplex", "", $funcType([$Complex128], [], false), -1], ["SetFloat", "SetFloat", "", $funcType([$Float64], [], false), -1], ["SetInt", "SetInt", "", $funcType([$Int64], [], false), -1], ["SetLen", "SetLen", "", $funcType([$Int], [], false), -1], ["SetMapIndex", "SetMapIndex", "", $funcType([Value, Value], [], false), -1], ["SetPointer", "SetPointer", "", $funcType([$UnsafePointer], [], false), -1], ["SetString", "SetString", "", $funcType([$String], [], false), -1], ["SetUint", "SetUint", "", $funcType([$Uint64], [], false), -1], ["Slice", "Slice", "", $funcType([$Int, $Int], [Value], false), -1], ["Slice3", "Slice3", "", $funcType([$Int, $Int, $Int], [Value], false), -1], ["String", "String", "", $funcType([], [$String], false), -1], ["TryRecv", "TryRecv", "", $funcType([], [Value, $Bool], false), -1], ["TrySend", "TrySend", "", $funcType([Value], [$Bool], false), -1], ["Type", "Type", "", $funcType([], [Type], false), -1], ["Uint", "Uint", "", $funcType([], [$Uint64], false), -1], ["UnsafeAddr", "UnsafeAddr", "", $funcType([], [$Uintptr], false), -1], ["assignTo", "assignTo", "reflect", $funcType([$String, ($ptrType(rtype)), ($ptrType($emptyInterface))], [Value], false), -1], ["call", "call", "reflect", $funcType([$String, ($sliceType(Value))], [($sliceType(Value))], false), -1], ["iword", "iword", "reflect", $funcType([], [iword], false), -1], ["kind", "kind", "reflect", $funcType([], [Kind], false), 3], ["mustBe", "mustBe", "reflect", $funcType([Kind], [], false), 3], ["mustBeAssignable", "mustBeAssignable", "reflect", $funcType([], [], false), 3], ["mustBeExported", "mustBeExported", "reflect", $funcType([], [], false), 3], ["pointer", "pointer", "reflect", $funcType([], [$UnsafePointer], false), -1], ["recv", "recv", "reflect", $funcType([$Bool], [Value, $Bool], false), -1], ["runes", "runes", "reflect", $funcType([], [($sliceType($Int32))], false), -1], ["send", "send", "reflect", $funcType([Value, $Bool], [$Bool], false), -1], ["setRunes", "setRunes", "reflect", $funcType([($sliceType($Int32))], [], false), -1]];
		($ptrType(Value)).methods = [["Addr", "Addr", "", $funcType([], [Value], false), -1], ["Bool", "Bool", "", $funcType([], [$Bool], false), -1], ["Bytes", "Bytes", "", $funcType([], [($sliceType($Uint8))], false), -1], ["Call", "Call", "", $funcType([($sliceType(Value))], [($sliceType(Value))], false), -1], ["CallSlice", "CallSlice", "", $funcType([($sliceType(Value))], [($sliceType(Value))], false), -1], ["CanAddr", "CanAddr", "", $funcType([], [$Bool], false), -1], ["CanInterface", "CanInterface", "", $funcType([], [$Bool], false), -1], ["CanSet", "CanSet", "", $funcType([], [$Bool], false), -1], ["Cap", "Cap", "", $funcType([], [$Int], false), -1], ["Close", "Close", "", $funcType([], [], false), -1], ["Complex", "Complex", "", $funcType([], [$Complex128], false), -1], ["Convert", "Convert", "", $funcType([Type], [Value], false), -1], ["Elem", "Elem", "", $funcType([], [Value], false), -1], ["Field", "Field", "", $funcType([$Int], [Value], false), -1], ["FieldByIndex", "FieldByIndex", "", $funcType([($sliceType($Int))], [Value], false), -1], ["FieldByName", "FieldByName", "", $funcType([$String], [Value], false), -1], ["FieldByNameFunc", "FieldByNameFunc", "", $funcType([($funcType([$String], [$Bool], false))], [Value], false), -1], ["Float", "Float", "", $funcType([], [$Float64], false), -1], ["Index", "Index", "", $funcType([$Int], [Value], false), -1], ["Int", "Int", "", $funcType([], [$Int64], false), -1], ["Interface", "Interface", "", $funcType([], [$emptyInterface], false), -1], ["InterfaceData", "InterfaceData", "", $funcType([], [($arrayType($Uintptr, 2))], false), -1], ["IsNil", "IsNil", "", $funcType([], [$Bool], false), -1], ["IsValid", "IsValid", "", $funcType([], [$Bool], false), -1], ["Kind", "Kind", "", $funcType([], [Kind], false), -1], ["Len", "Len", "", $funcType([], [$Int], false), -1], ["MapIndex", "MapIndex", "", $funcType([Value], [Value], false), -1], ["MapKeys", "MapKeys", "", $funcType([], [($sliceType(Value))], false), -1], ["Method", "Method", "", $funcType([$Int], [Value], false), -1], ["MethodByName", "MethodByName", "", $funcType([$String], [Value], false), -1], ["NumField", "NumField", "", $funcType([], [$Int], false), -1], ["NumMethod", "NumMethod", "", $funcType([], [$Int], false), -1], ["OverflowComplex", "OverflowComplex", "", $funcType([$Complex128], [$Bool], false), -1], ["OverflowFloat", "OverflowFloat", "", $funcType([$Float64], [$Bool], false), -1], ["OverflowInt", "OverflowInt", "", $funcType([$Int64], [$Bool], false), -1], ["OverflowUint", "OverflowUint", "", $funcType([$Uint64], [$Bool], false), -1], ["Pointer", "Pointer", "", $funcType([], [$Uintptr], false), -1], ["Recv", "Recv", "", $funcType([], [Value, $Bool], false), -1], ["Send", "Send", "", $funcType([Value], [], false), -1], ["Set", "Set", "", $funcType([Value], [], false), -1], ["SetBool", "SetBool", "", $funcType([$Bool], [], false), -1], ["SetBytes", "SetBytes", "", $funcType([($sliceType($Uint8))], [], false), -1], ["SetCap", "SetCap", "", $funcType([$Int], [], false), -1], ["SetComplex", "SetComplex", "", $funcType([$Complex128], [], false), -1], ["SetFloat", "SetFloat", "", $funcType([$Float64], [], false), -1], ["SetInt", "SetInt", "", $funcType([$Int64], [], false), -1], ["SetLen", "SetLen", "", $funcType([$Int], [], false), -1], ["SetMapIndex", "SetMapIndex", "", $funcType([Value, Value], [], false), -1], ["SetPointer", "SetPointer", "", $funcType([$UnsafePointer], [], false), -1], ["SetString", "SetString", "", $funcType([$String], [], false), -1], ["SetUint", "SetUint", "", $funcType([$Uint64], [], false), -1], ["Slice", "Slice", "", $funcType([$Int, $Int], [Value], false), -1], ["Slice3", "Slice3", "", $funcType([$Int, $Int, $Int], [Value], false), -1], ["String", "String", "", $funcType([], [$String], false), -1], ["TryRecv", "TryRecv", "", $funcType([], [Value, $Bool], false), -1], ["TrySend", "TrySend", "", $funcType([Value], [$Bool], false), -1], ["Type", "Type", "", $funcType([], [Type], false), -1], ["Uint", "Uint", "", $funcType([], [$Uint64], false), -1], ["UnsafeAddr", "UnsafeAddr", "", $funcType([], [$Uintptr], false), -1], ["assignTo", "assignTo", "reflect", $funcType([$String, ($ptrType(rtype)), ($ptrType($emptyInterface))], [Value], false), -1], ["call", "call", "reflect", $funcType([$String, ($sliceType(Value))], [($sliceType(Value))], false), -1], ["iword", "iword", "reflect", $funcType([], [iword], false), -1], ["kind", "kind", "reflect", $funcType([], [Kind], false), 3], ["mustBe", "mustBe", "reflect", $funcType([Kind], [], false), 3], ["mustBeAssignable", "mustBeAssignable", "reflect", $funcType([], [], false), 3], ["mustBeExported", "mustBeExported", "reflect", $funcType([], [], false), 3], ["pointer", "pointer", "reflect", $funcType([], [$UnsafePointer], false), -1], ["recv", "recv", "reflect", $funcType([$Bool], [Value, $Bool], false), -1], ["runes", "runes", "reflect", $funcType([], [($sliceType($Int32))], false), -1], ["send", "send", "reflect", $funcType([Value, $Bool], [$Bool], false), -1], ["setRunes", "setRunes", "reflect", $funcType([($sliceType($Int32))], [], false), -1]];
		Value.init([["typ", "typ", "reflect", ($ptrType(rtype)), ""], ["ptr", "ptr", "reflect", $UnsafePointer, ""], ["scalar", "scalar", "reflect", $Uintptr, ""], ["flag", "", "reflect", flag, ""]]);
		flag.methods = [["kind", "kind", "reflect", $funcType([], [Kind], false), -1], ["mustBe", "mustBe", "reflect", $funcType([Kind], [], false), -1], ["mustBeAssignable", "mustBeAssignable", "reflect", $funcType([], [], false), -1], ["mustBeExported", "mustBeExported", "reflect", $funcType([], [], false), -1]];
		($ptrType(flag)).methods = [["kind", "kind", "reflect", $funcType([], [Kind], false), -1], ["mustBe", "mustBe", "reflect", $funcType([Kind], [], false), -1], ["mustBeAssignable", "mustBeAssignable", "reflect", $funcType([], [], false), -1], ["mustBeExported", "mustBeExported", "reflect", $funcType([], [], false), -1]];
		($ptrType(ValueError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		ValueError.init([["Method", "Method", "", $String, ""], ["Kind", "Kind", "", Kind, ""]]);
		nonEmptyInterface.init([["itab", "itab", "reflect", ($ptrType(($structType([["ityp", "ityp", "reflect", ($ptrType(rtype)), ""], ["typ", "typ", "reflect", ($ptrType(rtype)), ""], ["link", "link", "reflect", $UnsafePointer, ""], ["bad", "bad", "reflect", $Int32, ""], ["unused", "unused", "reflect", $Int32, ""], ["fun", "fun", "reflect", ($arrayType($UnsafePointer, 100000)), ""]])))), ""], ["word", "word", "reflect", iword, ""]]);
		initialized = false;
		kindNames = new ($sliceType($String))(["invalid", "bool", "int", "int8", "int16", "int32", "int64", "uint", "uint8", "uint16", "uint32", "uint64", "uintptr", "float32", "float64", "complex64", "complex128", "array", "chan", "func", "interface", "map", "ptr", "slice", "string", "struct", "unsafe.Pointer"]);
		uint8Type = $assertType(TypeOf(new $Uint8(0)), ($ptrType(rtype)));
		init();
	};
	return $pkg;
})();
$packages["fmt"] = (function() {
	var $pkg = {}, math = $packages["math"], strconv = $packages["strconv"], utf8 = $packages["unicode/utf8"], errors = $packages["errors"], io = $packages["io"], os = $packages["os"], reflect = $packages["reflect"], sync = $packages["sync"], fmt, State, Formatter, Stringer, GoStringer, buffer, pp, runeUnreader, ScanState, scanError, ss, ssave, padZeroBytes, padSpaceBytes, trueBytes, falseBytes, commaSpaceBytes, nilAngleBytes, nilParenBytes, nilBytes, mapBytes, percentBangBytes, missingBytes, badIndexBytes, panicBytes, extraBytes, irparenBytes, bytesBytes, badWidthBytes, badPrecBytes, noVerbBytes, ppFree, intBits, uintptrBits, space, ssFree, complexError, boolError, init, doPrec, newPrinter, Fprintf, Printf, Sprintf, Errorf, Fprint, Sprint, Fprintln, Println, Sprintln, getField, parsenum, intFromArg, parseArgNumber, isSpace, notSpace, indexRune;
	fmt = $pkg.fmt = $newType(0, "Struct", "fmt.fmt", "fmt", "fmt", function(intbuf_, buf_, wid_, prec_, widPresent_, precPresent_, minus_, plus_, sharp_, space_, unicode_, uniQuote_, zero_) {
		this.$val = this;
		this.intbuf = intbuf_ !== undefined ? intbuf_ : ($arrayType($Uint8, 65)).zero();
		this.buf = buf_ !== undefined ? buf_ : ($ptrType(buffer)).nil;
		this.wid = wid_ !== undefined ? wid_ : 0;
		this.prec = prec_ !== undefined ? prec_ : 0;
		this.widPresent = widPresent_ !== undefined ? widPresent_ : false;
		this.precPresent = precPresent_ !== undefined ? precPresent_ : false;
		this.minus = minus_ !== undefined ? minus_ : false;
		this.plus = plus_ !== undefined ? plus_ : false;
		this.sharp = sharp_ !== undefined ? sharp_ : false;
		this.space = space_ !== undefined ? space_ : false;
		this.unicode = unicode_ !== undefined ? unicode_ : false;
		this.uniQuote = uniQuote_ !== undefined ? uniQuote_ : false;
		this.zero = zero_ !== undefined ? zero_ : false;
	});
	State = $pkg.State = $newType(8, "Interface", "fmt.State", "State", "fmt", null);
	Formatter = $pkg.Formatter = $newType(8, "Interface", "fmt.Formatter", "Formatter", "fmt", null);
	Stringer = $pkg.Stringer = $newType(8, "Interface", "fmt.Stringer", "Stringer", "fmt", null);
	GoStringer = $pkg.GoStringer = $newType(8, "Interface", "fmt.GoStringer", "GoStringer", "fmt", null);
	buffer = $pkg.buffer = $newType(12, "Slice", "fmt.buffer", "buffer", "fmt", null);
	pp = $pkg.pp = $newType(0, "Struct", "fmt.pp", "pp", "fmt", function(n_, panicking_, erroring_, buf_, arg_, value_, reordered_, goodArgNum_, runeBuf_, fmt_) {
		this.$val = this;
		this.n = n_ !== undefined ? n_ : 0;
		this.panicking = panicking_ !== undefined ? panicking_ : false;
		this.erroring = erroring_ !== undefined ? erroring_ : false;
		this.buf = buf_ !== undefined ? buf_ : buffer.nil;
		this.arg = arg_ !== undefined ? arg_ : $ifaceNil;
		this.value = value_ !== undefined ? value_ : new reflect.Value.Ptr();
		this.reordered = reordered_ !== undefined ? reordered_ : false;
		this.goodArgNum = goodArgNum_ !== undefined ? goodArgNum_ : false;
		this.runeBuf = runeBuf_ !== undefined ? runeBuf_ : ($arrayType($Uint8, 4)).zero();
		this.fmt = fmt_ !== undefined ? fmt_ : new fmt.Ptr();
	});
	runeUnreader = $pkg.runeUnreader = $newType(8, "Interface", "fmt.runeUnreader", "runeUnreader", "fmt", null);
	ScanState = $pkg.ScanState = $newType(8, "Interface", "fmt.ScanState", "ScanState", "fmt", null);
	scanError = $pkg.scanError = $newType(0, "Struct", "fmt.scanError", "scanError", "fmt", function(err_) {
		this.$val = this;
		this.err = err_ !== undefined ? err_ : $ifaceNil;
	});
	ss = $pkg.ss = $newType(0, "Struct", "fmt.ss", "ss", "fmt", function(rr_, buf_, peekRune_, prevRune_, count_, atEOF_, ssave_) {
		this.$val = this;
		this.rr = rr_ !== undefined ? rr_ : $ifaceNil;
		this.buf = buf_ !== undefined ? buf_ : buffer.nil;
		this.peekRune = peekRune_ !== undefined ? peekRune_ : 0;
		this.prevRune = prevRune_ !== undefined ? prevRune_ : 0;
		this.count = count_ !== undefined ? count_ : 0;
		this.atEOF = atEOF_ !== undefined ? atEOF_ : false;
		this.ssave = ssave_ !== undefined ? ssave_ : new ssave.Ptr();
	});
	ssave = $pkg.ssave = $newType(0, "Struct", "fmt.ssave", "ssave", "fmt", function(validSave_, nlIsEnd_, nlIsSpace_, argLimit_, limit_, maxWid_) {
		this.$val = this;
		this.validSave = validSave_ !== undefined ? validSave_ : false;
		this.nlIsEnd = nlIsEnd_ !== undefined ? nlIsEnd_ : false;
		this.nlIsSpace = nlIsSpace_ !== undefined ? nlIsSpace_ : false;
		this.argLimit = argLimit_ !== undefined ? argLimit_ : 0;
		this.limit = limit_ !== undefined ? limit_ : 0;
		this.maxWid = maxWid_ !== undefined ? maxWid_ : 0;
	});
	init = function() {
		var i;
		i = 0;
		while (i < 65) {
			(i < 0 || i >= padZeroBytes.$length) ? $throwRuntimeError("index out of range") : padZeroBytes.$array[padZeroBytes.$offset + i] = 48;
			(i < 0 || i >= padSpaceBytes.$length) ? $throwRuntimeError("index out of range") : padSpaceBytes.$array[padSpaceBytes.$offset + i] = 32;
			i = i + (1) >> 0;
		}
	};
	fmt.Ptr.prototype.clearflags = function() {
		var f;
		f = this;
		f.wid = 0;
		f.widPresent = false;
		f.prec = 0;
		f.precPresent = false;
		f.minus = false;
		f.plus = false;
		f.sharp = false;
		f.space = false;
		f.unicode = false;
		f.uniQuote = false;
		f.zero = false;
	};
	fmt.prototype.clearflags = function() { return this.$val.clearflags(); };
	fmt.Ptr.prototype.init = function(buf) {
		var f;
		f = this;
		f.buf = buf;
		f.clearflags();
	};
	fmt.prototype.init = function(buf) { return this.$val.init(buf); };
	fmt.Ptr.prototype.computePadding = function(width) {
		var padding = ($sliceType($Uint8)).nil, leftWidth = 0, rightWidth = 0, f, left, w, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8;
		f = this;
		left = !f.minus;
		w = f.wid;
		if (w < 0) {
			left = false;
			w = -w;
		}
		w = w - (width) >> 0;
		if (w > 0) {
			if (left && f.zero) {
				_tmp = padZeroBytes; _tmp$1 = w; _tmp$2 = 0; padding = _tmp; leftWidth = _tmp$1; rightWidth = _tmp$2;
				return [padding, leftWidth, rightWidth];
			}
			if (left) {
				_tmp$3 = padSpaceBytes; _tmp$4 = w; _tmp$5 = 0; padding = _tmp$3; leftWidth = _tmp$4; rightWidth = _tmp$5;
				return [padding, leftWidth, rightWidth];
			} else {
				_tmp$6 = padSpaceBytes; _tmp$7 = 0; _tmp$8 = w; padding = _tmp$6; leftWidth = _tmp$7; rightWidth = _tmp$8;
				return [padding, leftWidth, rightWidth];
			}
		}
		return [padding, leftWidth, rightWidth];
	};
	fmt.prototype.computePadding = function(width) { return this.$val.computePadding(width); };
	fmt.Ptr.prototype.writePadding = function(n, padding) {
		var f, m;
		f = this;
		while (n > 0) {
			m = n;
			if (m > 65) {
				m = 65;
			}
			f.buf.Write($subslice(padding, 0, m));
			n = n - (m) >> 0;
		}
	};
	fmt.prototype.writePadding = function(n, padding) { return this.$val.writePadding(n, padding); };
	fmt.Ptr.prototype.pad = function(b) {
		var f, _tuple, padding, left, right;
		f = this;
		if (!f.widPresent || (f.wid === 0)) {
			f.buf.Write(b);
			return;
		}
		_tuple = f.computePadding(b.$length); padding = _tuple[0]; left = _tuple[1]; right = _tuple[2];
		if (left > 0) {
			f.writePadding(left, padding);
		}
		f.buf.Write(b);
		if (right > 0) {
			f.writePadding(right, padding);
		}
	};
	fmt.prototype.pad = function(b) { return this.$val.pad(b); };
	fmt.Ptr.prototype.padString = function(s) {
		var f, _tuple, padding, left, right;
		f = this;
		if (!f.widPresent || (f.wid === 0)) {
			f.buf.WriteString(s);
			return;
		}
		_tuple = f.computePadding(utf8.RuneCountInString(s)); padding = _tuple[0]; left = _tuple[1]; right = _tuple[2];
		if (left > 0) {
			f.writePadding(left, padding);
		}
		f.buf.WriteString(s);
		if (right > 0) {
			f.writePadding(right, padding);
		}
	};
	fmt.prototype.padString = function(s) { return this.$val.padString(s); };
	fmt.Ptr.prototype.fmt_boolean = function(v) {
		var f;
		f = this;
		if (v) {
			f.pad(trueBytes);
		} else {
			f.pad(falseBytes);
		}
	};
	fmt.prototype.fmt_boolean = function(v) { return this.$val.fmt_boolean(v); };
	fmt.Ptr.prototype.integer = function(a, base, signedness, digits) {
		var f, buf, width, negative, prec, i, ua, _ref, runeWidth, width$1, j;
		f = this;
		if (f.precPresent && (f.prec === 0) && (a.$high === 0 && a.$low === 0)) {
			return;
		}
		buf = $subslice(new ($sliceType($Uint8))(f.intbuf), 0);
		if (f.widPresent) {
			width = f.wid;
			if ((base.$high === 0 && base.$low === 16) && f.sharp) {
				width = width + (2) >> 0;
			}
			if (width > 65) {
				buf = ($sliceType($Uint8)).make(width);
			}
		}
		negative = signedness === true && (a.$high < 0 || (a.$high === 0 && a.$low < 0));
		if (negative) {
			a = new $Int64(-a.$high, -a.$low);
		}
		prec = 0;
		if (f.precPresent) {
			prec = f.prec;
			f.zero = false;
		} else if (f.zero && f.widPresent && !f.minus && f.wid > 0) {
			prec = f.wid;
			if (negative || f.plus || f.space) {
				prec = prec - (1) >> 0;
			}
		}
		i = buf.$length;
		ua = new $Uint64(a.$high, a.$low);
		while ((ua.$high > base.$high || (ua.$high === base.$high && ua.$low >= base.$low))) {
			i = i - (1) >> 0;
			(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64($div64(ua, base, true)));
			ua = $div64(ua, (base), false);
		}
		i = i - (1) >> 0;
		(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = digits.charCodeAt($flatten64(ua));
		while (i > 0 && prec > (buf.$length - i >> 0)) {
			i = i - (1) >> 0;
			(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48;
		}
		if (f.sharp) {
			_ref = base;
			if ((_ref.$high === 0 && _ref.$low === 8)) {
				if (!((((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i]) === 48))) {
					i = i - (1) >> 0;
					(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48;
				}
			} else if ((_ref.$high === 0 && _ref.$low === 16)) {
				i = i - (1) >> 0;
				(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = (120 + digits.charCodeAt(10) << 24 >>> 24) - 97 << 24 >>> 24;
				i = i - (1) >> 0;
				(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 48;
			}
		}
		if (f.unicode) {
			i = i - (1) >> 0;
			(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 43;
			i = i - (1) >> 0;
			(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 85;
		}
		if (negative) {
			i = i - (1) >> 0;
			(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 45;
		} else if (f.plus) {
			i = i - (1) >> 0;
			(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 43;
		} else if (f.space) {
			i = i - (1) >> 0;
			(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = 32;
		}
		if (f.unicode && f.uniQuote && (a.$high > 0 || (a.$high === 0 && a.$low >= 0)) && (a.$high < 0 || (a.$high === 0 && a.$low <= 1114111)) && strconv.IsPrint(((a.$low + ((a.$high >> 31) * 4294967296)) >> 0))) {
			runeWidth = utf8.RuneLen(((a.$low + ((a.$high >> 31) * 4294967296)) >> 0));
			width$1 = (2 + runeWidth >> 0) + 1 >> 0;
			$copySlice($subslice(buf, (i - width$1 >> 0)), $subslice(buf, i));
			i = i - (width$1) >> 0;
			j = buf.$length - width$1 >> 0;
			(j < 0 || j >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + j] = 32;
			j = j + (1) >> 0;
			(j < 0 || j >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + j] = 39;
			j = j + (1) >> 0;
			utf8.EncodeRune($subslice(buf, j), ((a.$low + ((a.$high >> 31) * 4294967296)) >> 0));
			j = j + (runeWidth) >> 0;
			(j < 0 || j >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + j] = 39;
		}
		f.pad($subslice(buf, i));
	};
	fmt.prototype.integer = function(a, base, signedness, digits) { return this.$val.integer(a, base, signedness, digits); };
	fmt.Ptr.prototype.truncate = function(s) {
		var f, n, _ref, _i, _rune, i;
		f = this;
		if (f.precPresent && f.prec < utf8.RuneCountInString(s)) {
			n = f.prec;
			_ref = s;
			_i = 0;
			while (_i < _ref.length) {
				_rune = $decodeRune(_ref, _i);
				i = _i;
				if (n === 0) {
					s = s.substring(0, i);
					break;
				}
				n = n - (1) >> 0;
				_i += _rune[1];
			}
		}
		return s;
	};
	fmt.prototype.truncate = function(s) { return this.$val.truncate(s); };
	fmt.Ptr.prototype.fmt_s = function(s) {
		var f;
		f = this;
		s = f.truncate(s);
		f.padString(s);
	};
	fmt.prototype.fmt_s = function(s) { return this.$val.fmt_s(s); };
	fmt.Ptr.prototype.fmt_sbx = function(s, b, digits) {
		var f, n, x, buf, i, c;
		f = this;
		n = b.$length;
		if (b === ($sliceType($Uint8)).nil) {
			n = s.length;
		}
		x = (digits.charCodeAt(10) - 97 << 24 >>> 24) + 120 << 24 >>> 24;
		buf = ($sliceType($Uint8)).nil;
		i = 0;
		while (i < n) {
			if (i > 0 && f.space) {
				buf = $append(buf, 32);
			}
			if (f.sharp) {
				buf = $append(buf, 48, x);
			}
			c = 0;
			if (b === ($sliceType($Uint8)).nil) {
				c = s.charCodeAt(i);
			} else {
				c = ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i]);
			}
			buf = $append(buf, digits.charCodeAt((c >>> 4 << 24 >>> 24)), digits.charCodeAt(((c & 15) >>> 0)));
			i = i + (1) >> 0;
		}
		f.pad(buf);
	};
	fmt.prototype.fmt_sbx = function(s, b, digits) { return this.$val.fmt_sbx(s, b, digits); };
	fmt.Ptr.prototype.fmt_sx = function(s, digits) {
		var f;
		f = this;
		f.fmt_sbx(s, ($sliceType($Uint8)).nil, digits);
	};
	fmt.prototype.fmt_sx = function(s, digits) { return this.$val.fmt_sx(s, digits); };
	fmt.Ptr.prototype.fmt_bx = function(b, digits) {
		var f;
		f = this;
		f.fmt_sbx("", b, digits);
	};
	fmt.prototype.fmt_bx = function(b, digits) { return this.$val.fmt_bx(b, digits); };
	fmt.Ptr.prototype.fmt_q = function(s) {
		var f, quoted;
		f = this;
		s = f.truncate(s);
		quoted = "";
		if (f.sharp && strconv.CanBackquote(s)) {
			quoted = "`" + s + "`";
		} else {
			if (f.plus) {
				quoted = strconv.QuoteToASCII(s);
			} else {
				quoted = strconv.Quote(s);
			}
		}
		f.padString(quoted);
	};
	fmt.prototype.fmt_q = function(s) { return this.$val.fmt_q(s); };
	fmt.Ptr.prototype.fmt_qc = function(c) {
		var f, quoted;
		f = this;
		quoted = ($sliceType($Uint8)).nil;
		if (f.plus) {
			quoted = strconv.AppendQuoteRuneToASCII($subslice(new ($sliceType($Uint8))(f.intbuf), 0, 0), ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0));
		} else {
			quoted = strconv.AppendQuoteRune($subslice(new ($sliceType($Uint8))(f.intbuf), 0, 0), ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0));
		}
		f.pad(quoted);
	};
	fmt.prototype.fmt_qc = function(c) { return this.$val.fmt_qc(c); };
	doPrec = function(f, def) {
		if (f.precPresent) {
			return f.prec;
		}
		return def;
	};
	fmt.Ptr.prototype.formatFloat = function(v, verb, prec, n) {
		var $deferred = [], $err = null, f, num;
		/* */ try { $deferFrames.push($deferred);
		f = this;
		num = strconv.AppendFloat($subslice(new ($sliceType($Uint8))(f.intbuf), 0, 1), v, verb, prec, n);
		if ((((1 < 0 || 1 >= num.$length) ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 1]) === 45) || (((1 < 0 || 1 >= num.$length) ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 1]) === 43)) {
			num = $subslice(num, 1);
		} else {
			(0 < 0 || 0 >= num.$length) ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0] = 43;
		}
		if (math.IsInf(v, 0)) {
			if (f.zero) {
				$deferred.push([(function() {
					f.zero = true;
				}), []]);
				f.zero = false;
			}
		}
		if (f.zero && f.widPresent && f.wid > num.$length) {
			if (f.space && v >= 0) {
				f.buf.WriteByte(32);
				f.wid = f.wid - (1) >> 0;
			} else if (f.plus || v < 0) {
				f.buf.WriteByte(((0 < 0 || 0 >= num.$length) ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]));
				f.wid = f.wid - (1) >> 0;
			}
			f.pad($subslice(num, 1));
			return;
		}
		if (f.space && (((0 < 0 || 0 >= num.$length) ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]) === 43)) {
			(0 < 0 || 0 >= num.$length) ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0] = 32;
			f.pad(num);
			return;
		}
		if (f.plus || (((0 < 0 || 0 >= num.$length) ? $throwRuntimeError("index out of range") : num.$array[num.$offset + 0]) === 45) || math.IsInf(v, 0)) {
			f.pad(num);
			return;
		}
		f.pad($subslice(num, 1));
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	fmt.prototype.formatFloat = function(v, verb, prec, n) { return this.$val.formatFloat(v, verb, prec, n); };
	fmt.Ptr.prototype.fmt_e64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 101, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_e64 = function(v) { return this.$val.fmt_e64(v); };
	fmt.Ptr.prototype.fmt_E64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 69, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_E64 = function(v) { return this.$val.fmt_E64(v); };
	fmt.Ptr.prototype.fmt_f64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 102, doPrec(f, 6), 64);
	};
	fmt.prototype.fmt_f64 = function(v) { return this.$val.fmt_f64(v); };
	fmt.Ptr.prototype.fmt_g64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 103, doPrec(f, -1), 64);
	};
	fmt.prototype.fmt_g64 = function(v) { return this.$val.fmt_g64(v); };
	fmt.Ptr.prototype.fmt_G64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 71, doPrec(f, -1), 64);
	};
	fmt.prototype.fmt_G64 = function(v) { return this.$val.fmt_G64(v); };
	fmt.Ptr.prototype.fmt_fb64 = function(v) {
		var f;
		f = this;
		f.formatFloat(v, 98, 0, 64);
	};
	fmt.prototype.fmt_fb64 = function(v) { return this.$val.fmt_fb64(v); };
	fmt.Ptr.prototype.fmt_e32 = function(v) {
		var f;
		f = this;
		f.formatFloat($coerceFloat32(v), 101, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_e32 = function(v) { return this.$val.fmt_e32(v); };
	fmt.Ptr.prototype.fmt_E32 = function(v) {
		var f;
		f = this;
		f.formatFloat($coerceFloat32(v), 69, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_E32 = function(v) { return this.$val.fmt_E32(v); };
	fmt.Ptr.prototype.fmt_f32 = function(v) {
		var f;
		f = this;
		f.formatFloat($coerceFloat32(v), 102, doPrec(f, 6), 32);
	};
	fmt.prototype.fmt_f32 = function(v) { return this.$val.fmt_f32(v); };
	fmt.Ptr.prototype.fmt_g32 = function(v) {
		var f;
		f = this;
		f.formatFloat($coerceFloat32(v), 103, doPrec(f, -1), 32);
	};
	fmt.prototype.fmt_g32 = function(v) { return this.$val.fmt_g32(v); };
	fmt.Ptr.prototype.fmt_G32 = function(v) {
		var f;
		f = this;
		f.formatFloat($coerceFloat32(v), 71, doPrec(f, -1), 32);
	};
	fmt.prototype.fmt_G32 = function(v) { return this.$val.fmt_G32(v); };
	fmt.Ptr.prototype.fmt_fb32 = function(v) {
		var f;
		f = this;
		f.formatFloat($coerceFloat32(v), 98, 0, 32);
	};
	fmt.prototype.fmt_fb32 = function(v) { return this.$val.fmt_fb32(v); };
	fmt.Ptr.prototype.fmt_c64 = function(v, verb) {
		var f;
		f = this;
		f.fmt_complex($coerceFloat32(v.$real), $coerceFloat32(v.$imag), 32, verb);
	};
	fmt.prototype.fmt_c64 = function(v, verb) { return this.$val.fmt_c64(v, verb); };
	fmt.Ptr.prototype.fmt_c128 = function(v, verb) {
		var f;
		f = this;
		f.fmt_complex(v.$real, v.$imag, 64, verb);
	};
	fmt.prototype.fmt_c128 = function(v, verb) { return this.$val.fmt_c128(v, verb); };
	fmt.Ptr.prototype.fmt_complex = function(r, j, size, verb) {
		var f, oldPlus, oldSpace, oldWid, i, _ref;
		f = this;
		f.buf.WriteByte(40);
		oldPlus = f.plus;
		oldSpace = f.space;
		oldWid = f.wid;
		i = 0;
		while (true) {
			_ref = verb;
			if (_ref === 98) {
				f.formatFloat(r, 98, 0, size);
			} else if (_ref === 101) {
				f.formatFloat(r, 101, doPrec(f, 6), size);
			} else if (_ref === 69) {
				f.formatFloat(r, 69, doPrec(f, 6), size);
			} else if (_ref === 102 || _ref === 70) {
				f.formatFloat(r, 102, doPrec(f, 6), size);
			} else if (_ref === 103) {
				f.formatFloat(r, 103, doPrec(f, -1), size);
			} else if (_ref === 71) {
				f.formatFloat(r, 71, doPrec(f, -1), size);
			}
			if (!((i === 0))) {
				break;
			}
			f.plus = true;
			f.space = false;
			f.wid = oldWid;
			r = j;
			i = i + (1) >> 0;
		}
		f.space = oldSpace;
		f.plus = oldPlus;
		f.wid = oldWid;
		f.buf.Write(irparenBytes);
	};
	fmt.prototype.fmt_complex = function(r, j, size, verb) { return this.$val.fmt_complex(r, j, size, verb); };
	$ptrType(buffer).prototype.Write = function(p) {
		var n = 0, err = $ifaceNil, b, _tmp, _tmp$1;
		b = this;
		b.$set($appendSlice(b.$get(), p));
		_tmp = p.$length; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	$ptrType(buffer).prototype.WriteString = function(s) {
		var n = 0, err = $ifaceNil, b, _tmp, _tmp$1;
		b = this;
		b.$set($appendSlice(b.$get(), new buffer($stringToBytes(s))));
		_tmp = s.length; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	$ptrType(buffer).prototype.WriteByte = function(c) {
		var b;
		b = this;
		b.$set($append(b.$get(), c));
		return $ifaceNil;
	};
	$ptrType(buffer).prototype.WriteRune = function(r) {
		var bp, b, n, x, w;
		bp = this;
		if (r < 128) {
			bp.$set($append(bp.$get(), (r << 24 >>> 24)));
			return $ifaceNil;
		}
		b = bp.$get();
		n = b.$length;
		while ((n + 4 >> 0) > b.$capacity) {
			b = $append(b, 0);
		}
		w = utf8.EncodeRune((x = $subslice(b, n, (n + 4 >> 0)), $subslice(new ($sliceType($Uint8))(x.$array), x.$offset, x.$offset + x.$length)), r);
		bp.$set($subslice(b, 0, (n + w >> 0)));
		return $ifaceNil;
	};
	newPrinter = function() {
		var p;
		p = $assertType(ppFree.Get(), ($ptrType(pp)));
		p.panicking = false;
		p.erroring = false;
		p.fmt.init(new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p));
		return p;
	};
	pp.Ptr.prototype.free = function() {
		var p;
		p = this;
		if (p.buf.$capacity > 1024) {
			return;
		}
		p.buf = $subslice(p.buf, 0, 0);
		p.arg = $ifaceNil;
		$copy(p.value, new reflect.Value.Ptr(($ptrType(reflect.rtype)).nil, 0, 0, 0), reflect.Value);
		ppFree.Put(p);
	};
	pp.prototype.free = function() { return this.$val.free(); };
	pp.Ptr.prototype.Width = function() {
		var wid = 0, ok = false, p, _tmp, _tmp$1;
		p = this;
		_tmp = p.fmt.wid; _tmp$1 = p.fmt.widPresent; wid = _tmp; ok = _tmp$1;
		return [wid, ok];
	};
	pp.prototype.Width = function() { return this.$val.Width(); };
	pp.Ptr.prototype.Precision = function() {
		var prec = 0, ok = false, p, _tmp, _tmp$1;
		p = this;
		_tmp = p.fmt.prec; _tmp$1 = p.fmt.precPresent; prec = _tmp; ok = _tmp$1;
		return [prec, ok];
	};
	pp.prototype.Precision = function() { return this.$val.Precision(); };
	pp.Ptr.prototype.Flag = function(b) {
		var p, _ref;
		p = this;
		_ref = b;
		if (_ref === 45) {
			return p.fmt.minus;
		} else if (_ref === 43) {
			return p.fmt.plus;
		} else if (_ref === 35) {
			return p.fmt.sharp;
		} else if (_ref === 32) {
			return p.fmt.space;
		} else if (_ref === 48) {
			return p.fmt.zero;
		}
		return false;
	};
	pp.prototype.Flag = function(b) { return this.$val.Flag(b); };
	pp.Ptr.prototype.add = function(c) {
		var p;
		p = this;
		new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteRune(c);
	};
	pp.prototype.add = function(c) { return this.$val.add(c); };
	pp.Ptr.prototype.Write = function(b) {
		var ret = 0, err = $ifaceNil, p, _tuple;
		p = this;
		_tuple = new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(b); ret = _tuple[0]; err = _tuple[1];
		return [ret, err];
	};
	pp.prototype.Write = function(b) { return this.$val.Write(b); };
	Fprintf = $pkg.Fprintf = function(w, format, a) {
		var n = 0, err = $ifaceNil, p, _tuple, x;
		p = newPrinter();
		p.doPrintf(format, a);
		_tuple = w.Write((x = p.buf, $subslice(new ($sliceType($Uint8))(x.$array), x.$offset, x.$offset + x.$length))); n = _tuple[0]; err = _tuple[1];
		p.free();
		return [n, err];
	};
	Printf = $pkg.Printf = function(format, a) {
		var n = 0, err = $ifaceNil, _tuple;
		_tuple = Fprintf(os.Stdout, format, a); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	Sprintf = $pkg.Sprintf = function(format, a) {
		var p, s;
		p = newPrinter();
		p.doPrintf(format, a);
		s = $bytesToString(p.buf);
		p.free();
		return s;
	};
	Errorf = $pkg.Errorf = function(format, a) {
		return errors.New(Sprintf(format, a));
	};
	Fprint = $pkg.Fprint = function(w, a) {
		var n = 0, err = $ifaceNil, p, _tuple, x;
		p = newPrinter();
		p.doPrint(a, false, false);
		_tuple = w.Write((x = p.buf, $subslice(new ($sliceType($Uint8))(x.$array), x.$offset, x.$offset + x.$length))); n = _tuple[0]; err = _tuple[1];
		p.free();
		return [n, err];
	};
	Sprint = $pkg.Sprint = function(a) {
		var p, s;
		p = newPrinter();
		p.doPrint(a, false, false);
		s = $bytesToString(p.buf);
		p.free();
		return s;
	};
	Fprintln = $pkg.Fprintln = function(w, a) {
		var n = 0, err = $ifaceNil, p, _tuple, x;
		p = newPrinter();
		p.doPrint(a, true, true);
		_tuple = w.Write((x = p.buf, $subslice(new ($sliceType($Uint8))(x.$array), x.$offset, x.$offset + x.$length))); n = _tuple[0]; err = _tuple[1];
		p.free();
		return [n, err];
	};
	Println = $pkg.Println = function(a) {
		var n = 0, err = $ifaceNil, _tuple;
		_tuple = Fprintln(os.Stdout, a); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	Sprintln = $pkg.Sprintln = function(a) {
		var p, s;
		p = newPrinter();
		p.doPrint(a, true, true);
		s = $bytesToString(p.buf);
		p.free();
		return s;
	};
	getField = function(v, i) {
		var val;
		val = new reflect.Value.Ptr(); $copy(val, v.Field(i), reflect.Value);
		if ((val.Kind() === 20) && !val.IsNil()) {
			$copy(val, val.Elem(), reflect.Value);
		}
		return val;
	};
	parsenum = function(s, start, end) {
		var num = 0, isnum = false, newi = 0, _tmp, _tmp$1, _tmp$2;
		if (start >= end) {
			_tmp = 0; _tmp$1 = false; _tmp$2 = end; num = _tmp; isnum = _tmp$1; newi = _tmp$2;
			return [num, isnum, newi];
		}
		newi = start;
		while (newi < end && 48 <= s.charCodeAt(newi) && s.charCodeAt(newi) <= 57) {
			num = ((((num >>> 16 << 16) * 10 >> 0) + (num << 16 >>> 16) * 10) >> 0) + ((s.charCodeAt(newi) - 48 << 24 >>> 24) >> 0) >> 0;
			isnum = true;
			newi = newi + (1) >> 0;
		}
		return [num, isnum, newi];
	};
	pp.Ptr.prototype.unknownType = function(v) {
		var p;
		p = this;
		if ($interfaceIsEqual(v, $ifaceNil)) {
			new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilAngleBytes);
			return;
		}
		new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(63);
		new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(reflect.TypeOf(v).String());
		new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(63);
	};
	pp.prototype.unknownType = function(v) { return this.$val.unknownType(v); };
	pp.Ptr.prototype.badVerb = function(verb) {
		var p;
		p = this;
		p.erroring = true;
		p.add(37);
		p.add(33);
		p.add(verb);
		p.add(40);
		if (!($interfaceIsEqual(p.arg, $ifaceNil))) {
			new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(reflect.TypeOf(p.arg).String());
			p.add(61);
			p.printArg(p.arg, 118, false, false, 0);
		} else if (p.value.IsValid()) {
			new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(p.value.Type().String());
			p.add(61);
			p.printValue($clone(p.value, reflect.Value), 118, false, false, 0);
		} else {
			new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilAngleBytes);
		}
		p.add(41);
		p.erroring = false;
	};
	pp.prototype.badVerb = function(verb) { return this.$val.badVerb(verb); };
	pp.Ptr.prototype.fmtBool = function(v, verb) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 116 || _ref === 118) {
			p.fmt.fmt_boolean(v);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtBool = function(v, verb) { return this.$val.fmtBool(v, verb); };
	pp.Ptr.prototype.fmtC = function(c) {
		var p, r, x, w;
		p = this;
		r = ((c.$low + ((c.$high >> 31) * 4294967296)) >> 0);
		if (!((x = new $Int64(0, r), (x.$high === c.$high && x.$low === c.$low)))) {
			r = 65533;
		}
		w = utf8.EncodeRune($subslice(new ($sliceType($Uint8))(p.runeBuf), 0, 4), r);
		p.fmt.pad($subslice(new ($sliceType($Uint8))(p.runeBuf), 0, w));
	};
	pp.prototype.fmtC = function(c) { return this.$val.fmtC(c); };
	pp.Ptr.prototype.fmtInt64 = function(v, verb) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 98) {
			p.fmt.integer(v, new $Uint64(0, 2), true, "0123456789abcdef");
		} else if (_ref === 99) {
			p.fmtC(v);
		} else if (_ref === 100 || _ref === 118) {
			p.fmt.integer(v, new $Uint64(0, 10), true, "0123456789abcdef");
		} else if (_ref === 111) {
			p.fmt.integer(v, new $Uint64(0, 8), true, "0123456789abcdef");
		} else if (_ref === 113) {
			if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) {
				p.fmt.fmt_qc(v);
			} else {
				p.badVerb(verb);
			}
		} else if (_ref === 120) {
			p.fmt.integer(v, new $Uint64(0, 16), true, "0123456789abcdef");
		} else if (_ref === 85) {
			p.fmtUnicode(v);
		} else if (_ref === 88) {
			p.fmt.integer(v, new $Uint64(0, 16), true, "0123456789ABCDEF");
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtInt64 = function(v, verb) { return this.$val.fmtInt64(v, verb); };
	pp.Ptr.prototype.fmt0x64 = function(v, leading0x) {
		var p, sharp;
		p = this;
		sharp = p.fmt.sharp;
		p.fmt.sharp = leading0x;
		p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, "0123456789abcdef");
		p.fmt.sharp = sharp;
	};
	pp.prototype.fmt0x64 = function(v, leading0x) { return this.$val.fmt0x64(v, leading0x); };
	pp.Ptr.prototype.fmtUnicode = function(v) {
		var p, precPresent, sharp, prec;
		p = this;
		precPresent = p.fmt.precPresent;
		sharp = p.fmt.sharp;
		p.fmt.sharp = false;
		prec = p.fmt.prec;
		if (!precPresent) {
			p.fmt.prec = 4;
			p.fmt.precPresent = true;
		}
		p.fmt.unicode = true;
		p.fmt.uniQuote = sharp;
		p.fmt.integer(v, new $Uint64(0, 16), false, "0123456789ABCDEF");
		p.fmt.unicode = false;
		p.fmt.uniQuote = false;
		p.fmt.prec = prec;
		p.fmt.precPresent = precPresent;
		p.fmt.sharp = sharp;
	};
	pp.prototype.fmtUnicode = function(v) { return this.$val.fmtUnicode(v); };
	pp.Ptr.prototype.fmtUint64 = function(v, verb, goSyntax) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 98) {
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 2), false, "0123456789abcdef");
		} else if (_ref === 99) {
			p.fmtC(new $Int64(v.$high, v.$low));
		} else if (_ref === 100) {
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 10), false, "0123456789abcdef");
		} else if (_ref === 118) {
			if (goSyntax) {
				p.fmt0x64(v, true);
			} else {
				p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 10), false, "0123456789abcdef");
			}
		} else if (_ref === 111) {
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 8), false, "0123456789abcdef");
		} else if (_ref === 113) {
			if ((0 < v.$high || (0 === v.$high && 0 <= v.$low)) && (v.$high < 0 || (v.$high === 0 && v.$low <= 1114111))) {
				p.fmt.fmt_qc(new $Int64(v.$high, v.$low));
			} else {
				p.badVerb(verb);
			}
		} else if (_ref === 120) {
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, "0123456789abcdef");
		} else if (_ref === 88) {
			p.fmt.integer(new $Int64(v.$high, v.$low), new $Uint64(0, 16), false, "0123456789ABCDEF");
		} else if (_ref === 85) {
			p.fmtUnicode(new $Int64(v.$high, v.$low));
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtUint64 = function(v, verb, goSyntax) { return this.$val.fmtUint64(v, verb, goSyntax); };
	pp.Ptr.prototype.fmtFloat32 = function(v, verb) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 98) {
			p.fmt.fmt_fb32(v);
		} else if (_ref === 101) {
			p.fmt.fmt_e32(v);
		} else if (_ref === 69) {
			p.fmt.fmt_E32(v);
		} else if (_ref === 102 || _ref === 70) {
			p.fmt.fmt_f32(v);
		} else if (_ref === 103 || _ref === 118) {
			p.fmt.fmt_g32(v);
		} else if (_ref === 71) {
			p.fmt.fmt_G32(v);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtFloat32 = function(v, verb) { return this.$val.fmtFloat32(v, verb); };
	pp.Ptr.prototype.fmtFloat64 = function(v, verb) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 98) {
			p.fmt.fmt_fb64(v);
		} else if (_ref === 101) {
			p.fmt.fmt_e64(v);
		} else if (_ref === 69) {
			p.fmt.fmt_E64(v);
		} else if (_ref === 102 || _ref === 70) {
			p.fmt.fmt_f64(v);
		} else if (_ref === 103 || _ref === 118) {
			p.fmt.fmt_g64(v);
		} else if (_ref === 71) {
			p.fmt.fmt_G64(v);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtFloat64 = function(v, verb) { return this.$val.fmtFloat64(v, verb); };
	pp.Ptr.prototype.fmtComplex64 = function(v, verb) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) {
			p.fmt.fmt_c64(v, verb);
		} else if (_ref === 118) {
			p.fmt.fmt_c64(v, 103);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtComplex64 = function(v, verb) { return this.$val.fmtComplex64(v, verb); };
	pp.Ptr.prototype.fmtComplex128 = function(v, verb) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 98 || _ref === 101 || _ref === 69 || _ref === 102 || _ref === 70 || _ref === 103 || _ref === 71) {
			p.fmt.fmt_c128(v, verb);
		} else if (_ref === 118) {
			p.fmt.fmt_c128(v, 103);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtComplex128 = function(v, verb) { return this.$val.fmtComplex128(v, verb); };
	pp.Ptr.prototype.fmtString = function(v, verb, goSyntax) {
		var p, _ref;
		p = this;
		_ref = verb;
		if (_ref === 118) {
			if (goSyntax) {
				p.fmt.fmt_q(v);
			} else {
				p.fmt.fmt_s(v);
			}
		} else if (_ref === 115) {
			p.fmt.fmt_s(v);
		} else if (_ref === 120) {
			p.fmt.fmt_sx(v, "0123456789abcdef");
		} else if (_ref === 88) {
			p.fmt.fmt_sx(v, "0123456789ABCDEF");
		} else if (_ref === 113) {
			p.fmt.fmt_q(v);
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtString = function(v, verb, goSyntax) { return this.$val.fmtString(v, verb, goSyntax); };
	pp.Ptr.prototype.fmtBytes = function(v, verb, goSyntax, typ, depth) {
		var p, _ref, _i, i, c, _ref$1;
		p = this;
		if ((verb === 118) || (verb === 100)) {
			if (goSyntax) {
				if (v === ($sliceType($Uint8)).nil) {
					if ($interfaceIsEqual(typ, $ifaceNil)) {
						new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString("[]byte(nil)");
					} else {
						new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(typ.String());
						new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilParenBytes);
					}
					return;
				}
				if ($interfaceIsEqual(typ, $ifaceNil)) {
					new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(bytesBytes);
				} else {
					new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(typ.String());
					new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(123);
				}
			} else {
				new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(91);
			}
			_ref = v;
			_i = 0;
			while (_i < _ref.$length) {
				i = _i;
				c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (i > 0) {
					if (goSyntax) {
						new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(commaSpaceBytes);
					} else {
						new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(32);
					}
				}
				p.printArg(new $Uint8(c), 118, p.fmt.plus, goSyntax, depth + 1 >> 0);
				_i++;
			}
			if (goSyntax) {
				new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(125);
			} else {
				new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(93);
			}
			return;
		}
		_ref$1 = verb;
		if (_ref$1 === 115) {
			p.fmt.fmt_s($bytesToString(v));
		} else if (_ref$1 === 120) {
			p.fmt.fmt_bx(v, "0123456789abcdef");
		} else if (_ref$1 === 88) {
			p.fmt.fmt_bx(v, "0123456789ABCDEF");
		} else if (_ref$1 === 113) {
			p.fmt.fmt_q($bytesToString(v));
		} else {
			p.badVerb(verb);
		}
	};
	pp.prototype.fmtBytes = function(v, verb, goSyntax, typ, depth) { return this.$val.fmtBytes(v, verb, goSyntax, typ, depth); };
	pp.Ptr.prototype.fmtPointer = function(value, verb, goSyntax) {
		var p, use0x64, _ref, u, _ref$1;
		p = this;
		use0x64 = true;
		_ref = verb;
		if (_ref === 112 || _ref === 118) {
		} else if (_ref === 98 || _ref === 100 || _ref === 111 || _ref === 120 || _ref === 88) {
			use0x64 = false;
		} else {
			p.badVerb(verb);
			return;
		}
		u = 0;
		_ref$1 = value.Kind();
		if (_ref$1 === 18 || _ref$1 === 19 || _ref$1 === 21 || _ref$1 === 22 || _ref$1 === 23 || _ref$1 === 26) {
			u = value.Pointer();
		} else {
			p.badVerb(verb);
			return;
		}
		if (goSyntax) {
			p.add(40);
			new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(value.Type().String());
			p.add(41);
			p.add(40);
			if (u === 0) {
				new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilBytes);
			} else {
				p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), true);
			}
			p.add(41);
		} else if ((verb === 118) && (u === 0)) {
			new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilAngleBytes);
		} else {
			if (use0x64) {
				p.fmt0x64(new $Uint64(0, u.constructor === Number ? u : 1), !p.fmt.sharp);
			} else {
				p.fmtUint64(new $Uint64(0, u.constructor === Number ? u : 1), verb, false);
			}
		}
	};
	pp.prototype.fmtPointer = function(value, verb, goSyntax) { return this.$val.fmtPointer(value, verb, goSyntax); };
	pp.Ptr.prototype.catchPanic = function(arg, verb) {
		var p, err, v;
		p = this;
		err = $recover();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			v = new reflect.Value.Ptr(); $copy(v, reflect.ValueOf(arg), reflect.Value);
			if ((v.Kind() === 22) && v.IsNil()) {
				new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilAngleBytes);
				return;
			}
			if (p.panicking) {
				$panic(err);
			}
			new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(percentBangBytes);
			p.add(verb);
			new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(panicBytes);
			p.panicking = true;
			p.printArg(err, 118, false, false, 0);
			p.panicking = false;
			new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(41);
		}
	};
	pp.prototype.catchPanic = function(arg, verb) { return this.$val.catchPanic(arg, verb); };
	pp.Ptr.prototype.handleMethods = function(verb, plus, goSyntax, depth) {
		var wasString = false, handled = false, $deferred = [], $err = null, p, _tuple, formatter, ok, _tuple$1, stringer, ok$1, _ref, v, _ref$1;
		/* */ try { $deferFrames.push($deferred);
		p = this;
		if (p.erroring) {
			return [wasString, handled];
		}
		_tuple = $assertType(p.arg, Formatter, true); formatter = _tuple[0]; ok = _tuple[1];
		if (ok) {
			handled = true;
			wasString = false;
			$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
			formatter.Format(p, verb);
			return [wasString, handled];
		}
		if (plus) {
			p.fmt.plus = false;
		}
		if (goSyntax) {
			p.fmt.sharp = false;
			_tuple$1 = $assertType(p.arg, GoStringer, true); stringer = _tuple$1[0]; ok$1 = _tuple$1[1];
			if (ok$1) {
				wasString = false;
				handled = true;
				$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
				p.fmtString(stringer.GoString(), 115, false);
				return [wasString, handled];
			}
		} else {
			_ref = verb;
			if (_ref === 118 || _ref === 115 || _ref === 120 || _ref === 88 || _ref === 113) {
				_ref$1 = p.arg;
				if ($assertType(_ref$1, $error, true)[1]) {
					v = _ref$1;
					wasString = false;
					handled = true;
					$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
					p.printArg(new $String(v.Error()), verb, plus, false, depth);
					return [wasString, handled];
				} else if ($assertType(_ref$1, Stringer, true)[1]) {
					v = _ref$1;
					wasString = false;
					handled = true;
					$deferred.push([$methodVal(p, "catchPanic"), [p.arg, verb]]);
					p.printArg(new $String(v.String()), verb, plus, false, depth);
					return [wasString, handled];
				}
			}
		}
		handled = false;
		return [wasString, handled];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [wasString, handled]; }
	};
	pp.prototype.handleMethods = function(verb, plus, goSyntax, depth) { return this.$val.handleMethods(verb, plus, goSyntax, depth); };
	pp.Ptr.prototype.printArg = function(arg, verb, plus, goSyntax, depth) {
		var wasString = false, p, _ref, oldPlus, oldSharp, f, _ref$1, _tuple, isString, handled;
		p = this;
		p.arg = arg;
		$copy(p.value, new reflect.Value.Ptr(($ptrType(reflect.rtype)).nil, 0, 0, 0), reflect.Value);
		if ($interfaceIsEqual(arg, $ifaceNil)) {
			if ((verb === 84) || (verb === 118)) {
				p.fmt.pad(nilAngleBytes);
			} else {
				p.badVerb(verb);
			}
			wasString = false;
			return wasString;
		}
		_ref = verb;
		if (_ref === 84) {
			p.printArg(new $String(reflect.TypeOf(arg).String()), 115, false, false, 0);
			wasString = false;
			return wasString;
		} else if (_ref === 112) {
			p.fmtPointer($clone(reflect.ValueOf(arg), reflect.Value), verb, goSyntax);
			wasString = false;
			return wasString;
		}
		oldPlus = p.fmt.plus;
		oldSharp = p.fmt.sharp;
		if (plus) {
			p.fmt.plus = false;
		}
		if (goSyntax) {
			p.fmt.sharp = false;
		}
		_ref$1 = arg;
		if ($assertType(_ref$1, $Bool, true)[1]) {
			f = _ref$1.$val;
			p.fmtBool(f, verb);
		} else if ($assertType(_ref$1, $Float32, true)[1]) {
			f = _ref$1.$val;
			p.fmtFloat32(f, verb);
		} else if ($assertType(_ref$1, $Float64, true)[1]) {
			f = _ref$1.$val;
			p.fmtFloat64(f, verb);
		} else if ($assertType(_ref$1, $Complex64, true)[1]) {
			f = _ref$1.$val;
			p.fmtComplex64(f, verb);
		} else if ($assertType(_ref$1, $Complex128, true)[1]) {
			f = _ref$1.$val;
			p.fmtComplex128(f, verb);
		} else if ($assertType(_ref$1, $Int, true)[1]) {
			f = _ref$1.$val;
			p.fmtInt64(new $Int64(0, f), verb);
		} else if ($assertType(_ref$1, $Int8, true)[1]) {
			f = _ref$1.$val;
			p.fmtInt64(new $Int64(0, f), verb);
		} else if ($assertType(_ref$1, $Int16, true)[1]) {
			f = _ref$1.$val;
			p.fmtInt64(new $Int64(0, f), verb);
		} else if ($assertType(_ref$1, $Int32, true)[1]) {
			f = _ref$1.$val;
			p.fmtInt64(new $Int64(0, f), verb);
		} else if ($assertType(_ref$1, $Int64, true)[1]) {
			f = _ref$1.$val;
			p.fmtInt64(f, verb);
		} else if ($assertType(_ref$1, $Uint, true)[1]) {
			f = _ref$1.$val;
			p.fmtUint64(new $Uint64(0, f), verb, goSyntax);
		} else if ($assertType(_ref$1, $Uint8, true)[1]) {
			f = _ref$1.$val;
			p.fmtUint64(new $Uint64(0, f), verb, goSyntax);
		} else if ($assertType(_ref$1, $Uint16, true)[1]) {
			f = _ref$1.$val;
			p.fmtUint64(new $Uint64(0, f), verb, goSyntax);
		} else if ($assertType(_ref$1, $Uint32, true)[1]) {
			f = _ref$1.$val;
			p.fmtUint64(new $Uint64(0, f), verb, goSyntax);
		} else if ($assertType(_ref$1, $Uint64, true)[1]) {
			f = _ref$1.$val;
			p.fmtUint64(f, verb, goSyntax);
		} else if ($assertType(_ref$1, $Uintptr, true)[1]) {
			f = _ref$1.$val;
			p.fmtUint64(new $Uint64(0, f.constructor === Number ? f : 1), verb, goSyntax);
		} else if ($assertType(_ref$1, $String, true)[1]) {
			f = _ref$1.$val;
			p.fmtString(f, verb, goSyntax);
			wasString = (verb === 115) || (verb === 118);
		} else if ($assertType(_ref$1, ($sliceType($Uint8)), true)[1]) {
			f = _ref$1.$val;
			p.fmtBytes(f, verb, goSyntax, $ifaceNil, depth);
			wasString = verb === 115;
		} else {
			f = _ref$1;
			p.fmt.plus = oldPlus;
			p.fmt.sharp = oldSharp;
			_tuple = p.handleMethods(verb, plus, goSyntax, depth); isString = _tuple[0]; handled = _tuple[1];
			if (handled) {
				wasString = isString;
				return wasString;
			}
			wasString = p.printReflectValue($clone(reflect.ValueOf(arg), reflect.Value), verb, plus, goSyntax, depth);
			return wasString;
		}
		p.arg = $ifaceNil;
		return wasString;
	};
	pp.prototype.printArg = function(arg, verb, plus, goSyntax, depth) { return this.$val.printArg(arg, verb, plus, goSyntax, depth); };
	pp.Ptr.prototype.printValue = function(value, verb, plus, goSyntax, depth) {
		var wasString = false, p, _ref, _tuple, isString, handled;
		p = this;
		if (!value.IsValid()) {
			if ((verb === 84) || (verb === 118)) {
				new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilAngleBytes);
			} else {
				p.badVerb(verb);
			}
			wasString = false;
			return wasString;
		}
		_ref = verb;
		if (_ref === 84) {
			p.printArg(new $String(value.Type().String()), 115, false, false, 0);
			wasString = false;
			return wasString;
		} else if (_ref === 112) {
			p.fmtPointer($clone(value, reflect.Value), verb, goSyntax);
			wasString = false;
			return wasString;
		}
		p.arg = $ifaceNil;
		if (value.CanInterface()) {
			p.arg = value.Interface();
		}
		_tuple = p.handleMethods(verb, plus, goSyntax, depth); isString = _tuple[0]; handled = _tuple[1];
		if (handled) {
			wasString = isString;
			return wasString;
		}
		wasString = p.printReflectValue($clone(value, reflect.Value), verb, plus, goSyntax, depth);
		return wasString;
	};
	pp.prototype.printValue = function(value, verb, plus, goSyntax, depth) { return this.$val.printValue(value, verb, plus, goSyntax, depth); };
	pp.Ptr.prototype.printReflectValue = function(value, verb, plus, goSyntax, depth) {
		var wasString = false, p, oldValue, f, _ref, x, keys, _ref$1, _i, i, key, v, t, i$1, f$1, value$1, typ, bytes, _ref$2, _i$1, i$2, i$3, v$1, a, _ref$3;
		p = this;
		oldValue = new reflect.Value.Ptr(); $copy(oldValue, p.value, reflect.Value);
		$copy(p.value, value, reflect.Value);
		f = new reflect.Value.Ptr(); $copy(f, value, reflect.Value);
		_ref = f.Kind();
		BigSwitch:
		switch (0) { default: if (_ref === 1) {
			p.fmtBool(f.Bool(), verb);
		} else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			p.fmtInt64(f.Int(), verb);
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			p.fmtUint64(f.Uint(), verb, goSyntax);
		} else if (_ref === 13 || _ref === 14) {
			if (f.Type().Size() === 4) {
				p.fmtFloat32(f.Float(), verb);
			} else {
				p.fmtFloat64(f.Float(), verb);
			}
		} else if (_ref === 15 || _ref === 16) {
			if (f.Type().Size() === 8) {
				p.fmtComplex64((x = f.Complex(), new $Complex64(x.$real, x.$imag)), verb);
			} else {
				p.fmtComplex128(f.Complex(), verb);
			}
		} else if (_ref === 24) {
			p.fmtString(f.String(), verb, goSyntax);
		} else if (_ref === 21) {
			if (goSyntax) {
				new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(f.Type().String());
				if (f.IsNil()) {
					new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString("(nil)");
					break;
				}
				new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(123);
			} else {
				new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(mapBytes);
			}
			keys = f.MapKeys();
			_ref$1 = keys;
			_i = 0;
			while (_i < _ref$1.$length) {
				i = _i;
				key = new reflect.Value.Ptr(); $copy(key, ((_i < 0 || _i >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i]), reflect.Value);
				if (i > 0) {
					if (goSyntax) {
						new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(commaSpaceBytes);
					} else {
						new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(32);
					}
				}
				p.printValue($clone(key, reflect.Value), verb, plus, goSyntax, depth + 1 >> 0);
				new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(58);
				p.printValue($clone(f.MapIndex($clone(key, reflect.Value)), reflect.Value), verb, plus, goSyntax, depth + 1 >> 0);
				_i++;
			}
			if (goSyntax) {
				new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(125);
			} else {
				new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(93);
			}
		} else if (_ref === 25) {
			if (goSyntax) {
				new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(value.Type().String());
			}
			p.add(123);
			v = new reflect.Value.Ptr(); $copy(v, f, reflect.Value);
			t = v.Type();
			i$1 = 0;
			while (i$1 < v.NumField()) {
				if (i$1 > 0) {
					if (goSyntax) {
						new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(commaSpaceBytes);
					} else {
						new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(32);
					}
				}
				if (plus || goSyntax) {
					f$1 = new reflect.StructField.Ptr(); $copy(f$1, t.Field(i$1), reflect.StructField);
					if (!(f$1.Name === "")) {
						new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(f$1.Name);
						new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(58);
					}
				}
				p.printValue($clone(getField($clone(v, reflect.Value), i$1), reflect.Value), verb, plus, goSyntax, depth + 1 >> 0);
				i$1 = i$1 + (1) >> 0;
			}
			new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(125);
		} else if (_ref === 20) {
			value$1 = new reflect.Value.Ptr(); $copy(value$1, f.Elem(), reflect.Value);
			if (!value$1.IsValid()) {
				if (goSyntax) {
					new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(f.Type().String());
					new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilParenBytes);
				} else {
					new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(nilAngleBytes);
				}
			} else {
				wasString = p.printValue($clone(value$1, reflect.Value), verb, plus, goSyntax, depth + 1 >> 0);
			}
		} else if (_ref === 17 || _ref === 23) {
			typ = f.Type();
			if (typ.Elem().Kind() === 8) {
				bytes = ($sliceType($Uint8)).nil;
				if (f.Kind() === 23) {
					bytes = f.Bytes();
				} else if (f.CanAddr()) {
					bytes = f.Slice(0, f.Len()).Bytes();
				} else {
					bytes = ($sliceType($Uint8)).make(f.Len());
					_ref$2 = bytes;
					_i$1 = 0;
					while (_i$1 < _ref$2.$length) {
						i$2 = _i$1;
						(i$2 < 0 || i$2 >= bytes.$length) ? $throwRuntimeError("index out of range") : bytes.$array[bytes.$offset + i$2] = (f.Index(i$2).Uint().$low << 24 >>> 24);
						_i$1++;
					}
				}
				p.fmtBytes(bytes, verb, goSyntax, typ, depth);
				wasString = verb === 115;
				break;
			}
			if (goSyntax) {
				new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(value.Type().String());
				if ((f.Kind() === 23) && f.IsNil()) {
					new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString("(nil)");
					break;
				}
				new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(123);
			} else {
				new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(91);
			}
			i$3 = 0;
			while (i$3 < f.Len()) {
				if (i$3 > 0) {
					if (goSyntax) {
						new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(commaSpaceBytes);
					} else {
						new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(32);
					}
				}
				p.printValue($clone(f.Index(i$3), reflect.Value), verb, plus, goSyntax, depth + 1 >> 0);
				i$3 = i$3 + (1) >> 0;
			}
			if (goSyntax) {
				new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(125);
			} else {
				new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(93);
			}
		} else if (_ref === 22) {
			v$1 = f.Pointer();
			if (!((v$1 === 0)) && (depth === 0)) {
				a = new reflect.Value.Ptr(); $copy(a, f.Elem(), reflect.Value);
				_ref$3 = a.Kind();
				if (_ref$3 === 17 || _ref$3 === 23) {
					new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(38);
					p.printValue($clone(a, reflect.Value), verb, plus, goSyntax, depth + 1 >> 0);
					break BigSwitch;
				} else if (_ref$3 === 25) {
					new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(38);
					p.printValue($clone(a, reflect.Value), verb, plus, goSyntax, depth + 1 >> 0);
					break BigSwitch;
				}
			}
			p.fmtPointer($clone(value, reflect.Value), verb, goSyntax);
		} else if (_ref === 18 || _ref === 19 || _ref === 26) {
			p.fmtPointer($clone(value, reflect.Value), verb, goSyntax);
		} else {
			p.unknownType(new f.constructor.Struct(f));
		} }
		$copy(p.value, oldValue, reflect.Value);
		wasString = wasString;
		return wasString;
	};
	pp.prototype.printReflectValue = function(value, verb, plus, goSyntax, depth) { return this.$val.printReflectValue(value, verb, plus, goSyntax, depth); };
	intFromArg = function(a, argNum) {
		var num = 0, isInt = false, newArgNum = 0, _tuple;
		newArgNum = argNum;
		if (argNum < a.$length) {
			_tuple = $assertType(((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]), $Int, true); num = _tuple[0]; isInt = _tuple[1];
			newArgNum = argNum + 1 >> 0;
		}
		return [num, isInt, newArgNum];
	};
	parseArgNumber = function(format) {
		var index = 0, wid = 0, ok = false, i, _tuple, width, ok$1, newi, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8;
		i = 1;
		while (i < format.length) {
			if (format.charCodeAt(i) === 93) {
				_tuple = parsenum(format, 1, i); width = _tuple[0]; ok$1 = _tuple[1]; newi = _tuple[2];
				if (!ok$1 || !((newi === i))) {
					_tmp = 0; _tmp$1 = i + 1 >> 0; _tmp$2 = false; index = _tmp; wid = _tmp$1; ok = _tmp$2;
					return [index, wid, ok];
				}
				_tmp$3 = width - 1 >> 0; _tmp$4 = i + 1 >> 0; _tmp$5 = true; index = _tmp$3; wid = _tmp$4; ok = _tmp$5;
				return [index, wid, ok];
			}
			i = i + (1) >> 0;
		}
		_tmp$6 = 0; _tmp$7 = 1; _tmp$8 = false; index = _tmp$6; wid = _tmp$7; ok = _tmp$8;
		return [index, wid, ok];
	};
	pp.Ptr.prototype.argNumber = function(argNum, format, i, numArgs) {
		var newArgNum = 0, newi = 0, found = false, p, _tmp, _tmp$1, _tmp$2, _tuple, index, wid, ok, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8;
		p = this;
		if (format.length <= i || !((format.charCodeAt(i) === 91))) {
			_tmp = argNum; _tmp$1 = i; _tmp$2 = false; newArgNum = _tmp; newi = _tmp$1; found = _tmp$2;
			return [newArgNum, newi, found];
		}
		p.reordered = true;
		_tuple = parseArgNumber(format.substring(i)); index = _tuple[0]; wid = _tuple[1]; ok = _tuple[2];
		if (ok && 0 <= index && index < numArgs) {
			_tmp$3 = index; _tmp$4 = i + wid >> 0; _tmp$5 = true; newArgNum = _tmp$3; newi = _tmp$4; found = _tmp$5;
			return [newArgNum, newi, found];
		}
		p.goodArgNum = false;
		_tmp$6 = argNum; _tmp$7 = i + wid >> 0; _tmp$8 = true; newArgNum = _tmp$6; newi = _tmp$7; found = _tmp$8;
		return [newArgNum, newi, found];
	};
	pp.prototype.argNumber = function(argNum, format, i, numArgs) { return this.$val.argNumber(argNum, format, i, numArgs); };
	pp.Ptr.prototype.doPrintf = function(format, a) {
		var p, end, argNum, afterIndex, i, lasti, _ref, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, c, w, arg, goSyntax, plus, arg$1;
		p = this;
		end = format.length;
		argNum = 0;
		afterIndex = false;
		p.reordered = false;
		i = 0;
		while (i < end) {
			p.goodArgNum = true;
			lasti = i;
			while (i < end && !((format.charCodeAt(i) === 37))) {
				i = i + (1) >> 0;
			}
			if (i > lasti) {
				new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(format.substring(lasti, i));
			}
			if (i >= end) {
				break;
			}
			i = i + (1) >> 0;
			p.fmt.clearflags();
			F:
			while (i < end) {
				_ref = format.charCodeAt(i);
				if (_ref === 35) {
					p.fmt.sharp = true;
				} else if (_ref === 48) {
					p.fmt.zero = true;
				} else if (_ref === 43) {
					p.fmt.plus = true;
				} else if (_ref === 45) {
					p.fmt.minus = true;
				} else if (_ref === 32) {
					p.fmt.space = true;
				} else {
					break F;
				}
				i = i + (1) >> 0;
			}
			_tuple = p.argNumber(argNum, format, i, a.$length); argNum = _tuple[0]; i = _tuple[1]; afterIndex = _tuple[2];
			if (i < end && (format.charCodeAt(i) === 42)) {
				i = i + (1) >> 0;
				_tuple$1 = intFromArg(a, argNum); p.fmt.wid = _tuple$1[0]; p.fmt.widPresent = _tuple$1[1]; argNum = _tuple$1[2];
				if (!p.fmt.widPresent) {
					new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(badWidthBytes);
				}
				afterIndex = false;
			} else {
				_tuple$2 = parsenum(format, i, end); p.fmt.wid = _tuple$2[0]; p.fmt.widPresent = _tuple$2[1]; i = _tuple$2[2];
				if (afterIndex && p.fmt.widPresent) {
					p.goodArgNum = false;
				}
			}
			if ((i + 1 >> 0) < end && (format.charCodeAt(i) === 46)) {
				i = i + (1) >> 0;
				if (afterIndex) {
					p.goodArgNum = false;
				}
				_tuple$3 = p.argNumber(argNum, format, i, a.$length); argNum = _tuple$3[0]; i = _tuple$3[1]; afterIndex = _tuple$3[2];
				if (format.charCodeAt(i) === 42) {
					i = i + (1) >> 0;
					_tuple$4 = intFromArg(a, argNum); p.fmt.prec = _tuple$4[0]; p.fmt.precPresent = _tuple$4[1]; argNum = _tuple$4[2];
					if (!p.fmt.precPresent) {
						new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(badPrecBytes);
					}
					afterIndex = false;
				} else {
					_tuple$5 = parsenum(format, i, end); p.fmt.prec = _tuple$5[0]; p.fmt.precPresent = _tuple$5[1]; i = _tuple$5[2];
					if (!p.fmt.precPresent) {
						p.fmt.prec = 0;
						p.fmt.precPresent = true;
					}
				}
			}
			if (!afterIndex) {
				_tuple$6 = p.argNumber(argNum, format, i, a.$length); argNum = _tuple$6[0]; i = _tuple$6[1]; afterIndex = _tuple$6[2];
			}
			if (i >= end) {
				new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(noVerbBytes);
				continue;
			}
			_tuple$7 = utf8.DecodeRuneInString(format.substring(i)); c = _tuple$7[0]; w = _tuple$7[1];
			i = i + (w) >> 0;
			if (c === 37) {
				new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(37);
				continue;
			}
			if (!p.goodArgNum) {
				new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(percentBangBytes);
				p.add(c);
				new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(badIndexBytes);
				continue;
			} else if (argNum >= a.$length) {
				new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(percentBangBytes);
				p.add(c);
				new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(missingBytes);
				continue;
			}
			arg = ((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]);
			argNum = argNum + (1) >> 0;
			goSyntax = (c === 118) && p.fmt.sharp;
			plus = (c === 118) && p.fmt.plus;
			p.printArg(arg, c, plus, goSyntax, 0);
		}
		if (!p.reordered && argNum < a.$length) {
			new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(extraBytes);
			while (argNum < a.$length) {
				arg$1 = ((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]);
				if (!($interfaceIsEqual(arg$1, $ifaceNil))) {
					new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteString(reflect.TypeOf(arg$1).String());
					new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(61);
				}
				p.printArg(arg$1, 118, false, false, 0);
				if ((argNum + 1 >> 0) < a.$length) {
					new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).Write(commaSpaceBytes);
				}
				argNum = argNum + (1) >> 0;
			}
			new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(41);
		}
	};
	pp.prototype.doPrintf = function(format, a) { return this.$val.doPrintf(format, a); };
	pp.Ptr.prototype.doPrint = function(a, addspace, addnewline) {
		var p, prevString, argNum, arg, isString;
		p = this;
		prevString = false;
		argNum = 0;
		while (argNum < a.$length) {
			p.fmt.clearflags();
			arg = ((argNum < 0 || argNum >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + argNum]);
			if (argNum > 0) {
				isString = !($interfaceIsEqual(arg, $ifaceNil)) && (reflect.TypeOf(arg).Kind() === 24);
				if (addspace || !isString && !prevString) {
					new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(32);
				}
			}
			prevString = p.printArg(arg, 118, false, false, 0);
			argNum = argNum + (1) >> 0;
		}
		if (addnewline) {
			new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, p).WriteByte(10);
		}
	};
	pp.prototype.doPrint = function(a, addspace, addnewline) { return this.$val.doPrint(a, addspace, addnewline); };
	ss.Ptr.prototype.Read = function(buf) {
		var n = 0, err = $ifaceNil, s, _tmp, _tmp$1;
		s = this;
		_tmp = 0; _tmp$1 = errors.New("ScanState's Read should not be called. Use ReadRune"); n = _tmp; err = _tmp$1;
		return [n, err];
	};
	ss.prototype.Read = function(buf) { return this.$val.Read(buf); };
	ss.Ptr.prototype.ReadRune = function() {
		var r = 0, size = 0, err = $ifaceNil, s, _tuple;
		s = this;
		if (s.peekRune >= 0) {
			s.count = s.count + (1) >> 0;
			r = s.peekRune;
			size = utf8.RuneLen(r);
			s.prevRune = r;
			s.peekRune = -1;
			return [r, size, err];
		}
		if (s.atEOF || s.ssave.nlIsEnd && (s.prevRune === 10) || s.count >= s.ssave.argLimit) {
			err = io.EOF;
			return [r, size, err];
		}
		_tuple = s.rr.ReadRune(); r = _tuple[0]; size = _tuple[1]; err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			s.count = s.count + (1) >> 0;
			s.prevRune = r;
		} else if ($interfaceIsEqual(err, io.EOF)) {
			s.atEOF = true;
		}
		return [r, size, err];
	};
	ss.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	ss.Ptr.prototype.Width = function() {
		var wid = 0, ok = false, s, _tmp, _tmp$1, _tmp$2, _tmp$3;
		s = this;
		if (s.ssave.maxWid === 1073741824) {
			_tmp = 0; _tmp$1 = false; wid = _tmp; ok = _tmp$1;
			return [wid, ok];
		}
		_tmp$2 = s.ssave.maxWid; _tmp$3 = true; wid = _tmp$2; ok = _tmp$3;
		return [wid, ok];
	};
	ss.prototype.Width = function() { return this.$val.Width(); };
	ss.Ptr.prototype.getRune = function() {
		var r = 0, s, _tuple, err;
		s = this;
		_tuple = s.ReadRune(); r = _tuple[0]; err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				r = -1;
				return r;
			}
			s.error(err);
		}
		return r;
	};
	ss.prototype.getRune = function() { return this.$val.getRune(); };
	ss.Ptr.prototype.UnreadRune = function() {
		var s, _tuple, u, ok;
		s = this;
		_tuple = $assertType(s.rr, runeUnreader, true); u = _tuple[0]; ok = _tuple[1];
		if (ok) {
			u.UnreadRune();
		} else {
			s.peekRune = s.prevRune;
		}
		s.prevRune = -1;
		s.count = s.count - (1) >> 0;
		return $ifaceNil;
	};
	ss.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	ss.Ptr.prototype.error = function(err) {
		var s, x;
		s = this;
		$panic((x = new scanError.Ptr(err), new x.constructor.Struct(x)));
	};
	ss.prototype.error = function(err) { return this.$val.error(err); };
	ss.Ptr.prototype.errorString = function(err) {
		var s, x;
		s = this;
		$panic((x = new scanError.Ptr(errors.New(err)), new x.constructor.Struct(x)));
	};
	ss.prototype.errorString = function(err) { return this.$val.errorString(err); };
	ss.Ptr.prototype.Token = function(skipSpace, f) {
		var tok = ($sliceType($Uint8)).nil, err = $ifaceNil, $deferred = [], $err = null, s;
		/* */ try { $deferFrames.push($deferred);
		s = this;
		$deferred.push([(function() {
			var e, _tuple, se, ok;
			e = $recover();
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				_tuple = $assertType(e, scanError, true); se = new scanError.Ptr(); $copy(se, _tuple[0], scanError); ok = _tuple[1];
				if (ok) {
					err = se.err;
				} else {
					$panic(e);
				}
			}
		}), []]);
		if (f === $throwNilPointerError) {
			f = notSpace;
		}
		s.buf = $subslice(s.buf, 0, 0);
		tok = s.token(skipSpace, f);
		return [tok, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [tok, err]; }
	};
	ss.prototype.Token = function(skipSpace, f) { return this.$val.Token(skipSpace, f); };
	isSpace = function(r) {
		var rx, _ref, _i, rng;
		if (r >= 65536) {
			return false;
		}
		rx = (r << 16 >>> 16);
		_ref = space;
		_i = 0;
		while (_i < _ref.$length) {
			rng = ($arrayType($Uint16, 2)).zero(); $copy(rng, ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), ($arrayType($Uint16, 2)));
			if (rx < rng[0]) {
				return false;
			}
			if (rx <= rng[1]) {
				return true;
			}
			_i++;
		}
		return false;
	};
	notSpace = function(r) {
		return !isSpace(r);
	};
	ss.Ptr.prototype.SkipSpace = function() {
		var s;
		s = this;
		s.skipSpace(false);
	};
	ss.prototype.SkipSpace = function() { return this.$val.SkipSpace(); };
	ss.Ptr.prototype.free = function(old) {
		var s;
		s = this;
		if (old.validSave) {
			$copy(s.ssave, old, ssave);
			return;
		}
		if (s.buf.$capacity > 1024) {
			return;
		}
		s.buf = $subslice(s.buf, 0, 0);
		s.rr = $ifaceNil;
		ssFree.Put(s);
	};
	ss.prototype.free = function(old) { return this.$val.free(old); };
	ss.Ptr.prototype.skipSpace = function(stopAtNewline) {
		var s, r;
		s = this;
		while (true) {
			r = s.getRune();
			if (r === -1) {
				return;
			}
			if ((r === 13) && s.peek("\n")) {
				continue;
			}
			if (r === 10) {
				if (stopAtNewline) {
					break;
				}
				if (s.ssave.nlIsSpace) {
					continue;
				}
				s.errorString("unexpected newline");
				return;
			}
			if (!isSpace(r)) {
				s.UnreadRune();
				break;
			}
		}
	};
	ss.prototype.skipSpace = function(stopAtNewline) { return this.$val.skipSpace(stopAtNewline); };
	ss.Ptr.prototype.token = function(skipSpace, f) {
		var s, r, x;
		s = this;
		if (skipSpace) {
			s.skipSpace(false);
		}
		while (true) {
			r = s.getRune();
			if (r === -1) {
				break;
			}
			if (!f(r)) {
				s.UnreadRune();
				break;
			}
			new ($ptrType(buffer))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, s).WriteRune(r);
		}
		return (x = s.buf, $subslice(new ($sliceType($Uint8))(x.$array), x.$offset, x.$offset + x.$length));
	};
	ss.prototype.token = function(skipSpace, f) { return this.$val.token(skipSpace, f); };
	indexRune = function(s, r) {
		var _ref, _i, _rune, i, c;
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			i = _i;
			c = _rune[0];
			if (c === r) {
				return i;
			}
			_i += _rune[1];
		}
		return -1;
	};
	ss.Ptr.prototype.peek = function(ok) {
		var s, r;
		s = this;
		r = s.getRune();
		if (!((r === -1))) {
			s.UnreadRune();
		}
		return indexRune(ok, r) >= 0;
	};
	ss.prototype.peek = function(ok) { return this.$val.peek(ok); };
	$pkg.$init = function() {
		($ptrType(fmt)).methods = [["clearflags", "clearflags", "fmt", $funcType([], [], false), -1], ["computePadding", "computePadding", "fmt", $funcType([$Int], [($sliceType($Uint8)), $Int, $Int], false), -1], ["fmt_E32", "fmt_E32", "fmt", $funcType([$Float32], [], false), -1], ["fmt_E64", "fmt_E64", "fmt", $funcType([$Float64], [], false), -1], ["fmt_G32", "fmt_G32", "fmt", $funcType([$Float32], [], false), -1], ["fmt_G64", "fmt_G64", "fmt", $funcType([$Float64], [], false), -1], ["fmt_boolean", "fmt_boolean", "fmt", $funcType([$Bool], [], false), -1], ["fmt_bx", "fmt_bx", "fmt", $funcType([($sliceType($Uint8)), $String], [], false), -1], ["fmt_c128", "fmt_c128", "fmt", $funcType([$Complex128, $Int32], [], false), -1], ["fmt_c64", "fmt_c64", "fmt", $funcType([$Complex64, $Int32], [], false), -1], ["fmt_complex", "fmt_complex", "fmt", $funcType([$Float64, $Float64, $Int, $Int32], [], false), -1], ["fmt_e32", "fmt_e32", "fmt", $funcType([$Float32], [], false), -1], ["fmt_e64", "fmt_e64", "fmt", $funcType([$Float64], [], false), -1], ["fmt_f32", "fmt_f32", "fmt", $funcType([$Float32], [], false), -1], ["fmt_f64", "fmt_f64", "fmt", $funcType([$Float64], [], false), -1], ["fmt_fb32", "fmt_fb32", "fmt", $funcType([$Float32], [], false), -1], ["fmt_fb64", "fmt_fb64", "fmt", $funcType([$Float64], [], false), -1], ["fmt_g32", "fmt_g32", "fmt", $funcType([$Float32], [], false), -1], ["fmt_g64", "fmt_g64", "fmt", $funcType([$Float64], [], false), -1], ["fmt_q", "fmt_q", "fmt", $funcType([$String], [], false), -1], ["fmt_qc", "fmt_qc", "fmt", $funcType([$Int64], [], false), -1], ["fmt_s", "fmt_s", "fmt", $funcType([$String], [], false), -1], ["fmt_sbx", "fmt_sbx", "fmt", $funcType([$String, ($sliceType($Uint8)), $String], [], false), -1], ["fmt_sx", "fmt_sx", "fmt", $funcType([$String, $String], [], false), -1], ["formatFloat", "formatFloat", "fmt", $funcType([$Float64, $Uint8, $Int, $Int], [], false), -1], ["init", "init", "fmt", $funcType([($ptrType(buffer))], [], false), -1], ["integer", "integer", "fmt", $funcType([$Int64, $Uint64, $Bool, $String], [], false), -1], ["pad", "pad", "fmt", $funcType([($sliceType($Uint8))], [], false), -1], ["padString", "padString", "fmt", $funcType([$String], [], false), -1], ["truncate", "truncate", "fmt", $funcType([$String], [$String], false), -1], ["writePadding", "writePadding", "fmt", $funcType([$Int, ($sliceType($Uint8))], [], false), -1]];
		fmt.init([["intbuf", "intbuf", "fmt", ($arrayType($Uint8, 65)), ""], ["buf", "buf", "fmt", ($ptrType(buffer)), ""], ["wid", "wid", "fmt", $Int, ""], ["prec", "prec", "fmt", $Int, ""], ["widPresent", "widPresent", "fmt", $Bool, ""], ["precPresent", "precPresent", "fmt", $Bool, ""], ["minus", "minus", "fmt", $Bool, ""], ["plus", "plus", "fmt", $Bool, ""], ["sharp", "sharp", "fmt", $Bool, ""], ["space", "space", "fmt", $Bool, ""], ["unicode", "unicode", "fmt", $Bool, ""], ["uniQuote", "uniQuote", "fmt", $Bool, ""], ["zero", "zero", "fmt", $Bool, ""]]);
		State.init([["Flag", "Flag", "", $funcType([$Int], [$Bool], false)], ["Precision", "Precision", "", $funcType([], [$Int, $Bool], false)], ["Width", "Width", "", $funcType([], [$Int, $Bool], false)], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false)]]);
		Formatter.init([["Format", "Format", "", $funcType([State, $Int32], [], false)]]);
		Stringer.init([["String", "String", "", $funcType([], [$String], false)]]);
		GoStringer.init([["GoString", "GoString", "", $funcType([], [$String], false)]]);
		($ptrType(buffer)).methods = [["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["WriteByte", "WriteByte", "", $funcType([$Uint8], [$error], false), -1], ["WriteRune", "WriteRune", "", $funcType([$Int32], [$error], false), -1], ["WriteString", "WriteString", "", $funcType([$String], [$Int, $error], false), -1]];
		buffer.init($Uint8);
		($ptrType(pp)).methods = [["Flag", "Flag", "", $funcType([$Int], [$Bool], false), -1], ["Precision", "Precision", "", $funcType([], [$Int, $Bool], false), -1], ["Width", "Width", "", $funcType([], [$Int, $Bool], false), -1], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["add", "add", "fmt", $funcType([$Int32], [], false), -1], ["argNumber", "argNumber", "fmt", $funcType([$Int, $String, $Int, $Int], [$Int, $Int, $Bool], false), -1], ["badVerb", "badVerb", "fmt", $funcType([$Int32], [], false), -1], ["catchPanic", "catchPanic", "fmt", $funcType([$emptyInterface, $Int32], [], false), -1], ["doPrint", "doPrint", "fmt", $funcType([($sliceType($emptyInterface)), $Bool, $Bool], [], false), -1], ["doPrintf", "doPrintf", "fmt", $funcType([$String, ($sliceType($emptyInterface))], [], false), -1], ["fmt0x64", "fmt0x64", "fmt", $funcType([$Uint64, $Bool], [], false), -1], ["fmtBool", "fmtBool", "fmt", $funcType([$Bool, $Int32], [], false), -1], ["fmtBytes", "fmtBytes", "fmt", $funcType([($sliceType($Uint8)), $Int32, $Bool, reflect.Type, $Int], [], false), -1], ["fmtC", "fmtC", "fmt", $funcType([$Int64], [], false), -1], ["fmtComplex128", "fmtComplex128", "fmt", $funcType([$Complex128, $Int32], [], false), -1], ["fmtComplex64", "fmtComplex64", "fmt", $funcType([$Complex64, $Int32], [], false), -1], ["fmtFloat32", "fmtFloat32", "fmt", $funcType([$Float32, $Int32], [], false), -1], ["fmtFloat64", "fmtFloat64", "fmt", $funcType([$Float64, $Int32], [], false), -1], ["fmtInt64", "fmtInt64", "fmt", $funcType([$Int64, $Int32], [], false), -1], ["fmtPointer", "fmtPointer", "fmt", $funcType([reflect.Value, $Int32, $Bool], [], false), -1], ["fmtString", "fmtString", "fmt", $funcType([$String, $Int32, $Bool], [], false), -1], ["fmtUint64", "fmtUint64", "fmt", $funcType([$Uint64, $Int32, $Bool], [], false), -1], ["fmtUnicode", "fmtUnicode", "fmt", $funcType([$Int64], [], false), -1], ["free", "free", "fmt", $funcType([], [], false), -1], ["handleMethods", "handleMethods", "fmt", $funcType([$Int32, $Bool, $Bool, $Int], [$Bool, $Bool], false), -1], ["printArg", "printArg", "fmt", $funcType([$emptyInterface, $Int32, $Bool, $Bool, $Int], [$Bool], false), -1], ["printReflectValue", "printReflectValue", "fmt", $funcType([reflect.Value, $Int32, $Bool, $Bool, $Int], [$Bool], false), -1], ["printValue", "printValue", "fmt", $funcType([reflect.Value, $Int32, $Bool, $Bool, $Int], [$Bool], false), -1], ["unknownType", "unknownType", "fmt", $funcType([$emptyInterface], [], false), -1]];
		pp.init([["n", "n", "fmt", $Int, ""], ["panicking", "panicking", "fmt", $Bool, ""], ["erroring", "erroring", "fmt", $Bool, ""], ["buf", "buf", "fmt", buffer, ""], ["arg", "arg", "fmt", $emptyInterface, ""], ["value", "value", "fmt", reflect.Value, ""], ["reordered", "reordered", "fmt", $Bool, ""], ["goodArgNum", "goodArgNum", "fmt", $Bool, ""], ["runeBuf", "runeBuf", "fmt", ($arrayType($Uint8, 4)), ""], ["fmt", "fmt", "fmt", fmt, ""]]);
		runeUnreader.init([["UnreadRune", "UnreadRune", "", $funcType([], [$error], false)]]);
		ScanState.init([["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false)], ["ReadRune", "ReadRune", "", $funcType([], [$Int32, $Int, $error], false)], ["SkipSpace", "SkipSpace", "", $funcType([], [], false)], ["Token", "Token", "", $funcType([$Bool, ($funcType([$Int32], [$Bool], false))], [($sliceType($Uint8)), $error], false)], ["UnreadRune", "UnreadRune", "", $funcType([], [$error], false)], ["Width", "Width", "", $funcType([], [$Int, $Bool], false)]]);
		scanError.init([["err", "err", "fmt", $error, ""]]);
		($ptrType(ss)).methods = [["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["ReadRune", "ReadRune", "", $funcType([], [$Int32, $Int, $error], false), -1], ["SkipSpace", "SkipSpace", "", $funcType([], [], false), -1], ["Token", "Token", "", $funcType([$Bool, ($funcType([$Int32], [$Bool], false))], [($sliceType($Uint8)), $error], false), -1], ["UnreadRune", "UnreadRune", "", $funcType([], [$error], false), -1], ["Width", "Width", "", $funcType([], [$Int, $Bool], false), -1], ["accept", "accept", "fmt", $funcType([$String], [$Bool], false), -1], ["advance", "advance", "fmt", $funcType([$String], [$Int], false), -1], ["complexTokens", "complexTokens", "fmt", $funcType([], [$String, $String], false), -1], ["consume", "consume", "fmt", $funcType([$String, $Bool], [$Bool], false), -1], ["convertFloat", "convertFloat", "fmt", $funcType([$String, $Int], [$Float64], false), -1], ["convertString", "convertString", "fmt", $funcType([$Int32], [$String], false), -1], ["doScan", "doScan", "fmt", $funcType([($sliceType($emptyInterface))], [$Int, $error], false), -1], ["doScanf", "doScanf", "fmt", $funcType([$String, ($sliceType($emptyInterface))], [$Int, $error], false), -1], ["error", "error", "fmt", $funcType([$error], [], false), -1], ["errorString", "errorString", "fmt", $funcType([$String], [], false), -1], ["floatToken", "floatToken", "fmt", $funcType([], [$String], false), -1], ["free", "free", "fmt", $funcType([ssave], [], false), -1], ["getBase", "getBase", "fmt", $funcType([$Int32], [$Int, $String], false), -1], ["getRune", "getRune", "fmt", $funcType([], [$Int32], false), -1], ["hexByte", "hexByte", "fmt", $funcType([], [$Uint8, $Bool], false), -1], ["hexDigit", "hexDigit", "fmt", $funcType([$Int32], [$Int], false), -1], ["hexString", "hexString", "fmt", $funcType([], [$String], false), -1], ["mustReadRune", "mustReadRune", "fmt", $funcType([], [$Int32], false), -1], ["notEOF", "notEOF", "fmt", $funcType([], [], false), -1], ["okVerb", "okVerb", "fmt", $funcType([$Int32, $String, $String], [$Bool], false), -1], ["peek", "peek", "fmt", $funcType([$String], [$Bool], false), -1], ["quotedString", "quotedString", "fmt", $funcType([], [$String], false), -1], ["scanBasePrefix", "scanBasePrefix", "fmt", $funcType([], [$Int, $String, $Bool], false), -1], ["scanBool", "scanBool", "fmt", $funcType([$Int32], [$Bool], false), -1], ["scanComplex", "scanComplex", "fmt", $funcType([$Int32, $Int], [$Complex128], false), -1], ["scanInt", "scanInt", "fmt", $funcType([$Int32, $Int], [$Int64], false), -1], ["scanNumber", "scanNumber", "fmt", $funcType([$String, $Bool], [$String], false), -1], ["scanOne", "scanOne", "fmt", $funcType([$Int32, $emptyInterface], [], false), -1], ["scanRune", "scanRune", "fmt", $funcType([$Int], [$Int64], false), -1], ["scanUint", "scanUint", "fmt", $funcType([$Int32, $Int], [$Uint64], false), -1], ["skipSpace", "skipSpace", "fmt", $funcType([$Bool], [], false), -1], ["token", "token", "fmt", $funcType([$Bool, ($funcType([$Int32], [$Bool], false))], [($sliceType($Uint8))], false), -1]];
		ss.init([["rr", "rr", "fmt", io.RuneReader, ""], ["buf", "buf", "fmt", buffer, ""], ["peekRune", "peekRune", "fmt", $Int32, ""], ["prevRune", "prevRune", "fmt", $Int32, ""], ["count", "count", "fmt", $Int, ""], ["atEOF", "atEOF", "fmt", $Bool, ""], ["ssave", "", "fmt", ssave, ""]]);
		ssave.init([["validSave", "validSave", "fmt", $Bool, ""], ["nlIsEnd", "nlIsEnd", "fmt", $Bool, ""], ["nlIsSpace", "nlIsSpace", "fmt", $Bool, ""], ["argLimit", "argLimit", "fmt", $Int, ""], ["limit", "limit", "fmt", $Int, ""], ["maxWid", "maxWid", "fmt", $Int, ""]]);
		padZeroBytes = ($sliceType($Uint8)).make(65);
		padSpaceBytes = ($sliceType($Uint8)).make(65);
		trueBytes = new ($sliceType($Uint8))($stringToBytes("true"));
		falseBytes = new ($sliceType($Uint8))($stringToBytes("false"));
		commaSpaceBytes = new ($sliceType($Uint8))($stringToBytes(", "));
		nilAngleBytes = new ($sliceType($Uint8))($stringToBytes("<nil>"));
		nilParenBytes = new ($sliceType($Uint8))($stringToBytes("(nil)"));
		nilBytes = new ($sliceType($Uint8))($stringToBytes("nil"));
		mapBytes = new ($sliceType($Uint8))($stringToBytes("map["));
		percentBangBytes = new ($sliceType($Uint8))($stringToBytes("%!"));
		missingBytes = new ($sliceType($Uint8))($stringToBytes("(MISSING)"));
		badIndexBytes = new ($sliceType($Uint8))($stringToBytes("(BADINDEX)"));
		panicBytes = new ($sliceType($Uint8))($stringToBytes("(PANIC="));
		extraBytes = new ($sliceType($Uint8))($stringToBytes("%!(EXTRA "));
		irparenBytes = new ($sliceType($Uint8))($stringToBytes("i)"));
		bytesBytes = new ($sliceType($Uint8))($stringToBytes("[]byte{"));
		badWidthBytes = new ($sliceType($Uint8))($stringToBytes("%!(BADWIDTH)"));
		badPrecBytes = new ($sliceType($Uint8))($stringToBytes("%!(BADPREC)"));
		noVerbBytes = new ($sliceType($Uint8))($stringToBytes("%!(NOVERB)"));
		ppFree = new sync.Pool.Ptr(0, 0, ($sliceType($emptyInterface)).nil, (function() {
			return new pp.Ptr();
		}));
		intBits = reflect.TypeOf(new $Int(0)).Bits();
		uintptrBits = reflect.TypeOf(new $Uintptr(0)).Bits();
		space = new ($sliceType(($arrayType($Uint16, 2))))([$toNativeArray("Uint16", [9, 13]), $toNativeArray("Uint16", [32, 32]), $toNativeArray("Uint16", [133, 133]), $toNativeArray("Uint16", [160, 160]), $toNativeArray("Uint16", [5760, 5760]), $toNativeArray("Uint16", [8192, 8202]), $toNativeArray("Uint16", [8232, 8233]), $toNativeArray("Uint16", [8239, 8239]), $toNativeArray("Uint16", [8287, 8287]), $toNativeArray("Uint16", [12288, 12288])]);
		ssFree = new sync.Pool.Ptr(0, 0, ($sliceType($emptyInterface)).nil, (function() {
			return new ss.Ptr();
		}));
		complexError = errors.New("syntax error scanning complex number");
		boolError = errors.New("syntax error scanning boolean");
		init();
	};
	return $pkg;
})();
$packages["sort"] = (function() {
	var $pkg = {}, StringSlice, Search, SearchStrings, min, insertionSort, siftDown, heapSort, medianOfThree, swapRange, doPivot, quickSort, Sort, Strings;
	StringSlice = $pkg.StringSlice = $newType(12, "Slice", "sort.StringSlice", "StringSlice", "sort", null);
	Search = $pkg.Search = function(n, f) {
		var _tmp, _tmp$1, i, j, _q, h;
		_tmp = 0; _tmp$1 = n; i = _tmp; j = _tmp$1;
		while (i < j) {
			h = i + (_q = ((j - i >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
			if (!f(h)) {
				i = h + 1 >> 0;
			} else {
				j = h;
			}
		}
		return i;
	};
	SearchStrings = $pkg.SearchStrings = function(a, x) {
		return Search(a.$length, (function(i) {
			return ((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i]) >= x;
		}));
	};
	StringSlice.prototype.Search = function(x) {
		var p;
		p = this;
		return SearchStrings($subslice(new ($sliceType($String))(p.$array), p.$offset, p.$offset + p.$length), x);
	};
	$ptrType(StringSlice).prototype.Search = function(x) { return this.$get().Search(x); };
	min = function(a, b) {
		if (a < b) {
			return a;
		}
		return b;
	};
	insertionSort = function(data, a, b) {
		var i, j;
		i = a + 1 >> 0;
		while (i < b) {
			j = i;
			while (j > a && data.Less(j, j - 1 >> 0)) {
				data.Swap(j, j - 1 >> 0);
				j = j - (1) >> 0;
			}
			i = i + (1) >> 0;
		}
	};
	siftDown = function(data, lo, hi, first) {
		var root, child;
		root = lo;
		while (true) {
			child = ((((2 >>> 16 << 16) * root >> 0) + (2 << 16 >>> 16) * root) >> 0) + 1 >> 0;
			if (child >= hi) {
				break;
			}
			if ((child + 1 >> 0) < hi && data.Less(first + child >> 0, (first + child >> 0) + 1 >> 0)) {
				child = child + (1) >> 0;
			}
			if (!data.Less(first + root >> 0, first + child >> 0)) {
				return;
			}
			data.Swap(first + root >> 0, first + child >> 0);
			root = child;
		}
	};
	heapSort = function(data, a, b) {
		var first, lo, hi, _q, i, i$1;
		first = a;
		lo = 0;
		hi = b - a >> 0;
		i = (_q = ((hi - 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		while (i >= 0) {
			siftDown(data, i, hi, first);
			i = i - (1) >> 0;
		}
		i$1 = hi - 1 >> 0;
		while (i$1 >= 0) {
			data.Swap(first, first + i$1 >> 0);
			siftDown(data, lo, i$1, first);
			i$1 = i$1 - (1) >> 0;
		}
	};
	medianOfThree = function(data, a, b, c) {
		var m0, m1, m2;
		m0 = b;
		m1 = a;
		m2 = c;
		if (data.Less(m1, m0)) {
			data.Swap(m1, m0);
		}
		if (data.Less(m2, m1)) {
			data.Swap(m2, m1);
		}
		if (data.Less(m1, m0)) {
			data.Swap(m1, m0);
		}
	};
	swapRange = function(data, a, b, n) {
		var i;
		i = 0;
		while (i < n) {
			data.Swap(a + i >> 0, b + i >> 0);
			i = i + (1) >> 0;
		}
	};
	doPivot = function(data, lo, hi) {
		var midlo = 0, midhi = 0, _q, m, _q$1, s, pivot, _tmp, _tmp$1, _tmp$2, _tmp$3, a, b, c, d, n, _tmp$4, _tmp$5;
		m = lo + (_q = ((hi - lo >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0;
		if ((hi - lo >> 0) > 40) {
			s = (_q$1 = ((hi - lo >> 0)) / 8, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
			medianOfThree(data, lo, lo + s >> 0, lo + ((((2 >>> 16 << 16) * s >> 0) + (2 << 16 >>> 16) * s) >> 0) >> 0);
			medianOfThree(data, m, m - s >> 0, m + s >> 0);
			medianOfThree(data, hi - 1 >> 0, (hi - 1 >> 0) - s >> 0, (hi - 1 >> 0) - ((((2 >>> 16 << 16) * s >> 0) + (2 << 16 >>> 16) * s) >> 0) >> 0);
		}
		medianOfThree(data, lo, m, hi - 1 >> 0);
		pivot = lo;
		_tmp = lo + 1 >> 0; _tmp$1 = lo + 1 >> 0; _tmp$2 = hi; _tmp$3 = hi; a = _tmp; b = _tmp$1; c = _tmp$2; d = _tmp$3;
		while (true) {
			while (b < c) {
				if (data.Less(b, pivot)) {
					b = b + (1) >> 0;
				} else if (!data.Less(pivot, b)) {
					data.Swap(a, b);
					a = a + (1) >> 0;
					b = b + (1) >> 0;
				} else {
					break;
				}
			}
			while (b < c) {
				if (data.Less(pivot, c - 1 >> 0)) {
					c = c - (1) >> 0;
				} else if (!data.Less(c - 1 >> 0, pivot)) {
					data.Swap(c - 1 >> 0, d - 1 >> 0);
					c = c - (1) >> 0;
					d = d - (1) >> 0;
				} else {
					break;
				}
			}
			if (b >= c) {
				break;
			}
			data.Swap(b, c - 1 >> 0);
			b = b + (1) >> 0;
			c = c - (1) >> 0;
		}
		n = min(b - a >> 0, a - lo >> 0);
		swapRange(data, lo, b - n >> 0, n);
		n = min(hi - d >> 0, d - c >> 0);
		swapRange(data, c, hi - n >> 0, n);
		_tmp$4 = (lo + b >> 0) - a >> 0; _tmp$5 = hi - ((d - c >> 0)) >> 0; midlo = _tmp$4; midhi = _tmp$5;
		return [midlo, midhi];
	};
	quickSort = function(data, a, b, maxDepth) {
		var _tuple, mlo, mhi;
		while ((b - a >> 0) > 7) {
			if (maxDepth === 0) {
				heapSort(data, a, b);
				return;
			}
			maxDepth = maxDepth - (1) >> 0;
			_tuple = doPivot(data, a, b); mlo = _tuple[0]; mhi = _tuple[1];
			if ((mlo - a >> 0) < (b - mhi >> 0)) {
				quickSort(data, a, mlo, maxDepth);
				a = mhi;
			} else {
				quickSort(data, mhi, b, maxDepth);
				b = mlo;
			}
		}
		if ((b - a >> 0) > 1) {
			insertionSort(data, a, b);
		}
	};
	Sort = $pkg.Sort = function(data) {
		var n, maxDepth, i, x;
		n = data.Len();
		maxDepth = 0;
		i = n;
		while (i > 0) {
			maxDepth = maxDepth + (1) >> 0;
			i = (i >> $min((1), 31)) >> 0;
		}
		maxDepth = (x = 2, (((maxDepth >>> 16 << 16) * x >> 0) + (maxDepth << 16 >>> 16) * x) >> 0);
		quickSort(data, 0, n, maxDepth);
	};
	StringSlice.prototype.Len = function() {
		var p;
		p = this;
		return p.$length;
	};
	$ptrType(StringSlice).prototype.Len = function() { return this.$get().Len(); };
	StringSlice.prototype.Less = function(i, j) {
		var p;
		p = this;
		return ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]) < ((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]);
	};
	$ptrType(StringSlice).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	StringSlice.prototype.Swap = function(i, j) {
		var p, _tmp, _tmp$1;
		p = this;
		_tmp = ((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]); _tmp$1 = ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]); (i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i] = _tmp; (j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j] = _tmp$1;
	};
	$ptrType(StringSlice).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	StringSlice.prototype.Sort = function() {
		var p;
		p = this;
		Sort(p);
	};
	$ptrType(StringSlice).prototype.Sort = function() { return this.$get().Sort(); };
	Strings = $pkg.Strings = function(a) {
		Sort($subslice(new StringSlice(a.$array), a.$offset, a.$offset + a.$length));
	};
	$pkg.$init = function() {
		StringSlice.methods = [["Len", "Len", "", $funcType([], [$Int], false), -1], ["Less", "Less", "", $funcType([$Int, $Int], [$Bool], false), -1], ["Search", "Search", "", $funcType([$String], [$Int], false), -1], ["Sort", "Sort", "", $funcType([], [], false), -1], ["Swap", "Swap", "", $funcType([$Int, $Int], [], false), -1]];
		($ptrType(StringSlice)).methods = [["Len", "Len", "", $funcType([], [$Int], false), -1], ["Less", "Less", "", $funcType([$Int, $Int], [$Bool], false), -1], ["Search", "Search", "", $funcType([$String], [$Int], false), -1], ["Sort", "Sort", "", $funcType([], [], false), -1], ["Swap", "Swap", "", $funcType([$Int, $Int], [], false), -1]];
		StringSlice.init($String);
	};
	return $pkg;
})();
$packages["flag"] = (function() {
	var $pkg = {}, errors = $packages["errors"], fmt = $packages["fmt"], io = $packages["io"], os = $packages["os"], sort = $packages["sort"], strconv = $packages["strconv"], time = $packages["time"], boolValue, boolFlag, intValue, int64Value, uintValue, uint64Value, stringValue, float64Value, durationValue, Value, ErrorHandling, FlagSet, Flag, x, newBoolValue, newIntValue, newInt64Value, newUintValue, newUint64Value, newStringValue, newFloat64Value, newDurationValue, sortFlags, PrintDefaults, defaultUsage, Bool, Int, String, Duration, Parse, NewFlagSet;
	boolValue = $pkg.boolValue = $newType(1, "Bool", "flag.boolValue", "boolValue", "flag", null);
	boolFlag = $pkg.boolFlag = $newType(8, "Interface", "flag.boolFlag", "boolFlag", "flag", null);
	intValue = $pkg.intValue = $newType(4, "Int", "flag.intValue", "intValue", "flag", null);
	int64Value = $pkg.int64Value = $newType(8, "Int64", "flag.int64Value", "int64Value", "flag", null);
	uintValue = $pkg.uintValue = $newType(4, "Uint", "flag.uintValue", "uintValue", "flag", null);
	uint64Value = $pkg.uint64Value = $newType(8, "Uint64", "flag.uint64Value", "uint64Value", "flag", null);
	stringValue = $pkg.stringValue = $newType(8, "String", "flag.stringValue", "stringValue", "flag", null);
	float64Value = $pkg.float64Value = $newType(8, "Float64", "flag.float64Value", "float64Value", "flag", null);
	durationValue = $pkg.durationValue = $newType(8, "Int64", "flag.durationValue", "durationValue", "flag", null);
	Value = $pkg.Value = $newType(8, "Interface", "flag.Value", "Value", "flag", null);
	ErrorHandling = $pkg.ErrorHandling = $newType(4, "Int", "flag.ErrorHandling", "ErrorHandling", "flag", null);
	FlagSet = $pkg.FlagSet = $newType(0, "Struct", "flag.FlagSet", "FlagSet", "flag", function(Usage_, name_, parsed_, actual_, formal_, args_, errorHandling_, output_) {
		this.$val = this;
		this.Usage = Usage_ !== undefined ? Usage_ : $throwNilPointerError;
		this.name = name_ !== undefined ? name_ : "";
		this.parsed = parsed_ !== undefined ? parsed_ : false;
		this.actual = actual_ !== undefined ? actual_ : false;
		this.formal = formal_ !== undefined ? formal_ : false;
		this.args = args_ !== undefined ? args_ : ($sliceType($String)).nil;
		this.errorHandling = errorHandling_ !== undefined ? errorHandling_ : 0;
		this.output = output_ !== undefined ? output_ : $ifaceNil;
	});
	Flag = $pkg.Flag = $newType(0, "Struct", "flag.Flag", "Flag", "flag", function(Name_, Usage_, Value_, DefValue_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.Usage = Usage_ !== undefined ? Usage_ : "";
		this.Value = Value_ !== undefined ? Value_ : $ifaceNil;
		this.DefValue = DefValue_ !== undefined ? DefValue_ : "";
	});
	newBoolValue = function(val, p) {
		p.$set(val);
		return new ($ptrType(boolValue))(p.$get, p.$set);
	};
	$ptrType(boolValue).prototype.Set = function(s) {
		var b, _tuple, v, err;
		b = this;
		_tuple = strconv.ParseBool(s); v = _tuple[0]; err = _tuple[1];
		b.$set(v);
		return err;
	};
	$ptrType(boolValue).prototype.Get = function() {
		var b;
		b = this;
		return new $Bool(b.$get());
	};
	$ptrType(boolValue).prototype.String = function() {
		var b;
		b = this;
		return fmt.Sprintf("%v", new ($sliceType($emptyInterface))([new boolValue(b.$get())]));
	};
	$ptrType(boolValue).prototype.IsBoolFlag = function() {
		var b;
		b = this;
		return true;
	};
	newIntValue = function(val, p) {
		p.$set(val);
		return new ($ptrType(intValue))(p.$get, p.$set);
	};
	$ptrType(intValue).prototype.Set = function(s) {
		var i, _tuple, v, err;
		i = this;
		_tuple = strconv.ParseInt(s, 0, 64); v = _tuple[0]; err = _tuple[1];
		i.$set(((v.$low + ((v.$high >> 31) * 4294967296)) >> 0));
		return err;
	};
	$ptrType(intValue).prototype.Get = function() {
		var i;
		i = this;
		return new $Int((i.$get() >> 0));
	};
	$ptrType(intValue).prototype.String = function() {
		var i;
		i = this;
		return fmt.Sprintf("%v", new ($sliceType($emptyInterface))([new intValue(i.$get())]));
	};
	newInt64Value = function(val, p) {
		p.$set(val);
		return new ($ptrType(int64Value))(p.$get, p.$set);
	};
	$ptrType(int64Value).prototype.Set = function(s) {
		var i, _tuple, v, err;
		i = this;
		_tuple = strconv.ParseInt(s, 0, 64); v = _tuple[0]; err = _tuple[1];
		i.$set(new int64Value(v.$high, v.$low));
		return err;
	};
	$ptrType(int64Value).prototype.Get = function() {
		var i, x$1;
		i = this;
		return (x$1 = i.$get(), new $Int64(x$1.$high, x$1.$low));
	};
	$ptrType(int64Value).prototype.String = function() {
		var i;
		i = this;
		return fmt.Sprintf("%v", new ($sliceType($emptyInterface))([i.$get()]));
	};
	newUintValue = function(val, p) {
		p.$set(val);
		return new ($ptrType(uintValue))(p.$get, p.$set);
	};
	$ptrType(uintValue).prototype.Set = function(s) {
		var i, _tuple, v, err;
		i = this;
		_tuple = strconv.ParseUint(s, 0, 64); v = _tuple[0]; err = _tuple[1];
		i.$set((v.$low >>> 0));
		return err;
	};
	$ptrType(uintValue).prototype.Get = function() {
		var i;
		i = this;
		return new $Uint((i.$get() >>> 0));
	};
	$ptrType(uintValue).prototype.String = function() {
		var i;
		i = this;
		return fmt.Sprintf("%v", new ($sliceType($emptyInterface))([new uintValue(i.$get())]));
	};
	newUint64Value = function(val, p) {
		p.$set(val);
		return new ($ptrType(uint64Value))(p.$get, p.$set);
	};
	$ptrType(uint64Value).prototype.Set = function(s) {
		var i, _tuple, v, err;
		i = this;
		_tuple = strconv.ParseUint(s, 0, 64); v = _tuple[0]; err = _tuple[1];
		i.$set(new uint64Value(v.$high, v.$low));
		return err;
	};
	$ptrType(uint64Value).prototype.Get = function() {
		var i, x$1;
		i = this;
		return (x$1 = i.$get(), new $Uint64(x$1.$high, x$1.$low));
	};
	$ptrType(uint64Value).prototype.String = function() {
		var i;
		i = this;
		return fmt.Sprintf("%v", new ($sliceType($emptyInterface))([i.$get()]));
	};
	newStringValue = function(val, p) {
		p.$set(val);
		return new ($ptrType(stringValue))(p.$get, p.$set);
	};
	$ptrType(stringValue).prototype.Set = function(val) {
		var s;
		s = this;
		s.$set(val);
		return $ifaceNil;
	};
	$ptrType(stringValue).prototype.Get = function() {
		var s;
		s = this;
		return new $String(s.$get());
	};
	$ptrType(stringValue).prototype.String = function() {
		var s;
		s = this;
		return fmt.Sprintf("%s", new ($sliceType($emptyInterface))([new stringValue(s.$get())]));
	};
	newFloat64Value = function(val, p) {
		p.$set(val);
		return new ($ptrType(float64Value))(p.$get, p.$set);
	};
	$ptrType(float64Value).prototype.Set = function(s) {
		var f, _tuple, v, err;
		f = this;
		_tuple = strconv.ParseFloat(s, 64); v = _tuple[0]; err = _tuple[1];
		f.$set(v);
		return err;
	};
	$ptrType(float64Value).prototype.Get = function() {
		var f;
		f = this;
		return new $Float64(f.$get());
	};
	$ptrType(float64Value).prototype.String = function() {
		var f;
		f = this;
		return fmt.Sprintf("%v", new ($sliceType($emptyInterface))([new float64Value(f.$get())]));
	};
	newDurationValue = function(val, p) {
		p.$set(val);
		return new ($ptrType(durationValue))(p.$get, p.$set);
	};
	$ptrType(durationValue).prototype.Set = function(s) {
		var d, _tuple, v, err;
		d = this;
		_tuple = time.ParseDuration(s); v = _tuple[0]; err = _tuple[1];
		d.$set(new durationValue(v.$high, v.$low));
		return err;
	};
	$ptrType(durationValue).prototype.Get = function() {
		var d, x$1;
		d = this;
		return (x$1 = d.$get(), new time.Duration(x$1.$high, x$1.$low));
	};
	$ptrType(durationValue).prototype.String = function() {
		var d;
		d = this;
		return new ($ptrType(time.Duration))(d.$get, d.$set).String();
	};
	sortFlags = function(flags) {
		var list, i, _ref, _i, _keys, _entry, f, result, _ref$1, _i$1, i$1, name, _entry$1;
		list = sort.StringSlice.make($keys(flags).length);
		i = 0;
		_ref = flags;
		_i = 0;
		_keys = $keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			f = _entry.v;
			(i < 0 || i >= list.$length) ? $throwRuntimeError("index out of range") : list.$array[list.$offset + i] = f.Name;
			i = i + (1) >> 0;
			_i++;
		}
		list.Sort();
		result = ($sliceType(($ptrType(Flag)))).make(list.$length);
		_ref$1 = list;
		_i$1 = 0;
		while (_i$1 < _ref$1.$length) {
			i$1 = _i$1;
			name = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			(i$1 < 0 || i$1 >= result.$length) ? $throwRuntimeError("index out of range") : result.$array[result.$offset + i$1] = (_entry$1 = flags[name], _entry$1 !== undefined ? _entry$1.v : ($ptrType(Flag)).nil);
			_i$1++;
		}
		return result;
	};
	FlagSet.Ptr.prototype.out = function() {
		var f;
		f = this;
		if ($interfaceIsEqual(f.output, $ifaceNil)) {
			return os.Stderr;
		}
		return f.output;
	};
	FlagSet.prototype.out = function() { return this.$val.out(); };
	FlagSet.Ptr.prototype.SetOutput = function(output) {
		var f;
		f = this;
		f.output = output;
	};
	FlagSet.prototype.SetOutput = function(output) { return this.$val.SetOutput(output); };
	FlagSet.Ptr.prototype.VisitAll = function(fn) {
		var f, _ref, _i, flag;
		f = this;
		_ref = sortFlags(f.formal);
		_i = 0;
		while (_i < _ref.$length) {
			flag = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			fn(flag);
			_i++;
		}
	};
	FlagSet.prototype.VisitAll = function(fn) { return this.$val.VisitAll(fn); };
	FlagSet.Ptr.prototype.Visit = function(fn) {
		var f, _ref, _i, flag;
		f = this;
		_ref = sortFlags(f.actual);
		_i = 0;
		while (_i < _ref.$length) {
			flag = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			fn(flag);
			_i++;
		}
	};
	FlagSet.prototype.Visit = function(fn) { return this.$val.Visit(fn); };
	FlagSet.Ptr.prototype.Lookup = function(name) {
		var f, _entry;
		f = this;
		return (_entry = f.formal[name], _entry !== undefined ? _entry.v : ($ptrType(Flag)).nil);
	};
	FlagSet.prototype.Lookup = function(name) { return this.$val.Lookup(name); };
	FlagSet.Ptr.prototype.Set = function(name, value) {
		var f, _tuple, _entry, flag, ok, err, _key;
		f = this;
		_tuple = (_entry = f.formal[name], _entry !== undefined ? [_entry.v, true] : [($ptrType(Flag)).nil, false]); flag = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			return fmt.Errorf("no such flag -%v", new ($sliceType($emptyInterface))([new $String(name)]));
		}
		err = flag.Value.Set(value);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		if (f.actual === false) {
			f.actual = new $Map();
		}
		_key = name; (f.actual || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: flag };
		return $ifaceNil;
	};
	FlagSet.prototype.Set = function(name, value) { return this.$val.Set(name, value); };
	FlagSet.Ptr.prototype.PrintDefaults = function() {
		var f;
		f = this;
		f.VisitAll((function(flag) {
			var format, _tuple, ok;
			format = "  -%s=%s: %s\n";
			_tuple = $assertType(flag.Value, ($ptrType(stringValue)), true); ok = _tuple[1];
			if (ok) {
				format = "  -%s=%q: %s\n";
			}
			fmt.Fprintf(f.out(), format, new ($sliceType($emptyInterface))([new $String(flag.Name), new $String(flag.DefValue), new $String(flag.Usage)]));
		}));
	};
	FlagSet.prototype.PrintDefaults = function() { return this.$val.PrintDefaults(); };
	PrintDefaults = $pkg.PrintDefaults = function() {
		$pkg.CommandLine.PrintDefaults();
	};
	defaultUsage = function(f) {
		if (f.name === "") {
			fmt.Fprintf(f.out(), "Usage:\n", new ($sliceType($emptyInterface))([]));
		} else {
			fmt.Fprintf(f.out(), "Usage of %s:\n", new ($sliceType($emptyInterface))([new $String(f.name)]));
		}
		f.PrintDefaults();
	};
	FlagSet.Ptr.prototype.NFlag = function() {
		var f;
		f = this;
		return $keys(f.actual).length;
	};
	FlagSet.prototype.NFlag = function() { return this.$val.NFlag(); };
	FlagSet.Ptr.prototype.Arg = function(i) {
		var f, x$1;
		f = this;
		if (i < 0 || i >= f.args.$length) {
			return "";
		}
		return (x$1 = f.args, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i]));
	};
	FlagSet.prototype.Arg = function(i) { return this.$val.Arg(i); };
	FlagSet.Ptr.prototype.NArg = function() {
		var f;
		f = this;
		return f.args.$length;
	};
	FlagSet.prototype.NArg = function() { return this.$val.NArg(); };
	FlagSet.Ptr.prototype.Args = function() {
		var f;
		f = this;
		return f.args;
	};
	FlagSet.prototype.Args = function() { return this.$val.Args(); };
	FlagSet.Ptr.prototype.BoolVar = function(p, name, value, usage) {
		var f;
		f = this;
		f.Var(newBoolValue(value, p), name, usage);
	};
	FlagSet.prototype.BoolVar = function(p, name, value, usage) { return this.$val.BoolVar(p, name, value, usage); };
	FlagSet.Ptr.prototype.Bool = function(name, value, usage) {
		var f, p;
		f = this;
		p = $newDataPointer(false, ($ptrType($Bool)));
		f.BoolVar(p, name, value, usage);
		return p;
	};
	FlagSet.prototype.Bool = function(name, value, usage) { return this.$val.Bool(name, value, usage); };
	Bool = $pkg.Bool = function(name, value, usage) {
		return $pkg.CommandLine.Bool(name, value, usage);
	};
	FlagSet.Ptr.prototype.IntVar = function(p, name, value, usage) {
		var f;
		f = this;
		f.Var(newIntValue(value, p), name, usage);
	};
	FlagSet.prototype.IntVar = function(p, name, value, usage) { return this.$val.IntVar(p, name, value, usage); };
	FlagSet.Ptr.prototype.Int = function(name, value, usage) {
		var f, p;
		f = this;
		p = $newDataPointer(0, ($ptrType($Int)));
		f.IntVar(p, name, value, usage);
		return p;
	};
	FlagSet.prototype.Int = function(name, value, usage) { return this.$val.Int(name, value, usage); };
	Int = $pkg.Int = function(name, value, usage) {
		return $pkg.CommandLine.Int(name, value, usage);
	};
	FlagSet.Ptr.prototype.Int64Var = function(p, name, value, usage) {
		var f;
		f = this;
		f.Var(newInt64Value(value, p), name, usage);
	};
	FlagSet.prototype.Int64Var = function(p, name, value, usage) { return this.$val.Int64Var(p, name, value, usage); };
	FlagSet.Ptr.prototype.Int64 = function(name, value, usage) {
		var f, p;
		f = this;
		p = $newDataPointer(new $Int64(0, 0), ($ptrType($Int64)));
		f.Int64Var(p, name, value, usage);
		return p;
	};
	FlagSet.prototype.Int64 = function(name, value, usage) { return this.$val.Int64(name, value, usage); };
	FlagSet.Ptr.prototype.UintVar = function(p, name, value, usage) {
		var f;
		f = this;
		f.Var(newUintValue(value, p), name, usage);
	};
	FlagSet.prototype.UintVar = function(p, name, value, usage) { return this.$val.UintVar(p, name, value, usage); };
	FlagSet.Ptr.prototype.Uint = function(name, value, usage) {
		var f, p;
		f = this;
		p = $newDataPointer(0, ($ptrType($Uint)));
		f.UintVar(p, name, value, usage);
		return p;
	};
	FlagSet.prototype.Uint = function(name, value, usage) { return this.$val.Uint(name, value, usage); };
	FlagSet.Ptr.prototype.Uint64Var = function(p, name, value, usage) {
		var f;
		f = this;
		f.Var(newUint64Value(value, p), name, usage);
	};
	FlagSet.prototype.Uint64Var = function(p, name, value, usage) { return this.$val.Uint64Var(p, name, value, usage); };
	FlagSet.Ptr.prototype.Uint64 = function(name, value, usage) {
		var f, p;
		f = this;
		p = $newDataPointer(new $Uint64(0, 0), ($ptrType($Uint64)));
		f.Uint64Var(p, name, value, usage);
		return p;
	};
	FlagSet.prototype.Uint64 = function(name, value, usage) { return this.$val.Uint64(name, value, usage); };
	FlagSet.Ptr.prototype.StringVar = function(p, name, value, usage) {
		var f;
		f = this;
		f.Var(newStringValue(value, p), name, usage);
	};
	FlagSet.prototype.StringVar = function(p, name, value, usage) { return this.$val.StringVar(p, name, value, usage); };
	FlagSet.Ptr.prototype.String = function(name, value, usage) {
		var f, p;
		f = this;
		p = $newDataPointer("", ($ptrType($String)));
		f.StringVar(p, name, value, usage);
		return p;
	};
	FlagSet.prototype.String = function(name, value, usage) { return this.$val.String(name, value, usage); };
	String = $pkg.String = function(name, value, usage) {
		return $pkg.CommandLine.String(name, value, usage);
	};
	FlagSet.Ptr.prototype.Float64Var = function(p, name, value, usage) {
		var f;
		f = this;
		f.Var(newFloat64Value(value, p), name, usage);
	};
	FlagSet.prototype.Float64Var = function(p, name, value, usage) { return this.$val.Float64Var(p, name, value, usage); };
	FlagSet.Ptr.prototype.Float64 = function(name, value, usage) {
		var f, p;
		f = this;
		p = $newDataPointer(0, ($ptrType($Float64)));
		f.Float64Var(p, name, value, usage);
		return p;
	};
	FlagSet.prototype.Float64 = function(name, value, usage) { return this.$val.Float64(name, value, usage); };
	FlagSet.Ptr.prototype.DurationVar = function(p, name, value, usage) {
		var f;
		f = this;
		f.Var(newDurationValue(value, p), name, usage);
	};
	FlagSet.prototype.DurationVar = function(p, name, value, usage) { return this.$val.DurationVar(p, name, value, usage); };
	FlagSet.Ptr.prototype.Duration = function(name, value, usage) {
		var f, p;
		f = this;
		p = $newDataPointer(new time.Duration(0, 0), ($ptrType(time.Duration)));
		f.DurationVar(p, name, value, usage);
		return p;
	};
	FlagSet.prototype.Duration = function(name, value, usage) { return this.$val.Duration(name, value, usage); };
	Duration = $pkg.Duration = function(name, value, usage) {
		return $pkg.CommandLine.Duration(name, value, usage);
	};
	FlagSet.Ptr.prototype.Var = function(value, name, usage) {
		var f, flag, _tuple, _entry, alreadythere, msg, _key;
		f = this;
		flag = new Flag.Ptr(name, usage, value, value.String());
		_tuple = (_entry = f.formal[name], _entry !== undefined ? [_entry.v, true] : [($ptrType(Flag)).nil, false]); alreadythere = _tuple[1];
		if (alreadythere) {
			msg = "";
			if (f.name === "") {
				msg = fmt.Sprintf("flag redefined: %s", new ($sliceType($emptyInterface))([new $String(name)]));
			} else {
				msg = fmt.Sprintf("%s flag redefined: %s", new ($sliceType($emptyInterface))([new $String(f.name), new $String(name)]));
			}
			fmt.Fprintln(f.out(), new ($sliceType($emptyInterface))([new $String(msg)]));
			$panic(new $String(msg));
		}
		if (f.formal === false) {
			f.formal = new $Map();
		}
		_key = name; (f.formal || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: flag };
	};
	FlagSet.prototype.Var = function(value, name, usage) { return this.$val.Var(value, name, usage); };
	FlagSet.Ptr.prototype.failf = function(format, a) {
		var f, err;
		f = this;
		err = fmt.Errorf(format, a);
		fmt.Fprintln(f.out(), new ($sliceType($emptyInterface))([err]));
		f.usage();
		return err;
	};
	FlagSet.prototype.failf = function(format, a) { return this.$val.failf(format, a); };
	FlagSet.Ptr.prototype.usage = function() {
		var f;
		f = this;
		if (f === $pkg.CommandLine) {
			$pkg.Usage();
		} else if (f.Usage === $throwNilPointerError) {
			defaultUsage(f);
		} else {
			f.Usage();
		}
	};
	FlagSet.prototype.usage = function() { return this.$val.usage(); };
	FlagSet.Ptr.prototype.parseOne = function() {
		var f, x$1, s, num_minuses, name, has_value, value, i, m, _tuple, _entry, flag, alreadythere, _tuple$1, fv, ok, err, _tmp, x$2, _tmp$1, err$1, _key;
		f = this;
		if (f.args.$length === 0) {
			return [false, $ifaceNil];
		}
		s = (x$1 = f.args, ((0 < 0 || 0 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0]));
		if ((s.length === 0) || !((s.charCodeAt(0) === 45)) || (s.length === 1)) {
			return [false, $ifaceNil];
		}
		num_minuses = 1;
		if (s.charCodeAt(1) === 45) {
			num_minuses = num_minuses + (1) >> 0;
			if (s.length === 2) {
				f.args = $subslice(f.args, 1);
				return [false, $ifaceNil];
			}
		}
		name = s.substring(num_minuses);
		if ((name.length === 0) || (name.charCodeAt(0) === 45) || (name.charCodeAt(0) === 61)) {
			return [false, f.failf("bad flag syntax: %s", new ($sliceType($emptyInterface))([new $String(s)]))];
		}
		f.args = $subslice(f.args, 1);
		has_value = false;
		value = "";
		i = 1;
		while (i < name.length) {
			if (name.charCodeAt(i) === 61) {
				value = name.substring((i + 1 >> 0));
				has_value = true;
				name = name.substring(0, i);
				break;
			}
			i = i + (1) >> 0;
		}
		m = f.formal;
		_tuple = (_entry = m[name], _entry !== undefined ? [_entry.v, true] : [($ptrType(Flag)).nil, false]); flag = _tuple[0]; alreadythere = _tuple[1];
		if (!alreadythere) {
			if (name === "help" || name === "h") {
				f.usage();
				return [false, $pkg.ErrHelp];
			}
			return [false, f.failf("flag provided but not defined: -%s", new ($sliceType($emptyInterface))([new $String(name)]))];
		}
		_tuple$1 = $assertType(flag.Value, boolFlag, true); fv = _tuple$1[0]; ok = _tuple$1[1];
		if (ok && fv.IsBoolFlag()) {
			if (has_value) {
				err = fv.Set(value);
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return [false, f.failf("invalid boolean value %q for -%s: %v", new ($sliceType($emptyInterface))([new $String(value), new $String(name), err]))];
				}
			} else {
				fv.Set("true");
			}
		} else {
			if (!has_value && f.args.$length > 0) {
				has_value = true;
				_tmp = (x$2 = f.args, ((0 < 0 || 0 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0])); _tmp$1 = $subslice(f.args, 1); value = _tmp; f.args = _tmp$1;
			}
			if (!has_value) {
				return [false, f.failf("flag needs an argument: -%s", new ($sliceType($emptyInterface))([new $String(name)]))];
			}
			err$1 = flag.Value.Set(value);
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return [false, f.failf("invalid value %q for flag -%s: %v", new ($sliceType($emptyInterface))([new $String(value), new $String(name), err$1]))];
			}
		}
		if (f.actual === false) {
			f.actual = new $Map();
		}
		_key = name; (f.actual || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: flag };
		return [true, $ifaceNil];
	};
	FlagSet.prototype.parseOne = function() { return this.$val.parseOne(); };
	FlagSet.Ptr.prototype.Parse = function(arguments$1) {
		var f, _tuple, seen, err, _ref;
		f = this;
		f.parsed = true;
		f.args = arguments$1;
		while (true) {
			_tuple = f.parseOne(); seen = _tuple[0]; err = _tuple[1];
			if (seen) {
				continue;
			}
			if ($interfaceIsEqual(err, $ifaceNil)) {
				break;
			}
			_ref = f.errorHandling;
			if (_ref === 0) {
				return err;
			} else if (_ref === 1) {
				os.Exit(2);
			} else if (_ref === 2) {
				$panic(err);
			}
		}
		return $ifaceNil;
	};
	FlagSet.prototype.Parse = function(arguments$1) { return this.$val.Parse(arguments$1); };
	FlagSet.Ptr.prototype.Parsed = function() {
		var f;
		f = this;
		return f.parsed;
	};
	FlagSet.prototype.Parsed = function() { return this.$val.Parsed(); };
	Parse = $pkg.Parse = function() {
		$pkg.CommandLine.Parse($subslice(os.Args, 1));
	};
	NewFlagSet = $pkg.NewFlagSet = function(name, errorHandling) {
		var f;
		f = new FlagSet.Ptr($throwNilPointerError, name, false, false, false, ($sliceType($String)).nil, errorHandling, $ifaceNil);
		return f;
	};
	FlagSet.Ptr.prototype.Init = function(name, errorHandling) {
		var f;
		f = this;
		f.name = name;
		f.errorHandling = errorHandling;
	};
	FlagSet.prototype.Init = function(name, errorHandling) { return this.$val.Init(name, errorHandling); };
	$pkg.$init = function() {
		($ptrType(boolValue)).methods = [["Get", "Get", "", $funcType([], [$emptyInterface], false), -1], ["IsBoolFlag", "IsBoolFlag", "", $funcType([], [$Bool], false), -1], ["Set", "Set", "", $funcType([$String], [$error], false), -1], ["String", "String", "", $funcType([], [$String], false), -1]];
		boolFlag.init([["IsBoolFlag", "IsBoolFlag", "", $funcType([], [$Bool], false)], ["Set", "Set", "", $funcType([$String], [$error], false)], ["String", "String", "", $funcType([], [$String], false)]]);
		($ptrType(intValue)).methods = [["Get", "Get", "", $funcType([], [$emptyInterface], false), -1], ["Set", "Set", "", $funcType([$String], [$error], false), -1], ["String", "String", "", $funcType([], [$String], false), -1]];
		($ptrType(int64Value)).methods = [["Get", "Get", "", $funcType([], [$emptyInterface], false), -1], ["Set", "Set", "", $funcType([$String], [$error], false), -1], ["String", "String", "", $funcType([], [$String], false), -1]];
		($ptrType(uintValue)).methods = [["Get", "Get", "", $funcType([], [$emptyInterface], false), -1], ["Set", "Set", "", $funcType([$String], [$error], false), -1], ["String", "String", "", $funcType([], [$String], false), -1]];
		($ptrType(uint64Value)).methods = [["Get", "Get", "", $funcType([], [$emptyInterface], false), -1], ["Set", "Set", "", $funcType([$String], [$error], false), -1], ["String", "String", "", $funcType([], [$String], false), -1]];
		($ptrType(stringValue)).methods = [["Get", "Get", "", $funcType([], [$emptyInterface], false), -1], ["Set", "Set", "", $funcType([$String], [$error], false), -1], ["String", "String", "", $funcType([], [$String], false), -1]];
		($ptrType(float64Value)).methods = [["Get", "Get", "", $funcType([], [$emptyInterface], false), -1], ["Set", "Set", "", $funcType([$String], [$error], false), -1], ["String", "String", "", $funcType([], [$String], false), -1]];
		($ptrType(durationValue)).methods = [["Get", "Get", "", $funcType([], [$emptyInterface], false), -1], ["Set", "Set", "", $funcType([$String], [$error], false), -1], ["String", "String", "", $funcType([], [$String], false), -1]];
		Value.init([["Set", "Set", "", $funcType([$String], [$error], false)], ["String", "String", "", $funcType([], [$String], false)]]);
		($ptrType(FlagSet)).methods = [["Arg", "Arg", "", $funcType([$Int], [$String], false), -1], ["Args", "Args", "", $funcType([], [($sliceType($String))], false), -1], ["Bool", "Bool", "", $funcType([$String, $Bool, $String], [($ptrType($Bool))], false), -1], ["BoolVar", "BoolVar", "", $funcType([($ptrType($Bool)), $String, $Bool, $String], [], false), -1], ["Duration", "Duration", "", $funcType([$String, time.Duration, $String], [($ptrType(time.Duration))], false), -1], ["DurationVar", "DurationVar", "", $funcType([($ptrType(time.Duration)), $String, time.Duration, $String], [], false), -1], ["Float64", "Float64", "", $funcType([$String, $Float64, $String], [($ptrType($Float64))], false), -1], ["Float64Var", "Float64Var", "", $funcType([($ptrType($Float64)), $String, $Float64, $String], [], false), -1], ["Init", "Init", "", $funcType([$String, ErrorHandling], [], false), -1], ["Int", "Int", "", $funcType([$String, $Int, $String], [($ptrType($Int))], false), -1], ["Int64", "Int64", "", $funcType([$String, $Int64, $String], [($ptrType($Int64))], false), -1], ["Int64Var", "Int64Var", "", $funcType([($ptrType($Int64)), $String, $Int64, $String], [], false), -1], ["IntVar", "IntVar", "", $funcType([($ptrType($Int)), $String, $Int, $String], [], false), -1], ["Lookup", "Lookup", "", $funcType([$String], [($ptrType(Flag))], false), -1], ["NArg", "NArg", "", $funcType([], [$Int], false), -1], ["NFlag", "NFlag", "", $funcType([], [$Int], false), -1], ["Parse", "Parse", "", $funcType([($sliceType($String))], [$error], false), -1], ["Parsed", "Parsed", "", $funcType([], [$Bool], false), -1], ["PrintDefaults", "PrintDefaults", "", $funcType([], [], false), -1], ["Set", "Set", "", $funcType([$String, $String], [$error], false), -1], ["SetOutput", "SetOutput", "", $funcType([io.Writer], [], false), -1], ["String", "String", "", $funcType([$String, $String, $String], [($ptrType($String))], false), -1], ["StringVar", "StringVar", "", $funcType([($ptrType($String)), $String, $String, $String], [], false), -1], ["Uint", "Uint", "", $funcType([$String, $Uint, $String], [($ptrType($Uint))], false), -1], ["Uint64", "Uint64", "", $funcType([$String, $Uint64, $String], [($ptrType($Uint64))], false), -1], ["Uint64Var", "Uint64Var", "", $funcType([($ptrType($Uint64)), $String, $Uint64, $String], [], false), -1], ["UintVar", "UintVar", "", $funcType([($ptrType($Uint)), $String, $Uint, $String], [], false), -1], ["Var", "Var", "", $funcType([Value, $String, $String], [], false), -1], ["Visit", "Visit", "", $funcType([($funcType([($ptrType(Flag))], [], false))], [], false), -1], ["VisitAll", "VisitAll", "", $funcType([($funcType([($ptrType(Flag))], [], false))], [], false), -1], ["failf", "failf", "flag", $funcType([$String, ($sliceType($emptyInterface))], [$error], true), -1], ["out", "out", "flag", $funcType([], [io.Writer], false), -1], ["parseOne", "parseOne", "flag", $funcType([], [$Bool, $error], false), -1], ["usage", "usage", "flag", $funcType([], [], false), -1]];
		FlagSet.init([["Usage", "Usage", "", ($funcType([], [], false)), ""], ["name", "name", "flag", $String, ""], ["parsed", "parsed", "flag", $Bool, ""], ["actual", "actual", "flag", ($mapType($String, ($ptrType(Flag)))), ""], ["formal", "formal", "flag", ($mapType($String, ($ptrType(Flag)))), ""], ["args", "args", "flag", ($sliceType($String)), ""], ["errorHandling", "errorHandling", "flag", ErrorHandling, ""], ["output", "output", "flag", io.Writer, ""]]);
		Flag.init([["Name", "Name", "", $String, ""], ["Usage", "Usage", "", $String, ""], ["Value", "Value", "", Value, ""], ["DefValue", "DefValue", "", $String, ""]]);
		$pkg.ErrHelp = errors.New("flag: help requested");
		$pkg.CommandLine = NewFlagSet((x = os.Args, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), 1);
		$pkg.Usage = (function() {
			var x$1;
			fmt.Fprintf(os.Stderr, "Usage of %s:\n", new ($sliceType($emptyInterface))([new $String((x$1 = os.Args, ((0 < 0 || 0 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])))]));
			PrintDefaults();
		});
	};
	return $pkg;
})();
$packages["bufio"] = (function() {
	var $pkg = {}, bytes = $packages["bytes"], errors = $packages["errors"], io = $packages["io"], utf8 = $packages["unicode/utf8"], Reader, Writer, ReadWriter, errNegativeRead, NewReaderSize, NewReader, NewWriterSize, NewWriter, NewReadWriter;
	Reader = $pkg.Reader = $newType(0, "Struct", "bufio.Reader", "Reader", "bufio", function(buf_, rd_, r_, w_, err_, lastByte_, lastRuneSize_) {
		this.$val = this;
		this.buf = buf_ !== undefined ? buf_ : ($sliceType($Uint8)).nil;
		this.rd = rd_ !== undefined ? rd_ : $ifaceNil;
		this.r = r_ !== undefined ? r_ : 0;
		this.w = w_ !== undefined ? w_ : 0;
		this.err = err_ !== undefined ? err_ : $ifaceNil;
		this.lastByte = lastByte_ !== undefined ? lastByte_ : 0;
		this.lastRuneSize = lastRuneSize_ !== undefined ? lastRuneSize_ : 0;
	});
	Writer = $pkg.Writer = $newType(0, "Struct", "bufio.Writer", "Writer", "bufio", function(err_, buf_, n_, wr_) {
		this.$val = this;
		this.err = err_ !== undefined ? err_ : $ifaceNil;
		this.buf = buf_ !== undefined ? buf_ : ($sliceType($Uint8)).nil;
		this.n = n_ !== undefined ? n_ : 0;
		this.wr = wr_ !== undefined ? wr_ : $ifaceNil;
	});
	ReadWriter = $pkg.ReadWriter = $newType(0, "Struct", "bufio.ReadWriter", "ReadWriter", "bufio", function(Reader_, Writer_) {
		this.$val = this;
		this.Reader = Reader_ !== undefined ? Reader_ : ($ptrType(Reader)).nil;
		this.Writer = Writer_ !== undefined ? Writer_ : ($ptrType(Writer)).nil;
	});
	NewReaderSize = $pkg.NewReaderSize = function(rd, size) {
		var _tuple, b, ok, r;
		_tuple = $assertType(rd, ($ptrType(Reader)), true); b = _tuple[0]; ok = _tuple[1];
		if (ok && b.buf.$length >= size) {
			return b;
		}
		if (size < 16) {
			size = 16;
		}
		r = new Reader.Ptr();
		r.reset(($sliceType($Uint8)).make(size), rd);
		return r;
	};
	NewReader = $pkg.NewReader = function(rd) {
		return NewReaderSize(rd, 4096);
	};
	Reader.Ptr.prototype.Reset = function(r) {
		var b;
		b = this;
		b.reset(b.buf, r);
	};
	Reader.prototype.Reset = function(r) { return this.$val.Reset(r); };
	Reader.Ptr.prototype.reset = function(buf, r) {
		var b;
		b = this;
		$copy(b, new Reader.Ptr(buf, r, 0, 0, $ifaceNil, -1, -1), Reader);
	};
	Reader.prototype.reset = function(buf, r) { return this.$val.reset(buf, r); };
	Reader.Ptr.prototype.fill = function() {
		var b, i, _tuple, n, err;
		b = this;
		if (b.r > 0) {
			$copySlice(b.buf, $subslice(b.buf, b.r, b.w));
			b.w = b.w - (b.r) >> 0;
			b.r = 0;
		}
		if (b.w >= b.buf.$length) {
			$panic(new $String("bufio: tried to fill full buffer"));
		}
		i = 100;
		while (i > 0) {
			_tuple = b.rd.Read($subslice(b.buf, b.w)); n = _tuple[0]; err = _tuple[1];
			if (n < 0) {
				$panic(errNegativeRead);
			}
			b.w = b.w + (n) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				b.err = err;
				return;
			}
			if (n > 0) {
				return;
			}
			i = i - (1) >> 0;
		}
		b.err = io.ErrNoProgress;
	};
	Reader.prototype.fill = function() { return this.$val.fill(); };
	Reader.Ptr.prototype.readErr = function() {
		var b, err;
		b = this;
		err = b.err;
		b.err = $ifaceNil;
		return err;
	};
	Reader.prototype.readErr = function() { return this.$val.readErr(); };
	Reader.Ptr.prototype.Peek = function(n) {
		var b, m, err;
		b = this;
		if (n < 0) {
			return [($sliceType($Uint8)).nil, $pkg.ErrNegativeCount];
		}
		if (n > b.buf.$length) {
			return [($sliceType($Uint8)).nil, $pkg.ErrBufferFull];
		}
		while ((b.w - b.r >> 0) < n && $interfaceIsEqual(b.err, $ifaceNil)) {
			b.fill();
		}
		m = b.w - b.r >> 0;
		if (m > n) {
			m = n;
		}
		err = $ifaceNil;
		if (m < n) {
			err = b.readErr();
			if ($interfaceIsEqual(err, $ifaceNil)) {
				err = $pkg.ErrBufferFull;
			}
		}
		return [$subslice(b.buf, b.r, (b.r + m >> 0)), err];
	};
	Reader.prototype.Peek = function(n) { return this.$val.Peek(n); };
	Reader.Ptr.prototype.Read = function(p) {
		var n = 0, err = $ifaceNil, b, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple, x, _tmp$4, _tmp$5, _tmp$6, _tmp$7, x$1, x$2, _tmp$8, _tmp$9;
		b = this;
		n = p.$length;
		if (n === 0) {
			_tmp = 0; _tmp$1 = b.readErr(); n = _tmp; err = _tmp$1;
			return [n, err];
		}
		if (b.r === b.w) {
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp$2 = 0; _tmp$3 = b.readErr(); n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
			if (p.$length >= b.buf.$length) {
				_tuple = b.rd.Read(p); n = _tuple[0]; b.err = _tuple[1];
				if (n < 0) {
					$panic(errNegativeRead);
				}
				if (n > 0) {
					b.lastByte = ((x = n - 1 >> 0, ((x < 0 || x >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x])) >> 0);
					b.lastRuneSize = -1;
				}
				_tmp$4 = n; _tmp$5 = b.readErr(); n = _tmp$4; err = _tmp$5;
				return [n, err];
			}
			b.fill();
			if (b.w === b.r) {
				_tmp$6 = 0; _tmp$7 = b.readErr(); n = _tmp$6; err = _tmp$7;
				return [n, err];
			}
		}
		if (n > (b.w - b.r >> 0)) {
			n = b.w - b.r >> 0;
		}
		$copySlice($subslice(p, 0, n), $subslice(b.buf, b.r));
		b.r = b.r + (n) >> 0;
		b.lastByte = ((x$1 = b.buf, x$2 = b.r - 1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + x$2])) >> 0);
		b.lastRuneSize = -1;
		_tmp$8 = n; _tmp$9 = $ifaceNil; n = _tmp$8; err = _tmp$9;
		return [n, err];
	};
	Reader.prototype.Read = function(p) { return this.$val.Read(p); };
	Reader.Ptr.prototype.ReadByte = function() {
		var c = 0, err = $ifaceNil, b, _tmp, _tmp$1, x, x$1, _tmp$2, _tmp$3;
		b = this;
		b.lastRuneSize = -1;
		while (b.r === b.w) {
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp = 0; _tmp$1 = b.readErr(); c = _tmp; err = _tmp$1;
				return [c, err];
			}
			b.fill();
		}
		c = (x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		b.r = b.r + (1) >> 0;
		b.lastByte = (c >> 0);
		_tmp$2 = c; _tmp$3 = $ifaceNil; c = _tmp$2; err = _tmp$3;
		return [c, err];
	};
	Reader.prototype.ReadByte = function() { return this.$val.ReadByte(); };
	Reader.Ptr.prototype.UnreadByte = function() {
		var b, x, x$1;
		b = this;
		if (b.lastByte < 0 || (b.r === 0) && b.w > 0) {
			return $pkg.ErrInvalidUnreadByte;
		}
		if (b.r > 0) {
			b.r = b.r - (1) >> 0;
		} else {
			b.w = 1;
		}
		(x = b.buf, x$1 = b.r, (x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1] = (b.lastByte << 24 >>> 24));
		b.lastByte = -1;
		b.lastRuneSize = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadByte = function() { return this.$val.UnreadByte(); };
	Reader.Ptr.prototype.ReadRune = function() {
		var r = 0, size = 0, err = $ifaceNil, b, _tmp, _tmp$1, _tmp$2, _tmp$3, x, x$1, _tmp$4, _tuple, x$2, x$3, _tmp$5, _tmp$6, _tmp$7;
		b = this;
		while ((b.r + 4 >> 0) > b.w && !utf8.FullRune($subslice(b.buf, b.r, b.w)) && $interfaceIsEqual(b.err, $ifaceNil) && (b.w - b.r >> 0) < b.buf.$length) {
			b.fill();
		}
		b.lastRuneSize = -1;
		if (b.r === b.w) {
			_tmp = 0; _tmp$1 = 0; _tmp$2 = b.readErr(); r = _tmp; size = _tmp$1; err = _tmp$2;
			return [r, size, err];
		}
		_tmp$3 = ((x = b.buf, x$1 = b.r, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1])) >> 0); _tmp$4 = 1; r = _tmp$3; size = _tmp$4;
		if (r >= 128) {
			_tuple = utf8.DecodeRune($subslice(b.buf, b.r, b.w)); r = _tuple[0]; size = _tuple[1];
		}
		b.r = b.r + (size) >> 0;
		b.lastByte = ((x$2 = b.buf, x$3 = b.r - 1 >> 0, ((x$3 < 0 || x$3 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + x$3])) >> 0);
		b.lastRuneSize = size;
		_tmp$5 = r; _tmp$6 = size; _tmp$7 = $ifaceNil; r = _tmp$5; size = _tmp$6; err = _tmp$7;
		return [r, size, err];
	};
	Reader.prototype.ReadRune = function() { return this.$val.ReadRune(); };
	Reader.Ptr.prototype.UnreadRune = function() {
		var b;
		b = this;
		if (b.lastRuneSize < 0 || b.r < b.lastRuneSize) {
			return $pkg.ErrInvalidUnreadRune;
		}
		b.r = b.r - (b.lastRuneSize) >> 0;
		b.lastByte = -1;
		b.lastRuneSize = -1;
		return $ifaceNil;
	};
	Reader.prototype.UnreadRune = function() { return this.$val.UnreadRune(); };
	Reader.Ptr.prototype.Buffered = function() {
		var b;
		b = this;
		return b.w - b.r >> 0;
	};
	Reader.prototype.Buffered = function() { return this.$val.Buffered(); };
	Reader.Ptr.prototype.ReadSlice = function(delim) {
		var line = ($sliceType($Uint8)).nil, err = $ifaceNil, b, i, n, i$1;
		b = this;
		while (true) {
			i = bytes.IndexByte($subslice(b.buf, b.r, b.w), delim);
			if (i >= 0) {
				line = $subslice(b.buf, b.r, ((b.r + i >> 0) + 1 >> 0));
				b.r = b.r + ((i + 1 >> 0)) >> 0;
				break;
			}
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				line = $subslice(b.buf, b.r, b.w);
				b.r = b.w;
				err = b.readErr();
				break;
			}
			n = b.Buffered();
			if (n >= b.buf.$length) {
				b.r = b.w;
				line = b.buf;
				err = $pkg.ErrBufferFull;
				break;
			}
			b.fill();
		}
		i$1 = line.$length - 1 >> 0;
		if (i$1 >= 0) {
			b.lastByte = (((i$1 < 0 || i$1 >= line.$length) ? $throwRuntimeError("index out of range") : line.$array[line.$offset + i$1]) >> 0);
		}
		return [line, err];
	};
	Reader.prototype.ReadSlice = function(delim) { return this.$val.ReadSlice(delim); };
	Reader.Ptr.prototype.ReadLine = function() {
		var line = ($sliceType($Uint8)).nil, isPrefix = false, err = $ifaceNil, b, _tuple, x, _tmp, _tmp$1, _tmp$2, x$1, drop, x$2;
		b = this;
		_tuple = b.ReadSlice(10); line = _tuple[0]; err = _tuple[1];
		if ($interfaceIsEqual(err, $pkg.ErrBufferFull)) {
			if (line.$length > 0 && ((x = line.$length - 1 >> 0, ((x < 0 || x >= line.$length) ? $throwRuntimeError("index out of range") : line.$array[line.$offset + x])) === 13)) {
				if (b.r === 0) {
					$panic(new $String("bufio: tried to rewind past start of buffer"));
				}
				b.r = b.r - (1) >> 0;
				line = $subslice(line, 0, (line.$length - 1 >> 0));
			}
			_tmp = line; _tmp$1 = true; _tmp$2 = $ifaceNil; line = _tmp; isPrefix = _tmp$1; err = _tmp$2;
			return [line, isPrefix, err];
		}
		if (line.$length === 0) {
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				line = ($sliceType($Uint8)).nil;
			}
			return [line, isPrefix, err];
		}
		err = $ifaceNil;
		if ((x$1 = line.$length - 1 >> 0, ((x$1 < 0 || x$1 >= line.$length) ? $throwRuntimeError("index out of range") : line.$array[line.$offset + x$1])) === 10) {
			drop = 1;
			if (line.$length > 1 && ((x$2 = line.$length - 2 >> 0, ((x$2 < 0 || x$2 >= line.$length) ? $throwRuntimeError("index out of range") : line.$array[line.$offset + x$2])) === 13)) {
				drop = 2;
			}
			line = $subslice(line, 0, (line.$length - drop >> 0));
		}
		return [line, isPrefix, err];
	};
	Reader.prototype.ReadLine = function() { return this.$val.ReadLine(); };
	Reader.Ptr.prototype.ReadBytes = function(delim) {
		var line = ($sliceType($Uint8)).nil, err = $ifaceNil, b, frag, full, e, _tuple, buf, n, _ref, _i, i, buf$1, _ref$1, _i$1, i$1, _tmp, _tmp$1;
		b = this;
		frag = ($sliceType($Uint8)).nil;
		full = ($sliceType(($sliceType($Uint8)))).nil;
		err = $ifaceNil;
		while (true) {
			e = $ifaceNil;
			_tuple = b.ReadSlice(delim); frag = _tuple[0]; e = _tuple[1];
			if ($interfaceIsEqual(e, $ifaceNil)) {
				break;
			}
			if (!($interfaceIsEqual(e, $pkg.ErrBufferFull))) {
				err = e;
				break;
			}
			buf = ($sliceType($Uint8)).make(frag.$length);
			$copySlice(buf, frag);
			full = $append(full, buf);
		}
		n = 0;
		_ref = full;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			n = n + (((i < 0 || i >= full.$length) ? $throwRuntimeError("index out of range") : full.$array[full.$offset + i]).$length) >> 0;
			_i++;
		}
		n = n + (frag.$length) >> 0;
		buf$1 = ($sliceType($Uint8)).make(n);
		n = 0;
		_ref$1 = full;
		_i$1 = 0;
		while (_i$1 < _ref$1.$length) {
			i$1 = _i$1;
			n = n + ($copySlice($subslice(buf$1, n), ((i$1 < 0 || i$1 >= full.$length) ? $throwRuntimeError("index out of range") : full.$array[full.$offset + i$1]))) >> 0;
			_i$1++;
		}
		$copySlice($subslice(buf$1, n), frag);
		_tmp = buf$1; _tmp$1 = err; line = _tmp; err = _tmp$1;
		return [line, err];
	};
	Reader.prototype.ReadBytes = function(delim) { return this.$val.ReadBytes(delim); };
	Reader.Ptr.prototype.ReadString = function(delim) {
		var line = "", err = $ifaceNil, b, _tuple, bytes$1, _tmp, _tmp$1;
		b = this;
		_tuple = b.ReadBytes(delim); bytes$1 = _tuple[0]; err = _tuple[1];
		line = $bytesToString(bytes$1);
		_tmp = line; _tmp$1 = err; line = _tmp; err = _tmp$1;
		return [line, err];
	};
	Reader.prototype.ReadString = function(delim) { return this.$val.ReadString(delim); };
	Reader.Ptr.prototype.WriteTo = function(w) {
		var n = new $Int64(0, 0), err = $ifaceNil, b, _tuple, _tuple$1, r, ok, _tuple$2, m, err$1, x, _tmp, _tmp$1, _tuple$3, w$1, ok$1, _tuple$4, m$1, err$2, x$1, _tmp$2, _tmp$3, _tuple$5, m$2, err$3, x$2, _tmp$4, _tmp$5, _tmp$6, _tmp$7;
		b = this;
		_tuple = b.writeBuf(w); n = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [n, err];
		}
		_tuple$1 = $assertType(b.rd, io.WriterTo, true); r = _tuple$1[0]; ok = _tuple$1[1];
		if (ok) {
			_tuple$2 = r.WriteTo(w); m = _tuple$2[0]; err$1 = _tuple$2[1];
			n = (x = m, new $Int64(n.$high + x.$high, n.$low + x.$low));
			_tmp = n; _tmp$1 = err$1; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		_tuple$3 = $assertType(w, io.ReaderFrom, true); w$1 = _tuple$3[0]; ok$1 = _tuple$3[1];
		if (ok$1) {
			_tuple$4 = w$1.ReadFrom(b.rd); m$1 = _tuple$4[0]; err$2 = _tuple$4[1];
			n = (x$1 = m$1, new $Int64(n.$high + x$1.$high, n.$low + x$1.$low));
			_tmp$2 = n; _tmp$3 = err$2; n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		if ((b.w - b.r >> 0) < b.buf.$length) {
			b.fill();
		}
		while (b.r < b.w) {
			_tuple$5 = b.writeBuf(w); m$2 = _tuple$5[0]; err$3 = _tuple$5[1];
			n = (x$2 = m$2, new $Int64(n.$high + x$2.$high, n.$low + x$2.$low));
			if (!($interfaceIsEqual(err$3, $ifaceNil))) {
				_tmp$4 = n; _tmp$5 = err$3; n = _tmp$4; err = _tmp$5;
				return [n, err];
			}
			b.fill();
		}
		if ($interfaceIsEqual(b.err, io.EOF)) {
			b.err = $ifaceNil;
		}
		_tmp$6 = n; _tmp$7 = b.readErr(); n = _tmp$6; err = _tmp$7;
		return [n, err];
	};
	Reader.prototype.WriteTo = function(w) { return this.$val.WriteTo(w); };
	Reader.Ptr.prototype.writeBuf = function(w) {
		var b, _tuple, n, err;
		b = this;
		_tuple = w.Write($subslice(b.buf, b.r, b.w)); n = _tuple[0]; err = _tuple[1];
		if (n < (b.r - b.w >> 0)) {
			$panic(errors.New("bufio: writer did not write all data"));
		}
		b.r = b.r + (n) >> 0;
		return [new $Int64(0, n), err];
	};
	Reader.prototype.writeBuf = function(w) { return this.$val.writeBuf(w); };
	NewWriterSize = $pkg.NewWriterSize = function(w, size) {
		var _tuple, b, ok;
		_tuple = $assertType(w, ($ptrType(Writer)), true); b = _tuple[0]; ok = _tuple[1];
		if (ok && b.buf.$length >= size) {
			return b;
		}
		if (size <= 0) {
			size = 4096;
		}
		return new Writer.Ptr($ifaceNil, ($sliceType($Uint8)).make(size), 0, w);
	};
	NewWriter = $pkg.NewWriter = function(w) {
		return NewWriterSize(w, 4096);
	};
	Writer.Ptr.prototype.Reset = function(w) {
		var b;
		b = this;
		b.err = $ifaceNil;
		b.n = 0;
		b.wr = w;
	};
	Writer.prototype.Reset = function(w) { return this.$val.Reset(w); };
	Writer.Ptr.prototype.Flush = function() {
		var b, err;
		b = this;
		err = b.flush();
		return err;
	};
	Writer.prototype.Flush = function() { return this.$val.Flush(); };
	Writer.Ptr.prototype.flush = function() {
		var b, _tuple, n, err;
		b = this;
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			return b.err;
		}
		if (b.n === 0) {
			return $ifaceNil;
		}
		_tuple = b.wr.Write($subslice(b.buf, 0, b.n)); n = _tuple[0]; err = _tuple[1];
		if (n < b.n && $interfaceIsEqual(err, $ifaceNil)) {
			err = io.ErrShortWrite;
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if (n > 0 && n < b.n) {
				$copySlice($subslice(b.buf, 0, (b.n - n >> 0)), $subslice(b.buf, n, b.n));
			}
			b.n = b.n - (n) >> 0;
			b.err = err;
			return err;
		}
		b.n = 0;
		return $ifaceNil;
	};
	Writer.prototype.flush = function() { return this.$val.flush(); };
	Writer.Ptr.prototype.Available = function() {
		var b;
		b = this;
		return b.buf.$length - b.n >> 0;
	};
	Writer.prototype.Available = function() { return this.$val.Available(); };
	Writer.Ptr.prototype.Buffered = function() {
		var b;
		b = this;
		return b.n;
	};
	Writer.prototype.Buffered = function() { return this.$val.Buffered(); };
	Writer.Ptr.prototype.Write = function(p) {
		var nn = 0, err = $ifaceNil, b, n, _tuple, _tmp, _tmp$1, n$1, _tmp$2, _tmp$3;
		b = this;
		while (p.$length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil)) {
			n = 0;
			if (b.Buffered() === 0) {
				_tuple = b.wr.Write(p); n = _tuple[0]; b.err = _tuple[1];
			} else {
				n = $copySlice($subslice(b.buf, b.n), p);
				b.n = b.n + (n) >> 0;
				b.flush();
			}
			nn = nn + (n) >> 0;
			p = $subslice(p, n);
		}
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			_tmp = nn; _tmp$1 = b.err; nn = _tmp; err = _tmp$1;
			return [nn, err];
		}
		n$1 = $copySlice($subslice(b.buf, b.n), p);
		b.n = b.n + (n$1) >> 0;
		nn = nn + (n$1) >> 0;
		_tmp$2 = nn; _tmp$3 = $ifaceNil; nn = _tmp$2; err = _tmp$3;
		return [nn, err];
	};
	Writer.prototype.Write = function(p) { return this.$val.Write(p); };
	Writer.Ptr.prototype.WriteByte = function(c) {
		var b, x, x$1;
		b = this;
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			return b.err;
		}
		if (b.Available() <= 0 && !($interfaceIsEqual(b.flush(), $ifaceNil))) {
			return b.err;
		}
		(x = b.buf, x$1 = b.n, (x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1] = c);
		b.n = b.n + (1) >> 0;
		return $ifaceNil;
	};
	Writer.prototype.WriteByte = function(c) { return this.$val.WriteByte(c); };
	Writer.Ptr.prototype.WriteRune = function(r) {
		var size = 0, err = $ifaceNil, b, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, n, _tmp$6, _tmp$7, _tuple, _tmp$8, _tmp$9;
		b = this;
		if (r < 128) {
			err = b.WriteByte((r << 24 >>> 24));
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp = 0; _tmp$1 = err; size = _tmp; err = _tmp$1;
				return [size, err];
			}
			_tmp$2 = 1; _tmp$3 = $ifaceNil; size = _tmp$2; err = _tmp$3;
			return [size, err];
		}
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			_tmp$4 = 0; _tmp$5 = b.err; size = _tmp$4; err = _tmp$5;
			return [size, err];
		}
		n = b.Available();
		if (n < 4) {
			b.flush();
			if (!($interfaceIsEqual(b.err, $ifaceNil))) {
				_tmp$6 = 0; _tmp$7 = b.err; size = _tmp$6; err = _tmp$7;
				return [size, err];
			}
			n = b.Available();
			if (n < 4) {
				_tuple = b.WriteString($encodeRune(r)); size = _tuple[0]; err = _tuple[1];
				return [size, err];
			}
		}
		size = utf8.EncodeRune($subslice(b.buf, b.n), r);
		b.n = b.n + (size) >> 0;
		_tmp$8 = size; _tmp$9 = $ifaceNil; size = _tmp$8; err = _tmp$9;
		return [size, err];
	};
	Writer.prototype.WriteRune = function(r) { return this.$val.WriteRune(r); };
	Writer.Ptr.prototype.WriteString = function(s) {
		var b, nn, n, n$1;
		b = this;
		nn = 0;
		while (s.length > b.Available() && $interfaceIsEqual(b.err, $ifaceNil)) {
			n = $copyString($subslice(b.buf, b.n), s);
			b.n = b.n + (n) >> 0;
			nn = nn + (n) >> 0;
			s = s.substring(n);
			b.flush();
		}
		if (!($interfaceIsEqual(b.err, $ifaceNil))) {
			return [nn, b.err];
		}
		n$1 = $copyString($subslice(b.buf, b.n), s);
		b.n = b.n + (n$1) >> 0;
		nn = nn + (n$1) >> 0;
		return [nn, $ifaceNil];
	};
	Writer.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	Writer.Ptr.prototype.ReadFrom = function(r) {
		var n = new $Int64(0, 0), err = $ifaceNil, b, _tuple, w, ok, _tuple$1, m, err1, _tmp, _tmp$1, nr, _tuple$2, _tmp$2, _tmp$3, x, _tmp$4, _tmp$5;
		b = this;
		if (b.Buffered() === 0) {
			_tuple = $assertType(b.wr, io.ReaderFrom, true); w = _tuple[0]; ok = _tuple[1];
			if (ok) {
				_tuple$1 = w.ReadFrom(r); n = _tuple$1[0]; err = _tuple$1[1];
				return [n, err];
			}
		}
		m = 0;
		while (true) {
			if (b.Available() === 0) {
				err1 = b.flush();
				if (!($interfaceIsEqual(err1, $ifaceNil))) {
					_tmp = n; _tmp$1 = err1; n = _tmp; err = _tmp$1;
					return [n, err];
				}
			}
			nr = 0;
			while (nr < 100) {
				_tuple$2 = r.Read($subslice(b.buf, b.n)); m = _tuple$2[0]; err = _tuple$2[1];
				if (!((m === 0)) || !($interfaceIsEqual(err, $ifaceNil))) {
					break;
				}
				nr = nr + (1) >> 0;
			}
			if (nr === 100) {
				_tmp$2 = n; _tmp$3 = io.ErrNoProgress; n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
			b.n = b.n + (m) >> 0;
			n = (x = new $Int64(0, m), new $Int64(n.$high + x.$high, n.$low + x.$low));
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				break;
			}
		}
		if ($interfaceIsEqual(err, io.EOF)) {
			if (b.Available() === 0) {
				err = b.flush();
			} else {
				err = $ifaceNil;
			}
		}
		_tmp$4 = n; _tmp$5 = err; n = _tmp$4; err = _tmp$5;
		return [n, err];
	};
	Writer.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	NewReadWriter = $pkg.NewReadWriter = function(r, w) {
		return new ReadWriter.Ptr(r, w);
	};
	$pkg.$init = function() {
		($ptrType(Reader)).methods = [["Buffered", "Buffered", "", $funcType([], [$Int], false), -1], ["Peek", "Peek", "", $funcType([$Int], [($sliceType($Uint8)), $error], false), -1], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["ReadByte", "ReadByte", "", $funcType([], [$Uint8, $error], false), -1], ["ReadBytes", "ReadBytes", "", $funcType([$Uint8], [($sliceType($Uint8)), $error], false), -1], ["ReadLine", "ReadLine", "", $funcType([], [($sliceType($Uint8)), $Bool, $error], false), -1], ["ReadRune", "ReadRune", "", $funcType([], [$Int32, $Int, $error], false), -1], ["ReadSlice", "ReadSlice", "", $funcType([$Uint8], [($sliceType($Uint8)), $error], false), -1], ["ReadString", "ReadString", "", $funcType([$Uint8], [$String, $error], false), -1], ["Reset", "Reset", "", $funcType([io.Reader], [], false), -1], ["UnreadByte", "UnreadByte", "", $funcType([], [$error], false), -1], ["UnreadRune", "UnreadRune", "", $funcType([], [$error], false), -1], ["WriteTo", "WriteTo", "", $funcType([io.Writer], [$Int64, $error], false), -1], ["fill", "fill", "bufio", $funcType([], [], false), -1], ["readErr", "readErr", "bufio", $funcType([], [$error], false), -1], ["reset", "reset", "bufio", $funcType([($sliceType($Uint8)), io.Reader], [], false), -1], ["writeBuf", "writeBuf", "bufio", $funcType([io.Writer], [$Int64, $error], false), -1]];
		Reader.init([["buf", "buf", "bufio", ($sliceType($Uint8)), ""], ["rd", "rd", "bufio", io.Reader, ""], ["r", "r", "bufio", $Int, ""], ["w", "w", "bufio", $Int, ""], ["err", "err", "bufio", $error, ""], ["lastByte", "lastByte", "bufio", $Int, ""], ["lastRuneSize", "lastRuneSize", "bufio", $Int, ""]]);
		($ptrType(Writer)).methods = [["Available", "Available", "", $funcType([], [$Int], false), -1], ["Buffered", "Buffered", "", $funcType([], [$Int], false), -1], ["Flush", "Flush", "", $funcType([], [$error], false), -1], ["ReadFrom", "ReadFrom", "", $funcType([io.Reader], [$Int64, $error], false), -1], ["Reset", "Reset", "", $funcType([io.Writer], [], false), -1], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["WriteByte", "WriteByte", "", $funcType([$Uint8], [$error], false), -1], ["WriteRune", "WriteRune", "", $funcType([$Int32], [$Int, $error], false), -1], ["WriteString", "WriteString", "", $funcType([$String], [$Int, $error], false), -1], ["flush", "flush", "bufio", $funcType([], [$error], false), -1]];
		Writer.init([["err", "err", "bufio", $error, ""], ["buf", "buf", "bufio", ($sliceType($Uint8)), ""], ["n", "n", "bufio", $Int, ""], ["wr", "wr", "bufio", io.Writer, ""]]);
		ReadWriter.methods = [["Available", "Available", "", $funcType([], [$Int], false), 1], ["Flush", "Flush", "", $funcType([], [$error], false), 1], ["Peek", "Peek", "", $funcType([$Int], [($sliceType($Uint8)), $error], false), 0], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0], ["ReadByte", "ReadByte", "", $funcType([], [$Uint8, $error], false), 0], ["ReadBytes", "ReadBytes", "", $funcType([$Uint8], [($sliceType($Uint8)), $error], false), 0], ["ReadFrom", "ReadFrom", "", $funcType([io.Reader], [$Int64, $error], false), 1], ["ReadLine", "ReadLine", "", $funcType([], [($sliceType($Uint8)), $Bool, $error], false), 0], ["ReadRune", "ReadRune", "", $funcType([], [$Int32, $Int, $error], false), 0], ["ReadSlice", "ReadSlice", "", $funcType([$Uint8], [($sliceType($Uint8)), $error], false), 0], ["ReadString", "ReadString", "", $funcType([$Uint8], [$String, $error], false), 0], ["UnreadByte", "UnreadByte", "", $funcType([], [$error], false), 0], ["UnreadRune", "UnreadRune", "", $funcType([], [$error], false), 0], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), 1], ["WriteByte", "WriteByte", "", $funcType([$Uint8], [$error], false), 1], ["WriteRune", "WriteRune", "", $funcType([$Int32], [$Int, $error], false), 1], ["WriteString", "WriteString", "", $funcType([$String], [$Int, $error], false), 1], ["WriteTo", "WriteTo", "", $funcType([io.Writer], [$Int64, $error], false), 0], ["fill", "fill", "bufio", $funcType([], [], false), 0], ["flush", "flush", "bufio", $funcType([], [$error], false), 1], ["readErr", "readErr", "bufio", $funcType([], [$error], false), 0], ["reset", "reset", "bufio", $funcType([($sliceType($Uint8)), io.Reader], [], false), 0], ["writeBuf", "writeBuf", "bufio", $funcType([io.Writer], [$Int64, $error], false), 0]];
		($ptrType(ReadWriter)).methods = [["Available", "Available", "", $funcType([], [$Int], false), 1], ["Flush", "Flush", "", $funcType([], [$error], false), 1], ["Peek", "Peek", "", $funcType([$Int], [($sliceType($Uint8)), $error], false), 0], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0], ["ReadByte", "ReadByte", "", $funcType([], [$Uint8, $error], false), 0], ["ReadBytes", "ReadBytes", "", $funcType([$Uint8], [($sliceType($Uint8)), $error], false), 0], ["ReadFrom", "ReadFrom", "", $funcType([io.Reader], [$Int64, $error], false), 1], ["ReadLine", "ReadLine", "", $funcType([], [($sliceType($Uint8)), $Bool, $error], false), 0], ["ReadRune", "ReadRune", "", $funcType([], [$Int32, $Int, $error], false), 0], ["ReadSlice", "ReadSlice", "", $funcType([$Uint8], [($sliceType($Uint8)), $error], false), 0], ["ReadString", "ReadString", "", $funcType([$Uint8], [$String, $error], false), 0], ["UnreadByte", "UnreadByte", "", $funcType([], [$error], false), 0], ["UnreadRune", "UnreadRune", "", $funcType([], [$error], false), 0], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), 1], ["WriteByte", "WriteByte", "", $funcType([$Uint8], [$error], false), 1], ["WriteRune", "WriteRune", "", $funcType([$Int32], [$Int, $error], false), 1], ["WriteString", "WriteString", "", $funcType([$String], [$Int, $error], false), 1], ["WriteTo", "WriteTo", "", $funcType([io.Writer], [$Int64, $error], false), 0], ["fill", "fill", "bufio", $funcType([], [], false), 0], ["flush", "flush", "bufio", $funcType([], [$error], false), 1], ["readErr", "readErr", "bufio", $funcType([], [$error], false), 0], ["reset", "reset", "bufio", $funcType([($sliceType($Uint8)), io.Reader], [], false), 0], ["writeBuf", "writeBuf", "bufio", $funcType([io.Writer], [$Int64, $error], false), 0]];
		ReadWriter.init([["Reader", "", "", ($ptrType(Reader)), ""], ["Writer", "", "", ($ptrType(Writer)), ""]]);
		$pkg.ErrInvalidUnreadByte = errors.New("bufio: invalid use of UnreadByte");
		$pkg.ErrInvalidUnreadRune = errors.New("bufio: invalid use of UnreadRune");
		$pkg.ErrBufferFull = errors.New("bufio: buffer full");
		$pkg.ErrNegativeCount = errors.New("bufio: negative count");
		errNegativeRead = errors.New("bufio: reader returned negative count from Read");
		$pkg.ErrTooLong = errors.New("bufio.Scanner: token too long");
		$pkg.ErrNegativeAdvance = errors.New("bufio.Scanner: SplitFunc returns negative advance count");
		$pkg.ErrAdvanceTooFar = errors.New("bufio.Scanner: SplitFunc returns advance count beyond input");
	};
	return $pkg;
})();
$packages["text/tabwriter"] = (function() {
	var $pkg = {}, bytes = $packages["bytes"], io = $packages["io"], utf8 = $packages["unicode/utf8"];
	$pkg.$init = function() {
	};
	return $pkg;
})();
$packages["runtime/pprof"] = (function() {
	var $pkg = {}, bufio = $packages["bufio"], bytes = $packages["bytes"], fmt = $packages["fmt"], io = $packages["io"], runtime = $packages["runtime"], sort = $packages["sort"], strings = $packages["strings"], sync = $packages["sync"], tabwriter = $packages["text/tabwriter"];
	$pkg.$init = function() {
	};
	return $pkg;
})();
$packages["testing"] = (function() {
	var $pkg = {}, flag = $packages["flag"], fmt = $packages["fmt"], os = $packages["os"], runtime = $packages["runtime"], time = $packages["time"], sync = $packages["sync"], atomic = $packages["sync/atomic"], bytes = $packages["bytes"], io = $packages["io"], strings = $packages["strings"], pprof = $packages["runtime/pprof"], strconv = $packages["strconv"], InternalBenchmark, B, BenchmarkResult, PB, InternalExample, common, T, InternalTest, matchBenchmarks, benchTime, benchmarkMemory, memStats, short$1, outputDir, chatty, coverProfile, match, memProfile, memProfileRate, cpuProfile, blockProfile, blockProfileRate, timeout, cpuListStr, parallel, init, Main, decorate;
	InternalBenchmark = $pkg.InternalBenchmark = $newType(0, "Struct", "testing.InternalBenchmark", "InternalBenchmark", "testing", function(Name_, F_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.F = F_ !== undefined ? F_ : $throwNilPointerError;
	});
	B = $pkg.B = $newType(0, "Struct", "testing.B", "B", "testing", function(common_, N_, previousN_, previousDuration_, benchmark_, bytes_, timerOn_, showAllocResult_, result_, parallelism_, startAllocs_, startBytes_, netAllocs_, netBytes_) {
		this.$val = this;
		this.common = common_ !== undefined ? common_ : new common.Ptr();
		this.N = N_ !== undefined ? N_ : 0;
		this.previousN = previousN_ !== undefined ? previousN_ : 0;
		this.previousDuration = previousDuration_ !== undefined ? previousDuration_ : new time.Duration(0, 0);
		this.benchmark = benchmark_ !== undefined ? benchmark_ : new InternalBenchmark.Ptr();
		this.bytes = bytes_ !== undefined ? bytes_ : new $Int64(0, 0);
		this.timerOn = timerOn_ !== undefined ? timerOn_ : false;
		this.showAllocResult = showAllocResult_ !== undefined ? showAllocResult_ : false;
		this.result = result_ !== undefined ? result_ : new BenchmarkResult.Ptr();
		this.parallelism = parallelism_ !== undefined ? parallelism_ : 0;
		this.startAllocs = startAllocs_ !== undefined ? startAllocs_ : new $Uint64(0, 0);
		this.startBytes = startBytes_ !== undefined ? startBytes_ : new $Uint64(0, 0);
		this.netAllocs = netAllocs_ !== undefined ? netAllocs_ : new $Uint64(0, 0);
		this.netBytes = netBytes_ !== undefined ? netBytes_ : new $Uint64(0, 0);
	});
	BenchmarkResult = $pkg.BenchmarkResult = $newType(0, "Struct", "testing.BenchmarkResult", "BenchmarkResult", "testing", function(N_, T_, Bytes_, MemAllocs_, MemBytes_) {
		this.$val = this;
		this.N = N_ !== undefined ? N_ : 0;
		this.T = T_ !== undefined ? T_ : new time.Duration(0, 0);
		this.Bytes = Bytes_ !== undefined ? Bytes_ : new $Int64(0, 0);
		this.MemAllocs = MemAllocs_ !== undefined ? MemAllocs_ : new $Uint64(0, 0);
		this.MemBytes = MemBytes_ !== undefined ? MemBytes_ : new $Uint64(0, 0);
	});
	PB = $pkg.PB = $newType(0, "Struct", "testing.PB", "PB", "testing", function(globalN_, grain_, cache_, bN_) {
		this.$val = this;
		this.globalN = globalN_ !== undefined ? globalN_ : ($ptrType($Uint64)).nil;
		this.grain = grain_ !== undefined ? grain_ : new $Uint64(0, 0);
		this.cache = cache_ !== undefined ? cache_ : new $Uint64(0, 0);
		this.bN = bN_ !== undefined ? bN_ : new $Uint64(0, 0);
	});
	InternalExample = $pkg.InternalExample = $newType(0, "Struct", "testing.InternalExample", "InternalExample", "testing", function(Name_, F_, Output_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.F = F_ !== undefined ? F_ : $throwNilPointerError;
		this.Output = Output_ !== undefined ? Output_ : "";
	});
	common = $pkg.common = $newType(0, "Struct", "testing.common", "common", "testing", function(mu_, output_, failed_, skipped_, finished_, start_, duration_, self_, signal_) {
		this.$val = this;
		this.mu = mu_ !== undefined ? mu_ : new sync.RWMutex.Ptr();
		this.output = output_ !== undefined ? output_ : ($sliceType($Uint8)).nil;
		this.failed = failed_ !== undefined ? failed_ : false;
		this.skipped = skipped_ !== undefined ? skipped_ : false;
		this.finished = finished_ !== undefined ? finished_ : false;
		this.start = start_ !== undefined ? start_ : new time.Time.Ptr();
		this.duration = duration_ !== undefined ? duration_ : new time.Duration(0, 0);
		this.self = self_ !== undefined ? self_ : $ifaceNil;
		this.signal = signal_ !== undefined ? signal_ : ($chanType($emptyInterface, false, false)).nil;
	});
	T = $pkg.T = $newType(0, "Struct", "testing.T", "T", "testing", function(common_, name_, startParallel_) {
		this.$val = this;
		this.common = common_ !== undefined ? common_ : new common.Ptr();
		this.name = name_ !== undefined ? name_ : "";
		this.startParallel = startParallel_ !== undefined ? startParallel_ : ($chanType($Bool, false, false)).nil;
	});
	InternalTest = $pkg.InternalTest = $newType(0, "Struct", "testing.InternalTest", "InternalTest", "testing", function(Name_, F_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.F = F_ !== undefined ? F_ : $throwNilPointerError;
	});
	init = function($b) {
		var $this = this, $args = arguments, $r, $s = 0, x;
		/* */ if(!$b) { $nonblockingCall(); }; var $blocking_init = function() { s: while (true) { switch ($s) { case 0:
		x = false;
		/* if (x) { */ if (x) {} else { $s = 1; continue; }
			$r = Main($throwNilPointerError, ($sliceType(InternalTest)).nil, ($sliceType(InternalBenchmark)).nil, ($sliceType(InternalExample)).nil, true); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		/* } */ case 1:
		/* */ case -1: } return; } }; $blocking_init.$blocking = true; return $blocking_init;
	};
	Main = $pkg.Main = function(matchString, tests, benchmarks, examples, $b) {
		var $this = this, $args = arguments, $r, $s = 0, failed, _ref, _i, t, done, test, _r;
		/* */ if(!$b) { $nonblockingCall(); }; var $blocking_Main = function() { s: while (true) { switch ($s) { case 0:
		flag.Parse();
		if (tests.$length === 0) {
			fmt.Println(new ($sliceType($emptyInterface))([new $String("testing: warning: no tests to run")]));
		}
		failed = false;
		_ref = tests;
		_i = 0;
		/* while (_i < _ref.$length) { */ case 1: if(!(_i < _ref.$length)) { $s = 2; continue; }
			done = [undefined];
			t = [undefined];
			test = new InternalTest.Ptr(); $copy(test, ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), InternalTest);
			t[0] = new T.Ptr(new common.Ptr(new sync.RWMutex.Ptr(), ($sliceType($Uint8)).nil, false, false, false, $clone(time.Now(), time.Time), new time.Duration(0, 0), $ifaceNil, ($chanType($emptyInterface, false, false)).nil), test.Name, ($chanType($Bool, false, false)).nil);
			t[0].common.self = t[0];
			if (chatty.$get()) {
				fmt.Printf("=== RUN %s\n", new ($sliceType($emptyInterface))([new $String(t[0].name)]));
			}
			done[0] = new ($chanType(($structType([])), false, false))(0);
			$go((function(done, t) { return function($b) {
				var $this = this, $args = arguments, $r, $deferred = [], $err = null, $s = 0;
				/* */ if(!$b) { $nonblockingCall(); }; var $f = function() { try { $deferFrames.push($deferred); s: while (true) { switch ($s) { case 0:
				$deferred.push([(function(done, t) { return function() {
					var err, _tuple, e, ok;
					err = $recover();
					_tuple = $assertType(err, ($ptrType(runtime.NotSupportedError)), true); e = _tuple[0]; ok = _tuple[1];
					if (ok) {
						t[0].common.log(e.Error());
						t[0].common.skip();
						err = $ifaceNil;
					}
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						t[0].common.Fail();
						t[0].report();
						$panic(err);
					}
					$close(done[0]);
				}; })(done, t), [true]]);
				$r = test.F(t[0], true); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
				/* */ case -1: } return; } } catch(err) { $err = err; } finally { $deferFrames.pop(); if ($curGoroutine.asleep && !$jumpToDefer) { throw null; } $s = -1; $callDeferred($deferred, $err); } }; $f.$blocking = true; return $f;
			}; })(done, t), []);
			_r = $recv(done[0], true); /* */ $s = 3; case 3: if (_r && _r.$blocking) { _r = _r(); }
			_r[0];
			t[0].common.duration = time.Now().Sub($clone(t[0].common.start, time.Time));
			t[0].report();
			failed = failed || t[0].common.failed;
			_i++;
		/* } */ $s = 1; continue; case 2:
		if (failed) {
			os.Exit(1);
		}
		os.Exit(0);
		/* */ case -1: } return; } }; $blocking_Main.$blocking = true; return $blocking_Main;
	};
	B.Ptr.prototype.StartTimer = function() {
		var b;
		b = this;
		if (!b.timerOn) {
			runtime.ReadMemStats(memStats);
			b.startAllocs = memStats.Mallocs;
			b.startBytes = memStats.TotalAlloc;
			$copy(b.common.start, time.Now(), time.Time);
			b.timerOn = true;
		}
	};
	B.prototype.StartTimer = function() { return this.$val.StartTimer(); };
	B.Ptr.prototype.StopTimer = function() {
		var b, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		b = this;
		if (b.timerOn) {
			b.common.duration = (x = b.common.duration, x$1 = time.Now().Sub($clone(b.common.start, time.Time)), new time.Duration(x.$high + x$1.$high, x.$low + x$1.$low));
			runtime.ReadMemStats(memStats);
			b.netAllocs = (x$2 = b.netAllocs, x$3 = (x$4 = memStats.Mallocs, x$5 = b.startAllocs, new $Uint64(x$4.$high - x$5.$high, x$4.$low - x$5.$low)), new $Uint64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
			b.netBytes = (x$6 = b.netBytes, x$7 = (x$8 = memStats.TotalAlloc, x$9 = b.startBytes, new $Uint64(x$8.$high - x$9.$high, x$8.$low - x$9.$low)), new $Uint64(x$6.$high + x$7.$high, x$6.$low + x$7.$low));
			b.timerOn = false;
		}
	};
	B.prototype.StopTimer = function() { return this.$val.StopTimer(); };
	B.Ptr.prototype.ResetTimer = function() {
		var b;
		b = this;
		if (b.timerOn) {
			runtime.ReadMemStats(memStats);
			b.startAllocs = memStats.Mallocs;
			b.startBytes = memStats.TotalAlloc;
			$copy(b.common.start, time.Now(), time.Time);
		}
		b.common.duration = new time.Duration(0, 0);
		b.netAllocs = new $Uint64(0, 0);
		b.netBytes = new $Uint64(0, 0);
	};
	B.prototype.ResetTimer = function() { return this.$val.ResetTimer(); };
	B.Ptr.prototype.SetBytes = function(n) {
		var b;
		b = this;
		b.bytes = n;
	};
	B.prototype.SetBytes = function(n) { return this.$val.SetBytes(n); };
	B.Ptr.prototype.ReportAllocs = function() {
		var b;
		b = this;
		b.showAllocResult = true;
	};
	B.prototype.ReportAllocs = function() { return this.$val.ReportAllocs(); };
	BenchmarkResult.Ptr.prototype.NsPerOp = function() {
		var r;
		r = new BenchmarkResult.Ptr(); $copy(r, this, BenchmarkResult);
		if (r.N <= 0) {
			return new $Int64(0, 0);
		}
		return $div64(r.T.Nanoseconds(), new $Int64(0, r.N), false);
	};
	BenchmarkResult.prototype.NsPerOp = function() { return this.$val.NsPerOp(); };
	BenchmarkResult.Ptr.prototype.mbPerSec = function() {
		var r, x, x$1;
		r = new BenchmarkResult.Ptr(); $copy(r, this, BenchmarkResult);
		if ((x = r.Bytes, (x.$high < 0 || (x.$high === 0 && x.$low <= 0))) || (x$1 = r.T, (x$1.$high < 0 || (x$1.$high === 0 && x$1.$low <= 0))) || r.N <= 0) {
			return 0;
		}
		return ($flatten64(r.Bytes) * r.N / 1e+06) / r.T.Seconds();
	};
	BenchmarkResult.prototype.mbPerSec = function() { return this.$val.mbPerSec(); };
	BenchmarkResult.Ptr.prototype.AllocsPerOp = function() {
		var r, x;
		r = new BenchmarkResult.Ptr(); $copy(r, this, BenchmarkResult);
		if (r.N <= 0) {
			return new $Int64(0, 0);
		}
		return $div64((x = r.MemAllocs, new $Int64(x.$high, x.$low)), new $Int64(0, r.N), false);
	};
	BenchmarkResult.prototype.AllocsPerOp = function() { return this.$val.AllocsPerOp(); };
	BenchmarkResult.Ptr.prototype.AllocedBytesPerOp = function() {
		var r, x;
		r = new BenchmarkResult.Ptr(); $copy(r, this, BenchmarkResult);
		if (r.N <= 0) {
			return new $Int64(0, 0);
		}
		return $div64((x = r.MemBytes, new $Int64(x.$high, x.$low)), new $Int64(0, r.N), false);
	};
	BenchmarkResult.prototype.AllocedBytesPerOp = function() { return this.$val.AllocedBytesPerOp(); };
	BenchmarkResult.Ptr.prototype.String = function() {
		var r, mbs, mb, nsop, ns;
		r = new BenchmarkResult.Ptr(); $copy(r, this, BenchmarkResult);
		mbs = r.mbPerSec();
		mb = "";
		if (!((mbs === 0))) {
			mb = fmt.Sprintf("\t%7.2f MB/s", new ($sliceType($emptyInterface))([new $Float64(mbs)]));
		}
		nsop = r.NsPerOp();
		ns = fmt.Sprintf("%10d ns/op", new ($sliceType($emptyInterface))([nsop]));
		if (r.N > 0 && (nsop.$high < 0 || (nsop.$high === 0 && nsop.$low < 100))) {
			if ((nsop.$high < 0 || (nsop.$high === 0 && nsop.$low < 10))) {
				ns = fmt.Sprintf("%13.2f ns/op", new ($sliceType($emptyInterface))([new $Float64($flatten64(r.T.Nanoseconds()) / r.N)]));
			} else {
				ns = fmt.Sprintf("%12.1f ns/op", new ($sliceType($emptyInterface))([new $Float64($flatten64(r.T.Nanoseconds()) / r.N)]));
			}
		}
		return fmt.Sprintf("%8d\t%s%s", new ($sliceType($emptyInterface))([new $Int(r.N), new $String(ns), new $String(mb)]));
	};
	BenchmarkResult.prototype.String = function() { return this.$val.String(); };
	BenchmarkResult.Ptr.prototype.MemString = function() {
		var r;
		r = new BenchmarkResult.Ptr(); $copy(r, this, BenchmarkResult);
		return fmt.Sprintf("%8d B/op\t%8d allocs/op", new ($sliceType($emptyInterface))([r.AllocedBytesPerOp(), r.AllocsPerOp()]));
	};
	BenchmarkResult.prototype.MemString = function() { return this.$val.MemString(); };
	PB.Ptr.prototype.Next = function() {
		var pb, x, n, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		pb = this;
		if ((x = pb.cache, (x.$high === 0 && x.$low === 0))) {
			n = atomic.AddUint64(pb.globalN, pb.grain);
			if ((x$1 = pb.bN, (n.$high < x$1.$high || (n.$high === x$1.$high && n.$low <= x$1.$low)))) {
				pb.cache = pb.grain;
			} else if ((x$2 = (x$3 = pb.bN, x$4 = pb.grain, new $Uint64(x$3.$high + x$4.$high, x$3.$low + x$4.$low)), (n.$high < x$2.$high || (n.$high === x$2.$high && n.$low < x$2.$low)))) {
				pb.cache = (x$5 = (x$6 = pb.bN, x$7 = pb.grain, new $Uint64(x$6.$high + x$7.$high, x$6.$low + x$7.$low)), new $Uint64(x$5.$high - n.$high, x$5.$low - n.$low));
			} else {
				return false;
			}
		}
		pb.cache = (x$8 = pb.cache, x$9 = new $Uint64(0, 1), new $Uint64(x$8.$high - x$9.$high, x$8.$low - x$9.$low));
		return true;
	};
	PB.prototype.Next = function() { return this.$val.Next(); };
	B.Ptr.prototype.RunParallel = function(body) {
		var b, grain, x, x$1, n, x$2, x$3, numProcs, wg, p, x$4;
		b = this;
		grain = new $Uint64(0, 0);
		if (b.previousN > 0 && (x = b.previousDuration, (x.$high > 0 || (x.$high === 0 && x.$low > 0)))) {
			grain = $div64($mul64(new $Uint64(0, 100000), new $Uint64(0, b.previousN)), (x$1 = b.previousDuration, new $Uint64(x$1.$high, x$1.$low)), false);
		}
		if ((grain.$high < 0 || (grain.$high === 0 && grain.$low < 1))) {
			grain = new $Uint64(0, 1);
		}
		if ((grain.$high > 0 || (grain.$high === 0 && grain.$low > 10000))) {
			grain = new $Uint64(0, 10000);
		}
		n = new $Uint64(0, 0);
		numProcs = (x$2 = b.parallelism, x$3 = runtime.GOMAXPROCS(0), (((x$2 >>> 16 << 16) * x$3 >> 0) + (x$2 << 16 >>> 16) * x$3) >> 0);
		wg = new sync.WaitGroup.Ptr(); $copy(wg, new sync.WaitGroup.Ptr(), sync.WaitGroup);
		wg.Add(numProcs);
		p = 0;
		while (p < numProcs) {
			$go((function() {
				var $deferred = [], $err = null, pb;
				/* */ try { $deferFrames.push($deferred);
				$deferred.push([$methodVal(wg, "Done"), []]);
				pb = new PB.Ptr(new ($ptrType($Uint64))(function() { return n; }, function($v) { n = $v; }), grain, new $Uint64(0, 0), new $Uint64(0, b.N));
				body(pb);
				/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
			}), []);
			p = p + (1) >> 0;
		}
		wg.Wait();
		if ((x$4 = new $Uint64(0, b.N), (n.$high < x$4.$high || (n.$high === x$4.$high && n.$low <= x$4.$low))) && !b.common.Failed()) {
			b.common.Fatal(new ($sliceType($emptyInterface))([new $String("RunParallel: body exited without pb.Next() == false")]));
		}
	};
	B.prototype.RunParallel = function(body) { return this.$val.RunParallel(body); };
	B.Ptr.prototype.SetParallelism = function(p) {
		var b;
		b = this;
		if (p >= 1) {
			b.parallelism = p;
		}
	};
	B.prototype.SetParallelism = function(p) { return this.$val.SetParallelism(p); };
	decorate = function(s) {
		var _tuple, file, line, ok, index, buf, lines, l, x, _ref, _i, i, line$1;
		_tuple = runtime.Caller(3); file = _tuple[1]; line = _tuple[2]; ok = _tuple[3];
		if (ok) {
			index = strings.LastIndex(file, "/");
			if (index >= 0) {
				file = file.substring((index + 1 >> 0));
			} else {
				index = strings.LastIndex(file, "\\");
				if (index >= 0) {
					file = file.substring((index + 1 >> 0));
				}
			}
		} else {
			file = "???";
			line = 1;
		}
		buf = new bytes.Buffer.Ptr();
		buf.WriteByte(9);
		fmt.Fprintf(buf, "%s:%d: ", new ($sliceType($emptyInterface))([new $String(file), new $Int(line)]));
		lines = strings.Split(s, "\n");
		l = lines.$length;
		if (l > 1 && (x = l - 1 >> 0, ((x < 0 || x >= lines.$length) ? $throwRuntimeError("index out of range") : lines.$array[lines.$offset + x])) === "") {
			lines = $subslice(lines, 0, (l - 1 >> 0));
		}
		_ref = lines;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			line$1 = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				buf.WriteString("\n\t\t");
			}
			buf.WriteString(line$1);
			_i++;
		}
		buf.WriteByte(10);
		return buf.String();
	};
	common.Ptr.prototype.Fail = function() {
		var $deferred = [], $err = null, c;
		/* */ try { $deferFrames.push($deferred);
		c = this;
		c.mu.Lock();
		$deferred.push([$methodVal(c.mu, "Unlock"), []]);
		c.failed = true;
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	common.prototype.Fail = function() { return this.$val.Fail(); };
	common.Ptr.prototype.Failed = function() {
		var $deferred = [], $err = null, c;
		/* */ try { $deferFrames.push($deferred);
		c = this;
		c.mu.RLock();
		$deferred.push([$methodVal(c.mu, "RUnlock"), []]);
		return c.failed;
		/* */ } catch(err) { $err = err; return false; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	common.prototype.Failed = function() { return this.$val.Failed(); };
	common.Ptr.prototype.FailNow = function() {
		var c;
		c = this;
		c.Fail();
		c.finished = true;
		runtime.Goexit();
	};
	common.prototype.FailNow = function() { return this.$val.FailNow(); };
	common.Ptr.prototype.log = function(s) {
		var $deferred = [], $err = null, c;
		/* */ try { $deferFrames.push($deferred);
		c = this;
		c.mu.Lock();
		$deferred.push([$methodVal(c.mu, "Unlock"), []]);
		c.output = $appendSlice(c.output, new ($sliceType($Uint8))($stringToBytes(decorate(s))));
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	common.prototype.log = function(s) { return this.$val.log(s); };
	common.Ptr.prototype.Log = function(args) {
		var c;
		c = this;
		c.log(fmt.Sprintln(args));
	};
	common.prototype.Log = function(args) { return this.$val.Log(args); };
	common.Ptr.prototype.Logf = function(format, args) {
		var c;
		c = this;
		c.log(fmt.Sprintf(format, args));
	};
	common.prototype.Logf = function(format, args) { return this.$val.Logf(format, args); };
	common.Ptr.prototype.Error = function(args) {
		var c;
		c = this;
		c.log(fmt.Sprintln(args));
		c.Fail();
	};
	common.prototype.Error = function(args) { return this.$val.Error(args); };
	common.Ptr.prototype.Errorf = function(format, args) {
		var c;
		c = this;
		c.log(fmt.Sprintf(format, args));
		c.Fail();
	};
	common.prototype.Errorf = function(format, args) { return this.$val.Errorf(format, args); };
	common.Ptr.prototype.Fatal = function(args) {
		var c;
		c = this;
		c.log(fmt.Sprintln(args));
		c.FailNow();
	};
	common.prototype.Fatal = function(args) { return this.$val.Fatal(args); };
	common.Ptr.prototype.Fatalf = function(format, args) {
		var c;
		c = this;
		c.log(fmt.Sprintf(format, args));
		c.FailNow();
	};
	common.prototype.Fatalf = function(format, args) { return this.$val.Fatalf(format, args); };
	common.Ptr.prototype.Skip = function(args) {
		var c;
		c = this;
		c.log(fmt.Sprintln(args));
		c.SkipNow();
	};
	common.prototype.Skip = function(args) { return this.$val.Skip(args); };
	common.Ptr.prototype.Skipf = function(format, args) {
		var c;
		c = this;
		c.log(fmt.Sprintf(format, args));
		c.SkipNow();
	};
	common.prototype.Skipf = function(format, args) { return this.$val.Skipf(format, args); };
	common.Ptr.prototype.SkipNow = function() {
		var c;
		c = this;
		c.skip();
		c.finished = true;
		runtime.Goexit();
	};
	common.prototype.SkipNow = function() { return this.$val.SkipNow(); };
	common.Ptr.prototype.skip = function() {
		var $deferred = [], $err = null, c;
		/* */ try { $deferFrames.push($deferred);
		c = this;
		c.mu.Lock();
		$deferred.push([$methodVal(c.mu, "Unlock"), []]);
		c.skipped = true;
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	common.prototype.skip = function() { return this.$val.skip(); };
	common.Ptr.prototype.Skipped = function() {
		var $deferred = [], $err = null, c;
		/* */ try { $deferFrames.push($deferred);
		c = this;
		c.mu.RLock();
		$deferred.push([$methodVal(c.mu, "RUnlock"), []]);
		return c.skipped;
		/* */ } catch(err) { $err = err; return false; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	common.prototype.Skipped = function() { return this.$val.Skipped(); };
	T.Ptr.prototype.Parallel = function($b) {
		var $this = this, $args = arguments, $r, $s = 0, t, _r;
		/* */ if(!$b) { $nonblockingCall(); }; var $blocking_Parallel = function() { s: while (true) { switch ($s) { case 0:
		t = $this;
		$r = $send(t.common.signal, ($ptrType(T)).nil, true); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		_r = $recv(t.startParallel, true); /* */ $s = 2; case 2: if (_r && _r.$blocking) { _r = _r(); }
		_r[0];
		$copy(t.common.start, time.Now(), time.Time);
		/* */ case -1: } return; } }; $blocking_Parallel.$blocking = true; return $blocking_Parallel;
	};
	T.prototype.Parallel = function($b) { return this.$val.Parallel($b); };
	T.Ptr.prototype.report = function() {
		var t, tstr, format;
		t = this;
		tstr = fmt.Sprintf("(%.2f seconds)", new ($sliceType($emptyInterface))([new $Float64(t.common.duration.Seconds())]));
		format = "--- %s: %s %s\n%s";
		if (t.common.Failed()) {
			fmt.Printf(format, new ($sliceType($emptyInterface))([new $String("FAIL"), new $String(t.name), new $String(tstr), t.common.output]));
		} else if (chatty.$get()) {
			if (t.common.Skipped()) {
				fmt.Printf(format, new ($sliceType($emptyInterface))([new $String("SKIP"), new $String(t.name), new $String(tstr), t.common.output]));
			} else {
				fmt.Printf(format, new ($sliceType($emptyInterface))([new $String("PASS"), new $String(t.name), new $String(tstr), t.common.output]));
			}
		}
	};
	T.prototype.report = function() { return this.$val.report(); };
	$pkg.$init = function() {
		/* */ var $r, $s = 0; var $f = function() { while (true) { switch ($s) { case 0:
		InternalBenchmark.init([["Name", "Name", "", $String, ""], ["F", "F", "", ($funcType([($ptrType(B))], [], false)), ""]]);
		($ptrType(B)).methods = [["Error", "Error", "", $funcType([($sliceType($emptyInterface))], [], true), 0], ["Errorf", "Errorf", "", $funcType([$String, ($sliceType($emptyInterface))], [], true), 0], ["Fail", "Fail", "", $funcType([], [], false), 0], ["FailNow", "FailNow", "", $funcType([], [], false), 0], ["Failed", "Failed", "", $funcType([], [$Bool], false), 0], ["Fatal", "Fatal", "", $funcType([($sliceType($emptyInterface))], [], true), 0], ["Fatalf", "Fatalf", "", $funcType([$String, ($sliceType($emptyInterface))], [], true), 0], ["Log", "Log", "", $funcType([($sliceType($emptyInterface))], [], true), 0], ["Logf", "Logf", "", $funcType([$String, ($sliceType($emptyInterface))], [], true), 0], ["ReportAllocs", "ReportAllocs", "", $funcType([], [], false), -1], ["ResetTimer", "ResetTimer", "", $funcType([], [], false), -1], ["RunParallel", "RunParallel", "", $funcType([($funcType([($ptrType(PB))], [], false))], [], false), -1], ["SetBytes", "SetBytes", "", $funcType([$Int64], [], false), -1], ["SetParallelism", "SetParallelism", "", $funcType([$Int], [], false), -1], ["Skip", "Skip", "", $funcType([($sliceType($emptyInterface))], [], true), 0], ["SkipNow", "SkipNow", "", $funcType([], [], false), 0], ["Skipf", "Skipf", "", $funcType([$String, ($sliceType($emptyInterface))], [], true), 0], ["Skipped", "Skipped", "", $funcType([], [$Bool], false), 0], ["StartTimer", "StartTimer", "", $funcType([], [], false), -1], ["StopTimer", "StopTimer", "", $funcType([], [], false), -1], ["launch", "launch", "testing", $funcType([], [], false), -1], ["log", "log", "testing", $funcType([$String], [], false), 0], ["nsPerOp", "nsPerOp", "testing", $funcType([], [$Int64], false), -1], ["private$", "private", "testing", $funcType([], [], false), 0], ["run", "run", "testing", $funcType([], [BenchmarkResult], false), -1], ["runN", "runN", "testing", $funcType([$Int], [], false), -1], ["skip", "skip", "testing", $funcType([], [], false), 0], ["trimOutput", "trimOutput", "testing", $funcType([], [], false), -1]];
		B.init([["common", "", "testing", common, ""], ["N", "N", "", $Int, ""], ["previousN", "previousN", "testing", $Int, ""], ["previousDuration", "previousDuration", "testing", time.Duration, ""], ["benchmark", "benchmark", "testing", InternalBenchmark, ""], ["bytes", "bytes", "testing", $Int64, ""], ["timerOn", "timerOn", "testing", $Bool, ""], ["showAllocResult", "showAllocResult", "testing", $Bool, ""], ["result", "result", "testing", BenchmarkResult, ""], ["parallelism", "parallelism", "testing", $Int, ""], ["startAllocs", "startAllocs", "testing", $Uint64, ""], ["startBytes", "startBytes", "testing", $Uint64, ""], ["netAllocs", "netAllocs", "testing", $Uint64, ""], ["netBytes", "netBytes", "testing", $Uint64, ""]]);
		BenchmarkResult.methods = [["AllocedBytesPerOp", "AllocedBytesPerOp", "", $funcType([], [$Int64], false), -1], ["AllocsPerOp", "AllocsPerOp", "", $funcType([], [$Int64], false), -1], ["MemString", "MemString", "", $funcType([], [$String], false), -1], ["NsPerOp", "NsPerOp", "", $funcType([], [$Int64], false), -1], ["String", "String", "", $funcType([], [$String], false), -1], ["mbPerSec", "mbPerSec", "testing", $funcType([], [$Float64], false), -1]];
		($ptrType(BenchmarkResult)).methods = [["AllocedBytesPerOp", "AllocedBytesPerOp", "", $funcType([], [$Int64], false), -1], ["AllocsPerOp", "AllocsPerOp", "", $funcType([], [$Int64], false), -1], ["MemString", "MemString", "", $funcType([], [$String], false), -1], ["NsPerOp", "NsPerOp", "", $funcType([], [$Int64], false), -1], ["String", "String", "", $funcType([], [$String], false), -1], ["mbPerSec", "mbPerSec", "testing", $funcType([], [$Float64], false), -1]];
		BenchmarkResult.init([["N", "N", "", $Int, ""], ["T", "T", "", time.Duration, ""], ["Bytes", "Bytes", "", $Int64, ""], ["MemAllocs", "MemAllocs", "", $Uint64, ""], ["MemBytes", "MemBytes", "", $Uint64, ""]]);
		($ptrType(PB)).methods = [["Next", "Next", "", $funcType([], [$Bool], false), -1]];
		PB.init([["globalN", "globalN", "testing", ($ptrType($Uint64)), ""], ["grain", "grain", "testing", $Uint64, ""], ["cache", "cache", "testing", $Uint64, ""], ["bN", "bN", "testing", $Uint64, ""]]);
		InternalExample.init([["Name", "Name", "", $String, ""], ["F", "F", "", ($funcType([], [], false)), ""], ["Output", "Output", "", $String, ""]]);
		($ptrType(common)).methods = [["Error", "Error", "", $funcType([($sliceType($emptyInterface))], [], true), -1], ["Errorf", "Errorf", "", $funcType([$String, ($sliceType($emptyInterface))], [], true), -1], ["Fail", "Fail", "", $funcType([], [], false), -1], ["FailNow", "FailNow", "", $funcType([], [], false), -1], ["Failed", "Failed", "", $funcType([], [$Bool], false), -1], ["Fatal", "Fatal", "", $funcType([($sliceType($emptyInterface))], [], true), -1], ["Fatalf", "Fatalf", "", $funcType([$String, ($sliceType($emptyInterface))], [], true), -1], ["Log", "Log", "", $funcType([($sliceType($emptyInterface))], [], true), -1], ["Logf", "Logf", "", $funcType([$String, ($sliceType($emptyInterface))], [], true), -1], ["Skip", "Skip", "", $funcType([($sliceType($emptyInterface))], [], true), -1], ["SkipNow", "SkipNow", "", $funcType([], [], false), -1], ["Skipf", "Skipf", "", $funcType([$String, ($sliceType($emptyInterface))], [], true), -1], ["Skipped", "Skipped", "", $funcType([], [$Bool], false), -1], ["log", "log", "testing", $funcType([$String], [], false), -1], ["private$", "private", "testing", $funcType([], [], false), -1], ["skip", "skip", "testing", $funcType([], [], false), -1]];
		common.init([["mu", "mu", "testing", sync.RWMutex, ""], ["output", "output", "testing", ($sliceType($Uint8)), ""], ["failed", "failed", "testing", $Bool, ""], ["skipped", "skipped", "testing", $Bool, ""], ["finished", "finished", "testing", $Bool, ""], ["start", "start", "testing", time.Time, ""], ["duration", "duration", "testing", time.Duration, ""], ["self", "self", "testing", $emptyInterface, ""], ["signal", "signal", "testing", ($chanType($emptyInterface, false, false)), ""]]);
		($ptrType(T)).methods = [["Error", "Error", "", $funcType([($sliceType($emptyInterface))], [], true), 0], ["Errorf", "Errorf", "", $funcType([$String, ($sliceType($emptyInterface))], [], true), 0], ["Fail", "Fail", "", $funcType([], [], false), 0], ["FailNow", "FailNow", "", $funcType([], [], false), 0], ["Failed", "Failed", "", $funcType([], [$Bool], false), 0], ["Fatal", "Fatal", "", $funcType([($sliceType($emptyInterface))], [], true), 0], ["Fatalf", "Fatalf", "", $funcType([$String, ($sliceType($emptyInterface))], [], true), 0], ["Log", "Log", "", $funcType([($sliceType($emptyInterface))], [], true), 0], ["Logf", "Logf", "", $funcType([$String, ($sliceType($emptyInterface))], [], true), 0], ["Parallel", "Parallel", "", $funcType([], [], false), -1], ["Skip", "Skip", "", $funcType([($sliceType($emptyInterface))], [], true), 0], ["SkipNow", "SkipNow", "", $funcType([], [], false), 0], ["Skipf", "Skipf", "", $funcType([$String, ($sliceType($emptyInterface))], [], true), 0], ["Skipped", "Skipped", "", $funcType([], [$Bool], false), 0], ["log", "log", "testing", $funcType([$String], [], false), 0], ["private$", "private", "testing", $funcType([], [], false), 0], ["report", "report", "testing", $funcType([], [], false), -1], ["skip", "skip", "testing", $funcType([], [], false), 0]];
		T.init([["common", "", "testing", common, ""], ["name", "name", "testing", $String, ""], ["startParallel", "startParallel", "testing", ($chanType($Bool, false, false)), ""]]);
		InternalTest.init([["Name", "Name", "", $String, ""], ["F", "F", "", ($funcType([($ptrType(T))], [], false)), ""]]);
		memStats = new runtime.MemStats.Ptr();
		matchBenchmarks = flag.String("test.bench", "", "regular expression to select benchmarks to run");
		benchTime = flag.Duration("test.benchtime", new time.Duration(0, 1000000000), "approximate run time for each benchmark");
		benchmarkMemory = flag.Bool("test.benchmem", false, "print memory allocations for benchmarks");
		short$1 = flag.Bool("test.short", false, "run smaller test suite to save time");
		outputDir = flag.String("test.outputdir", "", "directory in which to write profiles");
		chatty = flag.Bool("test.v", false, "verbose: print additional output");
		coverProfile = flag.String("test.coverprofile", "", "write a coverage profile to the named file after execution");
		match = flag.String("test.run", "", "regular expression to select tests and examples to run");
		memProfile = flag.String("test.memprofile", "", "write a memory profile to the named file after execution");
		memProfileRate = flag.Int("test.memprofilerate", 0, "if >=0, sets runtime.MemProfileRate");
		cpuProfile = flag.String("test.cpuprofile", "", "write a cpu profile to the named file during execution");
		blockProfile = flag.String("test.blockprofile", "", "write a goroutine blocking profile to the named file after execution");
		blockProfileRate = flag.Int("test.blockprofilerate", 1, "if >= 0, calls runtime.SetBlockProfileRate()");
		timeout = flag.Duration("test.timeout", new time.Duration(0, 0), "if positive, sets an aggregate time limit for all tests");
		cpuListStr = flag.String("test.cpu", "", "comma-separated list of number of CPUs to use for each test");
		parallel = flag.Int("test.parallel", runtime.GOMAXPROCS(0), "maximum test parallelism");
		$r = init(true); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		/* */ } return; } }; $f.$blocking = true; return $f;
	};
	return $pkg;
})();
$packages["encoding/base64"] = (function() {
	var $pkg = {}, testing = $packages["testing"], bytes = $packages["bytes"], io = $packages["io"], strconv = $packages["strconv"], strings = $packages["strings"], Encoding, encoder, CorruptInputError, removeNewlinesMapper, NewEncoding, NewEncoder;
	Encoding = $pkg.Encoding = $newType(0, "Struct", "base64.Encoding", "Encoding", "encoding/base64", function(encode_, decodeMap_) {
		this.$val = this;
		this.encode = encode_ !== undefined ? encode_ : "";
		this.decodeMap = decodeMap_ !== undefined ? decodeMap_ : ($arrayType($Uint8, 256)).zero();
	});
	encoder = $pkg.encoder = $newType(0, "Struct", "base64.encoder", "encoder", "encoding/base64", function(err_, enc_, w_, buf_, nbuf_, out_) {
		this.$val = this;
		this.err = err_ !== undefined ? err_ : $ifaceNil;
		this.enc = enc_ !== undefined ? enc_ : ($ptrType(Encoding)).nil;
		this.w = w_ !== undefined ? w_ : $ifaceNil;
		this.buf = buf_ !== undefined ? buf_ : ($arrayType($Uint8, 3)).zero();
		this.nbuf = nbuf_ !== undefined ? nbuf_ : 0;
		this.out = out_ !== undefined ? out_ : ($arrayType($Uint8, 1024)).zero();
	});
	CorruptInputError = $pkg.CorruptInputError = $newType(8, "Int64", "base64.CorruptInputError", "CorruptInputError", "encoding/base64", null);
	NewEncoding = $pkg.NewEncoding = function(encoder$1) {
		var e, i, x, i$1, x$1, x$2;
		e = new Encoding.Ptr();
		e.encode = encoder$1;
		i = 0;
		while (i < 256) {
			(x = e.decodeMap, (i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i] = 255);
			i = i + (1) >> 0;
		}
		i$1 = 0;
		while (i$1 < encoder$1.length) {
			(x$1 = e.decodeMap, x$2 = encoder$1.charCodeAt(i$1), (x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2] = (i$1 << 24 >>> 24));
			i$1 = i$1 + (1) >> 0;
		}
		return e;
	};
	Encoding.Ptr.prototype.Encode = function(dst, src) {
		var enc, _ref, _lhs, _index, _lhs$1, _index$1, _lhs$2, _index$2, _lhs$3, _index$3, _lhs$4, _index$4, _lhs$5, _index$5, _lhs$6, _index$6, _lhs$7, _index$7, _lhs$8, _index$8, _lhs$9, _index$9, _lhs$10, _index$10, _lhs$11, _index$11, j;
		enc = this;
		if (src.$length === 0) {
			return;
		}
		while (src.$length > 0) {
			(0 < 0 || 0 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = 0;
			(1 < 0 || 1 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 1] = 0;
			(2 < 0 || 2 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 2] = 0;
			(3 < 0 || 3 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 3] = 0;
			_ref = src.$length;
			if (_ref === 2) {
				_lhs = dst; _index = 2; (_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index] = (((_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index]) | (((((((1 < 0 || 1 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) << 2 << 24 >>> 24)) & 63) >>> 0))) >>> 0;
				_lhs$1 = dst; _index$1 = 1; (_index$1 < 0 || _index$1 >= _lhs$1.$length) ? $throwRuntimeError("index out of range") : _lhs$1.$array[_lhs$1.$offset + _index$1] = (((_index$1 < 0 || _index$1 >= _lhs$1.$length) ? $throwRuntimeError("index out of range") : _lhs$1.$array[_lhs$1.$offset + _index$1]) | ((((1 < 0 || 1 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) >>> 4 << 24 >>> 24))) >>> 0;
				_lhs$2 = dst; _index$2 = 1; (_index$2 < 0 || _index$2 >= _lhs$2.$length) ? $throwRuntimeError("index out of range") : _lhs$2.$array[_lhs$2.$offset + _index$2] = (((_index$2 < 0 || _index$2 >= _lhs$2.$length) ? $throwRuntimeError("index out of range") : _lhs$2.$array[_lhs$2.$offset + _index$2]) | (((((((0 < 0 || 0 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) << 4 << 24 >>> 24)) & 63) >>> 0))) >>> 0;
				_lhs$3 = dst; _index$3 = 0; (_index$3 < 0 || _index$3 >= _lhs$3.$length) ? $throwRuntimeError("index out of range") : _lhs$3.$array[_lhs$3.$offset + _index$3] = (((_index$3 < 0 || _index$3 >= _lhs$3.$length) ? $throwRuntimeError("index out of range") : _lhs$3.$array[_lhs$3.$offset + _index$3]) | ((((0 < 0 || 0 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) >>> 2 << 24 >>> 24))) >>> 0;
			} else if (_ref === 1) {
				_lhs$4 = dst; _index$4 = 1; (_index$4 < 0 || _index$4 >= _lhs$4.$length) ? $throwRuntimeError("index out of range") : _lhs$4.$array[_lhs$4.$offset + _index$4] = (((_index$4 < 0 || _index$4 >= _lhs$4.$length) ? $throwRuntimeError("index out of range") : _lhs$4.$array[_lhs$4.$offset + _index$4]) | (((((((0 < 0 || 0 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) << 4 << 24 >>> 24)) & 63) >>> 0))) >>> 0;
				_lhs$5 = dst; _index$5 = 0; (_index$5 < 0 || _index$5 >= _lhs$5.$length) ? $throwRuntimeError("index out of range") : _lhs$5.$array[_lhs$5.$offset + _index$5] = (((_index$5 < 0 || _index$5 >= _lhs$5.$length) ? $throwRuntimeError("index out of range") : _lhs$5.$array[_lhs$5.$offset + _index$5]) | ((((0 < 0 || 0 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) >>> 2 << 24 >>> 24))) >>> 0;
			} else {
				_lhs$6 = dst; _index$6 = 3; (_index$6 < 0 || _index$6 >= _lhs$6.$length) ? $throwRuntimeError("index out of range") : _lhs$6.$array[_lhs$6.$offset + _index$6] = (((_index$6 < 0 || _index$6 >= _lhs$6.$length) ? $throwRuntimeError("index out of range") : _lhs$6.$array[_lhs$6.$offset + _index$6]) | (((((2 < 0 || 2 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 2]) & 63) >>> 0))) >>> 0;
				_lhs$7 = dst; _index$7 = 2; (_index$7 < 0 || _index$7 >= _lhs$7.$length) ? $throwRuntimeError("index out of range") : _lhs$7.$array[_lhs$7.$offset + _index$7] = (((_index$7 < 0 || _index$7 >= _lhs$7.$length) ? $throwRuntimeError("index out of range") : _lhs$7.$array[_lhs$7.$offset + _index$7]) | ((((2 < 0 || 2 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 2]) >>> 6 << 24 >>> 24))) >>> 0;
				_lhs$8 = dst; _index$8 = 2; (_index$8 < 0 || _index$8 >= _lhs$8.$length) ? $throwRuntimeError("index out of range") : _lhs$8.$array[_lhs$8.$offset + _index$8] = (((_index$8 < 0 || _index$8 >= _lhs$8.$length) ? $throwRuntimeError("index out of range") : _lhs$8.$array[_lhs$8.$offset + _index$8]) | (((((((1 < 0 || 1 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) << 2 << 24 >>> 24)) & 63) >>> 0))) >>> 0;
				_lhs$9 = dst; _index$9 = 1; (_index$9 < 0 || _index$9 >= _lhs$9.$length) ? $throwRuntimeError("index out of range") : _lhs$9.$array[_lhs$9.$offset + _index$9] = (((_index$9 < 0 || _index$9 >= _lhs$9.$length) ? $throwRuntimeError("index out of range") : _lhs$9.$array[_lhs$9.$offset + _index$9]) | ((((1 < 0 || 1 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) >>> 4 << 24 >>> 24))) >>> 0;
				_lhs$10 = dst; _index$10 = 1; (_index$10 < 0 || _index$10 >= _lhs$10.$length) ? $throwRuntimeError("index out of range") : _lhs$10.$array[_lhs$10.$offset + _index$10] = (((_index$10 < 0 || _index$10 >= _lhs$10.$length) ? $throwRuntimeError("index out of range") : _lhs$10.$array[_lhs$10.$offset + _index$10]) | (((((((0 < 0 || 0 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) << 4 << 24 >>> 24)) & 63) >>> 0))) >>> 0;
				_lhs$11 = dst; _index$11 = 0; (_index$11 < 0 || _index$11 >= _lhs$11.$length) ? $throwRuntimeError("index out of range") : _lhs$11.$array[_lhs$11.$offset + _index$11] = (((_index$11 < 0 || _index$11 >= _lhs$11.$length) ? $throwRuntimeError("index out of range") : _lhs$11.$array[_lhs$11.$offset + _index$11]) | ((((0 < 0 || 0 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) >>> 2 << 24 >>> 24))) >>> 0;
			}
			j = 0;
			while (j < 4) {
				(j < 0 || j >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + j] = enc.encode.charCodeAt(((j < 0 || j >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + j]));
				j = j + (1) >> 0;
			}
			if (src.$length < 3) {
				(3 < 0 || 3 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 3] = 61;
				if (src.$length < 2) {
					(2 < 0 || 2 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 2] = 61;
				}
				break;
			}
			src = $subslice(src, 3);
			dst = $subslice(dst, 4);
		}
	};
	Encoding.prototype.Encode = function(dst, src) { return this.$val.Encode(dst, src); };
	Encoding.Ptr.prototype.EncodeToString = function(src) {
		var enc, buf;
		enc = this;
		buf = ($sliceType($Uint8)).make(enc.EncodedLen(src.$length));
		enc.Encode(buf, src);
		return $bytesToString(buf);
	};
	Encoding.prototype.EncodeToString = function(src) { return this.$val.EncodeToString(src); };
	encoder.Ptr.prototype.Write = function(p) {
		var n = 0, err = $ifaceNil, e, _tmp, _tmp$1, i, x, x$1, _tuple, _tmp$2, _tmp$3, nn, _r, _tuple$1, x$2, _q, _tmp$4, _tmp$5, i$1, x$3;
		e = this;
		if (!($interfaceIsEqual(e.err, $ifaceNil))) {
			_tmp = 0; _tmp$1 = e.err; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		if (e.nbuf > 0) {
			i = 0;
			i = 0;
			while (i < p.$length && e.nbuf < 3) {
				(x = e.buf, x$1 = e.nbuf, (x$1 < 0 || x$1 >= x.length) ? $throwRuntimeError("index out of range") : x[x$1] = ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]));
				e.nbuf = e.nbuf + (1) >> 0;
				i = i + (1) >> 0;
			}
			n = n + (i) >> 0;
			p = $subslice(p, i);
			if (e.nbuf < 3) {
				return [n, err];
			}
			e.enc.Encode($subslice(new ($sliceType($Uint8))(e.out), 0), $subslice(new ($sliceType($Uint8))(e.buf), 0));
			_tuple = e.w.Write($subslice(new ($sliceType($Uint8))(e.out), 0, 4)); e.err = _tuple[1];
			if (!($interfaceIsEqual(e.err, $ifaceNil))) {
				_tmp$2 = n; _tmp$3 = e.err; n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
			e.nbuf = 0;
		}
		while (p.$length >= 3) {
			nn = 768;
			if (nn > p.$length) {
				nn = p.$length;
				nn = nn - ((_r = nn % 3, _r === _r ? _r : $throwRuntimeError("integer divide by zero"))) >> 0;
			}
			e.enc.Encode($subslice(new ($sliceType($Uint8))(e.out), 0), $subslice(p, 0, nn));
			_tuple$1 = e.w.Write($subslice(new ($sliceType($Uint8))(e.out), 0, (x$2 = (_q = nn / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), (((x$2 >>> 16 << 16) * 4 >> 0) + (x$2 << 16 >>> 16) * 4) >> 0))); e.err = _tuple$1[1];
			if (!($interfaceIsEqual(e.err, $ifaceNil))) {
				_tmp$4 = n; _tmp$5 = e.err; n = _tmp$4; err = _tmp$5;
				return [n, err];
			}
			n = n + (nn) >> 0;
			p = $subslice(p, nn);
		}
		i$1 = 0;
		while (i$1 < p.$length) {
			(x$3 = e.buf, (i$1 < 0 || i$1 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[i$1] = ((i$1 < 0 || i$1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i$1]));
			i$1 = i$1 + (1) >> 0;
		}
		e.nbuf = p.$length;
		n = n + (p.$length) >> 0;
		return [n, err];
	};
	encoder.prototype.Write = function(p) { return this.$val.Write(p); };
	encoder.Ptr.prototype.Close = function() {
		var e, _tuple;
		e = this;
		if ($interfaceIsEqual(e.err, $ifaceNil) && e.nbuf > 0) {
			e.enc.Encode($subslice(new ($sliceType($Uint8))(e.out), 0), $subslice(new ($sliceType($Uint8))(e.buf), 0, e.nbuf));
			e.nbuf = 0;
			_tuple = e.w.Write($subslice(new ($sliceType($Uint8))(e.out), 0, 4)); e.err = _tuple[1];
		}
		return e.err;
	};
	encoder.prototype.Close = function() { return this.$val.Close(); };
	NewEncoder = $pkg.NewEncoder = function(enc, w) {
		return new encoder.Ptr($ifaceNil, enc, w, ($arrayType($Uint8, 3)).zero(), 0, ($arrayType($Uint8, 1024)).zero());
	};
	Encoding.Ptr.prototype.EncodedLen = function(n) {
		var enc, x, _q;
		enc = this;
		return (x = (_q = ((n + 2 >> 0)) / 3, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), (((x >>> 16 << 16) * 4 >> 0) + (x << 16 >>> 16) * 4) >> 0);
	};
	Encoding.prototype.EncodedLen = function(n) { return this.$val.EncodedLen(n); };
	CorruptInputError.prototype.Error = function() {
		var e;
		e = this;
		return "illegal base64 data at input byte " + strconv.FormatInt(new $Int64(e.$high, e.$low), 10);
	};
	$ptrType(CorruptInputError).prototype.Error = function() { return this.$get().Error(); };
	Encoding.Ptr.prototype.decode = function(dst, src) {
		var n = 0, end = false, err = $ifaceNil, enc, olen, dbuf, dlen, _ref, _i, j, _tmp, _tmp$1, _tmp$2, in$1, _ref$1, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tmp$10, _tmp$11, _tmp$12, _tmp$13, x, _tmp$14, _tmp$15, _tmp$16, _ref$2, _tmp$17, _tmp$18, _tmp$19;
		enc = this;
		olen = src.$length;
		while (src.$length > 0 && !end) {
			dbuf = ($arrayType($Uint8, 4)).zero(); $copy(dbuf, ($arrayType($Uint8, 4)).zero(), ($arrayType($Uint8, 4)));
			dlen = 4;
			_ref = dbuf;
			_i = 0;
			while (_i < 4) {
				j = _i;
				if (src.$length === 0) {
					_tmp = n; _tmp$1 = false; _tmp$2 = new CorruptInputError(0, ((olen - src.$length >> 0) - j >> 0)); n = _tmp; end = _tmp$1; err = _tmp$2;
					return [n, end, err];
				}
				in$1 = ((0 < 0 || 0 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]);
				src = $subslice(src, 1);
				if (in$1 === 61) {
					_ref$1 = j;
					if (_ref$1 === 0 || _ref$1 === 1) {
						_tmp$3 = n; _tmp$4 = false; _tmp$5 = new CorruptInputError(0, ((olen - src.$length >> 0) - 1 >> 0)); n = _tmp$3; end = _tmp$4; err = _tmp$5;
						return [n, end, err];
					} else if (_ref$1 === 2) {
						if (src.$length === 0) {
							_tmp$6 = n; _tmp$7 = false; _tmp$8 = new CorruptInputError(0, olen); n = _tmp$6; end = _tmp$7; err = _tmp$8;
							return [n, end, err];
						}
						if (!((((0 < 0 || 0 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) === 61))) {
							_tmp$9 = n; _tmp$10 = false; _tmp$11 = new CorruptInputError(0, ((olen - src.$length >> 0) - 1 >> 0)); n = _tmp$9; end = _tmp$10; err = _tmp$11;
							return [n, end, err];
						}
						src = $subslice(src, 1);
					}
					if (src.$length > 0) {
						err = new CorruptInputError(0, (olen - src.$length >> 0));
					}
					_tmp$12 = j; _tmp$13 = true; dlen = _tmp$12; end = _tmp$13;
					break;
				}
				(j < 0 || j >= dbuf.length) ? $throwRuntimeError("index out of range") : dbuf[j] = (x = enc.decodeMap, ((in$1 < 0 || in$1 >= x.length) ? $throwRuntimeError("index out of range") : x[in$1]));
				if (((j < 0 || j >= dbuf.length) ? $throwRuntimeError("index out of range") : dbuf[j]) === 255) {
					_tmp$14 = n; _tmp$15 = false; _tmp$16 = new CorruptInputError(0, ((olen - src.$length >> 0) - 1 >> 0)); n = _tmp$14; end = _tmp$15; err = _tmp$16;
					return [n, end, err];
				}
				_i++;
			}
			_ref$2 = dlen;
			if (_ref$2 === 4) {
				(2 < 0 || 2 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 2] = ((dbuf[2] << 6 << 24 >>> 24) | dbuf[3]) >>> 0;
				(1 < 0 || 1 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 1] = ((dbuf[1] << 4 << 24 >>> 24) | (dbuf[2] >>> 2 << 24 >>> 24)) >>> 0;
				(0 < 0 || 0 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = ((dbuf[0] << 2 << 24 >>> 24) | (dbuf[1] >>> 4 << 24 >>> 24)) >>> 0;
			} else if (_ref$2 === 3) {
				(1 < 0 || 1 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 1] = ((dbuf[1] << 4 << 24 >>> 24) | (dbuf[2] >>> 2 << 24 >>> 24)) >>> 0;
				(0 < 0 || 0 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = ((dbuf[0] << 2 << 24 >>> 24) | (dbuf[1] >>> 4 << 24 >>> 24)) >>> 0;
			} else if (_ref$2 === 2) {
				(0 < 0 || 0 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = ((dbuf[0] << 2 << 24 >>> 24) | (dbuf[1] >>> 4 << 24 >>> 24)) >>> 0;
			}
			dst = $subslice(dst, 3);
			n = n + ((dlen - 1 >> 0)) >> 0;
		}
		_tmp$17 = n; _tmp$18 = end; _tmp$19 = err; n = _tmp$17; end = _tmp$18; err = _tmp$19;
		return [n, end, err];
	};
	Encoding.prototype.decode = function(dst, src) { return this.$val.decode(dst, src); };
	Encoding.Ptr.prototype.Decode = function(dst, src) {
		var n = 0, err = $ifaceNil, enc, _tuple;
		enc = this;
		src = bytes.Map(removeNewlinesMapper, src);
		_tuple = enc.decode(dst, src); n = _tuple[0]; err = _tuple[2];
		return [n, err];
	};
	Encoding.prototype.Decode = function(dst, src) { return this.$val.Decode(dst, src); };
	Encoding.Ptr.prototype.DecodeString = function(s) {
		var enc, dbuf, _tuple, n, err;
		enc = this;
		s = strings.Map(removeNewlinesMapper, s);
		dbuf = ($sliceType($Uint8)).make(enc.DecodedLen(s.length));
		_tuple = enc.Decode(dbuf, new ($sliceType($Uint8))($stringToBytes(s))); n = _tuple[0]; err = _tuple[1];
		return [$subslice(dbuf, 0, n), err];
	};
	Encoding.prototype.DecodeString = function(s) { return this.$val.DecodeString(s); };
	Encoding.Ptr.prototype.DecodedLen = function(n) {
		var enc, x, _q;
		enc = this;
		return (x = (_q = n / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), (((x >>> 16 << 16) * 3 >> 0) + (x << 16 >>> 16) * 3) >> 0);
	};
	Encoding.prototype.DecodedLen = function(n) { return this.$val.DecodedLen(n); };
	$pkg.$init = function() {
		($ptrType(Encoding)).methods = [["Decode", "Decode", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8))], [$Int, $error], false), -1], ["DecodeString", "DecodeString", "", $funcType([$String], [($sliceType($Uint8)), $error], false), -1], ["DecodedLen", "DecodedLen", "", $funcType([$Int], [$Int], false), -1], ["Encode", "Encode", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8))], [], false), -1], ["EncodeToString", "EncodeToString", "", $funcType([($sliceType($Uint8))], [$String], false), -1], ["EncodedLen", "EncodedLen", "", $funcType([$Int], [$Int], false), -1], ["decode", "decode", "encoding/base64", $funcType([($sliceType($Uint8)), ($sliceType($Uint8))], [$Int, $Bool, $error], false), -1]];
		Encoding.init([["encode", "encode", "encoding/base64", $String, ""], ["decodeMap", "decodeMap", "encoding/base64", ($arrayType($Uint8, 256)), ""]]);
		($ptrType(encoder)).methods = [["Close", "Close", "", $funcType([], [$error], false), -1], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1]];
		encoder.init([["err", "err", "encoding/base64", $error, ""], ["enc", "enc", "encoding/base64", ($ptrType(Encoding)), ""], ["w", "w", "encoding/base64", io.Writer, ""], ["buf", "buf", "encoding/base64", ($arrayType($Uint8, 3)), ""], ["nbuf", "nbuf", "encoding/base64", $Int, ""], ["out", "out", "encoding/base64", ($arrayType($Uint8, 1024)), ""]]);
		CorruptInputError.methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		($ptrType(CorruptInputError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		$pkg.StdEncoding = NewEncoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/");
		$pkg.URLEncoding = NewEncoding("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_");
		removeNewlinesMapper = (function(r) {
			if ((r === 13) || (r === 10)) {
				return -1;
			}
			return r;
		});
	};
	return $pkg;
})();
$packages["unicode/utf16"] = (function() {
	var $pkg = {};
	$pkg.$init = function() {
	};
	return $pkg;
})();
$packages["encoding/json"] = (function() {
	var $pkg = {}, bytes = $packages["bytes"], encoding = $packages["encoding"], base64 = $packages["encoding/base64"], errors = $packages["errors"], fmt = $packages["fmt"], reflect = $packages["reflect"], runtime = $packages["runtime"], strconv = $packages["strconv"], unicode = $packages["unicode"], utf16 = $packages["unicode/utf16"], utf8 = $packages["unicode/utf8"], math = $packages["math"], sort = $packages["sort"], strings = $packages["strings"], sync = $packages["sync"], io = $packages["io"], Number, Marshaler, UnsupportedTypeError, UnsupportedValueError, MarshalerError, encodeState, encoderFunc, floatEncoder, structEncoder, mapEncoder, sliceEncoder, arrayEncoder, ptrEncoder, condAddrEncoder, stringValues, field, byName, byIndex, SyntaxError, scanner, tagOptions, errPhase, numberType, hex, byteSliceType, encoderCache, marshalerType, textMarshalerType, float32Encoder, float64Encoder, fieldCache, Marshal, isEmptyValue, valueEncoder, typeEncoder, newTypeEncoder, invalidValueEncoder, marshalerEncoder, addrMarshalerEncoder, textMarshalerEncoder, addrTextMarshalerEncoder, boolEncoder, intEncoder, uintEncoder, stringEncoder, interfaceEncoder, unsupportedTypeEncoder, newStructEncoder, newMapEncoder, encodeByteSlice, newSliceEncoder, newArrayEncoder, newPtrEncoder, newCondAddrEncoder, isValidTag, fieldByIndex, typeByIndex, fillField, typeFields, dominantField, cachedTypeFields, foldFunc, equalFoldRight, asciiEqualFold, simpleLetterEqualFold, compact, isSpace, stateBeginValueOrEmpty, stateBeginValue, stateBeginStringOrEmpty, stateBeginString, stateEndValue, stateEndTop, stateInString, stateInStringEsc, stateInStringEscU, stateInStringEscU1, stateInStringEscU12, stateInStringEscU123, stateNeg, state1, state0, stateDot, stateDot0, stateE, stateESign, stateE0, stateT, stateTr, stateTru, stateF, stateFa, stateFal, stateFals, stateN, stateNu, stateNul, stateError, quoteChar, parseTag;
	Number = $pkg.Number = $newType(8, "String", "json.Number", "Number", "encoding/json", null);
	Marshaler = $pkg.Marshaler = $newType(8, "Interface", "json.Marshaler", "Marshaler", "encoding/json", null);
	UnsupportedTypeError = $pkg.UnsupportedTypeError = $newType(0, "Struct", "json.UnsupportedTypeError", "UnsupportedTypeError", "encoding/json", function(Type_) {
		this.$val = this;
		this.Type = Type_ !== undefined ? Type_ : $ifaceNil;
	});
	UnsupportedValueError = $pkg.UnsupportedValueError = $newType(0, "Struct", "json.UnsupportedValueError", "UnsupportedValueError", "encoding/json", function(Value_, Str_) {
		this.$val = this;
		this.Value = Value_ !== undefined ? Value_ : new reflect.Value.Ptr();
		this.Str = Str_ !== undefined ? Str_ : "";
	});
	MarshalerError = $pkg.MarshalerError = $newType(0, "Struct", "json.MarshalerError", "MarshalerError", "encoding/json", function(Type_, Err_) {
		this.$val = this;
		this.Type = Type_ !== undefined ? Type_ : $ifaceNil;
		this.Err = Err_ !== undefined ? Err_ : $ifaceNil;
	});
	encodeState = $pkg.encodeState = $newType(0, "Struct", "json.encodeState", "encodeState", "encoding/json", function(Buffer_, scratch_) {
		this.$val = this;
		this.Buffer = Buffer_ !== undefined ? Buffer_ : new bytes.Buffer.Ptr();
		this.scratch = scratch_ !== undefined ? scratch_ : ($arrayType($Uint8, 64)).zero();
	});
	encoderFunc = $pkg.encoderFunc = $newType(4, "Func", "json.encoderFunc", "encoderFunc", "encoding/json", null);
	floatEncoder = $pkg.floatEncoder = $newType(4, "Int", "json.floatEncoder", "floatEncoder", "encoding/json", null);
	structEncoder = $pkg.structEncoder = $newType(0, "Struct", "json.structEncoder", "structEncoder", "encoding/json", function(fields_, fieldEncs_) {
		this.$val = this;
		this.fields = fields_ !== undefined ? fields_ : ($sliceType(field)).nil;
		this.fieldEncs = fieldEncs_ !== undefined ? fieldEncs_ : ($sliceType(encoderFunc)).nil;
	});
	mapEncoder = $pkg.mapEncoder = $newType(0, "Struct", "json.mapEncoder", "mapEncoder", "encoding/json", function(elemEnc_) {
		this.$val = this;
		this.elemEnc = elemEnc_ !== undefined ? elemEnc_ : $throwNilPointerError;
	});
	sliceEncoder = $pkg.sliceEncoder = $newType(0, "Struct", "json.sliceEncoder", "sliceEncoder", "encoding/json", function(arrayEnc_) {
		this.$val = this;
		this.arrayEnc = arrayEnc_ !== undefined ? arrayEnc_ : $throwNilPointerError;
	});
	arrayEncoder = $pkg.arrayEncoder = $newType(0, "Struct", "json.arrayEncoder", "arrayEncoder", "encoding/json", function(elemEnc_) {
		this.$val = this;
		this.elemEnc = elemEnc_ !== undefined ? elemEnc_ : $throwNilPointerError;
	});
	ptrEncoder = $pkg.ptrEncoder = $newType(0, "Struct", "json.ptrEncoder", "ptrEncoder", "encoding/json", function(elemEnc_) {
		this.$val = this;
		this.elemEnc = elemEnc_ !== undefined ? elemEnc_ : $throwNilPointerError;
	});
	condAddrEncoder = $pkg.condAddrEncoder = $newType(0, "Struct", "json.condAddrEncoder", "condAddrEncoder", "encoding/json", function(canAddrEnc_, elseEnc_) {
		this.$val = this;
		this.canAddrEnc = canAddrEnc_ !== undefined ? canAddrEnc_ : $throwNilPointerError;
		this.elseEnc = elseEnc_ !== undefined ? elseEnc_ : $throwNilPointerError;
	});
	stringValues = $pkg.stringValues = $newType(12, "Slice", "json.stringValues", "stringValues", "encoding/json", null);
	field = $pkg.field = $newType(0, "Struct", "json.field", "field", "encoding/json", function(name_, nameBytes_, equalFold_, tag_, index_, typ_, omitEmpty_, quoted_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.nameBytes = nameBytes_ !== undefined ? nameBytes_ : ($sliceType($Uint8)).nil;
		this.equalFold = equalFold_ !== undefined ? equalFold_ : $throwNilPointerError;
		this.tag = tag_ !== undefined ? tag_ : false;
		this.index = index_ !== undefined ? index_ : ($sliceType($Int)).nil;
		this.typ = typ_ !== undefined ? typ_ : $ifaceNil;
		this.omitEmpty = omitEmpty_ !== undefined ? omitEmpty_ : false;
		this.quoted = quoted_ !== undefined ? quoted_ : false;
	});
	byName = $pkg.byName = $newType(12, "Slice", "json.byName", "byName", "encoding/json", null);
	byIndex = $pkg.byIndex = $newType(12, "Slice", "json.byIndex", "byIndex", "encoding/json", null);
	SyntaxError = $pkg.SyntaxError = $newType(0, "Struct", "json.SyntaxError", "SyntaxError", "encoding/json", function(msg_, Offset_) {
		this.$val = this;
		this.msg = msg_ !== undefined ? msg_ : "";
		this.Offset = Offset_ !== undefined ? Offset_ : new $Int64(0, 0);
	});
	scanner = $pkg.scanner = $newType(0, "Struct", "json.scanner", "scanner", "encoding/json", function(step_, endTop_, parseState_, err_, redo_, redoCode_, redoState_, bytes_) {
		this.$val = this;
		this.step = step_ !== undefined ? step_ : $throwNilPointerError;
		this.endTop = endTop_ !== undefined ? endTop_ : false;
		this.parseState = parseState_ !== undefined ? parseState_ : ($sliceType($Int)).nil;
		this.err = err_ !== undefined ? err_ : $ifaceNil;
		this.redo = redo_ !== undefined ? redo_ : false;
		this.redoCode = redoCode_ !== undefined ? redoCode_ : 0;
		this.redoState = redoState_ !== undefined ? redoState_ : $throwNilPointerError;
		this.bytes = bytes_ !== undefined ? bytes_ : new $Int64(0, 0);
	});
	tagOptions = $pkg.tagOptions = $newType(8, "String", "json.tagOptions", "tagOptions", "encoding/json", null);
	Number.prototype.String = function() {
		var n;
		n = this.$val !== undefined ? this.$val : this;
		return n;
	};
	$ptrType(Number).prototype.String = function() { return new Number(this.$get()).String(); };
	Number.prototype.Float64 = function() {
		var n;
		n = this.$val !== undefined ? this.$val : this;
		return strconv.ParseFloat(n, 64);
	};
	$ptrType(Number).prototype.Float64 = function() { return new Number(this.$get()).Float64(); };
	Number.prototype.Int64 = function() {
		var n;
		n = this.$val !== undefined ? this.$val : this;
		return strconv.ParseInt(n, 10, 64);
	};
	$ptrType(Number).prototype.Int64 = function() { return new Number(this.$get()).Int64(); };
	Marshal = $pkg.Marshal = function(v) {
		var e, err;
		e = new encodeState.Ptr(new bytes.Buffer.Ptr(), ($arrayType($Uint8, 64)).zero());
		err = e.marshal(v);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($sliceType($Uint8)).nil, err];
		}
		return [e.Buffer.Bytes(), $ifaceNil];
	};
	UnsupportedTypeError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return "json: unsupported type: " + e.Type.String();
	};
	UnsupportedTypeError.prototype.Error = function() { return this.$val.Error(); };
	UnsupportedValueError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return "json: unsupported value: " + e.Str;
	};
	UnsupportedValueError.prototype.Error = function() { return this.$val.Error(); };
	MarshalerError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return "json: error calling MarshalJSON for type " + e.Type.String() + ": " + e.Err.Error();
	};
	MarshalerError.prototype.Error = function() { return this.$val.Error(); };
	encodeState.Ptr.prototype.marshal = function(v) {
		var err = $ifaceNil, $deferred = [], $err = null, e;
		/* */ try { $deferFrames.push($deferred);
		e = this;
		$deferred.push([(function() {
			var r, _tuple, ok, _tuple$1, s, ok$1;
			r = $recover();
			if (!($interfaceIsEqual(r, $ifaceNil))) {
				_tuple = $assertType(r, runtime.Error, true); ok = _tuple[1];
				if (ok) {
					$panic(r);
				}
				_tuple$1 = $assertType(r, $String, true); s = _tuple$1[0]; ok$1 = _tuple$1[1];
				if (ok$1) {
					$panic(new $String(s));
				}
				err = $assertType(r, $error);
			}
		}), []]);
		e.reflectValue($clone(reflect.ValueOf(v), reflect.Value));
		err = $ifaceNil;
		return err;
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return err; }
	};
	encodeState.prototype.marshal = function(v) { return this.$val.marshal(v); };
	encodeState.Ptr.prototype.error = function(err) {
		var e;
		e = this;
		$panic(err);
	};
	encodeState.prototype.error = function(err) { return this.$val.error(err); };
	isEmptyValue = function(v) {
		var _ref, x, x$1;
		_ref = v.Kind();
		if (_ref === 17 || _ref === 21 || _ref === 23 || _ref === 24) {
			return v.Len() === 0;
		} else if (_ref === 1) {
			return !v.Bool();
		} else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			return (x = v.Int(), (x.$high === 0 && x.$low === 0));
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			return (x$1 = v.Uint(), (x$1.$high === 0 && x$1.$low === 0));
		} else if (_ref === 13 || _ref === 14) {
			return v.Float() === 0;
		} else if (_ref === 20 || _ref === 22) {
			return v.IsNil();
		}
		return false;
	};
	encodeState.Ptr.prototype.reflectValue = function(v) {
		var e;
		e = this;
		valueEncoder($clone(v, reflect.Value))(e, $clone(v, reflect.Value), false);
	};
	encodeState.prototype.reflectValue = function(v) { return this.$val.reflectValue(v); };
	valueEncoder = function(v) {
		if (!v.IsValid()) {
			return invalidValueEncoder;
		}
		return typeEncoder(v.Type());
	};
	typeEncoder = function(t) {
		var _entry, f, wg, _key, _key$1;
		encoderCache.RWMutex.RLock();
		f = (_entry = encoderCache.m[t.$key()], _entry !== undefined ? _entry.v : $throwNilPointerError);
		encoderCache.RWMutex.RUnlock();
		if (!(f === $throwNilPointerError)) {
			return f;
		}
		encoderCache.RWMutex.Lock();
		if (encoderCache.m === false) {
			encoderCache.m = new $Map();
		}
		wg = new sync.WaitGroup.Ptr(); $copy(wg, new sync.WaitGroup.Ptr(), sync.WaitGroup);
		wg.Add(1);
		_key = t; (encoderCache.m || $throwRuntimeError("assignment to entry in nil map"))[_key.$key()] = { k: _key, v: (function(e, v, quoted) {
			wg.Wait();
			f(e, $clone(v, reflect.Value), quoted);
		}) };
		encoderCache.RWMutex.Unlock();
		f = newTypeEncoder(t, true);
		wg.Done();
		encoderCache.RWMutex.Lock();
		_key$1 = t; (encoderCache.m || $throwRuntimeError("assignment to entry in nil map"))[_key$1.$key()] = { k: _key$1, v: f };
		encoderCache.RWMutex.Unlock();
		return f;
	};
	newTypeEncoder = function(t, allowAddr) {
		var _ref;
		if (t.Implements(marshalerType)) {
			return marshalerEncoder;
		}
		if (!((t.Kind() === 22)) && allowAddr) {
			if (reflect.PtrTo(t).Implements(marshalerType)) {
				return newCondAddrEncoder(addrMarshalerEncoder, newTypeEncoder(t, false));
			}
		}
		if (t.Implements(textMarshalerType)) {
			return textMarshalerEncoder;
		}
		if (!((t.Kind() === 22)) && allowAddr) {
			if (reflect.PtrTo(t).Implements(textMarshalerType)) {
				return newCondAddrEncoder(addrTextMarshalerEncoder, newTypeEncoder(t, false));
			}
		}
		_ref = t.Kind();
		if (_ref === 1) {
			return boolEncoder;
		} else if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			return intEncoder;
		} else if (_ref === 7 || _ref === 8 || _ref === 9 || _ref === 10 || _ref === 11 || _ref === 12) {
			return uintEncoder;
		} else if (_ref === 13) {
			return float32Encoder;
		} else if (_ref === 14) {
			return float64Encoder;
		} else if (_ref === 24) {
			return stringEncoder;
		} else if (_ref === 20) {
			return interfaceEncoder;
		} else if (_ref === 25) {
			return newStructEncoder(t);
		} else if (_ref === 21) {
			return newMapEncoder(t);
		} else if (_ref === 23) {
			return newSliceEncoder(t);
		} else if (_ref === 17) {
			return newArrayEncoder(t);
		} else if (_ref === 22) {
			return newPtrEncoder(t);
		} else {
			return unsupportedTypeEncoder;
		}
	};
	invalidValueEncoder = function(e, v, quoted) {
		e.Buffer.WriteString("null");
	};
	marshalerEncoder = function(e, v, quoted) {
		var m, _tuple, b, err;
		if ((v.Kind() === 22) && v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		m = $assertType(v.Interface(), Marshaler);
		_tuple = m.MarshalJSON(); b = _tuple[0]; err = _tuple[1];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			err = compact(e.Buffer, b, true);
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			e.error(new MarshalerError.Ptr(v.Type(), err));
		}
	};
	addrMarshalerEncoder = function(e, v, quoted) {
		var va, m, _tuple, b, err;
		va = new reflect.Value.Ptr(); $copy(va, v.Addr(), reflect.Value);
		if (va.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		m = $assertType(va.Interface(), Marshaler);
		_tuple = m.MarshalJSON(); b = _tuple[0]; err = _tuple[1];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			err = compact(e.Buffer, b, true);
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			e.error(new MarshalerError.Ptr(v.Type(), err));
		}
	};
	textMarshalerEncoder = function(e, v, quoted) {
		var m, _tuple, b, err, _tuple$1;
		if ((v.Kind() === 22) && v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		m = $assertType(v.Interface(), encoding.TextMarshaler);
		_tuple = m.MarshalText(); b = _tuple[0]; err = _tuple[1];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			_tuple$1 = e.stringBytes(b); err = _tuple$1[1];
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			e.error(new MarshalerError.Ptr(v.Type(), err));
		}
	};
	addrTextMarshalerEncoder = function(e, v, quoted) {
		var va, m, _tuple, b, err, _tuple$1;
		va = new reflect.Value.Ptr(); $copy(va, v.Addr(), reflect.Value);
		if (va.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		m = $assertType(va.Interface(), encoding.TextMarshaler);
		_tuple = m.MarshalText(); b = _tuple[0]; err = _tuple[1];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			_tuple$1 = e.stringBytes(b); err = _tuple$1[1];
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			e.error(new MarshalerError.Ptr(v.Type(), err));
		}
	};
	boolEncoder = function(e, v, quoted) {
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
		if (v.Bool()) {
			e.Buffer.WriteString("true");
		} else {
			e.Buffer.WriteString("false");
		}
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
	};
	intEncoder = function(e, v, quoted) {
		var b;
		b = strconv.AppendInt($subslice(new ($sliceType($Uint8))(e.scratch), 0, 0), v.Int(), 10);
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
		e.Buffer.Write(b);
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
	};
	uintEncoder = function(e, v, quoted) {
		var b;
		b = strconv.AppendUint($subslice(new ($sliceType($Uint8))(e.scratch), 0, 0), v.Uint(), 10);
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
		e.Buffer.Write(b);
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
	};
	floatEncoder.prototype.encode = function(e, v, quoted) {
		var bits, f, b;
		bits = this.$val !== undefined ? this.$val : this;
		f = v.Float();
		if (math.IsInf(f, 0) || math.IsNaN(f)) {
			e.error(new UnsupportedValueError.Ptr($clone(v, reflect.Value), strconv.FormatFloat(f, 103, -1, (bits >> 0))));
		}
		b = strconv.AppendFloat($subslice(new ($sliceType($Uint8))(e.scratch), 0, 0), f, 103, -1, (bits >> 0));
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
		e.Buffer.Write(b);
		if (quoted) {
			e.Buffer.WriteByte(34);
		}
	};
	$ptrType(floatEncoder).prototype.encode = function(e, v, quoted) { return new floatEncoder(this.$get()).encode(e, v, quoted); };
	stringEncoder = function(e, v, quoted) {
		var numStr, _tuple, sb, err;
		if ($interfaceIsEqual(v.Type(), numberType)) {
			numStr = v.String();
			if (numStr === "") {
				numStr = "0";
			}
			e.Buffer.WriteString(numStr);
			return;
		}
		if (quoted) {
			_tuple = Marshal(new $String(v.String())); sb = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				e.error(err);
			}
			e.string($bytesToString(sb));
		} else {
			e.string(v.String());
		}
	};
	interfaceEncoder = function(e, v, quoted) {
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		e.reflectValue($clone(v.Elem(), reflect.Value));
	};
	unsupportedTypeEncoder = function(e, v, quoted) {
		e.error(new UnsupportedTypeError.Ptr(v.Type()));
	};
	structEncoder.Ptr.prototype.encode = function(e, v, quoted) {
		var se, first, _ref, _i, i, f, fv, x;
		se = this;
		e.Buffer.WriteByte(123);
		first = true;
		_ref = se.fields;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			f = new field.Ptr(); $copy(f, ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), field);
			fv = new reflect.Value.Ptr(); $copy(fv, fieldByIndex($clone(v, reflect.Value), f.index), reflect.Value);
			if (!fv.IsValid() || f.omitEmpty && isEmptyValue($clone(fv, reflect.Value))) {
				_i++;
				continue;
			}
			if (first) {
				first = false;
			} else {
				e.Buffer.WriteByte(44);
			}
			e.string(f.name);
			e.Buffer.WriteByte(58);
			(x = se.fieldEncs, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]))(e, $clone(fv, reflect.Value), f.quoted);
			_i++;
		}
		e.Buffer.WriteByte(125);
	};
	structEncoder.prototype.encode = function(e, v, quoted) { return this.$val.encode(e, v, quoted); };
	newStructEncoder = function(t) {
		var fields, se, _ref, _i, i, f, x;
		fields = cachedTypeFields(t);
		se = new structEncoder.Ptr(fields, ($sliceType(encoderFunc)).make(fields.$length));
		_ref = fields;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			f = new field.Ptr(); $copy(f, ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), field);
			(x = se.fieldEncs, (i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = typeEncoder(typeByIndex(t, f.index)));
			_i++;
		}
		return $methodVal(se, "encode");
	};
	mapEncoder.Ptr.prototype.encode = function(e, v, param) {
		var me, x, sv, _ref, _i, i, k;
		me = this;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		e.Buffer.WriteByte(123);
		sv = (x = v.MapKeys(), $subslice(new stringValues(x.$array), x.$offset, x.$offset + x.$length));
		sort.Sort(sv);
		_ref = sv;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			k = new reflect.Value.Ptr(); $copy(k, ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), reflect.Value);
			if (i > 0) {
				e.Buffer.WriteByte(44);
			}
			e.string(k.String());
			e.Buffer.WriteByte(58);
			me.elemEnc(e, $clone(v.MapIndex($clone(k, reflect.Value)), reflect.Value), false);
			_i++;
		}
		e.Buffer.WriteByte(125);
	};
	mapEncoder.prototype.encode = function(e, v, param) { return this.$val.encode(e, v, param); };
	newMapEncoder = function(t) {
		var me;
		if (!((t.Key().Kind() === 24))) {
			return unsupportedTypeEncoder;
		}
		me = new mapEncoder.Ptr(typeEncoder(t.Elem()));
		return $methodVal(me, "encode");
	};
	encodeByteSlice = function(e, v, param) {
		var s, dst, enc;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		s = v.Bytes();
		e.Buffer.WriteByte(34);
		if (s.$length < 1024) {
			dst = ($sliceType($Uint8)).make(base64.StdEncoding.EncodedLen(s.$length));
			base64.StdEncoding.Encode(dst, s);
			e.Buffer.Write(dst);
		} else {
			enc = base64.NewEncoder(base64.StdEncoding, e);
			enc.Write(s);
			enc.Close();
		}
		e.Buffer.WriteByte(34);
	};
	sliceEncoder.Ptr.prototype.encode = function(e, v, param) {
		var se;
		se = this;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		se.arrayEnc(e, $clone(v, reflect.Value), false);
	};
	sliceEncoder.prototype.encode = function(e, v, param) { return this.$val.encode(e, v, param); };
	newSliceEncoder = function(t) {
		var enc;
		if (t.Elem().Kind() === 8) {
			return encodeByteSlice;
		}
		enc = new sliceEncoder.Ptr(newArrayEncoder(t));
		return $methodVal(enc, "encode");
	};
	arrayEncoder.Ptr.prototype.encode = function(e, v, param) {
		var ae, n, i;
		ae = this;
		e.Buffer.WriteByte(91);
		n = v.Len();
		i = 0;
		while (i < n) {
			if (i > 0) {
				e.Buffer.WriteByte(44);
			}
			ae.elemEnc(e, $clone(v.Index(i), reflect.Value), false);
			i = i + (1) >> 0;
		}
		e.Buffer.WriteByte(93);
	};
	arrayEncoder.prototype.encode = function(e, v, param) { return this.$val.encode(e, v, param); };
	newArrayEncoder = function(t) {
		var enc;
		enc = new arrayEncoder.Ptr(typeEncoder(t.Elem()));
		return $methodVal(enc, "encode");
	};
	ptrEncoder.Ptr.prototype.encode = function(e, v, param) {
		var pe;
		pe = this;
		if (v.IsNil()) {
			e.Buffer.WriteString("null");
			return;
		}
		pe.elemEnc(e, $clone(v.Elem(), reflect.Value), false);
	};
	ptrEncoder.prototype.encode = function(e, v, param) { return this.$val.encode(e, v, param); };
	newPtrEncoder = function(t) {
		var enc;
		enc = new ptrEncoder.Ptr(typeEncoder(t.Elem()));
		return $methodVal(enc, "encode");
	};
	condAddrEncoder.Ptr.prototype.encode = function(e, v, quoted) {
		var ce;
		ce = this;
		if (v.CanAddr()) {
			ce.canAddrEnc(e, $clone(v, reflect.Value), quoted);
		} else {
			ce.elseEnc(e, $clone(v, reflect.Value), quoted);
		}
	};
	condAddrEncoder.prototype.encode = function(e, v, quoted) { return this.$val.encode(e, v, quoted); };
	newCondAddrEncoder = function(canAddrEnc, elseEnc) {
		var enc;
		enc = new condAddrEncoder.Ptr(canAddrEnc, elseEnc);
		return $methodVal(enc, "encode");
	};
	isValidTag = function(s) {
		var _ref, _i, _rune, c;
		if (s === "") {
			return false;
		}
		_ref = s;
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			if (strings.ContainsRune("!#$%&()*+-./:<=>?@[]^_{|}~ ", c)) {
			} else {
				if (!unicode.IsLetter(c) && !unicode.IsDigit(c)) {
					return false;
				}
			}
			_i += _rune[1];
		}
		return true;
	};
	fieldByIndex = function(v, index) {
		var _ref, _i, i;
		_ref = index;
		_i = 0;
		while (_i < _ref.$length) {
			i = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (v.Kind() === 22) {
				if (v.IsNil()) {
					return new reflect.Value.Ptr(($ptrType(reflect.rtype)).nil, 0, 0, 0);
				}
				$copy(v, v.Elem(), reflect.Value);
			}
			$copy(v, v.Field(i), reflect.Value);
			_i++;
		}
		return v;
	};
	typeByIndex = function(t, index) {
		var _ref, _i, i;
		_ref = index;
		_i = 0;
		while (_i < _ref.$length) {
			i = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (t.Kind() === 22) {
				t = t.Elem();
			}
			t = t.Field(i).Type;
			_i++;
		}
		return t;
	};
	stringValues.prototype.Len = function() {
		var sv;
		sv = this;
		return sv.$length;
	};
	$ptrType(stringValues).prototype.Len = function() { return this.$get().Len(); };
	stringValues.prototype.Swap = function(i, j) {
		var sv, _tmp, _tmp$1;
		sv = this;
		_tmp = new reflect.Value.Ptr(); $copy(_tmp, ((j < 0 || j >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + j]), reflect.Value); _tmp$1 = new reflect.Value.Ptr(); $copy(_tmp$1, ((i < 0 || i >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + i]), reflect.Value); $copy(((i < 0 || i >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + i]), _tmp, reflect.Value); $copy(((j < 0 || j >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + j]), _tmp$1, reflect.Value);
	};
	$ptrType(stringValues).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	stringValues.prototype.Less = function(i, j) {
		var sv;
		sv = this;
		return sv.get(i) < sv.get(j);
	};
	$ptrType(stringValues).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	stringValues.prototype.get = function(i) {
		var sv;
		sv = this;
		return ((i < 0 || i >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + i]).String();
	};
	$ptrType(stringValues).prototype.get = function(i) { return this.$get().get(i); };
	encodeState.Ptr.prototype.string = function(s) {
		var e, len0, start, i, b, _ref, _tuple, c, size;
		e = this;
		len0 = e.Buffer.Len();
		e.Buffer.WriteByte(34);
		start = 0;
		i = 0;
		while (i < s.length) {
			b = s.charCodeAt(i);
			if (b < 128) {
				if (32 <= b && !((b === 92)) && !((b === 34)) && !((b === 60)) && !((b === 62)) && !((b === 38))) {
					i = i + (1) >> 0;
					continue;
				}
				if (start < i) {
					e.Buffer.WriteString(s.substring(start, i));
				}
				_ref = b;
				if (_ref === 92 || _ref === 34) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(b);
				} else if (_ref === 10) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(110);
				} else if (_ref === 13) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(114);
				} else {
					e.Buffer.WriteString("\\u00");
					e.Buffer.WriteByte(hex.charCodeAt((b >>> 4 << 24 >>> 24)));
					e.Buffer.WriteByte(hex.charCodeAt(((b & 15) >>> 0)));
				}
				i = i + (1) >> 0;
				start = i;
				continue;
			}
			_tuple = utf8.DecodeRuneInString(s.substring(i)); c = _tuple[0]; size = _tuple[1];
			if ((c === 65533) && (size === 1)) {
				if (start < i) {
					e.Buffer.WriteString(s.substring(start, i));
				}
				e.Buffer.WriteString("\\ufffd");
				i = i + (size) >> 0;
				start = i;
				continue;
			}
			if ((c === 8232) || (c === 8233)) {
				if (start < i) {
					e.Buffer.WriteString(s.substring(start, i));
				}
				e.Buffer.WriteString("\\u202");
				e.Buffer.WriteByte(hex.charCodeAt((c & 15)));
				i = i + (size) >> 0;
				start = i;
				continue;
			}
			i = i + (size) >> 0;
		}
		if (start < s.length) {
			e.Buffer.WriteString(s.substring(start));
		}
		e.Buffer.WriteByte(34);
		return [e.Buffer.Len() - len0 >> 0, $ifaceNil];
	};
	encodeState.prototype.string = function(s) { return this.$val.string(s); };
	encodeState.Ptr.prototype.stringBytes = function(s) {
		var e, len0, start, i, b, _ref, _tuple, c, size;
		e = this;
		len0 = e.Buffer.Len();
		e.Buffer.WriteByte(34);
		start = 0;
		i = 0;
		while (i < s.$length) {
			b = ((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]);
			if (b < 128) {
				if (32 <= b && !((b === 92)) && !((b === 34)) && !((b === 60)) && !((b === 62)) && !((b === 38))) {
					i = i + (1) >> 0;
					continue;
				}
				if (start < i) {
					e.Buffer.Write($subslice(s, start, i));
				}
				_ref = b;
				if (_ref === 92 || _ref === 34) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(b);
				} else if (_ref === 10) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(110);
				} else if (_ref === 13) {
					e.Buffer.WriteByte(92);
					e.Buffer.WriteByte(114);
				} else {
					e.Buffer.WriteString("\\u00");
					e.Buffer.WriteByte(hex.charCodeAt((b >>> 4 << 24 >>> 24)));
					e.Buffer.WriteByte(hex.charCodeAt(((b & 15) >>> 0)));
				}
				i = i + (1) >> 0;
				start = i;
				continue;
			}
			_tuple = utf8.DecodeRune($subslice(s, i)); c = _tuple[0]; size = _tuple[1];
			if ((c === 65533) && (size === 1)) {
				if (start < i) {
					e.Buffer.Write($subslice(s, start, i));
				}
				e.Buffer.WriteString("\\ufffd");
				i = i + (size) >> 0;
				start = i;
				continue;
			}
			if ((c === 8232) || (c === 8233)) {
				if (start < i) {
					e.Buffer.Write($subslice(s, start, i));
				}
				e.Buffer.WriteString("\\u202");
				e.Buffer.WriteByte(hex.charCodeAt((c & 15)));
				i = i + (size) >> 0;
				start = i;
				continue;
			}
			i = i + (size) >> 0;
		}
		if (start < s.$length) {
			e.Buffer.Write($subslice(s, start));
		}
		e.Buffer.WriteByte(34);
		return [e.Buffer.Len() - len0 >> 0, $ifaceNil];
	};
	encodeState.prototype.stringBytes = function(s) { return this.$val.stringBytes(s); };
	fillField = function(f) {
		f.nameBytes = new ($sliceType($Uint8))($stringToBytes(f.name));
		f.equalFold = foldFunc(f.nameBytes);
		return f;
	};
	byName.prototype.Len = function() {
		var x;
		x = this;
		return x.$length;
	};
	$ptrType(byName).prototype.Len = function() { return this.$get().Len(); };
	byName.prototype.Swap = function(i, j) {
		var x, _tmp, _tmp$1;
		x = this;
		_tmp = new field.Ptr(); $copy(_tmp, ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]), field); _tmp$1 = new field.Ptr(); $copy(_tmp$1, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), field); $copy(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), _tmp, field); $copy(((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]), _tmp$1, field);
	};
	$ptrType(byName).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	byName.prototype.Less = function(i, j) {
		var x;
		x = this;
		if (!(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).name === ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).name)) {
			return ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).name < ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).name;
		}
		if (!((((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).index.$length === ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index.$length))) {
			return ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).index.$length < ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index.$length;
		}
		if (!(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).tag === ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).tag)) {
			return ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).tag;
		}
		return $subslice(new byIndex(x.$array), x.$offset, x.$offset + x.$length).Less(i, j);
	};
	$ptrType(byName).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	byIndex.prototype.Len = function() {
		var x;
		x = this;
		return x.$length;
	};
	$ptrType(byIndex).prototype.Len = function() { return this.$get().Len(); };
	byIndex.prototype.Swap = function(i, j) {
		var x, _tmp, _tmp$1;
		x = this;
		_tmp = new field.Ptr(); $copy(_tmp, ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]), field); _tmp$1 = new field.Ptr(); $copy(_tmp$1, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), field); $copy(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), _tmp, field); $copy(((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]), _tmp$1, field);
	};
	$ptrType(byIndex).prototype.Swap = function(i, j) { return this.$get().Swap(i, j); };
	byIndex.prototype.Less = function(i, j) {
		var x, _ref, _i, k, xik, x$1, x$2;
		x = this;
		_ref = ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).index;
		_i = 0;
		while (_i < _ref.$length) {
			k = _i;
			xik = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (k >= ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index.$length) {
				return false;
			}
			if (!((xik === (x$1 = ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index, ((k < 0 || k >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + k]))))) {
				return xik < (x$2 = ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index, ((k < 0 || k >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + k]));
			}
			_i++;
		}
		return ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]).index.$length < ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j]).index.$length;
	};
	$ptrType(byIndex).prototype.Less = function(i, j) { return this.$get().Less(i, j); };
	typeFields = function(t) {
		var current, next, count, _map, _key, nextCount, _map$1, _key$1, visited, _map$2, _key$2, fields, _tmp, _tmp$1, _tmp$2, _tmp$3, _map$3, _key$3, _ref, _i, f, _entry, _key$4, i, sf, tag, _tuple, name, opts, index, x, ft, tagged, _entry$1, x$1, _lhs, _index, _key$5, _entry$2, _entry$3, out, _tmp$4, _tmp$5, advance, i$1, fi, name$1, x$2, fj, _tuple$1, dominant, ok;
		current = new ($sliceType(field))([]);
		next = new ($sliceType(field))([new field.Ptr("", ($sliceType($Uint8)).nil, $throwNilPointerError, false, ($sliceType($Int)).nil, t, false, false)]);
		count = (_map = new $Map(), _map);
		nextCount = (_map$1 = new $Map(), _map$1);
		visited = (_map$2 = new $Map(), _map$2);
		fields = ($sliceType(field)).nil;
		while (next.$length > 0) {
			_tmp = next; _tmp$1 = $subslice(current, 0, 0); current = _tmp; next = _tmp$1;
			_tmp$2 = nextCount; _tmp$3 = (_map$3 = new $Map(), _map$3); count = _tmp$2; nextCount = _tmp$3;
			_ref = current;
			_i = 0;
			while (_i < _ref.$length) {
				f = new field.Ptr(); $copy(f, ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), field);
				if ((_entry = visited[f.typ.$key()], _entry !== undefined ? _entry.v : false)) {
					_i++;
					continue;
				}
				_key$4 = f.typ; (visited || $throwRuntimeError("assignment to entry in nil map"))[_key$4.$key()] = { k: _key$4, v: true };
				i = 0;
				while (i < f.typ.NumField()) {
					sf = new reflect.StructField.Ptr(); $copy(sf, f.typ.Field(i), reflect.StructField);
					if (!(sf.PkgPath === "")) {
						i = i + (1) >> 0;
						continue;
					}
					tag = new reflect.StructTag(sf.Tag).Get("json");
					if (tag === "-") {
						i = i + (1) >> 0;
						continue;
					}
					_tuple = parseTag(tag); name = _tuple[0]; opts = _tuple[1];
					if (!isValidTag(name)) {
						name = "";
					}
					index = ($sliceType($Int)).make((f.index.$length + 1 >> 0));
					$copySlice(index, f.index);
					(x = f.index.$length, (x < 0 || x >= index.$length) ? $throwRuntimeError("index out of range") : index.$array[index.$offset + x] = i);
					ft = sf.Type;
					if (ft.Name() === "" && (ft.Kind() === 22)) {
						ft = ft.Elem();
					}
					if (!(name === "") || !sf.Anonymous || !((ft.Kind() === 25))) {
						tagged = !(name === "");
						if (name === "") {
							name = sf.Name;
						}
						fields = $append(fields, fillField(new field.Ptr(name, ($sliceType($Uint8)).nil, $throwNilPointerError, tagged, index, ft, new tagOptions(opts).Contains("omitempty"), new tagOptions(opts).Contains("string"))));
						if ((_entry$1 = count[f.typ.$key()], _entry$1 !== undefined ? _entry$1.v : 0) > 1) {
							fields = $append(fields, (x$1 = fields.$length - 1 >> 0, ((x$1 < 0 || x$1 >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + x$1])));
						}
						i = i + (1) >> 0;
						continue;
					}
					_lhs = nextCount; _index = ft; _key$5 = _index; (_lhs || $throwRuntimeError("assignment to entry in nil map"))[_key$5.$key()] = { k: _key$5, v: (_entry$2 = _lhs[_index.$key()], _entry$2 !== undefined ? _entry$2.v : 0) + (1) >> 0 };
					if ((_entry$3 = nextCount[ft.$key()], _entry$3 !== undefined ? _entry$3.v : 0) === 1) {
						next = $append(next, fillField(new field.Ptr(ft.Name(), ($sliceType($Uint8)).nil, $throwNilPointerError, false, index, ft, false, false)));
					}
					i = i + (1) >> 0;
				}
				_i++;
			}
		}
		sort.Sort($subslice(new byName(fields.$array), fields.$offset, fields.$offset + fields.$length));
		out = $subslice(fields, 0, 0);
		_tmp$4 = 0; _tmp$5 = 0; advance = _tmp$4; i$1 = _tmp$5;
		while (i$1 < fields.$length) {
			fi = new field.Ptr(); $copy(fi, ((i$1 < 0 || i$1 >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + i$1]), field);
			name$1 = fi.name;
			advance = 1;
			while ((i$1 + advance >> 0) < fields.$length) {
				fj = new field.Ptr(); $copy(fj, (x$2 = i$1 + advance >> 0, ((x$2 < 0 || x$2 >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + x$2])), field);
				if (!(fj.name === name$1)) {
					break;
				}
				advance = advance + (1) >> 0;
			}
			if (advance === 1) {
				out = $append(out, fi);
				i$1 = i$1 + (advance) >> 0;
				continue;
			}
			_tuple$1 = dominantField($subslice(fields, i$1, (i$1 + advance >> 0))); dominant = new field.Ptr(); $copy(dominant, _tuple$1[0], field); ok = _tuple$1[1];
			if (ok) {
				out = $append(out, dominant);
			}
			i$1 = i$1 + (advance) >> 0;
		}
		fields = out;
		sort.Sort($subslice(new byIndex(fields.$array), fields.$offset, fields.$offset + fields.$length));
		return fields;
	};
	dominantField = function(fields) {
		var length, tagged, _ref, _i, i, f;
		length = ((0 < 0 || 0 >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + 0]).index.$length;
		tagged = -1;
		_ref = fields;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			f = new field.Ptr(); $copy(f, ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), field);
			if (f.index.$length > length) {
				fields = $subslice(fields, 0, i);
				break;
			}
			if (f.tag) {
				if (tagged >= 0) {
					return [new field.Ptr("", ($sliceType($Uint8)).nil, $throwNilPointerError, false, ($sliceType($Int)).nil, $ifaceNil, false, false), false];
				}
				tagged = i;
			}
			_i++;
		}
		if (tagged >= 0) {
			return [((tagged < 0 || tagged >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + tagged]), true];
		}
		if (fields.$length > 1) {
			return [new field.Ptr("", ($sliceType($Uint8)).nil, $throwNilPointerError, false, ($sliceType($Int)).nil, $ifaceNil, false, false), false];
		}
		return [((0 < 0 || 0 >= fields.$length) ? $throwRuntimeError("index out of range") : fields.$array[fields.$offset + 0]), true];
	};
	cachedTypeFields = function(t) {
		var _entry, f, _map, _key, _key$1;
		fieldCache.RWMutex.RLock();
		f = (_entry = fieldCache.m[t.$key()], _entry !== undefined ? _entry.v : ($sliceType(field)).nil);
		fieldCache.RWMutex.RUnlock();
		if (!(f === ($sliceType(field)).nil)) {
			return f;
		}
		f = typeFields(t);
		if (f === ($sliceType(field)).nil) {
			f = new ($sliceType(field))([]);
		}
		fieldCache.RWMutex.Lock();
		if (fieldCache.m === false) {
			fieldCache.m = (_map = new $Map(), _map);
		}
		_key$1 = t; (fieldCache.m || $throwRuntimeError("assignment to entry in nil map"))[_key$1.$key()] = { k: _key$1, v: f };
		fieldCache.RWMutex.Unlock();
		return f;
	};
	foldFunc = function(s) {
		var nonLetter, special, _ref, _i, b, upper;
		nonLetter = false;
		special = false;
		_ref = s;
		_i = 0;
		while (_i < _ref.$length) {
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b >= 128) {
				return bytes.EqualFold;
			}
			upper = (b & 223) >>> 0;
			if (upper < 65 || upper > 90) {
				nonLetter = true;
			} else if ((upper === 75) || (upper === 83)) {
				special = true;
			}
			_i++;
		}
		if (special) {
			return equalFoldRight;
		}
		if (nonLetter) {
			return asciiEqualFold;
		}
		return simpleLetterEqualFold;
	};
	equalFoldRight = function(s, t) {
		var _ref, _i, sb, tb, sbUpper, _tuple, tr, size, _ref$1;
		_ref = s;
		_i = 0;
		while (_i < _ref.$length) {
			sb = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (t.$length === 0) {
				return false;
			}
			tb = ((0 < 0 || 0 >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + 0]);
			if (tb < 128) {
				if (!((sb === tb))) {
					sbUpper = (sb & 223) >>> 0;
					if (65 <= sbUpper && sbUpper <= 90) {
						if (!((sbUpper === ((tb & 223) >>> 0)))) {
							return false;
						}
					} else {
						return false;
					}
				}
				t = $subslice(t, 1);
				_i++;
				continue;
			}
			_tuple = utf8.DecodeRune(t); tr = _tuple[0]; size = _tuple[1];
			_ref$1 = sb;
			if (_ref$1 === 115 || _ref$1 === 83) {
				if (!((tr === 383))) {
					return false;
				}
			} else if (_ref$1 === 107 || _ref$1 === 75) {
				if (!((tr === 8490))) {
					return false;
				}
			} else {
				return false;
			}
			t = $subslice(t, size);
			_i++;
		}
		if (t.$length > 0) {
			return false;
		}
		return true;
	};
	asciiEqualFold = function(s, t) {
		var _ref, _i, i, sb, tb;
		if (!((s.$length === t.$length))) {
			return false;
		}
		_ref = s;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			sb = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			tb = ((i < 0 || i >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + i]);
			if (sb === tb) {
				_i++;
				continue;
			}
			if ((97 <= sb && sb <= 122) || (65 <= sb && sb <= 90)) {
				if (!((((sb & 223) >>> 0) === ((tb & 223) >>> 0)))) {
					return false;
				}
			} else {
				return false;
			}
			_i++;
		}
		return true;
	};
	simpleLetterEqualFold = function(s, t) {
		var _ref, _i, i, b;
		if (!((s.$length === t.$length))) {
			return false;
		}
		_ref = s;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!((((b & 223) >>> 0) === ((((i < 0 || i >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + i]) & 223) >>> 0)))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	compact = function(dst, src, escape) {
		var origLen, scan, start, _ref, _i, i, c, x, x$1, x$2, v;
		origLen = dst.Len();
		scan = new scanner.Ptr(); $copy(scan, new scanner.Ptr(), scanner);
		scan.reset();
		start = 0;
		_ref = src;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (escape && ((c === 60) || (c === 62) || (c === 38))) {
				if (start < i) {
					dst.Write($subslice(src, start, i));
				}
				dst.WriteString("\\u00");
				dst.WriteByte(hex.charCodeAt((c >>> 4 << 24 >>> 24)));
				dst.WriteByte(hex.charCodeAt(((c & 15) >>> 0)));
				start = i + 1 >> 0;
			}
			if ((c === 226) && (i + 2 >> 0) < src.$length && ((x = i + 1 >> 0, ((x < 0 || x >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x])) === 128) && (((x$1 = i + 2 >> 0, ((x$1 < 0 || x$1 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$1])) & ~1) === 168)) {
				if (start < i) {
					dst.Write($subslice(src, start, i));
				}
				dst.WriteString("\\u202");
				dst.WriteByte(hex.charCodeAt((((x$2 = i + 2 >> 0, ((x$2 < 0 || x$2 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x$2])) & 15) >>> 0)));
				start = i + 3 >> 0;
			}
			v = scan.step(scan, (c >> 0));
			if (v >= 9) {
				if (v === 11) {
					break;
				}
				if (start < i) {
					dst.Write($subslice(src, start, i));
				}
				start = i + 1 >> 0;
			}
			_i++;
		}
		if (scan.eof() === 11) {
			dst.Truncate(origLen);
			return scan.err;
		}
		if (start < src.$length) {
			dst.Write($subslice(src, start));
		}
		return $ifaceNil;
	};
	SyntaxError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.msg;
	};
	SyntaxError.prototype.Error = function() { return this.$val.Error(); };
	scanner.Ptr.prototype.reset = function() {
		var s;
		s = this;
		s.step = stateBeginValue;
		s.parseState = $subslice(s.parseState, 0, 0);
		s.err = $ifaceNil;
		s.redo = false;
		s.endTop = false;
	};
	scanner.prototype.reset = function() { return this.$val.reset(); };
	scanner.Ptr.prototype.eof = function() {
		var s;
		s = this;
		if (!($interfaceIsEqual(s.err, $ifaceNil))) {
			return 11;
		}
		if (s.endTop) {
			return 10;
		}
		s.step(s, 32);
		if (s.endTop) {
			return 10;
		}
		if ($interfaceIsEqual(s.err, $ifaceNil)) {
			s.err = new SyntaxError.Ptr("unexpected end of JSON input", s.bytes);
		}
		return 11;
	};
	scanner.prototype.eof = function() { return this.$val.eof(); };
	scanner.Ptr.prototype.pushParseState = function(p) {
		var s;
		s = this;
		s.parseState = $append(s.parseState, p);
	};
	scanner.prototype.pushParseState = function(p) { return this.$val.pushParseState(p); };
	scanner.Ptr.prototype.popParseState = function() {
		var s, n;
		s = this;
		n = s.parseState.$length - 1 >> 0;
		s.parseState = $subslice(s.parseState, 0, n);
		s.redo = false;
		if (n === 0) {
			s.step = stateEndTop;
			s.endTop = true;
		} else {
			s.step = stateEndValue;
		}
	};
	scanner.prototype.popParseState = function() { return this.$val.popParseState(); };
	isSpace = function(c) {
		return (c === 32) || (c === 9) || (c === 13) || (c === 10);
	};
	stateBeginValueOrEmpty = function(s, c) {
		if (c <= 32 && isSpace((c >> 0))) {
			return 9;
		}
		if (c === 93) {
			return stateEndValue(s, c);
		}
		return stateBeginValue(s, c);
	};
	stateBeginValue = function(s, c) {
		var _ref;
		if (c <= 32 && isSpace((c >> 0))) {
			return 9;
		}
		_ref = c;
		if (_ref === 123) {
			s.step = stateBeginStringOrEmpty;
			s.pushParseState(0);
			return 2;
		} else if (_ref === 91) {
			s.step = stateBeginValueOrEmpty;
			s.pushParseState(2);
			return 6;
		} else if (_ref === 34) {
			s.step = stateInString;
			return 1;
		} else if (_ref === 45) {
			s.step = stateNeg;
			return 1;
		} else if (_ref === 48) {
			s.step = state0;
			return 1;
		} else if (_ref === 116) {
			s.step = stateT;
			return 1;
		} else if (_ref === 102) {
			s.step = stateF;
			return 1;
		} else if (_ref === 110) {
			s.step = stateN;
			return 1;
		}
		if (49 <= c && c <= 57) {
			s.step = state1;
			return 1;
		}
		return s.error(c, "looking for beginning of value");
	};
	stateBeginStringOrEmpty = function(s, c) {
		var n, x, x$1;
		if (c <= 32 && isSpace((c >> 0))) {
			return 9;
		}
		if (c === 125) {
			n = s.parseState.$length;
			(x = s.parseState, x$1 = n - 1 >> 0, (x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1] = 1);
			return stateEndValue(s, c);
		}
		return stateBeginString(s, c);
	};
	stateBeginString = function(s, c) {
		if (c <= 32 && isSpace((c >> 0))) {
			return 9;
		}
		if (c === 34) {
			s.step = stateInString;
			return 1;
		}
		return s.error(c, "looking for beginning of object key string");
	};
	stateEndValue = function(s, c) {
		var n, x, x$1, ps, _ref, x$2, x$3, x$4, x$5;
		n = s.parseState.$length;
		if (n === 0) {
			s.step = stateEndTop;
			s.endTop = true;
			return stateEndTop(s, c);
		}
		if (c <= 32 && isSpace((c >> 0))) {
			s.step = stateEndValue;
			return 9;
		}
		ps = (x = s.parseState, x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
		_ref = ps;
		if (_ref === 0) {
			if (c === 58) {
				(x$2 = s.parseState, x$3 = n - 1 >> 0, (x$3 < 0 || x$3 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + x$3] = 1);
				s.step = stateBeginValue;
				return 3;
			}
			return s.error(c, "after object key");
		} else if (_ref === 1) {
			if (c === 44) {
				(x$4 = s.parseState, x$5 = n - 1 >> 0, (x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5] = 0);
				s.step = stateBeginString;
				return 4;
			}
			if (c === 125) {
				s.popParseState();
				return 5;
			}
			return s.error(c, "after object key:value pair");
		} else if (_ref === 2) {
			if (c === 44) {
				s.step = stateBeginValue;
				return 7;
			}
			if (c === 93) {
				s.popParseState();
				return 8;
			}
			return s.error(c, "after array element");
		}
		return s.error(c, "");
	};
	stateEndTop = function(s, c) {
		if (!((c === 32)) && !((c === 9)) && !((c === 13)) && !((c === 10))) {
			s.error(c, "after top-level value");
		}
		return 10;
	};
	stateInString = function(s, c) {
		if (c === 34) {
			s.step = stateEndValue;
			return 0;
		}
		if (c === 92) {
			s.step = stateInStringEsc;
			return 0;
		}
		if (c < 32) {
			return s.error(c, "in string literal");
		}
		return 0;
	};
	stateInStringEsc = function(s, c) {
		var _ref;
		_ref = c;
		if (_ref === 98 || _ref === 102 || _ref === 110 || _ref === 114 || _ref === 116 || _ref === 92 || _ref === 47 || _ref === 34) {
			s.step = stateInString;
			return 0;
		}
		if (c === 117) {
			s.step = stateInStringEscU;
			return 0;
		}
		return s.error(c, "in string escape code");
	};
	stateInStringEscU = function(s, c) {
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInStringEscU1;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateInStringEscU1 = function(s, c) {
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInStringEscU12;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateInStringEscU12 = function(s, c) {
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInStringEscU123;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateInStringEscU123 = function(s, c) {
		if (48 <= c && c <= 57 || 97 <= c && c <= 102 || 65 <= c && c <= 70) {
			s.step = stateInString;
			return 0;
		}
		return s.error(c, "in \\u hexadecimal character escape");
	};
	stateNeg = function(s, c) {
		if (c === 48) {
			s.step = state0;
			return 0;
		}
		if (49 <= c && c <= 57) {
			s.step = state1;
			return 0;
		}
		return s.error(c, "in numeric literal");
	};
	state1 = function(s, c) {
		if (48 <= c && c <= 57) {
			s.step = state1;
			return 0;
		}
		return state0(s, c);
	};
	state0 = function(s, c) {
		if (c === 46) {
			s.step = stateDot;
			return 0;
		}
		if ((c === 101) || (c === 69)) {
			s.step = stateE;
			return 0;
		}
		return stateEndValue(s, c);
	};
	stateDot = function(s, c) {
		if (48 <= c && c <= 57) {
			s.step = stateDot0;
			return 0;
		}
		return s.error(c, "after decimal point in numeric literal");
	};
	stateDot0 = function(s, c) {
		if (48 <= c && c <= 57) {
			s.step = stateDot0;
			return 0;
		}
		if ((c === 101) || (c === 69)) {
			s.step = stateE;
			return 0;
		}
		return stateEndValue(s, c);
	};
	stateE = function(s, c) {
		if (c === 43) {
			s.step = stateESign;
			return 0;
		}
		if (c === 45) {
			s.step = stateESign;
			return 0;
		}
		return stateESign(s, c);
	};
	stateESign = function(s, c) {
		if (48 <= c && c <= 57) {
			s.step = stateE0;
			return 0;
		}
		return s.error(c, "in exponent of numeric literal");
	};
	stateE0 = function(s, c) {
		if (48 <= c && c <= 57) {
			s.step = stateE0;
			return 0;
		}
		return stateEndValue(s, c);
	};
	stateT = function(s, c) {
		if (c === 114) {
			s.step = stateTr;
			return 0;
		}
		return s.error(c, "in literal true (expecting 'r')");
	};
	stateTr = function(s, c) {
		if (c === 117) {
			s.step = stateTru;
			return 0;
		}
		return s.error(c, "in literal true (expecting 'u')");
	};
	stateTru = function(s, c) {
		if (c === 101) {
			s.step = stateEndValue;
			return 0;
		}
		return s.error(c, "in literal true (expecting 'e')");
	};
	stateF = function(s, c) {
		if (c === 97) {
			s.step = stateFa;
			return 0;
		}
		return s.error(c, "in literal false (expecting 'a')");
	};
	stateFa = function(s, c) {
		if (c === 108) {
			s.step = stateFal;
			return 0;
		}
		return s.error(c, "in literal false (expecting 'l')");
	};
	stateFal = function(s, c) {
		if (c === 115) {
			s.step = stateFals;
			return 0;
		}
		return s.error(c, "in literal false (expecting 's')");
	};
	stateFals = function(s, c) {
		if (c === 101) {
			s.step = stateEndValue;
			return 0;
		}
		return s.error(c, "in literal false (expecting 'e')");
	};
	stateN = function(s, c) {
		if (c === 117) {
			s.step = stateNu;
			return 0;
		}
		return s.error(c, "in literal null (expecting 'u')");
	};
	stateNu = function(s, c) {
		if (c === 108) {
			s.step = stateNul;
			return 0;
		}
		return s.error(c, "in literal null (expecting 'l')");
	};
	stateNul = function(s, c) {
		if (c === 108) {
			s.step = stateEndValue;
			return 0;
		}
		return s.error(c, "in literal null (expecting 'l')");
	};
	stateError = function(s, c) {
		return 11;
	};
	scanner.Ptr.prototype.error = function(c, context) {
		var s;
		s = this;
		s.step = stateError;
		s.err = new SyntaxError.Ptr("invalid character " + quoteChar(c) + " " + context, s.bytes);
		return 11;
	};
	scanner.prototype.error = function(c, context) { return this.$val.error(c, context); };
	quoteChar = function(c) {
		var s;
		if (c === 39) {
			return "'\\''";
		}
		if (c === 34) {
			return "'\"'";
		}
		s = strconv.Quote($encodeRune(c));
		return "'" + s.substring(1, (s.length - 1 >> 0)) + "'";
	};
	parseTag = function(tag) {
		var idx;
		idx = strings.Index(tag, ",");
		if (!((idx === -1))) {
			return [tag.substring(0, idx), tag.substring((idx + 1 >> 0))];
		}
		return [tag, ""];
	};
	tagOptions.prototype.Contains = function(optionName) {
		var o, s, next, i, _tmp, _tmp$1;
		o = this.$val !== undefined ? this.$val : this;
		if (o.length === 0) {
			return false;
		}
		s = o;
		while (!(s === "")) {
			next = "";
			i = strings.Index(s, ",");
			if (i >= 0) {
				_tmp = s.substring(0, i); _tmp$1 = s.substring((i + 1 >> 0)); s = _tmp; next = _tmp$1;
			}
			if (s === optionName) {
				return true;
			}
			s = next;
		}
		return false;
	};
	$ptrType(tagOptions).prototype.Contains = function(optionName) { return new tagOptions(this.$get()).Contains(optionName); };
	$pkg.$init = function() {
		Number.methods = [["Float64", "Float64", "", $funcType([], [$Float64, $error], false), -1], ["Int64", "Int64", "", $funcType([], [$Int64, $error], false), -1], ["String", "String", "", $funcType([], [$String], false), -1]];
		($ptrType(Number)).methods = [["Float64", "Float64", "", $funcType([], [$Float64, $error], false), -1], ["Int64", "Int64", "", $funcType([], [$Int64, $error], false), -1], ["String", "String", "", $funcType([], [$String], false), -1]];
		Marshaler.init([["MarshalJSON", "MarshalJSON", "", $funcType([], [($sliceType($Uint8)), $error], false)]]);
		($ptrType(UnsupportedTypeError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		UnsupportedTypeError.init([["Type", "Type", "", reflect.Type, ""]]);
		($ptrType(UnsupportedValueError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		UnsupportedValueError.init([["Value", "Value", "", reflect.Value, ""], ["Str", "Str", "", $String, ""]]);
		($ptrType(MarshalerError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		MarshalerError.init([["Type", "Type", "", reflect.Type, ""], ["Err", "Err", "", $error, ""]]);
		($ptrType(encodeState)).methods = [["Bytes", "Bytes", "", $funcType([], [($sliceType($Uint8))], false), 0], ["Grow", "Grow", "", $funcType([$Int], [], false), 0], ["Len", "Len", "", $funcType([], [$Int], false), 0], ["Next", "Next", "", $funcType([$Int], [($sliceType($Uint8))], false), 0], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0], ["ReadByte", "ReadByte", "", $funcType([], [$Uint8, $error], false), 0], ["ReadBytes", "ReadBytes", "", $funcType([$Uint8], [($sliceType($Uint8)), $error], false), 0], ["ReadFrom", "ReadFrom", "", $funcType([io.Reader], [$Int64, $error], false), 0], ["ReadRune", "ReadRune", "", $funcType([], [$Int32, $Int, $error], false), 0], ["ReadString", "ReadString", "", $funcType([$Uint8], [$String, $error], false), 0], ["Reset", "Reset", "", $funcType([], [], false), 0], ["String", "String", "", $funcType([], [$String], false), 0], ["Truncate", "Truncate", "", $funcType([$Int], [], false), 0], ["UnreadByte", "UnreadByte", "", $funcType([], [$error], false), 0], ["UnreadRune", "UnreadRune", "", $funcType([], [$error], false), 0], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0], ["WriteByte", "WriteByte", "", $funcType([$Uint8], [$error], false), 0], ["WriteRune", "WriteRune", "", $funcType([$Int32], [$Int, $error], false), 0], ["WriteString", "WriteString", "", $funcType([$String], [$Int, $error], false), 0], ["WriteTo", "WriteTo", "", $funcType([io.Writer], [$Int64, $error], false), 0], ["grow", "grow", "bytes", $funcType([$Int], [$Int], false), 0], ["readSlice", "readSlice", "bytes", $funcType([$Uint8], [($sliceType($Uint8)), $error], false), 0], ["error", "error", "encoding/json", $funcType([$error], [], false), -1], ["marshal", "marshal", "encoding/json", $funcType([$emptyInterface], [$error], false), -1], ["reflectValue", "reflectValue", "encoding/json", $funcType([reflect.Value], [], false), -1], ["string", "string", "encoding/json", $funcType([$String], [$Int, $error], false), -1], ["stringBytes", "stringBytes", "encoding/json", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1]];
		encodeState.init([["Buffer", "", "", bytes.Buffer, ""], ["scratch", "scratch", "encoding/json", ($arrayType($Uint8, 64)), ""]]);
		encoderFunc.init([($ptrType(encodeState)), reflect.Value, $Bool], [], false);
		floatEncoder.methods = [["encode", "encode", "encoding/json", $funcType([($ptrType(encodeState)), reflect.Value, $Bool], [], false), -1]];
		($ptrType(floatEncoder)).methods = [["encode", "encode", "encoding/json", $funcType([($ptrType(encodeState)), reflect.Value, $Bool], [], false), -1]];
		($ptrType(structEncoder)).methods = [["encode", "encode", "encoding/json", $funcType([($ptrType(encodeState)), reflect.Value, $Bool], [], false), -1]];
		structEncoder.init([["fields", "fields", "encoding/json", ($sliceType(field)), ""], ["fieldEncs", "fieldEncs", "encoding/json", ($sliceType(encoderFunc)), ""]]);
		($ptrType(mapEncoder)).methods = [["encode", "encode", "encoding/json", $funcType([($ptrType(encodeState)), reflect.Value, $Bool], [], false), -1]];
		mapEncoder.init([["elemEnc", "elemEnc", "encoding/json", encoderFunc, ""]]);
		($ptrType(sliceEncoder)).methods = [["encode", "encode", "encoding/json", $funcType([($ptrType(encodeState)), reflect.Value, $Bool], [], false), -1]];
		sliceEncoder.init([["arrayEnc", "arrayEnc", "encoding/json", encoderFunc, ""]]);
		($ptrType(arrayEncoder)).methods = [["encode", "encode", "encoding/json", $funcType([($ptrType(encodeState)), reflect.Value, $Bool], [], false), -1]];
		arrayEncoder.init([["elemEnc", "elemEnc", "encoding/json", encoderFunc, ""]]);
		($ptrType(ptrEncoder)).methods = [["encode", "encode", "encoding/json", $funcType([($ptrType(encodeState)), reflect.Value, $Bool], [], false), -1]];
		ptrEncoder.init([["elemEnc", "elemEnc", "encoding/json", encoderFunc, ""]]);
		($ptrType(condAddrEncoder)).methods = [["encode", "encode", "encoding/json", $funcType([($ptrType(encodeState)), reflect.Value, $Bool], [], false), -1]];
		condAddrEncoder.init([["canAddrEnc", "canAddrEnc", "encoding/json", encoderFunc, ""], ["elseEnc", "elseEnc", "encoding/json", encoderFunc, ""]]);
		stringValues.methods = [["Len", "Len", "", $funcType([], [$Int], false), -1], ["Less", "Less", "", $funcType([$Int, $Int], [$Bool], false), -1], ["Swap", "Swap", "", $funcType([$Int, $Int], [], false), -1], ["get", "get", "encoding/json", $funcType([$Int], [$String], false), -1]];
		($ptrType(stringValues)).methods = [["Len", "Len", "", $funcType([], [$Int], false), -1], ["Less", "Less", "", $funcType([$Int, $Int], [$Bool], false), -1], ["Swap", "Swap", "", $funcType([$Int, $Int], [], false), -1], ["get", "get", "encoding/json", $funcType([$Int], [$String], false), -1]];
		stringValues.init(reflect.Value);
		field.init([["name", "name", "encoding/json", $String, ""], ["nameBytes", "nameBytes", "encoding/json", ($sliceType($Uint8)), ""], ["equalFold", "equalFold", "encoding/json", ($funcType([($sliceType($Uint8)), ($sliceType($Uint8))], [$Bool], false)), ""], ["tag", "tag", "encoding/json", $Bool, ""], ["index", "index", "encoding/json", ($sliceType($Int)), ""], ["typ", "typ", "encoding/json", reflect.Type, ""], ["omitEmpty", "omitEmpty", "encoding/json", $Bool, ""], ["quoted", "quoted", "encoding/json", $Bool, ""]]);
		byName.methods = [["Len", "Len", "", $funcType([], [$Int], false), -1], ["Less", "Less", "", $funcType([$Int, $Int], [$Bool], false), -1], ["Swap", "Swap", "", $funcType([$Int, $Int], [], false), -1]];
		($ptrType(byName)).methods = [["Len", "Len", "", $funcType([], [$Int], false), -1], ["Less", "Less", "", $funcType([$Int, $Int], [$Bool], false), -1], ["Swap", "Swap", "", $funcType([$Int, $Int], [], false), -1]];
		byName.init(field);
		byIndex.methods = [["Len", "Len", "", $funcType([], [$Int], false), -1], ["Less", "Less", "", $funcType([$Int, $Int], [$Bool], false), -1], ["Swap", "Swap", "", $funcType([$Int, $Int], [], false), -1]];
		($ptrType(byIndex)).methods = [["Len", "Len", "", $funcType([], [$Int], false), -1], ["Less", "Less", "", $funcType([$Int, $Int], [$Bool], false), -1], ["Swap", "Swap", "", $funcType([$Int, $Int], [], false), -1]];
		byIndex.init(field);
		($ptrType(SyntaxError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		SyntaxError.init([["msg", "msg", "encoding/json", $String, ""], ["Offset", "Offset", "", $Int64, ""]]);
		($ptrType(scanner)).methods = [["eof", "eof", "encoding/json", $funcType([], [$Int], false), -1], ["error", "error", "encoding/json", $funcType([$Int, $String], [$Int], false), -1], ["popParseState", "popParseState", "encoding/json", $funcType([], [], false), -1], ["pushParseState", "pushParseState", "encoding/json", $funcType([$Int], [], false), -1], ["reset", "reset", "encoding/json", $funcType([], [], false), -1], ["undo", "undo", "encoding/json", $funcType([$Int], [], false), -1]];
		scanner.init([["step", "step", "encoding/json", ($funcType([($ptrType(scanner)), $Int], [$Int], false)), ""], ["endTop", "endTop", "encoding/json", $Bool, ""], ["parseState", "parseState", "encoding/json", ($sliceType($Int)), ""], ["err", "err", "encoding/json", $error, ""], ["redo", "redo", "encoding/json", $Bool, ""], ["redoCode", "redoCode", "encoding/json", $Int, ""], ["redoState", "redoState", "encoding/json", ($funcType([($ptrType(scanner)), $Int], [$Int], false)), ""], ["bytes", "bytes", "encoding/json", $Int64, ""]]);
		tagOptions.methods = [["Contains", "Contains", "", $funcType([$String], [$Bool], false), -1]];
		($ptrType(tagOptions)).methods = [["Contains", "Contains", "", $funcType([$String], [$Bool], false), -1]];
		encoderCache = new ($structType([["RWMutex", "", "", sync.RWMutex, ""], ["m", "m", "encoding/json", ($mapType(reflect.Type, encoderFunc)), ""]])).Ptr();
		fieldCache = new ($structType([["RWMutex", "", "", sync.RWMutex, ""], ["m", "m", "encoding/json", ($mapType(reflect.Type, ($sliceType(field)))), ""]])).Ptr();
		errPhase = errors.New("JSON decoder out of sync - data changing underfoot?");
		numberType = reflect.TypeOf(new Number(""));
		hex = "0123456789abcdef";
		byteSliceType = reflect.TypeOf(($sliceType($Uint8)).nil);
		marshalerType = reflect.TypeOf($newDataPointer($ifaceNil, ($ptrType(Marshaler)))).Elem();
		textMarshalerType = reflect.TypeOf($newDataPointer($ifaceNil, ($ptrType(encoding.TextMarshaler)))).Elem();
		float32Encoder = $methodVal(new floatEncoder(32), "encode");
		float64Encoder = $methodVal(new floatEncoder(64), "encode");
	};
	return $pkg;
})();
$packages["encoding/binary"] = (function() {
	var $pkg = {}, errors = $packages["errors"], io = $packages["io"], math = $packages["math"], reflect = $packages["reflect"], bigEndian, overflow;
	bigEndian = $pkg.bigEndian = $newType(0, "Struct", "binary.bigEndian", "bigEndian", "encoding/binary", function() {
		this.$val = this;
	});
	bigEndian.Ptr.prototype.Uint16 = function(b) {
		return ((((1 < 0 || 1 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 1]) << 16 >>> 16) | ((((0 < 0 || 0 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 0]) << 16 >>> 16) << 8 << 16 >>> 16)) >>> 0;
	};
	bigEndian.prototype.Uint16 = function(b) { return this.$val.Uint16(b); };
	bigEndian.Ptr.prototype.PutUint16 = function(b, v) {
		(0 < 0 || 0 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 0] = ((v >>> 8 << 16 >>> 16) << 24 >>> 24);
		(1 < 0 || 1 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 1] = (v << 24 >>> 24);
	};
	bigEndian.prototype.PutUint16 = function(b, v) { return this.$val.PutUint16(b, v); };
	bigEndian.Ptr.prototype.Uint32 = function(b) {
		return ((((((((3 < 0 || 3 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 3]) >>> 0) | ((((2 < 0 || 2 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 2]) >>> 0) << 8 >>> 0)) >>> 0) | ((((1 < 0 || 1 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 1]) >>> 0) << 16 >>> 0)) >>> 0) | ((((0 < 0 || 0 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 0]) >>> 0) << 24 >>> 0)) >>> 0;
	};
	bigEndian.prototype.Uint32 = function(b) { return this.$val.Uint32(b); };
	bigEndian.Ptr.prototype.PutUint32 = function(b, v) {
		(0 < 0 || 0 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 0] = ((v >>> 24 >>> 0) << 24 >>> 24);
		(1 < 0 || 1 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 1] = ((v >>> 16 >>> 0) << 24 >>> 24);
		(2 < 0 || 2 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 2] = ((v >>> 8 >>> 0) << 24 >>> 24);
		(3 < 0 || 3 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 3] = (v << 24 >>> 24);
	};
	bigEndian.prototype.PutUint32 = function(b, v) { return this.$val.PutUint32(b, v); };
	bigEndian.Ptr.prototype.Uint64 = function(b) {
		var x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x$10, x$11, x$12, x$13;
		return (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = new $Uint64(0, ((7 < 0 || 7 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 7])), x$7 = $shiftLeft64(new $Uint64(0, ((6 < 0 || 6 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 6])), 8), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64(new $Uint64(0, ((5 < 0 || 5 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 5])), 16), new $Uint64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64(new $Uint64(0, ((4 < 0 || 4 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 4])), 24), new $Uint64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64(new $Uint64(0, ((3 < 0 || 3 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 3])), 32), new $Uint64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64(new $Uint64(0, ((2 < 0 || 2 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 2])), 40), new $Uint64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64(new $Uint64(0, ((1 < 0 || 1 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 1])), 48), new $Uint64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = $shiftLeft64(new $Uint64(0, ((0 < 0 || 0 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 0])), 56), new $Uint64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
	};
	bigEndian.prototype.Uint64 = function(b) { return this.$val.Uint64(b); };
	bigEndian.Ptr.prototype.PutUint64 = function(b, v) {
		(0 < 0 || 0 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 0] = ($shiftRightUint64(v, 56).$low << 24 >>> 24);
		(1 < 0 || 1 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 1] = ($shiftRightUint64(v, 48).$low << 24 >>> 24);
		(2 < 0 || 2 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 2] = ($shiftRightUint64(v, 40).$low << 24 >>> 24);
		(3 < 0 || 3 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 3] = ($shiftRightUint64(v, 32).$low << 24 >>> 24);
		(4 < 0 || 4 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 4] = ($shiftRightUint64(v, 24).$low << 24 >>> 24);
		(5 < 0 || 5 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 5] = ($shiftRightUint64(v, 16).$low << 24 >>> 24);
		(6 < 0 || 6 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 6] = ($shiftRightUint64(v, 8).$low << 24 >>> 24);
		(7 < 0 || 7 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 7] = (v.$low << 24 >>> 24);
	};
	bigEndian.prototype.PutUint64 = function(b, v) { return this.$val.PutUint64(b, v); };
	bigEndian.Ptr.prototype.String = function() {
		return "BigEndian";
	};
	bigEndian.prototype.String = function() { return this.$val.String(); };
	bigEndian.Ptr.prototype.GoString = function() {
		return "binary.BigEndian";
	};
	bigEndian.prototype.GoString = function() { return this.$val.GoString(); };
	$pkg.$init = function() {
		bigEndian.methods = [["GoString", "GoString", "", $funcType([], [$String], false), -1], ["PutUint16", "PutUint16", "", $funcType([($sliceType($Uint8)), $Uint16], [], false), -1], ["PutUint32", "PutUint32", "", $funcType([($sliceType($Uint8)), $Uint32], [], false), -1], ["PutUint64", "PutUint64", "", $funcType([($sliceType($Uint8)), $Uint64], [], false), -1], ["String", "String", "", $funcType([], [$String], false), -1], ["Uint16", "Uint16", "", $funcType([($sliceType($Uint8))], [$Uint16], false), -1], ["Uint32", "Uint32", "", $funcType([($sliceType($Uint8))], [$Uint32], false), -1], ["Uint64", "Uint64", "", $funcType([($sliceType($Uint8))], [$Uint64], false), -1]];
		($ptrType(bigEndian)).methods = [["GoString", "GoString", "", $funcType([], [$String], false), -1], ["PutUint16", "PutUint16", "", $funcType([($sliceType($Uint8)), $Uint16], [], false), -1], ["PutUint32", "PutUint32", "", $funcType([($sliceType($Uint8)), $Uint32], [], false), -1], ["PutUint64", "PutUint64", "", $funcType([($sliceType($Uint8)), $Uint64], [], false), -1], ["String", "String", "", $funcType([], [$String], false), -1], ["Uint16", "Uint16", "", $funcType([($sliceType($Uint8))], [$Uint16], false), -1], ["Uint32", "Uint32", "", $funcType([($sliceType($Uint8))], [$Uint32], false), -1], ["Uint64", "Uint64", "", $funcType([($sliceType($Uint8))], [$Uint64], false), -1]];
		bigEndian.init([]);
		$pkg.BigEndian = new bigEndian.Ptr();
		overflow = errors.New("binary: varint overflows a 64-bit integer");
	};
	return $pkg;
})();
$packages["path/filepath"] = (function() {
	var $pkg = {}, errors = $packages["errors"], os = $packages["os"], runtime = $packages["runtime"], sort = $packages["sort"], strings = $packages["strings"], utf8 = $packages["unicode/utf8"], bytes = $packages["bytes"], lazybuf, Clean, FromSlash, Join, Base, VolumeName, volumeNameLen;
	lazybuf = $pkg.lazybuf = $newType(0, "Struct", "filepath.lazybuf", "lazybuf", "path/filepath", function(path_, buf_, w_, volAndPath_, volLen_) {
		this.$val = this;
		this.path = path_ !== undefined ? path_ : "";
		this.buf = buf_ !== undefined ? buf_ : ($sliceType($Uint8)).nil;
		this.w = w_ !== undefined ? w_ : 0;
		this.volAndPath = volAndPath_ !== undefined ? volAndPath_ : "";
		this.volLen = volLen_ !== undefined ? volLen_ : 0;
	});
	lazybuf.Ptr.prototype.index = function(i) {
		var b, x;
		b = this;
		if (!(b.buf === ($sliceType($Uint8)).nil)) {
			return (x = b.buf, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		}
		return b.path.charCodeAt(i);
	};
	lazybuf.prototype.index = function(i) { return this.$val.index(i); };
	lazybuf.Ptr.prototype.append = function(c) {
		var b, x, x$1;
		b = this;
		if (b.buf === ($sliceType($Uint8)).nil) {
			if (b.w < b.path.length && (b.path.charCodeAt(b.w) === c)) {
				b.w = b.w + (1) >> 0;
				return;
			}
			b.buf = ($sliceType($Uint8)).make(b.path.length);
			$copyString(b.buf, b.path.substring(0, b.w));
		}
		(x = b.buf, x$1 = b.w, (x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1] = c);
		b.w = b.w + (1) >> 0;
	};
	lazybuf.prototype.append = function(c) { return this.$val.append(c); };
	lazybuf.Ptr.prototype.string = function() {
		var b;
		b = this;
		if (b.buf === ($sliceType($Uint8)).nil) {
			return b.volAndPath.substring(0, (b.volLen + b.w >> 0));
		}
		return b.volAndPath.substring(0, b.volLen) + $bytesToString($subslice(b.buf, 0, b.w));
	};
	lazybuf.prototype.string = function() { return this.$val.string(); };
	Clean = $pkg.Clean = function(path) {
		var originalPath, volLen, rooted, n, out, _tmp, _tmp$1, r, dotdot, _tmp$2, _tmp$3;
		originalPath = path;
		volLen = volumeNameLen(path);
		path = path.substring(volLen);
		if (path === "") {
			if (volLen > 1 && !((originalPath.charCodeAt(1) === 58))) {
				return FromSlash(originalPath);
			}
			return originalPath + ".";
		}
		rooted = os.IsPathSeparator(path.charCodeAt(0));
		n = path.length;
		out = new lazybuf.Ptr(path, ($sliceType($Uint8)).nil, 0, originalPath, volLen);
		_tmp = 0; _tmp$1 = 0; r = _tmp; dotdot = _tmp$1;
		if (rooted) {
			out.append(47);
			_tmp$2 = 1; _tmp$3 = 1; r = _tmp$2; dotdot = _tmp$3;
		}
		while (r < n) {
			if (os.IsPathSeparator(path.charCodeAt(r))) {
				r = r + (1) >> 0;
			} else if ((path.charCodeAt(r) === 46) && (((r + 1 >> 0) === n) || os.IsPathSeparator(path.charCodeAt((r + 1 >> 0))))) {
				r = r + (1) >> 0;
			} else if ((path.charCodeAt(r) === 46) && (path.charCodeAt((r + 1 >> 0)) === 46) && (((r + 2 >> 0) === n) || os.IsPathSeparator(path.charCodeAt((r + 2 >> 0))))) {
				r = r + (2) >> 0;
				if (out.w > dotdot) {
					out.w = out.w - (1) >> 0;
					while (out.w > dotdot && !os.IsPathSeparator(out.index(out.w))) {
						out.w = out.w - (1) >> 0;
					}
				} else if (!rooted) {
					if (out.w > 0) {
						out.append(47);
					}
					out.append(46);
					out.append(46);
					dotdot = out.w;
				}
			} else {
				if (rooted && !((out.w === 1)) || !rooted && !((out.w === 0))) {
					out.append(47);
				}
				while (r < n && !os.IsPathSeparator(path.charCodeAt(r))) {
					out.append(path.charCodeAt(r));
					r = r + (1) >> 0;
				}
			}
		}
		if (out.w === 0) {
			out.append(46);
		}
		return FromSlash(out.string());
	};
	FromSlash = $pkg.FromSlash = function(path) {
		return path;
		return strings.Replace(path, "/", "/", -1);
	};
	Join = $pkg.Join = function(elem) {
		var _ref, _i, i, e;
		_ref = elem;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			e = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!(e === "")) {
				return Clean(strings.Join($subslice(elem, i), "/"));
			}
			_i++;
		}
		return "";
	};
	Base = $pkg.Base = function(path) {
		var i;
		if (path === "") {
			return ".";
		}
		while (path.length > 0 && os.IsPathSeparator(path.charCodeAt((path.length - 1 >> 0)))) {
			path = path.substring(0, (path.length - 1 >> 0));
		}
		path = path.substring(VolumeName(path).length);
		i = path.length - 1 >> 0;
		while (i >= 0 && !os.IsPathSeparator(path.charCodeAt(i))) {
			i = i - (1) >> 0;
		}
		if (i >= 0) {
			path = path.substring((i + 1 >> 0));
		}
		if (path === "") {
			return "/";
		}
		return path;
	};
	VolumeName = $pkg.VolumeName = function(path) {
		var v = "";
		v = path.substring(0, volumeNameLen(path));
		return v;
	};
	volumeNameLen = function(path) {
		return 0;
	};
	$pkg.$init = function() {
		($ptrType(lazybuf)).methods = [["append", "append", "path/filepath", $funcType([$Uint8], [], false), -1], ["index", "index", "path/filepath", $funcType([$Int], [$Uint8], false), -1], ["string", "string", "path/filepath", $funcType([], [$String], false), -1]];
		lazybuf.init([["path", "path", "path/filepath", $String, ""], ["buf", "buf", "path/filepath", ($sliceType($Uint8)), ""], ["w", "w", "path/filepath", $Int, ""], ["volAndPath", "volAndPath", "path/filepath", $String, ""], ["volLen", "volLen", "path/filepath", $Int, ""]]);
		$pkg.ErrBadPattern = errors.New("syntax error in pattern");
		$pkg.SkipDir = errors.New("skip this directory");
	};
	return $pkg;
})();
$packages["io/ioutil"] = (function() {
	var $pkg = {}, bytes = $packages["bytes"], io = $packages["io"], os = $packages["os"], sort = $packages["sort"], sync = $packages["sync"], filepath = $packages["path/filepath"], strconv = $packages["strconv"], time = $packages["time"], nopCloser, devNull, blackHolePool, rand, randmu, readAll, ReadAll, ReadFile, NopCloser, reseed, nextSuffix, TempFile;
	nopCloser = $pkg.nopCloser = $newType(0, "Struct", "ioutil.nopCloser", "nopCloser", "io/ioutil", function(Reader_) {
		this.$val = this;
		this.Reader = Reader_ !== undefined ? Reader_ : $ifaceNil;
	});
	devNull = $pkg.devNull = $newType(4, "Int", "ioutil.devNull", "devNull", "io/ioutil", null);
	readAll = function(r, capacity) {
		var b = ($sliceType($Uint8)).nil, err = $ifaceNil, $deferred = [], $err = null, buf, _tuple, _tmp, _tmp$1;
		/* */ try { $deferFrames.push($deferred);
		buf = bytes.NewBuffer(($sliceType($Uint8)).make(0, $flatten64(capacity)));
		$deferred.push([(function() {
			var e, _tuple, panicErr, ok;
			e = $recover();
			if ($interfaceIsEqual(e, $ifaceNil)) {
				return;
			}
			_tuple = $assertType(e, $error, true); panicErr = _tuple[0]; ok = _tuple[1];
			if (ok && $interfaceIsEqual(panicErr, bytes.ErrTooLarge)) {
				err = panicErr;
			} else {
				$panic(e);
			}
		}), []]);
		_tuple = buf.ReadFrom(r); err = _tuple[1];
		_tmp = buf.Bytes(); _tmp$1 = err; b = _tmp; err = _tmp$1;
		return [b, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [b, err]; }
	};
	ReadAll = $pkg.ReadAll = function(r) {
		return readAll(r, new $Int64(0, 512));
	};
	ReadFile = $pkg.ReadFile = function(filename) {
		var $deferred = [], $err = null, _tuple, f, err, n, _tuple$1, fi, err$1, size;
		/* */ try { $deferFrames.push($deferred);
		_tuple = os.Open(filename); f = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($sliceType($Uint8)).nil, err];
		}
		$deferred.push([$methodVal(f, "Close"), []]);
		n = new $Int64(0, 0);
		_tuple$1 = f.Stat(); fi = _tuple$1[0]; err$1 = _tuple$1[1];
		if ($interfaceIsEqual(err$1, $ifaceNil)) {
			size = fi.Size();
			if ((size.$high < 0 || (size.$high === 0 && size.$low < 1000000000))) {
				n = size;
			}
		}
		return readAll(f, new $Int64(n.$high + 0, n.$low + 512));
		/* */ } catch(err) { $err = err; return [($sliceType($Uint8)).nil, $ifaceNil]; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	nopCloser.Ptr.prototype.Close = function() {
		return $ifaceNil;
	};
	nopCloser.prototype.Close = function() { return this.$val.Close(); };
	NopCloser = $pkg.NopCloser = function(r) {
		var x;
		return (x = new nopCloser.Ptr(r), new x.constructor.Struct(x));
	};
	devNull.prototype.Write = function(p) {
		return [p.$length, $ifaceNil];
	};
	$ptrType(devNull).prototype.Write = function(p) { return new devNull(this.$get()).Write(p); };
	devNull.prototype.WriteString = function(s) {
		return [s.length, $ifaceNil];
	};
	$ptrType(devNull).prototype.WriteString = function(s) { return new devNull(this.$get()).WriteString(s); };
	devNull.prototype.ReadFrom = function(r) {
		var n = new $Int64(0, 0), err = $ifaceNil, bufp, readSize, _tuple, x, _tmp, _tmp$1;
		bufp = $assertType(blackHolePool.Get(), ($ptrType(($sliceType($Uint8)))));
		readSize = 0;
		while (true) {
			_tuple = r.Read(bufp.$get()); readSize = _tuple[0]; err = _tuple[1];
			n = (x = new $Int64(0, readSize), new $Int64(n.$high + x.$high, n.$low + x.$low));
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				blackHolePool.Put(bufp);
				if ($interfaceIsEqual(err, io.EOF)) {
					_tmp = n; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
					return [n, err];
				}
				return [n, err];
			}
		}
	};
	$ptrType(devNull).prototype.ReadFrom = function(r) { return new devNull(this.$get()).ReadFrom(r); };
	reseed = function() {
		var x, x$1;
		return ((x = time.Now().UnixNano(), x$1 = new $Int64(0, os.Getpid()), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low)).$low >>> 0);
	};
	nextSuffix = function() {
		var r, _r;
		randmu.Lock();
		r = rand;
		if (r === 0) {
			r = reseed();
		}
		r = ((((r >>> 16 << 16) * 1664525 >>> 0) + (r << 16 >>> 16) * 1664525) >>> 0) + 1013904223 >>> 0;
		rand = r;
		randmu.Unlock();
		return strconv.Itoa(((1000000000 + (_r = r % 1000000000, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >>> 0) >> 0)).substring(1);
	};
	TempFile = $pkg.TempFile = function(dir, prefix) {
		var f = ($ptrType(os.File)).nil, err = $ifaceNil, nconflict, i, name, _tuple;
		if (dir === "") {
			dir = os.TempDir();
		}
		nconflict = 0;
		i = 0;
		while (i < 10000) {
			name = filepath.Join(new ($sliceType($String))([dir, prefix + nextSuffix()]));
			_tuple = os.OpenFile(name, 2562, 384); f = _tuple[0]; err = _tuple[1];
			if (os.IsExist(err)) {
				nconflict = nconflict + (1) >> 0;
				if (nconflict > 10) {
					rand = reseed();
				}
				i = i + (1) >> 0;
				continue;
			}
			break;
		}
		return [f, err];
	};
	$pkg.$init = function() {
		nopCloser.methods = [["Close", "Close", "", $funcType([], [$error], false), -1], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0]];
		($ptrType(nopCloser)).methods = [["Close", "Close", "", $funcType([], [$error], false), -1], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0]];
		nopCloser.init([["Reader", "", "", io.Reader, ""]]);
		devNull.methods = [["ReadFrom", "ReadFrom", "", $funcType([io.Reader], [$Int64, $error], false), -1], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["WriteString", "WriteString", "", $funcType([$String], [$Int, $error], false), -1]];
		($ptrType(devNull)).methods = [["ReadFrom", "ReadFrom", "", $funcType([io.Reader], [$Int64, $error], false), -1], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["WriteString", "WriteString", "", $funcType([$String], [$Int, $error], false), -1]];
		rand = 0;
		randmu = new sync.Mutex.Ptr();
		blackHolePool = new sync.Pool.Ptr(0, 0, ($sliceType($emptyInterface)).nil, (function() {
			var b;
			b = ($sliceType($Uint8)).make(8192);
			return new ($ptrType(($sliceType($Uint8))))(function() { return b; }, function($v) { b = $v; });
		}));
		$pkg.Discard = new devNull(0);
	};
	return $pkg;
})();
$packages["log"] = (function() {
	var $pkg = {}, fmt = $packages["fmt"], io = $packages["io"], os = $packages["os"], runtime = $packages["runtime"], sync = $packages["sync"], time = $packages["time"], Logger, std, New, itoa, Printf, Println;
	Logger = $pkg.Logger = $newType(0, "Struct", "log.Logger", "Logger", "log", function(mu_, prefix_, flag_, out_, buf_) {
		this.$val = this;
		this.mu = mu_ !== undefined ? mu_ : new sync.Mutex.Ptr();
		this.prefix = prefix_ !== undefined ? prefix_ : "";
		this.flag = flag_ !== undefined ? flag_ : 0;
		this.out = out_ !== undefined ? out_ : $ifaceNil;
		this.buf = buf_ !== undefined ? buf_ : ($sliceType($Uint8)).nil;
	});
	New = $pkg.New = function(out, prefix, flag) {
		return new Logger.Ptr(new sync.Mutex.Ptr(), prefix, flag, out, ($sliceType($Uint8)).nil);
	};
	itoa = function(buf, i, wid) {
		var u, b, bp, _r, _q;
		u = (i >>> 0);
		if ((u === 0) && wid <= 1) {
			buf.$set($append(buf.$get(), 48));
			return;
		}
		b = ($arrayType($Uint8, 32)).zero(); $copy(b, ($arrayType($Uint8, 32)).zero(), ($arrayType($Uint8, 32)));
		bp = 32;
		while (u > 0 || wid > 0) {
			bp = bp - (1) >> 0;
			wid = wid - (1) >> 0;
			(bp < 0 || bp >= b.length) ? $throwRuntimeError("index out of range") : b[bp] = ((_r = u % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24;
			u = (_q = u / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		buf.$set($appendSlice(buf.$get(), $subslice(new ($sliceType($Uint8))(b), bp)));
	};
	Logger.Ptr.prototype.formatHeader = function(buf, t, file, line) {
		var l, _tuple, year, month, day, _tuple$1, hour, min, sec, _q, short$1, i;
		l = this;
		buf.$set($appendSlice(buf.$get(), new ($sliceType($Uint8))($stringToBytes(l.prefix))));
		if (!(((l.flag & 7) === 0))) {
			if (!(((l.flag & 1) === 0))) {
				_tuple = t.Date(); year = _tuple[0]; month = _tuple[1]; day = _tuple[2];
				itoa(buf, year, 4);
				buf.$set($append(buf.$get(), 47));
				itoa(buf, (month >> 0), 2);
				buf.$set($append(buf.$get(), 47));
				itoa(buf, day, 2);
				buf.$set($append(buf.$get(), 32));
			}
			if (!(((l.flag & 6) === 0))) {
				_tuple$1 = t.Clock(); hour = _tuple$1[0]; min = _tuple$1[1]; sec = _tuple$1[2];
				itoa(buf, hour, 2);
				buf.$set($append(buf.$get(), 58));
				itoa(buf, min, 2);
				buf.$set($append(buf.$get(), 58));
				itoa(buf, sec, 2);
				if (!(((l.flag & 4) === 0))) {
					buf.$set($append(buf.$get(), 46));
					itoa(buf, (_q = t.Nanosecond() / 1000, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), 6);
				}
				buf.$set($append(buf.$get(), 32));
			}
		}
		if (!(((l.flag & 24) === 0))) {
			if (!(((l.flag & 16) === 0))) {
				short$1 = file;
				i = file.length - 1 >> 0;
				while (i > 0) {
					if (file.charCodeAt(i) === 47) {
						short$1 = file.substring((i + 1 >> 0));
						break;
					}
					i = i - (1) >> 0;
				}
				file = short$1;
			}
			buf.$set($appendSlice(buf.$get(), new ($sliceType($Uint8))($stringToBytes(file))));
			buf.$set($append(buf.$get(), 58));
			itoa(buf, line, -1);
			buf.$set($appendSlice(buf.$get(), new ($sliceType($Uint8))($stringToBytes(": "))));
		}
	};
	Logger.prototype.formatHeader = function(buf, t, file, line) { return this.$val.formatHeader(buf, t, file, line); };
	Logger.Ptr.prototype.Output = function(calldepth, s) {
		var $deferred = [], $err = null, l, now, file, line, ok, _tuple, _tuple$1, err;
		/* */ try { $deferFrames.push($deferred);
		l = this;
		now = new time.Time.Ptr(); $copy(now, time.Now(), time.Time);
		file = "";
		line = 0;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		if (!(((l.flag & 24) === 0))) {
			l.mu.Unlock();
			ok = false;
			_tuple = runtime.Caller(calldepth); file = _tuple[1]; line = _tuple[2]; ok = _tuple[3];
			if (!ok) {
				file = "???";
				line = 0;
			}
			l.mu.Lock();
		}
		l.buf = $subslice(l.buf, 0, 0);
		l.formatHeader(new ($ptrType(($sliceType($Uint8))))(function() { return this.$target.buf; }, function($v) { this.$target.buf = $v; }, l), $clone(now, time.Time), file, line);
		l.buf = $appendSlice(l.buf, new ($sliceType($Uint8))($stringToBytes(s)));
		if (s.length > 0 && !((s.charCodeAt((s.length - 1 >> 0)) === 10))) {
			l.buf = $append(l.buf, 10);
		}
		_tuple$1 = l.out.Write(l.buf); err = _tuple$1[1];
		return err;
		/* */ } catch(err) { $err = err; return $ifaceNil; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Logger.prototype.Output = function(calldepth, s) { return this.$val.Output(calldepth, s); };
	Logger.Ptr.prototype.Printf = function(format, v) {
		var l;
		l = this;
		l.Output(2, fmt.Sprintf(format, v));
	};
	Logger.prototype.Printf = function(format, v) { return this.$val.Printf(format, v); };
	Logger.Ptr.prototype.Print = function(v) {
		var l;
		l = this;
		l.Output(2, fmt.Sprint(v));
	};
	Logger.prototype.Print = function(v) { return this.$val.Print(v); };
	Logger.Ptr.prototype.Println = function(v) {
		var l;
		l = this;
		l.Output(2, fmt.Sprintln(v));
	};
	Logger.prototype.Println = function(v) { return this.$val.Println(v); };
	Logger.Ptr.prototype.Fatal = function(v) {
		var l;
		l = this;
		l.Output(2, fmt.Sprint(v));
		os.Exit(1);
	};
	Logger.prototype.Fatal = function(v) { return this.$val.Fatal(v); };
	Logger.Ptr.prototype.Fatalf = function(format, v) {
		var l;
		l = this;
		l.Output(2, fmt.Sprintf(format, v));
		os.Exit(1);
	};
	Logger.prototype.Fatalf = function(format, v) { return this.$val.Fatalf(format, v); };
	Logger.Ptr.prototype.Fatalln = function(v) {
		var l;
		l = this;
		l.Output(2, fmt.Sprintln(v));
		os.Exit(1);
	};
	Logger.prototype.Fatalln = function(v) { return this.$val.Fatalln(v); };
	Logger.Ptr.prototype.Panic = function(v) {
		var l, s;
		l = this;
		s = fmt.Sprint(v);
		l.Output(2, s);
		$panic(new $String(s));
	};
	Logger.prototype.Panic = function(v) { return this.$val.Panic(v); };
	Logger.Ptr.prototype.Panicf = function(format, v) {
		var l, s;
		l = this;
		s = fmt.Sprintf(format, v);
		l.Output(2, s);
		$panic(new $String(s));
	};
	Logger.prototype.Panicf = function(format, v) { return this.$val.Panicf(format, v); };
	Logger.Ptr.prototype.Panicln = function(v) {
		var l, s;
		l = this;
		s = fmt.Sprintln(v);
		l.Output(2, s);
		$panic(new $String(s));
	};
	Logger.prototype.Panicln = function(v) { return this.$val.Panicln(v); };
	Logger.Ptr.prototype.Flags = function() {
		var $deferred = [], $err = null, l;
		/* */ try { $deferFrames.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		return l.flag;
		/* */ } catch(err) { $err = err; return 0; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Logger.prototype.Flags = function() { return this.$val.Flags(); };
	Logger.Ptr.prototype.SetFlags = function(flag) {
		var $deferred = [], $err = null, l;
		/* */ try { $deferFrames.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		l.flag = flag;
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Logger.prototype.SetFlags = function(flag) { return this.$val.SetFlags(flag); };
	Logger.Ptr.prototype.Prefix = function() {
		var $deferred = [], $err = null, l;
		/* */ try { $deferFrames.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		return l.prefix;
		/* */ } catch(err) { $err = err; return ""; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Logger.prototype.Prefix = function() { return this.$val.Prefix(); };
	Logger.Ptr.prototype.SetPrefix = function(prefix) {
		var $deferred = [], $err = null, l;
		/* */ try { $deferFrames.push($deferred);
		l = this;
		l.mu.Lock();
		$deferred.push([$methodVal(l.mu, "Unlock"), []]);
		l.prefix = prefix;
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Logger.prototype.SetPrefix = function(prefix) { return this.$val.SetPrefix(prefix); };
	Printf = $pkg.Printf = function(format, v) {
		std.Output(2, fmt.Sprintf(format, v));
	};
	Println = $pkg.Println = function(v) {
		std.Output(2, fmt.Sprintln(v));
	};
	$pkg.$init = function() {
		($ptrType(Logger)).methods = [["Fatal", "Fatal", "", $funcType([($sliceType($emptyInterface))], [], true), -1], ["Fatalf", "Fatalf", "", $funcType([$String, ($sliceType($emptyInterface))], [], true), -1], ["Fatalln", "Fatalln", "", $funcType([($sliceType($emptyInterface))], [], true), -1], ["Flags", "Flags", "", $funcType([], [$Int], false), -1], ["Output", "Output", "", $funcType([$Int, $String], [$error], false), -1], ["Panic", "Panic", "", $funcType([($sliceType($emptyInterface))], [], true), -1], ["Panicf", "Panicf", "", $funcType([$String, ($sliceType($emptyInterface))], [], true), -1], ["Panicln", "Panicln", "", $funcType([($sliceType($emptyInterface))], [], true), -1], ["Prefix", "Prefix", "", $funcType([], [$String], false), -1], ["Print", "Print", "", $funcType([($sliceType($emptyInterface))], [], true), -1], ["Printf", "Printf", "", $funcType([$String, ($sliceType($emptyInterface))], [], true), -1], ["Println", "Println", "", $funcType([($sliceType($emptyInterface))], [], true), -1], ["SetFlags", "SetFlags", "", $funcType([$Int], [], false), -1], ["SetPrefix", "SetPrefix", "", $funcType([$String], [], false), -1], ["formatHeader", "formatHeader", "log", $funcType([($ptrType(($sliceType($Uint8)))), time.Time, $String, $Int], [], false), -1]];
		Logger.init([["mu", "mu", "log", sync.Mutex, ""], ["prefix", "prefix", "log", $String, ""], ["flag", "flag", "log", $Int, ""], ["out", "out", "log", io.Writer, ""], ["buf", "buf", "log", ($sliceType($Uint8)), ""]]);
		std = New(os.Stderr, "", 3);
	};
	return $pkg;
})();
$packages["math/rand"] = (function() {
	var $pkg = {}, math = $packages["math"], sync = $packages["sync"], Source, Rand, lockedSource, rngSource, ke, we, fe, kn, wn, fn, globalRand, rng_cooked, absInt32, NewSource, New, seedrand;
	Source = $pkg.Source = $newType(8, "Interface", "rand.Source", "Source", "math/rand", null);
	Rand = $pkg.Rand = $newType(0, "Struct", "rand.Rand", "Rand", "math/rand", function(src_) {
		this.$val = this;
		this.src = src_ !== undefined ? src_ : $ifaceNil;
	});
	lockedSource = $pkg.lockedSource = $newType(0, "Struct", "rand.lockedSource", "lockedSource", "math/rand", function(lk_, src_) {
		this.$val = this;
		this.lk = lk_ !== undefined ? lk_ : new sync.Mutex.Ptr();
		this.src = src_ !== undefined ? src_ : $ifaceNil;
	});
	rngSource = $pkg.rngSource = $newType(0, "Struct", "rand.rngSource", "rngSource", "math/rand", function(tap_, feed_, vec_) {
		this.$val = this;
		this.tap = tap_ !== undefined ? tap_ : 0;
		this.feed = feed_ !== undefined ? feed_ : 0;
		this.vec = vec_ !== undefined ? vec_ : ($arrayType($Int64, 607)).zero();
	});
	Rand.Ptr.prototype.ExpFloat64 = function() {
		var r, j, i, x, x$1;
		r = this;
		while (true) {
			j = r.Uint32();
			i = (j & 255) >>> 0;
			x = j * $coerceFloat32(((i < 0 || i >= we.length) ? $throwRuntimeError("index out of range") : we[i]));
			if (j < ((i < 0 || i >= ke.length) ? $throwRuntimeError("index out of range") : ke[i])) {
				return x;
			}
			if (i === 0) {
				return 7.69711747013105 - math.Log(r.Float64());
			}
			if (((i < 0 || i >= fe.length) ? $throwRuntimeError("index out of range") : fe[i]) + r.Float64() * ((x$1 = i - 1 >>> 0, ((x$1 < 0 || x$1 >= fe.length) ? $throwRuntimeError("index out of range") : fe[x$1])) - ((i < 0 || i >= fe.length) ? $throwRuntimeError("index out of range") : fe[i])) < math.Exp(-x)) {
				return x;
			}
		}
	};
	Rand.prototype.ExpFloat64 = function() { return this.$val.ExpFloat64(); };
	absInt32 = function(i) {
		if (i < 0) {
			return (-i >>> 0);
		}
		return (i >>> 0);
	};
	Rand.Ptr.prototype.NormFloat64 = function() {
		var r, j, i, x, y, x$1;
		r = this;
		while (true) {
			j = (r.Uint32() >> 0);
			i = j & 127;
			x = j * $coerceFloat32(((i < 0 || i >= wn.length) ? $throwRuntimeError("index out of range") : wn[i]));
			if (absInt32(j) < ((i < 0 || i >= kn.length) ? $throwRuntimeError("index out of range") : kn[i])) {
				return x;
			}
			if (i === 0) {
				while (true) {
					x = -math.Log(r.Float64()) * 0.29047645161474317;
					y = -math.Log(r.Float64());
					if (y + y >= x * x) {
						break;
					}
				}
				if (j > 0) {
					return 3.442619855899 + x;
				}
				return -3.442619855899 - x;
			}
			if (((i < 0 || i >= fn.length) ? $throwRuntimeError("index out of range") : fn[i]) + r.Float64() * ((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= fn.length) ? $throwRuntimeError("index out of range") : fn[x$1])) - ((i < 0 || i >= fn.length) ? $throwRuntimeError("index out of range") : fn[i])) < math.Exp(-0.5 * x * x)) {
				return x;
			}
		}
	};
	Rand.prototype.NormFloat64 = function() { return this.$val.NormFloat64(); };
	NewSource = $pkg.NewSource = function(seed) {
		var rng;
		rng = new rngSource.Ptr(); $copy(rng, new rngSource.Ptr(), rngSource);
		rng.Seed(seed);
		return rng;
	};
	New = $pkg.New = function(src) {
		return new Rand.Ptr(src);
	};
	Rand.Ptr.prototype.Seed = function(seed) {
		var r;
		r = this;
		r.src.Seed(seed);
	};
	Rand.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	Rand.Ptr.prototype.Int63 = function() {
		var r;
		r = this;
		return r.src.Int63();
	};
	Rand.prototype.Int63 = function() { return this.$val.Int63(); };
	Rand.Ptr.prototype.Uint32 = function() {
		var r;
		r = this;
		return ($shiftRightInt64(r.Int63(), 31).$low >>> 0);
	};
	Rand.prototype.Uint32 = function() { return this.$val.Uint32(); };
	Rand.Ptr.prototype.Int31 = function() {
		var r, x;
		r = this;
		return ((x = $shiftRightInt64(r.Int63(), 32), x.$low + ((x.$high >> 31) * 4294967296)) >> 0);
	};
	Rand.prototype.Int31 = function() { return this.$val.Int31(); };
	Rand.Ptr.prototype.Int = function() {
		var r, u;
		r = this;
		u = (r.Int63().$low >>> 0);
		return (((u << 1 >>> 0) >>> 1 >>> 0) >> 0);
	};
	Rand.prototype.Int = function() { return this.$val.Int(); };
	Rand.Ptr.prototype.Int63n = function(n) {
		var r, x, x$1, x$2, x$3, x$4, x$5, max, v;
		r = this;
		if ((n.$high < 0 || (n.$high === 0 && n.$low <= 0))) {
			$panic(new $String("invalid argument to Int63n"));
		}
		if ((x = (x$1 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(n.$high & x$1.$high, (n.$low & x$1.$low) >>> 0)), (x.$high === 0 && x.$low === 0))) {
			return (x$2 = r.Int63(), x$3 = new $Int64(n.$high - 0, n.$low - 1), new $Int64(x$2.$high & x$3.$high, (x$2.$low & x$3.$low) >>> 0));
		}
		max = (x$4 = (x$5 = $div64(new $Uint64(2147483648, 0), new $Uint64(n.$high, n.$low), true), new $Uint64(2147483647 - x$5.$high, 4294967295 - x$5.$low)), new $Int64(x$4.$high, x$4.$low));
		v = r.Int63();
		while ((v.$high > max.$high || (v.$high === max.$high && v.$low > max.$low))) {
			v = r.Int63();
		}
		return $div64(v, n, true);
	};
	Rand.prototype.Int63n = function(n) { return this.$val.Int63n(n); };
	Rand.Ptr.prototype.Int31n = function(n) {
		var r, _r, max, v, _r$1;
		r = this;
		if (n <= 0) {
			$panic(new $String("invalid argument to Int31n"));
		}
		if ((n & ((n - 1 >> 0))) === 0) {
			return r.Int31() & ((n - 1 >> 0));
		}
		max = ((2147483647 - (_r = 2147483648 % (n >>> 0), _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >>> 0) >> 0);
		v = r.Int31();
		while (v > max) {
			v = r.Int31();
		}
		return (_r$1 = v % n, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero"));
	};
	Rand.prototype.Int31n = function(n) { return this.$val.Int31n(n); };
	Rand.Ptr.prototype.Intn = function(n) {
		var r, x;
		r = this;
		if (n <= 0) {
			$panic(new $String("invalid argument to Intn"));
		}
		if (n <= 2147483647) {
			return (r.Int31n((n >> 0)) >> 0);
		}
		return ((x = r.Int63n(new $Int64(0, n)), x.$low + ((x.$high >> 31) * 4294967296)) >> 0);
	};
	Rand.prototype.Intn = function(n) { return this.$val.Intn(n); };
	Rand.Ptr.prototype.Float64 = function() {
		var r, f;
		r = this;
		f = $flatten64(r.Int63()) / 9.223372036854776e+18;
		if (f === 1) {
			f = 0;
		}
		return f;
	};
	Rand.prototype.Float64 = function() { return this.$val.Float64(); };
	Rand.Ptr.prototype.Float32 = function() {
		var r, f;
		r = this;
		f = r.Float64();
		if ($float32IsEqual(f, 1)) {
			f = 0;
		}
		return f;
	};
	Rand.prototype.Float32 = function() { return this.$val.Float32(); };
	Rand.Ptr.prototype.Perm = function(n) {
		var r, m, i, j;
		r = this;
		m = ($sliceType($Int)).make(n);
		i = 0;
		while (i < n) {
			j = r.Intn(i + 1 >> 0);
			(i < 0 || i >= m.$length) ? $throwRuntimeError("index out of range") : m.$array[m.$offset + i] = ((j < 0 || j >= m.$length) ? $throwRuntimeError("index out of range") : m.$array[m.$offset + j]);
			(j < 0 || j >= m.$length) ? $throwRuntimeError("index out of range") : m.$array[m.$offset + j] = i;
			i = i + (1) >> 0;
		}
		return m;
	};
	Rand.prototype.Perm = function(n) { return this.$val.Perm(n); };
	lockedSource.Ptr.prototype.Int63 = function() {
		var n = new $Int64(0, 0), r;
		r = this;
		r.lk.Lock();
		n = r.src.Int63();
		r.lk.Unlock();
		return n;
	};
	lockedSource.prototype.Int63 = function() { return this.$val.Int63(); };
	lockedSource.Ptr.prototype.Seed = function(seed) {
		var r;
		r = this;
		r.lk.Lock();
		r.src.Seed(seed);
		r.lk.Unlock();
	};
	lockedSource.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	seedrand = function(x) {
		var _q, hi, _r, lo;
		hi = (_q = x / 44488, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		lo = (_r = x % 44488, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		x = ((((48271 >>> 16 << 16) * lo >> 0) + (48271 << 16 >>> 16) * lo) >> 0) - ((((3399 >>> 16 << 16) * hi >> 0) + (3399 << 16 >>> 16) * hi) >> 0) >> 0;
		if (x < 0) {
			x = x + (2147483647) >> 0;
		}
		return x;
	};
	rngSource.Ptr.prototype.Seed = function(seed) {
		var rng, x, x$1, i, u, x$2, x$3, x$4, x$5;
		rng = this;
		rng.tap = 0;
		rng.feed = 334;
		seed = $div64(seed, new $Int64(0, 2147483647), true);
		if ((seed.$high < 0 || (seed.$high === 0 && seed.$low < 0))) {
			seed = (x = new $Int64(0, 2147483647), new $Int64(seed.$high + x.$high, seed.$low + x.$low));
		}
		if ((seed.$high === 0 && seed.$low === 0)) {
			seed = new $Int64(0, 89482311);
		}
		x$1 = ((seed.$low + ((seed.$high >> 31) * 4294967296)) >> 0);
		i = -20;
		while (i < 607) {
			x$1 = seedrand(x$1);
			if (i >= 0) {
				u = new $Int64(0, 0);
				u = $shiftLeft64(new $Int64(0, x$1), 40);
				x$1 = seedrand(x$1);
				u = (x$2 = $shiftLeft64(new $Int64(0, x$1), 20), new $Int64(u.$high ^ x$2.$high, (u.$low ^ x$2.$low) >>> 0));
				x$1 = seedrand(x$1);
				u = (x$3 = new $Int64(0, x$1), new $Int64(u.$high ^ x$3.$high, (u.$low ^ x$3.$low) >>> 0));
				u = (x$4 = ((i < 0 || i >= rng_cooked.length) ? $throwRuntimeError("index out of range") : rng_cooked[i]), new $Int64(u.$high ^ x$4.$high, (u.$low ^ x$4.$low) >>> 0));
				(x$5 = rng.vec, (i < 0 || i >= x$5.length) ? $throwRuntimeError("index out of range") : x$5[i] = new $Int64(u.$high & 2147483647, (u.$low & 4294967295) >>> 0));
			}
			i = i + (1) >> 0;
		}
	};
	rngSource.prototype.Seed = function(seed) { return this.$val.Seed(seed); };
	rngSource.Ptr.prototype.Int63 = function() {
		var rng, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9;
		rng = this;
		rng.tap = rng.tap - (1) >> 0;
		if (rng.tap < 0) {
			rng.tap = rng.tap + (607) >> 0;
		}
		rng.feed = rng.feed - (1) >> 0;
		if (rng.feed < 0) {
			rng.feed = rng.feed + (607) >> 0;
		}
		x$7 = (x = (x$1 = (x$2 = rng.vec, x$3 = rng.feed, ((x$3 < 0 || x$3 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[x$3])), x$4 = (x$5 = rng.vec, x$6 = rng.tap, ((x$6 < 0 || x$6 >= x$5.length) ? $throwRuntimeError("index out of range") : x$5[x$6])), new $Int64(x$1.$high + x$4.$high, x$1.$low + x$4.$low)), new $Int64(x.$high & 2147483647, (x.$low & 4294967295) >>> 0));
		(x$8 = rng.vec, x$9 = rng.feed, (x$9 < 0 || x$9 >= x$8.length) ? $throwRuntimeError("index out of range") : x$8[x$9] = x$7);
		return x$7;
	};
	rngSource.prototype.Int63 = function() { return this.$val.Int63(); };
	$pkg.$init = function() {
		Source.init([["Int63", "Int63", "", $funcType([], [$Int64], false)], ["Seed", "Seed", "", $funcType([$Int64], [], false)]]);
		($ptrType(Rand)).methods = [["ExpFloat64", "ExpFloat64", "", $funcType([], [$Float64], false), -1], ["Float32", "Float32", "", $funcType([], [$Float32], false), -1], ["Float64", "Float64", "", $funcType([], [$Float64], false), -1], ["Int", "Int", "", $funcType([], [$Int], false), -1], ["Int31", "Int31", "", $funcType([], [$Int32], false), -1], ["Int31n", "Int31n", "", $funcType([$Int32], [$Int32], false), -1], ["Int63", "Int63", "", $funcType([], [$Int64], false), -1], ["Int63n", "Int63n", "", $funcType([$Int64], [$Int64], false), -1], ["Intn", "Intn", "", $funcType([$Int], [$Int], false), -1], ["NormFloat64", "NormFloat64", "", $funcType([], [$Float64], false), -1], ["Perm", "Perm", "", $funcType([$Int], [($sliceType($Int))], false), -1], ["Seed", "Seed", "", $funcType([$Int64], [], false), -1], ["Uint32", "Uint32", "", $funcType([], [$Uint32], false), -1]];
		Rand.init([["src", "src", "math/rand", Source, ""]]);
		($ptrType(lockedSource)).methods = [["Int63", "Int63", "", $funcType([], [$Int64], false), -1], ["Seed", "Seed", "", $funcType([$Int64], [], false), -1]];
		lockedSource.init([["lk", "lk", "math/rand", sync.Mutex, ""], ["src", "src", "math/rand", Source, ""]]);
		($ptrType(rngSource)).methods = [["Int63", "Int63", "", $funcType([], [$Int64], false), -1], ["Seed", "Seed", "", $funcType([$Int64], [], false), -1]];
		rngSource.init([["tap", "tap", "math/rand", $Int, ""], ["feed", "feed", "math/rand", $Int, ""], ["vec", "vec", "math/rand", ($arrayType($Int64, 607)), ""]]);
		ke = $toNativeArray("Uint32", [3801129273, 0, 2615860924, 3279400049, 3571300752, 3733536696, 3836274812, 3906990442, 3958562475, 3997804264, 4028649213, 4053523342, 4074002619, 4091154507, 4105727352, 4118261130, 4129155133, 4138710916, 4147160435, 4154685009, 4161428406, 4167506077, 4173011791, 4178022498, 4182601930, 4186803325, 4190671498, 4194244443, 4197554582, 4200629752, 4203493986, 4206168142, 4208670408, 4211016720, 4213221098, 4215295924, 4217252177, 4219099625, 4220846988, 4222502074, 4224071896, 4225562770, 4226980400, 4228329951, 4229616109, 4230843138, 4232014925, 4233135020, 4234206673, 4235232866, 4236216336, 4237159604, 4238064994, 4238934652, 4239770563, 4240574564, 4241348362, 4242093539, 4242811568, 4243503822, 4244171579, 4244816032, 4245438297, 4246039419, 4246620374, 4247182079, 4247725394, 4248251127, 4248760037, 4249252839, 4249730206, 4250192773, 4250641138, 4251075867, 4251497493, 4251906522, 4252303431, 4252688672, 4253062674, 4253425844, 4253778565, 4254121205, 4254454110, 4254777611, 4255092022, 4255397640, 4255694750, 4255983622, 4256264513, 4256537670, 4256803325, 4257061702, 4257313014, 4257557464, 4257795244, 4258026541, 4258251531, 4258470383, 4258683258, 4258890309, 4259091685, 4259287526, 4259477966, 4259663135, 4259843154, 4260018142, 4260188212, 4260353470, 4260514019, 4260669958, 4260821380, 4260968374, 4261111028, 4261249421, 4261383632, 4261513736, 4261639802, 4261761900, 4261880092, 4261994441, 4262105003, 4262211835, 4262314988, 4262414513, 4262510454, 4262602857, 4262691764, 4262777212, 4262859239, 4262937878, 4263013162, 4263085118, 4263153776, 4263219158, 4263281289, 4263340187, 4263395872, 4263448358, 4263497660, 4263543789, 4263586755, 4263626565, 4263663224, 4263696735, 4263727099, 4263754314, 4263778377, 4263799282, 4263817020, 4263831582, 4263842955, 4263851124, 4263856071, 4263857776, 4263856218, 4263851370, 4263843206, 4263831695, 4263816804, 4263798497, 4263776735, 4263751476, 4263722676, 4263690284, 4263654251, 4263614520, 4263571032, 4263523724, 4263472530, 4263417377, 4263358192, 4263294892, 4263227394, 4263155608, 4263079437, 4262998781, 4262913534, 4262823581, 4262728804, 4262629075, 4262524261, 4262414220, 4262298801, 4262177846, 4262051187, 4261918645, 4261780032, 4261635148, 4261483780, 4261325704, 4261160681, 4260988457, 4260808763, 4260621313, 4260425802, 4260221905, 4260009277, 4259787550, 4259556329, 4259315195, 4259063697, 4258801357, 4258527656, 4258242044, 4257943926, 4257632664, 4257307571, 4256967906, 4256612870, 4256241598, 4255853155, 4255446525, 4255020608, 4254574202, 4254106002, 4253614578, 4253098370, 4252555662, 4251984571, 4251383021, 4250748722, 4250079132, 4249371435, 4248622490, 4247828790, 4246986404, 4246090910, 4245137315, 4244119963, 4243032411, 4241867296, 4240616155, 4239269214, 4237815118, 4236240596, 4234530035, 4232664930, 4230623176, 4228378137, 4225897409, 4223141146, 4220059768, 4216590757, 4212654085, 4208145538, 4202926710, 4196809522, 4189531420, 4180713890, 4169789475, 4155865042, 4137444620, 4111806704, 4073393724, 4008685917, 3873074895]);
		we = $toNativeArray("Float32", [2.0249555365836613e-09, 1.4866739783681027e-11, 2.4409616689036184e-11, 3.1968806074589295e-11, 3.844677007314168e-11, 4.42282044321729e-11, 4.951644302919611e-11, 5.443358958023836e-11, 5.905943789574764e-11, 6.34494193296753e-11, 6.764381416113352e-11, 7.167294535648239e-11, 7.556032188826833e-11, 7.932458162551725e-11, 8.298078890689453e-11, 8.654132271912474e-11, 9.001651507523079e-11, 9.341507428706208e-11, 9.674443190998971e-11, 1.0001099254308699e-10, 1.0322031424037093e-10, 1.0637725422757427e-10, 1.0948611461891744e-10, 1.1255067711157807e-10, 1.1557434870246297e-10, 1.1856014781042035e-10, 1.2151082917633005e-10, 1.2442885610752796e-10, 1.2731647680563896e-10, 1.3017574518325858e-10, 1.330085347417409e-10, 1.3581656632677408e-10, 1.386014220061682e-10, 1.413645728254309e-10, 1.4410737880776736e-10, 1.4683107507629245e-10, 1.4953686899854546e-10, 1.522258291641876e-10, 1.5489899640730442e-10, 1.575573282952547e-10, 1.6020171300645814e-10, 1.628330109637588e-10, 1.6545202707884954e-10, 1.68059510752272e-10, 1.7065616975120435e-10, 1.73242697965037e-10, 1.758197337720091e-10, 1.783878739169964e-10, 1.8094774290045024e-10, 1.834998542005195e-10, 1.8604476292871652e-10, 1.8858298256319017e-10, 1.9111498494872592e-10, 1.9364125580789704e-10, 1.9616222535212557e-10, 1.9867835154840918e-10, 2.011900368525943e-10, 2.0369768372052732e-10, 2.062016807302669e-10, 2.0870240258208383e-10, 2.1120022397624894e-10, 2.136955057352452e-10, 2.1618855317040442e-10, 2.1867974098199738e-10, 2.2116936060356807e-10, 2.2365774510202385e-10, 2.2614519978869652e-10, 2.2863201609713002e-10, 2.3111849933865614e-10, 2.3360494094681883e-10, 2.3609159072179864e-10, 2.3857874009713953e-10, 2.4106666662859766e-10, 2.4355562011635357e-10, 2.460458781161634e-10, 2.485376904282077e-10, 2.5103127909709144e-10, 2.5352694943414633e-10, 2.560248957284017e-10, 2.585253955356137e-10, 2.610286709003873e-10, 2.6353494386732734e-10, 2.6604446423661443e-10, 2.6855745405285347e-10, 2.71074163116225e-10, 2.7359478571575835e-10, 2.7611959940720965e-10, 2.786487707240326e-10, 2.8118254946640775e-10, 2.8372118543451563e-10, 2.8626484516180994e-10, 2.8881380620404684e-10, 2.9136826285025563e-10, 2.9392840938946563e-10, 2.96494523377433e-10, 2.990667713476114e-10, 3.016454031001814e-10, 3.042306406797479e-10, 3.068226783753403e-10, 3.09421765987139e-10, 3.12028125559749e-10, 3.1464195138219964e-10, 3.17263521010247e-10, 3.1989300097734485e-10, 3.225306410836737e-10, 3.2517669112941405e-10, 3.2783134540359526e-10, 3.3049485370639786e-10, 3.3316743808242677e-10, 3.3584937608743815e-10, 3.385408342548857e-10, 3.4124211789610115e-10, 3.4395342130011386e-10, 3.4667499426710435e-10, 3.494071143528288e-10, 3.521500313574677e-10, 3.54903967325626e-10, 3.576691720574843e-10, 3.6044595086437425e-10, 3.632345535464765e-10, 3.660352021483959e-10, 3.688482297370399e-10, 3.716738583570134e-10, 3.7451239331964814e-10, 3.773641121807003e-10, 3.802292924959261e-10, 3.831082673322328e-10, 3.8600128648980103e-10, 3.8890865527996255e-10, 3.9183070676962473e-10, 3.9476774627011935e-10, 3.977200790927782e-10, 4.006880383045086e-10, 4.0367195697221803e-10, 4.066721681628138e-10, 4.0968900494320337e-10, 4.127228558914453e-10, 4.15774054074447e-10, 4.188429603146915e-10, 4.2192993543466173e-10, 4.25035395767992e-10, 4.2815970213716525e-10, 4.313032986313914e-10, 4.3446651831757777e-10, 4.376498607960855e-10, 4.408536868893975e-10, 4.4407846844229937e-10, 4.4732464954400086e-10, 4.5059267428371186e-10, 4.538830145062178e-10, 4.5719619756745544e-10, 4.605326675566346e-10, 4.638929240741163e-10, 4.672775499869886e-10, 4.706869893844612e-10, 4.74121908400349e-10, 4.775827511238617e-10, 4.810701836888143e-10, 4.845848167178701e-10, 4.881271498113904e-10, 4.916979601254923e-10, 4.952977472605369e-10, 4.989272883726414e-10, 5.025872495956207e-10, 5.062783525744408e-10, 5.100013189540675e-10, 5.13756870379467e-10, 5.175458395179078e-10, 5.21369003525507e-10, 5.252272505806843e-10, 5.29121357839557e-10, 5.330522134805449e-10, 5.3702081670437e-10, 5.41028055689452e-10, 5.450749851476644e-10, 5.491624932574268e-10, 5.532918012640664e-10, 5.574638528571541e-10, 5.616799247931681e-10, 5.659410717839819e-10, 5.702485705860738e-10, 5.746036979559221e-10, 5.790077306500052e-10, 5.83462111958255e-10, 5.879682296594524e-10, 5.925275825546805e-10, 5.971417249561739e-10, 6.01812211176167e-10, 6.065408175714992e-10, 6.113292094767075e-10, 6.16179329782085e-10, 6.21092954844471e-10, 6.260721940876124e-10, 6.311191569352559e-10, 6.362359528111483e-10, 6.414249686947926e-10, 6.466885360545405e-10, 6.520292639144998e-10, 6.574497612987784e-10, 6.629528592760892e-10, 6.685415554485985e-10, 6.742187919073217e-10, 6.799880103436351e-10, 6.858525969377638e-10, 6.918161599145378e-10, 6.978825850545434e-10, 7.040559801829716e-10, 7.103406751696184e-10, 7.167412219288849e-10, 7.232625609532306e-10, 7.2990985477972e-10, 7.366885990123251e-10, 7.436047333442275e-10, 7.506645305355164e-10, 7.57874762946642e-10, 7.652426470272644e-10, 7.727759543385559e-10, 7.804830115532013e-10, 7.883728114777e-10, 7.964550685635174e-10, 8.047402189070851e-10, 8.132396422944055e-10, 8.219657177122031e-10, 8.309318788590758e-10, 8.401527806789488e-10, 8.496445214056791e-10, 8.594246980742071e-10, 8.695127395874636e-10, 8.799300732498239e-10, 8.90700457834015e-10, 9.01850316648023e-10, 9.134091816243028e-10, 9.254100818978372e-10, 9.37890431984556e-10, 9.508922538259412e-10, 9.64463842123564e-10, 9.78660263939446e-10, 9.935448019859905e-10, 1.0091912860943353e-09, 1.0256859805934937e-09, 1.0431305819125214e-09, 1.0616465484503124e-09, 1.0813799855569073e-09, 1.1025096391392708e-09, 1.1252564435793033e-09, 1.149898620766976e-09, 1.176793218427008e-09, 1.2064089727203964e-09, 1.2393785997488749e-09, 1.2765849488616254e-09, 1.319313880365769e-09, 1.36954347862428e-09, 1.4305497897382224e-09, 1.5083649884672923e-09, 1.6160853766322703e-09, 1.7921247819074893e-09]);
		fe = $toNativeArray("Float32", [1, 0.9381436705589294, 0.900469958782196, 0.8717043399810791, 0.847785472869873, 0.8269932866096497, 0.8084216713905334, 0.7915276288986206, 0.7759568691253662, 0.7614634037017822, 0.7478685975074768, 0.7350381016731262, 0.7228676676750183, 0.7112747430801392, 0.7001926302909851, 0.6895664930343628, 0.6793505549430847, 0.669506311416626, 0.6600008606910706, 0.6508058309555054, 0.6418967247009277, 0.633251965045929, 0.62485271692276, 0.6166821718215942, 0.608725368976593, 0.6009689569473267, 0.5934008955955505, 0.5860103368759155, 0.5787873864173889, 0.5717230439186096, 0.5648092031478882, 0.5580382943153381, 0.5514034032821655, 0.5448982119560242, 0.5385168790817261, 0.5322538614273071, 0.526104211807251, 0.5200631618499756, 0.5141264200210571, 0.5082897543907166, 0.5025495290756226, 0.4969019889831543, 0.4913438558578491, 0.4858720004558563, 0.48048335313796997, 0.4751752018928528, 0.4699448347091675, 0.4647897481918335, 0.4597076177597046, 0.4546961486339569, 0.4497532546520233, 0.44487687945365906, 0.4400651156902313, 0.4353161156177521, 0.4306281507015228, 0.42599955201148987, 0.42142874002456665, 0.4169141948223114, 0.4124544560909271, 0.40804818272590637, 0.4036940038204193, 0.39939069747924805, 0.3951369822025299, 0.39093172550201416, 0.38677382469177246, 0.38266217708587646, 0.378595769405365, 0.37457355856895447, 0.37059465050697327, 0.366658091545105, 0.362762987613678, 0.358908474445343, 0.35509374737739563, 0.35131800174713135, 0.3475804924964905, 0.34388044476509094, 0.34021714329719543, 0.33658990263938904, 0.3329980671405792, 0.3294409513473511, 0.32591795921325684, 0.32242849469184875, 0.3189719021320343, 0.3155476748943329, 0.31215524673461914, 0.3087940812110901, 0.30546361207962036, 0.30216339230537415, 0.29889291524887085, 0.29565170407295227, 0.2924392819404602, 0.2892552316188812, 0.28609907627105713, 0.2829704284667969, 0.27986884117126465, 0.2767939269542694, 0.2737452983856201, 0.2707225978374481, 0.26772540807724, 0.26475343108177185, 0.2618062496185303, 0.258883535861969, 0.2559850215911865, 0.25311028957366943, 0.25025907158851624, 0.24743106961250305, 0.2446259707212448, 0.24184346199035645, 0.23908329010009766, 0.23634515702724457, 0.2336287796497345, 0.23093391954898834, 0.22826029360294342, 0.22560766339302063, 0.22297576069831848, 0.22036437690258026, 0.21777324378490448, 0.21520215272903442, 0.212650865316391, 0.21011915802955627, 0.20760682225227356, 0.20511364936828613, 0.20263944566249847, 0.20018397271633148, 0.19774706661701202, 0.1953285187482834, 0.19292815029621124, 0.19054576754570007, 0.18818120658397675, 0.18583425879478455, 0.18350479006767273, 0.18119260668754578, 0.17889754474163055, 0.17661945521831512, 0.17435817420482635, 0.1721135377883911, 0.16988539695739746, 0.16767361760139465, 0.16547803580760956, 0.16329853236675262, 0.16113494336605072, 0.1589871346950531, 0.15685498714447021, 0.15473836660385132, 0.15263713896274567, 0.1505511850118637, 0.1484803706407547, 0.14642459154129028, 0.1443837285041809, 0.14235764741897583, 0.1403462439775467, 0.13834942877292633, 0.136367067694664, 0.13439907133579254, 0.1324453204870224, 0.1305057406425476, 0.12858019769191742, 0.12666863203048706, 0.12477091699838638, 0.12288697808980942, 0.1210167184472084, 0.11916005611419678, 0.11731690168380737, 0.11548716574907303, 0.11367076635360718, 0.11186762899160385, 0.11007767915725708, 0.1083008274435997, 0.10653700679540634, 0.10478614270687103, 0.1030481606721878, 0.10132300108671188, 0.0996105819940567, 0.09791085124015808, 0.09622374176979065, 0.09454918652772903, 0.09288713335990906, 0.09123751521110535, 0.08960027992725372, 0.08797537535429001, 0.08636274188756943, 0.0847623273730278, 0.08317409455776215, 0.08159798383712769, 0.08003395050764084, 0.07848194986581802, 0.07694194465875626, 0.07541389018297195, 0.07389774918556213, 0.07239348441362381, 0.070901058614254, 0.06942043453454971, 0.06795158982276917, 0.06649449467658997, 0.06504911929368973, 0.06361543387174606, 0.06219341605901718, 0.06078304722905159, 0.0593843050301075, 0.05799717456102371, 0.05662164092063904, 0.05525768920779228, 0.05390531197190285, 0.05256449431180954, 0.05123523622751236, 0.04991753399372101, 0.04861138388514519, 0.047316793352365494, 0.04603376239538193, 0.044762298464775085, 0.04350241273641586, 0.04225412383675575, 0.04101744294166565, 0.039792392402887344, 0.03857899457216263, 0.03737728297710419, 0.03618728369474411, 0.03500903770327568, 0.03384258225560188, 0.0326879620552063, 0.031545232981443405, 0.030414443463087082, 0.0292956605553627, 0.028188949450850487, 0.027094384655356407, 0.02601204626262188, 0.024942025542259216, 0.023884421214461327, 0.022839335724711418, 0.021806888282299042, 0.020787203684449196, 0.019780423492193222, 0.018786700442433357, 0.017806200310587883, 0.016839107498526573, 0.015885621309280396, 0.014945968054234982, 0.01402039173990488, 0.013109165243804455, 0.012212592177093029, 0.011331013403832912, 0.010464809834957123, 0.009614413604140282, 0.008780314587056637, 0.007963077165186405, 0.007163353264331818, 0.0063819061033427715, 0.005619642324745655, 0.004877655766904354, 0.004157294984906912, 0.003460264764726162, 0.0027887988835573196, 0.0021459676790982485, 0.001536299823783338, 0.0009672692976891994, 0.0004541343660093844]);
		kn = $toNativeArray("Uint32", [1991057938, 0, 1611602771, 1826899878, 1918584482, 1969227037, 2001281515, 2023368125, 2039498179, 2051788381, 2061460127, 2069267110, 2075699398, 2081089314, 2085670119, 2089610331, 2093034710, 2096037586, 2098691595, 2101053571, 2103168620, 2105072996, 2106796166, 2108362327, 2109791536, 2111100552, 2112303493, 2113412330, 2114437283, 2115387130, 2116269447, 2117090813, 2117856962, 2118572919, 2119243101, 2119871411, 2120461303, 2121015852, 2121537798, 2122029592, 2122493434, 2122931299, 2123344971, 2123736059, 2124106020, 2124456175, 2124787725, 2125101763, 2125399283, 2125681194, 2125948325, 2126201433, 2126441213, 2126668298, 2126883268, 2127086657, 2127278949, 2127460589, 2127631985, 2127793506, 2127945490, 2128088244, 2128222044, 2128347141, 2128463758, 2128572095, 2128672327, 2128764606, 2128849065, 2128925811, 2128994934, 2129056501, 2129110560, 2129157136, 2129196237, 2129227847, 2129251929, 2129268426, 2129277255, 2129278312, 2129271467, 2129256561, 2129233410, 2129201800, 2129161480, 2129112170, 2129053545, 2128985244, 2128906855, 2128817916, 2128717911, 2128606255, 2128482298, 2128345305, 2128194452, 2128028813, 2127847342, 2127648860, 2127432031, 2127195339, 2126937058, 2126655214, 2126347546, 2126011445, 2125643893, 2125241376, 2124799783, 2124314271, 2123779094, 2123187386, 2122530867, 2121799464, 2120980787, 2120059418, 2119015917, 2117825402, 2116455471, 2114863093, 2112989789, 2110753906, 2108037662, 2104664315, 2100355223, 2094642347, 2086670106, 2074676188, 2054300022, 2010539237]);
		wn = $toNativeArray("Float32", [1.7290404663583558e-09, 1.2680928529462676e-10, 1.689751810696194e-10, 1.9862687883343e-10, 2.223243117382978e-10, 2.4244936613904144e-10, 2.601613091623989e-10, 2.761198769629658e-10, 2.9073962681813725e-10, 3.042996965518796e-10, 3.169979556627567e-10, 3.289802041894774e-10, 3.4035738116777736e-10, 3.5121602848242617e-10, 3.61625090983253e-10, 3.7164057942185025e-10, 3.813085680537398e-10, 3.906675816178762e-10, 3.997501218933053e-10, 4.0858399996679395e-10, 4.1719308563337165e-10, 4.255982233303257e-10, 4.3381759295968436e-10, 4.4186720948857783e-10, 4.497613115272969e-10, 4.57512583373898e-10, 4.6513240481438345e-10, 4.726310454117311e-10, 4.800177477726209e-10, 4.873009773476156e-10, 4.944885056978876e-10, 5.015873272284921e-10, 5.086040477664255e-10, 5.155446070048697e-10, 5.224146670812502e-10, 5.292193350214802e-10, 5.359634958068682e-10, 5.426517013518151e-10, 5.492881705038144e-10, 5.558769555769061e-10, 5.624218868405251e-10, 5.689264614971989e-10, 5.75394121238304e-10, 5.818281967329142e-10, 5.882316855831959e-10, 5.946076964136182e-10, 6.009590047817426e-10, 6.072883862451306e-10, 6.135985053390414e-10, 6.19892026598734e-10, 6.261713370037114e-10, 6.324390455780815e-10, 6.386973727678935e-10, 6.449488165749528e-10, 6.511955974453087e-10, 6.574400468473129e-10, 6.636843297158634e-10, 6.699307220081607e-10, 6.761814441702541e-10, 6.824387166481927e-10, 6.887046488657234e-10, 6.949815167800466e-10, 7.012714853260604e-10, 7.075767749498141e-10, 7.13899661608508e-10, 7.202424212593428e-10, 7.266072743483676e-10, 7.329966078550854e-10, 7.394128087589991e-10, 7.458582640396116e-10, 7.523354716987285e-10, 7.588469852493063e-10, 7.653954137154528e-10, 7.719834771435785e-10, 7.786139510912449e-10, 7.852897221383159e-10, 7.920137878869582e-10, 7.987892014504894e-10, 8.056192379868321e-10, 8.125072836762115e-10, 8.194568912323064e-10, 8.264716688799467e-10, 8.3355555791087e-10, 8.407127216614185e-10, 8.479473234679347e-10, 8.552640262671218e-10, 8.626675485068347e-10, 8.701631637464402e-10, 8.777562010564566e-10, 8.854524335966119e-10, 8.932581896381464e-10, 9.011799639857543e-10, 9.092249730890956e-10, 9.174008219758889e-10, 9.25715837318819e-10, 9.341788453909317e-10, 9.42799727177146e-10, 9.515889187738935e-10, 9.605578554783278e-10, 9.697193048552322e-10, 9.790869226478094e-10, 9.886760299337993e-10, 9.985036131254788e-10, 1.008588212947359e-09, 1.0189509236369076e-09, 1.0296150598776421e-09, 1.040606933955246e-09, 1.0519566329136865e-09, 1.0636980185552147e-09, 1.0758701707302976e-09, 1.0885182755160372e-09, 1.101694735439196e-09, 1.115461056855338e-09, 1.1298901814171813e-09, 1.1450695946990663e-09, 1.1611052119775422e-09, 1.178127595480305e-09, 1.1962995039027646e-09, 1.2158286599728285e-09, 1.2369856250415978e-09, 1.2601323318151003e-09, 1.2857697129220469e-09, 1.3146201904845611e-09, 1.3477839955200466e-09, 1.3870635751089821e-09, 1.43574030442295e-09, 1.5008658760251592e-09, 1.6030947680434338e-09]);
		fn = $toNativeArray("Float32", [1, 0.963599681854248, 0.9362826943397522, 0.9130436182022095, 0.8922816514968872, 0.8732430338859558, 0.8555005788803101, 0.8387836217880249, 0.8229072093963623, 0.8077383041381836, 0.7931770086288452, 0.7791460752487183, 0.7655841708183289, 0.7524415850639343, 0.7396772503852844, 0.7272568941116333, 0.7151514887809753, 0.7033361196517944, 0.6917891502380371, 0.6804918646812439, 0.6694276928901672, 0.6585819721221924, 0.6479418277740479, 0.6374954581260681, 0.6272324919700623, 0.6171433925628662, 0.6072195172309875, 0.5974531769752502, 0.5878370404243469, 0.5783646702766418, 0.5690299868583679, 0.5598273873329163, 0.550751805305481, 0.5417983531951904, 0.5329626798629761, 0.5242405533790588, 0.5156282186508179, 0.5071220397949219, 0.49871864914894104, 0.4904148280620575, 0.48220765590667725, 0.47409430146217346, 0.466072142124176, 0.45813870429992676, 0.45029163360595703, 0.44252872467041016, 0.4348478317260742, 0.42724698781967163, 0.41972434520721436, 0.41227802634239197, 0.40490642189979553, 0.39760786294937134, 0.3903807997703552, 0.3832238018512726, 0.3761354684829712, 0.3691144585609436, 0.36215949058532715, 0.3552693724632263, 0.3484429717063904, 0.3416791558265686, 0.33497685194015503, 0.32833510637283325, 0.3217529058456421, 0.3152293860912323, 0.30876362323760986, 0.3023548424243927, 0.2960021495819092, 0.2897048592567444, 0.28346219658851624, 0.2772735059261322, 0.271138072013855, 0.2650552988052368, 0.25902456045150757, 0.25304529070854187, 0.24711695313453674, 0.24123899638652802, 0.23541094362735748, 0.22963231801986694, 0.22390270233154297, 0.21822164952754974, 0.21258877217769623, 0.20700371265411377, 0.20146611332893372, 0.1959756463766098, 0.19053204357624054, 0.18513499200344086, 0.17978426814079285, 0.1744796335697174, 0.16922089457511902, 0.16400785744190216, 0.1588403731584549, 0.15371830761432648, 0.14864157140254974, 0.14361007511615753, 0.13862377405166626, 0.13368265330791473, 0.12878671288490295, 0.12393598258495331, 0.11913054436445236, 0.11437050998210907, 0.10965602099895477, 0.1049872562289238, 0.10036443918943405, 0.09578784555196762, 0.09125780314207077, 0.08677466958761215, 0.08233889937400818, 0.07795098423957825, 0.07361150532960892, 0.06932111829519272, 0.06508058309555054, 0.06089077144861221, 0.05675266310572624, 0.05266740173101425, 0.048636294901371, 0.044660862535238266, 0.040742866694927216, 0.03688438981771469, 0.03308788686990738, 0.029356317594647408, 0.025693291798233986, 0.02210330404341221, 0.018592102453112602, 0.015167297795414925, 0.011839478276669979, 0.0086244847625494, 0.005548994988203049, 0.0026696291752159595]);
		rng_cooked = $toNativeArray("Int64", [new $Int64(1173834291, 3952672746), new $Int64(1081821761, 3130416987), new $Int64(324977939, 3414273807), new $Int64(1241840476, 2806224363), new $Int64(669549340, 1997590414), new $Int64(2103305448, 2402795971), new $Int64(1663160183, 1140819369), new $Int64(1120601685, 1788868961), new $Int64(1848035537, 1089001426), new $Int64(1235702047, 873593504), new $Int64(1911387977, 581324885), new $Int64(492609478, 1609182556), new $Int64(1069394745, 1241596776), new $Int64(1895445337, 1771189259), new $Int64(772864846, 3467012610), new $Int64(2006957225, 2344407434), new $Int64(402115761, 782467244), new $Int64(26335124, 3404933915), new $Int64(1063924276, 618867887), new $Int64(1178782866, 520164395), new $Int64(555910815, 1341358184), new $Int64(632398609, 665794848), new $Int64(1527227641, 3183648150), new $Int64(1781176124, 696329606), new $Int64(1789146075, 4151988961), new $Int64(60039534, 998951326), new $Int64(1535158725, 1364957564), new $Int64(63173359, 4090230633), new $Int64(649454641, 4009697548), new $Int64(248009524, 2569622517), new $Int64(778703922, 3742421481), new $Int64(1038377625, 1506914633), new $Int64(1738099768, 1983412561), new $Int64(236311649, 1436266083), new $Int64(1035966148, 3922894967), new $Int64(810508934, 1792680179), new $Int64(563141142, 1188796351), new $Int64(1349617468, 405968250), new $Int64(1044074554, 433754187), new $Int64(870549669, 4073162024), new $Int64(1053232044, 433121399), new $Int64(2451824, 4162580594), new $Int64(2010221076, 4132415622), new $Int64(611252600, 3033822028), new $Int64(2016407895, 824682382), new $Int64(2366218, 3583765414), new $Int64(1522878809, 535386927), new $Int64(1637219058, 2286693689), new $Int64(1453075389, 2968466525), new $Int64(193683513, 1351410206), new $Int64(1863677552, 1412813499), new $Int64(492736522, 4126267639), new $Int64(512765208, 2105529399), new $Int64(2132966268, 2413882233), new $Int64(947457634, 32226200), new $Int64(1149341356, 2032329073), new $Int64(106485445, 1356518208), new $Int64(79673492, 3430061722), new $Int64(663048513, 3820169661), new $Int64(481498454, 2981816134), new $Int64(1017155588, 4184371017), new $Int64(206574701, 2119206761), new $Int64(1295374591, 2472200560), new $Int64(1587026100, 2853524696), new $Int64(1307803389, 1681119904), new $Int64(1972496813, 95608918), new $Int64(392686347, 3690479145), new $Int64(941912722, 1397922290), new $Int64(988169623, 1516129515), new $Int64(1827305493, 1547420459), new $Int64(1311333971, 1470949486), new $Int64(194013850, 1336785672), new $Int64(2102397034, 4131677129), new $Int64(755205548, 4246329084), new $Int64(1004983461, 3788585631), new $Int64(2081005363, 3080389532), new $Int64(1501045284, 2215402037), new $Int64(391002300, 1171593935), new $Int64(1408774047, 1423855166), new $Int64(1628305930, 2276716302), new $Int64(1779030508, 2068027241), new $Int64(1369359303, 3427553297), new $Int64(189241615, 3289637845), new $Int64(1057480830, 3486407650), new $Int64(634572984, 3071877822), new $Int64(1159653919, 3363620705), new $Int64(1213226718, 4159821533), new $Int64(2070861710, 1894661), new $Int64(1472989750, 1156868282), new $Int64(348271067, 776219088), new $Int64(1646054810, 2425634259), new $Int64(1716021749, 680510161), new $Int64(1573220192, 1310101429), new $Int64(1095885995, 2964454134), new $Int64(1821788136, 3467098407), new $Int64(1990672920, 2109628894), new $Int64(7834944, 1232604732), new $Int64(309412934, 3261916179), new $Int64(1699175360, 434597899), new $Int64(235436061, 1624796439), new $Int64(521080809, 3589632480), new $Int64(1198416575, 864579159), new $Int64(208735487, 1380889830), new $Int64(619206309, 2654509477), new $Int64(1419738251, 1468209306), new $Int64(403198876, 100794388), new $Int64(956062190, 2991674471), new $Int64(1938816907, 2224662036), new $Int64(1973824487, 977097250), new $Int64(1351320195, 726419512), new $Int64(1964023751, 1747974366), new $Int64(1394388465, 1556430604), new $Int64(1097991433, 1080776742), new $Int64(1761636690, 280794874), new $Int64(117767733, 919835643), new $Int64(1180474222, 3434019658), new $Int64(196069168, 2461941785), new $Int64(133215641, 3615001066), new $Int64(417204809, 3103414427), new $Int64(790056561, 3380809712), new $Int64(879802240, 2724693469), new $Int64(547796833, 598827710), new $Int64(300924196, 3452273442), new $Int64(2071705424, 649274915), new $Int64(1346182319, 2585724112), new $Int64(636549385, 3165579553), new $Int64(1185578221, 2635894283), new $Int64(2094573470, 2053289721), new $Int64(985976581, 3169337108), new $Int64(1170569632, 144717764), new $Int64(1079216270, 1383666384), new $Int64(2022678706, 681540375), new $Int64(1375448925, 537050586), new $Int64(182715304, 315246468), new $Int64(226402871, 849323088), new $Int64(1262421183, 45543944), new $Int64(1201038398, 2319052083), new $Int64(2106775454, 3613090841), new $Int64(560472520, 2992171180), new $Int64(1765620479, 2068244785), new $Int64(917538188, 4239862634), new $Int64(777927839, 3892253031), new $Int64(720683925, 958186149), new $Int64(1724185863, 1877702262), new $Int64(1357886971, 837674867), new $Int64(1837048883, 1507589294), new $Int64(1905518400, 873336795), new $Int64(267722611, 2764496274), new $Int64(341003118, 4196182374), new $Int64(1080717893, 550964545), new $Int64(818747069, 420611474), new $Int64(222653272, 204265180), new $Int64(1549974541, 1787046383), new $Int64(1215581865, 3102292318), new $Int64(418321538, 1552199393), new $Int64(1243493047, 980542004), new $Int64(267284263, 3293718720), new $Int64(1179528763, 3771917473), new $Int64(599484404, 2195808264), new $Int64(252818753, 3894702887), new $Int64(780007692, 2099949527), new $Int64(1424094358, 338442522), new $Int64(490737398, 637158004), new $Int64(419862118, 281976339), new $Int64(574970164, 3619802330), new $Int64(1715552825, 3084554784), new $Int64(882872465, 4129772886), new $Int64(43084605, 1680378557), new $Int64(525521057, 3339087776), new $Int64(1680500332, 4220317857), new $Int64(211654685, 2959322499), new $Int64(1675600481, 1488354890), new $Int64(1312620086, 3958162143), new $Int64(920972075, 2773705983), new $Int64(1876039582, 225908689), new $Int64(963748535, 908216283), new $Int64(1541787429, 3574646075), new $Int64(319760557, 1936937569), new $Int64(1519770881, 75492235), new $Int64(816689472, 1935193178), new $Int64(2142521206, 2018250883), new $Int64(455141620, 3943126022), new $Int64(1546084160, 3066544345), new $Int64(1932392669, 2793082663), new $Int64(908474287, 3297036421), new $Int64(1640597065, 2206987825), new $Int64(1594236910, 807894872), new $Int64(366158341, 766252117), new $Int64(2060649606, 3833114345), new $Int64(845619743, 1255067973), new $Int64(1201145605, 741697208), new $Int64(671241040, 2810093753), new $Int64(1109032642, 4229340371), new $Int64(1462188720, 1361684224), new $Int64(988084219, 1906263026), new $Int64(475781207, 3904421704), new $Int64(1523946520, 1769075545), new $Int64(1062308525, 2621599764), new $Int64(1279509432, 3431891480), new $Int64(404732502, 1871896503), new $Int64(128756421, 1412808876), new $Int64(1605404688, 952876175), new $Int64(1917039957, 1824438899), new $Int64(1662295856, 1005035476), new $Int64(1990909507, 527508597), new $Int64(1288873303, 3066806859), new $Int64(565995893, 3244940914), new $Int64(1257737460, 209092916), new $Int64(1899814242, 1242699167), new $Int64(1433653252, 456723774), new $Int64(1776978905, 1001252870), new $Int64(1468772157, 2026725874), new $Int64(857254202, 2137562569), new $Int64(765939740, 3183366709), new $Int64(1533887628, 2612072960), new $Int64(56977098, 1727148468), new $Int64(949899753, 3803658212), new $Int64(1883670356, 479946959), new $Int64(685713571, 1562982345), new $Int64(201241205, 1766109365), new $Int64(700596547, 3257093788), new $Int64(1962768719, 2365720207), new $Int64(93384808, 3742754173), new $Int64(1689098413, 2878193673), new $Int64(1096135042, 2174002182), new $Int64(1313222695, 3573511231), new $Int64(1392911121, 1760299077), new $Int64(771856457, 2260779833), new $Int64(1281464374, 1452805722), new $Int64(917811730, 2940011802), new $Int64(1890251082, 1886183802), new $Int64(893897673, 2514369088), new $Int64(1644345561, 3924317791), new $Int64(172616216, 500935732), new $Int64(1403501753, 676580929), new $Int64(581571365, 1184984890), new $Int64(1455515235, 1271474274), new $Int64(318728910, 3163791473), new $Int64(2051027584, 2842487377), new $Int64(1511537551, 2170968612), new $Int64(573262976, 3535856740), new $Int64(94256461, 1488599718), new $Int64(966951817, 3408913763), new $Int64(60951736, 2501050084), new $Int64(1272353200, 1639124157), new $Int64(138001144, 4088176393), new $Int64(1574896563, 3989947576), new $Int64(1982239940, 3414355209), new $Int64(1355154361, 2275136352), new $Int64(89709303, 2151835223), new $Int64(1216338715, 1654534827), new $Int64(1467562197, 377892833), new $Int64(1664767638, 660204544), new $Int64(85706799, 390828249), new $Int64(725310955, 3402783878), new $Int64(678849488, 3717936603), new $Int64(1113532086, 2211058823), new $Int64(1564224320, 2692150867), new $Int64(1952770442, 1928910388), new $Int64(788716862, 3931011137), new $Int64(1083670504, 1112701047), new $Int64(2079333076, 2452299106), new $Int64(1251318826, 2337204777), new $Int64(1774877857, 273889282), new $Int64(1798719843, 1462008793), new $Int64(2138834788, 1554494002), new $Int64(952516517, 182675323), new $Int64(548928884, 1882802136), new $Int64(589279648, 3700220025), new $Int64(381039426, 3083431543), new $Int64(1295624457, 3622207527), new $Int64(338126939, 432729309), new $Int64(480013522, 2391914317), new $Int64(297925497, 235747924), new $Int64(2120733629, 3088823825), new $Int64(1402403853, 2314658321), new $Int64(1165929723, 2957634338), new $Int64(501323675, 4117056981), new $Int64(1564699815, 1482500298), new $Int64(1406657158, 840489337), new $Int64(799522364, 3483178565), new $Int64(532129761, 2074004656), new $Int64(724246478, 3643392642), new $Int64(1482330167, 1583624461), new $Int64(1261660694, 287473085), new $Int64(1667835381, 3136843981), new $Int64(1138806821, 1266970974), new $Int64(135185781, 1998688839), new $Int64(392094735, 1492900209), new $Int64(1031326774, 1538112737), new $Int64(76914806, 2207265429), new $Int64(260686035, 963263315), new $Int64(1671145500, 2295892134), new $Int64(1068469660, 2002560897), new $Int64(1791233343, 1369254035), new $Int64(33436120, 3353312708), new $Int64(57507843, 947771099), new $Int64(201728503, 1747061399), new $Int64(1507240140, 2047354631), new $Int64(720000810, 4165367136), new $Int64(479265078, 3388864963), new $Int64(1195302398, 286492130), new $Int64(2045622690, 2795735007), new $Int64(1431753082, 3703961339), new $Int64(1999047161, 1797825479), new $Int64(1429039600, 1116589674), new $Int64(482063550, 2593309206), new $Int64(1329049334, 3404995677), new $Int64(1396904208, 3453462936), new $Int64(1014767077, 3016498634), new $Int64(75698599, 1650371545), new $Int64(1592007860, 212344364), new $Int64(1127766888, 3843932156), new $Int64(1399463792, 3573129983), new $Int64(1256901817, 665897820), new $Int64(1071492673, 1675628772), new $Int64(243225682, 2831752928), new $Int64(2120298836, 1486294219), new $Int64(193076235, 268782709), new $Int64(1145360145, 4186179080), new $Int64(624342951, 1613720397), new $Int64(857179861, 2703686015), new $Int64(1235864944, 2205342611), new $Int64(1474779655, 1411666394), new $Int64(619028749, 677744900), new $Int64(270855115, 4172867247), new $Int64(135494707, 2163418403), new $Int64(849547544, 2841526879), new $Int64(1029966689, 1082141470), new $Int64(377371856, 4046134367), new $Int64(51415528, 2142943655), new $Int64(1897659315, 3124627521), new $Int64(998228909, 219992939), new $Int64(1068692697, 1756846531), new $Int64(1283749206, 1225118210), new $Int64(1621625642, 1647770243), new $Int64(111523943, 444807907), new $Int64(2036369448, 3952076173), new $Int64(53201823, 1461839639), new $Int64(315761893, 3699250910), new $Int64(702974850, 1373688981), new $Int64(734022261, 147523747), new $Int64(100152742, 1211276581), new $Int64(1294440951, 2548832680), new $Int64(1144696256, 1995631888), new $Int64(154500578, 2011457303), new $Int64(796460974, 3057425772), new $Int64(667839456, 81484597), new $Int64(465502760, 3646681560), new $Int64(775020923, 635548515), new $Int64(602489502, 2508044581), new $Int64(353263531, 1014917157), new $Int64(719992433, 3214891315), new $Int64(852684611, 959582252), new $Int64(226415134, 3347040449), new $Int64(1784615552, 4102971975), new $Int64(397887437, 4078022210), new $Int64(1610679822, 2851767182), new $Int64(749162636, 1540160644), new $Int64(598384772, 1057290595), new $Int64(2034890660, 3907769253), new $Int64(579300318, 4248952684), new $Int64(1092907599, 132554364), new $Int64(1061621234, 1029351092), new $Int64(697840928, 2583007416), new $Int64(298619124, 1486185789), new $Int64(55905697, 2871589073), new $Int64(2017643612, 723203291), new $Int64(146250550, 2494333952), new $Int64(1064490251, 2230939180), new $Int64(342915576, 3943232912), new $Int64(1768732449, 2181367922), new $Int64(1418222537, 2889274791), new $Int64(1824032949, 2046728161), new $Int64(1653899792, 1376052477), new $Int64(1022327048, 381236993), new $Int64(1034385958, 3188942166), new $Int64(2073003539, 350070824), new $Int64(144881592, 61758415), new $Int64(1405659422, 3492950336), new $Int64(117440928, 3093818430), new $Int64(1693893113, 2962480613), new $Int64(235432940, 3154871160), new $Int64(511005079, 3228564679), new $Int64(610731502, 888276216), new $Int64(1200780674, 3574998604), new $Int64(870415268, 1967526716), new $Int64(591335707, 1554691298), new $Int64(574459414, 339944798), new $Int64(1223764147, 1154515356), new $Int64(1825645307, 967516237), new $Int64(1546195135, 596588202), new $Int64(279882768, 3764362170), new $Int64(492091056, 266611402), new $Int64(1754227768, 2047856075), new $Int64(1146757215, 21444105), new $Int64(1198058894, 3065563181), new $Int64(1915064845, 1140663212), new $Int64(633187674, 2323741028), new $Int64(2126290159, 3103873707), new $Int64(1008658319, 2766828349), new $Int64(1661896145, 1970872996), new $Int64(1628585413, 3766615585), new $Int64(1552335120, 2036813414), new $Int64(152606527, 3105536507), new $Int64(13954645, 3396176938), new $Int64(1426081645, 1377154485), new $Int64(2085644467, 3807014186), new $Int64(543009040, 3710110597), new $Int64(396058129, 916420443), new $Int64(734556788, 2103831255), new $Int64(381322154, 717331943), new $Int64(572884752, 3550505941), new $Int64(45939673, 378749927), new $Int64(149867929, 611017331), new $Int64(592130075, 758907650), new $Int64(1012992349, 154266815), new $Int64(1107028706, 1407468696), new $Int64(469292398, 970098704), new $Int64(1862426162, 1971660656), new $Int64(998365243, 3332747885), new $Int64(1947089649, 1935189867), new $Int64(1510248801, 203520055), new $Int64(842317902, 3916463034), new $Int64(1758884993, 3474113316), new $Int64(1036101639, 316544223), new $Int64(373738757, 1650844677), new $Int64(1240292229, 4267565603), new $Int64(1077208624, 2501167616), new $Int64(626831785, 3929401789), new $Int64(56122796, 337170252), new $Int64(1186981558, 2061966842), new $Int64(1843292800, 2508461464), new $Int64(206012532, 2791377107), new $Int64(1240791848, 1227227588), new $Int64(1813978778, 1709681848), new $Int64(1153692192, 3768820575), new $Int64(1145186199, 2887126398), new $Int64(700372314, 296561685), new $Int64(700300844, 3729960077), new $Int64(575172304, 372833036), new $Int64(2078875613, 2409779288), new $Int64(1829161290, 555274064), new $Int64(1041887929, 4239804901), new $Int64(1839403216, 3723486978), new $Int64(498390553, 2145871984), new $Int64(564717933, 3565480803), new $Int64(578829821, 2197313814), new $Int64(974785092, 3613674566), new $Int64(438638731, 3042093666), new $Int64(2050927384, 3324034321), new $Int64(869420878, 3708873369), new $Int64(946682149, 1698090092), new $Int64(1618900382, 4213940712), new $Int64(304003901, 2087477361), new $Int64(381315848, 2407950639), new $Int64(851258090, 3942568569), new $Int64(923583198, 4088074412), new $Int64(723260036, 2964773675), new $Int64(1473561819, 1539178386), new $Int64(1062961552, 2694849566), new $Int64(460977733, 2120273838), new $Int64(542912908, 2484608657), new $Int64(880846449, 2956190677), new $Int64(1970902366, 4223313749), new $Int64(662161910, 3502682327), new $Int64(705634754, 4133891139), new $Int64(1116124348, 1166449596), new $Int64(1038247601, 3362705993), new $Int64(93734798, 3892921029), new $Int64(1876124043, 786869787), new $Int64(1057490746, 1046342263), new $Int64(242763728, 493777327), new $Int64(1293910447, 3304827646), new $Int64(616460742, 125356352), new $Int64(499300063, 74094113), new $Int64(1351896723, 2500816079), new $Int64(1657235204, 514015239), new $Int64(1377565129, 543520454), new $Int64(107706923, 3614531153), new $Int64(2056746300, 2356753985), new $Int64(1390062617, 2018141668), new $Int64(131272971, 2087974891), new $Int64(644556607, 3166972343), new $Int64(372256200, 1517638666), new $Int64(1212207984, 173466846), new $Int64(1451709187, 4241513471), new $Int64(733932806, 2783126920), new $Int64(1972004134, 4167264826), new $Int64(29260506, 3907395640), new $Int64(1236582087, 1539634186), new $Int64(1551526350, 178241987), new $Int64(2034206012, 182168164), new $Int64(1044953189, 2386154934), new $Int64(1379126408, 4077374341), new $Int64(32803926, 1732699140), new $Int64(1726425903, 1041306002), new $Int64(1860414813, 2068001749), new $Int64(1005320202, 3208962910), new $Int64(844054010, 697710380), new $Int64(638124245, 2228431183), new $Int64(1337169671, 3554678728), new $Int64(1396494601, 173470263), new $Int64(2061597383, 3848297795), new $Int64(1220546671, 246236185), new $Int64(163293187, 2066374846), new $Int64(1771673660, 312890749), new $Int64(703378057, 3573310289), new $Int64(1548631747, 143166754), new $Int64(613554316, 2081511079), new $Int64(1197802104, 486038032), new $Int64(240999859, 2982218564), new $Int64(364901986, 1000939191), new $Int64(1902782651, 2750454885), new $Int64(1475638791, 3375313137), new $Int64(503615608, 881302957), new $Int64(638698903, 2514186393), new $Int64(443860803, 360024739), new $Int64(1399671872, 292500025), new $Int64(1381210821, 2276300752), new $Int64(521803381, 4069087683), new $Int64(208500981, 1637778212), new $Int64(720490469, 1676670893), new $Int64(1067262482, 3855174429), new $Int64(2114075974, 2067248671), new $Int64(2058057389, 2884561259), new $Int64(1341742553, 2456511185), new $Int64(983726246, 561175414), new $Int64(427994085, 432588903), new $Int64(885133709, 4059399550), new $Int64(2054387382, 1075014784), new $Int64(413651020, 2728058415), new $Int64(1839142064, 1299703678), new $Int64(1262333188, 2347583393), new $Int64(1285481956, 2468164145), new $Int64(989129637, 1140014346), new $Int64(2033889184, 1936972070), new $Int64(409904655, 3870530098), new $Int64(1662989391, 1717789158), new $Int64(1914486492, 1153452491), new $Int64(1157059232, 3948827651), new $Int64(790338018, 2101413152), new $Int64(1495744672, 3854091229), new $Int64(83644069, 4215565463), new $Int64(762206335, 1202710438), new $Int64(1582574611, 2072216740), new $Int64(705690639, 2066751068), new $Int64(33900336, 173902580), new $Int64(1405499842, 142459001), new $Int64(172391592, 1889151926), new $Int64(1648540523, 3034199774), new $Int64(1618587731, 516490102), new $Int64(93114264, 3692577783), new $Int64(68662295, 2953948865), new $Int64(1826544975, 4041040923), new $Int64(204965672, 592046130), new $Int64(1441840008, 384297211), new $Int64(95834184, 265863924), new $Int64(2101717619, 1333136237), new $Int64(1499611781, 1406273556), new $Int64(1074670496, 426305476), new $Int64(125704633, 2750898176), new $Int64(488068495, 1633944332), new $Int64(2037723464, 3236349343), new $Int64(444060402, 4013676611), new $Int64(1718532237, 2265047407), new $Int64(1433593806, 875071080), new $Int64(1804436145, 1418843655), new $Int64(2009228711, 451657300), new $Int64(1229446621, 1866374663), new $Int64(1653472867, 1551455622), new $Int64(577191481, 3560962459), new $Int64(1669204077, 3347903778), new $Int64(1849156454, 2675874918), new $Int64(316128071, 2762991672), new $Int64(530492383, 3689068477), new $Int64(844089962, 4071997905), new $Int64(1508155730, 1381702441), new $Int64(2089931018, 2373284878), new $Int64(1283216186, 2143983064), new $Int64(308739063, 1938207195), new $Int64(1754949306, 1188152253), new $Int64(1272345009, 615870490), new $Int64(742653194, 2662252621), new $Int64(1477718295, 3839976789), new $Int64(56149435, 306752547), new $Int64(720795581, 2162363077), new $Int64(2090431015, 2767224719), new $Int64(675859549, 2628837712), new $Int64(1678405918, 2967771969), new $Int64(1694285728, 499792248), new $Int64(403352367, 4285253508), new $Int64(962357072, 2856511070), new $Int64(679471692, 2526409716), new $Int64(353777175, 1240875658), new $Int64(1232590226, 2577342868), new $Int64(1146185433, 4136853496), new $Int64(670368674, 2403540137), new $Int64(1372824515, 1371410668), new $Int64(1970921600, 371758825), new $Int64(1706420536, 1528834084), new $Int64(2075795018, 1504757260), new $Int64(685663576, 699052551), new $Int64(1641940109, 3347789870), new $Int64(1951619734, 3430604759), new $Int64(2119672219, 1935601723), new $Int64(966789690, 834676166)]);
		globalRand = New(new lockedSource.Ptr(new sync.Mutex.Ptr(), NewSource(new $Int64(0, 1))));
	};
	return $pkg;
})();
$packages["net"] = (function() {
	var $pkg = {}, runtime = $packages["runtime"], errors = $packages["errors"], time = $packages["time"], rand = $packages["math/rand"], sort = $packages["sort"], io = $packages["io"], os = $packages["os"], sync = $packages["sync"], atomic = $packages["sync/atomic"], syscall = $packages["syscall"], dnsRR_Header, dnsRR_CNAME, dnsRR_HINFO, dnsRR_MB, dnsRR_MG, dnsRR_MINFO, dnsRR_MR, dnsRR_MX, dnsRR_NS, dnsRR_PTR, dnsRR_SOA, dnsRR_TXT, dnsRR_SRV, dnsRR_A, dnsRR_AAAA, fdMutex, pollDesc, netFD, Interface, Flags, IP, IPMask, IPNet, ParseError, IPAddr, HardwareAddr, Addr, Conn, conn, Error, Listener, OpError, temporary, timeout, timeoutError, InvalidAddrError, writerOnly, sockaddr, TCPAddr, TCPConn, TCPListener, rr_mk, serverInit, tryDupCloexec, errInvalidInterface, errInvalidInterfaceIndex, errInvalidInterfaceName, errNoSuchInterface, errNoSuchMulticastInterface, flagNames, v4InV6Prefix, classAMask, classBMask, classCMask, supportsIPv4, supportsIPv6, supportsIPv4map, errNoSuitableAddress, listenerBacklog, errMissingAddress, errTimeout, errClosing, threadLimit, _map, _key, Listen, runtime_Semacquire, runtime_Semrelease, runtimeNano, runtime_pollServerInit, runtime_pollOpen, runtime_pollClose, runtime_pollWait, runtime_pollWaitCanceled, runtime_pollReset, runtime_pollSetDeadline, runtime_pollUnblock, convertErr, setDeadlineImpl, sysInit, newFD, chkReadErr, dupCloseOnExec, dupCloseOnExecOld, closesocket, InterfaceByIndex, interfaceByIndex, InterfaceByName, interfaceTable, parseInterfaceTable, newLink, linkFlags, interfaceAddrTable, newAddr, interfaceMulticastAddrTable, newMulticastAddr, IPv4, IPv4Mask, isZeros, allFF, ipEmptyString, bytesEqual, simpleMaskLength, networkNumberAndMask, parseIPv4, parseIPv6, ParseIP, init, splitHostZone, JoinHostPort, zoneToString, zoneToInt, probeIPv4Stack, probeIPv6Stack, ipToSockaddr, genericReadFrom, byteIndex, dtoi, xtoi, itoa, itod, itox, last, sendFile, maxListenerBacklog, boolint, setReadBuffer, setWriteBuffer, setKeepAlive, setLinger, accept, sockaddrToTCP, newTCPConn, setKeepAlivePeriod, setNoDelay;
	dnsRR_Header = $pkg.dnsRR_Header = $newType(0, "Struct", "net.dnsRR_Header", "dnsRR_Header", "net", function(Name_, Rrtype_, Class_, Ttl_, Rdlength_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.Rrtype = Rrtype_ !== undefined ? Rrtype_ : 0;
		this.Class = Class_ !== undefined ? Class_ : 0;
		this.Ttl = Ttl_ !== undefined ? Ttl_ : 0;
		this.Rdlength = Rdlength_ !== undefined ? Rdlength_ : 0;
	});
	dnsRR_CNAME = $pkg.dnsRR_CNAME = $newType(0, "Struct", "net.dnsRR_CNAME", "dnsRR_CNAME", "net", function(Hdr_, Cname_) {
		this.$val = this;
		this.Hdr = Hdr_ !== undefined ? Hdr_ : new dnsRR_Header.Ptr();
		this.Cname = Cname_ !== undefined ? Cname_ : "";
	});
	dnsRR_HINFO = $pkg.dnsRR_HINFO = $newType(0, "Struct", "net.dnsRR_HINFO", "dnsRR_HINFO", "net", function(Hdr_, Cpu_, Os_) {
		this.$val = this;
		this.Hdr = Hdr_ !== undefined ? Hdr_ : new dnsRR_Header.Ptr();
		this.Cpu = Cpu_ !== undefined ? Cpu_ : "";
		this.Os = Os_ !== undefined ? Os_ : "";
	});
	dnsRR_MB = $pkg.dnsRR_MB = $newType(0, "Struct", "net.dnsRR_MB", "dnsRR_MB", "net", function(Hdr_, Mb_) {
		this.$val = this;
		this.Hdr = Hdr_ !== undefined ? Hdr_ : new dnsRR_Header.Ptr();
		this.Mb = Mb_ !== undefined ? Mb_ : "";
	});
	dnsRR_MG = $pkg.dnsRR_MG = $newType(0, "Struct", "net.dnsRR_MG", "dnsRR_MG", "net", function(Hdr_, Mg_) {
		this.$val = this;
		this.Hdr = Hdr_ !== undefined ? Hdr_ : new dnsRR_Header.Ptr();
		this.Mg = Mg_ !== undefined ? Mg_ : "";
	});
	dnsRR_MINFO = $pkg.dnsRR_MINFO = $newType(0, "Struct", "net.dnsRR_MINFO", "dnsRR_MINFO", "net", function(Hdr_, Rmail_, Email_) {
		this.$val = this;
		this.Hdr = Hdr_ !== undefined ? Hdr_ : new dnsRR_Header.Ptr();
		this.Rmail = Rmail_ !== undefined ? Rmail_ : "";
		this.Email = Email_ !== undefined ? Email_ : "";
	});
	dnsRR_MR = $pkg.dnsRR_MR = $newType(0, "Struct", "net.dnsRR_MR", "dnsRR_MR", "net", function(Hdr_, Mr_) {
		this.$val = this;
		this.Hdr = Hdr_ !== undefined ? Hdr_ : new dnsRR_Header.Ptr();
		this.Mr = Mr_ !== undefined ? Mr_ : "";
	});
	dnsRR_MX = $pkg.dnsRR_MX = $newType(0, "Struct", "net.dnsRR_MX", "dnsRR_MX", "net", function(Hdr_, Pref_, Mx_) {
		this.$val = this;
		this.Hdr = Hdr_ !== undefined ? Hdr_ : new dnsRR_Header.Ptr();
		this.Pref = Pref_ !== undefined ? Pref_ : 0;
		this.Mx = Mx_ !== undefined ? Mx_ : "";
	});
	dnsRR_NS = $pkg.dnsRR_NS = $newType(0, "Struct", "net.dnsRR_NS", "dnsRR_NS", "net", function(Hdr_, Ns_) {
		this.$val = this;
		this.Hdr = Hdr_ !== undefined ? Hdr_ : new dnsRR_Header.Ptr();
		this.Ns = Ns_ !== undefined ? Ns_ : "";
	});
	dnsRR_PTR = $pkg.dnsRR_PTR = $newType(0, "Struct", "net.dnsRR_PTR", "dnsRR_PTR", "net", function(Hdr_, Ptr_) {
		this.$val = this;
		this.Hdr = Hdr_ !== undefined ? Hdr_ : new dnsRR_Header.Ptr();
		this.Ptr = Ptr_ !== undefined ? Ptr_ : "";
	});
	dnsRR_SOA = $pkg.dnsRR_SOA = $newType(0, "Struct", "net.dnsRR_SOA", "dnsRR_SOA", "net", function(Hdr_, Ns_, Mbox_, Serial_, Refresh_, Retry_, Expire_, Minttl_) {
		this.$val = this;
		this.Hdr = Hdr_ !== undefined ? Hdr_ : new dnsRR_Header.Ptr();
		this.Ns = Ns_ !== undefined ? Ns_ : "";
		this.Mbox = Mbox_ !== undefined ? Mbox_ : "";
		this.Serial = Serial_ !== undefined ? Serial_ : 0;
		this.Refresh = Refresh_ !== undefined ? Refresh_ : 0;
		this.Retry = Retry_ !== undefined ? Retry_ : 0;
		this.Expire = Expire_ !== undefined ? Expire_ : 0;
		this.Minttl = Minttl_ !== undefined ? Minttl_ : 0;
	});
	dnsRR_TXT = $pkg.dnsRR_TXT = $newType(0, "Struct", "net.dnsRR_TXT", "dnsRR_TXT", "net", function(Hdr_, Txt_) {
		this.$val = this;
		this.Hdr = Hdr_ !== undefined ? Hdr_ : new dnsRR_Header.Ptr();
		this.Txt = Txt_ !== undefined ? Txt_ : "";
	});
	dnsRR_SRV = $pkg.dnsRR_SRV = $newType(0, "Struct", "net.dnsRR_SRV", "dnsRR_SRV", "net", function(Hdr_, Priority_, Weight_, Port_, Target_) {
		this.$val = this;
		this.Hdr = Hdr_ !== undefined ? Hdr_ : new dnsRR_Header.Ptr();
		this.Priority = Priority_ !== undefined ? Priority_ : 0;
		this.Weight = Weight_ !== undefined ? Weight_ : 0;
		this.Port = Port_ !== undefined ? Port_ : 0;
		this.Target = Target_ !== undefined ? Target_ : "";
	});
	dnsRR_A = $pkg.dnsRR_A = $newType(0, "Struct", "net.dnsRR_A", "dnsRR_A", "net", function(Hdr_, A_) {
		this.$val = this;
		this.Hdr = Hdr_ !== undefined ? Hdr_ : new dnsRR_Header.Ptr();
		this.A = A_ !== undefined ? A_ : 0;
	});
	dnsRR_AAAA = $pkg.dnsRR_AAAA = $newType(0, "Struct", "net.dnsRR_AAAA", "dnsRR_AAAA", "net", function(Hdr_, AAAA_) {
		this.$val = this;
		this.Hdr = Hdr_ !== undefined ? Hdr_ : new dnsRR_Header.Ptr();
		this.AAAA = AAAA_ !== undefined ? AAAA_ : ($arrayType($Uint8, 16)).zero();
	});
	fdMutex = $pkg.fdMutex = $newType(0, "Struct", "net.fdMutex", "fdMutex", "net", function(state_, rsema_, wsema_) {
		this.$val = this;
		this.state = state_ !== undefined ? state_ : new $Uint64(0, 0);
		this.rsema = rsema_ !== undefined ? rsema_ : 0;
		this.wsema = wsema_ !== undefined ? wsema_ : 0;
	});
	pollDesc = $pkg.pollDesc = $newType(0, "Struct", "net.pollDesc", "pollDesc", "net", function(runtimeCtx_) {
		this.$val = this;
		this.runtimeCtx = runtimeCtx_ !== undefined ? runtimeCtx_ : 0;
	});
	netFD = $pkg.netFD = $newType(0, "Struct", "net.netFD", "netFD", "net", function(fdmu_, sysfd_, family_, sotype_, isConnected_, net_, laddr_, raddr_, pd_) {
		this.$val = this;
		this.fdmu = fdmu_ !== undefined ? fdmu_ : new fdMutex.Ptr();
		this.sysfd = sysfd_ !== undefined ? sysfd_ : 0;
		this.family = family_ !== undefined ? family_ : 0;
		this.sotype = sotype_ !== undefined ? sotype_ : 0;
		this.isConnected = isConnected_ !== undefined ? isConnected_ : false;
		this.net = net_ !== undefined ? net_ : "";
		this.laddr = laddr_ !== undefined ? laddr_ : $ifaceNil;
		this.raddr = raddr_ !== undefined ? raddr_ : $ifaceNil;
		this.pd = pd_ !== undefined ? pd_ : new pollDesc.Ptr();
	});
	Interface = $pkg.Interface = $newType(0, "Struct", "net.Interface", "Interface", "net", function(Index_, MTU_, Name_, HardwareAddr_, Flags_) {
		this.$val = this;
		this.Index = Index_ !== undefined ? Index_ : 0;
		this.MTU = MTU_ !== undefined ? MTU_ : 0;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.HardwareAddr = HardwareAddr_ !== undefined ? HardwareAddr_ : HardwareAddr.nil;
		this.Flags = Flags_ !== undefined ? Flags_ : 0;
	});
	Flags = $pkg.Flags = $newType(4, "Uint", "net.Flags", "Flags", "net", null);
	IP = $pkg.IP = $newType(12, "Slice", "net.IP", "IP", "net", null);
	IPMask = $pkg.IPMask = $newType(12, "Slice", "net.IPMask", "IPMask", "net", null);
	IPNet = $pkg.IPNet = $newType(0, "Struct", "net.IPNet", "IPNet", "net", function(IP_, Mask_) {
		this.$val = this;
		this.IP = IP_ !== undefined ? IP_ : IP.nil;
		this.Mask = Mask_ !== undefined ? Mask_ : IPMask.nil;
	});
	ParseError = $pkg.ParseError = $newType(0, "Struct", "net.ParseError", "ParseError", "net", function(Type_, Text_) {
		this.$val = this;
		this.Type = Type_ !== undefined ? Type_ : "";
		this.Text = Text_ !== undefined ? Text_ : "";
	});
	IPAddr = $pkg.IPAddr = $newType(0, "Struct", "net.IPAddr", "IPAddr", "net", function(IP_, Zone_) {
		this.$val = this;
		this.IP = IP_ !== undefined ? IP_ : IP.nil;
		this.Zone = Zone_ !== undefined ? Zone_ : "";
	});
	HardwareAddr = $pkg.HardwareAddr = $newType(12, "Slice", "net.HardwareAddr", "HardwareAddr", "net", null);
	Addr = $pkg.Addr = $newType(8, "Interface", "net.Addr", "Addr", "net", null);
	Conn = $pkg.Conn = $newType(8, "Interface", "net.Conn", "Conn", "net", null);
	conn = $pkg.conn = $newType(0, "Struct", "net.conn", "conn", "net", function(fd_) {
		this.$val = this;
		this.fd = fd_ !== undefined ? fd_ : ($ptrType(netFD)).nil;
	});
	Error = $pkg.Error = $newType(8, "Interface", "net.Error", "Error", "net", null);
	Listener = $pkg.Listener = $newType(8, "Interface", "net.Listener", "Listener", "net", null);
	OpError = $pkg.OpError = $newType(0, "Struct", "net.OpError", "OpError", "net", function(Op_, Net_, Addr_, Err_) {
		this.$val = this;
		this.Op = Op_ !== undefined ? Op_ : "";
		this.Net = Net_ !== undefined ? Net_ : "";
		this.Addr = Addr_ !== undefined ? Addr_ : $ifaceNil;
		this.Err = Err_ !== undefined ? Err_ : $ifaceNil;
	});
	temporary = $pkg.temporary = $newType(8, "Interface", "net.temporary", "temporary", "net", null);
	timeout = $pkg.timeout = $newType(8, "Interface", "net.timeout", "timeout", "net", null);
	timeoutError = $pkg.timeoutError = $newType(0, "Struct", "net.timeoutError", "timeoutError", "net", function() {
		this.$val = this;
	});
	InvalidAddrError = $pkg.InvalidAddrError = $newType(8, "String", "net.InvalidAddrError", "InvalidAddrError", "net", null);
	writerOnly = $pkg.writerOnly = $newType(0, "Struct", "net.writerOnly", "writerOnly", "net", function(Writer_) {
		this.$val = this;
		this.Writer = Writer_ !== undefined ? Writer_ : $ifaceNil;
	});
	sockaddr = $pkg.sockaddr = $newType(8, "Interface", "net.sockaddr", "sockaddr", "net", null);
	TCPAddr = $pkg.TCPAddr = $newType(0, "Struct", "net.TCPAddr", "TCPAddr", "net", function(IP_, Port_, Zone_) {
		this.$val = this;
		this.IP = IP_ !== undefined ? IP_ : IP.nil;
		this.Port = Port_ !== undefined ? Port_ : 0;
		this.Zone = Zone_ !== undefined ? Zone_ : "";
	});
	TCPConn = $pkg.TCPConn = $newType(0, "Struct", "net.TCPConn", "TCPConn", "net", function(conn_) {
		this.$val = this;
		this.conn = conn_ !== undefined ? conn_ : new conn.Ptr();
	});
	TCPListener = $pkg.TCPListener = $newType(0, "Struct", "net.TCPListener", "TCPListener", "net", function(fd_) {
		this.$val = this;
		this.fd = fd_ !== undefined ? fd_ : ($ptrType(netFD)).nil;
	});
	Listen = $pkg.Listen = function(net, laddr) {
		$panic(new runtime.NotSupportedError.Ptr("net"));
	};
	dnsRR_Header.Ptr.prototype.Header = function() {
		var h;
		h = this;
		return h;
	};
	dnsRR_Header.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_Header.Ptr.prototype.Walk = function(f) {
		var h;
		h = this;
		return f(new ($ptrType($String))(function() { return this.$target.Name; }, function($v) { this.$target.Name = $v; }, h), "Name", "domain") && f(new ($ptrType($Uint16))(function() { return this.$target.Rrtype; }, function($v) { this.$target.Rrtype = $v; }, h), "Rrtype", "") && f(new ($ptrType($Uint16))(function() { return this.$target.Class; }, function($v) { this.$target.Class = $v; }, h), "Class", "") && f(new ($ptrType($Uint32))(function() { return this.$target.Ttl; }, function($v) { this.$target.Ttl = $v; }, h), "Ttl", "") && f(new ($ptrType($Uint16))(function() { return this.$target.Rdlength; }, function($v) { this.$target.Rdlength = $v; }, h), "Rdlength", "");
	};
	dnsRR_Header.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_CNAME.Ptr.prototype.Header = function() {
		var rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_CNAME.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_CNAME.Ptr.prototype.Walk = function(f) {
		var rr;
		rr = this;
		return rr.Hdr.Walk(f) && f(new ($ptrType($String))(function() { return this.$target.Cname; }, function($v) { this.$target.Cname = $v; }, rr), "Cname", "domain");
	};
	dnsRR_CNAME.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_HINFO.Ptr.prototype.Header = function() {
		var rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_HINFO.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_HINFO.Ptr.prototype.Walk = function(f) {
		var rr;
		rr = this;
		return rr.Hdr.Walk(f) && f(new ($ptrType($String))(function() { return this.$target.Cpu; }, function($v) { this.$target.Cpu = $v; }, rr), "Cpu", "") && f(new ($ptrType($String))(function() { return this.$target.Os; }, function($v) { this.$target.Os = $v; }, rr), "Os", "");
	};
	dnsRR_HINFO.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_MB.Ptr.prototype.Header = function() {
		var rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_MB.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_MB.Ptr.prototype.Walk = function(f) {
		var rr;
		rr = this;
		return rr.Hdr.Walk(f) && f(new ($ptrType($String))(function() { return this.$target.Mb; }, function($v) { this.$target.Mb = $v; }, rr), "Mb", "domain");
	};
	dnsRR_MB.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_MG.Ptr.prototype.Header = function() {
		var rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_MG.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_MG.Ptr.prototype.Walk = function(f) {
		var rr;
		rr = this;
		return rr.Hdr.Walk(f) && f(new ($ptrType($String))(function() { return this.$target.Mg; }, function($v) { this.$target.Mg = $v; }, rr), "Mg", "domain");
	};
	dnsRR_MG.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_MINFO.Ptr.prototype.Header = function() {
		var rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_MINFO.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_MINFO.Ptr.prototype.Walk = function(f) {
		var rr;
		rr = this;
		return rr.Hdr.Walk(f) && f(new ($ptrType($String))(function() { return this.$target.Rmail; }, function($v) { this.$target.Rmail = $v; }, rr), "Rmail", "domain") && f(new ($ptrType($String))(function() { return this.$target.Email; }, function($v) { this.$target.Email = $v; }, rr), "Email", "domain");
	};
	dnsRR_MINFO.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_MR.Ptr.prototype.Header = function() {
		var rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_MR.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_MR.Ptr.prototype.Walk = function(f) {
		var rr;
		rr = this;
		return rr.Hdr.Walk(f) && f(new ($ptrType($String))(function() { return this.$target.Mr; }, function($v) { this.$target.Mr = $v; }, rr), "Mr", "domain");
	};
	dnsRR_MR.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_MX.Ptr.prototype.Header = function() {
		var rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_MX.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_MX.Ptr.prototype.Walk = function(f) {
		var rr;
		rr = this;
		return rr.Hdr.Walk(f) && f(new ($ptrType($Uint16))(function() { return this.$target.Pref; }, function($v) { this.$target.Pref = $v; }, rr), "Pref", "") && f(new ($ptrType($String))(function() { return this.$target.Mx; }, function($v) { this.$target.Mx = $v; }, rr), "Mx", "domain");
	};
	dnsRR_MX.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_NS.Ptr.prototype.Header = function() {
		var rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_NS.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_NS.Ptr.prototype.Walk = function(f) {
		var rr;
		rr = this;
		return rr.Hdr.Walk(f) && f(new ($ptrType($String))(function() { return this.$target.Ns; }, function($v) { this.$target.Ns = $v; }, rr), "Ns", "domain");
	};
	dnsRR_NS.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_PTR.Ptr.prototype.Header = function() {
		var rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_PTR.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_PTR.Ptr.prototype.Walk = function(f) {
		var rr;
		rr = this;
		return rr.Hdr.Walk(f) && f(new ($ptrType($String))(function() { return this.$target.Ptr; }, function($v) { this.$target.Ptr = $v; }, rr), "Ptr", "domain");
	};
	dnsRR_PTR.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_SOA.Ptr.prototype.Header = function() {
		var rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_SOA.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_SOA.Ptr.prototype.Walk = function(f) {
		var rr;
		rr = this;
		return rr.Hdr.Walk(f) && f(new ($ptrType($String))(function() { return this.$target.Ns; }, function($v) { this.$target.Ns = $v; }, rr), "Ns", "domain") && f(new ($ptrType($String))(function() { return this.$target.Mbox; }, function($v) { this.$target.Mbox = $v; }, rr), "Mbox", "domain") && f(new ($ptrType($Uint32))(function() { return this.$target.Serial; }, function($v) { this.$target.Serial = $v; }, rr), "Serial", "") && f(new ($ptrType($Uint32))(function() { return this.$target.Refresh; }, function($v) { this.$target.Refresh = $v; }, rr), "Refresh", "") && f(new ($ptrType($Uint32))(function() { return this.$target.Retry; }, function($v) { this.$target.Retry = $v; }, rr), "Retry", "") && f(new ($ptrType($Uint32))(function() { return this.$target.Expire; }, function($v) { this.$target.Expire = $v; }, rr), "Expire", "") && f(new ($ptrType($Uint32))(function() { return this.$target.Minttl; }, function($v) { this.$target.Minttl = $v; }, rr), "Minttl", "");
	};
	dnsRR_SOA.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_TXT.Ptr.prototype.Header = function() {
		var rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_TXT.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_TXT.Ptr.prototype.Walk = function(f) {
		var rr;
		rr = this;
		return rr.Hdr.Walk(f) && f(new ($ptrType($String))(function() { return this.$target.Txt; }, function($v) { this.$target.Txt = $v; }, rr), "Txt", "");
	};
	dnsRR_TXT.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_SRV.Ptr.prototype.Header = function() {
		var rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_SRV.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_SRV.Ptr.prototype.Walk = function(f) {
		var rr;
		rr = this;
		return rr.Hdr.Walk(f) && f(new ($ptrType($Uint16))(function() { return this.$target.Priority; }, function($v) { this.$target.Priority = $v; }, rr), "Priority", "") && f(new ($ptrType($Uint16))(function() { return this.$target.Weight; }, function($v) { this.$target.Weight = $v; }, rr), "Weight", "") && f(new ($ptrType($Uint16))(function() { return this.$target.Port; }, function($v) { this.$target.Port = $v; }, rr), "Port", "") && f(new ($ptrType($String))(function() { return this.$target.Target; }, function($v) { this.$target.Target = $v; }, rr), "Target", "domain");
	};
	dnsRR_SRV.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_A.Ptr.prototype.Header = function() {
		var rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_A.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_A.Ptr.prototype.Walk = function(f) {
		var rr;
		rr = this;
		return rr.Hdr.Walk(f) && f(new ($ptrType($Uint32))(function() { return this.$target.A; }, function($v) { this.$target.A = $v; }, rr), "A", "ipv4");
	};
	dnsRR_A.prototype.Walk = function(f) { return this.$val.Walk(f); };
	dnsRR_AAAA.Ptr.prototype.Header = function() {
		var rr;
		rr = this;
		return rr.Hdr;
	};
	dnsRR_AAAA.prototype.Header = function() { return this.$val.Header(); };
	dnsRR_AAAA.Ptr.prototype.Walk = function(f) {
		var rr;
		rr = this;
		return rr.Hdr.Walk(f) && f(new ($sliceType($Uint8))(rr.AAAA), "AAAA", "ipv6");
	};
	dnsRR_AAAA.prototype.Walk = function(f) { return this.$val.Walk(f); };
	fdMutex.Ptr.prototype.Incref = function() {
		var mu, old, x, new$1, x$1;
		mu = this;
		while (true) {
			old = atomic.LoadUint64(new ($ptrType($Uint64))(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				return false;
			}
			new$1 = new $Uint64(old.$high + 0, old.$low + 8);
			if ((x$1 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				$panic(new $String("net: inconsistent fdMutex"));
			}
			if (atomic.CompareAndSwapUint64(new ($ptrType($Uint64))(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu), old, new$1)) {
				return true;
			}
		}
	};
	fdMutex.prototype.Incref = function() { return this.$val.Incref(); };
	fdMutex.Ptr.prototype.IncrefAndClose = function() {
		var mu, old, x, x$1, new$1, x$2, x$3, x$4, x$5, x$6, x$7;
		mu = this;
		while (true) {
			old = atomic.LoadUint64(new ($ptrType($Uint64))(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				return false;
			}
			new$1 = (x$1 = new $Uint64(old.$high | 0, (old.$low | 1) >>> 0), new $Uint64(x$1.$high + 0, x$1.$low + 8));
			if ((x$2 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$2.$high === 0 && x$2.$low === 0))) {
				$panic(new $String("net: inconsistent fdMutex"));
			}
			new$1 = (x$3 = new $Uint64(2147483647, 4286578688), new $Uint64(new$1.$high &~ x$3.$high, (new$1.$low &~ x$3.$low) >>> 0));
			if (atomic.CompareAndSwapUint64(new ($ptrType($Uint64))(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu), old, new$1)) {
				while (!((x$4 = new $Uint64(old.$high & 2047, (old.$low & 4286578688) >>> 0), (x$4.$high === 0 && x$4.$low === 0)))) {
					old = (x$5 = new $Uint64(0, 8388608), new $Uint64(old.$high - x$5.$high, old.$low - x$5.$low));
					runtime_Semrelease(new ($ptrType($Uint32))(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu));
				}
				while (!((x$6 = new $Uint64(old.$high & 2147481600, (old.$low & 0) >>> 0), (x$6.$high === 0 && x$6.$low === 0)))) {
					old = (x$7 = new $Uint64(2048, 0), new $Uint64(old.$high - x$7.$high, old.$low - x$7.$low));
					runtime_Semrelease(new ($ptrType($Uint32))(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu));
				}
				return true;
			}
		}
	};
	fdMutex.prototype.IncrefAndClose = function() { return this.$val.IncrefAndClose(); };
	fdMutex.Ptr.prototype.Decref = function() {
		var mu, old, x, new$1, x$1;
		mu = this;
		while (true) {
			old = atomic.LoadUint64(new ($ptrType($Uint64))(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu));
			if ((x = new $Uint64(old.$high & 0, (old.$low & 8388600) >>> 0), (x.$high === 0 && x.$low === 0))) {
				$panic(new $String("net: inconsistent fdMutex"));
			}
			new$1 = new $Uint64(old.$high - 0, old.$low - 8);
			if (atomic.CompareAndSwapUint64(new ($ptrType($Uint64))(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu), old, new$1)) {
				return (x$1 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388601) >>> 0), (x$1.$high === 0 && x$1.$low === 1));
			}
		}
	};
	fdMutex.prototype.Decref = function() { return this.$val.Decref(); };
	fdMutex.Ptr.prototype.RWLock = function(read) {
		var mu, _tmp, _tmp$1, _tmp$2, mutexBit, mutexWait, mutexMask, mutexSema, old, x, new$1, x$1, x$2, x$3, x$4, x$5;
		mu = this;
		_tmp = new $Uint64(0, 0); _tmp$1 = new $Uint64(0, 0); _tmp$2 = new $Uint64(0, 0); mutexBit = _tmp; mutexWait = _tmp$1; mutexMask = _tmp$2;
		mutexSema = ($ptrType($Uint32)).nil;
		if (read) {
			mutexBit = new $Uint64(0, 2);
			mutexWait = new $Uint64(0, 8388608);
			mutexMask = new $Uint64(2047, 4286578688);
			mutexSema = new ($ptrType($Uint32))(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu);
		} else {
			mutexBit = new $Uint64(0, 4);
			mutexWait = new $Uint64(2048, 0);
			mutexMask = new $Uint64(2147481600, 0);
			mutexSema = new ($ptrType($Uint32))(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu);
		}
		while (true) {
			old = atomic.LoadUint64(new ($ptrType($Uint64))(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu));
			if (!((x = new $Uint64(old.$high & 0, (old.$low & 1) >>> 0), (x.$high === 0 && x.$low === 0)))) {
				return false;
			}
			new$1 = new $Uint64(0, 0);
			if ((x$1 = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				new$1 = (x$2 = new $Uint64(old.$high | mutexBit.$high, (old.$low | mutexBit.$low) >>> 0), new $Uint64(x$2.$high + 0, x$2.$low + 8));
				if ((x$3 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388600) >>> 0), (x$3.$high === 0 && x$3.$low === 0))) {
					$panic(new $String("net: inconsistent fdMutex"));
				}
			} else {
				new$1 = new $Uint64(old.$high + mutexWait.$high, old.$low + mutexWait.$low);
				if ((x$4 = new $Uint64(new$1.$high & mutexMask.$high, (new$1.$low & mutexMask.$low) >>> 0), (x$4.$high === 0 && x$4.$low === 0))) {
					$panic(new $String("net: inconsistent fdMutex"));
				}
			}
			if (atomic.CompareAndSwapUint64(new ($ptrType($Uint64))(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu), old, new$1)) {
				if ((x$5 = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x$5.$high === 0 && x$5.$low === 0))) {
					return true;
				}
				runtime_Semacquire(mutexSema);
			}
		}
	};
	fdMutex.prototype.RWLock = function(read) { return this.$val.RWLock(read); };
	fdMutex.Ptr.prototype.RWUnlock = function(read) {
		var mu, _tmp, _tmp$1, _tmp$2, mutexBit, mutexWait, mutexMask, mutexSema, old, x, x$1, x$2, new$1, x$3, x$4, x$5, x$6;
		mu = this;
		_tmp = new $Uint64(0, 0); _tmp$1 = new $Uint64(0, 0); _tmp$2 = new $Uint64(0, 0); mutexBit = _tmp; mutexWait = _tmp$1; mutexMask = _tmp$2;
		mutexSema = ($ptrType($Uint32)).nil;
		if (read) {
			mutexBit = new $Uint64(0, 2);
			mutexWait = new $Uint64(0, 8388608);
			mutexMask = new $Uint64(2047, 4286578688);
			mutexSema = new ($ptrType($Uint32))(function() { return this.$target.rsema; }, function($v) { this.$target.rsema = $v; }, mu);
		} else {
			mutexBit = new $Uint64(0, 4);
			mutexWait = new $Uint64(2048, 0);
			mutexMask = new $Uint64(2147481600, 0);
			mutexSema = new ($ptrType($Uint32))(function() { return this.$target.wsema; }, function($v) { this.$target.wsema = $v; }, mu);
		}
		while (true) {
			old = atomic.LoadUint64(new ($ptrType($Uint64))(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu));
			if ((x = new $Uint64(old.$high & mutexBit.$high, (old.$low & mutexBit.$low) >>> 0), (x.$high === 0 && x.$low === 0)) || (x$1 = new $Uint64(old.$high & 0, (old.$low & 8388600) >>> 0), (x$1.$high === 0 && x$1.$low === 0))) {
				$panic(new $String("net: inconsistent fdMutex"));
			}
			new$1 = (x$2 = new $Uint64(old.$high &~ mutexBit.$high, (old.$low &~ mutexBit.$low) >>> 0), new $Uint64(x$2.$high - 0, x$2.$low - 8));
			if (!((x$3 = new $Uint64(old.$high & mutexMask.$high, (old.$low & mutexMask.$low) >>> 0), (x$3.$high === 0 && x$3.$low === 0)))) {
				new$1 = (x$4 = mutexWait, new $Uint64(new$1.$high - x$4.$high, new$1.$low - x$4.$low));
			}
			if (atomic.CompareAndSwapUint64(new ($ptrType($Uint64))(function() { return this.$target.state; }, function($v) { this.$target.state = $v; }, mu), old, new$1)) {
				if (!((x$5 = new $Uint64(old.$high & mutexMask.$high, (old.$low & mutexMask.$low) >>> 0), (x$5.$high === 0 && x$5.$low === 0)))) {
					runtime_Semrelease(mutexSema);
				}
				return (x$6 = new $Uint64(new$1.$high & 0, (new$1.$low & 8388601) >>> 0), (x$6.$high === 0 && x$6.$low === 1));
			}
		}
	};
	fdMutex.prototype.RWUnlock = function(read) { return this.$val.RWUnlock(read); };
	runtime_Semacquire = function() {
		$panic("Native function not implemented: net.runtime_Semacquire");
	};
	runtime_Semrelease = function() {
		$panic("Native function not implemented: net.runtime_Semrelease");
	};
	runtimeNano = function() {
		$panic("Native function not implemented: net.runtimeNano");
	};
	runtime_pollServerInit = function() {
		$panic("Native function not implemented: net.runtime_pollServerInit");
	};
	runtime_pollOpen = function() {
		$panic("Native function not implemented: net.runtime_pollOpen");
	};
	runtime_pollClose = function() {
		$panic("Native function not implemented: net.runtime_pollClose");
	};
	runtime_pollWait = function() {
		$panic("Native function not implemented: net.runtime_pollWait");
	};
	runtime_pollWaitCanceled = function() {
		$panic("Native function not implemented: net.runtime_pollWaitCanceled");
	};
	runtime_pollReset = function() {
		$panic("Native function not implemented: net.runtime_pollReset");
	};
	runtime_pollSetDeadline = function() {
		$panic("Native function not implemented: net.runtime_pollSetDeadline");
	};
	runtime_pollUnblock = function() {
		$panic("Native function not implemented: net.runtime_pollUnblock");
	};
	pollDesc.Ptr.prototype.Init = function(fd) {
		var pd, _tuple, ctx, errno;
		pd = this;
		serverInit.Do(runtime_pollServerInit);
		_tuple = runtime_pollOpen((fd.sysfd >>> 0)); ctx = _tuple[0]; errno = _tuple[1];
		if (!((errno === 0))) {
			return new syscall.Errno((errno >>> 0));
		}
		pd.runtimeCtx = ctx;
		return $ifaceNil;
	};
	pollDesc.prototype.Init = function(fd) { return this.$val.Init(fd); };
	pollDesc.Ptr.prototype.Close = function() {
		var pd;
		pd = this;
		if (pd.runtimeCtx === 0) {
			return;
		}
		runtime_pollClose(pd.runtimeCtx);
		pd.runtimeCtx = 0;
	};
	pollDesc.prototype.Close = function() { return this.$val.Close(); };
	pollDesc.Ptr.prototype.Lock = function() {
		var pd;
		pd = this;
	};
	pollDesc.prototype.Lock = function() { return this.$val.Lock(); };
	pollDesc.Ptr.prototype.Unlock = function() {
		var pd;
		pd = this;
	};
	pollDesc.prototype.Unlock = function() { return this.$val.Unlock(); };
	pollDesc.Ptr.prototype.Wakeup = function() {
		var pd;
		pd = this;
	};
	pollDesc.prototype.Wakeup = function() { return this.$val.Wakeup(); };
	pollDesc.Ptr.prototype.Evict = function() {
		var pd;
		pd = this;
		if (pd.runtimeCtx === 0) {
			return false;
		}
		runtime_pollUnblock(pd.runtimeCtx);
		return false;
	};
	pollDesc.prototype.Evict = function() { return this.$val.Evict(); };
	pollDesc.Ptr.prototype.Prepare = function(mode) {
		var pd, res;
		pd = this;
		res = runtime_pollReset(pd.runtimeCtx, mode);
		return convertErr(res);
	};
	pollDesc.prototype.Prepare = function(mode) { return this.$val.Prepare(mode); };
	pollDesc.Ptr.prototype.PrepareRead = function() {
		var pd;
		pd = this;
		return pd.Prepare(114);
	};
	pollDesc.prototype.PrepareRead = function() { return this.$val.PrepareRead(); };
	pollDesc.Ptr.prototype.PrepareWrite = function() {
		var pd;
		pd = this;
		return pd.Prepare(119);
	};
	pollDesc.prototype.PrepareWrite = function() { return this.$val.PrepareWrite(); };
	pollDesc.Ptr.prototype.Wait = function(mode) {
		var pd, res;
		pd = this;
		res = runtime_pollWait(pd.runtimeCtx, mode);
		return convertErr(res);
	};
	pollDesc.prototype.Wait = function(mode) { return this.$val.Wait(mode); };
	pollDesc.Ptr.prototype.WaitRead = function() {
		var pd;
		pd = this;
		return pd.Wait(114);
	};
	pollDesc.prototype.WaitRead = function() { return this.$val.WaitRead(); };
	pollDesc.Ptr.prototype.WaitWrite = function() {
		var pd;
		pd = this;
		return pd.Wait(119);
	};
	pollDesc.prototype.WaitWrite = function() { return this.$val.WaitWrite(); };
	pollDesc.Ptr.prototype.WaitCanceled = function(mode) {
		var pd;
		pd = this;
		runtime_pollWaitCanceled(pd.runtimeCtx, mode);
	};
	pollDesc.prototype.WaitCanceled = function(mode) { return this.$val.WaitCanceled(mode); };
	pollDesc.Ptr.prototype.WaitCanceledRead = function() {
		var pd;
		pd = this;
		pd.WaitCanceled(114);
	};
	pollDesc.prototype.WaitCanceledRead = function() { return this.$val.WaitCanceledRead(); };
	pollDesc.Ptr.prototype.WaitCanceledWrite = function() {
		var pd;
		pd = this;
		pd.WaitCanceled(119);
	};
	pollDesc.prototype.WaitCanceledWrite = function() { return this.$val.WaitCanceledWrite(); };
	convertErr = function(res) {
		var _ref;
		_ref = res;
		if (_ref === 0) {
			return $ifaceNil;
		} else if (_ref === 1) {
			return errClosing;
		} else if (_ref === 2) {
			return errTimeout;
		}
		console.log("unreachable: ", res);
		$panic(new $String("unreachable"));
	};
	netFD.Ptr.prototype.setDeadline = function(t) {
		var fd;
		fd = this;
		return setDeadlineImpl(fd, $clone(t, time.Time), 233);
	};
	netFD.prototype.setDeadline = function(t) { return this.$val.setDeadline(t); };
	netFD.Ptr.prototype.setReadDeadline = function(t) {
		var fd;
		fd = this;
		return setDeadlineImpl(fd, $clone(t, time.Time), 114);
	};
	netFD.prototype.setReadDeadline = function(t) { return this.$val.setReadDeadline(t); };
	netFD.Ptr.prototype.setWriteDeadline = function(t) {
		var fd;
		fd = this;
		return setDeadlineImpl(fd, $clone(t, time.Time), 119);
	};
	netFD.prototype.setWriteDeadline = function(t) { return this.$val.setWriteDeadline(t); };
	setDeadlineImpl = function(fd, t, mode) {
		var x, x$1, x$2, d, err;
		d = (x = runtimeNano(), x$1 = (x$2 = t.Sub($clone(time.Now(), time.Time)), new $Int64(x$2.$high, x$2.$low)), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		if (t.IsZero()) {
			d = new $Int64(0, 0);
		}
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		runtime_pollSetDeadline(fd.pd.runtimeCtx, d, mode);
		fd.decref();
		return $ifaceNil;
	};
	sysInit = function() {
	};
	newFD = function(sysfd, family, sotype, net) {
		return [new netFD.Ptr(new fdMutex.Ptr(), sysfd, family, sotype, false, net, $ifaceNil, $ifaceNil, new pollDesc.Ptr()), $ifaceNil];
	};
	netFD.Ptr.prototype.init = function() {
		var fd, err;
		fd = this;
		err = fd.pd.Init(fd);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		return $ifaceNil;
	};
	netFD.prototype.init = function() { return this.$val.init(); };
	netFD.Ptr.prototype.setAddr = function(laddr, raddr) {
		var fd;
		fd = this;
		fd.laddr = laddr;
		fd.raddr = raddr;
		runtime.SetFinalizer(fd, new ($funcType([($ptrType(netFD))], [$error], false))($methodExpr(($ptrType(netFD)).prototype.Close)));
	};
	netFD.prototype.setAddr = function(laddr, raddr) { return this.$val.setAddr(laddr, raddr); };
	netFD.Ptr.prototype.name = function() {
		var fd, _tmp, _tmp$1, ls, rs;
		fd = this;
		_tmp = ""; _tmp$1 = ""; ls = _tmp; rs = _tmp$1;
		if (!($interfaceIsEqual(fd.laddr, $ifaceNil))) {
			ls = fd.laddr.String();
		}
		if (!($interfaceIsEqual(fd.raddr, $ifaceNil))) {
			rs = fd.raddr.String();
		}
		return fd.net + ":" + ls + "->" + rs;
	};
	netFD.prototype.name = function() { return this.$val.name(); };
	netFD.Ptr.prototype.destroy = function() {
		var fd;
		fd = this;
		fd.pd.Close();
		closesocket(fd.sysfd);
		fd.sysfd = -1;
		runtime.SetFinalizer(fd, $ifaceNil);
	};
	netFD.prototype.destroy = function() { return this.$val.destroy(); };
	netFD.Ptr.prototype.incref = function() {
		var fd;
		fd = this;
		if (!fd.fdmu.Incref()) {
			return errClosing;
		}
		return $ifaceNil;
	};
	netFD.prototype.incref = function() { return this.$val.incref(); };
	netFD.Ptr.prototype.decref = function() {
		var fd;
		fd = this;
		if (fd.fdmu.Decref()) {
			fd.destroy();
		}
	};
	netFD.prototype.decref = function() { return this.$val.decref(); };
	netFD.Ptr.prototype.readLock = function() {
		var fd;
		fd = this;
		if (!fd.fdmu.RWLock(true)) {
			return errClosing;
		}
		return $ifaceNil;
	};
	netFD.prototype.readLock = function() { return this.$val.readLock(); };
	netFD.Ptr.prototype.readUnlock = function() {
		var fd;
		fd = this;
		if (fd.fdmu.RWUnlock(true)) {
			fd.destroy();
		}
	};
	netFD.prototype.readUnlock = function() { return this.$val.readUnlock(); };
	netFD.Ptr.prototype.writeLock = function() {
		var fd;
		fd = this;
		if (!fd.fdmu.RWLock(false)) {
			return errClosing;
		}
		return $ifaceNil;
	};
	netFD.prototype.writeLock = function() { return this.$val.writeLock(); };
	netFD.Ptr.prototype.writeUnlock = function() {
		var fd;
		fd = this;
		if (fd.fdmu.RWUnlock(false)) {
			fd.destroy();
		}
	};
	netFD.prototype.writeUnlock = function() { return this.$val.writeUnlock(); };
	netFD.Ptr.prototype.Close = function() {
		var fd, doWakeup;
		fd = this;
		fd.pd.Lock();
		if (!fd.fdmu.IncrefAndClose()) {
			fd.pd.Unlock();
			return errClosing;
		}
		doWakeup = fd.pd.Evict();
		fd.pd.Unlock();
		fd.decref();
		if (doWakeup) {
			fd.pd.Wakeup();
		}
		return $ifaceNil;
	};
	netFD.prototype.Close = function() { return this.$val.Close(); };
	netFD.Ptr.prototype.shutdown = function(how) {
		var $deferred = [], $err = null, fd, err, err$1;
		/* */ try { $deferFrames.push($deferred);
		fd = this;
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		err$1 = syscall.Shutdown(fd.sysfd, how);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			return new OpError.Ptr("shutdown", fd.net, fd.laddr, err$1);
		}
		return $ifaceNil;
		/* */ } catch(err) { $err = err; return $ifaceNil; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	netFD.prototype.shutdown = function(how) { return this.$val.shutdown(how); };
	netFD.Ptr.prototype.closeRead = function() {
		var fd;
		fd = this;
		return fd.shutdown(0);
	};
	netFD.prototype.closeRead = function() { return this.$val.closeRead(); };
	netFD.Ptr.prototype.closeWrite = function() {
		var fd;
		fd = this;
		return fd.shutdown(1);
	};
	netFD.prototype.closeWrite = function() { return this.$val.closeWrite(); };
	netFD.Ptr.prototype.Read = function(p) {
		var n = 0, err = $ifaceNil, $deferred = [], $err = null, fd, err$1, _tmp, _tmp$1, err$2, _tmp$2, _tmp$3, _tuple;
		/* */ try { $deferFrames.push($deferred);
		fd = this;
		err$1 = fd.readLock();
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0; _tmp$1 = err$1; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		err$2 = fd.pd.PrepareRead();
		if (!($interfaceIsEqual(err$2, $ifaceNil))) {
			_tmp$2 = 0; _tmp$3 = new OpError.Ptr("read", fd.net, fd.raddr, err$2); n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		while (true) {
			_tuple = syscall.Read(fd.sysfd, p); n = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				n = 0;
				if ($interfaceIsEqual(err, new syscall.Errno(35))) {
					err = fd.pd.WaitRead();
					if ($interfaceIsEqual(err, $ifaceNil)) {
						continue;
					}
				}
			}
			err = chkReadErr(n, err, fd);
			break;
		}
		if (!($interfaceIsEqual(err, $ifaceNil)) && !($interfaceIsEqual(err, io.EOF))) {
			err = new OpError.Ptr("read", fd.net, fd.raddr, err);
		}
		return [n, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [n, err]; }
	};
	netFD.prototype.Read = function(p) { return this.$val.Read(p); };
	chkReadErr = function(n, err, fd) {
		if ((n === 0) && $interfaceIsEqual(err, $ifaceNil) && !((fd.sotype === 2)) && !((fd.sotype === 3))) {
			return io.EOF;
		}
		return err;
	};
	netFD.Ptr.prototype.Write = function(p) {
		var nn = 0, err = $ifaceNil, $deferred = [], $err = null, fd, err$1, _tmp, _tmp$1, err$2, _tmp$2, _tmp$3, n, _tuple, _tmp$4, _tmp$5;
		/* */ try { $deferFrames.push($deferred);
		fd = this;
		err$1 = fd.writeLock();
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = 0; _tmp$1 = err$1; nn = _tmp; err = _tmp$1;
			return [nn, err];
		}
		$deferred.push([$methodVal(fd, "writeUnlock"), []]);
		err$2 = fd.pd.PrepareWrite();
		if (!($interfaceIsEqual(err$2, $ifaceNil))) {
			_tmp$2 = 0; _tmp$3 = new OpError.Ptr("write", fd.net, fd.raddr, err$2); nn = _tmp$2; err = _tmp$3;
			return [nn, err];
		}
		while (true) {
			n = 0;
			_tuple = syscall.Write(fd.sysfd, $subslice(p, nn)); n = _tuple[0]; err = _tuple[1];
			if (n > 0) {
				nn = nn + (n) >> 0;
			}
			if (nn === p.$length) {
				break;
			}
			if ($interfaceIsEqual(err, new syscall.Errno(35))) {
				err = fd.pd.WaitWrite();
				if ($interfaceIsEqual(err, $ifaceNil)) {
					continue;
				}
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				n = 0;
				break;
			}
			if (n === 0) {
				err = io.ErrUnexpectedEOF;
				break;
			}
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = new OpError.Ptr("write", fd.net, fd.raddr, err);
		}
		_tmp$4 = nn; _tmp$5 = err; nn = _tmp$4; err = _tmp$5;
		return [nn, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [nn, err]; }
	};
	netFD.prototype.Write = function(p) { return this.$val.Write(p); };
	netFD.Ptr.prototype.accept = function(toAddr) {
		var netfd = ($ptrType(netFD)).nil, err = $ifaceNil, $deferred = [], $err = null, fd, err$1, _tmp, _tmp$1, s, rsa, _tmp$2, _tmp$3, _tuple, _tmp$4, _tmp$5, _tuple$1, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tuple$2, lsa, _tmp$10, _tmp$11;
		/* */ try { $deferFrames.push($deferred);
		fd = this;
		err$1 = fd.readLock();
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = ($ptrType(netFD)).nil; _tmp$1 = err$1; netfd = _tmp; err = _tmp$1;
			return [netfd, err];
		}
		$deferred.push([$methodVal(fd, "readUnlock"), []]);
		s = 0;
		rsa = $ifaceNil;
		err = fd.pd.PrepareRead();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = ($ptrType(netFD)).nil; _tmp$3 = new OpError.Ptr("accept", fd.net, fd.laddr, err); netfd = _tmp$2; err = _tmp$3;
			return [netfd, err];
		}
		while (true) {
			_tuple = accept(fd.sysfd); s = _tuple[0]; rsa = _tuple[1]; err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if ($interfaceIsEqual(err, new syscall.Errno(35))) {
					err = fd.pd.WaitRead();
					if ($interfaceIsEqual(err, $ifaceNil)) {
						continue;
					}
				} else if ($interfaceIsEqual(err, new syscall.Errno(53))) {
					continue;
				}
				_tmp$4 = ($ptrType(netFD)).nil; _tmp$5 = new OpError.Ptr("accept", fd.net, fd.laddr, err); netfd = _tmp$4; err = _tmp$5;
				return [netfd, err];
			}
			break;
		}
		_tuple$1 = newFD(s, fd.family, fd.sotype, fd.net); netfd = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			closesocket(s);
			_tmp$6 = ($ptrType(netFD)).nil; _tmp$7 = err; netfd = _tmp$6; err = _tmp$7;
			return [netfd, err];
		}
		err = netfd.init();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			fd.Close();
			_tmp$8 = ($ptrType(netFD)).nil; _tmp$9 = err; netfd = _tmp$8; err = _tmp$9;
			return [netfd, err];
		}
		_tuple$2 = syscall.Getsockname(netfd.sysfd); lsa = _tuple$2[0];
		netfd.setAddr(toAddr(lsa), toAddr(rsa));
		_tmp$10 = netfd; _tmp$11 = $ifaceNil; netfd = _tmp$10; err = _tmp$11;
		return [netfd, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [netfd, err]; }
	};
	netFD.prototype.accept = function(toAddr) { return this.$val.accept(toAddr); };
	dupCloseOnExec = function(fd) {
		var newfd = 0, err = $ifaceNil, _tuple, r0, e1, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple$1;
		if (atomic.LoadInt32(new ($ptrType($Int32))(function() { return tryDupCloexec; }, function($v) { tryDupCloexec = $v; })) === 1) {
			_tuple = syscall.Syscall(92, (fd >>> 0), 67, 0); r0 = _tuple[0]; e1 = _tuple[2];
			if (true && (e1 === 9)) {
				e1 = 22;
			}
			_ref = e1;
			if (_ref === 0) {
				_tmp = (r0 >> 0); _tmp$1 = $ifaceNil; newfd = _tmp; err = _tmp$1;
				return [newfd, err];
			} else if (_ref === 22) {
				atomic.StoreInt32(new ($ptrType($Int32))(function() { return tryDupCloexec; }, function($v) { tryDupCloexec = $v; }), 0);
			} else {
				_tmp$2 = -1; _tmp$3 = new syscall.Errno(e1); newfd = _tmp$2; err = _tmp$3;
				return [newfd, err];
			}
		}
		_tuple$1 = dupCloseOnExecOld(fd); newfd = _tuple$1[0]; err = _tuple$1[1];
		return [newfd, err];
	};
	dupCloseOnExecOld = function(fd) {
		var newfd = 0, err = $ifaceNil, $deferred = [], $err = null, _tuple, _tmp, _tmp$1;
		/* */ try { $deferFrames.push($deferred);
		syscall.ForkLock.RLock();
		$deferred.push([$methodVal(syscall.ForkLock, "RUnlock"), []]);
		_tuple = syscall.Dup(fd); newfd = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = -1; _tmp$1 = err; newfd = _tmp; err = _tmp$1;
			return [newfd, err];
		}
		syscall.CloseOnExec(newfd);
		return [newfd, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [newfd, err]; }
	};
	netFD.Ptr.prototype.dup = function() {
		var f = ($ptrType(os.File)).nil, err = $ifaceNil, fd, _tuple, ns, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		fd = this;
		_tuple = dupCloseOnExec(fd.sysfd); ns = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = ($ptrType(os.File)).nil; _tmp$1 = new OpError.Ptr("dup", fd.net, fd.laddr, err); f = _tmp; err = _tmp$1;
			return [f, err];
		}
		err = syscall.SetNonblock(ns, false);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = ($ptrType(os.File)).nil; _tmp$3 = new OpError.Ptr("setnonblock", fd.net, fd.laddr, err); f = _tmp$2; err = _tmp$3;
			return [f, err];
		}
		_tmp$4 = os.NewFile((ns >>> 0), fd.name()); _tmp$5 = $ifaceNil; f = _tmp$4; err = _tmp$5;
		return [f, err];
	};
	netFD.prototype.dup = function() { return this.$val.dup(); };
	closesocket = function(s) {
		return syscall.Close(s);
	};
	Flags.prototype.String = function() {
		var f, s, _ref, _i, i, name, y;
		f = this.$val !== undefined ? this.$val : this;
		s = "";
		_ref = flagNames;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			name = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!((((f & (((y = (i >>> 0), y < 32 ? (1 << y) : 0) >>> 0))) >>> 0) === 0))) {
				if (!(s === "")) {
					s = s + ("|");
				}
				s = s + (name);
			}
			_i++;
		}
		if (s === "") {
			s = "0";
		}
		return s;
	};
	$ptrType(Flags).prototype.String = function() { return new Flags(this.$get()).String(); };
	Interface.Ptr.prototype.Addrs = function() {
		var ifi;
		ifi = this;
		if (ifi === ($ptrType(Interface)).nil) {
			return [($sliceType(Addr)).nil, errInvalidInterface];
		}
		return interfaceAddrTable(ifi);
	};
	Interface.prototype.Addrs = function() { return this.$val.Addrs(); };
	Interface.Ptr.prototype.MulticastAddrs = function() {
		var ifi;
		ifi = this;
		if (ifi === ($ptrType(Interface)).nil) {
			return [($sliceType(Addr)).nil, errInvalidInterface];
		}
		return interfaceMulticastAddrTable(ifi);
	};
	Interface.prototype.MulticastAddrs = function() { return this.$val.MulticastAddrs(); };
	InterfaceByIndex = $pkg.InterfaceByIndex = function(index) {
		var _tuple, ift, err;
		if (index <= 0) {
			return [($ptrType(Interface)).nil, errInvalidInterfaceIndex];
		}
		_tuple = interfaceTable(index); ift = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($ptrType(Interface)).nil, err];
		}
		return interfaceByIndex(ift, index);
	};
	interfaceByIndex = function(ift, index) {
		var _ref, _i, ifi;
		_ref = ift;
		_i = 0;
		while (_i < _ref.$length) {
			ifi = new Interface.Ptr(); $copy(ifi, ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Interface);
			if (index === ifi.Index) {
				return [ifi, $ifaceNil];
			}
			_i++;
		}
		return [($ptrType(Interface)).nil, errNoSuchInterface];
	};
	InterfaceByName = $pkg.InterfaceByName = function(name) {
		var _tuple, ift, err, _ref, _i, ifi;
		if (name === "") {
			return [($ptrType(Interface)).nil, errInvalidInterfaceName];
		}
		_tuple = interfaceTable(0); ift = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($ptrType(Interface)).nil, err];
		}
		_ref = ift;
		_i = 0;
		while (_i < _ref.$length) {
			ifi = new Interface.Ptr(); $copy(ifi, ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), Interface);
			if (name === ifi.Name) {
				return [ifi, $ifaceNil];
			}
			_i++;
		}
		return [($ptrType(Interface)).nil, errNoSuchInterface];
	};
	interfaceTable = function(ifindex) {
		var _tuple, tab, err, _tuple$1, msgs;
		_tuple = syscall.RouteRIB(3, ifindex); tab = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($sliceType(Interface)).nil, os.NewSyscallError("route rib", err)];
		}
		_tuple$1 = syscall.ParseRoutingMessage(tab); msgs = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($sliceType(Interface)).nil, os.NewSyscallError("route message", err)];
		}
		return parseInterfaceTable(ifindex, msgs);
	};
	parseInterfaceTable = function(ifindex, msgs) {
		var ift, _ref, _i, m, m$1, _ref$1, _tuple, ifi, err;
		ift = ($sliceType(Interface)).nil;
		_ref = msgs;
		_i = 0;
		loop:
		while (_i < _ref.$length) {
			m = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_ref$1 = m;
			if ($assertType(_ref$1, ($ptrType(syscall.InterfaceMessage)), true)[1]) {
				m$1 = _ref$1.$val;
				if ((ifindex === 0) || (ifindex === (m$1.Header.Index >> 0))) {
					_tuple = newLink(m$1); ifi = _tuple[0]; err = _tuple[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						return [($sliceType(Interface)).nil, err];
					}
					ift = $append(ift, ifi);
					if (ifindex === (m$1.Header.Index >> 0)) {
						break loop;
					}
				}
			}
			_i++;
		}
		return [ift, $ifaceNil];
	};
	newLink = function(m) {
		var _tuple, sas, err, ifi, _ref, _i, sa, sa$1, _ref$1, name, i, x, addr, i$1, x$1, x$2, x$3;
		_tuple = syscall.ParseRoutingSockaddr(m); sas = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($ptrType(Interface)).nil, os.NewSyscallError("route sockaddr", err)];
		}
		ifi = new Interface.Ptr((m.Header.Index >> 0), 0, "", HardwareAddr.nil, linkFlags(m.Header.Flags));
		_ref = sas;
		_i = 0;
		while (_i < _ref.$length) {
			sa = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_ref$1 = sa;
			if ($assertType(_ref$1, ($ptrType(syscall.SockaddrDatalink)), true)[1]) {
				sa$1 = _ref$1.$val;
				m.Data = $subslice(m.Data, 8);
				name = ($arrayType($Uint8, 16)).zero(); $copy(name, ($arrayType($Uint8, 16)).zero(), ($arrayType($Uint8, 16)));
				i = 0;
				while (i < (sa$1.Nlen >> 0)) {
					(i < 0 || i >= name.length) ? $throwRuntimeError("index out of range") : name[i] = (x = m.Data, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
					i = i + (1) >> 0;
				}
				ifi.Name = $bytesToString($subslice(new ($sliceType($Uint8))(name), 0, sa$1.Nlen));
				ifi.MTU = (m.Header.Data.Mtu >> 0);
				addr = ($sliceType($Uint8)).make(sa$1.Alen);
				i$1 = 0;
				while (i$1 < (sa$1.Alen >> 0)) {
					(i$1 < 0 || i$1 >= addr.$length) ? $throwRuntimeError("index out of range") : addr.$array[addr.$offset + i$1] = (x$1 = m.Data, x$2 = (sa$1.Nlen >> 0) + i$1 >> 0, ((x$2 < 0 || x$2 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + x$2]));
					i$1 = i$1 + (1) >> 0;
				}
				ifi.HardwareAddr = (x$3 = $subslice(addr, 0, sa$1.Alen), $subslice(new HardwareAddr(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length));
			}
			_i++;
		}
		return [ifi, $ifaceNil];
	};
	linkFlags = function(rawFlags) {
		var f;
		f = 0;
		if (!(((rawFlags & 1) === 0))) {
			f = (f | (1)) >>> 0;
		}
		if (!(((rawFlags & 2) === 0))) {
			f = (f | (2)) >>> 0;
		}
		if (!(((rawFlags & 8) === 0))) {
			f = (f | (4)) >>> 0;
		}
		if (!(((rawFlags & 16) === 0))) {
			f = (f | (8)) >>> 0;
		}
		if (!(((rawFlags & 32768) === 0))) {
			f = (f | (16)) >>> 0;
		}
		return f;
	};
	interfaceAddrTable = function(ifi) {
		var index, _tuple, tab, err, _tuple$1, msgs, ift, _tuple$2, ifat, _ref, _i, m, m$1, _ref$1, err$1, _tuple$3, _tuple$4, ifa, err$2;
		index = 0;
		if (!(ifi === ($ptrType(Interface)).nil)) {
			index = ifi.Index;
		}
		_tuple = syscall.RouteRIB(3, index); tab = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($sliceType(Addr)).nil, os.NewSyscallError("route rib", err)];
		}
		_tuple$1 = syscall.ParseRoutingMessage(tab); msgs = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($sliceType(Addr)).nil, os.NewSyscallError("route message", err)];
		}
		ift = ($sliceType(Interface)).nil;
		if (index === 0) {
			_tuple$2 = parseInterfaceTable(index, msgs); ift = _tuple$2[0]; err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [($sliceType(Addr)).nil, err];
			}
		}
		ifat = ($sliceType(Addr)).nil;
		_ref = msgs;
		_i = 0;
		while (_i < _ref.$length) {
			m = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_ref$1 = m;
			if ($assertType(_ref$1, ($ptrType(syscall.InterfaceAddrMessage)), true)[1]) {
				m$1 = _ref$1.$val;
				if ((index === 0) || (index === (m$1.Header.Index >> 0))) {
					if (index === 0) {
						err$1 = $ifaceNil;
						_tuple$3 = interfaceByIndex(ift, (m$1.Header.Index >> 0)); ifi = _tuple$3[0]; err$1 = _tuple$3[1];
						if (!($interfaceIsEqual(err$1, $ifaceNil))) {
							return [($sliceType(Addr)).nil, err$1];
						}
					}
					_tuple$4 = newAddr(ifi, m$1); ifa = _tuple$4[0]; err$2 = _tuple$4[1];
					if (!($interfaceIsEqual(err$2, $ifaceNil))) {
						return [($sliceType(Addr)).nil, err$2];
					}
					if (!($interfaceIsEqual(ifa, $ifaceNil))) {
						ifat = $append(ifat, ifa);
					}
				}
			}
			_i++;
		}
		return [ifat, $ifaceNil];
	};
	newAddr = function(ifi, m) {
		var _tuple, sas, err, ifa, _ref, _i, i, sa, sa$1, _ref$1, _ref$2, _ref$3, _tmp, _tmp$1, x, x$1;
		_tuple = syscall.ParseRoutingSockaddr(m); sas = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, os.NewSyscallError("route sockaddr", err)];
		}
		ifa = new IPNet.Ptr(IP.nil, IPMask.nil);
		_ref = sas;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			sa = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_ref$1 = sa;
			if ($assertType(_ref$1, ($ptrType(syscall.SockaddrInet4)), true)[1]) {
				sa$1 = _ref$1.$val;
				_ref$2 = i;
				if (_ref$2 === 0) {
					ifa.Mask = IPv4Mask(sa$1.Addr[0], sa$1.Addr[1], sa$1.Addr[2], sa$1.Addr[3]);
				} else if (_ref$2 === 1) {
					ifa.IP = IPv4(sa$1.Addr[0], sa$1.Addr[1], sa$1.Addr[2], sa$1.Addr[3]);
				}
			} else if ($assertType(_ref$1, ($ptrType(syscall.SockaddrInet6)), true)[1]) {
				sa$1 = _ref$1.$val;
				_ref$3 = i;
				if (_ref$3 === 0) {
					ifa.Mask = IPMask.make(16);
					$copySlice(ifa.Mask, new ($sliceType($Uint8))(sa$1.Addr));
				} else if (_ref$3 === 1) {
					ifa.IP = IP.make(16);
					$copySlice(ifa.IP, new ($sliceType($Uint8))(sa$1.Addr));
					if (ifa.IP.IsLinkLocalUnicast()) {
						_tmp = 0; _tmp$1 = 0; (x = ifa.IP, (2 < 0 || 2 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 2] = _tmp); (x$1 = ifa.IP, (3 < 0 || 3 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 3] = _tmp$1);
					}
				}
			} else {
				sa$1 = _ref$1;
				return [$ifaceNil, $ifaceNil];
			}
			_i++;
		}
		return [ifa, $ifaceNil];
	};
	interfaceMulticastAddrTable = function(ifi) {
		var _tuple, tab, err, _tuple$1, msgs, ifmat, _ref, _i, m, m$1, _ref$1, _tuple$2, ifma, err$1;
		_tuple = syscall.RouteRIB(6, ifi.Index); tab = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($sliceType(Addr)).nil, os.NewSyscallError("route rib", err)];
		}
		_tuple$1 = syscall.ParseRoutingMessage(tab); msgs = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($sliceType(Addr)).nil, os.NewSyscallError("route message", err)];
		}
		ifmat = ($sliceType(Addr)).nil;
		_ref = msgs;
		_i = 0;
		while (_i < _ref.$length) {
			m = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_ref$1 = m;
			if ($assertType(_ref$1, ($ptrType(syscall.InterfaceMulticastAddrMessage)), true)[1]) {
				m$1 = _ref$1.$val;
				if (ifi.Index === (m$1.Header.Index >> 0)) {
					_tuple$2 = newMulticastAddr(ifi, m$1); ifma = _tuple$2[0]; err$1 = _tuple$2[1];
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						return [($sliceType(Addr)).nil, err$1];
					}
					ifmat = $appendSlice(ifmat, ifma);
				}
			}
			_i++;
		}
		return [ifmat, $ifaceNil];
	};
	newMulticastAddr = function(ifi, m) {
		var _tuple, sas, err, ifmat, _ref, _i, sa, sa$1, _ref$1, ifma, ifma$1, _tmp, _tmp$1, x, x$1;
		_tuple = syscall.ParseRoutingSockaddr(m); sas = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($sliceType(Addr)).nil, os.NewSyscallError("route sockaddr", err)];
		}
		ifmat = ($sliceType(Addr)).nil;
		_ref = sas;
		_i = 0;
		while (_i < _ref.$length) {
			sa = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_ref$1 = sa;
			if ($assertType(_ref$1, ($ptrType(syscall.SockaddrInet4)), true)[1]) {
				sa$1 = _ref$1.$val;
				ifma = new IPAddr.Ptr(IPv4(sa$1.Addr[0], sa$1.Addr[1], sa$1.Addr[2], sa$1.Addr[3]), "");
				ifmat = $append(ifmat, ifma.toAddr());
			} else if ($assertType(_ref$1, ($ptrType(syscall.SockaddrInet6)), true)[1]) {
				sa$1 = _ref$1.$val;
				ifma$1 = new IPAddr.Ptr(IP.make(16), "");
				$copySlice(ifma$1.IP, new ($sliceType($Uint8))(sa$1.Addr));
				if (ifma$1.IP.IsInterfaceLocalMulticast() || ifma$1.IP.IsLinkLocalMulticast()) {
					_tmp = 0; _tmp$1 = 0; (x = ifma$1.IP, (2 < 0 || 2 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 2] = _tmp); (x$1 = ifma$1.IP, (3 < 0 || 3 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 3] = _tmp$1);
				}
				ifmat = $append(ifmat, ifma$1.toAddr());
			}
			_i++;
		}
		return [ifmat, $ifaceNil];
	};
	IPv4 = $pkg.IPv4 = function(a, b, c, d) {
		var p;
		p = IP.make(16);
		$copySlice(p, v4InV6Prefix);
		(12 < 0 || 12 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 12] = a;
		(13 < 0 || 13 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 13] = b;
		(14 < 0 || 14 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 14] = c;
		(15 < 0 || 15 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 15] = d;
		return p;
	};
	IPv4Mask = $pkg.IPv4Mask = function(a, b, c, d) {
		var p;
		p = IPMask.make(4);
		(0 < 0 || 0 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = a;
		(1 < 0 || 1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1] = b;
		(2 < 0 || 2 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2] = c;
		(3 < 0 || 3 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 3] = d;
		return p;
	};
	IP.prototype.IsUnspecified = function() {
		var ip;
		ip = this;
		if (ip.Equal($pkg.IPv4zero) || ip.Equal($pkg.IPv6unspecified)) {
			return true;
		}
		return false;
	};
	$ptrType(IP).prototype.IsUnspecified = function() { return this.$get().IsUnspecified(); };
	IP.prototype.IsLoopback = function() {
		var ip, ip4;
		ip = this;
		ip4 = ip.To4();
		if (!(ip4 === IP.nil) && (((0 < 0 || 0 >= ip4.$length) ? $throwRuntimeError("index out of range") : ip4.$array[ip4.$offset + 0]) === 127)) {
			return true;
		}
		return ip.Equal($pkg.IPv6loopback);
	};
	$ptrType(IP).prototype.IsLoopback = function() { return this.$get().IsLoopback(); };
	IP.prototype.IsMulticast = function() {
		var ip, ip4;
		ip = this;
		ip4 = ip.To4();
		if (!(ip4 === IP.nil) && (((((0 < 0 || 0 >= ip4.$length) ? $throwRuntimeError("index out of range") : ip4.$array[ip4.$offset + 0]) & 240) >>> 0) === 224)) {
			return true;
		}
		return ((0 < 0 || 0 >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 0]) === 255;
	};
	$ptrType(IP).prototype.IsMulticast = function() { return this.$get().IsMulticast(); };
	IP.prototype.IsInterfaceLocalMulticast = function() {
		var ip;
		ip = this;
		return (ip.$length === 16) && (((0 < 0 || 0 >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 0]) === 255) && (((((1 < 0 || 1 >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 1]) & 15) >>> 0) === 1);
	};
	$ptrType(IP).prototype.IsInterfaceLocalMulticast = function() { return this.$get().IsInterfaceLocalMulticast(); };
	IP.prototype.IsLinkLocalMulticast = function() {
		var ip, ip4;
		ip = this;
		ip4 = ip.To4();
		if (!(ip4 === IP.nil) && (((0 < 0 || 0 >= ip4.$length) ? $throwRuntimeError("index out of range") : ip4.$array[ip4.$offset + 0]) === 224) && (((1 < 0 || 1 >= ip4.$length) ? $throwRuntimeError("index out of range") : ip4.$array[ip4.$offset + 1]) === 0) && (((2 < 0 || 2 >= ip4.$length) ? $throwRuntimeError("index out of range") : ip4.$array[ip4.$offset + 2]) === 0)) {
			return true;
		}
		return (((0 < 0 || 0 >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 0]) === 255) && (((((1 < 0 || 1 >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 1]) & 15) >>> 0) === 2);
	};
	$ptrType(IP).prototype.IsLinkLocalMulticast = function() { return this.$get().IsLinkLocalMulticast(); };
	IP.prototype.IsLinkLocalUnicast = function() {
		var ip, ip4;
		ip = this;
		ip4 = ip.To4();
		if (!(ip4 === IP.nil) && (((0 < 0 || 0 >= ip4.$length) ? $throwRuntimeError("index out of range") : ip4.$array[ip4.$offset + 0]) === 169) && (((1 < 0 || 1 >= ip4.$length) ? $throwRuntimeError("index out of range") : ip4.$array[ip4.$offset + 1]) === 254)) {
			return true;
		}
		return (((0 < 0 || 0 >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 0]) === 254) && (((((1 < 0 || 1 >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 1]) & 192) >>> 0) === 128);
	};
	$ptrType(IP).prototype.IsLinkLocalUnicast = function() { return this.$get().IsLinkLocalUnicast(); };
	IP.prototype.IsGlobalUnicast = function() {
		var ip;
		ip = this;
		return !ip.IsUnspecified() && !ip.IsLoopback() && !ip.IsMulticast() && !ip.IsLinkLocalUnicast();
	};
	$ptrType(IP).prototype.IsGlobalUnicast = function() { return this.$get().IsGlobalUnicast(); };
	isZeros = function(p) {
		var i;
		i = 0;
		while (i < p.$length) {
			if (!((((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]) === 0))) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	IP.prototype.To4 = function() {
		var ip;
		ip = this;
		if (ip.$length === 4) {
			return ip;
		}
		if ((ip.$length === 16) && isZeros($subslice(ip, 0, 10)) && (((10 < 0 || 10 >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 10]) === 255) && (((11 < 0 || 11 >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 11]) === 255)) {
			return $subslice(ip, 12, 16);
		}
		return IP.nil;
	};
	$ptrType(IP).prototype.To4 = function() { return this.$get().To4(); };
	IP.prototype.To16 = function() {
		var ip;
		ip = this;
		if (ip.$length === 4) {
			return IPv4(((0 < 0 || 0 >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 0]), ((1 < 0 || 1 >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 1]), ((2 < 0 || 2 >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 2]), ((3 < 0 || 3 >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 3]));
		}
		if (ip.$length === 16) {
			return ip;
		}
		return IP.nil;
	};
	$ptrType(IP).prototype.To16 = function() { return this.$get().To16(); };
	IP.prototype.DefaultMask = function() {
		var ip, _ref;
		ip = this;
		ip = ip.To4();
		if (ip === IP.nil) {
			return IPMask.nil;
		}
		_ref = true;
		if (_ref === ((0 < 0 || 0 >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 0]) < 128) {
			return classAMask;
		} else if (_ref === ((0 < 0 || 0 >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + 0]) < 192) {
			return classBMask;
		} else {
			return classCMask;
		}
	};
	$ptrType(IP).prototype.DefaultMask = function() { return this.$get().DefaultMask(); };
	allFF = function(b) {
		var _ref, _i, c;
		_ref = b;
		_i = 0;
		while (_i < _ref.$length) {
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!((c === 255))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	IP.prototype.Mask = function(mask) {
		var ip, x, x$1, n, out, i;
		ip = this;
		if ((mask.$length === 16) && (ip.$length === 4) && allFF((x = $subslice(mask, 0, 12), $subslice(new ($sliceType($Uint8))(x.$array), x.$offset, x.$offset + x.$length)))) {
			mask = $subslice(mask, 12);
		}
		if ((mask.$length === 4) && (ip.$length === 16) && bytesEqual((x$1 = $subslice(ip, 0, 12), $subslice(new ($sliceType($Uint8))(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), v4InV6Prefix)) {
			ip = $subslice(ip, 12);
		}
		n = ip.$length;
		if (!((n === mask.$length))) {
			return IP.nil;
		}
		out = IP.make(n);
		i = 0;
		while (i < n) {
			(i < 0 || i >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + i] = (((i < 0 || i >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + i]) & ((i < 0 || i >= mask.$length) ? $throwRuntimeError("index out of range") : mask.$array[mask.$offset + i])) >>> 0;
			i = i + (1) >> 0;
		}
		return out;
	};
	$ptrType(IP).prototype.Mask = function(mask) { return this.$get().Mask(mask); };
	IP.prototype.String = function() {
		var ip, p, p4, e0, e1, i, j, x, s, i$1, x$1;
		ip = this;
		p = ip;
		if (ip.$length === 0) {
			return "<nil>";
		}
		p4 = p.To4();
		if (p4.$length === 4) {
			return itod((((0 < 0 || 0 >= p4.$length) ? $throwRuntimeError("index out of range") : p4.$array[p4.$offset + 0]) >>> 0)) + "." + itod((((1 < 0 || 1 >= p4.$length) ? $throwRuntimeError("index out of range") : p4.$array[p4.$offset + 1]) >>> 0)) + "." + itod((((2 < 0 || 2 >= p4.$length) ? $throwRuntimeError("index out of range") : p4.$array[p4.$offset + 2]) >>> 0)) + "." + itod((((3 < 0 || 3 >= p4.$length) ? $throwRuntimeError("index out of range") : p4.$array[p4.$offset + 3]) >>> 0));
		}
		if (!((p.$length === 16))) {
			return "?";
		}
		e0 = -1;
		e1 = -1;
		i = 0;
		while (i < 16) {
			j = i;
			while (j < 16 && (((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]) === 0) && ((x = j + 1 >> 0, ((x < 0 || x >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x])) === 0)) {
				j = j + (2) >> 0;
			}
			if (j > i && (j - i >> 0) > (e1 - e0 >> 0)) {
				e0 = i;
				e1 = j;
			}
			i = i + (2) >> 0;
		}
		if ((e1 - e0 >> 0) <= 2) {
			e0 = -1;
			e1 = -1;
		}
		s = "";
		i$1 = 0;
		while (i$1 < 16) {
			if (i$1 === e0) {
				s = s + ("::");
				i$1 = e1;
				if (i$1 >= 16) {
					break;
				}
			} else if (i$1 > 0) {
				s = s + (":");
			}
			s = s + (itox(((((((i$1 < 0 || i$1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i$1]) >>> 0) << 8 >>> 0)) | ((x$1 = i$1 + 1 >> 0, ((x$1 < 0 || x$1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$1])) >>> 0)) >>> 0, 1));
			i$1 = i$1 + (2) >> 0;
		}
		return s;
	};
	$ptrType(IP).prototype.String = function() { return this.$get().String(); };
	ipEmptyString = function(ip) {
		if (ip.$length === 0) {
			return "";
		}
		return ip.String();
	};
	IP.prototype.MarshalText = function() {
		var ip;
		ip = this;
		if (ip.$length === 0) {
			return [new ($sliceType($Uint8))($stringToBytes("")), $ifaceNil];
		}
		if (!((ip.$length === 4)) && !((ip.$length === 16))) {
			return [($sliceType($Uint8)).nil, errors.New("invalid IP address")];
		}
		return [new ($sliceType($Uint8))($stringToBytes(ip.String())), $ifaceNil];
	};
	$ptrType(IP).prototype.MarshalText = function() { return this.$get().MarshalText(); };
	$ptrType(IP).prototype.UnmarshalText = function(text) {
		var ip, s, x;
		ip = this;
		if (text.$length === 0) {
			ip.$set(IP.nil);
			return $ifaceNil;
		}
		s = $bytesToString(text);
		x = ParseIP(s);
		if (x === IP.nil) {
			return new ParseError.Ptr("IP address", s);
		}
		ip.$set(x);
		return $ifaceNil;
	};
	IP.prototype.Equal = function(x) {
		var ip, x$1, x$2, x$3, x$4;
		ip = this;
		if (ip.$length === x.$length) {
			return bytesEqual($subslice(new ($sliceType($Uint8))(ip.$array), ip.$offset, ip.$offset + ip.$length), $subslice(new ($sliceType($Uint8))(x.$array), x.$offset, x.$offset + x.$length));
		}
		if ((ip.$length === 4) && (x.$length === 16)) {
			return bytesEqual((x$1 = $subslice(x, 0, 12), $subslice(new ($sliceType($Uint8))(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), v4InV6Prefix) && bytesEqual($subslice(new ($sliceType($Uint8))(ip.$array), ip.$offset, ip.$offset + ip.$length), (x$2 = $subslice(x, 12), $subslice(new ($sliceType($Uint8))(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)));
		}
		if ((ip.$length === 16) && (x.$length === 4)) {
			return bytesEqual((x$3 = $subslice(ip, 0, 12), $subslice(new ($sliceType($Uint8))(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), v4InV6Prefix) && bytesEqual((x$4 = $subslice(ip, 12), $subslice(new ($sliceType($Uint8))(x$4.$array), x$4.$offset, x$4.$offset + x$4.$length)), $subslice(new ($sliceType($Uint8))(x.$array), x.$offset, x.$offset + x.$length));
		}
		return false;
	};
	$ptrType(IP).prototype.Equal = function(x) { return this.$get().Equal(x); };
	bytesEqual = function(x, y) {
		var _ref, _i, i, b;
		if (!((x.$length === y.$length))) {
			return false;
		}
		_ref = x;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!((((i < 0 || i >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i]) === b))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	simpleMaskLength = function(mask) {
		var n, _ref, _i, i, v, y;
		n = 0;
		_ref = mask;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (v === 255) {
				n = n + (8) >> 0;
				_i++;
				continue;
			}
			while (!((((v & 128) >>> 0) === 0))) {
				n = n + (1) >> 0;
				v = (y = (1), y < 32 ? (v << y) : 0) << 24 >>> 24;
			}
			if (!((v === 0))) {
				return -1;
			}
			i = i + (1) >> 0;
			while (i < mask.$length) {
				if (!((((i < 0 || i >= mask.$length) ? $throwRuntimeError("index out of range") : mask.$array[mask.$offset + i]) === 0))) {
					return -1;
				}
				i = i + (1) >> 0;
			}
			break;
		}
		return n;
	};
	IPMask.prototype.Size = function() {
		var ones = 0, bits = 0, m, _tmp, _tmp$1, x, _tmp$2, _tmp$3;
		m = this;
		_tmp = simpleMaskLength(m); _tmp$1 = (x = m.$length, (((x >>> 16 << 16) * 8 >> 0) + (x << 16 >>> 16) * 8) >> 0); ones = _tmp; bits = _tmp$1;
		if (ones === -1) {
			_tmp$2 = 0; _tmp$3 = 0; ones = _tmp$2; bits = _tmp$3;
			return [ones, bits];
		}
		return [ones, bits];
	};
	$ptrType(IPMask).prototype.Size = function() { return this.$get().Size(); };
	IPMask.prototype.String = function() {
		var m, s, _ref, _i, b;
		m = this;
		s = "";
		_ref = m;
		_i = 0;
		while (_i < _ref.$length) {
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			s = s + (itox((b >>> 0), 2));
			_i++;
		}
		if (s.length === 0) {
			return "<nil>";
		}
		return s;
	};
	$ptrType(IPMask).prototype.String = function() { return this.$get().String(); };
	networkNumberAndMask = function(n) {
		var ip = IP.nil, m = IPMask.nil, _tmp, _tmp$1, _ref, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		ip = n.IP.To4();
		if (ip === IP.nil) {
			ip = n.IP;
			if (!((ip.$length === 16))) {
				_tmp = IP.nil; _tmp$1 = IPMask.nil; ip = _tmp; m = _tmp$1;
				return [ip, m];
			}
		}
		m = n.Mask;
		_ref = m.$length;
		if (_ref === 4) {
			if (!((ip.$length === 4))) {
				_tmp$2 = IP.nil; _tmp$3 = IPMask.nil; ip = _tmp$2; m = _tmp$3;
				return [ip, m];
			}
		} else if (_ref === 16) {
			if (ip.$length === 4) {
				m = $subslice(m, 12);
			}
		} else {
			_tmp$4 = IP.nil; _tmp$5 = IPMask.nil; ip = _tmp$4; m = _tmp$5;
			return [ip, m];
		}
		return [ip, m];
	};
	IPNet.Ptr.prototype.Contains = function(ip) {
		var n, _tuple, nn, m, x, l, i;
		n = this;
		_tuple = networkNumberAndMask(n); nn = _tuple[0]; m = _tuple[1];
		x = ip.To4();
		if (!(x === IP.nil)) {
			ip = x;
		}
		l = ip.$length;
		if (!((l === nn.$length))) {
			return false;
		}
		i = 0;
		while (i < l) {
			if (!((((((i < 0 || i >= nn.$length) ? $throwRuntimeError("index out of range") : nn.$array[nn.$offset + i]) & ((i < 0 || i >= m.$length) ? $throwRuntimeError("index out of range") : m.$array[m.$offset + i])) >>> 0) === ((((i < 0 || i >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + i]) & ((i < 0 || i >= m.$length) ? $throwRuntimeError("index out of range") : m.$array[m.$offset + i])) >>> 0)))) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	IPNet.prototype.Contains = function(ip) { return this.$val.Contains(ip); };
	IPNet.Ptr.prototype.Network = function() {
		var n;
		n = this;
		return "ip+net";
	};
	IPNet.prototype.Network = function() { return this.$val.Network(); };
	IPNet.Ptr.prototype.String = function() {
		var n, _tuple, nn, m, l;
		n = this;
		_tuple = networkNumberAndMask(n); nn = _tuple[0]; m = _tuple[1];
		if (nn === IP.nil || m === IPMask.nil) {
			return "<nil>";
		}
		l = simpleMaskLength(m);
		if (l === -1) {
			return nn.String() + "/" + m.String();
		}
		return nn.String() + "/" + itod((l >>> 0));
	};
	IPNet.prototype.String = function() { return this.$val.String(); };
	parseIPv4 = function(s) {
		var p, i, j, n, ok, _tuple;
		p = ($arrayType($Uint8, 4)).zero(); $copy(p, ($arrayType($Uint8, 4)).zero(), ($arrayType($Uint8, 4)));
		i = 0;
		j = 0;
		while (j < 4) {
			if (i >= s.length) {
				return IP.nil;
			}
			if (j > 0) {
				if (!((s.charCodeAt(i) === 46))) {
					return IP.nil;
				}
				i = i + (1) >> 0;
			}
			n = 0;
			ok = false;
			_tuple = dtoi(s, i); n = _tuple[0]; i = _tuple[1]; ok = _tuple[2];
			if (!ok || n > 255) {
				return IP.nil;
			}
			(j < 0 || j >= p.length) ? $throwRuntimeError("index out of range") : p[j] = (n << 24 >>> 24);
			j = j + (1) >> 0;
		}
		if (!((i === s.length))) {
			return IP.nil;
		}
		return IPv4(p[0], p[1], p[2], p[3]);
	};
	parseIPv6 = function(s, zoneAllowed) {
		var ip = IP.nil, zone = "", ellipsis, i, _tuple, _tmp, _tmp$1, j, _tuple$1, n, i1, ok, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, ip4, _tmp$8, _tmp$9, x, x$1, x$2, x$3, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, n$1, k, x$4, k$1, _tmp$18, _tmp$19, _tmp$20, _tmp$21;
		ip = IP.make(16);
		ellipsis = -1;
		i = 0;
		if (zoneAllowed) {
			_tuple = splitHostZone(s); s = _tuple[0]; zone = _tuple[1];
		}
		if (s.length >= 2 && (s.charCodeAt(0) === 58) && (s.charCodeAt(1) === 58)) {
			ellipsis = 0;
			i = 2;
			if (i === s.length) {
				_tmp = ip; _tmp$1 = zone; ip = _tmp; zone = _tmp$1;
				return [ip, zone];
			}
		}
		j = 0;
		while (j < 16) {
			_tuple$1 = xtoi(s, i); n = _tuple$1[0]; i1 = _tuple$1[1]; ok = _tuple$1[2];
			if (!ok || n > 65535) {
				_tmp$2 = IP.nil; _tmp$3 = zone; ip = _tmp$2; zone = _tmp$3;
				return [ip, zone];
			}
			if (i1 < s.length && (s.charCodeAt(i1) === 46)) {
				if (ellipsis < 0 && !((j === 12))) {
					_tmp$4 = IP.nil; _tmp$5 = zone; ip = _tmp$4; zone = _tmp$5;
					return [ip, zone];
				}
				if ((j + 4 >> 0) > 16) {
					_tmp$6 = IP.nil; _tmp$7 = zone; ip = _tmp$6; zone = _tmp$7;
					return [ip, zone];
				}
				ip4 = parseIPv4(s.substring(i));
				if (ip4 === IP.nil) {
					_tmp$8 = IP.nil; _tmp$9 = zone; ip = _tmp$8; zone = _tmp$9;
					return [ip, zone];
				}
				(j < 0 || j >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + j] = ((12 < 0 || 12 >= ip4.$length) ? $throwRuntimeError("index out of range") : ip4.$array[ip4.$offset + 12]);
				(x = j + 1 >> 0, (x < 0 || x >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + x] = ((13 < 0 || 13 >= ip4.$length) ? $throwRuntimeError("index out of range") : ip4.$array[ip4.$offset + 13]));
				(x$1 = j + 2 >> 0, (x$1 < 0 || x$1 >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + x$1] = ((14 < 0 || 14 >= ip4.$length) ? $throwRuntimeError("index out of range") : ip4.$array[ip4.$offset + 14]));
				(x$2 = j + 3 >> 0, (x$2 < 0 || x$2 >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + x$2] = ((15 < 0 || 15 >= ip4.$length) ? $throwRuntimeError("index out of range") : ip4.$array[ip4.$offset + 15]));
				i = s.length;
				j = j + (4) >> 0;
				break;
			}
			(j < 0 || j >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + j] = ((n >> 8 >> 0) << 24 >>> 24);
			(x$3 = j + 1 >> 0, (x$3 < 0 || x$3 >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + x$3] = (n << 24 >>> 24));
			j = j + (2) >> 0;
			i = i1;
			if (i === s.length) {
				break;
			}
			if (!((s.charCodeAt(i) === 58)) || ((i + 1 >> 0) === s.length)) {
				_tmp$10 = IP.nil; _tmp$11 = zone; ip = _tmp$10; zone = _tmp$11;
				return [ip, zone];
			}
			i = i + (1) >> 0;
			if (s.charCodeAt(i) === 58) {
				if (ellipsis >= 0) {
					_tmp$12 = IP.nil; _tmp$13 = zone; ip = _tmp$12; zone = _tmp$13;
					return [ip, zone];
				}
				ellipsis = j;
				i = i + (1) >> 0;
				if (i === s.length) {
					break;
				}
			}
		}
		if (!((i === s.length))) {
			_tmp$14 = IP.nil; _tmp$15 = zone; ip = _tmp$14; zone = _tmp$15;
			return [ip, zone];
		}
		if (j < 16) {
			if (ellipsis < 0) {
				_tmp$16 = IP.nil; _tmp$17 = zone; ip = _tmp$16; zone = _tmp$17;
				return [ip, zone];
			}
			n$1 = 16 - j >> 0;
			k = j - 1 >> 0;
			while (k >= ellipsis) {
				(x$4 = k + n$1 >> 0, (x$4 < 0 || x$4 >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + x$4] = ((k < 0 || k >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + k]));
				k = k - (1) >> 0;
			}
			k$1 = (ellipsis + n$1 >> 0) - 1 >> 0;
			while (k$1 >= ellipsis) {
				(k$1 < 0 || k$1 >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + k$1] = 0;
				k$1 = k$1 - (1) >> 0;
			}
		} else if (ellipsis >= 0) {
			_tmp$18 = IP.nil; _tmp$19 = zone; ip = _tmp$18; zone = _tmp$19;
			return [ip, zone];
		}
		_tmp$20 = ip; _tmp$21 = zone; ip = _tmp$20; zone = _tmp$21;
		return [ip, zone];
	};
	ParseError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return "invalid " + e.Type + ": " + e.Text;
	};
	ParseError.prototype.Error = function() { return this.$val.Error(); };
	ParseIP = $pkg.ParseIP = function(s) {
		var ip, _tuple, ip$1;
		ip = parseIPv4(s);
		if (!(ip === IP.nil)) {
			return ip;
		}
		_tuple = parseIPv6(s, false); ip$1 = _tuple[0];
		return ip$1;
	};
	IPAddr.Ptr.prototype.Network = function() {
		var a;
		a = this;
		return "ip";
	};
	IPAddr.prototype.Network = function() { return this.$val.Network(); };
	IPAddr.Ptr.prototype.String = function() {
		var a;
		a = this;
		if (a === ($ptrType(IPAddr)).nil) {
			return "<nil>";
		}
		if (!(a.Zone === "")) {
			return a.IP.String() + "%" + a.Zone;
		}
		return a.IP.String();
	};
	IPAddr.prototype.String = function() { return this.$val.String(); };
	IPAddr.Ptr.prototype.toAddr = function() {
		var a;
		a = this;
		if (a === ($ptrType(IPAddr)).nil) {
			return $ifaceNil;
		}
		return a;
	};
	IPAddr.prototype.toAddr = function() { return this.$val.toAddr(); };
	IPAddr.Ptr.prototype.sockaddr = function(family) {
		var a;
		a = this;
		if (a === ($ptrType(IPAddr)).nil) {
			return [$ifaceNil, $ifaceNil];
		}
		return ipToSockaddr(family, a.IP, 0, a.Zone);
	};
	IPAddr.prototype.sockaddr = function(family) { return this.$val.sockaddr(family); };
	init = function() {
		var _tuple;
		sysInit();
		supportsIPv4 = probeIPv4Stack();
		_tuple = probeIPv6Stack(); supportsIPv6 = _tuple[0]; supportsIPv4map = _tuple[1];
	};
	splitHostZone = function(s) {
		var host = "", zone = "", i, _tmp, _tmp$1;
		i = last(s, 37);
		if (i > 0) {
			_tmp = s.substring(0, i); _tmp$1 = s.substring((i + 1 >> 0)); host = _tmp; zone = _tmp$1;
		} else {
			host = s;
		}
		return [host, zone];
	};
	JoinHostPort = $pkg.JoinHostPort = function(host, port) {
		if (byteIndex(host, 58) >= 0 || byteIndex(host, 37) >= 0) {
			return "[" + host + "]:" + port;
		}
		return host + ":" + port;
	};
	zoneToString = function(zone) {
		var _tuple, ifi, err;
		if (zone === 0) {
			return "";
		}
		_tuple = InterfaceByIndex(zone); ifi = _tuple[0]; err = _tuple[1];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			return ifi.Name;
		}
		return itod((zone >>> 0));
	};
	zoneToInt = function(zone) {
		var _tuple, ifi, err, _tuple$1, n;
		if (zone === "") {
			return 0;
		}
		_tuple = InterfaceByName(zone); ifi = _tuple[0]; err = _tuple[1];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			return ifi.Index;
		}
		_tuple$1 = dtoi(zone, 0); n = _tuple$1[0];
		return n;
	};
	probeIPv4Stack = function() {
		var _tuple, s, err, _ref;
		_tuple = syscall.Socket(2, 1, 6); s = _tuple[0]; err = _tuple[1];
		_ref = err;
		if ($interfaceIsEqual(_ref, new syscall.Errno(47)) || $interfaceIsEqual(_ref, new syscall.Errno(43))) {
			return false;
		} else if ($interfaceIsEqual(_ref, $ifaceNil)) {
			closesocket(s);
		}
		return true;
	};
	probeIPv6Stack = function() {
		var supportsIPv6$1 = false, supportsIPv4map$1 = false, $deferred = [], $err = null, probes, _ref, _i, i, _tuple, s, err, _tuple$1, sa, err$1, _tmp, _tmp$1;
		/* */ try { $deferFrames.push($deferred);
		probes = new ($sliceType(($structType([["laddr", "laddr", "net", TCPAddr, ""], ["value", "value", "net", $Int, ""], ["ok", "ok", "net", $Bool, ""]]))))([new ($structType([["laddr", "laddr", "net", TCPAddr, ""], ["value", "value", "net", $Int, ""], ["ok", "ok", "net", $Bool, ""]])).Ptr(new TCPAddr.Ptr(ParseIP("::1"), 0, ""), 1, false), new ($structType([["laddr", "laddr", "net", TCPAddr, ""], ["value", "value", "net", $Int, ""], ["ok", "ok", "net", $Bool, ""]])).Ptr(new TCPAddr.Ptr(IPv4(127, 0, 0, 1), 0, ""), 0, false)]);
		_ref = probes;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			_tuple = syscall.Socket(30, 1, 6); s = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_i++;
				continue;
			}
			$deferred.push([closesocket, [s]]);
			syscall.SetsockoptInt(s, 41, 27, ((i < 0 || i >= probes.$length) ? $throwRuntimeError("index out of range") : probes.$array[probes.$offset + i]).value);
			_tuple$1 = ((i < 0 || i >= probes.$length) ? $throwRuntimeError("index out of range") : probes.$array[probes.$offset + i]).laddr.sockaddr(30); sa = _tuple$1[0]; err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_i++;
				continue;
			}
			err$1 = syscall.Bind(s, sa);
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_i++;
				continue;
			}
			((i < 0 || i >= probes.$length) ? $throwRuntimeError("index out of range") : probes.$array[probes.$offset + i]).ok = true;
			_i++;
		}
		_tmp = ((0 < 0 || 0 >= probes.$length) ? $throwRuntimeError("index out of range") : probes.$array[probes.$offset + 0]).ok; _tmp$1 = ((1 < 0 || 1 >= probes.$length) ? $throwRuntimeError("index out of range") : probes.$array[probes.$offset + 1]).ok; supportsIPv6$1 = _tmp; supportsIPv4map$1 = _tmp$1;
		return [supportsIPv6$1, supportsIPv4map$1];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [supportsIPv6$1, supportsIPv4map$1]; }
	};
	ipToSockaddr = function(family, ip, port, zone) {
		var _ref, sa, i, x, sa$1, i$1, x$1;
		_ref = family;
		if (_ref === 2) {
			if (ip.$length === 0) {
				ip = $pkg.IPv4zero;
			}
			ip = ip.To4();
			if (ip === IP.nil) {
				return [$ifaceNil, new InvalidAddrError("non-IPv4 address")];
			}
			sa = new syscall.SockaddrInet4.Ptr();
			i = 0;
			while (i < 4) {
				(x = sa.Addr, (i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i] = ((i < 0 || i >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + i]));
				i = i + (1) >> 0;
			}
			sa.Port = port;
			return [sa, $ifaceNil];
		} else if (_ref === 30) {
			if (ip.$length === 0) {
				ip = $pkg.IPv6zero;
			}
			if (ip.Equal($pkg.IPv4zero)) {
				ip = $pkg.IPv6zero;
			}
			ip = ip.To16();
			if (ip === IP.nil) {
				return [$ifaceNil, new InvalidAddrError("non-IPv6 address")];
			}
			sa$1 = new syscall.SockaddrInet6.Ptr();
			i$1 = 0;
			while (i$1 < 16) {
				(x$1 = sa$1.Addr, (i$1 < 0 || i$1 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[i$1] = ((i$1 < 0 || i$1 >= ip.$length) ? $throwRuntimeError("index out of range") : ip.$array[ip.$offset + i$1]));
				i$1 = i$1 + (1) >> 0;
			}
			sa$1.Port = port;
			sa$1.ZoneId = (zoneToInt(zone) >>> 0);
			return [sa$1, $ifaceNil];
		}
		return [$ifaceNil, new InvalidAddrError("unexpected socket family")];
	};
	HardwareAddr.prototype.String = function() {
		var a, x, buf, _ref, _i, i, b;
		a = this;
		if (a.$length === 0) {
			return "";
		}
		buf = ($sliceType($Uint8)).make(0, ((x = a.$length, (((x >>> 16 << 16) * 3 >> 0) + (x << 16 >>> 16) * 3) >> 0) - 1 >> 0));
		_ref = a;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				buf = $append(buf, 58);
			}
			buf = $append(buf, "0123456789abcdef".charCodeAt((b >>> 4 << 24 >>> 24)));
			buf = $append(buf, "0123456789abcdef".charCodeAt(((b & 15) >>> 0)));
			_i++;
		}
		return $bytesToString(buf);
	};
	$ptrType(HardwareAddr).prototype.String = function() { return this.$get().String(); };
	conn.Ptr.prototype.ok = function() {
		var c;
		c = this;
		return !(c === ($ptrType(conn)).nil) && !(c.fd === ($ptrType(netFD)).nil);
	};
	conn.prototype.ok = function() { return this.$val.ok(); };
	conn.Ptr.prototype.Read = function(b) {
		var c;
		c = this;
		if (!c.ok()) {
			return [0, new syscall.Errno(22)];
		}
		return c.fd.Read(b);
	};
	conn.prototype.Read = function(b) { return this.$val.Read(b); };
	conn.Ptr.prototype.Write = function(b) {
		var c;
		c = this;
		if (!c.ok()) {
			return [0, new syscall.Errno(22)];
		}
		return c.fd.Write(b);
	};
	conn.prototype.Write = function(b) { return this.$val.Write(b); };
	conn.Ptr.prototype.Close = function() {
		var c;
		c = this;
		if (!c.ok()) {
			return new syscall.Errno(22);
		}
		return c.fd.Close();
	};
	conn.prototype.Close = function() { return this.$val.Close(); };
	conn.Ptr.prototype.LocalAddr = function() {
		var c;
		c = this;
		if (!c.ok()) {
			return $ifaceNil;
		}
		return c.fd.laddr;
	};
	conn.prototype.LocalAddr = function() { return this.$val.LocalAddr(); };
	conn.Ptr.prototype.RemoteAddr = function() {
		var c;
		c = this;
		if (!c.ok()) {
			return $ifaceNil;
		}
		return c.fd.raddr;
	};
	conn.prototype.RemoteAddr = function() { return this.$val.RemoteAddr(); };
	conn.Ptr.prototype.SetDeadline = function(t) {
		var c;
		c = this;
		if (!c.ok()) {
			return new syscall.Errno(22);
		}
		return c.fd.setDeadline($clone(t, time.Time));
	};
	conn.prototype.SetDeadline = function(t) { return this.$val.SetDeadline(t); };
	conn.Ptr.prototype.SetReadDeadline = function(t) {
		var c;
		c = this;
		if (!c.ok()) {
			return new syscall.Errno(22);
		}
		return c.fd.setReadDeadline($clone(t, time.Time));
	};
	conn.prototype.SetReadDeadline = function(t) { return this.$val.SetReadDeadline(t); };
	conn.Ptr.prototype.SetWriteDeadline = function(t) {
		var c;
		c = this;
		if (!c.ok()) {
			return new syscall.Errno(22);
		}
		return c.fd.setWriteDeadline($clone(t, time.Time));
	};
	conn.prototype.SetWriteDeadline = function(t) { return this.$val.SetWriteDeadline(t); };
	conn.Ptr.prototype.SetReadBuffer = function(bytes) {
		var c;
		c = this;
		if (!c.ok()) {
			return new syscall.Errno(22);
		}
		return setReadBuffer(c.fd, bytes);
	};
	conn.prototype.SetReadBuffer = function(bytes) { return this.$val.SetReadBuffer(bytes); };
	conn.Ptr.prototype.SetWriteBuffer = function(bytes) {
		var c;
		c = this;
		if (!c.ok()) {
			return new syscall.Errno(22);
		}
		return setWriteBuffer(c.fd, bytes);
	};
	conn.prototype.SetWriteBuffer = function(bytes) { return this.$val.SetWriteBuffer(bytes); };
	conn.Ptr.prototype.File = function() {
		var f = ($ptrType(os.File)).nil, err = $ifaceNil, c, _tuple;
		c = this;
		_tuple = c.fd.dup(); f = _tuple[0]; err = _tuple[1];
		return [f, err];
	};
	conn.prototype.File = function() { return this.$val.File(); };
	OpError.Ptr.prototype.Error = function() {
		var e, s;
		e = this;
		if (e === ($ptrType(OpError)).nil) {
			return "<nil>";
		}
		s = e.Op;
		if (!(e.Net === "")) {
			s = s + (" " + e.Net);
		}
		if (!($interfaceIsEqual(e.Addr, $ifaceNil))) {
			s = s + (" " + e.Addr.String());
		}
		s = s + (": " + e.Err.Error());
		return s;
	};
	OpError.prototype.Error = function() { return this.$val.Error(); };
	OpError.Ptr.prototype.Temporary = function() {
		var e, _tuple, t, ok;
		e = this;
		_tuple = $assertType(e.Err, temporary, true); t = _tuple[0]; ok = _tuple[1];
		return ok && t.Temporary();
	};
	OpError.prototype.Temporary = function() { return this.$val.Temporary(); };
	OpError.Ptr.prototype.Timeout = function() {
		var e, _tuple, t, ok;
		e = this;
		_tuple = $assertType(e.Err, timeout, true); t = _tuple[0]; ok = _tuple[1];
		return ok && t.Timeout();
	};
	OpError.prototype.Timeout = function() { return this.$val.Timeout(); };
	timeoutError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return "i/o timeout";
	};
	timeoutError.prototype.Error = function() { return this.$val.Error(); };
	timeoutError.Ptr.prototype.Timeout = function() {
		var e;
		e = this;
		return true;
	};
	timeoutError.prototype.Timeout = function() { return this.$val.Timeout(); };
	timeoutError.Ptr.prototype.Temporary = function() {
		var e;
		e = this;
		return true;
	};
	timeoutError.prototype.Temporary = function() { return this.$val.Temporary(); };
	InvalidAddrError.prototype.Error = function() {
		var e;
		e = this.$val !== undefined ? this.$val : this;
		return e;
	};
	$ptrType(InvalidAddrError).prototype.Error = function() { return new InvalidAddrError(this.$get()).Error(); };
	InvalidAddrError.prototype.Timeout = function() {
		var e;
		e = this.$val !== undefined ? this.$val : this;
		return false;
	};
	$ptrType(InvalidAddrError).prototype.Timeout = function() { return new InvalidAddrError(this.$get()).Timeout(); };
	InvalidAddrError.prototype.Temporary = function() {
		var e;
		e = this.$val !== undefined ? this.$val : this;
		return false;
	};
	$ptrType(InvalidAddrError).prototype.Temporary = function() { return new InvalidAddrError(this.$get()).Temporary(); };
	genericReadFrom = function(w, r) {
		var n = new $Int64(0, 0), err = $ifaceNil, _tuple, x;
		_tuple = io.Copy((x = new writerOnly.Ptr(w), new x.constructor.Struct(x)), r); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	byteIndex = function(s, c) {
		var i;
		i = 0;
		while (i < s.length) {
			if (s.charCodeAt(i) === c) {
				return i;
			}
			i = i + (1) >> 0;
		}
		return -1;
	};
	dtoi = function(s, i0) {
		var n = 0, i = 0, ok = false, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8;
		n = 0;
		i = i0;
		while (i < s.length && 48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
			n = ((((n >>> 16 << 16) * 10 >> 0) + (n << 16 >>> 16) * 10) >> 0) + ((s.charCodeAt(i) - 48 << 24 >>> 24) >> 0) >> 0;
			if (n >= 16777215) {
				_tmp = 0; _tmp$1 = i; _tmp$2 = false; n = _tmp; i = _tmp$1; ok = _tmp$2;
				return [n, i, ok];
			}
			i = i + (1) >> 0;
		}
		if (i === i0) {
			_tmp$3 = 0; _tmp$4 = i; _tmp$5 = false; n = _tmp$3; i = _tmp$4; ok = _tmp$5;
			return [n, i, ok];
		}
		_tmp$6 = n; _tmp$7 = i; _tmp$8 = true; n = _tmp$6; i = _tmp$7; ok = _tmp$8;
		return [n, i, ok];
	};
	xtoi = function(s, i0) {
		var n = 0, i = 0, ok = false, x, x$1, x$2, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8;
		n = 0;
		i = i0;
		while (i < s.length) {
			if (48 <= s.charCodeAt(i) && s.charCodeAt(i) <= 57) {
				n = (x = 16, (((n >>> 16 << 16) * x >> 0) + (n << 16 >>> 16) * x) >> 0);
				n = n + (((s.charCodeAt(i) - 48 << 24 >>> 24) >> 0)) >> 0;
			} else if (97 <= s.charCodeAt(i) && s.charCodeAt(i) <= 102) {
				n = (x$1 = 16, (((n >>> 16 << 16) * x$1 >> 0) + (n << 16 >>> 16) * x$1) >> 0);
				n = n + ((((s.charCodeAt(i) - 97 << 24 >>> 24) >> 0) + 10 >> 0)) >> 0;
			} else if (65 <= s.charCodeAt(i) && s.charCodeAt(i) <= 70) {
				n = (x$2 = 16, (((n >>> 16 << 16) * x$2 >> 0) + (n << 16 >>> 16) * x$2) >> 0);
				n = n + ((((s.charCodeAt(i) - 65 << 24 >>> 24) >> 0) + 10 >> 0)) >> 0;
			} else {
				break;
			}
			if (n >= 16777215) {
				_tmp = 0; _tmp$1 = i; _tmp$2 = false; n = _tmp; i = _tmp$1; ok = _tmp$2;
				return [n, i, ok];
			}
			i = i + (1) >> 0;
		}
		if (i === i0) {
			_tmp$3 = 0; _tmp$4 = i; _tmp$5 = false; n = _tmp$3; i = _tmp$4; ok = _tmp$5;
			return [n, i, ok];
		}
		_tmp$6 = n; _tmp$7 = i; _tmp$8 = true; n = _tmp$6; i = _tmp$7; ok = _tmp$8;
		return [n, i, ok];
	};
	itoa = function(i) {
		var buf, n, neg, ui, _r, _q;
		buf = ($arrayType($Uint8, 30)).zero(); $copy(buf, ($arrayType($Uint8, 30)).zero(), ($arrayType($Uint8, 30)));
		n = 30;
		neg = false;
		if (i < 0) {
			i = -i;
			neg = true;
		}
		ui = (i >>> 0);
		while (ui > 0 || (n === 30)) {
			n = n - (1) >> 0;
			(n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = ((48 + (_r = ui % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >>> 0) << 24 >>> 24);
			ui = (_q = ui / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		if (neg) {
			n = n - (1) >> 0;
			(n < 0 || n >= buf.length) ? $throwRuntimeError("index out of range") : buf[n] = 45;
		}
		return $bytesToString($subslice(new ($sliceType($Uint8))(buf), n));
	};
	itod = function(i) {
		var b, bp, _r, _q;
		if (i === 0) {
			return "0";
		}
		b = ($arrayType($Uint8, 32)).zero(); $copy(b, ($arrayType($Uint8, 32)).zero(), ($arrayType($Uint8, 32)));
		bp = 32;
		while (i > 0) {
			bp = bp - (1) >> 0;
			(bp < 0 || bp >= b.length) ? $throwRuntimeError("index out of range") : b[bp] = ((_r = i % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) + 48 << 24 >>> 24;
			i = (_q = i / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		return $bytesToString($subslice(new ($sliceType($Uint8))(b), bp));
	};
	itox = function(i, min) {
		var b, bp, _r, _q;
		b = ($arrayType($Uint8, 32)).zero(); $copy(b, ($arrayType($Uint8, 32)).zero(), ($arrayType($Uint8, 32)));
		bp = 32;
		while (i > 0 || min > 0) {
			bp = bp - (1) >> 0;
			(bp < 0 || bp >= b.length) ? $throwRuntimeError("index out of range") : b[bp] = "0123456789abcdef".charCodeAt(((_r = i % 16, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24));
			min = min - (1) >> 0;
			i = (_q = i / (16), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		}
		return $bytesToString($subslice(new ($sliceType($Uint8))(b), bp));
	};
	last = function(s, b) {
		var i;
		i = s.length;
		i = i - (1) >> 0;
		while (i >= 0) {
			if (s.charCodeAt(i) === b) {
				break;
			}
			i = i - (1) >> 0;
		}
		return i;
	};
	sendFile = function(c, r) {
		var n = new $Int64(0, 0), err = $ifaceNil, handled = false, _tmp, _tmp$1, _tmp$2;
		_tmp = new $Int64(0, 0); _tmp$1 = $ifaceNil; _tmp$2 = false; n = _tmp; err = _tmp$1; handled = _tmp$2;
		return [n, err, handled];
	};
	maxListenerBacklog = function() {
		var n, err, _ref, _tuple, _tuple$1;
		n = 0;
		err = $ifaceNil;
		_ref = "darwin";
		if (_ref === "darwin" || _ref === "freebsd") {
			_tuple = syscall.SysctlUint32("kern.ipc.somaxconn"); n = _tuple[0]; err = _tuple[1];
		} else if (_ref === "netbsd") {
		} else if (_ref === "openbsd") {
			_tuple$1 = syscall.SysctlUint32("kern.somaxconn"); n = _tuple$1[0]; err = _tuple$1[1];
		}
		if ((n === 0) || !($interfaceIsEqual(err, $ifaceNil))) {
			return 128;
		}
		if (n > 65535) {
			n = 65535;
		}
		return (n >> 0);
	};
	boolint = function(b) {
		if (b) {
			return 1;
		}
		return 0;
	};
	setReadBuffer = function(fd, bytes) {
		var $deferred = [], $err = null, err;
		/* */ try { $deferFrames.push($deferred);
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		return os.NewSyscallError("setsockopt", syscall.SetsockoptInt(fd.sysfd, 65535, 4098, bytes));
		/* */ } catch(err) { $err = err; return $ifaceNil; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	setWriteBuffer = function(fd, bytes) {
		var $deferred = [], $err = null, err;
		/* */ try { $deferFrames.push($deferred);
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		return os.NewSyscallError("setsockopt", syscall.SetsockoptInt(fd.sysfd, 65535, 4097, bytes));
		/* */ } catch(err) { $err = err; return $ifaceNil; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	setKeepAlive = function(fd, keepalive) {
		var $deferred = [], $err = null, err;
		/* */ try { $deferFrames.push($deferred);
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		return os.NewSyscallError("setsockopt", syscall.SetsockoptInt(fd.sysfd, 65535, 8, boolint(keepalive)));
		/* */ } catch(err) { $err = err; return $ifaceNil; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	setLinger = function(fd, sec) {
		var $deferred = [], $err = null, l, err;
		/* */ try { $deferFrames.push($deferred);
		l = new syscall.Linger.Ptr(); $copy(l, new syscall.Linger.Ptr(), syscall.Linger);
		if (sec >= 0) {
			l.Onoff = 1;
			l.Linger = (sec >> 0);
		} else {
			l.Onoff = 0;
			l.Linger = 0;
		}
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		return os.NewSyscallError("setsockopt", syscall.SetsockoptLinger(fd.sysfd, 65535, 128, l));
		/* */ } catch(err) { $err = err; return $ifaceNil; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	accept = function(s) {
		var _tuple, ns, sa, err;
		_tuple = syscall.Accept(s); ns = _tuple[0]; sa = _tuple[1]; err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			syscall.CloseOnExec(ns);
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [-1, $ifaceNil, err];
		}
		err = syscall.SetNonblock(ns, true);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			syscall.Close(ns);
			return [-1, $ifaceNil, err];
		}
		return [ns, sa, $ifaceNil];
	};
	TCPAddr.Ptr.prototype.Network = function() {
		var a;
		a = this;
		return "tcp";
	};
	TCPAddr.prototype.Network = function() { return this.$val.Network(); };
	TCPAddr.Ptr.prototype.String = function() {
		var a, ip;
		a = this;
		if (a === ($ptrType(TCPAddr)).nil) {
			return "<nil>";
		}
		ip = ipEmptyString(a.IP);
		if (!(a.Zone === "")) {
			return JoinHostPort(ip + "%" + a.Zone, itoa(a.Port));
		}
		return JoinHostPort(ip, itoa(a.Port));
	};
	TCPAddr.prototype.String = function() { return this.$val.String(); };
	TCPAddr.Ptr.prototype.toAddr = function() {
		var a;
		a = this;
		if (a === ($ptrType(TCPAddr)).nil) {
			return $ifaceNil;
		}
		return a;
	};
	TCPAddr.prototype.toAddr = function() { return this.$val.toAddr(); };
	sockaddrToTCP = function(sa) {
		var sa$1, _ref, x, x$1;
		_ref = sa;
		if ($assertType(_ref, ($ptrType(syscall.SockaddrInet4)), true)[1]) {
			sa$1 = _ref.$val;
			return new TCPAddr.Ptr((x = $subslice(new ($sliceType($Uint8))(sa$1.Addr), 0), $subslice(new IP(x.$array), x.$offset, x.$offset + x.$length)), sa$1.Port, "");
		} else if ($assertType(_ref, ($ptrType(syscall.SockaddrInet6)), true)[1]) {
			sa$1 = _ref.$val;
			return new TCPAddr.Ptr((x$1 = $subslice(new ($sliceType($Uint8))(sa$1.Addr), 0), $subslice(new IP(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), sa$1.Port, zoneToString((sa$1.ZoneId >> 0)));
		}
		return $ifaceNil;
	};
	TCPAddr.Ptr.prototype.sockaddr = function(family) {
		var a;
		a = this;
		if (a === ($ptrType(TCPAddr)).nil) {
			return [$ifaceNil, $ifaceNil];
		}
		return ipToSockaddr(family, a.IP, a.Port, a.Zone);
	};
	TCPAddr.prototype.sockaddr = function(family) { return this.$val.sockaddr(family); };
	newTCPConn = function(fd) {
		var c;
		c = new TCPConn.Ptr(new conn.Ptr(fd));
		c.SetNoDelay(true);
		return c;
	};
	TCPConn.Ptr.prototype.ReadFrom = function(r) {
		var c, _tuple, n, err, handled;
		c = this;
		_tuple = sendFile(c.conn.fd, r); n = _tuple[0]; err = _tuple[1]; handled = _tuple[2];
		if (handled) {
			return [n, err];
		}
		return genericReadFrom(c, r);
	};
	TCPConn.prototype.ReadFrom = function(r) { return this.$val.ReadFrom(r); };
	TCPConn.Ptr.prototype.CloseRead = function() {
		var c;
		c = this;
		if (!c.conn.ok()) {
			return new syscall.Errno(22);
		}
		return c.conn.fd.closeRead();
	};
	TCPConn.prototype.CloseRead = function() { return this.$val.CloseRead(); };
	TCPConn.Ptr.prototype.CloseWrite = function() {
		var c;
		c = this;
		if (!c.conn.ok()) {
			return new syscall.Errno(22);
		}
		return c.conn.fd.closeWrite();
	};
	TCPConn.prototype.CloseWrite = function() { return this.$val.CloseWrite(); };
	TCPConn.Ptr.prototype.SetLinger = function(sec) {
		var c;
		c = this;
		if (!c.conn.ok()) {
			return new syscall.Errno(22);
		}
		return setLinger(c.conn.fd, sec);
	};
	TCPConn.prototype.SetLinger = function(sec) { return this.$val.SetLinger(sec); };
	TCPConn.Ptr.prototype.SetKeepAlive = function(keepalive) {
		var c;
		c = this;
		if (!c.conn.ok()) {
			return new syscall.Errno(22);
		}
		return setKeepAlive(c.conn.fd, keepalive);
	};
	TCPConn.prototype.SetKeepAlive = function(keepalive) { return this.$val.SetKeepAlive(keepalive); };
	TCPConn.Ptr.prototype.SetKeepAlivePeriod = function(d) {
		var c;
		c = this;
		if (!c.conn.ok()) {
			return new syscall.Errno(22);
		}
		return setKeepAlivePeriod(c.conn.fd, d);
	};
	TCPConn.prototype.SetKeepAlivePeriod = function(d) { return this.$val.SetKeepAlivePeriod(d); };
	TCPConn.Ptr.prototype.SetNoDelay = function(noDelay) {
		var c;
		c = this;
		if (!c.conn.ok()) {
			return new syscall.Errno(22);
		}
		return setNoDelay(c.conn.fd, noDelay);
	};
	TCPConn.prototype.SetNoDelay = function(noDelay) { return this.$val.SetNoDelay(noDelay); };
	TCPListener.Ptr.prototype.AcceptTCP = function() {
		var l, _tuple, fd, err;
		l = this;
		if (l === ($ptrType(TCPListener)).nil || l.fd === ($ptrType(netFD)).nil) {
			return [($ptrType(TCPConn)).nil, new syscall.Errno(22)];
		}
		_tuple = l.fd.accept(sockaddrToTCP); fd = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($ptrType(TCPConn)).nil, err];
		}
		return [newTCPConn(fd), $ifaceNil];
	};
	TCPListener.prototype.AcceptTCP = function() { return this.$val.AcceptTCP(); };
	TCPListener.Ptr.prototype.Accept = function() {
		var l, _tuple, c, err;
		l = this;
		_tuple = l.AcceptTCP(); c = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, err];
		}
		return [c, $ifaceNil];
	};
	TCPListener.prototype.Accept = function() { return this.$val.Accept(); };
	TCPListener.Ptr.prototype.Close = function() {
		var l;
		l = this;
		if (l === ($ptrType(TCPListener)).nil || l.fd === ($ptrType(netFD)).nil) {
			return new syscall.Errno(22);
		}
		return l.fd.Close();
	};
	TCPListener.prototype.Close = function() { return this.$val.Close(); };
	TCPListener.Ptr.prototype.Addr = function() {
		var l;
		l = this;
		return l.fd.laddr;
	};
	TCPListener.prototype.Addr = function() { return this.$val.Addr(); };
	TCPListener.Ptr.prototype.SetDeadline = function(t) {
		var l;
		l = this;
		if (l === ($ptrType(TCPListener)).nil || l.fd === ($ptrType(netFD)).nil) {
			return new syscall.Errno(22);
		}
		return l.fd.setDeadline($clone(t, time.Time));
	};
	TCPListener.prototype.SetDeadline = function(t) { return this.$val.SetDeadline(t); };
	TCPListener.Ptr.prototype.File = function() {
		var f = ($ptrType(os.File)).nil, err = $ifaceNil, l, _tuple;
		l = this;
		_tuple = l.fd.dup(); f = _tuple[0]; err = _tuple[1];
		return [f, err];
	};
	TCPListener.prototype.File = function() { return this.$val.File(); };
	setKeepAlivePeriod = function(fd, d) {
		var $deferred = [], $err = null, err, x, secs;
		/* */ try { $deferFrames.push($deferred);
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		d = (x = new time.Duration(0, 999999999), new time.Duration(d.$high + x.$high, d.$low + x.$low));
		secs = (d.Seconds() >> 0);
		return os.NewSyscallError("setsockopt", syscall.SetsockoptInt(fd.sysfd, 6, 16, secs));
		/* */ } catch(err) { $err = err; return $ifaceNil; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	setNoDelay = function(fd, noDelay) {
		var $deferred = [], $err = null, err;
		/* */ try { $deferFrames.push($deferred);
		err = fd.incref();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		$deferred.push([$methodVal(fd, "decref"), []]);
		return os.NewSyscallError("setsockopt", syscall.SetsockoptInt(fd.sysfd, 6, 1, boolint(noDelay)));
		/* */ } catch(err) { $err = err; return $ifaceNil; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	$pkg.$init = function() {
		($ptrType(dnsRR_Header)).methods = [["Header", "Header", "", $funcType([], [($ptrType(dnsRR_Header))], false), -1], ["Walk", "Walk", "", $funcType([($funcType([$emptyInterface, $String, $String], [$Bool], false))], [$Bool], false), -1]];
		dnsRR_Header.init([["Name", "Name", "", $String, "net:\"domain-name\""], ["Rrtype", "Rrtype", "", $Uint16, ""], ["Class", "Class", "", $Uint16, ""], ["Ttl", "Ttl", "", $Uint32, ""], ["Rdlength", "Rdlength", "", $Uint16, ""]]);
		($ptrType(dnsRR_CNAME)).methods = [["Header", "Header", "", $funcType([], [($ptrType(dnsRR_Header))], false), -1], ["Walk", "Walk", "", $funcType([($funcType([$emptyInterface, $String, $String], [$Bool], false))], [$Bool], false), -1]];
		dnsRR_CNAME.init([["Hdr", "Hdr", "", dnsRR_Header, ""], ["Cname", "Cname", "", $String, "net:\"domain-name\""]]);
		($ptrType(dnsRR_HINFO)).methods = [["Header", "Header", "", $funcType([], [($ptrType(dnsRR_Header))], false), -1], ["Walk", "Walk", "", $funcType([($funcType([$emptyInterface, $String, $String], [$Bool], false))], [$Bool], false), -1]];
		dnsRR_HINFO.init([["Hdr", "Hdr", "", dnsRR_Header, ""], ["Cpu", "Cpu", "", $String, ""], ["Os", "Os", "", $String, ""]]);
		($ptrType(dnsRR_MB)).methods = [["Header", "Header", "", $funcType([], [($ptrType(dnsRR_Header))], false), -1], ["Walk", "Walk", "", $funcType([($funcType([$emptyInterface, $String, $String], [$Bool], false))], [$Bool], false), -1]];
		dnsRR_MB.init([["Hdr", "Hdr", "", dnsRR_Header, ""], ["Mb", "Mb", "", $String, "net:\"domain-name\""]]);
		($ptrType(dnsRR_MG)).methods = [["Header", "Header", "", $funcType([], [($ptrType(dnsRR_Header))], false), -1], ["Walk", "Walk", "", $funcType([($funcType([$emptyInterface, $String, $String], [$Bool], false))], [$Bool], false), -1]];
		dnsRR_MG.init([["Hdr", "Hdr", "", dnsRR_Header, ""], ["Mg", "Mg", "", $String, "net:\"domain-name\""]]);
		($ptrType(dnsRR_MINFO)).methods = [["Header", "Header", "", $funcType([], [($ptrType(dnsRR_Header))], false), -1], ["Walk", "Walk", "", $funcType([($funcType([$emptyInterface, $String, $String], [$Bool], false))], [$Bool], false), -1]];
		dnsRR_MINFO.init([["Hdr", "Hdr", "", dnsRR_Header, ""], ["Rmail", "Rmail", "", $String, "net:\"domain-name\""], ["Email", "Email", "", $String, "net:\"domain-name\""]]);
		($ptrType(dnsRR_MR)).methods = [["Header", "Header", "", $funcType([], [($ptrType(dnsRR_Header))], false), -1], ["Walk", "Walk", "", $funcType([($funcType([$emptyInterface, $String, $String], [$Bool], false))], [$Bool], false), -1]];
		dnsRR_MR.init([["Hdr", "Hdr", "", dnsRR_Header, ""], ["Mr", "Mr", "", $String, "net:\"domain-name\""]]);
		($ptrType(dnsRR_MX)).methods = [["Header", "Header", "", $funcType([], [($ptrType(dnsRR_Header))], false), -1], ["Walk", "Walk", "", $funcType([($funcType([$emptyInterface, $String, $String], [$Bool], false))], [$Bool], false), -1]];
		dnsRR_MX.init([["Hdr", "Hdr", "", dnsRR_Header, ""], ["Pref", "Pref", "", $Uint16, ""], ["Mx", "Mx", "", $String, "net:\"domain-name\""]]);
		($ptrType(dnsRR_NS)).methods = [["Header", "Header", "", $funcType([], [($ptrType(dnsRR_Header))], false), -1], ["Walk", "Walk", "", $funcType([($funcType([$emptyInterface, $String, $String], [$Bool], false))], [$Bool], false), -1]];
		dnsRR_NS.init([["Hdr", "Hdr", "", dnsRR_Header, ""], ["Ns", "Ns", "", $String, "net:\"domain-name\""]]);
		($ptrType(dnsRR_PTR)).methods = [["Header", "Header", "", $funcType([], [($ptrType(dnsRR_Header))], false), -1], ["Walk", "Walk", "", $funcType([($funcType([$emptyInterface, $String, $String], [$Bool], false))], [$Bool], false), -1]];
		dnsRR_PTR.init([["Hdr", "Hdr", "", dnsRR_Header, ""], ["Ptr", "Ptr", "", $String, "net:\"domain-name\""]]);
		($ptrType(dnsRR_SOA)).methods = [["Header", "Header", "", $funcType([], [($ptrType(dnsRR_Header))], false), -1], ["Walk", "Walk", "", $funcType([($funcType([$emptyInterface, $String, $String], [$Bool], false))], [$Bool], false), -1]];
		dnsRR_SOA.init([["Hdr", "Hdr", "", dnsRR_Header, ""], ["Ns", "Ns", "", $String, "net:\"domain-name\""], ["Mbox", "Mbox", "", $String, "net:\"domain-name\""], ["Serial", "Serial", "", $Uint32, ""], ["Refresh", "Refresh", "", $Uint32, ""], ["Retry", "Retry", "", $Uint32, ""], ["Expire", "Expire", "", $Uint32, ""], ["Minttl", "Minttl", "", $Uint32, ""]]);
		($ptrType(dnsRR_TXT)).methods = [["Header", "Header", "", $funcType([], [($ptrType(dnsRR_Header))], false), -1], ["Walk", "Walk", "", $funcType([($funcType([$emptyInterface, $String, $String], [$Bool], false))], [$Bool], false), -1]];
		dnsRR_TXT.init([["Hdr", "Hdr", "", dnsRR_Header, ""], ["Txt", "Txt", "", $String, ""]]);
		($ptrType(dnsRR_SRV)).methods = [["Header", "Header", "", $funcType([], [($ptrType(dnsRR_Header))], false), -1], ["Walk", "Walk", "", $funcType([($funcType([$emptyInterface, $String, $String], [$Bool], false))], [$Bool], false), -1]];
		dnsRR_SRV.init([["Hdr", "Hdr", "", dnsRR_Header, ""], ["Priority", "Priority", "", $Uint16, ""], ["Weight", "Weight", "", $Uint16, ""], ["Port", "Port", "", $Uint16, ""], ["Target", "Target", "", $String, "net:\"domain-name\""]]);
		($ptrType(dnsRR_A)).methods = [["Header", "Header", "", $funcType([], [($ptrType(dnsRR_Header))], false), -1], ["Walk", "Walk", "", $funcType([($funcType([$emptyInterface, $String, $String], [$Bool], false))], [$Bool], false), -1]];
		dnsRR_A.init([["Hdr", "Hdr", "", dnsRR_Header, ""], ["A", "A", "", $Uint32, "net:\"ipv4\""]]);
		($ptrType(dnsRR_AAAA)).methods = [["Header", "Header", "", $funcType([], [($ptrType(dnsRR_Header))], false), -1], ["Walk", "Walk", "", $funcType([($funcType([$emptyInterface, $String, $String], [$Bool], false))], [$Bool], false), -1]];
		dnsRR_AAAA.init([["Hdr", "Hdr", "", dnsRR_Header, ""], ["AAAA", "AAAA", "", ($arrayType($Uint8, 16)), "net:\"ipv6\""]]);
		($ptrType(fdMutex)).methods = [["Decref", "Decref", "", $funcType([], [$Bool], false), -1], ["Incref", "Incref", "", $funcType([], [$Bool], false), -1], ["IncrefAndClose", "IncrefAndClose", "", $funcType([], [$Bool], false), -1], ["RWLock", "RWLock", "", $funcType([$Bool], [$Bool], false), -1], ["RWUnlock", "RWUnlock", "", $funcType([$Bool], [$Bool], false), -1]];
		fdMutex.init([["state", "state", "net", $Uint64, ""], ["rsema", "rsema", "net", $Uint32, ""], ["wsema", "wsema", "net", $Uint32, ""]]);
		($ptrType(pollDesc)).methods = [["Close", "Close", "", $funcType([], [], false), -1], ["Evict", "Evict", "", $funcType([], [$Bool], false), -1], ["Init", "Init", "", $funcType([($ptrType(netFD))], [$error], false), -1], ["Lock", "Lock", "", $funcType([], [], false), -1], ["Prepare", "Prepare", "", $funcType([$Int], [$error], false), -1], ["PrepareRead", "PrepareRead", "", $funcType([], [$error], false), -1], ["PrepareWrite", "PrepareWrite", "", $funcType([], [$error], false), -1], ["Unlock", "Unlock", "", $funcType([], [], false), -1], ["Wait", "Wait", "", $funcType([$Int], [$error], false), -1], ["WaitCanceled", "WaitCanceled", "", $funcType([$Int], [], false), -1], ["WaitCanceledRead", "WaitCanceledRead", "", $funcType([], [], false), -1], ["WaitCanceledWrite", "WaitCanceledWrite", "", $funcType([], [], false), -1], ["WaitRead", "WaitRead", "", $funcType([], [$error], false), -1], ["WaitWrite", "WaitWrite", "", $funcType([], [$error], false), -1], ["Wakeup", "Wakeup", "", $funcType([], [], false), -1]];
		pollDesc.init([["runtimeCtx", "runtimeCtx", "net", $Uintptr, ""]]);
		($ptrType(netFD)).methods = [["Close", "Close", "", $funcType([], [$error], false), -1], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["accept", "accept", "net", $funcType([($funcType([syscall.Sockaddr], [Addr], false))], [($ptrType(netFD)), $error], false), -1], ["closeRead", "closeRead", "net", $funcType([], [$error], false), -1], ["closeWrite", "closeWrite", "net", $funcType([], [$error], false), -1], ["connect", "connect", "net", $funcType([syscall.Sockaddr, syscall.Sockaddr, time.Time], [$error], false), -1], ["decref", "decref", "net", $funcType([], [], false), -1], ["destroy", "destroy", "net", $funcType([], [], false), -1], ["dial", "dial", "net", $funcType([sockaddr, sockaddr, time.Time, ($funcType([syscall.Sockaddr], [Addr], false))], [$error], false), -1], ["dup", "dup", "net", $funcType([], [($ptrType(os.File)), $error], false), -1], ["incref", "incref", "net", $funcType([], [$error], false), -1], ["init", "init", "net", $funcType([], [$error], false), -1], ["listenDatagram", "listenDatagram", "net", $funcType([sockaddr, ($funcType([syscall.Sockaddr], [Addr], false))], [$error], false), -1], ["listenStream", "listenStream", "net", $funcType([sockaddr, $Int, ($funcType([syscall.Sockaddr], [Addr], false))], [$error], false), -1], ["name", "name", "net", $funcType([], [$String], false), -1], ["readFrom", "readFrom", "net", $funcType([($sliceType($Uint8))], [$Int, syscall.Sockaddr, $error], false), -1], ["readLock", "readLock", "net", $funcType([], [$error], false), -1], ["readMsg", "readMsg", "net", $funcType([($sliceType($Uint8)), ($sliceType($Uint8))], [$Int, $Int, $Int, syscall.Sockaddr, $error], false), -1], ["readUnlock", "readUnlock", "net", $funcType([], [], false), -1], ["setAddr", "setAddr", "net", $funcType([Addr, Addr], [], false), -1], ["setDeadline", "setDeadline", "net", $funcType([time.Time], [$error], false), -1], ["setReadDeadline", "setReadDeadline", "net", $funcType([time.Time], [$error], false), -1], ["setWriteDeadline", "setWriteDeadline", "net", $funcType([time.Time], [$error], false), -1], ["shutdown", "shutdown", "net", $funcType([$Int], [$error], false), -1], ["writeLock", "writeLock", "net", $funcType([], [$error], false), -1], ["writeMsg", "writeMsg", "net", $funcType([($sliceType($Uint8)), ($sliceType($Uint8)), syscall.Sockaddr], [$Int, $Int, $error], false), -1], ["writeTo", "writeTo", "net", $funcType([($sliceType($Uint8)), syscall.Sockaddr], [$Int, $error], false), -1], ["writeUnlock", "writeUnlock", "net", $funcType([], [], false), -1]];
		netFD.init([["fdmu", "fdmu", "net", fdMutex, ""], ["sysfd", "sysfd", "net", $Int, ""], ["family", "family", "net", $Int, ""], ["sotype", "sotype", "net", $Int, ""], ["isConnected", "isConnected", "net", $Bool, ""], ["net", "net", "net", $String, ""], ["laddr", "laddr", "net", Addr, ""], ["raddr", "raddr", "net", Addr, ""], ["pd", "pd", "net", pollDesc, ""]]);
		($ptrType(Interface)).methods = [["Addrs", "Addrs", "", $funcType([], [($sliceType(Addr)), $error], false), -1], ["MulticastAddrs", "MulticastAddrs", "", $funcType([], [($sliceType(Addr)), $error], false), -1]];
		Interface.init([["Index", "Index", "", $Int, ""], ["MTU", "MTU", "", $Int, ""], ["Name", "Name", "", $String, ""], ["HardwareAddr", "HardwareAddr", "", HardwareAddr, ""], ["Flags", "Flags", "", Flags, ""]]);
		Flags.methods = [["String", "String", "", $funcType([], [$String], false), -1]];
		($ptrType(Flags)).methods = [["String", "String", "", $funcType([], [$String], false), -1]];
		IP.methods = [["DefaultMask", "DefaultMask", "", $funcType([], [IPMask], false), -1], ["Equal", "Equal", "", $funcType([IP], [$Bool], false), -1], ["IsGlobalUnicast", "IsGlobalUnicast", "", $funcType([], [$Bool], false), -1], ["IsInterfaceLocalMulticast", "IsInterfaceLocalMulticast", "", $funcType([], [$Bool], false), -1], ["IsLinkLocalMulticast", "IsLinkLocalMulticast", "", $funcType([], [$Bool], false), -1], ["IsLinkLocalUnicast", "IsLinkLocalUnicast", "", $funcType([], [$Bool], false), -1], ["IsLoopback", "IsLoopback", "", $funcType([], [$Bool], false), -1], ["IsMulticast", "IsMulticast", "", $funcType([], [$Bool], false), -1], ["IsUnspecified", "IsUnspecified", "", $funcType([], [$Bool], false), -1], ["MarshalText", "MarshalText", "", $funcType([], [($sliceType($Uint8)), $error], false), -1], ["Mask", "Mask", "", $funcType([IPMask], [IP], false), -1], ["String", "String", "", $funcType([], [$String], false), -1], ["To16", "To16", "", $funcType([], [IP], false), -1], ["To4", "To4", "", $funcType([], [IP], false), -1]];
		($ptrType(IP)).methods = [["DefaultMask", "DefaultMask", "", $funcType([], [IPMask], false), -1], ["Equal", "Equal", "", $funcType([IP], [$Bool], false), -1], ["IsGlobalUnicast", "IsGlobalUnicast", "", $funcType([], [$Bool], false), -1], ["IsInterfaceLocalMulticast", "IsInterfaceLocalMulticast", "", $funcType([], [$Bool], false), -1], ["IsLinkLocalMulticast", "IsLinkLocalMulticast", "", $funcType([], [$Bool], false), -1], ["IsLinkLocalUnicast", "IsLinkLocalUnicast", "", $funcType([], [$Bool], false), -1], ["IsLoopback", "IsLoopback", "", $funcType([], [$Bool], false), -1], ["IsMulticast", "IsMulticast", "", $funcType([], [$Bool], false), -1], ["IsUnspecified", "IsUnspecified", "", $funcType([], [$Bool], false), -1], ["MarshalText", "MarshalText", "", $funcType([], [($sliceType($Uint8)), $error], false), -1], ["Mask", "Mask", "", $funcType([IPMask], [IP], false), -1], ["String", "String", "", $funcType([], [$String], false), -1], ["To16", "To16", "", $funcType([], [IP], false), -1], ["To4", "To4", "", $funcType([], [IP], false), -1], ["UnmarshalText", "UnmarshalText", "", $funcType([($sliceType($Uint8))], [$error], false), -1]];
		IP.init($Uint8);
		IPMask.methods = [["Size", "Size", "", $funcType([], [$Int, $Int], false), -1], ["String", "String", "", $funcType([], [$String], false), -1]];
		($ptrType(IPMask)).methods = [["Size", "Size", "", $funcType([], [$Int, $Int], false), -1], ["String", "String", "", $funcType([], [$String], false), -1]];
		IPMask.init($Uint8);
		($ptrType(IPNet)).methods = [["Contains", "Contains", "", $funcType([IP], [$Bool], false), -1], ["Network", "Network", "", $funcType([], [$String], false), -1], ["String", "String", "", $funcType([], [$String], false), -1]];
		IPNet.init([["IP", "IP", "", IP, ""], ["Mask", "Mask", "", IPMask, ""]]);
		($ptrType(ParseError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		ParseError.init([["Type", "Type", "", $String, ""], ["Text", "Text", "", $String, ""]]);
		($ptrType(IPAddr)).methods = [["Network", "Network", "", $funcType([], [$String], false), -1], ["String", "String", "", $funcType([], [$String], false), -1], ["family", "family", "net", $funcType([], [$Int], false), -1], ["isWildcard", "isWildcard", "net", $funcType([], [$Bool], false), -1], ["sockaddr", "sockaddr", "net", $funcType([$Int], [syscall.Sockaddr, $error], false), -1], ["toAddr", "toAddr", "net", $funcType([], [Addr], false), -1]];
		IPAddr.init([["IP", "IP", "", IP, ""], ["Zone", "Zone", "", $String, ""]]);
		HardwareAddr.methods = [["String", "String", "", $funcType([], [$String], false), -1]];
		($ptrType(HardwareAddr)).methods = [["String", "String", "", $funcType([], [$String], false), -1]];
		HardwareAddr.init($Uint8);
		Addr.init([["Network", "Network", "", $funcType([], [$String], false)], ["String", "String", "", $funcType([], [$String], false)]]);
		Conn.init([["Close", "Close", "", $funcType([], [$error], false)], ["LocalAddr", "LocalAddr", "", $funcType([], [Addr], false)], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false)], ["RemoteAddr", "RemoteAddr", "", $funcType([], [Addr], false)], ["SetDeadline", "SetDeadline", "", $funcType([time.Time], [$error], false)], ["SetReadDeadline", "SetReadDeadline", "", $funcType([time.Time], [$error], false)], ["SetWriteDeadline", "SetWriteDeadline", "", $funcType([time.Time], [$error], false)], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false)]]);
		($ptrType(conn)).methods = [["Close", "Close", "", $funcType([], [$error], false), -1], ["File", "File", "", $funcType([], [($ptrType(os.File)), $error], false), -1], ["LocalAddr", "LocalAddr", "", $funcType([], [Addr], false), -1], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["RemoteAddr", "RemoteAddr", "", $funcType([], [Addr], false), -1], ["SetDeadline", "SetDeadline", "", $funcType([time.Time], [$error], false), -1], ["SetReadBuffer", "SetReadBuffer", "", $funcType([$Int], [$error], false), -1], ["SetReadDeadline", "SetReadDeadline", "", $funcType([time.Time], [$error], false), -1], ["SetWriteBuffer", "SetWriteBuffer", "", $funcType([$Int], [$error], false), -1], ["SetWriteDeadline", "SetWriteDeadline", "", $funcType([time.Time], [$error], false), -1], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["ok", "ok", "net", $funcType([], [$Bool], false), -1]];
		conn.init([["fd", "fd", "net", ($ptrType(netFD)), ""]]);
		Error.init([["Error", "Error", "", $funcType([], [$String], false)], ["Temporary", "Temporary", "", $funcType([], [$Bool], false)], ["Timeout", "Timeout", "", $funcType([], [$Bool], false)]]);
		Listener.init([["Accept", "Accept", "", $funcType([], [Conn, $error], false)], ["Addr", "Addr", "", $funcType([], [Addr], false)], ["Close", "Close", "", $funcType([], [$error], false)]]);
		($ptrType(OpError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1], ["Temporary", "Temporary", "", $funcType([], [$Bool], false), -1], ["Timeout", "Timeout", "", $funcType([], [$Bool], false), -1]];
		OpError.init([["Op", "Op", "", $String, ""], ["Net", "Net", "", $String, ""], ["Addr", "Addr", "", Addr, ""], ["Err", "Err", "", $error, ""]]);
		temporary.init([["Temporary", "Temporary", "", $funcType([], [$Bool], false)]]);
		timeout.init([["Timeout", "Timeout", "", $funcType([], [$Bool], false)]]);
		($ptrType(timeoutError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1], ["Temporary", "Temporary", "", $funcType([], [$Bool], false), -1], ["Timeout", "Timeout", "", $funcType([], [$Bool], false), -1]];
		timeoutError.init([]);
		InvalidAddrError.methods = [["Error", "Error", "", $funcType([], [$String], false), -1], ["Temporary", "Temporary", "", $funcType([], [$Bool], false), -1], ["Timeout", "Timeout", "", $funcType([], [$Bool], false), -1]];
		($ptrType(InvalidAddrError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1], ["Temporary", "Temporary", "", $funcType([], [$Bool], false), -1], ["Timeout", "Timeout", "", $funcType([], [$Bool], false), -1]];
		writerOnly.methods = [["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0]];
		($ptrType(writerOnly)).methods = [["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0]];
		writerOnly.init([["Writer", "", "", io.Writer, ""]]);
		sockaddr.init([["Network", "Network", "", $funcType([], [$String], false)], ["String", "String", "", $funcType([], [$String], false)], ["family", "family", "net", $funcType([], [$Int], false)], ["isWildcard", "isWildcard", "net", $funcType([], [$Bool], false)], ["sockaddr", "sockaddr", "net", $funcType([$Int], [syscall.Sockaddr, $error], false)], ["toAddr", "toAddr", "net", $funcType([], [Addr], false)]]);
		($ptrType(TCPAddr)).methods = [["Network", "Network", "", $funcType([], [$String], false), -1], ["String", "String", "", $funcType([], [$String], false), -1], ["family", "family", "net", $funcType([], [$Int], false), -1], ["isWildcard", "isWildcard", "net", $funcType([], [$Bool], false), -1], ["sockaddr", "sockaddr", "net", $funcType([$Int], [syscall.Sockaddr, $error], false), -1], ["toAddr", "toAddr", "net", $funcType([], [Addr], false), -1]];
		TCPAddr.init([["IP", "IP", "", IP, ""], ["Port", "Port", "", $Int, ""], ["Zone", "Zone", "", $String, ""]]);
		($ptrType(TCPConn)).methods = [["Close", "Close", "", $funcType([], [$error], false), 0], ["CloseRead", "CloseRead", "", $funcType([], [$error], false), -1], ["CloseWrite", "CloseWrite", "", $funcType([], [$error], false), -1], ["File", "File", "", $funcType([], [($ptrType(os.File)), $error], false), 0], ["LocalAddr", "LocalAddr", "", $funcType([], [Addr], false), 0], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0], ["ReadFrom", "ReadFrom", "", $funcType([io.Reader], [$Int64, $error], false), -1], ["RemoteAddr", "RemoteAddr", "", $funcType([], [Addr], false), 0], ["SetDeadline", "SetDeadline", "", $funcType([time.Time], [$error], false), 0], ["SetKeepAlive", "SetKeepAlive", "", $funcType([$Bool], [$error], false), -1], ["SetKeepAlivePeriod", "SetKeepAlivePeriod", "", $funcType([time.Duration], [$error], false), -1], ["SetLinger", "SetLinger", "", $funcType([$Int], [$error], false), -1], ["SetNoDelay", "SetNoDelay", "", $funcType([$Bool], [$error], false), -1], ["SetReadBuffer", "SetReadBuffer", "", $funcType([$Int], [$error], false), 0], ["SetReadDeadline", "SetReadDeadline", "", $funcType([time.Time], [$error], false), 0], ["SetWriteBuffer", "SetWriteBuffer", "", $funcType([$Int], [$error], false), 0], ["SetWriteDeadline", "SetWriteDeadline", "", $funcType([time.Time], [$error], false), 0], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0], ["ok", "ok", "net", $funcType([], [$Bool], false), 0]];
		TCPConn.init([["conn", "", "net", conn, ""]]);
		($ptrType(TCPListener)).methods = [["Accept", "Accept", "", $funcType([], [Conn, $error], false), -1], ["AcceptTCP", "AcceptTCP", "", $funcType([], [($ptrType(TCPConn)), $error], false), -1], ["Addr", "Addr", "", $funcType([], [Addr], false), -1], ["Close", "Close", "", $funcType([], [$error], false), -1], ["File", "File", "", $funcType([], [($ptrType(os.File)), $error], false), -1], ["SetDeadline", "SetDeadline", "", $funcType([time.Time], [$error], false), -1]];
		TCPListener.init([["fd", "fd", "net", ($ptrType(netFD)), ""]]);
		serverInit = new sync.Once.Ptr();
		supportsIPv4 = false;
		supportsIPv6 = false;
		supportsIPv4map = false;
		rr_mk = (_map = new $Map(), _key = 5, _map[_key] = { k: _key, v: (function() {
			return new dnsRR_CNAME.Ptr();
		}) }, _key = 13, _map[_key] = { k: _key, v: (function() {
			return new dnsRR_HINFO.Ptr();
		}) }, _key = 7, _map[_key] = { k: _key, v: (function() {
			return new dnsRR_MB.Ptr();
		}) }, _key = 8, _map[_key] = { k: _key, v: (function() {
			return new dnsRR_MG.Ptr();
		}) }, _key = 14, _map[_key] = { k: _key, v: (function() {
			return new dnsRR_MINFO.Ptr();
		}) }, _key = 9, _map[_key] = { k: _key, v: (function() {
			return new dnsRR_MR.Ptr();
		}) }, _key = 15, _map[_key] = { k: _key, v: (function() {
			return new dnsRR_MX.Ptr();
		}) }, _key = 2, _map[_key] = { k: _key, v: (function() {
			return new dnsRR_NS.Ptr();
		}) }, _key = 12, _map[_key] = { k: _key, v: (function() {
			return new dnsRR_PTR.Ptr();
		}) }, _key = 6, _map[_key] = { k: _key, v: (function() {
			return new dnsRR_SOA.Ptr();
		}) }, _key = 16, _map[_key] = { k: _key, v: (function() {
			return new dnsRR_TXT.Ptr();
		}) }, _key = 33, _map[_key] = { k: _key, v: (function() {
			return new dnsRR_SRV.Ptr();
		}) }, _key = 1, _map[_key] = { k: _key, v: (function() {
			return new dnsRR_A.Ptr();
		}) }, _key = 28, _map[_key] = { k: _key, v: (function() {
			return new dnsRR_AAAA.Ptr();
		}) }, _map);
		tryDupCloexec = 1;
		errInvalidInterface = errors.New("invalid network interface");
		errInvalidInterfaceIndex = errors.New("invalid network interface index");
		errInvalidInterfaceName = errors.New("invalid network interface name");
		errNoSuchInterface = errors.New("no such network interface");
		errNoSuchMulticastInterface = errors.New("no such multicast network interface");
		flagNames = new ($sliceType($String))(["up", "broadcast", "loopback", "pointtopoint", "multicast"]);
		v4InV6Prefix = new ($sliceType($Uint8))([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255]);
		$pkg.IPv4bcast = IPv4(255, 255, 255, 255);
		$pkg.IPv4allsys = IPv4(224, 0, 0, 1);
		$pkg.IPv4allrouter = IPv4(224, 0, 0, 2);
		$pkg.IPv4zero = IPv4(0, 0, 0, 0);
		$pkg.IPv6zero = new IP([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
		$pkg.IPv6unspecified = new IP([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
		$pkg.IPv6loopback = new IP([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]);
		classAMask = IPv4Mask(255, 0, 0, 0);
		classBMask = IPv4Mask(255, 255, 0, 0);
		classCMask = IPv4Mask(255, 255, 255, 0);
		errNoSuitableAddress = errors.New("no suitable address found");
		errMissingAddress = errors.New("missing address");
		errTimeout = new timeoutError.Ptr();
		errClosing = errors.New("use of closed network connection");
		$pkg.ErrWriteToConnected = errors.New("use of WriteTo with pre-connected connection");
		threadLimit = new ($chanType(($structType([])), false, false))(500);
		listenerBacklog = maxListenerBacklog();
		init();
	};
	return $pkg;
})();
$packages["compress/flate"] = (function() {
	var $pkg = {}, fmt = $packages["fmt"], io = $packages["io"], math = $packages["math"], sort = $packages["sort"], bufio = $packages["bufio"], strconv = $packages["strconv"], huffmanEncoder, literalNode, fixedLiteralEncoding, fixedOffsetEncoding, reverseByte, newHuffmanEncoder, generateFixedLiteralEncoding, generateFixedOffsetEncoding, reverseUint16, reverseBits;
	huffmanEncoder = $pkg.huffmanEncoder = $newType(0, "Struct", "flate.huffmanEncoder", "huffmanEncoder", "compress/flate", function(codeBits_, code_) {
		this.$val = this;
		this.codeBits = codeBits_ !== undefined ? codeBits_ : ($sliceType($Uint8)).nil;
		this.code = code_ !== undefined ? code_ : ($sliceType($Uint16)).nil;
	});
	literalNode = $pkg.literalNode = $newType(0, "Struct", "flate.literalNode", "literalNode", "compress/flate", function(literal_, freq_) {
		this.$val = this;
		this.literal = literal_ !== undefined ? literal_ : 0;
		this.freq = freq_ !== undefined ? freq_ : 0;
	});
	newHuffmanEncoder = function(size) {
		return new huffmanEncoder.Ptr(($sliceType($Uint8)).make(size), ($sliceType($Uint16)).make(size));
	};
	generateFixedLiteralEncoding = function() {
		var h, codeBits, code, ch, bits, size;
		h = newHuffmanEncoder(286);
		codeBits = h.codeBits;
		code = h.code;
		ch = 0;
		ch = 0;
		while (ch < 286) {
			bits = 0;
			size = 0;
			switch (0) { default: if (ch < 144) {
				bits = ch + 48 << 16 >>> 16;
				size = 8;
				break;
			} else if (ch < 256) {
				bits = (ch + 400 << 16 >>> 16) - 144 << 16 >>> 16;
				size = 9;
				break;
			} else if (ch < 280) {
				bits = ch - 256 << 16 >>> 16;
				size = 7;
				break;
			} else {
				bits = (ch + 192 << 16 >>> 16) - 280 << 16 >>> 16;
				size = 8;
			} }
			(ch < 0 || ch >= codeBits.$length) ? $throwRuntimeError("index out of range") : codeBits.$array[codeBits.$offset + ch] = size;
			(ch < 0 || ch >= code.$length) ? $throwRuntimeError("index out of range") : code.$array[code.$offset + ch] = reverseBits(bits, size);
			ch = ch + (1) << 16 >>> 16;
		}
		return h;
	};
	generateFixedOffsetEncoding = function() {
		var h, codeBits, code, ch;
		h = newHuffmanEncoder(30);
		codeBits = h.codeBits;
		code = h.code;
		ch = 0;
		while (ch < 30) {
			(ch < 0 || ch >= codeBits.$length) ? $throwRuntimeError("index out of range") : codeBits.$array[codeBits.$offset + ch] = 5;
			(ch < 0 || ch >= code.$length) ? $throwRuntimeError("index out of range") : code.$array[code.$offset + ch] = reverseBits(ch, 5);
			ch = ch + (1) << 16 >>> 16;
		}
		return h;
	};
	reverseUint16 = function(v) {
		var x, x$1;
		return (((x = v >>> 8 << 16 >>> 16, ((x < 0 || x >= reverseByte.length) ? $throwRuntimeError("index out of range") : reverseByte[x])) << 16 >>> 16) | (((x$1 = (v & 255) >>> 0, ((x$1 < 0 || x$1 >= reverseByte.length) ? $throwRuntimeError("index out of range") : reverseByte[x$1])) << 16 >>> 16) << 8 << 16 >>> 16)) >>> 0;
	};
	reverseBits = function(number, bitLength) {
		var y;
		return reverseUint16((y = (16 - bitLength << 24 >>> 24), y < 32 ? (number << y) : 0) << 16 >>> 16);
	};
	$pkg.$init = function() {
		($ptrType(huffmanEncoder)).methods = [["assignEncodingAndSize", "assignEncodingAndSize", "compress/flate", $funcType([($sliceType($Int32)), ($sliceType(literalNode))], [], false), -1], ["bitCounts", "bitCounts", "compress/flate", $funcType([($sliceType(literalNode)), $Int32], [($sliceType($Int32))], false), -1], ["bitLength", "bitLength", "compress/flate", $funcType([($sliceType($Int32))], [$Int64], false), -1], ["generate", "generate", "compress/flate", $funcType([($sliceType($Int32)), $Int32], [], false), -1]];
		huffmanEncoder.init([["codeBits", "codeBits", "compress/flate", ($sliceType($Uint8)), ""], ["code", "code", "compress/flate", ($sliceType($Uint16)), ""]]);
		literalNode.init([["literal", "literal", "compress/flate", $Uint16, ""], ["freq", "freq", "compress/flate", $Int32, ""]]);
		reverseByte = $toNativeArray("Uint8", [0, 128, 64, 192, 32, 160, 96, 224, 16, 144, 80, 208, 48, 176, 112, 240, 8, 136, 72, 200, 40, 168, 104, 232, 24, 152, 88, 216, 56, 184, 120, 248, 4, 132, 68, 196, 36, 164, 100, 228, 20, 148, 84, 212, 52, 180, 116, 244, 12, 140, 76, 204, 44, 172, 108, 236, 28, 156, 92, 220, 60, 188, 124, 252, 2, 130, 66, 194, 34, 162, 98, 226, 18, 146, 82, 210, 50, 178, 114, 242, 10, 138, 74, 202, 42, 170, 106, 234, 26, 154, 90, 218, 58, 186, 122, 250, 6, 134, 70, 198, 38, 166, 102, 230, 22, 150, 86, 214, 54, 182, 118, 246, 14, 142, 78, 206, 46, 174, 110, 238, 30, 158, 94, 222, 62, 190, 126, 254, 1, 129, 65, 193, 33, 161, 97, 225, 17, 145, 81, 209, 49, 177, 113, 241, 9, 137, 73, 201, 41, 169, 105, 233, 25, 153, 89, 217, 57, 185, 121, 249, 5, 133, 69, 197, 37, 165, 101, 229, 21, 149, 85, 213, 53, 181, 117, 245, 13, 141, 77, 205, 45, 173, 109, 237, 29, 157, 93, 221, 61, 189, 125, 253, 3, 131, 67, 195, 35, 163, 99, 227, 19, 147, 83, 211, 51, 179, 115, 243, 11, 139, 75, 203, 43, 171, 107, 235, 27, 155, 91, 219, 59, 187, 123, 251, 7, 135, 71, 199, 39, 167, 103, 231, 23, 151, 87, 215, 55, 183, 119, 247, 15, 143, 79, 207, 47, 175, 111, 239, 31, 159, 95, 223, 63, 191, 127, 255]);
		fixedLiteralEncoding = generateFixedLiteralEncoding();
		fixedOffsetEncoding = generateFixedOffsetEncoding();
	};
	return $pkg;
})();
$packages["hash"] = (function() {
	var $pkg = {}, io = $packages["io"], Hash;
	Hash = $pkg.Hash = $newType(8, "Interface", "hash.Hash", "Hash", "hash", null);
	$pkg.$init = function() {
		Hash.init([["BlockSize", "BlockSize", "", $funcType([], [$Int], false)], ["Reset", "Reset", "", $funcType([], [], false)], ["Size", "Size", "", $funcType([], [$Int], false)], ["Sum", "Sum", "", $funcType([($sliceType($Uint8))], [($sliceType($Uint8))], false)], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false)]]);
	};
	return $pkg;
})();
$packages["hash/crc32"] = (function() {
	var $pkg = {}, hash = $packages["hash"], sync = $packages["sync"], Table, makeTable;
	Table = $pkg.Table = $newType(1024, "Array", "crc32.Table", "Table", "hash/crc32", null);
	makeTable = function(poly) {
		var t, i, crc, j, y;
		t = Table.zero();
		i = 0;
		while (i < 256) {
			crc = (i >>> 0);
			j = 0;
			while (j < 8) {
				if (((crc & 1) >>> 0) === 1) {
					crc = (((crc >>> 1 >>> 0)) ^ poly) >>> 0;
				} else {
					crc = (y = (1), y < 32 ? (crc >>> y) : 0) >>> 0;
				}
				j = j + (1) >> 0;
			}
			t.nilCheck, (i < 0 || i >= t.length) ? $throwRuntimeError("index out of range") : t[i] = crc;
			i = i + (1) >> 0;
		}
		return t;
	};
	$pkg.$init = function() {
		Table.init($Uint32, 256);
		$pkg.IEEETable = makeTable(3988292384);
	};
	return $pkg;
})();
$packages["compress/gzip"] = (function() {
	var $pkg = {}, bufio = $packages["bufio"], flate = $packages["compress/flate"], errors = $packages["errors"], hash = $packages["hash"], crc32 = $packages["hash/crc32"], io = $packages["io"], time = $packages["time"], fmt = $packages["fmt"];
	$pkg.$init = function() {
		$pkg.ErrChecksum = errors.New("gzip: invalid checksum");
		$pkg.ErrHeader = errors.New("gzip: invalid header");
	};
	return $pkg;
})();
$packages["container/list"] = (function() {
	var $pkg = {};
	$pkg.$init = function() {
	};
	return $pkg;
})();
$packages["crypto"] = (function() {
	var $pkg = {}, hash = $packages["hash"], strconv = $packages["strconv"], Hash, PublicKey, PrivateKey, digestSizes, hashes, RegisterHash;
	Hash = $pkg.Hash = $newType(4, "Uint", "crypto.Hash", "Hash", "crypto", null);
	PublicKey = $pkg.PublicKey = $newType(8, "Interface", "crypto.PublicKey", "PublicKey", "crypto", null);
	PrivateKey = $pkg.PrivateKey = $newType(8, "Interface", "crypto.PrivateKey", "PrivateKey", "crypto", null);
	Hash.prototype.Size = function() {
		var h;
		h = this.$val !== undefined ? this.$val : this;
		if (h > 0 && h < 10) {
			return (((h < 0 || h >= digestSizes.$length) ? $throwRuntimeError("index out of range") : digestSizes.$array[digestSizes.$offset + h]) >> 0);
		}
		$panic(new $String("crypto: Size of unknown hash function"));
	};
	$ptrType(Hash).prototype.Size = function() { return new Hash(this.$get()).Size(); };
	Hash.prototype.New = function() {
		var h, f;
		h = this.$val !== undefined ? this.$val : this;
		if (h > 0 && h < 10) {
			f = ((h < 0 || h >= hashes.$length) ? $throwRuntimeError("index out of range") : hashes.$array[hashes.$offset + h]);
			if (!(f === $throwNilPointerError)) {
				return f();
			}
		}
		$panic(new $String("crypto: requested hash function #" + strconv.Itoa((h >> 0)) + " is unavailable"));
	};
	$ptrType(Hash).prototype.New = function() { return new Hash(this.$get()).New(); };
	Hash.prototype.Available = function() {
		var h;
		h = this.$val !== undefined ? this.$val : this;
		return h < 10 && !(((h < 0 || h >= hashes.$length) ? $throwRuntimeError("index out of range") : hashes.$array[hashes.$offset + h]) === $throwNilPointerError);
	};
	$ptrType(Hash).prototype.Available = function() { return new Hash(this.$get()).Available(); };
	RegisterHash = $pkg.RegisterHash = function(h, f) {
		if (h >= 10) {
			$panic(new $String("crypto: RegisterHash of unknown hash function"));
		}
		(h < 0 || h >= hashes.$length) ? $throwRuntimeError("index out of range") : hashes.$array[hashes.$offset + h] = f;
	};
	$pkg.$init = function() {
		Hash.methods = [["Available", "Available", "", $funcType([], [$Bool], false), -1], ["New", "New", "", $funcType([], [hash.Hash], false), -1], ["Size", "Size", "", $funcType([], [$Int], false), -1]];
		($ptrType(Hash)).methods = [["Available", "Available", "", $funcType([], [$Bool], false), -1], ["New", "New", "", $funcType([], [hash.Hash], false), -1], ["Size", "Size", "", $funcType([], [$Int], false), -1]];
		PublicKey.init([]);
		PrivateKey.init([]);
		digestSizes = new ($sliceType($Uint8))([0, 16, 16, 20, 28, 32, 48, 64, 36, 20]);
		hashes = ($sliceType(($funcType([], [hash.Hash], false)))).make(10);
	};
	return $pkg;
})();
$packages["crypto/subtle"] = (function() {
	var $pkg = {}, ConstantTimeCompare, ConstantTimeSelect, ConstantTimeByteEq, ConstantTimeEq, ConstantTimeCopy, ConstantTimeLessOrEq;
	ConstantTimeCompare = $pkg.ConstantTimeCompare = function(x, y) {
		var v, i;
		if (!((x.$length === y.$length))) {
			$panic(new $String("subtle: slices have different lengths"));
		}
		v = 0;
		i = 0;
		while (i < x.$length) {
			v = (v | (((((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]) ^ ((i < 0 || i >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i])) << 24 >>> 24))) >>> 0;
			i = i + (1) >> 0;
		}
		return ConstantTimeByteEq(v, 0);
	};
	ConstantTimeSelect = $pkg.ConstantTimeSelect = function(v, x, y) {
		return ((~((v - 1 >> 0)) >> 0) & x) | (((v - 1 >> 0)) & y);
	};
	ConstantTimeByteEq = $pkg.ConstantTimeByteEq = function(x, y) {
		var z;
		z = ~(((x ^ y) << 24 >>> 24)) << 24 >>> 24;
		z = (z & ((z >>> 4 << 24 >>> 24))) >>> 0;
		z = (z & ((z >>> 2 << 24 >>> 24))) >>> 0;
		z = (z & ((z >>> 1 << 24 >>> 24))) >>> 0;
		return (z >> 0);
	};
	ConstantTimeEq = $pkg.ConstantTimeEq = function(x, y) {
		var z;
		z = ~(((x ^ y) >> 0)) >> 0;
		z = z & ((z >> 16 >> 0));
		z = z & ((z >> 8 >> 0));
		z = z & ((z >> 4 >> 0));
		z = z & ((z >> 2 >> 0));
		z = z & ((z >> 1 >> 0));
		return ((z & 1) >> 0);
	};
	ConstantTimeCopy = $pkg.ConstantTimeCopy = function(v, x, y) {
		var xmask, ymask, i;
		if (!((x.$length === y.$length))) {
			$panic(new $String("subtle: slices have different lengths"));
		}
		xmask = ((v - 1 >> 0) << 24 >>> 24);
		ymask = ((~((v - 1 >> 0)) >> 0) << 24 >>> 24);
		i = 0;
		while (i < x.$length) {
			(i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = (((((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]) & xmask) >>> 0) | ((((i < 0 || i >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i]) & ymask) >>> 0)) >>> 0;
			i = i + (1) >> 0;
		}
		return;
	};
	ConstantTimeLessOrEq = $pkg.ConstantTimeLessOrEq = function(x, y) {
		var x32, y32;
		x32 = (x >> 0);
		y32 = (y >> 0);
		return (((((((x32 - y32 >> 0) - 1 >> 0)) >> 31 >> 0)) & 1) >> 0);
	};
	$pkg.$init = function() {
	};
	return $pkg;
})();
$packages["crypto/cipher"] = (function() {
	var $pkg = {}, subtle = $packages["crypto/subtle"], errors = $packages["errors"], io = $packages["io"], runtime = $packages["runtime"], cbc, cbcEncrypter, cbcDecrypter, Block, Stream, BlockMode, ctr, AEAD, gcmFieldElement, gcm, errOpen, gcmReductionTable, newCBC, NewCBCEncrypter, NewCBCDecrypter, dup, NewCTR, NewGCM, reverseBits, gcmAdd, gcmDouble, gcmInc32, sliceForAppend, getUint64, putUint64, safeXORBytes, xorBytes, xorWords;
	cbc = $pkg.cbc = $newType(0, "Struct", "cipher.cbc", "cbc", "crypto/cipher", function(b_, blockSize_, iv_, tmp_) {
		this.$val = this;
		this.b = b_ !== undefined ? b_ : $ifaceNil;
		this.blockSize = blockSize_ !== undefined ? blockSize_ : 0;
		this.iv = iv_ !== undefined ? iv_ : ($sliceType($Uint8)).nil;
		this.tmp = tmp_ !== undefined ? tmp_ : ($sliceType($Uint8)).nil;
	});
	cbcEncrypter = $pkg.cbcEncrypter = $newType(0, "Struct", "cipher.cbcEncrypter", "cbcEncrypter", "crypto/cipher", function(b_, blockSize_, iv_, tmp_) {
		this.$val = this;
		this.b = b_ !== undefined ? b_ : $ifaceNil;
		this.blockSize = blockSize_ !== undefined ? blockSize_ : 0;
		this.iv = iv_ !== undefined ? iv_ : ($sliceType($Uint8)).nil;
		this.tmp = tmp_ !== undefined ? tmp_ : ($sliceType($Uint8)).nil;
	});
	cbcDecrypter = $pkg.cbcDecrypter = $newType(0, "Struct", "cipher.cbcDecrypter", "cbcDecrypter", "crypto/cipher", function(b_, blockSize_, iv_, tmp_) {
		this.$val = this;
		this.b = b_ !== undefined ? b_ : $ifaceNil;
		this.blockSize = blockSize_ !== undefined ? blockSize_ : 0;
		this.iv = iv_ !== undefined ? iv_ : ($sliceType($Uint8)).nil;
		this.tmp = tmp_ !== undefined ? tmp_ : ($sliceType($Uint8)).nil;
	});
	Block = $pkg.Block = $newType(8, "Interface", "cipher.Block", "Block", "crypto/cipher", null);
	Stream = $pkg.Stream = $newType(8, "Interface", "cipher.Stream", "Stream", "crypto/cipher", null);
	BlockMode = $pkg.BlockMode = $newType(8, "Interface", "cipher.BlockMode", "BlockMode", "crypto/cipher", null);
	ctr = $pkg.ctr = $newType(0, "Struct", "cipher.ctr", "ctr", "crypto/cipher", function(b_, ctr_, out_, outUsed_) {
		this.$val = this;
		this.b = b_ !== undefined ? b_ : $ifaceNil;
		this.ctr = ctr_ !== undefined ? ctr_ : ($sliceType($Uint8)).nil;
		this.out = out_ !== undefined ? out_ : ($sliceType($Uint8)).nil;
		this.outUsed = outUsed_ !== undefined ? outUsed_ : 0;
	});
	AEAD = $pkg.AEAD = $newType(8, "Interface", "cipher.AEAD", "AEAD", "crypto/cipher", null);
	gcmFieldElement = $pkg.gcmFieldElement = $newType(0, "Struct", "cipher.gcmFieldElement", "gcmFieldElement", "crypto/cipher", function(low_, high_) {
		this.$val = this;
		this.low = low_ !== undefined ? low_ : new $Uint64(0, 0);
		this.high = high_ !== undefined ? high_ : new $Uint64(0, 0);
	});
	gcm = $pkg.gcm = $newType(0, "Struct", "cipher.gcm", "gcm", "crypto/cipher", function(cipher_, productTable_) {
		this.$val = this;
		this.cipher = cipher_ !== undefined ? cipher_ : $ifaceNil;
		this.productTable = productTable_ !== undefined ? productTable_ : ($arrayType(gcmFieldElement, 16)).zero();
	});
	newCBC = function(b, iv) {
		return new cbc.Ptr(b, b.BlockSize(), dup(iv), ($sliceType($Uint8)).make(b.BlockSize()));
	};
	NewCBCEncrypter = $pkg.NewCBCEncrypter = function(b, iv) {
		if (!((iv.$length === b.BlockSize()))) {
			$panic(new $String("cipher.NewCBCEncrypter: IV length must equal block size"));
		}
		return $clone(newCBC(b, iv), cbcEncrypter);
	};
	cbcEncrypter.Ptr.prototype.BlockSize = function() {
		var x;
		x = this;
		return x.blockSize;
	};
	cbcEncrypter.prototype.BlockSize = function() { return this.$val.BlockSize(); };
	cbcEncrypter.Ptr.prototype.CryptBlocks = function(dst, src) {
		var x, _r, iv;
		x = this;
		if (!(((_r = src.$length % x.blockSize, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0))) {
			$panic(new $String("crypto/cipher: input not full blocks"));
		}
		if (dst.$length < src.$length) {
			$panic(new $String("crypto/cipher: output smaller than input"));
		}
		iv = x.iv;
		while (src.$length > 0) {
			xorBytes($subslice(dst, 0, x.blockSize), $subslice(src, 0, x.blockSize), iv);
			x.b.Encrypt($subslice(dst, 0, x.blockSize), $subslice(dst, 0, x.blockSize));
			iv = $subslice(dst, 0, x.blockSize);
			src = $subslice(src, x.blockSize);
			dst = $subslice(dst, x.blockSize);
		}
		$copySlice(x.iv, iv);
	};
	cbcEncrypter.prototype.CryptBlocks = function(dst, src) { return this.$val.CryptBlocks(dst, src); };
	cbcEncrypter.Ptr.prototype.SetIV = function(iv) {
		var x;
		x = this;
		if (!((iv.$length === x.iv.$length))) {
			$panic(new $String("cipher: incorrect length IV"));
		}
		$copySlice(x.iv, iv);
	};
	cbcEncrypter.prototype.SetIV = function(iv) { return this.$val.SetIV(iv); };
	NewCBCDecrypter = $pkg.NewCBCDecrypter = function(b, iv) {
		if (!((iv.$length === b.BlockSize()))) {
			$panic(new $String("cipher.NewCBCDecrypter: IV length must equal block size"));
		}
		return $clone(newCBC(b, iv), cbcDecrypter);
	};
	cbcDecrypter.Ptr.prototype.BlockSize = function() {
		var x;
		x = this;
		return x.blockSize;
	};
	cbcDecrypter.prototype.BlockSize = function() { return this.$val.BlockSize(); };
	cbcDecrypter.Ptr.prototype.CryptBlocks = function(dst, src) {
		var x, _r, end, start, prev, _tmp, _tmp$1;
		x = this;
		if (!(((_r = src.$length % x.blockSize, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0))) {
			$panic(new $String("crypto/cipher: input not full blocks"));
		}
		if (dst.$length < src.$length) {
			$panic(new $String("crypto/cipher: output smaller than input"));
		}
		if (src.$length === 0) {
			return;
		}
		end = src.$length;
		start = end - x.blockSize >> 0;
		prev = start - x.blockSize >> 0;
		$copySlice(x.tmp, $subslice(src, start, end));
		while (start > 0) {
			x.b.Decrypt($subslice(dst, start, end), $subslice(src, start, end));
			xorBytes($subslice(dst, start, end), $subslice(dst, start, end), $subslice(src, prev, start));
			end = start;
			start = prev;
			prev = prev - (x.blockSize) >> 0;
		}
		x.b.Decrypt($subslice(dst, start, end), $subslice(src, start, end));
		xorBytes($subslice(dst, start, end), $subslice(dst, start, end), x.iv);
		_tmp = x.tmp; _tmp$1 = x.iv; x.iv = _tmp; x.tmp = _tmp$1;
	};
	cbcDecrypter.prototype.CryptBlocks = function(dst, src) { return this.$val.CryptBlocks(dst, src); };
	cbcDecrypter.Ptr.prototype.SetIV = function(iv) {
		var x;
		x = this;
		if (!((iv.$length === x.iv.$length))) {
			$panic(new $String("cipher: incorrect length IV"));
		}
		$copySlice(x.iv, iv);
	};
	cbcDecrypter.prototype.SetIV = function(iv) { return this.$val.SetIV(iv); };
	dup = function(p) {
		var q;
		q = ($sliceType($Uint8)).make(p.$length);
		$copySlice(q, p);
		return q;
	};
	NewCTR = $pkg.NewCTR = function(block, iv) {
		var bufSize;
		if (!((iv.$length === block.BlockSize()))) {
			$panic(new $String("cipher.NewCTR: IV length must equal block size"));
		}
		bufSize = 512;
		if (bufSize < block.BlockSize()) {
			bufSize = block.BlockSize();
		}
		return new ctr.Ptr(block, dup(iv), ($sliceType($Uint8)).make(0, bufSize), 0);
	};
	ctr.Ptr.prototype.refill = function() {
		var x, remain, bs, i, _lhs, _index, x$1;
		x = this;
		remain = x.out.$length - x.outUsed >> 0;
		if (remain > x.outUsed) {
			return;
		}
		$copySlice(x.out, $subslice(x.out, x.outUsed));
		x.out = $subslice(x.out, 0, x.out.$capacity);
		bs = x.b.BlockSize();
		while (remain < (x.out.$length - bs >> 0)) {
			x.b.Encrypt($subslice(x.out, remain), x.ctr);
			remain = remain + (bs) >> 0;
			i = x.ctr.$length - 1 >> 0;
			while (i >= 0) {
				_lhs = x.ctr; _index = i; (_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index] = ((_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index]) + (1) << 24 >>> 24;
				if (!(((x$1 = x.ctr, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])) === 0))) {
					break;
				}
				i = i - (1) >> 0;
			}
		}
		x.out = $subslice(x.out, 0, remain);
		x.outUsed = 0;
	};
	ctr.prototype.refill = function() { return this.$val.refill(); };
	ctr.Ptr.prototype.XORKeyStream = function(dst, src) {
		var x, n;
		x = this;
		while (src.$length > 0) {
			if (x.outUsed >= (x.out.$length - x.b.BlockSize() >> 0)) {
				x.refill();
			}
			n = xorBytes(dst, src, $subslice(x.out, x.outUsed));
			dst = $subslice(dst, n);
			src = $subslice(src, n);
			x.outUsed = x.outUsed + (n) >> 0;
		}
	};
	ctr.prototype.XORKeyStream = function(dst, src) { return this.$val.XORKeyStream(dst, src); };
	NewGCM = $pkg.NewGCM = function(cipher) {
		var key, g, x, x$1, x$2, i, x$3, x$4, _q, x$5, x$6, x$7, x$8, x$9, x$10;
		if (!((cipher.BlockSize() === 16))) {
			return [$ifaceNil, errors.New("cipher: NewGCM requires 128-bit block cipher")];
		}
		key = ($arrayType($Uint8, 16)).zero(); $copy(key, ($arrayType($Uint8, 16)).zero(), ($arrayType($Uint8, 16)));
		cipher.Encrypt(new ($sliceType($Uint8))(key), new ($sliceType($Uint8))(key));
		g = new gcm.Ptr(cipher, ($arrayType(gcmFieldElement, 16)).zero());
		x = new gcmFieldElement.Ptr(getUint64($subslice(new ($sliceType($Uint8))(key), 0, 8)), getUint64($subslice(new ($sliceType($Uint8))(key), 8)));
		$copy((x$1 = g.productTable, x$2 = reverseBits(1), ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2])), x, gcmFieldElement);
		i = 2;
		while (i < 16) {
			$copy((x$5 = g.productTable, x$6 = reverseBits(i), ((x$6 < 0 || x$6 >= x$5.length) ? $throwRuntimeError("index out of range") : x$5[x$6])), gcmDouble((x$3 = g.productTable, x$4 = reverseBits((_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))), ((x$4 < 0 || x$4 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[x$4]))), gcmFieldElement);
			$copy((x$9 = g.productTable, x$10 = reverseBits(i + 1 >> 0), ((x$10 < 0 || x$10 >= x$9.length) ? $throwRuntimeError("index out of range") : x$9[x$10])), gcmAdd((x$7 = g.productTable, x$8 = reverseBits(i), ((x$8 < 0 || x$8 >= x$7.length) ? $throwRuntimeError("index out of range") : x$7[x$8])), x), gcmFieldElement);
			i = i + (2) >> 0;
		}
		return [g, $ifaceNil];
	};
	gcm.Ptr.prototype.NonceSize = function() {
		return 12;
	};
	gcm.prototype.NonceSize = function() { return this.$val.NonceSize(); };
	gcm.Ptr.prototype.Overhead = function() {
		return 16;
	};
	gcm.prototype.Overhead = function() { return this.$val.Overhead(); };
	gcm.Ptr.prototype.Seal = function(dst, nonce, plaintext, data) {
		var g, _tuple, ret, out, _tmp, _tmp$1, counter, tagMask;
		g = this;
		if (!((nonce.$length === 12))) {
			$panic(new $String("cipher: incorrect nonce length given to GCM"));
		}
		_tuple = sliceForAppend(dst, plaintext.$length + 16 >> 0); ret = _tuple[0]; out = _tuple[1];
		_tmp = ($arrayType($Uint8, 16)).zero(); $copy(_tmp, ($arrayType($Uint8, 16)).zero(), ($arrayType($Uint8, 16))); _tmp$1 = ($arrayType($Uint8, 16)).zero(); $copy(_tmp$1, ($arrayType($Uint8, 16)).zero(), ($arrayType($Uint8, 16))); counter = ($arrayType($Uint8, 16)).zero(); $copy(counter, _tmp, ($arrayType($Uint8, 16))); tagMask = ($arrayType($Uint8, 16)).zero(); $copy(tagMask, _tmp$1, ($arrayType($Uint8, 16)));
		$copySlice(new ($sliceType($Uint8))(counter), nonce);
		counter[15] = 1;
		g.cipher.Encrypt(new ($sliceType($Uint8))(tagMask), new ($sliceType($Uint8))(counter));
		gcmInc32(counter);
		g.counterCrypt(out, plaintext, counter);
		g.auth($subslice(out, plaintext.$length), $subslice(out, 0, plaintext.$length), data, tagMask);
		return ret;
	};
	gcm.prototype.Seal = function(dst, nonce, plaintext, data) { return this.$val.Seal(dst, nonce, plaintext, data); };
	gcm.Ptr.prototype.Open = function(dst, nonce, ciphertext, data) {
		var g, tag, _tmp, _tmp$1, counter, tagMask, expectedTag, _tuple, ret, out;
		g = this;
		if (!((nonce.$length === 12))) {
			$panic(new $String("cipher: incorrect nonce length given to GCM"));
		}
		if (ciphertext.$length < 16) {
			return [($sliceType($Uint8)).nil, errOpen];
		}
		tag = $subslice(ciphertext, (ciphertext.$length - 16 >> 0));
		ciphertext = $subslice(ciphertext, 0, (ciphertext.$length - 16 >> 0));
		_tmp = ($arrayType($Uint8, 16)).zero(); $copy(_tmp, ($arrayType($Uint8, 16)).zero(), ($arrayType($Uint8, 16))); _tmp$1 = ($arrayType($Uint8, 16)).zero(); $copy(_tmp$1, ($arrayType($Uint8, 16)).zero(), ($arrayType($Uint8, 16))); counter = ($arrayType($Uint8, 16)).zero(); $copy(counter, _tmp, ($arrayType($Uint8, 16))); tagMask = ($arrayType($Uint8, 16)).zero(); $copy(tagMask, _tmp$1, ($arrayType($Uint8, 16)));
		$copySlice(new ($sliceType($Uint8))(counter), nonce);
		counter[15] = 1;
		g.cipher.Encrypt(new ($sliceType($Uint8))(tagMask), new ($sliceType($Uint8))(counter));
		gcmInc32(counter);
		expectedTag = ($arrayType($Uint8, 16)).zero(); $copy(expectedTag, ($arrayType($Uint8, 16)).zero(), ($arrayType($Uint8, 16)));
		g.auth(new ($sliceType($Uint8))(expectedTag), ciphertext, data, tagMask);
		if (!((subtle.ConstantTimeCompare(new ($sliceType($Uint8))(expectedTag), tag) === 1))) {
			return [($sliceType($Uint8)).nil, errOpen];
		}
		_tuple = sliceForAppend(dst, ciphertext.$length); ret = _tuple[0]; out = _tuple[1];
		g.counterCrypt(out, ciphertext, counter);
		return [ret, $ifaceNil];
	};
	gcm.prototype.Open = function(dst, nonce, ciphertext, data) { return this.$val.Open(dst, nonce, ciphertext, data); };
	reverseBits = function(i) {
		i = ((((i << 2 >> 0)) & 12)) | ((((i >> 2 >> 0)) & 3));
		i = ((((i << 1 >> 0)) & 10)) | ((((i >> 1 >> 0)) & 5));
		return i;
	};
	gcmAdd = function(x, y) {
		var x$1, x$2, x$3, x$4;
		return new gcmFieldElement.Ptr((x$1 = x.low, x$2 = y.low, new $Uint64(x$1.$high ^ x$2.$high, (x$1.$low ^ x$2.$low) >>> 0)), (x$3 = x.high, x$4 = y.high, new $Uint64(x$3.$high ^ x$4.$high, (x$3.$low ^ x$4.$low) >>> 0)));
	};
	gcmDouble = function(x) {
		var double$1 = new gcmFieldElement.Ptr(), x$1, x$2, msbSet, x$3, x$4, x$5, x$6;
		msbSet = (x$1 = (x$2 = x.high, new $Uint64(x$2.$high & 0, (x$2.$low & 1) >>> 0)), (x$1.$high === 0 && x$1.$low === 1));
		double$1.high = $shiftRightUint64(x.high, 1);
		double$1.high = (x$3 = double$1.high, x$4 = $shiftLeft64(x.low, 63), new $Uint64(x$3.$high | x$4.$high, (x$3.$low | x$4.$low) >>> 0));
		double$1.low = $shiftRightUint64(x.low, 1);
		if (msbSet) {
			double$1.low = (x$5 = double$1.low, x$6 = new $Uint64(3774873600, 0), new $Uint64(x$5.$high ^ x$6.$high, (x$5.$low ^ x$6.$low) >>> 0));
		}
		return double$1;
	};
	gcm.Ptr.prototype.mul = function(y) {
		var g, z, i, word, j, x, msw, x$1, x$2, x$3, x$4, x$5, x$6, t, x$7, x$8, x$9, x$10;
		g = this;
		z = new gcmFieldElement.Ptr(); $copy(z, new gcmFieldElement.Ptr(), gcmFieldElement);
		i = 0;
		while (i < 2) {
			word = y.high;
			if (i === 1) {
				word = y.low;
			}
			j = 0;
			while (j < 64) {
				msw = (x = z.high, new $Uint64(x.$high & 0, (x.$low & 15) >>> 0));
				z.high = $shiftRightUint64(z.high, (4));
				z.high = (x$1 = z.high, x$2 = $shiftLeft64(z.low, 60), new $Uint64(x$1.$high | x$2.$high, (x$1.$low | x$2.$low) >>> 0));
				z.low = $shiftRightUint64(z.low, (4));
				z.low = (x$3 = z.low, x$4 = $shiftLeft64(new $Uint64(0, (($flatten64(msw) < 0 || $flatten64(msw) >= gcmReductionTable.$length) ? $throwRuntimeError("index out of range") : gcmReductionTable.$array[gcmReductionTable.$offset + $flatten64(msw)])), 48), new $Uint64(x$3.$high ^ x$4.$high, (x$3.$low ^ x$4.$low) >>> 0));
				t = (x$5 = g.productTable, x$6 = new $Uint64(word.$high & 0, (word.$low & 15) >>> 0), (($flatten64(x$6) < 0 || $flatten64(x$6) >= x$5.length) ? $throwRuntimeError("index out of range") : x$5[$flatten64(x$6)]));
				z.low = (x$7 = z.low, x$8 = t.low, new $Uint64(x$7.$high ^ x$8.$high, (x$7.$low ^ x$8.$low) >>> 0));
				z.high = (x$9 = z.high, x$10 = t.high, new $Uint64(x$9.$high ^ x$10.$high, (x$9.$low ^ x$10.$low) >>> 0));
				word = $shiftRightUint64(word, (4));
				j = j + (4) >> 0;
			}
			i = i + (1) >> 0;
		}
		$copy(y, z, gcmFieldElement);
	};
	gcm.prototype.mul = function(y) { return this.$val.mul(y); };
	gcm.Ptr.prototype.updateBlocks = function(y, blocks) {
		var g, x, x$1, x$2, x$3;
		g = this;
		while (blocks.$length > 0) {
			y.low = (x = y.low, x$1 = getUint64(blocks), new $Uint64(x.$high ^ x$1.$high, (x.$low ^ x$1.$low) >>> 0));
			y.high = (x$2 = y.high, x$3 = getUint64($subslice(blocks, 8)), new $Uint64(x$2.$high ^ x$3.$high, (x$2.$low ^ x$3.$low) >>> 0));
			g.mul(y);
			blocks = $subslice(blocks, 16);
		}
	};
	gcm.prototype.updateBlocks = function(y, blocks) { return this.$val.updateBlocks(y, blocks); };
	gcm.Ptr.prototype.update = function(y, data) {
		var g, fullBlocks, partialBlock;
		g = this;
		fullBlocks = ((data.$length >> 4 >> 0)) << 4 >> 0;
		g.updateBlocks(y, $subslice(data, 0, fullBlocks));
		if (!((data.$length === fullBlocks))) {
			partialBlock = ($arrayType($Uint8, 16)).zero(); $copy(partialBlock, ($arrayType($Uint8, 16)).zero(), ($arrayType($Uint8, 16)));
			$copySlice(new ($sliceType($Uint8))(partialBlock), $subslice(data, fullBlocks));
			g.updateBlocks(y, new ($sliceType($Uint8))(partialBlock));
		}
	};
	gcm.prototype.update = function(y, data) { return this.$val.update(y, data); };
	gcmInc32 = function(counterBlock) {
		var i, _lhs, _index;
		i = 15;
		while (i >= 12) {
			_lhs = counterBlock; _index = i; _lhs.nilCheck, (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index] = (_lhs.nilCheck, ((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index])) + (1) << 24 >>> 24;
			if (!(((counterBlock.nilCheck, ((i < 0 || i >= counterBlock.length) ? $throwRuntimeError("index out of range") : counterBlock[i])) === 0))) {
				break;
			}
			i = i - (1) >> 0;
		}
	};
	sliceForAppend = function(in$1, n) {
		var head = ($sliceType($Uint8)).nil, tail = ($sliceType($Uint8)).nil, total;
		total = in$1.$length + n >> 0;
		if (in$1.$capacity >= total) {
			head = $subslice(in$1, 0, total);
		} else {
			head = ($sliceType($Uint8)).make(total);
			$copySlice(head, in$1);
		}
		tail = $subslice(head, in$1.$length);
		return [head, tail];
	};
	gcm.Ptr.prototype.counterCrypt = function(out, in$1, counter) {
		var g, mask;
		g = this;
		mask = ($arrayType($Uint8, 16)).zero(); $copy(mask, ($arrayType($Uint8, 16)).zero(), ($arrayType($Uint8, 16)));
		while (in$1.$length >= 16) {
			g.cipher.Encrypt(new ($sliceType($Uint8))(mask), new ($sliceType($Uint8))(counter));
			gcmInc32(counter);
			xorWords(out, in$1, new ($sliceType($Uint8))(mask));
			out = $subslice(out, 16);
			in$1 = $subslice(in$1, 16);
		}
		if (in$1.$length > 0) {
			g.cipher.Encrypt(new ($sliceType($Uint8))(mask), new ($sliceType($Uint8))(counter));
			gcmInc32(counter);
			xorBytes(out, in$1, new ($sliceType($Uint8))(mask));
		}
	};
	gcm.prototype.counterCrypt = function(out, in$1, counter) { return this.$val.counterCrypt(out, in$1, counter); };
	gcm.Ptr.prototype.auth = function(out, ciphertext, additionalData, tagMask) {
		var g, y, x, x$1, x$2, x$3;
		g = this;
		y = new gcmFieldElement.Ptr(); $copy(y, new gcmFieldElement.Ptr(), gcmFieldElement);
		g.update(y, additionalData);
		g.update(y, ciphertext);
		y.low = (x = y.low, x$1 = $mul64(new $Uint64(0, additionalData.$length), new $Uint64(0, 8)), new $Uint64(x.$high ^ x$1.$high, (x.$low ^ x$1.$low) >>> 0));
		y.high = (x$2 = y.high, x$3 = $mul64(new $Uint64(0, ciphertext.$length), new $Uint64(0, 8)), new $Uint64(x$2.$high ^ x$3.$high, (x$2.$low ^ x$3.$low) >>> 0));
		g.mul(y);
		putUint64(out, y.low);
		putUint64($subslice(out, 8), y.high);
		xorWords(out, out, new ($sliceType($Uint8))(tagMask));
	};
	gcm.prototype.auth = function(out, ciphertext, additionalData, tagMask) { return this.$val.auth(out, ciphertext, additionalData, tagMask); };
	getUint64 = function(data) {
		var x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x$10, x$11, x$12, x$13, r;
		r = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = $shiftLeft64(new $Uint64(0, ((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0])), 56), x$7 = $shiftLeft64(new $Uint64(0, ((1 < 0 || 1 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 1])), 48), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$8 = $shiftLeft64(new $Uint64(0, ((2 < 0 || 2 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 2])), 40), new $Uint64(x$5.$high | x$8.$high, (x$5.$low | x$8.$low) >>> 0)), x$9 = $shiftLeft64(new $Uint64(0, ((3 < 0 || 3 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 3])), 32), new $Uint64(x$4.$high | x$9.$high, (x$4.$low | x$9.$low) >>> 0)), x$10 = $shiftLeft64(new $Uint64(0, ((4 < 0 || 4 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 4])), 24), new $Uint64(x$3.$high | x$10.$high, (x$3.$low | x$10.$low) >>> 0)), x$11 = $shiftLeft64(new $Uint64(0, ((5 < 0 || 5 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 5])), 16), new $Uint64(x$2.$high | x$11.$high, (x$2.$low | x$11.$low) >>> 0)), x$12 = $shiftLeft64(new $Uint64(0, ((6 < 0 || 6 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 6])), 8), new $Uint64(x$1.$high | x$12.$high, (x$1.$low | x$12.$low) >>> 0)), x$13 = new $Uint64(0, ((7 < 0 || 7 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 7])), new $Uint64(x.$high | x$13.$high, (x.$low | x$13.$low) >>> 0));
		return r;
	};
	putUint64 = function(out, v) {
		(0 < 0 || 0 >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + 0] = ($shiftRightUint64(v, 56).$low << 24 >>> 24);
		(1 < 0 || 1 >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + 1] = ($shiftRightUint64(v, 48).$low << 24 >>> 24);
		(2 < 0 || 2 >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + 2] = ($shiftRightUint64(v, 40).$low << 24 >>> 24);
		(3 < 0 || 3 >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + 3] = ($shiftRightUint64(v, 32).$low << 24 >>> 24);
		(4 < 0 || 4 >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + 4] = ($shiftRightUint64(v, 24).$low << 24 >>> 24);
		(5 < 0 || 5 >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + 5] = ($shiftRightUint64(v, 16).$low << 24 >>> 24);
		(6 < 0 || 6 >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + 6] = ($shiftRightUint64(v, 8).$low << 24 >>> 24);
		(7 < 0 || 7 >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + 7] = (v.$low << 24 >>> 24);
	};
	safeXORBytes = function(dst, a, b) {
		var n, i;
		n = a.$length;
		if (b.$length < n) {
			n = b.$length;
		}
		i = 0;
		while (i < n) {
			(i < 0 || i >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + i] = (((i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i]) ^ ((i < 0 || i >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + i])) << 24 >>> 24;
			i = i + (1) >> 0;
		}
		return n;
	};
	xorBytes = function(dst, a, b) {
		return safeXORBytes(dst, a, b);
	};
	xorWords = function(dst, a, b) {
		safeXORBytes(dst, a, b);
	};
	$pkg.$init = function() {
		cbc.init([["b", "b", "crypto/cipher", Block, ""], ["blockSize", "blockSize", "crypto/cipher", $Int, ""], ["iv", "iv", "crypto/cipher", ($sliceType($Uint8)), ""], ["tmp", "tmp", "crypto/cipher", ($sliceType($Uint8)), ""]]);
		($ptrType(cbcEncrypter)).methods = [["BlockSize", "BlockSize", "", $funcType([], [$Int], false), -1], ["CryptBlocks", "CryptBlocks", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8))], [], false), -1], ["SetIV", "SetIV", "", $funcType([($sliceType($Uint8))], [], false), -1]];
		cbcEncrypter.init([["b", "b", "crypto/cipher", Block, ""], ["blockSize", "blockSize", "crypto/cipher", $Int, ""], ["iv", "iv", "crypto/cipher", ($sliceType($Uint8)), ""], ["tmp", "tmp", "crypto/cipher", ($sliceType($Uint8)), ""]]);
		($ptrType(cbcDecrypter)).methods = [["BlockSize", "BlockSize", "", $funcType([], [$Int], false), -1], ["CryptBlocks", "CryptBlocks", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8))], [], false), -1], ["SetIV", "SetIV", "", $funcType([($sliceType($Uint8))], [], false), -1]];
		cbcDecrypter.init([["b", "b", "crypto/cipher", Block, ""], ["blockSize", "blockSize", "crypto/cipher", $Int, ""], ["iv", "iv", "crypto/cipher", ($sliceType($Uint8)), ""], ["tmp", "tmp", "crypto/cipher", ($sliceType($Uint8)), ""]]);
		Block.init([["BlockSize", "BlockSize", "", $funcType([], [$Int], false)], ["Decrypt", "Decrypt", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8))], [], false)], ["Encrypt", "Encrypt", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8))], [], false)]]);
		Stream.init([["XORKeyStream", "XORKeyStream", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8))], [], false)]]);
		BlockMode.init([["BlockSize", "BlockSize", "", $funcType([], [$Int], false)], ["CryptBlocks", "CryptBlocks", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8))], [], false)]]);
		($ptrType(ctr)).methods = [["XORKeyStream", "XORKeyStream", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8))], [], false), -1], ["refill", "refill", "crypto/cipher", $funcType([], [], false), -1]];
		ctr.init([["b", "b", "crypto/cipher", Block, ""], ["ctr", "ctr", "crypto/cipher", ($sliceType($Uint8)), ""], ["out", "out", "crypto/cipher", ($sliceType($Uint8)), ""], ["outUsed", "outUsed", "crypto/cipher", $Int, ""]]);
		AEAD.init([["NonceSize", "NonceSize", "", $funcType([], [$Int], false)], ["Open", "Open", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8))], [($sliceType($Uint8)), $error], false)], ["Overhead", "Overhead", "", $funcType([], [$Int], false)], ["Seal", "Seal", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8))], [($sliceType($Uint8))], false)]]);
		gcmFieldElement.init([["low", "low", "crypto/cipher", $Uint64, ""], ["high", "high", "crypto/cipher", $Uint64, ""]]);
		($ptrType(gcm)).methods = [["NonceSize", "NonceSize", "", $funcType([], [$Int], false), -1], ["Open", "Open", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8))], [($sliceType($Uint8)), $error], false), -1], ["Overhead", "Overhead", "", $funcType([], [$Int], false), -1], ["Seal", "Seal", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8))], [($sliceType($Uint8))], false), -1], ["auth", "auth", "crypto/cipher", $funcType([($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8)), ($ptrType(($arrayType($Uint8, 16))))], [], false), -1], ["counterCrypt", "counterCrypt", "crypto/cipher", $funcType([($sliceType($Uint8)), ($sliceType($Uint8)), ($ptrType(($arrayType($Uint8, 16))))], [], false), -1], ["mul", "mul", "crypto/cipher", $funcType([($ptrType(gcmFieldElement))], [], false), -1], ["update", "update", "crypto/cipher", $funcType([($ptrType(gcmFieldElement)), ($sliceType($Uint8))], [], false), -1], ["updateBlocks", "updateBlocks", "crypto/cipher", $funcType([($ptrType(gcmFieldElement)), ($sliceType($Uint8))], [], false), -1]];
		gcm.init([["cipher", "cipher", "crypto/cipher", Block, ""], ["productTable", "productTable", "crypto/cipher", ($arrayType(gcmFieldElement, 16)), ""]]);
		errOpen = errors.New("cipher: message authentication failed");
		gcmReductionTable = new ($sliceType($Uint16))([0, 7200, 14400, 9312, 28800, 27808, 18624, 21728, 57600, 64800, 55616, 50528, 37248, 36256, 43456, 46560]);
	};
	return $pkg;
})();
$packages["crypto/aes"] = (function() {
	var $pkg = {}, cipher = $packages["crypto/cipher"], strconv = $packages["strconv"], aesCipher, KeySizeError, powx, sbox0, sbox1, te0, te1, te2, te3, td0, td1, td2, td3, encryptBlockGo, decryptBlockGo, subw, rotw, expandKeyGo, NewCipher, encryptBlock, decryptBlock, expandKey;
	aesCipher = $pkg.aesCipher = $newType(0, "Struct", "aes.aesCipher", "aesCipher", "crypto/aes", function(enc_, dec_) {
		this.$val = this;
		this.enc = enc_ !== undefined ? enc_ : ($sliceType($Uint32)).nil;
		this.dec = dec_ !== undefined ? dec_ : ($sliceType($Uint32)).nil;
	});
	KeySizeError = $pkg.KeySizeError = $newType(4, "Int", "aes.KeySizeError", "KeySizeError", "crypto/aes", null);
	encryptBlockGo = function(xk, dst, src) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, s0, s1, s2, s3, t0, t1, t2, t3, _q, nr, k, r, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, _tmp$8, _tmp$9, _tmp$10, _tmp$11, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27;
		_tmp = 0; _tmp$1 = 0; _tmp$2 = 0; _tmp$3 = 0; _tmp$4 = 0; _tmp$5 = 0; _tmp$6 = 0; _tmp$7 = 0; s0 = _tmp; s1 = _tmp$1; s2 = _tmp$2; s3 = _tmp$3; t0 = _tmp$4; t1 = _tmp$5; t2 = _tmp$6; t3 = _tmp$7;
		s0 = (((((((((0 < 0 || 0 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) >>> 0) << 24 >>> 0) | ((((1 < 0 || 1 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) >>> 0) << 16 >>> 0)) >>> 0) | ((((2 < 0 || 2 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 2]) >>> 0) << 8 >>> 0)) >>> 0) | (((3 < 0 || 3 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 3]) >>> 0)) >>> 0;
		s1 = (((((((((4 < 0 || 4 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 4]) >>> 0) << 24 >>> 0) | ((((5 < 0 || 5 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 5]) >>> 0) << 16 >>> 0)) >>> 0) | ((((6 < 0 || 6 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 6]) >>> 0) << 8 >>> 0)) >>> 0) | (((7 < 0 || 7 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 7]) >>> 0)) >>> 0;
		s2 = (((((((((8 < 0 || 8 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 8]) >>> 0) << 24 >>> 0) | ((((9 < 0 || 9 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 9]) >>> 0) << 16 >>> 0)) >>> 0) | ((((10 < 0 || 10 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 10]) >>> 0) << 8 >>> 0)) >>> 0) | (((11 < 0 || 11 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 11]) >>> 0)) >>> 0;
		s3 = (((((((((12 < 0 || 12 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 12]) >>> 0) << 24 >>> 0) | ((((13 < 0 || 13 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 13]) >>> 0) << 16 >>> 0)) >>> 0) | ((((14 < 0 || 14 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 14]) >>> 0) << 8 >>> 0)) >>> 0) | (((15 < 0 || 15 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 15]) >>> 0)) >>> 0;
		s0 = (s0 ^ (((0 < 0 || 0 >= xk.$length) ? $throwRuntimeError("index out of range") : xk.$array[xk.$offset + 0]))) >>> 0;
		s1 = (s1 ^ (((1 < 0 || 1 >= xk.$length) ? $throwRuntimeError("index out of range") : xk.$array[xk.$offset + 1]))) >>> 0;
		s2 = (s2 ^ (((2 < 0 || 2 >= xk.$length) ? $throwRuntimeError("index out of range") : xk.$array[xk.$offset + 2]))) >>> 0;
		s3 = (s3 ^ (((3 < 0 || 3 >= xk.$length) ? $throwRuntimeError("index out of range") : xk.$array[xk.$offset + 3]))) >>> 0;
		nr = (_q = xk.$length / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) - 2 >> 0;
		k = 4;
		r = 0;
		while (r < nr) {
			t0 = ((((((((x = k + 0 >> 0, ((x < 0 || x >= xk.$length) ? $throwRuntimeError("index out of range") : xk.$array[xk.$offset + x])) ^ (x$1 = ((s0 >>> 24 >>> 0) << 24 >>> 24), ((x$1 < 0 || x$1 >= te0.length) ? $throwRuntimeError("index out of range") : te0[x$1]))) >>> 0) ^ (x$2 = ((s1 >>> 16 >>> 0) << 24 >>> 24), ((x$2 < 0 || x$2 >= te1.length) ? $throwRuntimeError("index out of range") : te1[x$2]))) >>> 0) ^ (x$3 = ((s2 >>> 8 >>> 0) << 24 >>> 24), ((x$3 < 0 || x$3 >= te2.length) ? $throwRuntimeError("index out of range") : te2[x$3]))) >>> 0) ^ (x$4 = (s3 << 24 >>> 24), ((x$4 < 0 || x$4 >= te3.length) ? $throwRuntimeError("index out of range") : te3[x$4]))) >>> 0;
			t1 = ((((((((x$5 = k + 1 >> 0, ((x$5 < 0 || x$5 >= xk.$length) ? $throwRuntimeError("index out of range") : xk.$array[xk.$offset + x$5])) ^ (x$6 = ((s1 >>> 24 >>> 0) << 24 >>> 24), ((x$6 < 0 || x$6 >= te0.length) ? $throwRuntimeError("index out of range") : te0[x$6]))) >>> 0) ^ (x$7 = ((s2 >>> 16 >>> 0) << 24 >>> 24), ((x$7 < 0 || x$7 >= te1.length) ? $throwRuntimeError("index out of range") : te1[x$7]))) >>> 0) ^ (x$8 = ((s3 >>> 8 >>> 0) << 24 >>> 24), ((x$8 < 0 || x$8 >= te2.length) ? $throwRuntimeError("index out of range") : te2[x$8]))) >>> 0) ^ (x$9 = (s0 << 24 >>> 24), ((x$9 < 0 || x$9 >= te3.length) ? $throwRuntimeError("index out of range") : te3[x$9]))) >>> 0;
			t2 = ((((((((x$10 = k + 2 >> 0, ((x$10 < 0 || x$10 >= xk.$length) ? $throwRuntimeError("index out of range") : xk.$array[xk.$offset + x$10])) ^ (x$11 = ((s2 >>> 24 >>> 0) << 24 >>> 24), ((x$11 < 0 || x$11 >= te0.length) ? $throwRuntimeError("index out of range") : te0[x$11]))) >>> 0) ^ (x$12 = ((s3 >>> 16 >>> 0) << 24 >>> 24), ((x$12 < 0 || x$12 >= te1.length) ? $throwRuntimeError("index out of range") : te1[x$12]))) >>> 0) ^ (x$13 = ((s0 >>> 8 >>> 0) << 24 >>> 24), ((x$13 < 0 || x$13 >= te2.length) ? $throwRuntimeError("index out of range") : te2[x$13]))) >>> 0) ^ (x$14 = (s1 << 24 >>> 24), ((x$14 < 0 || x$14 >= te3.length) ? $throwRuntimeError("index out of range") : te3[x$14]))) >>> 0;
			t3 = ((((((((x$15 = k + 3 >> 0, ((x$15 < 0 || x$15 >= xk.$length) ? $throwRuntimeError("index out of range") : xk.$array[xk.$offset + x$15])) ^ (x$16 = ((s3 >>> 24 >>> 0) << 24 >>> 24), ((x$16 < 0 || x$16 >= te0.length) ? $throwRuntimeError("index out of range") : te0[x$16]))) >>> 0) ^ (x$17 = ((s0 >>> 16 >>> 0) << 24 >>> 24), ((x$17 < 0 || x$17 >= te1.length) ? $throwRuntimeError("index out of range") : te1[x$17]))) >>> 0) ^ (x$18 = ((s1 >>> 8 >>> 0) << 24 >>> 24), ((x$18 < 0 || x$18 >= te2.length) ? $throwRuntimeError("index out of range") : te2[x$18]))) >>> 0) ^ (x$19 = (s2 << 24 >>> 24), ((x$19 < 0 || x$19 >= te3.length) ? $throwRuntimeError("index out of range") : te3[x$19]))) >>> 0;
			k = k + (4) >> 0;
			_tmp$8 = t0; _tmp$9 = t1; _tmp$10 = t2; _tmp$11 = t3; s0 = _tmp$8; s1 = _tmp$9; s2 = _tmp$10; s3 = _tmp$11;
			r = r + (1) >> 0;
		}
		s0 = ((((((((x$20 = t0 >>> 24 >>> 0, ((x$20 < 0 || x$20 >= sbox0.length) ? $throwRuntimeError("index out of range") : sbox0[x$20])) >>> 0) << 24 >>> 0) | (((x$21 = ((t1 >>> 16 >>> 0) & 255) >>> 0, ((x$21 < 0 || x$21 >= sbox0.length) ? $throwRuntimeError("index out of range") : sbox0[x$21])) >>> 0) << 16 >>> 0)) >>> 0) | (((x$22 = ((t2 >>> 8 >>> 0) & 255) >>> 0, ((x$22 < 0 || x$22 >= sbox0.length) ? $throwRuntimeError("index out of range") : sbox0[x$22])) >>> 0) << 8 >>> 0)) >>> 0) | ((x$23 = (t3 & 255) >>> 0, ((x$23 < 0 || x$23 >= sbox0.length) ? $throwRuntimeError("index out of range") : sbox0[x$23])) >>> 0)) >>> 0;
		s1 = ((((((((x$24 = t1 >>> 24 >>> 0, ((x$24 < 0 || x$24 >= sbox0.length) ? $throwRuntimeError("index out of range") : sbox0[x$24])) >>> 0) << 24 >>> 0) | (((x$25 = ((t2 >>> 16 >>> 0) & 255) >>> 0, ((x$25 < 0 || x$25 >= sbox0.length) ? $throwRuntimeError("index out of range") : sbox0[x$25])) >>> 0) << 16 >>> 0)) >>> 0) | (((x$26 = ((t3 >>> 8 >>> 0) & 255) >>> 0, ((x$26 < 0 || x$26 >= sbox0.length) ? $throwRuntimeError("index out of range") : sbox0[x$26])) >>> 0) << 8 >>> 0)) >>> 0) | ((x$27 = (t0 & 255) >>> 0, ((x$27 < 0 || x$27 >= sbox0.length) ? $throwRuntimeError("index out of range") : sbox0[x$27])) >>> 0)) >>> 0;
		s2 = ((((((((x$28 = t2 >>> 24 >>> 0, ((x$28 < 0 || x$28 >= sbox0.length) ? $throwRuntimeError("index out of range") : sbox0[x$28])) >>> 0) << 24 >>> 0) | (((x$29 = ((t3 >>> 16 >>> 0) & 255) >>> 0, ((x$29 < 0 || x$29 >= sbox0.length) ? $throwRuntimeError("index out of range") : sbox0[x$29])) >>> 0) << 16 >>> 0)) >>> 0) | (((x$30 = ((t0 >>> 8 >>> 0) & 255) >>> 0, ((x$30 < 0 || x$30 >= sbox0.length) ? $throwRuntimeError("index out of range") : sbox0[x$30])) >>> 0) << 8 >>> 0)) >>> 0) | ((x$31 = (t1 & 255) >>> 0, ((x$31 < 0 || x$31 >= sbox0.length) ? $throwRuntimeError("index out of range") : sbox0[x$31])) >>> 0)) >>> 0;
		s3 = ((((((((x$32 = t3 >>> 24 >>> 0, ((x$32 < 0 || x$32 >= sbox0.length) ? $throwRuntimeError("index out of range") : sbox0[x$32])) >>> 0) << 24 >>> 0) | (((x$33 = ((t0 >>> 16 >>> 0) & 255) >>> 0, ((x$33 < 0 || x$33 >= sbox0.length) ? $throwRuntimeError("index out of range") : sbox0[x$33])) >>> 0) << 16 >>> 0)) >>> 0) | (((x$34 = ((t1 >>> 8 >>> 0) & 255) >>> 0, ((x$34 < 0 || x$34 >= sbox0.length) ? $throwRuntimeError("index out of range") : sbox0[x$34])) >>> 0) << 8 >>> 0)) >>> 0) | ((x$35 = (t2 & 255) >>> 0, ((x$35 < 0 || x$35 >= sbox0.length) ? $throwRuntimeError("index out of range") : sbox0[x$35])) >>> 0)) >>> 0;
		s0 = (s0 ^ ((x$36 = k + 0 >> 0, ((x$36 < 0 || x$36 >= xk.$length) ? $throwRuntimeError("index out of range") : xk.$array[xk.$offset + x$36])))) >>> 0;
		s1 = (s1 ^ ((x$37 = k + 1 >> 0, ((x$37 < 0 || x$37 >= xk.$length) ? $throwRuntimeError("index out of range") : xk.$array[xk.$offset + x$37])))) >>> 0;
		s2 = (s2 ^ ((x$38 = k + 2 >> 0, ((x$38 < 0 || x$38 >= xk.$length) ? $throwRuntimeError("index out of range") : xk.$array[xk.$offset + x$38])))) >>> 0;
		s3 = (s3 ^ ((x$39 = k + 3 >> 0, ((x$39 < 0 || x$39 >= xk.$length) ? $throwRuntimeError("index out of range") : xk.$array[xk.$offset + x$39])))) >>> 0;
		_tmp$12 = ((s0 >>> 24 >>> 0) << 24 >>> 24); _tmp$13 = ((s0 >>> 16 >>> 0) << 24 >>> 24); _tmp$14 = ((s0 >>> 8 >>> 0) << 24 >>> 24); _tmp$15 = (s0 << 24 >>> 24); (0 < 0 || 0 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = _tmp$12; (1 < 0 || 1 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 1] = _tmp$13; (2 < 0 || 2 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 2] = _tmp$14; (3 < 0 || 3 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 3] = _tmp$15;
		_tmp$16 = ((s1 >>> 24 >>> 0) << 24 >>> 24); _tmp$17 = ((s1 >>> 16 >>> 0) << 24 >>> 24); _tmp$18 = ((s1 >>> 8 >>> 0) << 24 >>> 24); _tmp$19 = (s1 << 24 >>> 24); (4 < 0 || 4 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 4] = _tmp$16; (5 < 0 || 5 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 5] = _tmp$17; (6 < 0 || 6 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 6] = _tmp$18; (7 < 0 || 7 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 7] = _tmp$19;
		_tmp$20 = ((s2 >>> 24 >>> 0) << 24 >>> 24); _tmp$21 = ((s2 >>> 16 >>> 0) << 24 >>> 24); _tmp$22 = ((s2 >>> 8 >>> 0) << 24 >>> 24); _tmp$23 = (s2 << 24 >>> 24); (8 < 0 || 8 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 8] = _tmp$20; (9 < 0 || 9 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 9] = _tmp$21; (10 < 0 || 10 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 10] = _tmp$22; (11 < 0 || 11 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 11] = _tmp$23;
		_tmp$24 = ((s3 >>> 24 >>> 0) << 24 >>> 24); _tmp$25 = ((s3 >>> 16 >>> 0) << 24 >>> 24); _tmp$26 = ((s3 >>> 8 >>> 0) << 24 >>> 24); _tmp$27 = (s3 << 24 >>> 24); (12 < 0 || 12 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 12] = _tmp$24; (13 < 0 || 13 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 13] = _tmp$25; (14 < 0 || 14 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 14] = _tmp$26; (15 < 0 || 15 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 15] = _tmp$27;
	};
	decryptBlockGo = function(xk, dst, src) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, s0, s1, s2, s3, t0, t1, t2, t3, _q, nr, k, r, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, _tmp$8, _tmp$9, _tmp$10, _tmp$11, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27;
		_tmp = 0; _tmp$1 = 0; _tmp$2 = 0; _tmp$3 = 0; _tmp$4 = 0; _tmp$5 = 0; _tmp$6 = 0; _tmp$7 = 0; s0 = _tmp; s1 = _tmp$1; s2 = _tmp$2; s3 = _tmp$3; t0 = _tmp$4; t1 = _tmp$5; t2 = _tmp$6; t3 = _tmp$7;
		s0 = (((((((((0 < 0 || 0 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 0]) >>> 0) << 24 >>> 0) | ((((1 < 0 || 1 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 1]) >>> 0) << 16 >>> 0)) >>> 0) | ((((2 < 0 || 2 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 2]) >>> 0) << 8 >>> 0)) >>> 0) | (((3 < 0 || 3 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 3]) >>> 0)) >>> 0;
		s1 = (((((((((4 < 0 || 4 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 4]) >>> 0) << 24 >>> 0) | ((((5 < 0 || 5 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 5]) >>> 0) << 16 >>> 0)) >>> 0) | ((((6 < 0 || 6 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 6]) >>> 0) << 8 >>> 0)) >>> 0) | (((7 < 0 || 7 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 7]) >>> 0)) >>> 0;
		s2 = (((((((((8 < 0 || 8 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 8]) >>> 0) << 24 >>> 0) | ((((9 < 0 || 9 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 9]) >>> 0) << 16 >>> 0)) >>> 0) | ((((10 < 0 || 10 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 10]) >>> 0) << 8 >>> 0)) >>> 0) | (((11 < 0 || 11 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 11]) >>> 0)) >>> 0;
		s3 = (((((((((12 < 0 || 12 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 12]) >>> 0) << 24 >>> 0) | ((((13 < 0 || 13 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 13]) >>> 0) << 16 >>> 0)) >>> 0) | ((((14 < 0 || 14 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 14]) >>> 0) << 8 >>> 0)) >>> 0) | (((15 < 0 || 15 >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + 15]) >>> 0)) >>> 0;
		s0 = (s0 ^ (((0 < 0 || 0 >= xk.$length) ? $throwRuntimeError("index out of range") : xk.$array[xk.$offset + 0]))) >>> 0;
		s1 = (s1 ^ (((1 < 0 || 1 >= xk.$length) ? $throwRuntimeError("index out of range") : xk.$array[xk.$offset + 1]))) >>> 0;
		s2 = (s2 ^ (((2 < 0 || 2 >= xk.$length) ? $throwRuntimeError("index out of range") : xk.$array[xk.$offset + 2]))) >>> 0;
		s3 = (s3 ^ (((3 < 0 || 3 >= xk.$length) ? $throwRuntimeError("index out of range") : xk.$array[xk.$offset + 3]))) >>> 0;
		nr = (_q = xk.$length / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) - 2 >> 0;
		k = 4;
		r = 0;
		while (r < nr) {
			t0 = ((((((((x = k + 0 >> 0, ((x < 0 || x >= xk.$length) ? $throwRuntimeError("index out of range") : xk.$array[xk.$offset + x])) ^ (x$1 = ((s0 >>> 24 >>> 0) << 24 >>> 24), ((x$1 < 0 || x$1 >= td0.length) ? $throwRuntimeError("index out of range") : td0[x$1]))) >>> 0) ^ (x$2 = ((s3 >>> 16 >>> 0) << 24 >>> 24), ((x$2 < 0 || x$2 >= td1.length) ? $throwRuntimeError("index out of range") : td1[x$2]))) >>> 0) ^ (x$3 = ((s2 >>> 8 >>> 0) << 24 >>> 24), ((x$3 < 0 || x$3 >= td2.length) ? $throwRuntimeError("index out of range") : td2[x$3]))) >>> 0) ^ (x$4 = (s1 << 24 >>> 24), ((x$4 < 0 || x$4 >= td3.length) ? $throwRuntimeError("index out of range") : td3[x$4]))) >>> 0;
			t1 = ((((((((x$5 = k + 1 >> 0, ((x$5 < 0 || x$5 >= xk.$length) ? $throwRuntimeError("index out of range") : xk.$array[xk.$offset + x$5])) ^ (x$6 = ((s1 >>> 24 >>> 0) << 24 >>> 24), ((x$6 < 0 || x$6 >= td0.length) ? $throwRuntimeError("index out of range") : td0[x$6]))) >>> 0) ^ (x$7 = ((s0 >>> 16 >>> 0) << 24 >>> 24), ((x$7 < 0 || x$7 >= td1.length) ? $throwRuntimeError("index out of range") : td1[x$7]))) >>> 0) ^ (x$8 = ((s3 >>> 8 >>> 0) << 24 >>> 24), ((x$8 < 0 || x$8 >= td2.length) ? $throwRuntimeError("index out of range") : td2[x$8]))) >>> 0) ^ (x$9 = (s2 << 24 >>> 24), ((x$9 < 0 || x$9 >= td3.length) ? $throwRuntimeError("index out of range") : td3[x$9]))) >>> 0;
			t2 = ((((((((x$10 = k + 2 >> 0, ((x$10 < 0 || x$10 >= xk.$length) ? $throwRuntimeError("index out of range") : xk.$array[xk.$offset + x$10])) ^ (x$11 = ((s2 >>> 24 >>> 0) << 24 >>> 24), ((x$11 < 0 || x$11 >= td0.length) ? $throwRuntimeError("index out of range") : td0[x$11]))) >>> 0) ^ (x$12 = ((s1 >>> 16 >>> 0) << 24 >>> 24), ((x$12 < 0 || x$12 >= td1.length) ? $throwRuntimeError("index out of range") : td1[x$12]))) >>> 0) ^ (x$13 = ((s0 >>> 8 >>> 0) << 24 >>> 24), ((x$13 < 0 || x$13 >= td2.length) ? $throwRuntimeError("index out of range") : td2[x$13]))) >>> 0) ^ (x$14 = (s3 << 24 >>> 24), ((x$14 < 0 || x$14 >= td3.length) ? $throwRuntimeError("index out of range") : td3[x$14]))) >>> 0;
			t3 = ((((((((x$15 = k + 3 >> 0, ((x$15 < 0 || x$15 >= xk.$length) ? $throwRuntimeError("index out of range") : xk.$array[xk.$offset + x$15])) ^ (x$16 = ((s3 >>> 24 >>> 0) << 24 >>> 24), ((x$16 < 0 || x$16 >= td0.length) ? $throwRuntimeError("index out of range") : td0[x$16]))) >>> 0) ^ (x$17 = ((s2 >>> 16 >>> 0) << 24 >>> 24), ((x$17 < 0 || x$17 >= td1.length) ? $throwRuntimeError("index out of range") : td1[x$17]))) >>> 0) ^ (x$18 = ((s1 >>> 8 >>> 0) << 24 >>> 24), ((x$18 < 0 || x$18 >= td2.length) ? $throwRuntimeError("index out of range") : td2[x$18]))) >>> 0) ^ (x$19 = (s0 << 24 >>> 24), ((x$19 < 0 || x$19 >= td3.length) ? $throwRuntimeError("index out of range") : td3[x$19]))) >>> 0;
			k = k + (4) >> 0;
			_tmp$8 = t0; _tmp$9 = t1; _tmp$10 = t2; _tmp$11 = t3; s0 = _tmp$8; s1 = _tmp$9; s2 = _tmp$10; s3 = _tmp$11;
			r = r + (1) >> 0;
		}
		s0 = ((((((((x$20 = t0 >>> 24 >>> 0, ((x$20 < 0 || x$20 >= sbox1.length) ? $throwRuntimeError("index out of range") : sbox1[x$20])) >>> 0) << 24 >>> 0) | (((x$21 = ((t3 >>> 16 >>> 0) & 255) >>> 0, ((x$21 < 0 || x$21 >= sbox1.length) ? $throwRuntimeError("index out of range") : sbox1[x$21])) >>> 0) << 16 >>> 0)) >>> 0) | (((x$22 = ((t2 >>> 8 >>> 0) & 255) >>> 0, ((x$22 < 0 || x$22 >= sbox1.length) ? $throwRuntimeError("index out of range") : sbox1[x$22])) >>> 0) << 8 >>> 0)) >>> 0) | ((x$23 = (t1 & 255) >>> 0, ((x$23 < 0 || x$23 >= sbox1.length) ? $throwRuntimeError("index out of range") : sbox1[x$23])) >>> 0)) >>> 0;
		s1 = ((((((((x$24 = t1 >>> 24 >>> 0, ((x$24 < 0 || x$24 >= sbox1.length) ? $throwRuntimeError("index out of range") : sbox1[x$24])) >>> 0) << 24 >>> 0) | (((x$25 = ((t0 >>> 16 >>> 0) & 255) >>> 0, ((x$25 < 0 || x$25 >= sbox1.length) ? $throwRuntimeError("index out of range") : sbox1[x$25])) >>> 0) << 16 >>> 0)) >>> 0) | (((x$26 = ((t3 >>> 8 >>> 0) & 255) >>> 0, ((x$26 < 0 || x$26 >= sbox1.length) ? $throwRuntimeError("index out of range") : sbox1[x$26])) >>> 0) << 8 >>> 0)) >>> 0) | ((x$27 = (t2 & 255) >>> 0, ((x$27 < 0 || x$27 >= sbox1.length) ? $throwRuntimeError("index out of range") : sbox1[x$27])) >>> 0)) >>> 0;
		s2 = ((((((((x$28 = t2 >>> 24 >>> 0, ((x$28 < 0 || x$28 >= sbox1.length) ? $throwRuntimeError("index out of range") : sbox1[x$28])) >>> 0) << 24 >>> 0) | (((x$29 = ((t1 >>> 16 >>> 0) & 255) >>> 0, ((x$29 < 0 || x$29 >= sbox1.length) ? $throwRuntimeError("index out of range") : sbox1[x$29])) >>> 0) << 16 >>> 0)) >>> 0) | (((x$30 = ((t0 >>> 8 >>> 0) & 255) >>> 0, ((x$30 < 0 || x$30 >= sbox1.length) ? $throwRuntimeError("index out of range") : sbox1[x$30])) >>> 0) << 8 >>> 0)) >>> 0) | ((x$31 = (t3 & 255) >>> 0, ((x$31 < 0 || x$31 >= sbox1.length) ? $throwRuntimeError("index out of range") : sbox1[x$31])) >>> 0)) >>> 0;
		s3 = ((((((((x$32 = t3 >>> 24 >>> 0, ((x$32 < 0 || x$32 >= sbox1.length) ? $throwRuntimeError("index out of range") : sbox1[x$32])) >>> 0) << 24 >>> 0) | (((x$33 = ((t2 >>> 16 >>> 0) & 255) >>> 0, ((x$33 < 0 || x$33 >= sbox1.length) ? $throwRuntimeError("index out of range") : sbox1[x$33])) >>> 0) << 16 >>> 0)) >>> 0) | (((x$34 = ((t1 >>> 8 >>> 0) & 255) >>> 0, ((x$34 < 0 || x$34 >= sbox1.length) ? $throwRuntimeError("index out of range") : sbox1[x$34])) >>> 0) << 8 >>> 0)) >>> 0) | ((x$35 = (t0 & 255) >>> 0, ((x$35 < 0 || x$35 >= sbox1.length) ? $throwRuntimeError("index out of range") : sbox1[x$35])) >>> 0)) >>> 0;
		s0 = (s0 ^ ((x$36 = k + 0 >> 0, ((x$36 < 0 || x$36 >= xk.$length) ? $throwRuntimeError("index out of range") : xk.$array[xk.$offset + x$36])))) >>> 0;
		s1 = (s1 ^ ((x$37 = k + 1 >> 0, ((x$37 < 0 || x$37 >= xk.$length) ? $throwRuntimeError("index out of range") : xk.$array[xk.$offset + x$37])))) >>> 0;
		s2 = (s2 ^ ((x$38 = k + 2 >> 0, ((x$38 < 0 || x$38 >= xk.$length) ? $throwRuntimeError("index out of range") : xk.$array[xk.$offset + x$38])))) >>> 0;
		s3 = (s3 ^ ((x$39 = k + 3 >> 0, ((x$39 < 0 || x$39 >= xk.$length) ? $throwRuntimeError("index out of range") : xk.$array[xk.$offset + x$39])))) >>> 0;
		_tmp$12 = ((s0 >>> 24 >>> 0) << 24 >>> 24); _tmp$13 = ((s0 >>> 16 >>> 0) << 24 >>> 24); _tmp$14 = ((s0 >>> 8 >>> 0) << 24 >>> 24); _tmp$15 = (s0 << 24 >>> 24); (0 < 0 || 0 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 0] = _tmp$12; (1 < 0 || 1 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 1] = _tmp$13; (2 < 0 || 2 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 2] = _tmp$14; (3 < 0 || 3 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 3] = _tmp$15;
		_tmp$16 = ((s1 >>> 24 >>> 0) << 24 >>> 24); _tmp$17 = ((s1 >>> 16 >>> 0) << 24 >>> 24); _tmp$18 = ((s1 >>> 8 >>> 0) << 24 >>> 24); _tmp$19 = (s1 << 24 >>> 24); (4 < 0 || 4 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 4] = _tmp$16; (5 < 0 || 5 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 5] = _tmp$17; (6 < 0 || 6 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 6] = _tmp$18; (7 < 0 || 7 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 7] = _tmp$19;
		_tmp$20 = ((s2 >>> 24 >>> 0) << 24 >>> 24); _tmp$21 = ((s2 >>> 16 >>> 0) << 24 >>> 24); _tmp$22 = ((s2 >>> 8 >>> 0) << 24 >>> 24); _tmp$23 = (s2 << 24 >>> 24); (8 < 0 || 8 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 8] = _tmp$20; (9 < 0 || 9 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 9] = _tmp$21; (10 < 0 || 10 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 10] = _tmp$22; (11 < 0 || 11 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 11] = _tmp$23;
		_tmp$24 = ((s3 >>> 24 >>> 0) << 24 >>> 24); _tmp$25 = ((s3 >>> 16 >>> 0) << 24 >>> 24); _tmp$26 = ((s3 >>> 8 >>> 0) << 24 >>> 24); _tmp$27 = (s3 << 24 >>> 24); (12 < 0 || 12 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 12] = _tmp$24; (13 < 0 || 13 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 13] = _tmp$25; (14 < 0 || 14 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 14] = _tmp$26; (15 < 0 || 15 >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + 15] = _tmp$27;
	};
	subw = function(w) {
		var x, x$1, x$2, x$3;
		return ((((((((x = w >>> 24 >>> 0, ((x < 0 || x >= sbox0.length) ? $throwRuntimeError("index out of range") : sbox0[x])) >>> 0) << 24 >>> 0) | (((x$1 = ((w >>> 16 >>> 0) & 255) >>> 0, ((x$1 < 0 || x$1 >= sbox0.length) ? $throwRuntimeError("index out of range") : sbox0[x$1])) >>> 0) << 16 >>> 0)) >>> 0) | (((x$2 = ((w >>> 8 >>> 0) & 255) >>> 0, ((x$2 < 0 || x$2 >= sbox0.length) ? $throwRuntimeError("index out of range") : sbox0[x$2])) >>> 0) << 8 >>> 0)) >>> 0) | ((x$3 = (w & 255) >>> 0, ((x$3 < 0 || x$3 >= sbox0.length) ? $throwRuntimeError("index out of range") : sbox0[x$3])) >>> 0)) >>> 0;
	};
	rotw = function(w) {
		return ((w << 8 >>> 0) | (w >>> 24 >>> 0)) >>> 0;
	};
	expandKeyGo = function(key, enc, dec) {
		var i, _q, nk, x, x$1, x$2, x$3, x$4, t, _r, _r$1, x$5, _q$1, x$6, n, i$1, ei, j, x$7, x$8, x$9, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17;
		i = 0;
		nk = (_q = key.$length / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		i = 0;
		while (i < nk) {
			(i < 0 || i >= enc.$length) ? $throwRuntimeError("index out of range") : enc.$array[enc.$offset + i] = ((((((((x = (((4 >>> 16 << 16) * i >> 0) + (4 << 16 >>> 16) * i) >> 0, ((x < 0 || x >= key.$length) ? $throwRuntimeError("index out of range") : key.$array[key.$offset + x])) >>> 0) << 24 >>> 0) | (((x$1 = ((((4 >>> 16 << 16) * i >> 0) + (4 << 16 >>> 16) * i) >> 0) + 1 >> 0, ((x$1 < 0 || x$1 >= key.$length) ? $throwRuntimeError("index out of range") : key.$array[key.$offset + x$1])) >>> 0) << 16 >>> 0)) >>> 0) | (((x$2 = ((((4 >>> 16 << 16) * i >> 0) + (4 << 16 >>> 16) * i) >> 0) + 2 >> 0, ((x$2 < 0 || x$2 >= key.$length) ? $throwRuntimeError("index out of range") : key.$array[key.$offset + x$2])) >>> 0) << 8 >>> 0)) >>> 0) | ((x$3 = ((((4 >>> 16 << 16) * i >> 0) + (4 << 16 >>> 16) * i) >> 0) + 3 >> 0, ((x$3 < 0 || x$3 >= key.$length) ? $throwRuntimeError("index out of range") : key.$array[key.$offset + x$3])) >>> 0)) >>> 0;
			i = i + (1) >> 0;
		}
		while (i < enc.$length) {
			t = (x$4 = i - 1 >> 0, ((x$4 < 0 || x$4 >= enc.$length) ? $throwRuntimeError("index out of range") : enc.$array[enc.$offset + x$4]));
			if ((_r = i % nk, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0) {
				t = (subw(rotw(t)) ^ ((((x$5 = (_q$1 = i / nk, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) - 1 >> 0, ((x$5 < 0 || x$5 >= powx.length) ? $throwRuntimeError("index out of range") : powx[x$5])) >>> 0) << 24 >>> 0))) >>> 0;
			} else if (nk > 6 && ((_r$1 = i % nk, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 4)) {
				t = subw(t);
			}
			(i < 0 || i >= enc.$length) ? $throwRuntimeError("index out of range") : enc.$array[enc.$offset + i] = ((x$6 = i - nk >> 0, ((x$6 < 0 || x$6 >= enc.$length) ? $throwRuntimeError("index out of range") : enc.$array[enc.$offset + x$6])) ^ t) >>> 0;
			i = i + (1) >> 0;
		}
		if (dec === ($sliceType($Uint32)).nil) {
			return;
		}
		n = enc.$length;
		i$1 = 0;
		while (i$1 < n) {
			ei = (n - i$1 >> 0) - 4 >> 0;
			j = 0;
			while (j < 4) {
				x$8 = (x$7 = ei + j >> 0, ((x$7 < 0 || x$7 >= enc.$length) ? $throwRuntimeError("index out of range") : enc.$array[enc.$offset + x$7]));
				if (i$1 > 0 && (i$1 + 4 >> 0) < n) {
					x$8 = ((((((x$9 = (x$10 = x$8 >>> 24 >>> 0, ((x$10 < 0 || x$10 >= sbox0.length) ? $throwRuntimeError("index out of range") : sbox0[x$10])), ((x$9 < 0 || x$9 >= td0.length) ? $throwRuntimeError("index out of range") : td0[x$9])) ^ (x$11 = (x$12 = ((x$8 >>> 16 >>> 0) & 255) >>> 0, ((x$12 < 0 || x$12 >= sbox0.length) ? $throwRuntimeError("index out of range") : sbox0[x$12])), ((x$11 < 0 || x$11 >= td1.length) ? $throwRuntimeError("index out of range") : td1[x$11]))) >>> 0) ^ (x$13 = (x$14 = ((x$8 >>> 8 >>> 0) & 255) >>> 0, ((x$14 < 0 || x$14 >= sbox0.length) ? $throwRuntimeError("index out of range") : sbox0[x$14])), ((x$13 < 0 || x$13 >= td2.length) ? $throwRuntimeError("index out of range") : td2[x$13]))) >>> 0) ^ (x$15 = (x$16 = (x$8 & 255) >>> 0, ((x$16 < 0 || x$16 >= sbox0.length) ? $throwRuntimeError("index out of range") : sbox0[x$16])), ((x$15 < 0 || x$15 >= td3.length) ? $throwRuntimeError("index out of range") : td3[x$15]))) >>> 0;
				}
				(x$17 = i$1 + j >> 0, (x$17 < 0 || x$17 >= dec.$length) ? $throwRuntimeError("index out of range") : dec.$array[dec.$offset + x$17] = x$8);
				j = j + (1) >> 0;
			}
			i$1 = i$1 + (4) >> 0;
		}
	};
	KeySizeError.prototype.Error = function() {
		var k;
		k = this.$val !== undefined ? this.$val : this;
		return "crypto/aes: invalid key size " + strconv.Itoa((k >> 0));
	};
	$ptrType(KeySizeError).prototype.Error = function() { return new KeySizeError(this.$get()).Error(); };
	NewCipher = $pkg.NewCipher = function(key) {
		var k, _ref, n, c;
		k = key.$length;
		_ref = k;
		switch (0) { default: if (_ref === 16 || _ref === 24 || _ref === 32) {
			break;
		} else {
			return [$ifaceNil, new KeySizeError((k >> 0))];
		} }
		n = k + 28 >> 0;
		c = new aesCipher.Ptr(($sliceType($Uint32)).make(n), ($sliceType($Uint32)).make(n));
		expandKey(key, c.enc, c.dec);
		return [c, $ifaceNil];
	};
	aesCipher.Ptr.prototype.BlockSize = function() {
		var c;
		c = this;
		return 16;
	};
	aesCipher.prototype.BlockSize = function() { return this.$val.BlockSize(); };
	aesCipher.Ptr.prototype.Encrypt = function(dst, src) {
		var c;
		c = this;
		if (src.$length < 16) {
			$panic(new $String("crypto/aes: input not full block"));
		}
		if (dst.$length < 16) {
			$panic(new $String("crypto/aes: output not full block"));
		}
		encryptBlock(c.enc, dst, src);
	};
	aesCipher.prototype.Encrypt = function(dst, src) { return this.$val.Encrypt(dst, src); };
	aesCipher.Ptr.prototype.Decrypt = function(dst, src) {
		var c;
		c = this;
		if (src.$length < 16) {
			$panic(new $String("crypto/aes: input not full block"));
		}
		if (dst.$length < 16) {
			$panic(new $String("crypto/aes: output not full block"));
		}
		decryptBlock(c.dec, dst, src);
	};
	aesCipher.prototype.Decrypt = function(dst, src) { return this.$val.Decrypt(dst, src); };
	encryptBlock = function(xk, dst, src) {
		encryptBlockGo(xk, dst, src);
	};
	decryptBlock = function(xk, dst, src) {
		decryptBlockGo(xk, dst, src);
	};
	expandKey = function(key, enc, dec) {
		expandKeyGo(key, enc, dec);
	};
	$pkg.$init = function() {
		($ptrType(aesCipher)).methods = [["BlockSize", "BlockSize", "", $funcType([], [$Int], false), -1], ["Decrypt", "Decrypt", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8))], [], false), -1], ["Encrypt", "Encrypt", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8))], [], false), -1]];
		aesCipher.init([["enc", "enc", "crypto/aes", ($sliceType($Uint32)), ""], ["dec", "dec", "crypto/aes", ($sliceType($Uint32)), ""]]);
		KeySizeError.methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		($ptrType(KeySizeError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		powx = $toNativeArray("Uint8", [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47]);
		sbox0 = $toNativeArray("Uint8", [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22]);
		sbox1 = $toNativeArray("Uint8", [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125]);
		te0 = $toNativeArray("Uint32", [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986]);
		te1 = $toNativeArray("Uint32", [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766]);
		te2 = $toNativeArray("Uint32", [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126]);
		te3 = $toNativeArray("Uint32", [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436]);
		td0 = $toNativeArray("Uint32", [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890]);
		td1 = $toNativeArray("Uint32", [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935]);
		td2 = $toNativeArray("Uint32", [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239000, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600]);
		td3 = $toNativeArray("Uint32", [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998000, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480]);
	};
	return $pkg;
})();
$packages["crypto/des"] = (function() {
	var $pkg = {}, binary = $packages["encoding/binary"], cipher = $packages["crypto/cipher"], strconv = $packages["strconv"], KeySizeError, desCipher, tripleDESCipher, feistelBox, permutationFunction, permutedChoice1, permutedChoice2, sBoxes, ksRotations, cryptBlock, encryptBlock, decryptBlock, feistel, permuteBlock, init, expandBlock, permuteInitialBlock, permuteFinalBlock, ksRotate, NewTripleDESCipher;
	KeySizeError = $pkg.KeySizeError = $newType(4, "Int", "des.KeySizeError", "KeySizeError", "crypto/des", null);
	desCipher = $pkg.desCipher = $newType(0, "Struct", "des.desCipher", "desCipher", "crypto/des", function(subkeys_) {
		this.$val = this;
		this.subkeys = subkeys_ !== undefined ? subkeys_ : ($arrayType($Uint64, 16)).zero();
	});
	tripleDESCipher = $pkg.tripleDESCipher = $newType(0, "Struct", "des.tripleDESCipher", "tripleDESCipher", "crypto/des", function(cipher1_, cipher2_, cipher3_) {
		this.$val = this;
		this.cipher1 = cipher1_ !== undefined ? cipher1_ : new desCipher.Ptr();
		this.cipher2 = cipher2_ !== undefined ? cipher2_ : new desCipher.Ptr();
		this.cipher3 = cipher3_ !== undefined ? cipher3_ : new desCipher.Ptr();
	});
	cryptBlock = function(subkeys, dst, src, decrypt) {
		var b, _tmp, _tmp$1, left, right, subkey, i, x, _tmp$2, _tmp$3, x$1, x$2, preOutput;
		b = binary.BigEndian.Uint64(src);
		b = permuteInitialBlock(b);
		_tmp = ($shiftRightUint64(b, 32).$low >>> 0); _tmp$1 = (b.$low >>> 0); left = _tmp; right = _tmp$1;
		subkey = new $Uint64(0, 0);
		i = 0;
		while (i < 16) {
			if (decrypt) {
				subkey = (x = 15 - i >> 0, ((x < 0 || x >= subkeys.$length) ? $throwRuntimeError("index out of range") : subkeys.$array[subkeys.$offset + x]));
			} else {
				subkey = ((i < 0 || i >= subkeys.$length) ? $throwRuntimeError("index out of range") : subkeys.$array[subkeys.$offset + i]);
			}
			_tmp$2 = right; _tmp$3 = (left ^ feistel(right, subkey)) >>> 0; left = _tmp$2; right = _tmp$3;
			i = i + (1) >> 0;
		}
		preOutput = (x$1 = $shiftLeft64(new $Uint64(0, right), 32), x$2 = new $Uint64(0, left), new $Uint64(x$1.$high | x$2.$high, (x$1.$low | x$2.$low) >>> 0));
		binary.BigEndian.PutUint64(dst, permuteFinalBlock(preOutput));
	};
	encryptBlock = function(subkeys, dst, src) {
		cryptBlock(subkeys, dst, src, false);
	};
	decryptBlock = function(subkeys, dst, src) {
		cryptBlock(subkeys, dst, src, true);
	};
	feistel = function(right, key) {
		var result = 0, x, sBoxLocations, sBoxResult, i, sBoxLocation, row, column, x$1, x$2;
		sBoxLocations = (x = expandBlock(right), new $Uint64(key.$high ^ x.$high, (key.$low ^ x.$low) >>> 0));
		sBoxResult = 0;
		i = 0;
		while (i < 8) {
			sBoxLocation = (($shiftRightUint64(sBoxLocations, 42).$low << 24 >>> 24) & 63) >>> 0;
			sBoxLocations = $shiftLeft64(sBoxLocations, (6));
			row = ((((sBoxLocation & 1) >>> 0)) | (((((sBoxLocation & 32) >>> 0)) >>> 4 << 24 >>> 24))) >>> 0;
			column = (((sBoxLocation >>> 1 << 24 >>> 24)) & 15) >>> 0;
			sBoxResult = (sBoxResult ^ ((x$1 = ((i < 0 || i >= feistelBox.length) ? $throwRuntimeError("index out of range") : feistelBox[i]), x$2 = (16 * row << 24 >>> 24) + column << 24 >>> 24, ((x$2 < 0 || x$2 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[x$2])))) >>> 0;
			i = i + (1) << 24 >>> 24;
		}
		result = sBoxResult;
		return result;
	};
	permuteBlock = function(src, permutation) {
		var block = new $Uint64(0, 0), _ref, _i, position, n, x, bit, x$1;
		_ref = permutation;
		_i = 0;
		while (_i < _ref.$length) {
			position = _i;
			n = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			bit = (x = $shiftRightUint64(src, n), new $Uint64(x.$high & 0, (x.$low & 1) >>> 0));
			block = (x$1 = $shiftLeft64(bit, ((((permutation.$length - 1 >> 0)) - position >> 0) >>> 0)), new $Uint64(block.$high | x$1.$high, (block.$low | x$1.$low) >>> 0));
			_i++;
		}
		return block;
	};
	init = function() {
		var _ref, _i, s, i, j, x, x$1, x$2, f, x$3, x$4;
		_ref = sBoxes;
		_i = 0;
		while (_i < 8) {
			s = _i;
			i = 0;
			while (i < 4) {
				j = 0;
				while (j < 16) {
					f = $shiftLeft64(new $Uint64(0, (x = (x$1 = ((s < 0 || s >= sBoxes.length) ? $throwRuntimeError("index out of range") : sBoxes[s]), ((i < 0 || i >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[i])), ((j < 0 || j >= x.length) ? $throwRuntimeError("index out of range") : x[j]))), ((x$2 = (7 - (s >>> 0) >>> 0), (((4 >>> 16 << 16) * x$2 >>> 0) + (4 << 16 >>> 16) * x$2) >>> 0)));
					f = permuteBlock(f, new ($sliceType($Uint8))(permutationFunction));
					(x$3 = ((s < 0 || s >= feistelBox.length) ? $throwRuntimeError("index out of range") : feistelBox[s]), x$4 = ((((16 >>> 16 << 16) * i >> 0) + (16 << 16 >>> 16) * i) >> 0) + j >> 0, (x$4 < 0 || x$4 >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[x$4] = (f.$low >>> 0));
					j = j + (1) >> 0;
				}
				i = i + (1) >> 0;
			}
			_i++;
		}
	};
	expandBlock = function(src) {
		var block = new $Uint64(0, 0), i, x, x$1;
		src = (((src << 5 >>> 0)) | ((src >>> 27 >>> 0))) >>> 0;
		i = 0;
		while (i < 8) {
			block = $shiftLeft64(block, (6));
			block = (x = (x$1 = new $Uint64(0, src), new $Uint64(x$1.$high & 0, (x$1.$low & 63) >>> 0)), new $Uint64(block.$high | x.$high, (block.$low | x.$low) >>> 0));
			src = (((src << 4 >>> 0)) | ((src >>> 28 >>> 0))) >>> 0;
			i = i + (1) >> 0;
		}
		return block;
	};
	permuteInitialBlock = function(block) {
		var b1, b2, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20, x$21, x$22, x$23, x$24, x$25;
		b1 = $shiftRightUint64(block, 48);
		b2 = $shiftLeft64(block, 48);
		block = (x = (x$1 = (x$2 = new $Uint64(b1.$high ^ b2.$high, (b1.$low ^ b2.$low) >>> 0), x$3 = $shiftLeft64(b1, 48), new $Uint64(x$2.$high ^ x$3.$high, (x$2.$low ^ x$3.$low) >>> 0)), x$4 = $shiftRightUint64(b2, 48), new $Uint64(x$1.$high ^ x$4.$high, (x$1.$low ^ x$4.$low) >>> 0)), new $Uint64(block.$high ^ x.$high, (block.$low ^ x.$low) >>> 0));
		b1 = (x$5 = $shiftRightUint64(block, 32), new $Uint64(x$5.$high & 0, (x$5.$low & 16711935) >>> 0));
		b2 = new $Uint64(block.$high & 0, (block.$low & 4278255360) >>> 0);
		block = (x$6 = (x$7 = (x$8 = (x$9 = $shiftLeft64(b1, 32), new $Uint64(x$9.$high ^ b2.$high, (x$9.$low ^ b2.$low) >>> 0)), x$10 = $shiftLeft64(b1, 8), new $Uint64(x$8.$high ^ x$10.$high, (x$8.$low ^ x$10.$low) >>> 0)), x$11 = $shiftLeft64(b2, 24), new $Uint64(x$7.$high ^ x$11.$high, (x$7.$low ^ x$11.$low) >>> 0)), new $Uint64(block.$high ^ x$6.$high, (block.$low ^ x$6.$low) >>> 0));
		b1 = new $Uint64(block.$high & 252641280, (block.$low & 252641280) >>> 0);
		b2 = new $Uint64(block.$high & 61680, (block.$low & 61680) >>> 0);
		block = (x$12 = (x$13 = (x$14 = new $Uint64(b1.$high ^ b2.$high, (b1.$low ^ b2.$low) >>> 0), x$15 = $shiftRightUint64(b1, 12), new $Uint64(x$14.$high ^ x$15.$high, (x$14.$low ^ x$15.$low) >>> 0)), x$16 = $shiftLeft64(b2, 12), new $Uint64(x$13.$high ^ x$16.$high, (x$13.$low ^ x$16.$low) >>> 0)), new $Uint64(block.$high ^ x$12.$high, (block.$low ^ x$12.$low) >>> 0));
		b1 = new $Uint64(block.$high & 855651072, (block.$low & 855651072) >>> 0);
		b2 = new $Uint64(block.$high & 13369548, (block.$low & 13369548) >>> 0);
		block = (x$17 = (x$18 = (x$19 = new $Uint64(b1.$high ^ b2.$high, (b1.$low ^ b2.$low) >>> 0), x$20 = $shiftRightUint64(b1, 6), new $Uint64(x$19.$high ^ x$20.$high, (x$19.$low ^ x$20.$low) >>> 0)), x$21 = $shiftLeft64(b2, 6), new $Uint64(x$18.$high ^ x$21.$high, (x$18.$low ^ x$21.$low) >>> 0)), new $Uint64(block.$high ^ x$17.$high, (block.$low ^ x$17.$low) >>> 0));
		b1 = new $Uint64(block.$high & 2863311530, (block.$low & 1431655765) >>> 0);
		block = (x$22 = (x$23 = (x$24 = $shiftRightUint64(b1, 33), new $Uint64(b1.$high ^ x$24.$high, (b1.$low ^ x$24.$low) >>> 0)), x$25 = $shiftLeft64(b1, 33), new $Uint64(x$23.$high ^ x$25.$high, (x$23.$low ^ x$25.$low) >>> 0)), new $Uint64(block.$high ^ x$22.$high, (block.$low ^ x$22.$low) >>> 0));
		return block;
	};
	permuteFinalBlock = function(block) {
		var b1, x, x$1, x$2, x$3, b2, x$4, x$5, x$6, x$7, x$8, x$9, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20, x$21, x$22, x$23, x$24, x$25;
		b1 = new $Uint64(block.$high & 2863311530, (block.$low & 1431655765) >>> 0);
		block = (x = (x$1 = (x$2 = $shiftRightUint64(b1, 33), new $Uint64(b1.$high ^ x$2.$high, (b1.$low ^ x$2.$low) >>> 0)), x$3 = $shiftLeft64(b1, 33), new $Uint64(x$1.$high ^ x$3.$high, (x$1.$low ^ x$3.$low) >>> 0)), new $Uint64(block.$high ^ x.$high, (block.$low ^ x.$low) >>> 0));
		b1 = new $Uint64(block.$high & 855651072, (block.$low & 855651072) >>> 0);
		b2 = new $Uint64(block.$high & 13369548, (block.$low & 13369548) >>> 0);
		block = (x$4 = (x$5 = (x$6 = new $Uint64(b1.$high ^ b2.$high, (b1.$low ^ b2.$low) >>> 0), x$7 = $shiftRightUint64(b1, 6), new $Uint64(x$6.$high ^ x$7.$high, (x$6.$low ^ x$7.$low) >>> 0)), x$8 = $shiftLeft64(b2, 6), new $Uint64(x$5.$high ^ x$8.$high, (x$5.$low ^ x$8.$low) >>> 0)), new $Uint64(block.$high ^ x$4.$high, (block.$low ^ x$4.$low) >>> 0));
		b1 = new $Uint64(block.$high & 252641280, (block.$low & 252641280) >>> 0);
		b2 = new $Uint64(block.$high & 61680, (block.$low & 61680) >>> 0);
		block = (x$9 = (x$10 = (x$11 = new $Uint64(b1.$high ^ b2.$high, (b1.$low ^ b2.$low) >>> 0), x$12 = $shiftRightUint64(b1, 12), new $Uint64(x$11.$high ^ x$12.$high, (x$11.$low ^ x$12.$low) >>> 0)), x$13 = $shiftLeft64(b2, 12), new $Uint64(x$10.$high ^ x$13.$high, (x$10.$low ^ x$13.$low) >>> 0)), new $Uint64(block.$high ^ x$9.$high, (block.$low ^ x$9.$low) >>> 0));
		b1 = (x$14 = $shiftRightUint64(block, 32), new $Uint64(x$14.$high & 0, (x$14.$low & 16711935) >>> 0));
		b2 = new $Uint64(block.$high & 0, (block.$low & 4278255360) >>> 0);
		block = (x$15 = (x$16 = (x$17 = (x$18 = $shiftLeft64(b1, 32), new $Uint64(x$18.$high ^ b2.$high, (x$18.$low ^ b2.$low) >>> 0)), x$19 = $shiftLeft64(b1, 8), new $Uint64(x$17.$high ^ x$19.$high, (x$17.$low ^ x$19.$low) >>> 0)), x$20 = $shiftLeft64(b2, 24), new $Uint64(x$16.$high ^ x$20.$high, (x$16.$low ^ x$20.$low) >>> 0)), new $Uint64(block.$high ^ x$15.$high, (block.$low ^ x$15.$low) >>> 0));
		b1 = $shiftRightUint64(block, 48);
		b2 = $shiftLeft64(block, 48);
		block = (x$21 = (x$22 = (x$23 = new $Uint64(b1.$high ^ b2.$high, (b1.$low ^ b2.$low) >>> 0), x$24 = $shiftLeft64(b1, 48), new $Uint64(x$23.$high ^ x$24.$high, (x$23.$low ^ x$24.$low) >>> 0)), x$25 = $shiftRightUint64(b2, 48), new $Uint64(x$22.$high ^ x$25.$high, (x$22.$low ^ x$25.$low) >>> 0)), new $Uint64(block.$high ^ x$21.$high, (block.$low ^ x$21.$low) >>> 0));
		return block;
	};
	ksRotate = function(in$1) {
		var out = ($sliceType($Uint32)).nil, last, i, y, left, y$1, right;
		out = ($sliceType($Uint32)).make(16);
		last = in$1;
		i = 0;
		while (i < 16) {
			left = (((y = ((4 + ((i < 0 || i >= ksRotations.length) ? $throwRuntimeError("index out of range") : ksRotations[i]) << 24 >>> 24)), y < 32 ? (last << y) : 0) >>> 0)) >>> 4 >>> 0;
			right = (y$1 = ((32 - ((i < 0 || i >= ksRotations.length) ? $throwRuntimeError("index out of range") : ksRotations[i]) << 24 >>> 24)), y$1 < 32 ? (((last << 4 >>> 0)) >>> y$1) : 0) >>> 0;
			(i < 0 || i >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + i] = (left | right) >>> 0;
			last = ((i < 0 || i >= out.$length) ? $throwRuntimeError("index out of range") : out.$array[out.$offset + i]);
			i = i + (1) >> 0;
		}
		return out;
	};
	desCipher.Ptr.prototype.generateSubkeys = function(keyBytes) {
		var c, key, permutedKey, leftRotations, rightRotations, i, x, x$1, pc2Input, x$2;
		c = this;
		key = binary.BigEndian.Uint64(keyBytes);
		permutedKey = permuteBlock(key, new ($sliceType($Uint8))(permutedChoice1));
		leftRotations = ksRotate(($shiftRightUint64(permutedKey, 28).$low >>> 0));
		rightRotations = ksRotate(($shiftLeft64(permutedKey, 4).$low >>> 0) >>> 4 >>> 0);
		i = 0;
		while (i < 16) {
			pc2Input = (x = $shiftLeft64(new $Uint64(0, ((i < 0 || i >= leftRotations.$length) ? $throwRuntimeError("index out of range") : leftRotations.$array[leftRotations.$offset + i])), 28), x$1 = new $Uint64(0, ((i < 0 || i >= rightRotations.$length) ? $throwRuntimeError("index out of range") : rightRotations.$array[rightRotations.$offset + i])), new $Uint64(x.$high | x$1.$high, (x.$low | x$1.$low) >>> 0));
			(x$2 = c.subkeys, (i < 0 || i >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i] = permuteBlock(pc2Input, new ($sliceType($Uint8))(permutedChoice2)));
			i = i + (1) >> 0;
		}
	};
	desCipher.prototype.generateSubkeys = function(keyBytes) { return this.$val.generateSubkeys(keyBytes); };
	KeySizeError.prototype.Error = function() {
		var k;
		k = this.$val !== undefined ? this.$val : this;
		return "crypto/des: invalid key size " + strconv.Itoa((k >> 0));
	};
	$ptrType(KeySizeError).prototype.Error = function() { return new KeySizeError(this.$get()).Error(); };
	desCipher.Ptr.prototype.BlockSize = function() {
		var c;
		c = this;
		return 8;
	};
	desCipher.prototype.BlockSize = function() { return this.$val.BlockSize(); };
	desCipher.Ptr.prototype.Encrypt = function(dst, src) {
		var c;
		c = this;
		encryptBlock(new ($sliceType($Uint64))(c.subkeys), dst, src);
	};
	desCipher.prototype.Encrypt = function(dst, src) { return this.$val.Encrypt(dst, src); };
	desCipher.Ptr.prototype.Decrypt = function(dst, src) {
		var c;
		c = this;
		decryptBlock(new ($sliceType($Uint64))(c.subkeys), dst, src);
	};
	desCipher.prototype.Decrypt = function(dst, src) { return this.$val.Decrypt(dst, src); };
	NewTripleDESCipher = $pkg.NewTripleDESCipher = function(key) {
		var c;
		if (!((key.$length === 24))) {
			return [$ifaceNil, new KeySizeError((key.$length >> 0))];
		}
		c = new tripleDESCipher.Ptr();
		c.cipher1.generateSubkeys($subslice(key, 0, 8));
		c.cipher2.generateSubkeys($subslice(key, 8, 16));
		c.cipher3.generateSubkeys($subslice(key, 16));
		return [c, $ifaceNil];
	};
	tripleDESCipher.Ptr.prototype.BlockSize = function() {
		var c;
		c = this;
		return 8;
	};
	tripleDESCipher.prototype.BlockSize = function() { return this.$val.BlockSize(); };
	tripleDESCipher.Ptr.prototype.Encrypt = function(dst, src) {
		var c;
		c = this;
		c.cipher1.Encrypt(dst, src);
		c.cipher2.Decrypt(dst, dst);
		c.cipher3.Encrypt(dst, dst);
	};
	tripleDESCipher.prototype.Encrypt = function(dst, src) { return this.$val.Encrypt(dst, src); };
	tripleDESCipher.Ptr.prototype.Decrypt = function(dst, src) {
		var c;
		c = this;
		c.cipher3.Decrypt(dst, src);
		c.cipher2.Encrypt(dst, dst);
		c.cipher1.Decrypt(dst, dst);
	};
	tripleDESCipher.prototype.Decrypt = function(dst, src) { return this.$val.Decrypt(dst, src); };
	$pkg.$init = function() {
		KeySizeError.methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		($ptrType(KeySizeError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		($ptrType(desCipher)).methods = [["BlockSize", "BlockSize", "", $funcType([], [$Int], false), -1], ["Decrypt", "Decrypt", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8))], [], false), -1], ["Encrypt", "Encrypt", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8))], [], false), -1], ["generateSubkeys", "generateSubkeys", "crypto/des", $funcType([($sliceType($Uint8))], [], false), -1]];
		desCipher.init([["subkeys", "subkeys", "crypto/des", ($arrayType($Uint64, 16)), ""]]);
		($ptrType(tripleDESCipher)).methods = [["BlockSize", "BlockSize", "", $funcType([], [$Int], false), -1], ["Decrypt", "Decrypt", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8))], [], false), -1], ["Encrypt", "Encrypt", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8))], [], false), -1]];
		tripleDESCipher.init([["cipher1", "cipher1", "crypto/des", desCipher, ""], ["cipher2", "cipher2", "crypto/des", desCipher, ""], ["cipher3", "cipher3", "crypto/des", desCipher, ""]]);
		feistelBox = ($arrayType(($arrayType($Uint32, 64)), 8)).zero();
		permutationFunction = $toNativeArray("Uint8", [16, 25, 12, 11, 3, 20, 4, 15, 31, 17, 9, 6, 27, 14, 1, 22, 30, 24, 8, 18, 0, 5, 29, 23, 13, 19, 2, 26, 10, 21, 28, 7]);
		permutedChoice1 = $toNativeArray("Uint8", [7, 15, 23, 31, 39, 47, 55, 63, 6, 14, 22, 30, 38, 46, 54, 62, 5, 13, 21, 29, 37, 45, 53, 61, 4, 12, 20, 28, 1, 9, 17, 25, 33, 41, 49, 57, 2, 10, 18, 26, 34, 42, 50, 58, 3, 11, 19, 27, 35, 43, 51, 59, 36, 44, 52, 60]);
		permutedChoice2 = $toNativeArray("Uint8", [42, 39, 45, 32, 55, 51, 53, 28, 41, 50, 35, 46, 33, 37, 44, 52, 30, 48, 40, 49, 29, 36, 43, 54, 15, 4, 25, 19, 9, 1, 26, 16, 5, 11, 23, 8, 12, 7, 17, 0, 22, 3, 10, 14, 6, 20, 27, 24]);
		sBoxes = $toNativeArray("Array", [$toNativeArray("Array", [$toNativeArray("Uint8", [14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7]), $toNativeArray("Uint8", [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8]), $toNativeArray("Uint8", [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0]), $toNativeArray("Uint8", [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13])]), $toNativeArray("Array", [$toNativeArray("Uint8", [15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10]), $toNativeArray("Uint8", [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5]), $toNativeArray("Uint8", [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15]), $toNativeArray("Uint8", [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9])]), $toNativeArray("Array", [$toNativeArray("Uint8", [10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8]), $toNativeArray("Uint8", [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1]), $toNativeArray("Uint8", [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7]), $toNativeArray("Uint8", [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12])]), $toNativeArray("Array", [$toNativeArray("Uint8", [7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15]), $toNativeArray("Uint8", [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9]), $toNativeArray("Uint8", [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4]), $toNativeArray("Uint8", [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14])]), $toNativeArray("Array", [$toNativeArray("Uint8", [2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9]), $toNativeArray("Uint8", [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6]), $toNativeArray("Uint8", [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14]), $toNativeArray("Uint8", [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3])]), $toNativeArray("Array", [$toNativeArray("Uint8", [12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11]), $toNativeArray("Uint8", [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8]), $toNativeArray("Uint8", [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6]), $toNativeArray("Uint8", [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13])]), $toNativeArray("Array", [$toNativeArray("Uint8", [4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1]), $toNativeArray("Uint8", [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6]), $toNativeArray("Uint8", [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2]), $toNativeArray("Uint8", [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12])]), $toNativeArray("Array", [$toNativeArray("Uint8", [13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7]), $toNativeArray("Uint8", [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2]), $toNativeArray("Uint8", [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8]), $toNativeArray("Uint8", [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11])])]);
		ksRotations = $toNativeArray("Uint8", [1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1]);
		init();
	};
	return $pkg;
})();
$packages["math/big"] = (function() {
	var $pkg = {}, errors = $packages["errors"], fmt = $packages["fmt"], io = $packages["io"], rand = $packages["math/rand"], strings = $packages["strings"], math = $packages["math"], sync = $packages["sync"], binary = $packages["encoding/binary"], Word, Int, nat, divisor, intOne, natOne, natTwo, karatsubaThreshold, leafSize, cacheBase10, deBruijn32Lookup, deBruijn64Lookup, mulWW, divWW, addVV, subVV, addVW, subVW, shlVU, shrVU, mulAddVWW, addMulVVW, divWVW, bitLen, addWW_g, subWW_g, mulWW_g, mulAddWWW_g, bitLen_g, leadingZeros, divWW_g, addVV_g, subVV_g, addVW_g, subVW_g, shlVU_g, shrVU_g, mulAddVWW_g, addMulVVW_g, divWVW_g, NewInt, charset, writeMultiple, basicMul, karatsubaAdd, karatsubaSub, karatsuba, alias, addAt, max, karatsubaLen, hexValue, divisors, trailingZeroBits, greaterThan;
	Word = $pkg.Word = $newType(4, "Uintptr", "big.Word", "Word", "math/big", null);
	Int = $pkg.Int = $newType(0, "Struct", "big.Int", "Int", "math/big", function(neg_, abs_) {
		this.$val = this;
		this.neg = neg_ !== undefined ? neg_ : false;
		this.abs = abs_ !== undefined ? abs_ : nat.nil;
	});
	nat = $pkg.nat = $newType(12, "Slice", "big.nat", "nat", "math/big", null);
	divisor = $pkg.divisor = $newType(0, "Struct", "big.divisor", "divisor", "math/big", function(bbb_, nbits_, ndigits_) {
		this.$val = this;
		this.bbb = bbb_ !== undefined ? bbb_ : nat.nil;
		this.nbits = nbits_ !== undefined ? nbits_ : 0;
		this.ndigits = ndigits_ !== undefined ? ndigits_ : 0;
	});
	mulWW = function(x, y) {
		var z1 = 0, z0 = 0, _tuple;
		_tuple = mulWW_g(x, y); z1 = _tuple[0]; z0 = _tuple[1];
		return [z1, z0];
	};
	divWW = function(x1, x0, y) {
		var q = 0, r = 0, _tuple;
		_tuple = divWW_g(x1, x0, y); q = _tuple[0]; r = _tuple[1];
		return [q, r];
	};
	addVV = function(z, x, y) {
		var c = 0;
		c = addVV_g(z, x, y);
		return c;
	};
	subVV = function(z, x, y) {
		var c = 0;
		c = subVV_g(z, x, y);
		return c;
	};
	addVW = function(z, x, y) {
		var c = 0;
		c = addVW_g(z, x, y);
		return c;
	};
	subVW = function(z, x, y) {
		var c = 0;
		c = subVW_g(z, x, y);
		return c;
	};
	shlVU = function(z, x, s) {
		var c = 0;
		c = shlVU_g(z, x, s);
		return c;
	};
	shrVU = function(z, x, s) {
		var c = 0;
		c = shrVU_g(z, x, s);
		return c;
	};
	mulAddVWW = function(z, x, y, r) {
		var c = 0;
		c = mulAddVWW_g(z, x, y, r);
		return c;
	};
	addMulVVW = function(z, x, y) {
		var c = 0;
		c = addMulVVW_g(z, x, y);
		return c;
	};
	divWVW = function(z, xn, x, y) {
		var r = 0;
		r = divWVW_g(z, xn, x, y);
		return r;
	};
	bitLen = function(x) {
		var n = 0;
		n = bitLen_g(x);
		return n;
	};
	addWW_g = function(x, y, c) {
		var z1 = 0, z0 = 0, yc;
		yc = y + c >>> 0;
		z0 = x + yc >>> 0;
		if (z0 < x || yc < y) {
			z1 = 1;
		}
		return [z1, z0];
	};
	subWW_g = function(x, y, c) {
		var z1 = 0, z0 = 0, yc;
		yc = y + c >>> 0;
		z0 = x - yc >>> 0;
		if (z0 > x || yc < y) {
			z1 = 1;
		}
		return [z1, z0];
	};
	mulWW_g = function(x, y) {
		var z1 = 0, z0 = 0, x0, x1, y0, y1, w0, t, w1, w2;
		x0 = (x & 65535) >>> 0;
		x1 = x >>> 16 >>> 0;
		y0 = (y & 65535) >>> 0;
		y1 = y >>> 16 >>> 0;
		w0 = (((x0 >>> 16 << 16) * y0 >>> 0) + (x0 << 16 >>> 16) * y0) >>> 0;
		t = ((((x1 >>> 16 << 16) * y0 >>> 0) + (x1 << 16 >>> 16) * y0) >>> 0) + (w0 >>> 16 >>> 0) >>> 0;
		w1 = (t & 65535) >>> 0;
		w2 = t >>> 16 >>> 0;
		w1 = w1 + (((((x0 >>> 16 << 16) * y1 >>> 0) + (x0 << 16 >>> 16) * y1) >>> 0)) >>> 0;
		z1 = (((((x1 >>> 16 << 16) * y1 >>> 0) + (x1 << 16 >>> 16) * y1) >>> 0) + w2 >>> 0) + (w1 >>> 16 >>> 0) >>> 0;
		z0 = (((x >>> 16 << 16) * y >>> 0) + (x << 16 >>> 16) * y) >>> 0;
		return [z1, z0];
	};
	mulAddWWW_g = function(x, y, c) {
		var z1 = 0, z0 = 0, _tuple, zz0;
		_tuple = mulWW(x, y); z1 = _tuple[0]; zz0 = _tuple[1];
		z0 = zz0 + c >>> 0;
		if (z0 < zz0) {
			z1 = z1 + (1) >>> 0;
		}
		return [z1, z0];
	};
	bitLen_g = function(x) {
		var n = 0, y, y$1, y$2, y$3;
		while (x >= 32768) {
			n = n + (16) >> 0;
			x = (y = (16), y < 32 ? (x >>> y) : 0) >>> 0;
		}
		if (x >= 128) {
			x = (y$1 = (8), y$1 < 32 ? (x >>> y$1) : 0) >>> 0;
			n = n + (8) >> 0;
		}
		if (x >= 8) {
			x = (y$2 = (4), y$2 < 32 ? (x >>> y$2) : 0) >>> 0;
			n = n + (4) >> 0;
		}
		if (x >= 2) {
			x = (y$3 = (2), y$3 < 32 ? (x >>> y$3) : 0) >>> 0;
			n = n + (2) >> 0;
		}
		if (x >= 1) {
			n = n + (1) >> 0;
		}
		return n;
	};
	leadingZeros = function(x) {
		return ((32 - bitLen(x) >> 0) >>> 0);
	};
	divWW_g = function(u1, u0, v) {
		var q = 0, r = 0, _tmp, _tmp$1, s, y, vn1, vn0, y$1, y$2, un32, y$3, un10, un1, un0, _q, q1, rhat, un21, _q$1, q0, _tmp$2, _tmp$3, y$4;
		if (u1 >= v) {
			_tmp = 4294967295; _tmp$1 = 4294967295; q = _tmp; r = _tmp$1;
			return [q, r];
		}
		s = leadingZeros(v);
		v = (y = (s), y < 32 ? (v << y) : 0) >>> 0;
		vn1 = v >>> 16 >>> 0;
		vn0 = (v & 65535) >>> 0;
		un32 = (((y$1 = s, y$1 < 32 ? (u1 << y$1) : 0) >>> 0) | ((y$2 = ((32 - s >>> 0)), y$2 < 32 ? (u0 >>> y$2) : 0) >>> 0)) >>> 0;
		un10 = (y$3 = s, y$3 < 32 ? (u0 << y$3) : 0) >>> 0;
		un1 = un10 >>> 16 >>> 0;
		un0 = (un10 & 65535) >>> 0;
		q1 = (_q = un32 / vn1, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		rhat = un32 - ((((q1 >>> 16 << 16) * vn1 >>> 0) + (q1 << 16 >>> 16) * vn1) >>> 0) >>> 0;
		while (q1 >= 65536 || ((((q1 >>> 16 << 16) * vn0 >>> 0) + (q1 << 16 >>> 16) * vn0) >>> 0) > (((((65536 >>> 16 << 16) * rhat >>> 0) + (65536 << 16 >>> 16) * rhat) >>> 0) + un1 >>> 0)) {
			q1 = q1 - (1) >>> 0;
			rhat = rhat + (vn1) >>> 0;
			if (rhat >= 65536) {
				break;
			}
		}
		un21 = (((((un32 >>> 16 << 16) * 65536 >>> 0) + (un32 << 16 >>> 16) * 65536) >>> 0) + un1 >>> 0) - ((((q1 >>> 16 << 16) * v >>> 0) + (q1 << 16 >>> 16) * v) >>> 0) >>> 0;
		q0 = (_q$1 = un21 / vn1, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
		rhat = un21 - ((((q0 >>> 16 << 16) * vn1 >>> 0) + (q0 << 16 >>> 16) * vn1) >>> 0) >>> 0;
		while (q0 >= 65536 || ((((q0 >>> 16 << 16) * vn0 >>> 0) + (q0 << 16 >>> 16) * vn0) >>> 0) > (((((65536 >>> 16 << 16) * rhat >>> 0) + (65536 << 16 >>> 16) * rhat) >>> 0) + un0 >>> 0)) {
			q0 = q0 - (1) >>> 0;
			rhat = rhat + (vn1) >>> 0;
			if (rhat >= 65536) {
				break;
			}
		}
		_tmp$2 = ((((q1 >>> 16 << 16) * 65536 >>> 0) + (q1 << 16 >>> 16) * 65536) >>> 0) + q0 >>> 0; _tmp$3 = (y$4 = s, y$4 < 32 ? ((((((((un21 >>> 16 << 16) * 65536 >>> 0) + (un21 << 16 >>> 16) * 65536) >>> 0) + un0 >>> 0) - ((((q0 >>> 16 << 16) * v >>> 0) + (q0 << 16 >>> 16) * v) >>> 0) >>> 0)) >>> y$4) : 0) >>> 0; q = _tmp$2; r = _tmp$3;
		return [q, r];
	};
	addVV_g = function(z, x, y) {
		var c = 0, _ref, _i, i, _tuple;
		_ref = z;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			_tuple = addWW_g(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), ((i < 0 || i >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i]), c); c = _tuple[0]; (i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = _tuple[1];
			_i++;
		}
		return c;
	};
	subVV_g = function(z, x, y) {
		var c = 0, _ref, _i, i, _tuple;
		_ref = z;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			_tuple = subWW_g(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), ((i < 0 || i >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i]), c); c = _tuple[0]; (i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = _tuple[1];
			_i++;
		}
		return c;
	};
	addVW_g = function(z, x, y) {
		var c = 0, _ref, _i, i, _tuple;
		c = y;
		_ref = z;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			_tuple = addWW_g(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), c, 0); c = _tuple[0]; (i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = _tuple[1];
			_i++;
		}
		return c;
	};
	subVW_g = function(z, x, y) {
		var c = 0, _ref, _i, i, _tuple;
		c = y;
		_ref = z;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			_tuple = subWW_g(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), c, 0); c = _tuple[0]; (i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = _tuple[1];
			_i++;
		}
		return c;
	};
	shlVU_g = function(z, x, s) {
		var c = 0, n, nonAsciiName, x$1, w1, y, i, w, x$2, y$1, y$2, y$3;
		n = z.$length;
		if (n > 0) {
			nonAsciiName = 32 - s >>> 0;
			w1 = (x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
			c = (y = nonAsciiName, y < 32 ? (w1 >>> y) : 0) >>> 0;
			i = n - 1 >> 0;
			while (i > 0) {
				w = w1;
				w1 = (x$2 = i - 1 >> 0, ((x$2 < 0 || x$2 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$2]));
				(i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = (((y$1 = s, y$1 < 32 ? (w << y$1) : 0) >>> 0) | ((y$2 = nonAsciiName, y$2 < 32 ? (w1 >>> y$2) : 0) >>> 0)) >>> 0;
				i = i - (1) >> 0;
			}
			(0 < 0 || 0 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0] = (y$3 = s, y$3 < 32 ? (w1 << y$3) : 0) >>> 0;
		}
		return c;
	};
	shrVU_g = function(z, x, s) {
		var c = 0, n, nonAsciiName, w1, y, i, w, x$1, y$1, y$2, y$3, x$2;
		n = z.$length;
		if (n > 0) {
			nonAsciiName = 32 - s >>> 0;
			w1 = ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]);
			c = (y = nonAsciiName, y < 32 ? (w1 << y) : 0) >>> 0;
			i = 0;
			while (i < (n - 1 >> 0)) {
				w = w1;
				w1 = (x$1 = i + 1 >> 0, ((x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1]));
				(i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = (((y$1 = s, y$1 < 32 ? (w >>> y$1) : 0) >>> 0) | ((y$2 = nonAsciiName, y$2 < 32 ? (w1 << y$2) : 0) >>> 0)) >>> 0;
				i = i + (1) >> 0;
			}
			(x$2 = n - 1 >> 0, (x$2 < 0 || x$2 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + x$2] = (y$3 = s, y$3 < 32 ? (w1 >>> y$3) : 0) >>> 0);
		}
		return c;
	};
	mulAddVWW_g = function(z, x, y, r) {
		var c = 0, _ref, _i, i, _tuple;
		c = r;
		_ref = z;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			_tuple = mulAddWWW_g(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), y, c); c = _tuple[0]; (i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = _tuple[1];
			_i++;
		}
		return c;
	};
	addMulVVW_g = function(z, x, y) {
		var c = 0, _ref, _i, i, _tuple, z1, z0, _tuple$1;
		_ref = z;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			_tuple = mulAddWWW_g(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), y, ((i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i])); z1 = _tuple[0]; z0 = _tuple[1];
			_tuple$1 = addWW_g(z0, c, 0); c = _tuple$1[0]; (i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = _tuple$1[1];
			c = c + (z1) >>> 0;
			_i++;
		}
		return c;
	};
	divWVW_g = function(z, xn, x, y) {
		var r = 0, i, _tuple;
		r = xn;
		i = z.$length - 1 >> 0;
		while (i >= 0) {
			_tuple = divWW_g(r, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]), y); (i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = _tuple[0]; r = _tuple[1];
			i = i - (1) >> 0;
		}
		return r;
	};
	Int.Ptr.prototype.Sign = function() {
		var x;
		x = this;
		if (x.abs.$length === 0) {
			return 0;
		}
		if (x.neg) {
			return -1;
		}
		return 1;
	};
	Int.prototype.Sign = function() { return this.$val.Sign(); };
	Int.Ptr.prototype.SetInt64 = function(x) {
		var z, neg;
		z = this;
		neg = false;
		if ((x.$high < 0 || (x.$high === 0 && x.$low < 0))) {
			neg = true;
			x = new $Int64(-x.$high, -x.$low);
		}
		z.abs = z.abs.setUint64(new $Uint64(x.$high, x.$low));
		z.neg = neg;
		return z;
	};
	Int.prototype.SetInt64 = function(x) { return this.$val.SetInt64(x); };
	Int.Ptr.prototype.SetUint64 = function(x) {
		var z;
		z = this;
		z.abs = z.abs.setUint64(x);
		z.neg = false;
		return z;
	};
	Int.prototype.SetUint64 = function(x) { return this.$val.SetUint64(x); };
	NewInt = $pkg.NewInt = function(x) {
		return new Int.Ptr().SetInt64(x);
	};
	Int.Ptr.prototype.Set = function(x) {
		var z;
		z = this;
		if (!(z === x)) {
			z.abs = z.abs.set(x.abs);
			z.neg = x.neg;
		}
		return z;
	};
	Int.prototype.Set = function(x) { return this.$val.Set(x); };
	Int.Ptr.prototype.Bits = function() {
		var x, x$1;
		x = this;
		return (x$1 = x.abs, $subslice(new ($sliceType(Word))(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length));
	};
	Int.prototype.Bits = function() { return this.$val.Bits(); };
	Int.Ptr.prototype.SetBits = function(abs) {
		var z;
		z = this;
		z.abs = $subslice(new nat(abs.$array), abs.$offset, abs.$offset + abs.$length).norm();
		z.neg = false;
		return z;
	};
	Int.prototype.SetBits = function(abs) { return this.$val.SetBits(abs); };
	Int.Ptr.prototype.Abs = function(x) {
		var z;
		z = this;
		z.Set(x);
		z.neg = false;
		return z;
	};
	Int.prototype.Abs = function(x) { return this.$val.Abs(x); };
	Int.Ptr.prototype.Neg = function(x) {
		var z;
		z = this;
		z.Set(x);
		z.neg = z.abs.$length > 0 && !z.neg;
		return z;
	};
	Int.prototype.Neg = function(x) { return this.$val.Neg(x); };
	Int.Ptr.prototype.Add = function(x, y) {
		var z, neg;
		z = this;
		neg = x.neg;
		if (x.neg === y.neg) {
			z.abs = z.abs.add(x.abs, y.abs);
		} else {
			if (x.abs.cmp(y.abs) >= 0) {
				z.abs = z.abs.sub(x.abs, y.abs);
			} else {
				neg = !neg;
				z.abs = z.abs.sub(y.abs, x.abs);
			}
		}
		z.neg = z.abs.$length > 0 && neg;
		return z;
	};
	Int.prototype.Add = function(x, y) { return this.$val.Add(x, y); };
	Int.Ptr.prototype.Sub = function(x, y) {
		var z, neg;
		z = this;
		neg = x.neg;
		if (!(x.neg === y.neg)) {
			z.abs = z.abs.add(x.abs, y.abs);
		} else {
			if (x.abs.cmp(y.abs) >= 0) {
				z.abs = z.abs.sub(x.abs, y.abs);
			} else {
				neg = !neg;
				z.abs = z.abs.sub(y.abs, x.abs);
			}
		}
		z.neg = z.abs.$length > 0 && neg;
		return z;
	};
	Int.prototype.Sub = function(x, y) { return this.$val.Sub(x, y); };
	Int.Ptr.prototype.Mul = function(x, y) {
		var z;
		z = this;
		z.abs = z.abs.mul(x.abs, y.abs);
		z.neg = z.abs.$length > 0 && !(x.neg === y.neg);
		return z;
	};
	Int.prototype.Mul = function(x, y) { return this.$val.Mul(x, y); };
	Int.Ptr.prototype.MulRange = function(a, b) {
		var z, neg, x, x$1, _tmp, _tmp$1;
		z = this;
		if ((a.$high > b.$high || (a.$high === b.$high && a.$low > b.$low))) {
			return z.SetInt64(new $Int64(0, 1));
		} else if ((a.$high < 0 || (a.$high === 0 && a.$low <= 0)) && (b.$high > 0 || (b.$high === 0 && b.$low >= 0))) {
			return z.SetInt64(new $Int64(0, 0));
		}
		neg = false;
		if ((a.$high < 0 || (a.$high === 0 && a.$low < 0))) {
			neg = (x = (x$1 = new $Int64(b.$high - a.$high, b.$low - a.$low), new $Int64(x$1.$high & 0, (x$1.$low & 1) >>> 0)), (x.$high === 0 && x.$low === 0));
			_tmp = new $Int64(-b.$high, -b.$low); _tmp$1 = new $Int64(-a.$high, -a.$low); a = _tmp; b = _tmp$1;
		}
		z.abs = z.abs.mulRange(new $Uint64(a.$high, a.$low), new $Uint64(b.$high, b.$low));
		z.neg = neg;
		return z;
	};
	Int.prototype.MulRange = function(a, b) { return this.$val.MulRange(a, b); };
	Int.Ptr.prototype.Binomial = function(n, k) {
		var z, _tmp, _tmp$1, a, b, x;
		z = this;
		_tmp = new Int.Ptr(); $copy(_tmp, new Int.Ptr(), Int); _tmp$1 = new Int.Ptr(); $copy(_tmp$1, new Int.Ptr(), Int); a = new Int.Ptr(); $copy(a, _tmp, Int); b = new Int.Ptr(); $copy(b, _tmp$1, Int);
		a.MulRange((x = new $Int64(n.$high - k.$high, n.$low - k.$low), new $Int64(x.$high + 0, x.$low + 1)), n);
		b.MulRange(new $Int64(0, 1), k);
		return z.Quo(a, b);
	};
	Int.prototype.Binomial = function(n, k) { return this.$val.Binomial(n, k); };
	Int.Ptr.prototype.Quo = function(x, y) {
		var z, _tuple;
		z = this;
		_tuple = z.abs.div(nat.nil, x.abs, y.abs); z.abs = _tuple[0];
		z.neg = z.abs.$length > 0 && !(x.neg === y.neg);
		return z;
	};
	Int.prototype.Quo = function(x, y) { return this.$val.Quo(x, y); };
	Int.Ptr.prototype.Rem = function(x, y) {
		var z, _tuple;
		z = this;
		_tuple = nat.nil.div(z.abs, x.abs, y.abs); z.abs = _tuple[1];
		z.neg = z.abs.$length > 0 && x.neg;
		return z;
	};
	Int.prototype.Rem = function(x, y) { return this.$val.Rem(x, y); };
	Int.Ptr.prototype.QuoRem = function(x, y, r) {
		var z, _tuple, _tmp, _tmp$1;
		z = this;
		_tuple = z.abs.div(r.abs, x.abs, y.abs); z.abs = _tuple[0]; r.abs = _tuple[1];
		_tmp = z.abs.$length > 0 && !(x.neg === y.neg); _tmp$1 = r.abs.$length > 0 && x.neg; z.neg = _tmp; r.neg = _tmp$1;
		return [z, r];
	};
	Int.prototype.QuoRem = function(x, y, r) { return this.$val.QuoRem(x, y, r); };
	Int.Ptr.prototype.Div = function(x, y) {
		var z, y_neg, r;
		z = this;
		y_neg = y.neg;
		r = new Int.Ptr(); $copy(r, new Int.Ptr(), Int);
		z.QuoRem(x, y, r);
		if (r.neg) {
			if (y_neg) {
				z.Add(z, intOne);
			} else {
				z.Sub(z, intOne);
			}
		}
		return z;
	};
	Int.prototype.Div = function(x, y) { return this.$val.Div(x, y); };
	Int.Ptr.prototype.Mod = function(x, y) {
		var z, y0, q;
		z = this;
		y0 = y;
		if (z === y || alias(z.abs, y.abs)) {
			y0 = new Int.Ptr().Set(y);
		}
		q = new Int.Ptr(); $copy(q, new Int.Ptr(), Int);
		q.QuoRem(x, y, z);
		if (z.neg) {
			if (y0.neg) {
				z.Sub(z, y0);
			} else {
				z.Add(z, y0);
			}
		}
		return z;
	};
	Int.prototype.Mod = function(x, y) { return this.$val.Mod(x, y); };
	Int.Ptr.prototype.DivMod = function(x, y, m) {
		var z, y0;
		z = this;
		y0 = y;
		if (z === y || alias(z.abs, y.abs)) {
			y0 = new Int.Ptr().Set(y);
		}
		z.QuoRem(x, y, m);
		if (m.neg) {
			if (y0.neg) {
				z.Add(z, intOne);
				m.Sub(m, y0);
			} else {
				z.Sub(z, intOne);
				m.Add(m, y0);
			}
		}
		return [z, m];
	};
	Int.prototype.DivMod = function(x, y, m) { return this.$val.DivMod(x, y, m); };
	Int.Ptr.prototype.Cmp = function(y) {
		var r = 0, x;
		x = this;
		if (x.neg === y.neg) {
			r = x.abs.cmp(y.abs);
			if (x.neg) {
				r = -r;
			}
		} else if (x.neg) {
			r = -1;
		} else {
			r = 1;
		}
		return r;
	};
	Int.prototype.Cmp = function(y) { return this.$val.Cmp(y); };
	Int.Ptr.prototype.String = function() {
		var x;
		x = this;
		if (x === ($ptrType(Int)).nil) {
			return "<nil>";
		} else if (x.neg) {
			return "-" + x.abs.decimalString();
		}
		return x.abs.decimalString();
	};
	Int.prototype.String = function() { return this.$val.String(); };
	charset = function(ch) {
		var _ref;
		_ref = ch;
		if (_ref === 98) {
			return "0123456789abcdefghijklmnopqrstuvwxyz".substring(0, 2);
		} else if (_ref === 111) {
			return "0123456789abcdefghijklmnopqrstuvwxyz".substring(0, 8);
		} else if (_ref === 100 || _ref === 115 || _ref === 118) {
			return "0123456789abcdefghijklmnopqrstuvwxyz".substring(0, 10);
		} else if (_ref === 120) {
			return "0123456789abcdefghijklmnopqrstuvwxyz".substring(0, 16);
		} else if (_ref === 88) {
			return "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ".substring(0, 16);
		}
		return "";
	};
	writeMultiple = function(s, text, count) {
		var b;
		if (text.length > 0) {
			b = new ($sliceType($Uint8))($stringToBytes(text));
			while (count > 0) {
				s.Write(b);
				count = count - (1) >> 0;
			}
		}
	};
	Int.Ptr.prototype.Format = function(s, ch) {
		var x, cs, sign, prefix, _ref, digits, left, zeroes, right, _tuple, precision, precisionSet, length, _tuple$1, width, widthSet, d;
		x = this;
		cs = charset(ch);
		if (cs === "") {
			fmt.Fprintf(s, "%%!%c(big.Int=%s)", new ($sliceType($emptyInterface))([new $Int32(ch), new $String(x.String())]));
			return;
		} else if (x === ($ptrType(Int)).nil) {
			fmt.Fprint(s, new ($sliceType($emptyInterface))([new $String("<nil>")]));
			return;
		}
		sign = "";
		if (x.neg) {
			sign = "-";
		} else if (s.Flag(43)) {
			sign = "+";
		} else if (s.Flag(32)) {
			sign = " ";
		}
		prefix = "";
		if (s.Flag(35)) {
			_ref = ch;
			if (_ref === 111) {
				prefix = "0";
			} else if (_ref === 120) {
				prefix = "0x";
			} else if (_ref === 88) {
				prefix = "0X";
			}
		}
		digits = x.abs.string(cs);
		left = 0;
		zeroes = 0;
		right = 0;
		_tuple = s.Precision(); precision = _tuple[0]; precisionSet = _tuple[1];
		if (precisionSet) {
			if (digits.length < precision) {
				zeroes = precision - digits.length >> 0;
			} else if (digits === "0" && (precision === 0)) {
				return;
			}
		}
		length = ((sign.length + prefix.length >> 0) + zeroes >> 0) + digits.length >> 0;
		_tuple$1 = s.Width(); width = _tuple$1[0]; widthSet = _tuple$1[1];
		if (widthSet && length < width) {
			d = width - length >> 0;
			if (s.Flag(45)) {
				right = d;
			} else if (s.Flag(48) && !precisionSet) {
				zeroes = d;
			} else {
				left = d;
			}
		}
		writeMultiple(s, " ", left);
		writeMultiple(s, sign, 1);
		writeMultiple(s, prefix, 1);
		writeMultiple(s, "0", zeroes);
		writeMultiple(s, digits, 1);
		writeMultiple(s, " ", right);
	};
	Int.prototype.Format = function(s, ch) { return this.$val.Format(s, ch); };
	Int.Ptr.prototype.scan = function(r, base) {
		var z, _tuple, ch, err, neg, _ref, _tuple$1;
		z = this;
		_tuple = r.ReadRune(); ch = _tuple[0]; err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($ptrType(Int)).nil, 0, err];
		}
		neg = false;
		_ref = ch;
		if (_ref === 45) {
			neg = true;
		} else if (_ref === 43) {
		} else {
			r.UnreadRune();
		}
		_tuple$1 = z.abs.scan(r, base); z.abs = _tuple$1[0]; base = _tuple$1[1]; err = _tuple$1[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($ptrType(Int)).nil, base, err];
		}
		z.neg = z.abs.$length > 0 && neg;
		return [z, base, $ifaceNil];
	};
	Int.prototype.scan = function(r, base) { return this.$val.scan(r, base); };
	Int.Ptr.prototype.Scan = function(s, ch) {
		var z, base, _ref, _tuple, err;
		z = this;
		s.SkipSpace();
		base = 0;
		_ref = ch;
		if (_ref === 98) {
			base = 2;
		} else if (_ref === 111) {
			base = 8;
		} else if (_ref === 100) {
			base = 10;
		} else if (_ref === 120 || _ref === 88) {
			base = 16;
		} else if (_ref === 115 || _ref === 118) {
		} else {
			return errors.New("Int.Scan: invalid verb");
		}
		_tuple = z.scan(s, base); err = _tuple[2];
		return err;
	};
	Int.prototype.Scan = function(s, ch) { return this.$val.Scan(s, ch); };
	Int.Ptr.prototype.Int64 = function() {
		var x, x$1, v;
		x = this;
		v = (x$1 = x.Uint64(), new $Int64(x$1.$high, x$1.$low));
		if (x.neg) {
			v = new $Int64(-v.$high, -v.$low);
		}
		return v;
	};
	Int.prototype.Int64 = function() { return this.$val.Int64(); };
	Int.Ptr.prototype.Uint64 = function() {
		var x, x$1, x$2, v, x$3, x$4, x$5;
		x = this;
		if (x.abs.$length === 0) {
			return new $Uint64(0, 0);
		}
		v = (x$1 = (x$2 = x.abs, ((0 < 0 || 0 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0])), new $Uint64(0, x$1.constructor === Number ? x$1 : 1));
		if (true && x.abs.$length > 1) {
			v = (x$3 = $shiftLeft64((x$4 = (x$5 = x.abs, ((1 < 0 || 1 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + 1])), new $Uint64(0, x$4.constructor === Number ? x$4 : 1)), 32), new $Uint64(v.$high | x$3.$high, (v.$low | x$3.$low) >>> 0));
		}
		return v;
	};
	Int.prototype.Uint64 = function() { return this.$val.Uint64(); };
	Int.Ptr.prototype.SetString = function(s, base) {
		var z, r, _tuple, err, _tuple$1;
		z = this;
		r = strings.NewReader(s);
		_tuple = z.scan(r, base); err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($ptrType(Int)).nil, false];
		}
		_tuple$1 = r.ReadRune(); err = _tuple$1[2];
		if (!($interfaceIsEqual(err, io.EOF))) {
			return [($ptrType(Int)).nil, false];
		}
		return [z, true];
	};
	Int.prototype.SetString = function(s, base) { return this.$val.SetString(s, base); };
	Int.Ptr.prototype.SetBytes = function(buf) {
		var z;
		z = this;
		z.abs = z.abs.setBytes(buf);
		z.neg = false;
		return z;
	};
	Int.prototype.SetBytes = function(buf) { return this.$val.SetBytes(buf); };
	Int.Ptr.prototype.Bytes = function() {
		var x, x$1, buf;
		x = this;
		buf = ($sliceType($Uint8)).make((x$1 = x.abs.$length, (((x$1 >>> 16 << 16) * 4 >> 0) + (x$1 << 16 >>> 16) * 4) >> 0));
		return $subslice(buf, x.abs.bytes(buf));
	};
	Int.prototype.Bytes = function() { return this.$val.Bytes(); };
	Int.Ptr.prototype.BitLen = function() {
		var x;
		x = this;
		return x.abs.bitLen();
	};
	Int.prototype.BitLen = function() { return this.$val.BitLen(); };
	Int.Ptr.prototype.Exp = function(x, y, m) {
		var z, yWords, mWords;
		z = this;
		yWords = nat.nil;
		if (!y.neg) {
			yWords = y.abs;
		}
		mWords = nat.nil;
		if (!(m === ($ptrType(Int)).nil)) {
			mWords = m.abs;
		}
		z.abs = z.abs.expNN(x.abs, yWords, mWords);
		z.neg = z.abs.$length > 0 && x.neg && yWords.$length > 0 && (((((0 < 0 || 0 >= yWords.$length) ? $throwRuntimeError("index out of range") : yWords.$array[yWords.$offset + 0]) & 1) >>> 0) === 1);
		return z;
	};
	Int.prototype.Exp = function(x, y, m) { return this.$val.Exp(x, y, m); };
	Int.Ptr.prototype.GCD = function(x, y, a, b) {
		var z, A, B, X, Y, lastX, lastY, q, temp, r, _tuple, _tmp, _tmp$1;
		z = this;
		if (a.Sign() <= 0 || b.Sign() <= 0) {
			z.SetInt64(new $Int64(0, 0));
			if (!(x === ($ptrType(Int)).nil)) {
				x.SetInt64(new $Int64(0, 0));
			}
			if (!(y === ($ptrType(Int)).nil)) {
				y.SetInt64(new $Int64(0, 0));
			}
			return z;
		}
		if (x === ($ptrType(Int)).nil && y === ($ptrType(Int)).nil) {
			return z.binaryGCD(a, b);
		}
		A = new Int.Ptr().Set(a);
		B = new Int.Ptr().Set(b);
		X = new Int.Ptr();
		Y = new Int.Ptr().SetInt64(new $Int64(0, 1));
		lastX = new Int.Ptr().SetInt64(new $Int64(0, 1));
		lastY = new Int.Ptr();
		q = new Int.Ptr();
		temp = new Int.Ptr();
		while (B.abs.$length > 0) {
			r = new Int.Ptr();
			_tuple = q.QuoRem(A, B, r); q = _tuple[0]; r = _tuple[1];
			_tmp = B; _tmp$1 = r; A = _tmp; B = _tmp$1;
			temp.Set(X);
			X.Mul(X, q);
			X.neg = !X.neg;
			X.Add(X, lastX);
			lastX.Set(temp);
			temp.Set(Y);
			Y.Mul(Y, q);
			Y.neg = !Y.neg;
			Y.Add(Y, lastY);
			lastY.Set(temp);
		}
		if (!(x === ($ptrType(Int)).nil)) {
			$copy(x, lastX, Int);
		}
		if (!(y === ($ptrType(Int)).nil)) {
			$copy(y, lastY, Int);
		}
		$copy(z, A, Int);
		return z;
	};
	Int.prototype.GCD = function(x, y, a, b) { return this.$val.GCD(x, y, a, b); };
	Int.Ptr.prototype.binaryGCD = function(a, b) {
		var z, u, v, k, vk, t, x, _tmp, _tmp$1, _tmp$2, _tmp$3;
		z = this;
		u = z;
		v = new Int.Ptr();
		if (a.abs.$length > b.abs.$length) {
			u.Set(b);
			v.Rem(a, b);
		} else if (a.abs.$length < b.abs.$length) {
			u.Set(a);
			v.Rem(b, a);
		} else {
			u.Set(a);
			v.Set(b);
		}
		if (v.abs.$length === 0) {
			return u;
		}
		k = u.abs.trailingZeroBits();
		vk = v.abs.trailingZeroBits();
		if (vk < k) {
			k = vk;
		}
		u.Rsh(u, k);
		v.Rsh(v, k);
		t = new Int.Ptr();
		if (!(((((x = u.abs, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])) & 1) >>> 0) === 0))) {
			t.Neg(v);
		} else {
			t.Set(u);
		}
		while (t.abs.$length > 0) {
			t.Rsh(t, t.abs.trailingZeroBits());
			if (t.neg) {
				_tmp = t; _tmp$1 = v; v = _tmp; t = _tmp$1;
				v.neg = v.abs.$length > 0 && !v.neg;
			} else {
				_tmp$2 = t; _tmp$3 = u; u = _tmp$2; t = _tmp$3;
			}
			t.Sub(u, v);
		}
		return z.Lsh(u, k);
	};
	Int.prototype.binaryGCD = function(a, b) { return this.$val.binaryGCD(a, b); };
	Int.Ptr.prototype.ProbablyPrime = function(n) {
		var x;
		x = this;
		return !x.neg && x.abs.probablyPrime(n);
	};
	Int.prototype.ProbablyPrime = function(n) { return this.$val.ProbablyPrime(n); };
	Int.Ptr.prototype.Rand = function(rnd, n) {
		var z;
		z = this;
		z.neg = false;
		if (n.neg === true || (n.abs.$length === 0)) {
			z.abs = nat.nil;
			return z;
		}
		z.abs = z.abs.random(rnd, n.abs, n.abs.bitLen());
		return z;
	};
	Int.prototype.Rand = function(rnd, n) { return this.$val.Rand(rnd, n); };
	Int.Ptr.prototype.ModInverse = function(g, p) {
		var z, d;
		z = this;
		d = new Int.Ptr(); $copy(d, new Int.Ptr(), Int);
		d.GCD(z, ($ptrType(Int)).nil, g, p);
		if (z.neg) {
			z.Add(z, p);
		}
		return z;
	};
	Int.prototype.ModInverse = function(g, p) { return this.$val.ModInverse(g, p); };
	Int.Ptr.prototype.Lsh = function(x, n) {
		var z;
		z = this;
		z.abs = z.abs.shl(x.abs, n);
		z.neg = x.neg;
		return z;
	};
	Int.prototype.Lsh = function(x, n) { return this.$val.Lsh(x, n); };
	Int.Ptr.prototype.Rsh = function(x, n) {
		var z, t;
		z = this;
		if (x.neg) {
			t = z.abs.sub(x.abs, natOne);
			t = t.shr(t, n);
			z.abs = t.add(t, natOne);
			z.neg = true;
			return z;
		}
		z.abs = z.abs.shr(x.abs, n);
		z.neg = false;
		return z;
	};
	Int.prototype.Rsh = function(x, n) { return this.$val.Rsh(x, n); };
	Int.Ptr.prototype.Bit = function(i) {
		var x, x$1, t;
		x = this;
		if (i === 0) {
			if (x.abs.$length > 0) {
				return ((((x$1 = x.abs, ((0 < 0 || 0 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0])) & 1) >>> 0) >>> 0);
			}
			return 0;
		}
		if (i < 0) {
			$panic(new $String("negative bit index"));
		}
		if (x.neg) {
			t = nat.nil.sub(x.abs, natOne);
			return (t.bit((i >>> 0)) ^ 1) >>> 0;
		}
		return x.abs.bit((i >>> 0));
	};
	Int.prototype.Bit = function(i) { return this.$val.Bit(i); };
	Int.Ptr.prototype.SetBit = function(x, i, b) {
		var z, t;
		z = this;
		if (i < 0) {
			$panic(new $String("negative bit index"));
		}
		if (x.neg) {
			t = z.abs.sub(x.abs, natOne);
			t = t.setBit(t, (i >>> 0), (b ^ 1) >>> 0);
			z.abs = t.add(t, natOne);
			z.neg = z.abs.$length > 0;
			return z;
		}
		z.abs = z.abs.setBit(x.abs, (i >>> 0), b);
		z.neg = false;
		return z;
	};
	Int.prototype.SetBit = function(x, i, b) { return this.$val.SetBit(x, i, b); };
	Int.Ptr.prototype.And = function(x, y) {
		var z, x1, y1, _tmp, _tmp$1, y1$1;
		z = this;
		if (x.neg === y.neg) {
			if (x.neg) {
				x1 = nat.nil.sub(x.abs, natOne);
				y1 = nat.nil.sub(y.abs, natOne);
				z.abs = z.abs.add(z.abs.or(x1, y1), natOne);
				z.neg = true;
				return z;
			}
			z.abs = z.abs.and(x.abs, y.abs);
			z.neg = false;
			return z;
		}
		if (x.neg) {
			_tmp = y; _tmp$1 = x; x = _tmp; y = _tmp$1;
		}
		y1$1 = nat.nil.sub(y.abs, natOne);
		z.abs = z.abs.andNot(x.abs, y1$1);
		z.neg = false;
		return z;
	};
	Int.prototype.And = function(x, y) { return this.$val.And(x, y); };
	Int.Ptr.prototype.AndNot = function(x, y) {
		var z, x1, y1, x1$1, y1$1;
		z = this;
		if (x.neg === y.neg) {
			if (x.neg) {
				x1 = nat.nil.sub(x.abs, natOne);
				y1 = nat.nil.sub(y.abs, natOne);
				z.abs = z.abs.andNot(y1, x1);
				z.neg = false;
				return z;
			}
			z.abs = z.abs.andNot(x.abs, y.abs);
			z.neg = false;
			return z;
		}
		if (x.neg) {
			x1$1 = nat.nil.sub(x.abs, natOne);
			z.abs = z.abs.add(z.abs.or(x1$1, y.abs), natOne);
			z.neg = true;
			return z;
		}
		y1$1 = nat.nil.add(y.abs, natOne);
		z.abs = z.abs.and(x.abs, y1$1);
		z.neg = false;
		return z;
	};
	Int.prototype.AndNot = function(x, y) { return this.$val.AndNot(x, y); };
	Int.Ptr.prototype.Or = function(x, y) {
		var z, x1, y1, _tmp, _tmp$1, y1$1;
		z = this;
		if (x.neg === y.neg) {
			if (x.neg) {
				x1 = nat.nil.sub(x.abs, natOne);
				y1 = nat.nil.sub(y.abs, natOne);
				z.abs = z.abs.add(z.abs.and(x1, y1), natOne);
				z.neg = true;
				return z;
			}
			z.abs = z.abs.or(x.abs, y.abs);
			z.neg = false;
			return z;
		}
		if (x.neg) {
			_tmp = y; _tmp$1 = x; x = _tmp; y = _tmp$1;
		}
		y1$1 = nat.nil.sub(y.abs, natOne);
		z.abs = z.abs.add(z.abs.andNot(y1$1, x.abs), natOne);
		z.neg = true;
		return z;
	};
	Int.prototype.Or = function(x, y) { return this.$val.Or(x, y); };
	Int.Ptr.prototype.Xor = function(x, y) {
		var z, x1, y1, _tmp, _tmp$1, y1$1;
		z = this;
		if (x.neg === y.neg) {
			if (x.neg) {
				x1 = nat.nil.sub(x.abs, natOne);
				y1 = nat.nil.sub(y.abs, natOne);
				z.abs = z.abs.xor(x1, y1);
				z.neg = false;
				return z;
			}
			z.abs = z.abs.xor(x.abs, y.abs);
			z.neg = false;
			return z;
		}
		if (x.neg) {
			_tmp = y; _tmp$1 = x; x = _tmp; y = _tmp$1;
		}
		y1$1 = nat.nil.sub(y.abs, natOne);
		z.abs = z.abs.add(z.abs.xor(x.abs, y1$1), natOne);
		z.neg = true;
		return z;
	};
	Int.prototype.Xor = function(x, y) { return this.$val.Xor(x, y); };
	Int.Ptr.prototype.Not = function(x) {
		var z;
		z = this;
		if (x.neg) {
			z.abs = z.abs.sub(x.abs, natOne);
			z.neg = false;
			return z;
		}
		z.abs = z.abs.add(x.abs, natOne);
		z.neg = true;
		return z;
	};
	Int.prototype.Not = function(x) { return this.$val.Not(x); };
	Int.Ptr.prototype.GobEncode = function() {
		var x, x$1, buf, i, b;
		x = this;
		if (x === ($ptrType(Int)).nil) {
			return [($sliceType($Uint8)).nil, $ifaceNil];
		}
		buf = ($sliceType($Uint8)).make((1 + (x$1 = x.abs.$length, (((x$1 >>> 16 << 16) * 4 >> 0) + (x$1 << 16 >>> 16) * 4) >> 0) >> 0));
		i = x.abs.bytes(buf) - 1 >> 0;
		b = 2;
		if (x.neg) {
			b = (b | (1)) >>> 0;
		}
		(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = b;
		return [$subslice(buf, i), $ifaceNil];
	};
	Int.prototype.GobEncode = function() { return this.$val.GobEncode(); };
	Int.Ptr.prototype.GobDecode = function(buf) {
		var z, b;
		z = this;
		if (buf.$length === 0) {
			$copy(z, new Int.Ptr(false, nat.nil), Int);
			return $ifaceNil;
		}
		b = ((0 < 0 || 0 >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + 0]);
		if (!(((b >>> 1 << 24 >>> 24) === 1))) {
			return errors.New(fmt.Sprintf("Int.GobDecode: encoding version %d not supported", new ($sliceType($emptyInterface))([new $Uint8((b >>> 1 << 24 >>> 24))])));
		}
		z.neg = !((((b & 1) >>> 0) === 0));
		z.abs = z.abs.setBytes($subslice(buf, 1));
		return $ifaceNil;
	};
	Int.prototype.GobDecode = function(buf) { return this.$val.GobDecode(buf); };
	Int.Ptr.prototype.MarshalJSON = function() {
		var z;
		z = this;
		return [new ($sliceType($Uint8))($stringToBytes(z.String())), $ifaceNil];
	};
	Int.prototype.MarshalJSON = function() { return this.$val.MarshalJSON(); };
	Int.Ptr.prototype.UnmarshalJSON = function(text) {
		var z, _tuple, ok;
		z = this;
		_tuple = z.SetString($bytesToString(text), 0); ok = _tuple[1];
		if (!ok) {
			return fmt.Errorf("math/big: cannot unmarshal %q into a *big.Int", new ($sliceType($emptyInterface))([text]));
		}
		return $ifaceNil;
	};
	Int.prototype.UnmarshalJSON = function(text) { return this.$val.UnmarshalJSON(text); };
	Int.Ptr.prototype.MarshalText = function() {
		var text = ($sliceType($Uint8)).nil, err = $ifaceNil, z, _tmp, _tmp$1;
		z = this;
		_tmp = new ($sliceType($Uint8))($stringToBytes(z.String())); _tmp$1 = $ifaceNil; text = _tmp; err = _tmp$1;
		return [text, err];
	};
	Int.prototype.MarshalText = function() { return this.$val.MarshalText(); };
	Int.Ptr.prototype.UnmarshalText = function(text) {
		var z, _tuple, ok;
		z = this;
		_tuple = z.SetString($bytesToString(text), 0); ok = _tuple[1];
		if (!ok) {
			return fmt.Errorf("math/big: cannot unmarshal %q into a *big.Int", new ($sliceType($emptyInterface))([text]));
		}
		return $ifaceNil;
	};
	Int.prototype.UnmarshalText = function(text) { return this.$val.UnmarshalText(text); };
	nat.prototype.clear = function() {
		var z, _ref, _i, i;
		z = this;
		_ref = z;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			(i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = 0;
			_i++;
		}
	};
	$ptrType(nat).prototype.clear = function() { return this.$get().clear(); };
	nat.prototype.norm = function() {
		var z, i, x;
		z = this;
		i = z.$length;
		while (i > 0 && ((x = i - 1 >> 0, ((x < 0 || x >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + x])) === 0)) {
			i = i - (1) >> 0;
		}
		return $subslice(z, 0, i);
	};
	$ptrType(nat).prototype.norm = function() { return this.$get().norm(); };
	nat.prototype.make = function(n) {
		var z;
		z = this;
		if (n <= z.$capacity) {
			return $subslice(z, 0, n);
		}
		return nat.make(n, (n + 4 >> 0));
	};
	$ptrType(nat).prototype.make = function(n) { return this.$get().make(n); };
	nat.prototype.setWord = function(x) {
		var z;
		z = this;
		if (x === 0) {
			return z.make(0);
		}
		z = z.make(1);
		(0 < 0 || 0 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0] = x;
		return z;
	};
	$ptrType(nat).prototype.setWord = function(x) { return this.$get().setWord(x); };
	nat.prototype.setUint64 = function(x) {
		var z, w, x$1, n, t, _ref, _i, i;
		z = this;
		w = (x.$low >>> 0);
		if ((x$1 = new $Uint64(0, w.constructor === Number ? w : 1), (x$1.$high === x.$high && x$1.$low === x.$low))) {
			return z.setWord(w);
		}
		n = 0;
		t = x;
		while ((t.$high > 0 || (t.$high === 0 && t.$low > 0))) {
			n = n + (1) >> 0;
			t = $shiftRightUint64(t, (32));
		}
		z = z.make(n);
		_ref = z;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			(i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = (new $Uint64(x.$high & 0, (x.$low & 4294967295) >>> 0).$low >>> 0);
			x = $shiftRightUint64(x, (32));
			_i++;
		}
		return z;
	};
	$ptrType(nat).prototype.setUint64 = function(x) { return this.$get().setUint64(x); };
	nat.prototype.set = function(x) {
		var z;
		z = this;
		z = z.make(x.$length);
		$copySlice(z, x);
		return z;
	};
	$ptrType(nat).prototype.set = function(x) { return this.$get().set(x); };
	nat.prototype.add = function(x, y) {
		var z, m, n, x$1, c, x$2, x$3;
		z = this;
		m = x.$length;
		n = y.$length;
		if (m < n) {
			return z.add(y, x);
		} else if (m === 0) {
			return z.make(0);
		} else if (n === 0) {
			return z.set(x);
		}
		z = z.make(m + 1 >> 0);
		c = addVV((x$1 = $subslice(z, 0, n), $subslice(new ($sliceType(Word))(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new ($sliceType(Word))(x.$array), x.$offset, x.$offset + x.$length), $subslice(new ($sliceType(Word))(y.$array), y.$offset, y.$offset + y.$length));
		if (m > n) {
			c = addVW((x$2 = $subslice(z, n, m), $subslice(new ($sliceType(Word))(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)), (x$3 = $subslice(x, n), $subslice(new ($sliceType(Word))(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), c);
		}
		(m < 0 || m >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + m] = c;
		return z.norm();
	};
	$ptrType(nat).prototype.add = function(x, y) { return this.$get().add(x, y); };
	nat.prototype.sub = function(x, y) {
		var z, m, n, x$1, c, x$2, x$3;
		z = this;
		m = x.$length;
		n = y.$length;
		if (m < n) {
			$panic(new $String("underflow"));
		} else if (m === 0) {
			return z.make(0);
		} else if (n === 0) {
			return z.set(x);
		}
		z = z.make(m);
		c = subVV((x$1 = $subslice(z, 0, n), $subslice(new ($sliceType(Word))(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new ($sliceType(Word))(x.$array), x.$offset, x.$offset + x.$length), $subslice(new ($sliceType(Word))(y.$array), y.$offset, y.$offset + y.$length));
		if (m > n) {
			c = subVW((x$2 = $subslice(z, n), $subslice(new ($sliceType(Word))(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)), (x$3 = $subslice(x, n), $subslice(new ($sliceType(Word))(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), c);
		}
		if (!((c === 0))) {
			$panic(new $String("underflow"));
		}
		return z.norm();
	};
	$ptrType(nat).prototype.sub = function(x, y) { return this.$get().sub(x, y); };
	nat.prototype.cmp = function(y) {
		var r = 0, x, m, n, i;
		x = this;
		m = x.$length;
		n = y.$length;
		if (!((m === n)) || (m === 0)) {
			if (m < n) {
				r = -1;
			} else if (m > n) {
				r = 1;
			}
			return r;
		}
		i = m - 1 >> 0;
		while (i > 0 && (((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]) === ((i < 0 || i >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i]))) {
			i = i - (1) >> 0;
		}
		if (((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]) < ((i < 0 || i >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i])) {
			r = -1;
		} else if (((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]) > ((i < 0 || i >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i])) {
			r = 1;
		}
		return r;
	};
	$ptrType(nat).prototype.cmp = function(y) { return this.$get().cmp(y); };
	nat.prototype.mulAddWW = function(x, y, r) {
		var z, m, x$1;
		z = this;
		m = x.$length;
		if ((m === 0) || (y === 0)) {
			return z.setWord(r);
		}
		z = z.make(m + 1 >> 0);
		(m < 0 || m >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + m] = mulAddVWW((x$1 = $subslice(z, 0, m), $subslice(new ($sliceType(Word))(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new ($sliceType(Word))(x.$array), x.$offset, x.$offset + x.$length), y, r);
		return z.norm();
	};
	$ptrType(nat).prototype.mulAddWW = function(x, y, r) { return this.$get().mulAddWW(x, y, r); };
	basicMul = function(z, x, y) {
		var _ref, _i, i, d, x$1, x$2;
		$subslice(z, 0, (x.$length + y.$length >> 0)).clear();
		_ref = y;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			d = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!((d === 0))) {
				(x$2 = x.$length + i >> 0, (x$2 < 0 || x$2 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + x$2] = addMulVVW((x$1 = $subslice(z, i, (i + x.$length >> 0)), $subslice(new ($sliceType(Word))(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new ($sliceType(Word))(x.$array), x.$offset, x.$offset + x.$length), d));
			}
			_i++;
		}
	};
	karatsubaAdd = function(z, x, n) {
		var x$1, c, x$2, x$3;
		c = addVV((x$1 = $subslice(z, 0, n), $subslice(new ($sliceType(Word))(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new ($sliceType(Word))(z.$array), z.$offset, z.$offset + z.$length), $subslice(new ($sliceType(Word))(x.$array), x.$offset, x.$offset + x.$length));
		if (!((c === 0))) {
			addVW((x$2 = $subslice(z, n, (n + (n >> 1 >> 0) >> 0)), $subslice(new ($sliceType(Word))(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)), (x$3 = $subslice(z, n), $subslice(new ($sliceType(Word))(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), c);
		}
	};
	karatsubaSub = function(z, x, n) {
		var x$1, c, x$2, x$3;
		c = subVV((x$1 = $subslice(z, 0, n), $subslice(new ($sliceType(Word))(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new ($sliceType(Word))(z.$array), z.$offset, z.$offset + z.$length), $subslice(new ($sliceType(Word))(x.$array), x.$offset, x.$offset + x.$length));
		if (!((c === 0))) {
			subVW((x$2 = $subslice(z, n, (n + (n >> 1 >> 0) >> 0)), $subslice(new ($sliceType(Word))(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)), (x$3 = $subslice(z, n), $subslice(new ($sliceType(Word))(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), c);
		}
	};
	karatsuba = function(z, x, y) {
		var n, n2, _tmp, _tmp$1, x1, x0, _tmp$2, _tmp$3, y1, y0, s, xd, yd, p, r;
		n = y.$length;
		if (!(((n & 1) === 0)) || n < karatsubaThreshold || n < 2) {
			basicMul(z, x, y);
			return;
		}
		n2 = n >> 1 >> 0;
		_tmp = $subslice(x, n2); _tmp$1 = $subslice(x, 0, n2); x1 = _tmp; x0 = _tmp$1;
		_tmp$2 = $subslice(y, n2); _tmp$3 = $subslice(y, 0, n2); y1 = _tmp$2; y0 = _tmp$3;
		karatsuba(z, x0, y0);
		karatsuba($subslice(z, n), x1, y1);
		s = 1;
		xd = $subslice(z, ((((2 >>> 16 << 16) * n >> 0) + (2 << 16 >>> 16) * n) >> 0), (((((2 >>> 16 << 16) * n >> 0) + (2 << 16 >>> 16) * n) >> 0) + n2 >> 0));
		if (!((subVV($subslice(new ($sliceType(Word))(xd.$array), xd.$offset, xd.$offset + xd.$length), $subslice(new ($sliceType(Word))(x1.$array), x1.$offset, x1.$offset + x1.$length), $subslice(new ($sliceType(Word))(x0.$array), x0.$offset, x0.$offset + x0.$length)) === 0))) {
			s = -s;
			subVV($subslice(new ($sliceType(Word))(xd.$array), xd.$offset, xd.$offset + xd.$length), $subslice(new ($sliceType(Word))(x0.$array), x0.$offset, x0.$offset + x0.$length), $subslice(new ($sliceType(Word))(x1.$array), x1.$offset, x1.$offset + x1.$length));
		}
		yd = $subslice(z, (((((2 >>> 16 << 16) * n >> 0) + (2 << 16 >>> 16) * n) >> 0) + n2 >> 0), ((((3 >>> 16 << 16) * n >> 0) + (3 << 16 >>> 16) * n) >> 0));
		if (!((subVV($subslice(new ($sliceType(Word))(yd.$array), yd.$offset, yd.$offset + yd.$length), $subslice(new ($sliceType(Word))(y0.$array), y0.$offset, y0.$offset + y0.$length), $subslice(new ($sliceType(Word))(y1.$array), y1.$offset, y1.$offset + y1.$length)) === 0))) {
			s = -s;
			subVV($subslice(new ($sliceType(Word))(yd.$array), yd.$offset, yd.$offset + yd.$length), $subslice(new ($sliceType(Word))(y1.$array), y1.$offset, y1.$offset + y1.$length), $subslice(new ($sliceType(Word))(y0.$array), y0.$offset, y0.$offset + y0.$length));
		}
		p = $subslice(z, ((((n >>> 16 << 16) * 3 >> 0) + (n << 16 >>> 16) * 3) >> 0));
		karatsuba(p, xd, yd);
		r = $subslice(z, ((((n >>> 16 << 16) * 4 >> 0) + (n << 16 >>> 16) * 4) >> 0));
		$copySlice(r, $subslice(z, 0, ((((n >>> 16 << 16) * 2 >> 0) + (n << 16 >>> 16) * 2) >> 0)));
		karatsubaAdd($subslice(z, n2), r, n);
		karatsubaAdd($subslice(z, n2), $subslice(r, n), n);
		if (s > 0) {
			karatsubaAdd($subslice(z, n2), p, n);
		} else {
			karatsubaSub($subslice(z, n2), p, n);
		}
	};
	alias = function(x, y) {
		var x$1, x$2, x$3, x$4;
		return x.$capacity > 0 && y.$capacity > 0 && $pointerIsEqual(new ($ptrType(Word))(function() { return (x$2 = x.$capacity - 1 >> 0, ((x$2 < 0 || x$2 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + x$2])); }, function($v) { (x$1 = x.$capacity - 1 >> 0, (x$1 < 0 || x$1 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + x$1] = $v); }, $subslice(x, 0, x.$capacity)), new ($ptrType(Word))(function() { return (x$4 = y.$capacity - 1 >> 0, ((x$4 < 0 || x$4 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + x$4])); }, function($v) { (x$3 = y.$capacity - 1 >> 0, (x$3 < 0 || x$3 >= this.$target.$length) ? $throwRuntimeError("index out of range") : this.$target.$array[this.$target.$offset + x$3] = $v); }, $subslice(y, 0, y.$capacity)));
	};
	addAt = function(z, x, i) {
		var n, x$1, x$2, c, j, x$3, x$4;
		n = x.$length;
		if (n > 0) {
			c = addVV((x$1 = $subslice(z, i, (i + n >> 0)), $subslice(new ($sliceType(Word))(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), (x$2 = $subslice(z, i), $subslice(new ($sliceType(Word))(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length)), $subslice(new ($sliceType(Word))(x.$array), x.$offset, x.$offset + x.$length));
			if (!((c === 0))) {
				j = i + n >> 0;
				if (j < z.$length) {
					addVW((x$3 = $subslice(z, j), $subslice(new ($sliceType(Word))(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)), (x$4 = $subslice(z, j), $subslice(new ($sliceType(Word))(x$4.$array), x$4.$offset, x$4.$offset + x$4.$length)), c);
				}
			}
		}
	};
	max = function(x, y) {
		if (x > y) {
			return x;
		}
		return y;
	};
	karatsubaLen = function(n) {
		var i, y;
		i = 0;
		while (n > karatsubaThreshold) {
			n = (n >> $min((1), 31)) >> 0;
			i = i + (1) >>> 0;
		}
		return (y = i, y < 32 ? (n << y) : 0) >> 0;
	};
	nat.prototype.mul = function(x, y) {
		var z, m, n, k, x0, y0, t, x0$1, y1, y0$1, i, xi;
		z = this;
		m = x.$length;
		n = y.$length;
		if (m < n) {
			return z.mul(y, x);
		} else if ((m === 0) || (n === 0)) {
			return z.make(0);
		} else if (n === 1) {
			return z.mulAddWW(x, ((0 < 0 || 0 >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + 0]), 0);
		}
		if (alias(z, x) || alias(z, y)) {
			z = nat.nil;
		}
		if (n < karatsubaThreshold) {
			z = z.make(m + n >> 0);
			basicMul(z, x, y);
			return z.norm();
		}
		k = karatsubaLen(n);
		x0 = $subslice(x, 0, k);
		y0 = $subslice(y, 0, k);
		z = z.make(max((((6 >>> 16 << 16) * k >> 0) + (6 << 16 >>> 16) * k) >> 0, m + n >> 0));
		karatsuba(z, x0, y0);
		z = $subslice(z, 0, (m + n >> 0));
		$subslice(z, ((((2 >>> 16 << 16) * k >> 0) + (2 << 16 >>> 16) * k) >> 0)).clear();
		if (k < n || !((m === n))) {
			t = nat.nil;
			x0$1 = x0.norm();
			y1 = $subslice(y, k);
			t = t.mul(x0$1, y1);
			addAt(z, t, k);
			y0$1 = y0.norm();
			i = k;
			while (i < x.$length) {
				xi = $subslice(x, i);
				if (xi.$length > k) {
					xi = $subslice(xi, 0, k);
				}
				xi = xi.norm();
				t = t.mul(xi, y0$1);
				addAt(z, t, i);
				t = t.mul(xi, y1);
				addAt(z, t, i + k >> 0);
				i = i + (k) >> 0;
			}
		}
		return z.norm();
	};
	$ptrType(nat).prototype.mul = function(x, y) { return this.$get().mul(x, y); };
	nat.prototype.mulRange = function(a, b) {
		var z, x, m;
		z = this;
		if ((a.$high === 0 && a.$low === 0)) {
			return z.setUint64(new $Uint64(0, 0));
		} else if ((a.$high > b.$high || (a.$high === b.$high && a.$low > b.$low))) {
			return z.setUint64(new $Uint64(0, 1));
		} else if ((a.$high === b.$high && a.$low === b.$low)) {
			return z.setUint64(a);
		} else if ((x = new $Uint64(a.$high + 0, a.$low + 1), (x.$high === b.$high && x.$low === b.$low))) {
			return z.mul(nat.nil.setUint64(a), nat.nil.setUint64(b));
		}
		m = $div64((new $Uint64(a.$high + b.$high, a.$low + b.$low)), new $Uint64(0, 2), false);
		return z.mul(nat.nil.mulRange(a, m), nat.nil.mulRange(new $Uint64(m.$high + 0, m.$low + 1), b));
	};
	$ptrType(nat).prototype.mulRange = function(a, b) { return this.$get().mulRange(a, b); };
	nat.prototype.divW = function(x, y) {
		var q = nat.nil, r = 0, z, m;
		z = this;
		m = x.$length;
		if (y === 0) {
			$panic(new $String("division by zero"));
		} else if (y === 1) {
			q = z.set(x);
			return [q, r];
		} else if (m === 0) {
			q = z.make(0);
			return [q, r];
		}
		z = z.make(m);
		r = divWVW($subslice(new ($sliceType(Word))(z.$array), z.$offset, z.$offset + z.$length), 0, $subslice(new ($sliceType(Word))(x.$array), x.$offset, x.$offset + x.$length), y);
		q = z.norm();
		return [q, r];
	};
	$ptrType(nat).prototype.divW = function(x, y) { return this.$get().divW(x, y); };
	nat.prototype.div = function(z2, u, v) {
		var q = nat.nil, r = nat.nil, z, r2, _tuple, _tuple$1;
		z = this;
		if (v.$length === 0) {
			$panic(new $String("division by zero"));
		}
		if (u.cmp(v) < 0) {
			q = z.make(0);
			r = z2.set(u);
			return [q, r];
		}
		if (v.$length === 1) {
			r2 = 0;
			_tuple = z.divW(u, ((0 < 0 || 0 >= v.$length) ? $throwRuntimeError("index out of range") : v.$array[v.$offset + 0])); q = _tuple[0]; r2 = _tuple[1];
			r = z2.setWord(r2);
			return [q, r];
		}
		_tuple$1 = z.divLarge(z2, u, v); q = _tuple$1[0]; r = _tuple$1[1];
		return [q, r];
	};
	$ptrType(nat).prototype.div = function(z2, u, v) { return this.$get().div(z2, u, v); };
	nat.prototype.divLarge = function(u, uIn, v) {
		var q = nat.nil, r = nat.nil, z, n, m, qhatv, x, shift, v1, x$1, x$2, j, qhat, x$3, x$4, rhat, _tuple, x$5, x$6, x$7, _tuple$1, x$8, x1, x2, x$9, prevRhat, x$10, _tuple$2, x$11, x$12, x$13, x$14, c, x$15, x$16, c$1, _lhs, _index, _tmp, _tmp$1;
		z = this;
		n = v.$length;
		m = uIn.$length - n >> 0;
		if (alias(z, uIn) || alias(z, v)) {
			z = nat.nil;
		}
		q = z.make(m + 1 >> 0);
		qhatv = nat.make((n + 1 >> 0));
		if (alias(u, uIn) || alias(u, v)) {
			u = nat.nil;
		}
		u = u.make(uIn.$length + 1 >> 0);
		u.clear();
		shift = leadingZeros((x = n - 1 >> 0, ((x < 0 || x >= v.$length) ? $throwRuntimeError("index out of range") : v.$array[v.$offset + x])));
		if (shift > 0) {
			v1 = nat.make(n);
			shlVU($subslice(new ($sliceType(Word))(v1.$array), v1.$offset, v1.$offset + v1.$length), $subslice(new ($sliceType(Word))(v.$array), v.$offset, v.$offset + v.$length), shift);
			v = v1;
		}
		(x$2 = uIn.$length, (x$2 < 0 || x$2 >= u.$length) ? $throwRuntimeError("index out of range") : u.$array[u.$offset + x$2] = shlVU((x$1 = $subslice(u, 0, uIn.$length), $subslice(new ($sliceType(Word))(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new ($sliceType(Word))(uIn.$array), uIn.$offset, uIn.$offset + uIn.$length), shift));
		j = m;
		while (j >= 0) {
			qhat = 4294967295;
			if (!(((x$3 = j + n >> 0, ((x$3 < 0 || x$3 >= u.$length) ? $throwRuntimeError("index out of range") : u.$array[u.$offset + x$3])) === (x$4 = n - 1 >> 0, ((x$4 < 0 || x$4 >= v.$length) ? $throwRuntimeError("index out of range") : v.$array[v.$offset + x$4]))))) {
				rhat = 0;
				_tuple = divWW((x$5 = j + n >> 0, ((x$5 < 0 || x$5 >= u.$length) ? $throwRuntimeError("index out of range") : u.$array[u.$offset + x$5])), (x$6 = (j + n >> 0) - 1 >> 0, ((x$6 < 0 || x$6 >= u.$length) ? $throwRuntimeError("index out of range") : u.$array[u.$offset + x$6])), (x$7 = n - 1 >> 0, ((x$7 < 0 || x$7 >= v.$length) ? $throwRuntimeError("index out of range") : v.$array[v.$offset + x$7]))); qhat = _tuple[0]; rhat = _tuple[1];
				_tuple$1 = mulWW(qhat, (x$8 = n - 2 >> 0, ((x$8 < 0 || x$8 >= v.$length) ? $throwRuntimeError("index out of range") : v.$array[v.$offset + x$8]))); x1 = _tuple$1[0]; x2 = _tuple$1[1];
				while (greaterThan(x1, x2, rhat, (x$9 = (j + n >> 0) - 2 >> 0, ((x$9 < 0 || x$9 >= u.$length) ? $throwRuntimeError("index out of range") : u.$array[u.$offset + x$9])))) {
					qhat = qhat - (1) >>> 0;
					prevRhat = rhat;
					rhat = rhat + ((x$10 = n - 1 >> 0, ((x$10 < 0 || x$10 >= v.$length) ? $throwRuntimeError("index out of range") : v.$array[v.$offset + x$10]))) >>> 0;
					if (rhat < prevRhat) {
						break;
					}
					_tuple$2 = mulWW(qhat, (x$11 = n - 2 >> 0, ((x$11 < 0 || x$11 >= v.$length) ? $throwRuntimeError("index out of range") : v.$array[v.$offset + x$11]))); x1 = _tuple$2[0]; x2 = _tuple$2[1];
				}
			}
			(n < 0 || n >= qhatv.$length) ? $throwRuntimeError("index out of range") : qhatv.$array[qhatv.$offset + n] = mulAddVWW((x$12 = $subslice(qhatv, 0, n), $subslice(new ($sliceType(Word))(x$12.$array), x$12.$offset, x$12.$offset + x$12.$length)), $subslice(new ($sliceType(Word))(v.$array), v.$offset, v.$offset + v.$length), qhat, 0);
			c = subVV((x$13 = $subslice(u, j, (j + qhatv.$length >> 0)), $subslice(new ($sliceType(Word))(x$13.$array), x$13.$offset, x$13.$offset + x$13.$length)), (x$14 = $subslice(u, j), $subslice(new ($sliceType(Word))(x$14.$array), x$14.$offset, x$14.$offset + x$14.$length)), $subslice(new ($sliceType(Word))(qhatv.$array), qhatv.$offset, qhatv.$offset + qhatv.$length));
			if (!((c === 0))) {
				c$1 = addVV((x$15 = $subslice(u, j, (j + n >> 0)), $subslice(new ($sliceType(Word))(x$15.$array), x$15.$offset, x$15.$offset + x$15.$length)), (x$16 = $subslice(u, j), $subslice(new ($sliceType(Word))(x$16.$array), x$16.$offset, x$16.$offset + x$16.$length)), $subslice(new ($sliceType(Word))(v.$array), v.$offset, v.$offset + v.$length));
				_lhs = u; _index = j + n >> 0; (_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index] = ((_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index]) + (c$1) >>> 0;
				qhat = qhat - (1) >>> 0;
			}
			(j < 0 || j >= q.$length) ? $throwRuntimeError("index out of range") : q.$array[q.$offset + j] = qhat;
			j = j - (1) >> 0;
		}
		q = q.norm();
		shrVU($subslice(new ($sliceType(Word))(u.$array), u.$offset, u.$offset + u.$length), $subslice(new ($sliceType(Word))(u.$array), u.$offset, u.$offset + u.$length), shift);
		r = u.norm();
		_tmp = q; _tmp$1 = r; q = _tmp; r = _tmp$1;
		return [q, r];
	};
	$ptrType(nat).prototype.divLarge = function(u, uIn, v) { return this.$get().divLarge(u, uIn, v); };
	nat.prototype.bitLen = function() {
		var x, i;
		x = this;
		i = x.$length - 1 >> 0;
		if (i >= 0) {
			return ((((i >>> 16 << 16) * 32 >> 0) + (i << 16 >>> 16) * 32) >> 0) + bitLen(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])) >> 0;
		}
		return 0;
	};
	$ptrType(nat).prototype.bitLen = function() { return this.$get().bitLen(); };
	hexValue = function(ch) {
		var d;
		d = 37;
		if (48 <= ch && ch <= 57) {
			d = ((ch - 48 >> 0) >> 0);
		} else if (97 <= ch && ch <= 122) {
			d = (((ch - 97 >> 0) + 10 >> 0) >> 0);
		} else if (65 <= ch && ch <= 90) {
			d = (((ch - 65 >> 0) + 10 >> 0) >> 0);
		}
		return (d >>> 0);
	};
	nat.prototype.scan = function(r, base) {
		var z, _tuple, ch, err, b, _tuple$1, _ref, _ref$1, _tuple$2, bb, dd, _q, max$1, d, x, _tuple$3;
		z = this;
		if (base < 0 || (base === 1) || 36 < base) {
			return [z, 0, errors.New("illegal number base")];
		}
		_tuple = r.ReadRune(); ch = _tuple[0]; err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [z, 0, err];
		}
		b = (base >>> 0);
		if (base === 0) {
			b = 10;
			if (ch === 48) {
				_tuple$1 = r.ReadRune(); ch = _tuple$1[0]; err = _tuple$1[2];
				_ref = err;
				if ($interfaceIsEqual(_ref, $ifaceNil)) {
					b = 8;
					_ref$1 = ch;
					if (_ref$1 === 120 || _ref$1 === 88) {
						b = 16;
					} else if (_ref$1 === 98 || _ref$1 === 66) {
						b = 2;
					}
					if ((b === 2) || (b === 16)) {
						_tuple$2 = r.ReadRune(); ch = _tuple$2[0]; err = _tuple$2[2];
						if (!($interfaceIsEqual(err, $ifaceNil))) {
							return [z, 0, err];
						}
					}
				} else if ($interfaceIsEqual(_ref, io.EOF)) {
					return [z.make(0), 10, $ifaceNil];
				} else {
					return [z, 10, err];
				}
			}
		}
		z = z.make(0);
		bb = 1;
		dd = 0;
		max$1 = (_q = 4294967295 / b, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
		while (true) {
			d = hexValue(ch);
			if (d >= b) {
				r.UnreadRune();
				break;
			}
			if (bb <= max$1) {
				bb = (x = b, (((bb >>> 16 << 16) * x >>> 0) + (bb << 16 >>> 16) * x) >>> 0);
				dd = ((((dd >>> 16 << 16) * b >>> 0) + (dd << 16 >>> 16) * b) >>> 0) + d >>> 0;
			} else {
				z = z.mulAddWW(z, bb, dd);
				bb = b;
				dd = d;
			}
			_tuple$3 = r.ReadRune(); ch = _tuple$3[0]; err = _tuple$3[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if (!($interfaceIsEqual(err, io.EOF))) {
					return [z, (b >> 0), err];
				}
				break;
			}
		}
		if (bb > 1) {
			z = z.mulAddWW(z, bb, dd);
		} else if ((base === 0) && (b === 8)) {
			return [z, 10, $ifaceNil];
		} else if (!((base === 0)) || !((b === 8))) {
			return [z, (b >> 0), errors.New("syntax error scanning number")];
		}
		return [z.norm(), (b >> 0), $ifaceNil];
	};
	$ptrType(nat).prototype.scan = function(r, base) { return this.$get().scan(r, base); };
	nat.prototype.decimalString = function() {
		var x;
		x = this;
		return x.string("0123456789abcdefghijklmnopqrstuvwxyz".substring(0, 10));
	};
	$ptrType(nat).prototype.decimalString = function() { return this.$get().decimalString(); };
	nat.prototype.string = function(charset$1) {
		var x, b, i, s, shift, y, mask, w, nbits, k, y$1, y$2, y$3, y$4, bb, ndigits, _q, max$1, x$1, table, q, zero;
		x = this;
		b = (charset$1.length >>> 0);
		if (b < 2 || false) {
			$panic(new $String("illegal base"));
		} else if (x.$length === 0) {
			return $encodeRune(charset$1.charCodeAt(0));
		}
		i = (x.bitLen() / math.Log2(b) >> 0) + 1 >> 0;
		s = ($sliceType($Uint8)).make(i);
		if (b === ((b & (-b >>> 0)) >>> 0)) {
			shift = trailingZeroBits(b);
			mask = ((y = shift, y < 32 ? (1 << y) : 0) >>> 0) - 1 >>> 0;
			w = ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]);
			nbits = 32;
			k = 1;
			while (k < x.$length) {
				while (nbits >= shift) {
					i = i - (1) >> 0;
					(i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i] = charset$1.charCodeAt(((w & mask) >>> 0));
					w = (y$1 = (shift), y$1 < 32 ? (w >>> y$1) : 0) >>> 0;
					nbits = nbits - (shift) >>> 0;
				}
				if (nbits === 0) {
					w = ((k < 0 || k >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + k]);
					nbits = 32;
				} else {
					w = (w | (((y$2 = nbits, y$2 < 32 ? (((k < 0 || k >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + k]) << y$2) : 0) >>> 0))) >>> 0;
					i = i - (1) >> 0;
					(i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i] = charset$1.charCodeAt(((w & mask) >>> 0));
					w = (y$3 = ((shift - nbits >>> 0)), y$3 < 32 ? (((k < 0 || k >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + k]) >>> y$3) : 0) >>> 0;
					nbits = 32 - ((shift - nbits >>> 0)) >>> 0;
				}
				k = k + (1) >> 0;
			}
			while (nbits >= 0 && !((w === 0))) {
				i = i - (1) >> 0;
				(i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i] = charset$1.charCodeAt(((w & mask) >>> 0));
				w = (y$4 = (shift), y$4 < 32 ? (w >>> y$4) : 0) >>> 0;
				nbits = nbits - (shift) >>> 0;
			}
		} else {
			bb = b;
			ndigits = 1;
			max$1 = (_q = 4294967295 / b, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			while (bb <= max$1) {
				ndigits = ndigits + (1) >> 0;
				bb = (x$1 = b, (((bb >>> 16 << 16) * x$1 >>> 0) + (bb << 16 >>> 16) * x$1) >>> 0);
			}
			table = divisors(x.$length, b, ndigits, bb);
			q = nat.nil.set(x);
			q.convertWords(s, charset$1, b, ndigits, bb, table);
			i = 0;
			zero = charset$1.charCodeAt(0);
			while (((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) === zero) {
				i = i + (1) >> 0;
			}
		}
		return $bytesToString($subslice(s, i));
	};
	$ptrType(nat).prototype.string = function(charset$1) { return this.$get().string(charset$1); };
	nat.prototype.convertWords = function(s, charset$1, b, ndigits, bb, table) {
		var q, r, index, maxLength, minLength, x, _tuple, h, i, r$1, _tuple$1, j, _q, t, _tuple$2, j$1, _r, _q$1, zero;
		q = this;
		if (!(table === ($sliceType(divisor)).nil)) {
			r = nat.nil;
			index = table.$length - 1 >> 0;
			while (q.$length > leafSize) {
				maxLength = q.bitLen();
				minLength = maxLength >> 1 >> 0;
				while (index > 0 && (x = index - 1 >> 0, ((x < 0 || x >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + x])).nbits > minLength) {
					index = index - (1) >> 0;
				}
				if (((index < 0 || index >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + index]).nbits >= maxLength && ((index < 0 || index >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + index]).bbb.cmp(q) >= 0) {
					index = index - (1) >> 0;
					if (index < 0) {
						$panic(new $String("internal inconsistency"));
					}
				}
				_tuple = q.div(r, q, ((index < 0 || index >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + index]).bbb); q = _tuple[0]; r = _tuple[1];
				h = s.$length - ((index < 0 || index >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + index]).ndigits >> 0;
				r.convertWords($subslice(s, h), charset$1, b, ndigits, bb, $subslice(table, 0, index));
				s = $subslice(s, 0, h);
			}
		}
		i = s.$length;
		r$1 = 0;
		if (b === 10) {
			while (q.$length > 0) {
				_tuple$1 = q.divW(q, bb); q = _tuple$1[0]; r$1 = _tuple$1[1];
				j = 0;
				while (j < ndigits && i > 0) {
					i = i - (1) >> 0;
					t = (_q = r$1 / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
					(i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i] = charset$1.charCodeAt((((r$1 - (t << 3 >>> 0) >>> 0) - t >>> 0) - t >>> 0));
					r$1 = t;
					j = j + (1) >> 0;
				}
			}
		} else {
			while (q.$length > 0) {
				_tuple$2 = q.divW(q, bb); q = _tuple$2[0]; r$1 = _tuple$2[1];
				j$1 = 0;
				while (j$1 < ndigits && i > 0) {
					i = i - (1) >> 0;
					(i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i] = charset$1.charCodeAt((_r = r$1 % b, _r === _r ? _r : $throwRuntimeError("integer divide by zero")));
					r$1 = (_q$1 = r$1 / (b), (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >>> 0 : $throwRuntimeError("integer divide by zero"));
					j$1 = j$1 + (1) >> 0;
				}
			}
		}
		zero = charset$1.charCodeAt(0);
		while (i > 0) {
			i = i - (1) >> 0;
			(i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i] = zero;
		}
	};
	$ptrType(nat).prototype.convertWords = function(s, charset$1, b, ndigits, bb, table) { return this.$get().convertWords(s, charset$1, b, ndigits, bb, table); };
	nat.prototype.expWW = function(x, y) {
		var z;
		z = this;
		return z.expNN(nat.nil.setWord(x), nat.nil.setWord(y), nat.nil);
	};
	$ptrType(nat).prototype.expWW = function(x, y) { return this.$get().expWW(x, y); };
	divisors = function(m, b, ndigits, bb) {
		var k, words, y, table, x, larger, i, x$1, x$2, x$3, x$4;
		if ((leafSize === 0) || m <= leafSize) {
			return ($sliceType(divisor)).nil;
		}
		k = 1;
		words = leafSize;
		while (words < (m >> 1 >> 0) && k < 64) {
			k = k + (1) >> 0;
			words = (y = (1), y < 32 ? (words << y) : 0) >> 0;
		}
		table = ($sliceType(divisor)).nil;
		if (b === 10) {
			cacheBase10.Mutex.Lock();
			table = $subslice(new ($sliceType(divisor))(cacheBase10.table), 0, k);
		} else {
			table = ($sliceType(divisor)).make(k);
		}
		if ((x = k - 1 >> 0, ((x < 0 || x >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + x])).ndigits === 0) {
			larger = nat.nil;
			i = 0;
			while (i < k) {
				if (((i < 0 || i >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + i]).ndigits === 0) {
					if (i === 0) {
						((0 < 0 || 0 >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + 0]).bbb = nat.nil.expWW(bb, (leafSize >>> 0));
						((0 < 0 || 0 >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + 0]).ndigits = (((ndigits >>> 16 << 16) * leafSize >> 0) + (ndigits << 16 >>> 16) * leafSize) >> 0;
					} else {
						((i < 0 || i >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + i]).bbb = nat.nil.mul((x$1 = i - 1 >> 0, ((x$1 < 0 || x$1 >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + x$1])).bbb, (x$2 = i - 1 >> 0, ((x$2 < 0 || x$2 >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + x$2])).bbb);
						((i < 0 || i >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + i]).ndigits = (x$3 = (x$4 = i - 1 >> 0, ((x$4 < 0 || x$4 >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + x$4])).ndigits, (((2 >>> 16 << 16) * x$3 >> 0) + (2 << 16 >>> 16) * x$3) >> 0);
					}
					larger = nat.nil.set(((i < 0 || i >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + i]).bbb);
					while (mulAddVWW($subslice(new ($sliceType(Word))(larger.$array), larger.$offset, larger.$offset + larger.$length), $subslice(new ($sliceType(Word))(larger.$array), larger.$offset, larger.$offset + larger.$length), b, 0) === 0) {
						((i < 0 || i >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + i]).bbb = ((i < 0 || i >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + i]).bbb.set(larger);
						((i < 0 || i >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + i]).ndigits = ((i < 0 || i >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + i]).ndigits + (1) >> 0;
					}
					((i < 0 || i >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + i]).nbits = ((i < 0 || i >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + i]).bbb.bitLen();
				}
				i = i + (1) >> 0;
			}
		}
		if (b === 10) {
			cacheBase10.Mutex.Unlock();
		}
		return table;
	};
	trailingZeroBits = function(x) {
		var _ref, x$1, x$2, x$3, x$4;
		_ref = 32;
		if (_ref === 32) {
			return ((x$1 = ((x$2 = ((x & (-x >>> 0)) >>> 0), (((x$2 >>> 16 << 16) * 125613361 >>> 0) + (x$2 << 16 >>> 16) * 125613361) >>> 0)) >>> 27 >>> 0, ((x$1 < 0 || x$1 >= deBruijn32Lookup.$length) ? $throwRuntimeError("index out of range") : deBruijn32Lookup.$array[deBruijn32Lookup.$offset + x$1])) >>> 0);
		} else if (_ref === 64) {
			return ((x$3 = ((x$4 = ((x & (-x >>> 0)) >>> 0), (((x$4 >>> 16 << 16) * 3033172745 >>> 0) + (x$4 << 16 >>> 16) * 3033172745) >>> 0)) >>> 58 >>> 0, ((x$3 < 0 || x$3 >= deBruijn64Lookup.$length) ? $throwRuntimeError("index out of range") : deBruijn64Lookup.$array[deBruijn64Lookup.$offset + x$3])) >>> 0);
		} else {
			$panic(new $String("unknown word size"));
		}
	};
	nat.prototype.trailingZeroBits = function() {
		var x, i;
		x = this;
		if (x.$length === 0) {
			return 0;
		}
		i = 0;
		while (((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]) === 0) {
			i = i + (1) >>> 0;
		}
		return ((((i >>> 16 << 16) * 32 >>> 0) + (i << 16 >>> 16) * 32) >>> 0) + trailingZeroBits(((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])) >>> 0;
	};
	$ptrType(nat).prototype.trailingZeroBits = function() { return this.$get().trailingZeroBits(); };
	nat.prototype.shl = function(x, s) {
		var z, m, _q, n, x$1, _r;
		z = this;
		m = x.$length;
		if (m === 0) {
			return z.make(0);
		}
		n = m + ((_q = s / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0) >> 0;
		z = z.make(n + 1 >> 0);
		(n < 0 || n >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + n] = shlVU((x$1 = $subslice(z, (n - m >> 0), n), $subslice(new ($sliceType(Word))(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), $subslice(new ($sliceType(Word))(x.$array), x.$offset, x.$offset + x.$length), (_r = s % 32, _r === _r ? _r : $throwRuntimeError("integer divide by zero")));
		$subslice(z, 0, (n - m >> 0)).clear();
		return z.norm();
	};
	$ptrType(nat).prototype.shl = function(x, s) { return this.$get().shl(x, s); };
	nat.prototype.shr = function(x, s) {
		var z, m, _q, n, x$1, _r;
		z = this;
		m = x.$length;
		n = m - ((_q = s / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0) >> 0;
		if (n <= 0) {
			return z.make(0);
		}
		z = z.make(n);
		shrVU($subslice(new ($sliceType(Word))(z.$array), z.$offset, z.$offset + z.$length), (x$1 = $subslice(x, (m - n >> 0)), $subslice(new ($sliceType(Word))(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)), (_r = s % 32, _r === _r ? _r : $throwRuntimeError("integer divide by zero")));
		return z.norm();
	};
	$ptrType(nat).prototype.shr = function(x, s) { return this.$get().shr(x, s); };
	nat.prototype.setBit = function(x, i, b) {
		var z, _q, j, y, _r, m, n, _ref, _lhs, _index, _lhs$1, _index$1;
		z = this;
		j = ((_q = i / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
		m = (y = ((_r = i % 32, _r === _r ? _r : $throwRuntimeError("integer divide by zero"))), y < 32 ? (1 << y) : 0) >>> 0;
		n = x.$length;
		_ref = b;
		if (_ref === 0) {
			z = z.make(n);
			$copySlice(z, x);
			if (j >= n) {
				return z;
			}
			_lhs = z; _index = j; (_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index] = ((_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index]) & ~(m);
			return z.norm();
		} else if (_ref === 1) {
			if (j >= n) {
				z = z.make(j + 1 >> 0);
				$subslice(z, n).clear();
			} else {
				z = z.make(n);
			}
			$copySlice(z, x);
			_lhs$1 = z; _index$1 = j; (_index$1 < 0 || _index$1 >= _lhs$1.$length) ? $throwRuntimeError("index out of range") : _lhs$1.$array[_lhs$1.$offset + _index$1] = (((_index$1 < 0 || _index$1 >= _lhs$1.$length) ? $throwRuntimeError("index out of range") : _lhs$1.$array[_lhs$1.$offset + _index$1]) | (m)) >>> 0;
			return z;
		}
		$panic(new $String("set bit is not 0 or 1"));
	};
	$ptrType(nat).prototype.setBit = function(x, i, b) { return this.$get().setBit(x, i, b); };
	nat.prototype.bit = function(i) {
		var z, _q, j, y, _r;
		z = this;
		j = ((_q = i / 32, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero")) >> 0);
		if (j >= z.$length) {
			return 0;
		}
		return (((((y = ((_r = i % 32, _r === _r ? _r : $throwRuntimeError("integer divide by zero"))), y < 32 ? (((j < 0 || j >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + j]) >>> y) : 0) >>> 0) & 1) >>> 0) >>> 0);
	};
	$ptrType(nat).prototype.bit = function(i) { return this.$get().bit(i); };
	nat.prototype.and = function(x, y) {
		var z, m, n, i;
		z = this;
		m = x.$length;
		n = y.$length;
		if (m > n) {
			m = n;
		}
		z = z.make(m);
		i = 0;
		while (i < m) {
			(i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = (((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]) & ((i < 0 || i >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i])) >>> 0;
			i = i + (1) >> 0;
		}
		return z.norm();
	};
	$ptrType(nat).prototype.and = function(x, y) { return this.$get().and(x, y); };
	nat.prototype.andNot = function(x, y) {
		var z, m, n, i;
		z = this;
		m = x.$length;
		n = y.$length;
		if (n > m) {
			n = m;
		}
		z = z.make(m);
		i = 0;
		while (i < n) {
			(i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]) & ~((i < 0 || i >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i]);
			i = i + (1) >> 0;
		}
		$copySlice($subslice(z, n, m), $subslice(x, n, m));
		return z.norm();
	};
	$ptrType(nat).prototype.andNot = function(x, y) { return this.$get().andNot(x, y); };
	nat.prototype.or = function(x, y) {
		var z, m, n, s, _tmp, _tmp$1, i;
		z = this;
		m = x.$length;
		n = y.$length;
		s = x;
		if (m < n) {
			_tmp = m; _tmp$1 = n; n = _tmp; m = _tmp$1;
			s = y;
		}
		z = z.make(m);
		i = 0;
		while (i < n) {
			(i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = (((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]) | ((i < 0 || i >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i])) >>> 0;
			i = i + (1) >> 0;
		}
		$copySlice($subslice(z, n, m), $subslice(s, n, m));
		return z.norm();
	};
	$ptrType(nat).prototype.or = function(x, y) { return this.$get().or(x, y); };
	nat.prototype.xor = function(x, y) {
		var z, m, n, s, _tmp, _tmp$1, i;
		z = this;
		m = x.$length;
		n = y.$length;
		s = x;
		if (m < n) {
			_tmp = m; _tmp$1 = n; n = _tmp; m = _tmp$1;
			s = y;
		}
		z = z.make(m);
		i = 0;
		while (i < n) {
			(i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = (((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]) ^ ((i < 0 || i >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i])) >>> 0;
			i = i + (1) >> 0;
		}
		$copySlice($subslice(z, n, m), $subslice(s, n, m));
		return z.norm();
	};
	$ptrType(nat).prototype.xor = function(x, y) { return this.$get().xor(x, y); };
	greaterThan = function(x1, x2, y1, y2) {
		return x1 > y1 || (x1 === y1) && x2 > y2;
	};
	nat.prototype.modW = function(d) {
		var r = 0, x, q;
		x = this;
		q = nat.nil;
		q = q.make(x.$length);
		r = divWVW($subslice(new ($sliceType(Word))(q.$array), q.$offset, q.$offset + q.$length), 0, $subslice(new ($sliceType(Word))(x.$array), x.$offset, x.$offset + x.$length), d);
		return r;
	};
	$ptrType(nat).prototype.modW = function(d) { return this.$get().modW(d); };
	nat.prototype.random = function(rand$1, limit, n) {
		var z, _r, bitLengthOfMSW, y, mask, _ref, _ref$1, _i, i, _ref$2, _i$1, i$1, _lhs, _index;
		z = this;
		if (alias(z, limit)) {
			z = nat.nil;
		}
		z = z.make(limit.$length);
		bitLengthOfMSW = ((_r = n % 32, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >>> 0);
		if (bitLengthOfMSW === 0) {
			bitLengthOfMSW = 32;
		}
		mask = ((((y = bitLengthOfMSW, y < 32 ? (1 << y) : 0) >>> 0)) - 1 >>> 0);
		while (true) {
			_ref = 32;
			if (_ref === 32) {
				_ref$1 = z;
				_i = 0;
				while (_i < _ref$1.$length) {
					i = _i;
					(i < 0 || i >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i] = (rand$1.Uint32() >>> 0);
					_i++;
				}
			} else if (_ref === 64) {
				_ref$2 = z;
				_i$1 = 0;
				while (_i$1 < _ref$2.$length) {
					i$1 = _i$1;
					(i$1 < 0 || i$1 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + i$1] = ((rand$1.Uint32() >>> 0) | ((rand$1.Uint32() >>> 0) << 32 >>> 0)) >>> 0;
					_i$1++;
				}
			} else {
				$panic(new $String("unknown word size"));
			}
			_lhs = z; _index = limit.$length - 1 >> 0; (_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index] = (((_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index]) & (mask)) >>> 0;
			if (z.cmp(limit) < 0) {
				break;
			}
		}
		return z.norm();
	};
	$ptrType(nat).prototype.random = function(rand$1, limit, n) { return this.$get().random(rand$1, limit, n); };
	nat.prototype.expNN = function(x, y, m) {
		var z, x$1, v, shift, y$1, q, w, _tmp, _tmp$1, zz, r, j, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _tmp$6, _tmp$7, _tmp$8, _tmp$9, y$2, i, j$1, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tuple$1, _tmp$14, _tmp$15, _tmp$16, _tmp$17, y$3;
		z = this;
		if (alias(z, x) || alias(z, y)) {
			z = nat.nil;
		}
		if ((m.$length === 1) && (((0 < 0 || 0 >= m.$length) ? $throwRuntimeError("index out of range") : m.$array[m.$offset + 0]) === 1)) {
			return z.setWord(0);
		}
		if (y.$length === 0) {
			return z.setWord(1);
		}
		if (!((m.$length === 0))) {
			z = z.make(m.$length);
		}
		z = z.set(x);
		if (x.$length > 1 && y.$length > 1 && m.$length > 0) {
			return z.expNNWindowed(x, y, m);
		}
		v = (x$1 = y.$length - 1 >> 0, ((x$1 < 0 || x$1 >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + x$1]));
		shift = leadingZeros(v) + 1 >>> 0;
		v = (y$1 = (shift), y$1 < 32 ? (v << y$1) : 0) >>> 0;
		q = nat.nil;
		w = 32 - (shift >> 0) >> 0;
		_tmp = nat.nil; _tmp$1 = nat.nil; zz = _tmp; r = _tmp$1;
		j = 0;
		while (j < w) {
			zz = zz.mul(z, z);
			_tmp$2 = z; _tmp$3 = zz; zz = _tmp$2; z = _tmp$3;
			if (!((((v & 2147483648) >>> 0) === 0))) {
				zz = zz.mul(z, x);
				_tmp$4 = z; _tmp$5 = zz; zz = _tmp$4; z = _tmp$5;
			}
			if (!((m.$length === 0))) {
				_tuple = zz.div(r, z, m); zz = _tuple[0]; r = _tuple[1];
				_tmp$6 = q; _tmp$7 = z; _tmp$8 = zz; _tmp$9 = r; zz = _tmp$6; r = _tmp$7; q = _tmp$8; z = _tmp$9;
			}
			v = (y$2 = (1), y$2 < 32 ? (v << y$2) : 0) >>> 0;
			j = j + (1) >> 0;
		}
		i = y.$length - 2 >> 0;
		while (i >= 0) {
			v = ((i < 0 || i >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i]);
			j$1 = 0;
			while (j$1 < 32) {
				zz = zz.mul(z, z);
				_tmp$10 = z; _tmp$11 = zz; zz = _tmp$10; z = _tmp$11;
				if (!((((v & 2147483648) >>> 0) === 0))) {
					zz = zz.mul(z, x);
					_tmp$12 = z; _tmp$13 = zz; zz = _tmp$12; z = _tmp$13;
				}
				if (!((m.$length === 0))) {
					_tuple$1 = zz.div(r, z, m); zz = _tuple$1[0]; r = _tuple$1[1];
					_tmp$14 = q; _tmp$15 = z; _tmp$16 = zz; _tmp$17 = r; zz = _tmp$14; r = _tmp$15; q = _tmp$16; z = _tmp$17;
				}
				v = (y$3 = (1), y$3 < 32 ? (v << y$3) : 0) >>> 0;
				j$1 = j$1 + (1) >> 0;
			}
			i = i - (1) >> 0;
		}
		return z.norm();
	};
	$ptrType(nat).prototype.expNN = function(x, y, m) { return this.$get().expNN(x, y, m); };
	nat.prototype.expNNWindowed = function(x, y, m) {
		var z, _tmp, _tmp$1, zz, r, powers, i, _tmp$2, x$1, _q, x$2, _q$1, _tmp$3, _tmp$4, x$3, x$4, p2, p, p1, _tuple, _tmp$5, _tmp$6, _tuple$1, _tmp$7, _tmp$8, i$1, yi, j, _tmp$9, _tmp$10, _tuple$2, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tuple$3, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tuple$4, _tmp$19, _tmp$20, _tmp$21, _tmp$22, _tuple$5, _tmp$23, _tmp$24, x$5, _tmp$25, _tmp$26, _tuple$6, _tmp$27, _tmp$28, y$1;
		z = this;
		_tmp = nat.nil; _tmp$1 = nat.nil; zz = _tmp; r = _tmp$1;
		powers = ($arrayType(nat, 16)).zero(); $copy(powers, ($arrayType(nat, 16)).zero(), ($arrayType(nat, 16)));
		powers[0] = natOne;
		powers[1] = x;
		i = 2;
		while (i < 16) {
			_tmp$2 = new ($ptrType(nat))(function() { return (x$2 = (_q$1 = i / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$2 < 0 || x$2 >= this.$target.length) ? $throwRuntimeError("index out of range") : this.$target[x$2])); }, function($v) { (x$1 = (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), (x$1 < 0 || x$1 >= this.$target.length) ? $throwRuntimeError("index out of range") : this.$target[x$1] = $v); }, powers); _tmp$3 = new ($ptrType(nat))(function() { return ((i < 0 || i >= this.$target.length) ? $throwRuntimeError("index out of range") : this.$target[i]); }, function($v) { (i < 0 || i >= this.$target.length) ? $throwRuntimeError("index out of range") : this.$target[i] = $v; }, powers); _tmp$4 = new ($ptrType(nat))(function() { return (x$4 = i + 1 >> 0, ((x$4 < 0 || x$4 >= this.$target.length) ? $throwRuntimeError("index out of range") : this.$target[x$4])); }, function($v) { (x$3 = i + 1 >> 0, (x$3 < 0 || x$3 >= this.$target.length) ? $throwRuntimeError("index out of range") : this.$target[x$3] = $v); }, powers); p2 = _tmp$2; p = _tmp$3; p1 = _tmp$4;
			p.$set(p.mul(p2.$get(), p2.$get()));
			_tuple = zz.div(r, p.$get(), m); zz = _tuple[0]; r = _tuple[1];
			_tmp$5 = r; _tmp$6 = p.$get(); p.$set(_tmp$5); r = _tmp$6;
			p1.$set(p1.mul(p.$get(), x));
			_tuple$1 = zz.div(r, p1.$get(), m); zz = _tuple$1[0]; r = _tuple$1[1];
			_tmp$7 = r; _tmp$8 = p1.$get(); p1.$set(_tmp$7); r = _tmp$8;
			i = i + (2) >> 0;
		}
		z = z.setWord(1);
		i$1 = y.$length - 1 >> 0;
		while (i$1 >= 0) {
			yi = ((i$1 < 0 || i$1 >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + i$1]);
			j = 0;
			while (j < 32) {
				if (!((i$1 === (y.$length - 1 >> 0))) || !((j === 0))) {
					zz = zz.mul(z, z);
					_tmp$9 = z; _tmp$10 = zz; zz = _tmp$9; z = _tmp$10;
					_tuple$2 = zz.div(r, z, m); zz = _tuple$2[0]; r = _tuple$2[1];
					_tmp$11 = r; _tmp$12 = z; z = _tmp$11; r = _tmp$12;
					zz = zz.mul(z, z);
					_tmp$13 = z; _tmp$14 = zz; zz = _tmp$13; z = _tmp$14;
					_tuple$3 = zz.div(r, z, m); zz = _tuple$3[0]; r = _tuple$3[1];
					_tmp$15 = r; _tmp$16 = z; z = _tmp$15; r = _tmp$16;
					zz = zz.mul(z, z);
					_tmp$17 = z; _tmp$18 = zz; zz = _tmp$17; z = _tmp$18;
					_tuple$4 = zz.div(r, z, m); zz = _tuple$4[0]; r = _tuple$4[1];
					_tmp$19 = r; _tmp$20 = z; z = _tmp$19; r = _tmp$20;
					zz = zz.mul(z, z);
					_tmp$21 = z; _tmp$22 = zz; zz = _tmp$21; z = _tmp$22;
					_tuple$5 = zz.div(r, z, m); zz = _tuple$5[0]; r = _tuple$5[1];
					_tmp$23 = r; _tmp$24 = z; z = _tmp$23; r = _tmp$24;
				}
				zz = zz.mul(z, (x$5 = yi >>> 28 >>> 0, ((x$5 < 0 || x$5 >= powers.length) ? $throwRuntimeError("index out of range") : powers[x$5])));
				_tmp$25 = z; _tmp$26 = zz; zz = _tmp$25; z = _tmp$26;
				_tuple$6 = zz.div(r, z, m); zz = _tuple$6[0]; r = _tuple$6[1];
				_tmp$27 = r; _tmp$28 = z; z = _tmp$27; r = _tmp$28;
				yi = (y$1 = (4), y$1 < 32 ? (yi << y$1) : 0) >>> 0;
				j = j + (4) >> 0;
			}
			i$1 = i$1 - (1) >> 0;
		}
		return z.norm();
	};
	$ptrType(nat).prototype.expNNWindowed = function(x, y, m) { return this.$get().expNNWindowed(x, y, m); };
	nat.prototype.probablyPrime = function(reps) {
		var n, _r, _ref, r, _ref$1, _r$1, _r$2, _r$3, _r$4, _r$5, _r$6, _r$7, _r$8, _r$9, _r$10, _r$11, _r$12, _r$13, _r$14, _r$15, nm1, k, q, nm3, x, rand$1, _tmp, _tmp$1, _tmp$2, x$1, y, quotient, nm3Len, i, j, _tuple;
		n = this;
		if (n.$length === 0) {
			return false;
		}
		if (n.$length === 1) {
			if (((0 < 0 || 0 >= n.$length) ? $throwRuntimeError("index out of range") : n.$array[n.$offset + 0]) < 2) {
				return false;
			}
			if ((_r = ((0 < 0 || 0 >= n.$length) ? $throwRuntimeError("index out of range") : n.$array[n.$offset + 0]) % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0) {
				return ((0 < 0 || 0 >= n.$length) ? $throwRuntimeError("index out of range") : n.$array[n.$offset + 0]) === 2;
			}
			_ref = ((0 < 0 || 0 >= n.$length) ? $throwRuntimeError("index out of range") : n.$array[n.$offset + 0]);
			if (_ref === 3 || _ref === 5 || _ref === 7 || _ref === 11 || _ref === 13 || _ref === 17 || _ref === 19 || _ref === 23 || _ref === 29 || _ref === 31 || _ref === 37 || _ref === 41 || _ref === 43 || _ref === 47 || _ref === 53) {
				return true;
			}
		}
		r = 0;
		_ref$1 = 32;
		if (_ref$1 === 32) {
			r = n.modW(3234846615);
		} else if (_ref$1 === 64) {
			r = n.modW(820596253);
		} else {
			$panic(new $String("Unknown word size"));
		}
		if (((_r$1 = r % 3, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$2 = r % 5, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$3 = r % 7, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$4 = r % 11, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$5 = r % 13, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$6 = r % 17, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$7 = r % 19, _r$7 === _r$7 ? _r$7 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$8 = r % 23, _r$8 === _r$8 ? _r$8 : $throwRuntimeError("integer divide by zero")) === 0) || ((_r$9 = r % 29, _r$9 === _r$9 ? _r$9 : $throwRuntimeError("integer divide by zero")) === 0)) {
			return false;
		}
		nm1 = nat.nil.sub(n, natOne);
		k = nm1.trailingZeroBits();
		q = nat.nil.shr(nm1, k);
		nm3 = nat.nil.sub(nm1, natTwo);
		rand$1 = rand.New(rand.NewSource((x = ((0 < 0 || 0 >= n.$length) ? $throwRuntimeError("index out of range") : n.$array[n.$offset + 0]), new $Int64(0, x.constructor === Number ? x : 1))));
		_tmp = nat.nil; _tmp$1 = nat.nil; _tmp$2 = nat.nil; x$1 = _tmp; y = _tmp$1; quotient = _tmp$2;
		nm3Len = nm3.bitLen();
		i = 0;
		NextRandom:
		while (i < reps) {
			x$1 = x$1.random(rand$1, nm3, nm3Len);
			x$1 = x$1.add(x$1, natTwo);
			y = y.expNN(x$1, q, n);
			if ((y.cmp(natOne) === 0) || (y.cmp(nm1) === 0)) {
				i = i + (1) >> 0;
				continue;
			}
			j = 1;
			while (j < k) {
				y = y.mul(y, y);
				_tuple = quotient.div(y, y, n); quotient = _tuple[0]; y = _tuple[1];
				if (y.cmp(nm1) === 0) {
					i = i + (1) >> 0;
					continue NextRandom;
				}
				if (y.cmp(natOne) === 0) {
					return false;
				}
				j = j + (1) >>> 0;
			}
			return false;
		}
		return true;
	};
	$ptrType(nat).prototype.probablyPrime = function(reps) { return this.$get().probablyPrime(reps); };
	nat.prototype.bytes = function(buf) {
		var i = 0, z, _ref, _i, d, j, y;
		z = this;
		i = buf.$length;
		_ref = z;
		_i = 0;
		while (_i < _ref.$length) {
			d = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			j = 0;
			while (j < 4) {
				i = i - (1) >> 0;
				(i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i] = (d << 24 >>> 24);
				d = (y = (8), y < 32 ? (d >>> y) : 0) >>> 0;
				j = j + (1) >> 0;
			}
			_i++;
		}
		while (i < buf.$length && (((i < 0 || i >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + i]) === 0)) {
			i = i + (1) >> 0;
		}
		return i;
	};
	$ptrType(nat).prototype.bytes = function(buf) { return this.$get().bytes(buf); };
	nat.prototype.setBytes = function(buf) {
		var z, _q, k, s, d, i, y, x;
		z = this;
		z = z.make((_q = (((buf.$length + 4 >> 0) - 1 >> 0)) / 4, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		k = 0;
		s = 0;
		d = 0;
		i = buf.$length;
		while (i > 0) {
			d = (d | (((y = s, y < 32 ? (((x = i - 1 >> 0, ((x < 0 || x >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + x])) >>> 0) << y) : 0) >>> 0))) >>> 0;
			s = s + (8) >>> 0;
			if (s === 32) {
				(k < 0 || k >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + k] = d;
				k = k + (1) >> 0;
				s = 0;
				d = 0;
			}
			i = i - (1) >> 0;
		}
		if (k < z.$length) {
			(k < 0 || k >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + k] = d;
		}
		return z.norm();
	};
	$ptrType(nat).prototype.setBytes = function(buf) { return this.$get().setBytes(buf); };
	$pkg.$init = function() {
		($ptrType(Int)).methods = [["Abs", "Abs", "", $funcType([($ptrType(Int))], [($ptrType(Int))], false), -1], ["Add", "Add", "", $funcType([($ptrType(Int)), ($ptrType(Int))], [($ptrType(Int))], false), -1], ["And", "And", "", $funcType([($ptrType(Int)), ($ptrType(Int))], [($ptrType(Int))], false), -1], ["AndNot", "AndNot", "", $funcType([($ptrType(Int)), ($ptrType(Int))], [($ptrType(Int))], false), -1], ["Binomial", "Binomial", "", $funcType([$Int64, $Int64], [($ptrType(Int))], false), -1], ["Bit", "Bit", "", $funcType([$Int], [$Uint], false), -1], ["BitLen", "BitLen", "", $funcType([], [$Int], false), -1], ["Bits", "Bits", "", $funcType([], [($sliceType(Word))], false), -1], ["Bytes", "Bytes", "", $funcType([], [($sliceType($Uint8))], false), -1], ["Cmp", "Cmp", "", $funcType([($ptrType(Int))], [$Int], false), -1], ["Div", "Div", "", $funcType([($ptrType(Int)), ($ptrType(Int))], [($ptrType(Int))], false), -1], ["DivMod", "DivMod", "", $funcType([($ptrType(Int)), ($ptrType(Int)), ($ptrType(Int))], [($ptrType(Int)), ($ptrType(Int))], false), -1], ["Exp", "Exp", "", $funcType([($ptrType(Int)), ($ptrType(Int)), ($ptrType(Int))], [($ptrType(Int))], false), -1], ["Format", "Format", "", $funcType([fmt.State, $Int32], [], false), -1], ["GCD", "GCD", "", $funcType([($ptrType(Int)), ($ptrType(Int)), ($ptrType(Int)), ($ptrType(Int))], [($ptrType(Int))], false), -1], ["GobDecode", "GobDecode", "", $funcType([($sliceType($Uint8))], [$error], false), -1], ["GobEncode", "GobEncode", "", $funcType([], [($sliceType($Uint8)), $error], false), -1], ["Int64", "Int64", "", $funcType([], [$Int64], false), -1], ["Lsh", "Lsh", "", $funcType([($ptrType(Int)), $Uint], [($ptrType(Int))], false), -1], ["MarshalJSON", "MarshalJSON", "", $funcType([], [($sliceType($Uint8)), $error], false), -1], ["MarshalText", "MarshalText", "", $funcType([], [($sliceType($Uint8)), $error], false), -1], ["Mod", "Mod", "", $funcType([($ptrType(Int)), ($ptrType(Int))], [($ptrType(Int))], false), -1], ["ModInverse", "ModInverse", "", $funcType([($ptrType(Int)), ($ptrType(Int))], [($ptrType(Int))], false), -1], ["Mul", "Mul", "", $funcType([($ptrType(Int)), ($ptrType(Int))], [($ptrType(Int))], false), -1], ["MulRange", "MulRange", "", $funcType([$Int64, $Int64], [($ptrType(Int))], false), -1], ["Neg", "Neg", "", $funcType([($ptrType(Int))], [($ptrType(Int))], false), -1], ["Not", "Not", "", $funcType([($ptrType(Int))], [($ptrType(Int))], false), -1], ["Or", "Or", "", $funcType([($ptrType(Int)), ($ptrType(Int))], [($ptrType(Int))], false), -1], ["ProbablyPrime", "ProbablyPrime", "", $funcType([$Int], [$Bool], false), -1], ["Quo", "Quo", "", $funcType([($ptrType(Int)), ($ptrType(Int))], [($ptrType(Int))], false), -1], ["QuoRem", "QuoRem", "", $funcType([($ptrType(Int)), ($ptrType(Int)), ($ptrType(Int))], [($ptrType(Int)), ($ptrType(Int))], false), -1], ["Rand", "Rand", "", $funcType([($ptrType(rand.Rand)), ($ptrType(Int))], [($ptrType(Int))], false), -1], ["Rem", "Rem", "", $funcType([($ptrType(Int)), ($ptrType(Int))], [($ptrType(Int))], false), -1], ["Rsh", "Rsh", "", $funcType([($ptrType(Int)), $Uint], [($ptrType(Int))], false), -1], ["Scan", "Scan", "", $funcType([fmt.ScanState, $Int32], [$error], false), -1], ["Set", "Set", "", $funcType([($ptrType(Int))], [($ptrType(Int))], false), -1], ["SetBit", "SetBit", "", $funcType([($ptrType(Int)), $Int, $Uint], [($ptrType(Int))], false), -1], ["SetBits", "SetBits", "", $funcType([($sliceType(Word))], [($ptrType(Int))], false), -1], ["SetBytes", "SetBytes", "", $funcType([($sliceType($Uint8))], [($ptrType(Int))], false), -1], ["SetInt64", "SetInt64", "", $funcType([$Int64], [($ptrType(Int))], false), -1], ["SetString", "SetString", "", $funcType([$String, $Int], [($ptrType(Int)), $Bool], false), -1], ["SetUint64", "SetUint64", "", $funcType([$Uint64], [($ptrType(Int))], false), -1], ["Sign", "Sign", "", $funcType([], [$Int], false), -1], ["String", "String", "", $funcType([], [$String], false), -1], ["Sub", "Sub", "", $funcType([($ptrType(Int)), ($ptrType(Int))], [($ptrType(Int))], false), -1], ["Uint64", "Uint64", "", $funcType([], [$Uint64], false), -1], ["UnmarshalJSON", "UnmarshalJSON", "", $funcType([($sliceType($Uint8))], [$error], false), -1], ["UnmarshalText", "UnmarshalText", "", $funcType([($sliceType($Uint8))], [$error], false), -1], ["Xor", "Xor", "", $funcType([($ptrType(Int)), ($ptrType(Int))], [($ptrType(Int))], false), -1], ["binaryGCD", "binaryGCD", "math/big", $funcType([($ptrType(Int)), ($ptrType(Int))], [($ptrType(Int))], false), -1], ["scan", "scan", "math/big", $funcType([io.RuneScanner, $Int], [($ptrType(Int)), $Int, $error], false), -1]];
		Int.init([["neg", "neg", "math/big", $Bool, ""], ["abs", "abs", "math/big", nat, ""]]);
		nat.methods = [["add", "add", "math/big", $funcType([nat, nat], [nat], false), -1], ["and", "and", "math/big", $funcType([nat, nat], [nat], false), -1], ["andNot", "andNot", "math/big", $funcType([nat, nat], [nat], false), -1], ["bit", "bit", "math/big", $funcType([$Uint], [$Uint], false), -1], ["bitLen", "bitLen", "math/big", $funcType([], [$Int], false), -1], ["bytes", "bytes", "math/big", $funcType([($sliceType($Uint8))], [$Int], false), -1], ["clear", "clear", "math/big", $funcType([], [], false), -1], ["cmp", "cmp", "math/big", $funcType([nat], [$Int], false), -1], ["convertWords", "convertWords", "math/big", $funcType([($sliceType($Uint8)), $String, Word, $Int, Word, ($sliceType(divisor))], [], false), -1], ["decimalString", "decimalString", "math/big", $funcType([], [$String], false), -1], ["div", "div", "math/big", $funcType([nat, nat, nat], [nat, nat], false), -1], ["divLarge", "divLarge", "math/big", $funcType([nat, nat, nat], [nat, nat], false), -1], ["divW", "divW", "math/big", $funcType([nat, Word], [nat, Word], false), -1], ["expNN", "expNN", "math/big", $funcType([nat, nat, nat], [nat], false), -1], ["expNNWindowed", "expNNWindowed", "math/big", $funcType([nat, nat, nat], [nat], false), -1], ["expWW", "expWW", "math/big", $funcType([Word, Word], [nat], false), -1], ["make", "make", "math/big", $funcType([$Int], [nat], false), -1], ["modW", "modW", "math/big", $funcType([Word], [Word], false), -1], ["mul", "mul", "math/big", $funcType([nat, nat], [nat], false), -1], ["mulAddWW", "mulAddWW", "math/big", $funcType([nat, Word, Word], [nat], false), -1], ["mulRange", "mulRange", "math/big", $funcType([$Uint64, $Uint64], [nat], false), -1], ["norm", "norm", "math/big", $funcType([], [nat], false), -1], ["or", "or", "math/big", $funcType([nat, nat], [nat], false), -1], ["probablyPrime", "probablyPrime", "math/big", $funcType([$Int], [$Bool], false), -1], ["random", "random", "math/big", $funcType([($ptrType(rand.Rand)), nat, $Int], [nat], false), -1], ["scan", "scan", "math/big", $funcType([io.RuneScanner, $Int], [nat, $Int, $error], false), -1], ["set", "set", "math/big", $funcType([nat], [nat], false), -1], ["setBit", "setBit", "math/big", $funcType([nat, $Uint, $Uint], [nat], false), -1], ["setBytes", "setBytes", "math/big", $funcType([($sliceType($Uint8))], [nat], false), -1], ["setUint64", "setUint64", "math/big", $funcType([$Uint64], [nat], false), -1], ["setWord", "setWord", "math/big", $funcType([Word], [nat], false), -1], ["shl", "shl", "math/big", $funcType([nat, $Uint], [nat], false), -1], ["shr", "shr", "math/big", $funcType([nat, $Uint], [nat], false), -1], ["string", "string", "math/big", $funcType([$String], [$String], false), -1], ["sub", "sub", "math/big", $funcType([nat, nat], [nat], false), -1], ["trailingZeroBits", "trailingZeroBits", "math/big", $funcType([], [$Uint], false), -1], ["xor", "xor", "math/big", $funcType([nat, nat], [nat], false), -1]];
		($ptrType(nat)).methods = [["add", "add", "math/big", $funcType([nat, nat], [nat], false), -1], ["and", "and", "math/big", $funcType([nat, nat], [nat], false), -1], ["andNot", "andNot", "math/big", $funcType([nat, nat], [nat], false), -1], ["bit", "bit", "math/big", $funcType([$Uint], [$Uint], false), -1], ["bitLen", "bitLen", "math/big", $funcType([], [$Int], false), -1], ["bytes", "bytes", "math/big", $funcType([($sliceType($Uint8))], [$Int], false), -1], ["clear", "clear", "math/big", $funcType([], [], false), -1], ["cmp", "cmp", "math/big", $funcType([nat], [$Int], false), -1], ["convertWords", "convertWords", "math/big", $funcType([($sliceType($Uint8)), $String, Word, $Int, Word, ($sliceType(divisor))], [], false), -1], ["decimalString", "decimalString", "math/big", $funcType([], [$String], false), -1], ["div", "div", "math/big", $funcType([nat, nat, nat], [nat, nat], false), -1], ["divLarge", "divLarge", "math/big", $funcType([nat, nat, nat], [nat, nat], false), -1], ["divW", "divW", "math/big", $funcType([nat, Word], [nat, Word], false), -1], ["expNN", "expNN", "math/big", $funcType([nat, nat, nat], [nat], false), -1], ["expNNWindowed", "expNNWindowed", "math/big", $funcType([nat, nat, nat], [nat], false), -1], ["expWW", "expWW", "math/big", $funcType([Word, Word], [nat], false), -1], ["make", "make", "math/big", $funcType([$Int], [nat], false), -1], ["modW", "modW", "math/big", $funcType([Word], [Word], false), -1], ["mul", "mul", "math/big", $funcType([nat, nat], [nat], false), -1], ["mulAddWW", "mulAddWW", "math/big", $funcType([nat, Word, Word], [nat], false), -1], ["mulRange", "mulRange", "math/big", $funcType([$Uint64, $Uint64], [nat], false), -1], ["norm", "norm", "math/big", $funcType([], [nat], false), -1], ["or", "or", "math/big", $funcType([nat, nat], [nat], false), -1], ["probablyPrime", "probablyPrime", "math/big", $funcType([$Int], [$Bool], false), -1], ["random", "random", "math/big", $funcType([($ptrType(rand.Rand)), nat, $Int], [nat], false), -1], ["scan", "scan", "math/big", $funcType([io.RuneScanner, $Int], [nat, $Int, $error], false), -1], ["set", "set", "math/big", $funcType([nat], [nat], false), -1], ["setBit", "setBit", "math/big", $funcType([nat, $Uint, $Uint], [nat], false), -1], ["setBytes", "setBytes", "math/big", $funcType([($sliceType($Uint8))], [nat], false), -1], ["setUint64", "setUint64", "math/big", $funcType([$Uint64], [nat], false), -1], ["setWord", "setWord", "math/big", $funcType([Word], [nat], false), -1], ["shl", "shl", "math/big", $funcType([nat, $Uint], [nat], false), -1], ["shr", "shr", "math/big", $funcType([nat, $Uint], [nat], false), -1], ["string", "string", "math/big", $funcType([$String], [$String], false), -1], ["sub", "sub", "math/big", $funcType([nat, nat], [nat], false), -1], ["trailingZeroBits", "trailingZeroBits", "math/big", $funcType([], [$Uint], false), -1], ["xor", "xor", "math/big", $funcType([nat, nat], [nat], false), -1]];
		nat.init(Word);
		divisor.init([["bbb", "bbb", "math/big", nat, ""], ["nbits", "nbits", "math/big", $Int, ""], ["ndigits", "ndigits", "math/big", $Int, ""]]);
		cacheBase10 = new ($structType([["Mutex", "", "", sync.Mutex, ""], ["table", "table", "math/big", ($arrayType(divisor, 64)), ""]])).Ptr();
		natOne = new nat([1]);
		intOne = new Int.Ptr(false, natOne);
		natTwo = new nat([2]);
		karatsubaThreshold = 40;
		leafSize = 8;
		deBruijn32Lookup = new ($sliceType($Uint8))([0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8, 31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9]);
		deBruijn64Lookup = new ($sliceType($Uint8))([0, 1, 56, 2, 57, 49, 28, 3, 61, 58, 42, 50, 38, 29, 17, 4, 62, 47, 59, 36, 45, 43, 51, 22, 53, 39, 33, 30, 24, 18, 12, 5, 63, 55, 48, 27, 60, 41, 37, 16, 46, 35, 44, 21, 52, 32, 23, 11, 54, 26, 40, 15, 34, 20, 31, 10, 25, 14, 19, 9, 13, 8, 7, 6]);
	};
	return $pkg;
})();
$packages["crypto/elliptic"] = (function() {
	var $pkg = {}, io = $packages["io"], big = $packages["math/big"], sync = $packages["sync"], Curve, CurveParams, p224Curve, p224FieldElement, p224LargeFieldElement, p256Curve, mask, initonce, p384, p521, p224, p224P, p224ZeroModP31, p224ZeroModP63, p256, p256RInverse, p256One, p256Precomputed, p256Zero31, zForAffine, GenerateKey, Marshal, Unmarshal, initAll, initP384, initP521, P256, P384, P521, initP224, P224, p224IsZero, p224Add, p224Sub, p224Mul, p224Square, p224ReduceLarge, p224Reduce, p224Invert, p224Contract, p224AddJacobian, p224DoubleJacobian, p224CopyConditional, p224ScalarMult, p224ToAffine, get28BitsFromEnd, p224FromBig, p224ToBig, initP256, p256GetScalar, nonZeroToAllOnes, p256ReduceCarry, p256Sum, p256Diff, p256ReduceDegree, p256Square, p256Mul, p256Assign, p256Invert, p256Scalar3, p256Scalar4, p256Scalar8, p256PointDouble, p256PointAddMixed, p256PointAdd, p256CopyConditional, p256SelectAffinePoint, p256SelectJacobianPoint, p256GetBit, p256ScalarBaseMult, p256PointToAffine, p256ToAffine, p256ScalarMult, p256FromBig, p256ToBig;
	Curve = $pkg.Curve = $newType(8, "Interface", "elliptic.Curve", "Curve", "crypto/elliptic", null);
	CurveParams = $pkg.CurveParams = $newType(0, "Struct", "elliptic.CurveParams", "CurveParams", "crypto/elliptic", function(P_, N_, B_, Gx_, Gy_, BitSize_) {
		this.$val = this;
		this.P = P_ !== undefined ? P_ : ($ptrType(big.Int)).nil;
		this.N = N_ !== undefined ? N_ : ($ptrType(big.Int)).nil;
		this.B = B_ !== undefined ? B_ : ($ptrType(big.Int)).nil;
		this.Gx = Gx_ !== undefined ? Gx_ : ($ptrType(big.Int)).nil;
		this.Gy = Gy_ !== undefined ? Gy_ : ($ptrType(big.Int)).nil;
		this.BitSize = BitSize_ !== undefined ? BitSize_ : 0;
	});
	p224Curve = $pkg.p224Curve = $newType(0, "Struct", "elliptic.p224Curve", "p224Curve", "crypto/elliptic", function(CurveParams_, gx_, gy_, b_) {
		this.$val = this;
		this.CurveParams = CurveParams_ !== undefined ? CurveParams_ : ($ptrType(CurveParams)).nil;
		this.gx = gx_ !== undefined ? gx_ : p224FieldElement.zero();
		this.gy = gy_ !== undefined ? gy_ : p224FieldElement.zero();
		this.b = b_ !== undefined ? b_ : p224FieldElement.zero();
	});
	p224FieldElement = $pkg.p224FieldElement = $newType(32, "Array", "elliptic.p224FieldElement", "p224FieldElement", "crypto/elliptic", null);
	p224LargeFieldElement = $pkg.p224LargeFieldElement = $newType(120, "Array", "elliptic.p224LargeFieldElement", "p224LargeFieldElement", "crypto/elliptic", null);
	p256Curve = $pkg.p256Curve = $newType(0, "Struct", "elliptic.p256Curve", "p256Curve", "crypto/elliptic", function(CurveParams_) {
		this.$val = this;
		this.CurveParams = CurveParams_ !== undefined ? CurveParams_ : ($ptrType(CurveParams)).nil;
	});
	CurveParams.Ptr.prototype.Params = function() {
		var curve;
		curve = this;
		return curve;
	};
	CurveParams.prototype.Params = function() { return this.$val.Params(); };
	CurveParams.Ptr.prototype.IsOnCurve = function(x, y) {
		var curve, y2, x3, threeX;
		curve = this;
		y2 = new big.Int.Ptr().Mul(y, y);
		y2.Mod(y2, curve.P);
		x3 = new big.Int.Ptr().Mul(x, x);
		x3.Mul(x3, x);
		threeX = new big.Int.Ptr().Lsh(x, 1);
		threeX.Add(threeX, x);
		x3.Sub(x3, threeX);
		x3.Add(x3, curve.B);
		x3.Mod(x3, curve.P);
		return x3.Cmp(y2) === 0;
	};
	CurveParams.prototype.IsOnCurve = function(x, y) { return this.$val.IsOnCurve(x, y); };
	zForAffine = function(x, y) {
		var z;
		z = new big.Int.Ptr();
		if (!((x.Sign() === 0)) || !((y.Sign() === 0))) {
			z.SetInt64(new $Int64(0, 1));
		}
		return z;
	};
	CurveParams.Ptr.prototype.affineFromJacobian = function(x, y, z) {
		var xOut = ($ptrType(big.Int)).nil, yOut = ($ptrType(big.Int)).nil, curve, _tmp, _tmp$1, zinv, zinvsq;
		curve = this;
		if (z.Sign() === 0) {
			_tmp = new big.Int.Ptr(); _tmp$1 = new big.Int.Ptr(); xOut = _tmp; yOut = _tmp$1;
			return [xOut, yOut];
		}
		zinv = new big.Int.Ptr().ModInverse(z, curve.P);
		zinvsq = new big.Int.Ptr().Mul(zinv, zinv);
		xOut = new big.Int.Ptr().Mul(x, zinvsq);
		xOut.Mod(xOut, curve.P);
		zinvsq.Mul(zinvsq, zinv);
		yOut = new big.Int.Ptr().Mul(y, zinvsq);
		yOut.Mod(yOut, curve.P);
		return [xOut, yOut];
	};
	CurveParams.prototype.affineFromJacobian = function(x, y, z) { return this.$val.affineFromJacobian(x, y, z); };
	CurveParams.Ptr.prototype.Add = function(x1, y1, x2, y2) {
		var curve, z1, z2, _tuple;
		curve = this;
		z1 = zForAffine(x1, y1);
		z2 = zForAffine(x2, y2);
		_tuple = curve.addJacobian(x1, y1, z1, x2, y2, z2);
		return curve.affineFromJacobian(_tuple[0], _tuple[1], _tuple[2]);
	};
	CurveParams.prototype.Add = function(x1, y1, x2, y2) { return this.$val.Add(x1, y1, x2, y2); };
	CurveParams.Ptr.prototype.addJacobian = function(x1, y1, z1, x2, y2, z2) {
		var curve, _tmp, _tmp$1, _tmp$2, x3, y3, z3, z1z1, z2z2, u1, u2, h, xEqual, i, j, s1, s2, r, yEqual, v;
		curve = this;
		_tmp = new big.Int.Ptr(); _tmp$1 = new big.Int.Ptr(); _tmp$2 = new big.Int.Ptr(); x3 = _tmp; y3 = _tmp$1; z3 = _tmp$2;
		if (z1.Sign() === 0) {
			x3.Set(x2);
			y3.Set(y2);
			z3.Set(z2);
			return [x3, y3, z3];
		}
		if (z2.Sign() === 0) {
			x3.Set(x1);
			y3.Set(y1);
			z3.Set(z1);
			return [x3, y3, z3];
		}
		z1z1 = new big.Int.Ptr().Mul(z1, z1);
		z1z1.Mod(z1z1, curve.P);
		z2z2 = new big.Int.Ptr().Mul(z2, z2);
		z2z2.Mod(z2z2, curve.P);
		u1 = new big.Int.Ptr().Mul(x1, z2z2);
		u1.Mod(u1, curve.P);
		u2 = new big.Int.Ptr().Mul(x2, z1z1);
		u2.Mod(u2, curve.P);
		h = new big.Int.Ptr().Sub(u2, u1);
		xEqual = h.Sign() === 0;
		if (h.Sign() === -1) {
			h.Add(h, curve.P);
		}
		i = new big.Int.Ptr().Lsh(h, 1);
		i.Mul(i, i);
		j = new big.Int.Ptr().Mul(h, i);
		s1 = new big.Int.Ptr().Mul(y1, z2);
		s1.Mul(s1, z2z2);
		s1.Mod(s1, curve.P);
		s2 = new big.Int.Ptr().Mul(y2, z1);
		s2.Mul(s2, z1z1);
		s2.Mod(s2, curve.P);
		r = new big.Int.Ptr().Sub(s2, s1);
		if (r.Sign() === -1) {
			r.Add(r, curve.P);
		}
		yEqual = r.Sign() === 0;
		if (xEqual && yEqual) {
			return curve.doubleJacobian(x1, y1, z1);
		}
		r.Lsh(r, 1);
		v = new big.Int.Ptr().Mul(u1, i);
		x3.Set(r);
		x3.Mul(x3, x3);
		x3.Sub(x3, j);
		x3.Sub(x3, v);
		x3.Sub(x3, v);
		x3.Mod(x3, curve.P);
		y3.Set(r);
		v.Sub(v, x3);
		y3.Mul(y3, v);
		s1.Mul(s1, j);
		s1.Lsh(s1, 1);
		y3.Sub(y3, s1);
		y3.Mod(y3, curve.P);
		z3.Add(z1, z2);
		z3.Mul(z3, z3);
		z3.Sub(z3, z1z1);
		z3.Sub(z3, z2z2);
		z3.Mul(z3, h);
		z3.Mod(z3, curve.P);
		return [x3, y3, z3];
	};
	CurveParams.prototype.addJacobian = function(x1, y1, z1, x2, y2, z2) { return this.$val.addJacobian(x1, y1, z1, x2, y2, z2); };
	CurveParams.Ptr.prototype.Double = function(x1, y1) {
		var curve, z1, _tuple;
		curve = this;
		z1 = zForAffine(x1, y1);
		_tuple = curve.doubleJacobian(x1, y1, z1);
		return curve.affineFromJacobian(_tuple[0], _tuple[1], _tuple[2]);
	};
	CurveParams.prototype.Double = function(x1, y1) { return this.$val.Double(x1, y1); };
	CurveParams.Ptr.prototype.doubleJacobian = function(x, y, z) {
		var curve, delta, gamma, alpha, alpha2, beta, x3, beta8, z3, y3;
		curve = this;
		delta = new big.Int.Ptr().Mul(z, z);
		delta.Mod(delta, curve.P);
		gamma = new big.Int.Ptr().Mul(y, y);
		gamma.Mod(gamma, curve.P);
		alpha = new big.Int.Ptr().Sub(x, delta);
		if (alpha.Sign() === -1) {
			alpha.Add(alpha, curve.P);
		}
		alpha2 = new big.Int.Ptr().Add(x, delta);
		alpha.Mul(alpha, alpha2);
		alpha2.Set(alpha);
		alpha.Lsh(alpha, 1);
		alpha.Add(alpha, alpha2);
		beta = alpha2.Mul(x, gamma);
		x3 = new big.Int.Ptr().Mul(alpha, alpha);
		beta8 = new big.Int.Ptr().Lsh(beta, 3);
		x3.Sub(x3, beta8);
		while (x3.Sign() === -1) {
			x3.Add(x3, curve.P);
		}
		x3.Mod(x3, curve.P);
		z3 = new big.Int.Ptr().Add(y, z);
		z3.Mul(z3, z3);
		z3.Sub(z3, gamma);
		if (z3.Sign() === -1) {
			z3.Add(z3, curve.P);
		}
		z3.Sub(z3, delta);
		if (z3.Sign() === -1) {
			z3.Add(z3, curve.P);
		}
		z3.Mod(z3, curve.P);
		beta.Lsh(beta, 2);
		beta.Sub(beta, x3);
		if (beta.Sign() === -1) {
			beta.Add(beta, curve.P);
		}
		y3 = alpha.Mul(alpha, beta);
		gamma.Mul(gamma, gamma);
		gamma.Lsh(gamma, 3);
		gamma.Mod(gamma, curve.P);
		y3.Sub(y3, gamma);
		if (y3.Sign() === -1) {
			y3.Add(y3, curve.P);
		}
		y3.Mod(y3, curve.P);
		return [x3, y3, z3];
	};
	CurveParams.prototype.doubleJacobian = function(x, y, z) { return this.$val.doubleJacobian(x, y, z); };
	CurveParams.Ptr.prototype.ScalarMult = function(Bx, By, k) {
		var curve, Bz, _tmp, _tmp$1, _tmp$2, x, y, z, _ref, _i, byte$1, bitNum, _tuple, _tuple$1, y$1;
		curve = this;
		Bz = new big.Int.Ptr().SetInt64(new $Int64(0, 1));
		_tmp = new big.Int.Ptr(); _tmp$1 = new big.Int.Ptr(); _tmp$2 = new big.Int.Ptr(); x = _tmp; y = _tmp$1; z = _tmp$2;
		_ref = k;
		_i = 0;
		while (_i < _ref.$length) {
			byte$1 = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			bitNum = 0;
			while (bitNum < 8) {
				_tuple = curve.doubleJacobian(x, y, z); x = _tuple[0]; y = _tuple[1]; z = _tuple[2];
				if (((byte$1 & 128) >>> 0) === 128) {
					_tuple$1 = curve.addJacobian(Bx, By, Bz, x, y, z); x = _tuple$1[0]; y = _tuple$1[1]; z = _tuple$1[2];
				}
				byte$1 = (y$1 = (1), y$1 < 32 ? (byte$1 << y$1) : 0) << 24 >>> 24;
				bitNum = bitNum + (1) >> 0;
			}
			_i++;
		}
		return curve.affineFromJacobian(x, y, z);
	};
	CurveParams.prototype.ScalarMult = function(Bx, By, k) { return this.$val.ScalarMult(Bx, By, k); };
	CurveParams.Ptr.prototype.ScalarBaseMult = function(k) {
		var curve;
		curve = this;
		return curve.ScalarMult(curve.Gx, curve.Gy, k);
	};
	CurveParams.prototype.ScalarBaseMult = function(k) { return this.$val.ScalarBaseMult(k); };
	GenerateKey = $pkg.GenerateKey = function(curve, rand) {
		var priv = ($sliceType($Uint8)).nil, x = ($ptrType(big.Int)).nil, y = ($ptrType(big.Int)).nil, err = $ifaceNil, bitSize, byteLen, _tuple, _lhs, _index, x$1, _r, _lhs$1, _index$1, _tuple$1;
		bitSize = curve.Params().BitSize;
		byteLen = ((bitSize + 7 >> 0)) >> 3 >> 0;
		priv = ($sliceType($Uint8)).make(byteLen);
		while (x === ($ptrType(big.Int)).nil) {
			_tuple = io.ReadFull(rand, priv); err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [priv, x, y, err];
			}
			_lhs = priv; _index = 0; (_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index] = (((_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index]) & ((x$1 = (_r = bitSize % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero")), ((x$1 < 0 || x$1 >= mask.$length) ? $throwRuntimeError("index out of range") : mask.$array[mask.$offset + x$1])))) >>> 0;
			_lhs$1 = priv; _index$1 = 1; (_index$1 < 0 || _index$1 >= _lhs$1.$length) ? $throwRuntimeError("index out of range") : _lhs$1.$array[_lhs$1.$offset + _index$1] = (((_index$1 < 0 || _index$1 >= _lhs$1.$length) ? $throwRuntimeError("index out of range") : _lhs$1.$array[_lhs$1.$offset + _index$1]) ^ (66)) << 24 >>> 24;
			_tuple$1 = curve.ScalarBaseMult(priv); x = _tuple$1[0]; y = _tuple$1[1];
		}
		return [priv, x, y, err];
	};
	Marshal = $pkg.Marshal = function(curve, x, y) {
		var byteLen, ret, xBytes, yBytes;
		byteLen = ((curve.Params().BitSize + 7 >> 0)) >> 3 >> 0;
		ret = ($sliceType($Uint8)).make((1 + ((((2 >>> 16 << 16) * byteLen >> 0) + (2 << 16 >>> 16) * byteLen) >> 0) >> 0));
		(0 < 0 || 0 >= ret.$length) ? $throwRuntimeError("index out of range") : ret.$array[ret.$offset + 0] = 4;
		xBytes = x.Bytes();
		$copySlice($subslice(ret, ((1 + byteLen >> 0) - xBytes.$length >> 0)), xBytes);
		yBytes = y.Bytes();
		$copySlice($subslice(ret, ((1 + ((((2 >>> 16 << 16) * byteLen >> 0) + (2 << 16 >>> 16) * byteLen) >> 0) >> 0) - yBytes.$length >> 0)), yBytes);
		return ret;
	};
	Unmarshal = $pkg.Unmarshal = function(curve, data) {
		var x = ($ptrType(big.Int)).nil, y = ($ptrType(big.Int)).nil, byteLen;
		byteLen = ((curve.Params().BitSize + 7 >> 0)) >> 3 >> 0;
		if (!((data.$length === (1 + ((((2 >>> 16 << 16) * byteLen >> 0) + (2 << 16 >>> 16) * byteLen) >> 0) >> 0)))) {
			return [x, y];
		}
		if (!((((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]) === 4))) {
			return [x, y];
		}
		x = new big.Int.Ptr().SetBytes($subslice(data, 1, (1 + byteLen >> 0)));
		y = new big.Int.Ptr().SetBytes($subslice(data, (1 + byteLen >> 0)));
		return [x, y];
	};
	initAll = function() {
		initP224();
		initP256();
		initP384();
		initP521();
	};
	initP384 = function() {
		var _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4;
		p384 = new CurveParams.Ptr();
		_tuple = new big.Int.Ptr().SetString("39402006196394479212279040100143613805079739270465446667948293404245721771496870329047266088258938001861606973112319", 10); p384.P = _tuple[0];
		_tuple$1 = new big.Int.Ptr().SetString("39402006196394479212279040100143613805079739270465446667946905279627659399113263569398956308152294913554433653942643", 10); p384.N = _tuple$1[0];
		_tuple$2 = new big.Int.Ptr().SetString("b3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef", 16); p384.B = _tuple$2[0];
		_tuple$3 = new big.Int.Ptr().SetString("aa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7", 16); p384.Gx = _tuple$3[0];
		_tuple$4 = new big.Int.Ptr().SetString("3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f", 16); p384.Gy = _tuple$4[0];
		p384.BitSize = 384;
	};
	initP521 = function() {
		var _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4;
		p521 = new CurveParams.Ptr();
		_tuple = new big.Int.Ptr().SetString("6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151", 10); p521.P = _tuple[0];
		_tuple$1 = new big.Int.Ptr().SetString("6864797660130609714981900799081393217269435300143305409394463459185543183397655394245057746333217197532963996371363321113864768612440380340372808892707005449", 10); p521.N = _tuple$1[0];
		_tuple$2 = new big.Int.Ptr().SetString("051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00", 16); p521.B = _tuple$2[0];
		_tuple$3 = new big.Int.Ptr().SetString("c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66", 16); p521.Gx = _tuple$3[0];
		_tuple$4 = new big.Int.Ptr().SetString("11839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650", 16); p521.Gy = _tuple$4[0];
		p521.BitSize = 521;
	};
	P256 = $pkg.P256 = function() {
		initonce.Do(initAll);
		return new p256.constructor.Struct(p256);
	};
	P384 = $pkg.P384 = function() {
		initonce.Do(initAll);
		return p384;
	};
	P521 = $pkg.P521 = function() {
		initonce.Do(initAll);
		return p521;
	};
	initP224 = function() {
		var _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4;
		p224.CurveParams = new CurveParams.Ptr();
		_tuple = new big.Int.Ptr().SetString("26959946667150639794667015087019630673557916260026308143510066298881", 10); p224.CurveParams.P = _tuple[0];
		_tuple$1 = new big.Int.Ptr().SetString("26959946667150639794667015087019625940457807714424391721682722368061", 10); p224.CurveParams.N = _tuple$1[0];
		_tuple$2 = new big.Int.Ptr().SetString("b4050a850c04b3abf54132565044b0b7d7bfd8ba270b39432355ffb4", 16); p224.CurveParams.B = _tuple$2[0];
		_tuple$3 = new big.Int.Ptr().SetString("b70e0cbd6bb4bf7f321390b94a03c1d356c21122343280d6115c1d21", 16); p224.CurveParams.Gx = _tuple$3[0];
		_tuple$4 = new big.Int.Ptr().SetString("bd376388b5f723fb4c22dfe6cd4375a05a07476444d5819985007e34", 16); p224.CurveParams.Gy = _tuple$4[0];
		p224.CurveParams.BitSize = 224;
		p224FromBig(p224.gx, p224.CurveParams.Gx);
		p224FromBig(p224.gy, p224.CurveParams.Gy);
		p224FromBig(p224.b, p224.CurveParams.B);
	};
	P224 = $pkg.P224 = function() {
		initonce.Do(initAll);
		return new p224.constructor.Struct(p224);
	};
	p224Curve.Ptr.prototype.Params = function() {
		var curve;
		curve = new p224Curve.Ptr(); $copy(curve, this, p224Curve);
		return curve.CurveParams;
	};
	p224Curve.prototype.Params = function() { return this.$val.Params(); };
	p224Curve.Ptr.prototype.IsOnCurve = function(bigX, bigY) {
		var curve, _tmp, _tmp$1, x, y, tmp, x3, i, _lhs, _index, x$1, x$2, i$1;
		curve = new p224Curve.Ptr(); $copy(curve, this, p224Curve);
		_tmp = p224FieldElement.zero(); $copy(_tmp, p224FieldElement.zero(), p224FieldElement); _tmp$1 = p224FieldElement.zero(); $copy(_tmp$1, p224FieldElement.zero(), p224FieldElement); x = p224FieldElement.zero(); $copy(x, _tmp, p224FieldElement); y = p224FieldElement.zero(); $copy(y, _tmp$1, p224FieldElement);
		p224FromBig(x, bigX);
		p224FromBig(y, bigY);
		tmp = p224LargeFieldElement.zero(); $copy(tmp, p224LargeFieldElement.zero(), p224LargeFieldElement);
		x3 = p224FieldElement.zero(); $copy(x3, p224FieldElement.zero(), p224FieldElement);
		p224Square(x3, x, tmp);
		p224Mul(x3, x3, x, tmp);
		i = 0;
		while (i < 8) {
			_lhs = x; _index = i; (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index] = (x$1 = ((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index]), x$2 = 3, (((x$1 >>> 16 << 16) * x$2 >>> 0) + (x$1 << 16 >>> 16) * x$2) >>> 0);
			i = i + (1) >> 0;
		}
		p224Sub(x3, x3, x);
		p224Reduce(x3);
		p224Add(x3, x3, curve.b);
		p224Contract(x3, x3);
		p224Square(y, y, tmp);
		p224Contract(y, y);
		i$1 = 0;
		while (i$1 < 8) {
			if (!((((i$1 < 0 || i$1 >= y.length) ? $throwRuntimeError("index out of range") : y[i$1]) === ((i$1 < 0 || i$1 >= x3.length) ? $throwRuntimeError("index out of range") : x3[i$1])))) {
				return false;
			}
			i$1 = i$1 + (1) >> 0;
		}
		return true;
	};
	p224Curve.prototype.IsOnCurve = function(bigX, bigY) { return this.$val.IsOnCurve(bigX, bigY); };
	p224Curve.Ptr.prototype.Add = function(bigX1, bigY1, bigX2, bigY2) {
		var x = ($ptrType(big.Int)).nil, y = ($ptrType(big.Int)).nil, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, x1, y1, z1, x2, y2, z2, x3, y3, z3, _tuple;
		_tmp = p224FieldElement.zero(); $copy(_tmp, p224FieldElement.zero(), p224FieldElement); _tmp$1 = p224FieldElement.zero(); $copy(_tmp$1, p224FieldElement.zero(), p224FieldElement); _tmp$2 = p224FieldElement.zero(); $copy(_tmp$2, p224FieldElement.zero(), p224FieldElement); _tmp$3 = p224FieldElement.zero(); $copy(_tmp$3, p224FieldElement.zero(), p224FieldElement); _tmp$4 = p224FieldElement.zero(); $copy(_tmp$4, p224FieldElement.zero(), p224FieldElement); _tmp$5 = p224FieldElement.zero(); $copy(_tmp$5, p224FieldElement.zero(), p224FieldElement); _tmp$6 = p224FieldElement.zero(); $copy(_tmp$6, p224FieldElement.zero(), p224FieldElement); _tmp$7 = p224FieldElement.zero(); $copy(_tmp$7, p224FieldElement.zero(), p224FieldElement); _tmp$8 = p224FieldElement.zero(); $copy(_tmp$8, p224FieldElement.zero(), p224FieldElement); x1 = p224FieldElement.zero(); $copy(x1, _tmp, p224FieldElement); y1 = p224FieldElement.zero(); $copy(y1, _tmp$1, p224FieldElement); z1 = p224FieldElement.zero(); $copy(z1, _tmp$2, p224FieldElement); x2 = p224FieldElement.zero(); $copy(x2, _tmp$3, p224FieldElement); y2 = p224FieldElement.zero(); $copy(y2, _tmp$4, p224FieldElement); z2 = p224FieldElement.zero(); $copy(z2, _tmp$5, p224FieldElement); x3 = p224FieldElement.zero(); $copy(x3, _tmp$6, p224FieldElement); y3 = p224FieldElement.zero(); $copy(y3, _tmp$7, p224FieldElement); z3 = p224FieldElement.zero(); $copy(z3, _tmp$8, p224FieldElement);
		p224FromBig(x1, bigX1);
		p224FromBig(y1, bigY1);
		if (!((bigX1.Sign() === 0)) || !((bigY1.Sign() === 0))) {
			z1[0] = 1;
		}
		p224FromBig(x2, bigX2);
		p224FromBig(y2, bigY2);
		if (!((bigX2.Sign() === 0)) || !((bigY2.Sign() === 0))) {
			z2[0] = 1;
		}
		p224AddJacobian(x3, y3, z3, x1, y1, z1, x2, y2, z2);
		_tuple = p224ToAffine(x3, y3, z3); x = _tuple[0]; y = _tuple[1];
		return [x, y];
	};
	p224Curve.prototype.Add = function(bigX1, bigY1, bigX2, bigY2) { return this.$val.Add(bigX1, bigY1, bigX2, bigY2); };
	p224Curve.Ptr.prototype.Double = function(bigX1, bigY1) {
		var x = ($ptrType(big.Int)).nil, y = ($ptrType(big.Int)).nil, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, x1, y1, z1, x2, y2, z2, _tuple;
		_tmp = p224FieldElement.zero(); $copy(_tmp, p224FieldElement.zero(), p224FieldElement); _tmp$1 = p224FieldElement.zero(); $copy(_tmp$1, p224FieldElement.zero(), p224FieldElement); _tmp$2 = p224FieldElement.zero(); $copy(_tmp$2, p224FieldElement.zero(), p224FieldElement); _tmp$3 = p224FieldElement.zero(); $copy(_tmp$3, p224FieldElement.zero(), p224FieldElement); _tmp$4 = p224FieldElement.zero(); $copy(_tmp$4, p224FieldElement.zero(), p224FieldElement); _tmp$5 = p224FieldElement.zero(); $copy(_tmp$5, p224FieldElement.zero(), p224FieldElement); x1 = p224FieldElement.zero(); $copy(x1, _tmp, p224FieldElement); y1 = p224FieldElement.zero(); $copy(y1, _tmp$1, p224FieldElement); z1 = p224FieldElement.zero(); $copy(z1, _tmp$2, p224FieldElement); x2 = p224FieldElement.zero(); $copy(x2, _tmp$3, p224FieldElement); y2 = p224FieldElement.zero(); $copy(y2, _tmp$4, p224FieldElement); z2 = p224FieldElement.zero(); $copy(z2, _tmp$5, p224FieldElement);
		p224FromBig(x1, bigX1);
		p224FromBig(y1, bigY1);
		z1[0] = 1;
		p224DoubleJacobian(x2, y2, z2, x1, y1, z1);
		_tuple = p224ToAffine(x2, y2, z2); x = _tuple[0]; y = _tuple[1];
		return [x, y];
	};
	p224Curve.prototype.Double = function(bigX1, bigY1) { return this.$val.Double(bigX1, bigY1); };
	p224Curve.Ptr.prototype.ScalarMult = function(bigX1, bigY1, scalar) {
		var x = ($ptrType(big.Int)).nil, y = ($ptrType(big.Int)).nil, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, x1, y1, z1, x2, y2, z2, _tuple;
		_tmp = p224FieldElement.zero(); $copy(_tmp, p224FieldElement.zero(), p224FieldElement); _tmp$1 = p224FieldElement.zero(); $copy(_tmp$1, p224FieldElement.zero(), p224FieldElement); _tmp$2 = p224FieldElement.zero(); $copy(_tmp$2, p224FieldElement.zero(), p224FieldElement); _tmp$3 = p224FieldElement.zero(); $copy(_tmp$3, p224FieldElement.zero(), p224FieldElement); _tmp$4 = p224FieldElement.zero(); $copy(_tmp$4, p224FieldElement.zero(), p224FieldElement); _tmp$5 = p224FieldElement.zero(); $copy(_tmp$5, p224FieldElement.zero(), p224FieldElement); x1 = p224FieldElement.zero(); $copy(x1, _tmp, p224FieldElement); y1 = p224FieldElement.zero(); $copy(y1, _tmp$1, p224FieldElement); z1 = p224FieldElement.zero(); $copy(z1, _tmp$2, p224FieldElement); x2 = p224FieldElement.zero(); $copy(x2, _tmp$3, p224FieldElement); y2 = p224FieldElement.zero(); $copy(y2, _tmp$4, p224FieldElement); z2 = p224FieldElement.zero(); $copy(z2, _tmp$5, p224FieldElement);
		p224FromBig(x1, bigX1);
		p224FromBig(y1, bigY1);
		z1[0] = 1;
		p224ScalarMult(x2, y2, z2, x1, y1, z1, scalar);
		_tuple = p224ToAffine(x2, y2, z2); x = _tuple[0]; y = _tuple[1];
		return [x, y];
	};
	p224Curve.prototype.ScalarMult = function(bigX1, bigY1, scalar) { return this.$val.ScalarMult(bigX1, bigY1, scalar); };
	p224Curve.Ptr.prototype.ScalarBaseMult = function(scalar) {
		var x = ($ptrType(big.Int)).nil, y = ($ptrType(big.Int)).nil, curve, _tmp, _tmp$1, _tmp$2, _tmp$3, z1, x2, y2, z2, _tuple;
		curve = new p224Curve.Ptr(); $copy(curve, this, p224Curve);
		_tmp = p224FieldElement.zero(); $copy(_tmp, p224FieldElement.zero(), p224FieldElement); _tmp$1 = p224FieldElement.zero(); $copy(_tmp$1, p224FieldElement.zero(), p224FieldElement); _tmp$2 = p224FieldElement.zero(); $copy(_tmp$2, p224FieldElement.zero(), p224FieldElement); _tmp$3 = p224FieldElement.zero(); $copy(_tmp$3, p224FieldElement.zero(), p224FieldElement); z1 = p224FieldElement.zero(); $copy(z1, _tmp, p224FieldElement); x2 = p224FieldElement.zero(); $copy(x2, _tmp$1, p224FieldElement); y2 = p224FieldElement.zero(); $copy(y2, _tmp$2, p224FieldElement); z2 = p224FieldElement.zero(); $copy(z2, _tmp$3, p224FieldElement);
		z1[0] = 1;
		p224ScalarMult(x2, y2, z2, curve.gx, curve.gy, z1, scalar);
		_tuple = p224ToAffine(x2, y2, z2); x = _tuple[0]; y = _tuple[1];
		return [x, y];
	};
	p224Curve.prototype.ScalarBaseMult = function(scalar) { return this.$val.ScalarBaseMult(scalar); };
	p224IsZero = function(a) {
		var minimal, _tmp, _tmp$1, isZero, isP, _ref, _i, i, v, result;
		minimal = p224FieldElement.zero(); $copy(minimal, p224FieldElement.zero(), p224FieldElement);
		p224Contract(minimal, a);
		_tmp = 0; _tmp$1 = 0; isZero = _tmp; isP = _tmp$1;
		_ref = minimal;
		_i = 0;
		while (_i < 8) {
			i = _i;
			v = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
			isZero = (isZero | (v)) >>> 0;
			isP = (isP | ((v - ((i < 0 || i >= p224P.length) ? $throwRuntimeError("index out of range") : p224P[i]) >>> 0))) >>> 0;
			_i++;
		}
		isZero = (isZero | ((isZero >>> 16 >>> 0))) >>> 0;
		isZero = (isZero | ((isZero >>> 8 >>> 0))) >>> 0;
		isZero = (isZero | ((isZero >>> 4 >>> 0))) >>> 0;
		isZero = (isZero | ((isZero >>> 2 >>> 0))) >>> 0;
		isZero = (isZero | ((isZero >>> 1 >>> 0))) >>> 0;
		isP = (isP | ((isP >>> 16 >>> 0))) >>> 0;
		isP = (isP | ((isP >>> 8 >>> 0))) >>> 0;
		isP = (isP | ((isP >>> 4 >>> 0))) >>> 0;
		isP = (isP | ((isP >>> 2 >>> 0))) >>> 0;
		isP = (isP | ((isP >>> 1 >>> 0))) >>> 0;
		result = (isZero & isP) >>> 0;
		result = (((~result >>> 0)) & 1) >>> 0;
		return result;
	};
	p224Add = function(out, a, b) {
		var i;
		i = 0;
		while (i < 8) {
			out.nilCheck, (i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (a.nilCheck, ((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i])) + (b.nilCheck, ((i < 0 || i >= b.length) ? $throwRuntimeError("index out of range") : b[i])) >>> 0;
			i = i + (1) >> 0;
		}
	};
	p224Sub = function(out, a, b) {
		var i;
		i = 0;
		while (i < 8) {
			out.nilCheck, (i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = ((a.nilCheck, ((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i])) + ((i < 0 || i >= p224ZeroModP31.$length) ? $throwRuntimeError("index out of range") : p224ZeroModP31.$array[p224ZeroModP31.$offset + i]) >>> 0) - (b.nilCheck, ((i < 0 || i >= b.length) ? $throwRuntimeError("index out of range") : b[i])) >>> 0;
			i = i + (1) >> 0;
		}
	};
	p224Mul = function(out, a, b, tmp) {
		var i, i$1, j, _lhs, _index, x, x$1;
		i = 0;
		while (i < 15) {
			tmp.nilCheck, (i < 0 || i >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[i] = new $Uint64(0, 0);
			i = i + (1) >> 0;
		}
		i$1 = 0;
		while (i$1 < 8) {
			j = 0;
			while (j < 8) {
				_lhs = tmp; _index = i$1 + j >> 0; _lhs.nilCheck, (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index] = (x = (_lhs.nilCheck, ((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index])), x$1 = $mul64(new $Uint64(0, (a.nilCheck, ((i$1 < 0 || i$1 >= a.length) ? $throwRuntimeError("index out of range") : a[i$1]))), new $Uint64(0, (b.nilCheck, ((j < 0 || j >= b.length) ? $throwRuntimeError("index out of range") : b[j])))), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
				j = j + (1) >> 0;
			}
			i$1 = i$1 + (1) >> 0;
		}
		p224ReduceLarge(out, tmp);
	};
	p224Square = function(out, a, tmp) {
		var i, i$1, j, r, _lhs, _index, x, x$1, _lhs$1, _index$1, x$2, x$3;
		i = 0;
		while (i < 15) {
			tmp.nilCheck, (i < 0 || i >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[i] = new $Uint64(0, 0);
			i = i + (1) >> 0;
		}
		i$1 = 0;
		while (i$1 < 8) {
			j = 0;
			while (j <= i$1) {
				r = $mul64(new $Uint64(0, (a.nilCheck, ((i$1 < 0 || i$1 >= a.length) ? $throwRuntimeError("index out of range") : a[i$1]))), new $Uint64(0, (a.nilCheck, ((j < 0 || j >= a.length) ? $throwRuntimeError("index out of range") : a[j]))));
				if (i$1 === j) {
					_lhs = tmp; _index = i$1 + j >> 0; _lhs.nilCheck, (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index] = (x = (_lhs.nilCheck, ((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index])), x$1 = r, new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
				} else {
					_lhs$1 = tmp; _index$1 = i$1 + j >> 0; _lhs$1.nilCheck, (_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1] = (x$2 = (_lhs$1.nilCheck, ((_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1])), x$3 = $shiftLeft64(r, 1), new $Uint64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
				}
				j = j + (1) >> 0;
			}
			i$1 = i$1 + (1) >> 0;
		}
		p224ReduceLarge(out, tmp);
	};
	p224ReduceLarge = function(out, in$1) {
		var i, _lhs, _index, x, x$1, i$1, _lhs$1, _index$1, x$2, x$3, _lhs$2, _index$2, x$4, x$5, x$6, _lhs$3, _index$3, x$7, x$8, i$2, _lhs$4, _index$4, x$9, x$10, x$11, _lhs$5, _index$5, x$12, x$13, _lhs$6, _index$6, x$14, _lhs$7, _index$7, x$15, _lhs$8, _index$8, x$16, _lhs$9, _index$9;
		i = 0;
		while (i < 8) {
			_lhs = in$1; _index = i; _lhs.nilCheck, (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index] = (x = (_lhs.nilCheck, ((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index])), x$1 = ((i < 0 || i >= p224ZeroModP63.length) ? $throwRuntimeError("index out of range") : p224ZeroModP63[i]), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
			i = i + (1) >> 0;
		}
		i$1 = 14;
		while (i$1 >= 8) {
			_lhs$1 = in$1; _index$1 = i$1 - 8 >> 0; _lhs$1.nilCheck, (_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1] = (x$2 = (_lhs$1.nilCheck, ((_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1])), x$3 = (in$1.nilCheck, ((i$1 < 0 || i$1 >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[i$1])), new $Uint64(x$2.$high - x$3.$high, x$2.$low - x$3.$low));
			_lhs$2 = in$1; _index$2 = i$1 - 5 >> 0; _lhs$2.nilCheck, (_index$2 < 0 || _index$2 >= _lhs$2.length) ? $throwRuntimeError("index out of range") : _lhs$2[_index$2] = (x$4 = (_lhs$2.nilCheck, ((_index$2 < 0 || _index$2 >= _lhs$2.length) ? $throwRuntimeError("index out of range") : _lhs$2[_index$2])), x$5 = $shiftLeft64(((x$6 = (in$1.nilCheck, ((i$1 < 0 || i$1 >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[i$1])), new $Uint64(x$6.$high & 0, (x$6.$low & 65535) >>> 0))), 12), new $Uint64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
			_lhs$3 = in$1; _index$3 = i$1 - 4 >> 0; _lhs$3.nilCheck, (_index$3 < 0 || _index$3 >= _lhs$3.length) ? $throwRuntimeError("index out of range") : _lhs$3[_index$3] = (x$7 = (_lhs$3.nilCheck, ((_index$3 < 0 || _index$3 >= _lhs$3.length) ? $throwRuntimeError("index out of range") : _lhs$3[_index$3])), x$8 = $shiftRightUint64((in$1.nilCheck, ((i$1 < 0 || i$1 >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[i$1])), 16), new $Uint64(x$7.$high + x$8.$high, x$7.$low + x$8.$low));
			i$1 = i$1 - (1) >> 0;
		}
		in$1.nilCheck, in$1[8] = new $Uint64(0, 0);
		i$2 = 1;
		while (i$2 < 8) {
			_lhs$4 = in$1; _index$4 = i$2 + 1 >> 0; _lhs$4.nilCheck, (_index$4 < 0 || _index$4 >= _lhs$4.length) ? $throwRuntimeError("index out of range") : _lhs$4[_index$4] = (x$9 = (_lhs$4.nilCheck, ((_index$4 < 0 || _index$4 >= _lhs$4.length) ? $throwRuntimeError("index out of range") : _lhs$4[_index$4])), x$10 = $shiftRightUint64((in$1.nilCheck, ((i$2 < 0 || i$2 >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[i$2])), 28), new $Uint64(x$9.$high + x$10.$high, x$9.$low + x$10.$low));
			out.nilCheck, (i$2 < 0 || i$2 >= out.length) ? $throwRuntimeError("index out of range") : out[i$2] = ((x$11 = (in$1.nilCheck, ((i$2 < 0 || i$2 >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[i$2])), new $Uint64(x$11.$high & 0, (x$11.$low & 268435455) >>> 0)).$low >>> 0);
			i$2 = i$2 + (1) >> 0;
		}
		_lhs$5 = in$1; _index$5 = 0; _lhs$5.nilCheck, (_index$5 < 0 || _index$5 >= _lhs$5.length) ? $throwRuntimeError("index out of range") : _lhs$5[_index$5] = (x$12 = (_lhs$5.nilCheck, ((_index$5 < 0 || _index$5 >= _lhs$5.length) ? $throwRuntimeError("index out of range") : _lhs$5[_index$5])), x$13 = (in$1.nilCheck, in$1[8]), new $Uint64(x$12.$high - x$13.$high, x$12.$low - x$13.$low));
		_lhs$6 = out; _index$6 = 3; _lhs$6.nilCheck, (_index$6 < 0 || _index$6 >= _lhs$6.length) ? $throwRuntimeError("index out of range") : _lhs$6[_index$6] = (_lhs$6.nilCheck, ((_index$6 < 0 || _index$6 >= _lhs$6.length) ? $throwRuntimeError("index out of range") : _lhs$6[_index$6])) + ((((x$14 = (in$1.nilCheck, in$1[8]), new $Uint64(x$14.$high & 0, (x$14.$low & 65535) >>> 0)).$low >>> 0) << 12 >>> 0)) >>> 0;
		_lhs$7 = out; _index$7 = 4; _lhs$7.nilCheck, (_index$7 < 0 || _index$7 >= _lhs$7.length) ? $throwRuntimeError("index out of range") : _lhs$7[_index$7] = (_lhs$7.nilCheck, ((_index$7 < 0 || _index$7 >= _lhs$7.length) ? $throwRuntimeError("index out of range") : _lhs$7[_index$7])) + (($shiftRightUint64((in$1.nilCheck, in$1[8]), 16).$low >>> 0)) >>> 0;
		out.nilCheck, out[0] = ((x$15 = (in$1.nilCheck, in$1[0]), new $Uint64(x$15.$high & 0, (x$15.$low & 268435455) >>> 0)).$low >>> 0);
		_lhs$8 = out; _index$8 = 1; _lhs$8.nilCheck, (_index$8 < 0 || _index$8 >= _lhs$8.length) ? $throwRuntimeError("index out of range") : _lhs$8[_index$8] = (_lhs$8.nilCheck, ((_index$8 < 0 || _index$8 >= _lhs$8.length) ? $throwRuntimeError("index out of range") : _lhs$8[_index$8])) + (((x$16 = $shiftRightUint64((in$1.nilCheck, in$1[0]), 28), new $Uint64(x$16.$high & 0, (x$16.$low & 268435455) >>> 0)).$low >>> 0)) >>> 0;
		_lhs$9 = out; _index$9 = 2; _lhs$9.nilCheck, (_index$9 < 0 || _index$9 >= _lhs$9.length) ? $throwRuntimeError("index out of range") : _lhs$9[_index$9] = (_lhs$9.nilCheck, ((_index$9 < 0 || _index$9 >= _lhs$9.length) ? $throwRuntimeError("index out of range") : _lhs$9[_index$9])) + (($shiftRightUint64((in$1.nilCheck, in$1[0]), 56).$low >>> 0)) >>> 0;
	};
	p224Reduce = function(a) {
		var i, _lhs, _index, _lhs$1, _index$1, top, _lhs$2, _index$2, mask$1, y, _lhs$3, _index$3, _lhs$4, _index$4, _lhs$5, _index$5, _lhs$6, _index$6, _lhs$7, _index$7, _lhs$8, _index$8;
		i = 0;
		while (i < 7) {
			_lhs = a; _index = i + 1 >> 0; _lhs.nilCheck, (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index] = (_lhs.nilCheck, ((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index])) + (((a.nilCheck, ((i < 0 || i >= a.length) ? $throwRuntimeError("index out of range") : a[i])) >>> 28 >>> 0)) >>> 0;
			_lhs$1 = a; _index$1 = i; _lhs$1.nilCheck, (_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1] = ((_lhs$1.nilCheck, ((_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1])) & (268435455)) >>> 0;
			i = i + (1) >> 0;
		}
		top = (a.nilCheck, a[7]) >>> 28 >>> 0;
		_lhs$2 = a; _index$2 = 7; _lhs$2.nilCheck, (_index$2 < 0 || _index$2 >= _lhs$2.length) ? $throwRuntimeError("index out of range") : _lhs$2[_index$2] = ((_lhs$2.nilCheck, ((_index$2 < 0 || _index$2 >= _lhs$2.length) ? $throwRuntimeError("index out of range") : _lhs$2[_index$2])) & (268435455)) >>> 0;
		mask$1 = top;
		mask$1 = (mask$1 | ((mask$1 >>> 2 >>> 0))) >>> 0;
		mask$1 = (mask$1 | ((mask$1 >>> 1 >>> 0))) >>> 0;
		mask$1 = (y = (31), y < 32 ? (mask$1 << y) : 0) >>> 0;
		mask$1 = (((mask$1 >> 0) >> 31 >> 0) >>> 0);
		_lhs$3 = a; _index$3 = 0; _lhs$3.nilCheck, (_index$3 < 0 || _index$3 >= _lhs$3.length) ? $throwRuntimeError("index out of range") : _lhs$3[_index$3] = (_lhs$3.nilCheck, ((_index$3 < 0 || _index$3 >= _lhs$3.length) ? $throwRuntimeError("index out of range") : _lhs$3[_index$3])) - (top) >>> 0;
		_lhs$4 = a; _index$4 = 3; _lhs$4.nilCheck, (_index$4 < 0 || _index$4 >= _lhs$4.length) ? $throwRuntimeError("index out of range") : _lhs$4[_index$4] = (_lhs$4.nilCheck, ((_index$4 < 0 || _index$4 >= _lhs$4.length) ? $throwRuntimeError("index out of range") : _lhs$4[_index$4])) + ((top << 12 >>> 0)) >>> 0;
		_lhs$5 = a; _index$5 = 3; _lhs$5.nilCheck, (_index$5 < 0 || _index$5 >= _lhs$5.length) ? $throwRuntimeError("index out of range") : _lhs$5[_index$5] = (_lhs$5.nilCheck, ((_index$5 < 0 || _index$5 >= _lhs$5.length) ? $throwRuntimeError("index out of range") : _lhs$5[_index$5])) - (((1 & mask$1) >>> 0)) >>> 0;
		_lhs$6 = a; _index$6 = 2; _lhs$6.nilCheck, (_index$6 < 0 || _index$6 >= _lhs$6.length) ? $throwRuntimeError("index out of range") : _lhs$6[_index$6] = (_lhs$6.nilCheck, ((_index$6 < 0 || _index$6 >= _lhs$6.length) ? $throwRuntimeError("index out of range") : _lhs$6[_index$6])) + (((mask$1 & 268435455) >>> 0)) >>> 0;
		_lhs$7 = a; _index$7 = 1; _lhs$7.nilCheck, (_index$7 < 0 || _index$7 >= _lhs$7.length) ? $throwRuntimeError("index out of range") : _lhs$7[_index$7] = (_lhs$7.nilCheck, ((_index$7 < 0 || _index$7 >= _lhs$7.length) ? $throwRuntimeError("index out of range") : _lhs$7[_index$7])) + (((mask$1 & 268435455) >>> 0)) >>> 0;
		_lhs$8 = a; _index$8 = 0; _lhs$8.nilCheck, (_index$8 < 0 || _index$8 >= _lhs$8.length) ? $throwRuntimeError("index out of range") : _lhs$8[_index$8] = (_lhs$8.nilCheck, ((_index$8 < 0 || _index$8 >= _lhs$8.length) ? $throwRuntimeError("index out of range") : _lhs$8[_index$8])) + (((mask$1 & 268435456) >>> 0)) >>> 0;
	};
	p224Invert = function(out, in$1) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, f1, f2, f3, f4, c, i, i$1, i$2, i$3, i$4, i$5, i$6;
		_tmp = p224FieldElement.zero(); $copy(_tmp, p224FieldElement.zero(), p224FieldElement); _tmp$1 = p224FieldElement.zero(); $copy(_tmp$1, p224FieldElement.zero(), p224FieldElement); _tmp$2 = p224FieldElement.zero(); $copy(_tmp$2, p224FieldElement.zero(), p224FieldElement); _tmp$3 = p224FieldElement.zero(); $copy(_tmp$3, p224FieldElement.zero(), p224FieldElement); f1 = p224FieldElement.zero(); $copy(f1, _tmp, p224FieldElement); f2 = p224FieldElement.zero(); $copy(f2, _tmp$1, p224FieldElement); f3 = p224FieldElement.zero(); $copy(f3, _tmp$2, p224FieldElement); f4 = p224FieldElement.zero(); $copy(f4, _tmp$3, p224FieldElement);
		c = p224LargeFieldElement.zero(); $copy(c, p224LargeFieldElement.zero(), p224LargeFieldElement);
		p224Square(f1, in$1, c);
		p224Mul(f1, f1, in$1, c);
		p224Square(f1, f1, c);
		p224Mul(f1, f1, in$1, c);
		p224Square(f2, f1, c);
		p224Square(f2, f2, c);
		p224Square(f2, f2, c);
		p224Mul(f1, f1, f2, c);
		p224Square(f2, f1, c);
		i = 0;
		while (i < 5) {
			p224Square(f2, f2, c);
			i = i + (1) >> 0;
		}
		p224Mul(f2, f2, f1, c);
		p224Square(f3, f2, c);
		i$1 = 0;
		while (i$1 < 11) {
			p224Square(f3, f3, c);
			i$1 = i$1 + (1) >> 0;
		}
		p224Mul(f2, f3, f2, c);
		p224Square(f3, f2, c);
		i$2 = 0;
		while (i$2 < 23) {
			p224Square(f3, f3, c);
			i$2 = i$2 + (1) >> 0;
		}
		p224Mul(f3, f3, f2, c);
		p224Square(f4, f3, c);
		i$3 = 0;
		while (i$3 < 47) {
			p224Square(f4, f4, c);
			i$3 = i$3 + (1) >> 0;
		}
		p224Mul(f3, f3, f4, c);
		p224Square(f4, f3, c);
		i$4 = 0;
		while (i$4 < 23) {
			p224Square(f4, f4, c);
			i$4 = i$4 + (1) >> 0;
		}
		p224Mul(f2, f4, f2, c);
		i$5 = 0;
		while (i$5 < 6) {
			p224Square(f2, f2, c);
			i$5 = i$5 + (1) >> 0;
		}
		p224Mul(f1, f1, f2, c);
		p224Square(f1, f1, c);
		p224Mul(f1, f1, in$1, c);
		i$6 = 0;
		while (i$6 < 97) {
			p224Square(f1, f1, c);
			i$6 = i$6 + (1) >> 0;
		}
		p224Mul(out, f1, f3, c);
	};
	p224Contract = function(out, in$1) {
		var i, _lhs, _index, _lhs$1, _index$1, top, _lhs$2, _index$2, _lhs$3, _index$3, _lhs$4, _index$4, i$1, mask$1, _lhs$5, _index$5, _lhs$6, _index$6, i$2, _lhs$7, _index$7, _lhs$8, _index$8, _lhs$9, _index$9, _lhs$10, _index$10, _lhs$11, _index$11, i$3, mask$2, _lhs$12, _index$12, _lhs$13, _index$13, top4AllOnes, i$4, bottom3NonZero, n, out3Equal, out3GT, mask$3, _lhs$14, _index$14, _lhs$15, _index$15, _lhs$16, _index$16, _lhs$17, _index$17, _lhs$18, _index$18, _lhs$19, _index$19;
		$copySlice(new ($sliceType($Uint32))(out), new ($sliceType($Uint32))(in$1));
		i = 0;
		while (i < 7) {
			_lhs = out; _index = i + 1 >> 0; _lhs.nilCheck, (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index] = (_lhs.nilCheck, ((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index])) + (((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 28 >>> 0)) >>> 0;
			_lhs$1 = out; _index$1 = i; _lhs$1.nilCheck, (_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1] = ((_lhs$1.nilCheck, ((_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1])) & (268435455)) >>> 0;
			i = i + (1) >> 0;
		}
		top = (out.nilCheck, out[7]) >>> 28 >>> 0;
		_lhs$2 = out; _index$2 = 7; _lhs$2.nilCheck, (_index$2 < 0 || _index$2 >= _lhs$2.length) ? $throwRuntimeError("index out of range") : _lhs$2[_index$2] = ((_lhs$2.nilCheck, ((_index$2 < 0 || _index$2 >= _lhs$2.length) ? $throwRuntimeError("index out of range") : _lhs$2[_index$2])) & (268435455)) >>> 0;
		_lhs$3 = out; _index$3 = 0; _lhs$3.nilCheck, (_index$3 < 0 || _index$3 >= _lhs$3.length) ? $throwRuntimeError("index out of range") : _lhs$3[_index$3] = (_lhs$3.nilCheck, ((_index$3 < 0 || _index$3 >= _lhs$3.length) ? $throwRuntimeError("index out of range") : _lhs$3[_index$3])) - (top) >>> 0;
		_lhs$4 = out; _index$4 = 3; _lhs$4.nilCheck, (_index$4 < 0 || _index$4 >= _lhs$4.length) ? $throwRuntimeError("index out of range") : _lhs$4[_index$4] = (_lhs$4.nilCheck, ((_index$4 < 0 || _index$4 >= _lhs$4.length) ? $throwRuntimeError("index out of range") : _lhs$4[_index$4])) + ((top << 12 >>> 0)) >>> 0;
		i$1 = 0;
		while (i$1 < 3) {
			mask$1 = ((((out.nilCheck, ((i$1 < 0 || i$1 >= out.length) ? $throwRuntimeError("index out of range") : out[i$1])) >> 0) >> 31 >> 0) >>> 0);
			_lhs$5 = out; _index$5 = i$1; _lhs$5.nilCheck, (_index$5 < 0 || _index$5 >= _lhs$5.length) ? $throwRuntimeError("index out of range") : _lhs$5[_index$5] = (_lhs$5.nilCheck, ((_index$5 < 0 || _index$5 >= _lhs$5.length) ? $throwRuntimeError("index out of range") : _lhs$5[_index$5])) + (((268435456 & mask$1) >>> 0)) >>> 0;
			_lhs$6 = out; _index$6 = i$1 + 1 >> 0; _lhs$6.nilCheck, (_index$6 < 0 || _index$6 >= _lhs$6.length) ? $throwRuntimeError("index out of range") : _lhs$6[_index$6] = (_lhs$6.nilCheck, ((_index$6 < 0 || _index$6 >= _lhs$6.length) ? $throwRuntimeError("index out of range") : _lhs$6[_index$6])) - (((1 & mask$1) >>> 0)) >>> 0;
			i$1 = i$1 + (1) >> 0;
		}
		i$2 = 3;
		while (i$2 < 7) {
			_lhs$7 = out; _index$7 = i$2 + 1 >> 0; _lhs$7.nilCheck, (_index$7 < 0 || _index$7 >= _lhs$7.length) ? $throwRuntimeError("index out of range") : _lhs$7[_index$7] = (_lhs$7.nilCheck, ((_index$7 < 0 || _index$7 >= _lhs$7.length) ? $throwRuntimeError("index out of range") : _lhs$7[_index$7])) + (((out.nilCheck, ((i$2 < 0 || i$2 >= out.length) ? $throwRuntimeError("index out of range") : out[i$2])) >>> 28 >>> 0)) >>> 0;
			_lhs$8 = out; _index$8 = i$2; _lhs$8.nilCheck, (_index$8 < 0 || _index$8 >= _lhs$8.length) ? $throwRuntimeError("index out of range") : _lhs$8[_index$8] = ((_lhs$8.nilCheck, ((_index$8 < 0 || _index$8 >= _lhs$8.length) ? $throwRuntimeError("index out of range") : _lhs$8[_index$8])) & (268435455)) >>> 0;
			i$2 = i$2 + (1) >> 0;
		}
		top = (out.nilCheck, out[7]) >>> 28 >>> 0;
		_lhs$9 = out; _index$9 = 7; _lhs$9.nilCheck, (_index$9 < 0 || _index$9 >= _lhs$9.length) ? $throwRuntimeError("index out of range") : _lhs$9[_index$9] = ((_lhs$9.nilCheck, ((_index$9 < 0 || _index$9 >= _lhs$9.length) ? $throwRuntimeError("index out of range") : _lhs$9[_index$9])) & (268435455)) >>> 0;
		_lhs$10 = out; _index$10 = 0; _lhs$10.nilCheck, (_index$10 < 0 || _index$10 >= _lhs$10.length) ? $throwRuntimeError("index out of range") : _lhs$10[_index$10] = (_lhs$10.nilCheck, ((_index$10 < 0 || _index$10 >= _lhs$10.length) ? $throwRuntimeError("index out of range") : _lhs$10[_index$10])) - (top) >>> 0;
		_lhs$11 = out; _index$11 = 3; _lhs$11.nilCheck, (_index$11 < 0 || _index$11 >= _lhs$11.length) ? $throwRuntimeError("index out of range") : _lhs$11[_index$11] = (_lhs$11.nilCheck, ((_index$11 < 0 || _index$11 >= _lhs$11.length) ? $throwRuntimeError("index out of range") : _lhs$11[_index$11])) + ((top << 12 >>> 0)) >>> 0;
		i$3 = 0;
		while (i$3 < 3) {
			mask$2 = ((((out.nilCheck, ((i$3 < 0 || i$3 >= out.length) ? $throwRuntimeError("index out of range") : out[i$3])) >> 0) >> 31 >> 0) >>> 0);
			_lhs$12 = out; _index$12 = i$3; _lhs$12.nilCheck, (_index$12 < 0 || _index$12 >= _lhs$12.length) ? $throwRuntimeError("index out of range") : _lhs$12[_index$12] = (_lhs$12.nilCheck, ((_index$12 < 0 || _index$12 >= _lhs$12.length) ? $throwRuntimeError("index out of range") : _lhs$12[_index$12])) + (((268435456 & mask$2) >>> 0)) >>> 0;
			_lhs$13 = out; _index$13 = i$3 + 1 >> 0; _lhs$13.nilCheck, (_index$13 < 0 || _index$13 >= _lhs$13.length) ? $throwRuntimeError("index out of range") : _lhs$13[_index$13] = (_lhs$13.nilCheck, ((_index$13 < 0 || _index$13 >= _lhs$13.length) ? $throwRuntimeError("index out of range") : _lhs$13[_index$13])) - (((1 & mask$2) >>> 0)) >>> 0;
			i$3 = i$3 + (1) >> 0;
		}
		top4AllOnes = 4294967295;
		i$4 = 4;
		while (i$4 < 8) {
			top4AllOnes = (top4AllOnes & ((out.nilCheck, ((i$4 < 0 || i$4 >= out.length) ? $throwRuntimeError("index out of range") : out[i$4])))) >>> 0;
			i$4 = i$4 + (1) >> 0;
		}
		top4AllOnes = (top4AllOnes | (4026531840)) >>> 0;
		top4AllOnes = (top4AllOnes & ((top4AllOnes >>> 16 >>> 0))) >>> 0;
		top4AllOnes = (top4AllOnes & ((top4AllOnes >>> 8 >>> 0))) >>> 0;
		top4AllOnes = (top4AllOnes & ((top4AllOnes >>> 4 >>> 0))) >>> 0;
		top4AllOnes = (top4AllOnes & ((top4AllOnes >>> 2 >>> 0))) >>> 0;
		top4AllOnes = (top4AllOnes & ((top4AllOnes >>> 1 >>> 0))) >>> 0;
		top4AllOnes = ((((top4AllOnes << 31 >>> 0) >> 0) >> 31 >> 0) >>> 0);
		bottom3NonZero = ((((out.nilCheck, out[0]) | (out.nilCheck, out[1])) >>> 0) | (out.nilCheck, out[2])) >>> 0;
		bottom3NonZero = (bottom3NonZero | ((bottom3NonZero >>> 16 >>> 0))) >>> 0;
		bottom3NonZero = (bottom3NonZero | ((bottom3NonZero >>> 8 >>> 0))) >>> 0;
		bottom3NonZero = (bottom3NonZero | ((bottom3NonZero >>> 4 >>> 0))) >>> 0;
		bottom3NonZero = (bottom3NonZero | ((bottom3NonZero >>> 2 >>> 0))) >>> 0;
		bottom3NonZero = (bottom3NonZero | ((bottom3NonZero >>> 1 >>> 0))) >>> 0;
		bottom3NonZero = ((((bottom3NonZero << 31 >>> 0) >> 0) >> 31 >> 0) >>> 0);
		n = (out.nilCheck, out[3]) - 268431360 >>> 0;
		out3Equal = n;
		out3Equal = (out3Equal | ((out3Equal >>> 16 >>> 0))) >>> 0;
		out3Equal = (out3Equal | ((out3Equal >>> 8 >>> 0))) >>> 0;
		out3Equal = (out3Equal | ((out3Equal >>> 4 >>> 0))) >>> 0;
		out3Equal = (out3Equal | ((out3Equal >>> 2 >>> 0))) >>> 0;
		out3Equal = (out3Equal | ((out3Equal >>> 1 >>> 0))) >>> 0;
		out3Equal = ~((((out3Equal << 31 >>> 0) >> 0) >> 31 >> 0) >>> 0) >>> 0;
		out3GT = ~(((n >> 0) >> 31 >> 0) >>> 0) >>> 0;
		mask$3 = (top4AllOnes & ((((((out3Equal & bottom3NonZero) >>> 0)) | out3GT) >>> 0))) >>> 0;
		_lhs$14 = out; _index$14 = 0; _lhs$14.nilCheck, (_index$14 < 0 || _index$14 >= _lhs$14.length) ? $throwRuntimeError("index out of range") : _lhs$14[_index$14] = (_lhs$14.nilCheck, ((_index$14 < 0 || _index$14 >= _lhs$14.length) ? $throwRuntimeError("index out of range") : _lhs$14[_index$14])) - (((1 & mask$3) >>> 0)) >>> 0;
		_lhs$15 = out; _index$15 = 3; _lhs$15.nilCheck, (_index$15 < 0 || _index$15 >= _lhs$15.length) ? $throwRuntimeError("index out of range") : _lhs$15[_index$15] = (_lhs$15.nilCheck, ((_index$15 < 0 || _index$15 >= _lhs$15.length) ? $throwRuntimeError("index out of range") : _lhs$15[_index$15])) - (((268431360 & mask$3) >>> 0)) >>> 0;
		_lhs$16 = out; _index$16 = 4; _lhs$16.nilCheck, (_index$16 < 0 || _index$16 >= _lhs$16.length) ? $throwRuntimeError("index out of range") : _lhs$16[_index$16] = (_lhs$16.nilCheck, ((_index$16 < 0 || _index$16 >= _lhs$16.length) ? $throwRuntimeError("index out of range") : _lhs$16[_index$16])) - (((268435455 & mask$3) >>> 0)) >>> 0;
		_lhs$17 = out; _index$17 = 5; _lhs$17.nilCheck, (_index$17 < 0 || _index$17 >= _lhs$17.length) ? $throwRuntimeError("index out of range") : _lhs$17[_index$17] = (_lhs$17.nilCheck, ((_index$17 < 0 || _index$17 >= _lhs$17.length) ? $throwRuntimeError("index out of range") : _lhs$17[_index$17])) - (((268435455 & mask$3) >>> 0)) >>> 0;
		_lhs$18 = out; _index$18 = 6; _lhs$18.nilCheck, (_index$18 < 0 || _index$18 >= _lhs$18.length) ? $throwRuntimeError("index out of range") : _lhs$18[_index$18] = (_lhs$18.nilCheck, ((_index$18 < 0 || _index$18 >= _lhs$18.length) ? $throwRuntimeError("index out of range") : _lhs$18[_index$18])) - (((268435455 & mask$3) >>> 0)) >>> 0;
		_lhs$19 = out; _index$19 = 7; _lhs$19.nilCheck, (_index$19 < 0 || _index$19 >= _lhs$19.length) ? $throwRuntimeError("index out of range") : _lhs$19[_index$19] = (_lhs$19.nilCheck, ((_index$19 < 0 || _index$19 >= _lhs$19.length) ? $throwRuntimeError("index out of range") : _lhs$19[_index$19])) - (((268435455 & mask$3) >>> 0)) >>> 0;
	};
	p224AddJacobian = function(x3, y3, z3, x1, y1, z1, x2, y2, z2) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tmp$10, z1z1, z2z2, u1, u2, s1, s2, h, i, j, r, v, c, z1IsZero, z2IsZero, xEqual, j$1, yEqual, i$1, _lhs, _index, y, i$2, i$3, _lhs$1, _index$1, y$1;
		_tmp = p224FieldElement.zero(); $copy(_tmp, p224FieldElement.zero(), p224FieldElement); _tmp$1 = p224FieldElement.zero(); $copy(_tmp$1, p224FieldElement.zero(), p224FieldElement); _tmp$2 = p224FieldElement.zero(); $copy(_tmp$2, p224FieldElement.zero(), p224FieldElement); _tmp$3 = p224FieldElement.zero(); $copy(_tmp$3, p224FieldElement.zero(), p224FieldElement); _tmp$4 = p224FieldElement.zero(); $copy(_tmp$4, p224FieldElement.zero(), p224FieldElement); _tmp$5 = p224FieldElement.zero(); $copy(_tmp$5, p224FieldElement.zero(), p224FieldElement); _tmp$6 = p224FieldElement.zero(); $copy(_tmp$6, p224FieldElement.zero(), p224FieldElement); _tmp$7 = p224FieldElement.zero(); $copy(_tmp$7, p224FieldElement.zero(), p224FieldElement); _tmp$8 = p224FieldElement.zero(); $copy(_tmp$8, p224FieldElement.zero(), p224FieldElement); _tmp$9 = p224FieldElement.zero(); $copy(_tmp$9, p224FieldElement.zero(), p224FieldElement); _tmp$10 = p224FieldElement.zero(); $copy(_tmp$10, p224FieldElement.zero(), p224FieldElement); z1z1 = p224FieldElement.zero(); $copy(z1z1, _tmp, p224FieldElement); z2z2 = p224FieldElement.zero(); $copy(z2z2, _tmp$1, p224FieldElement); u1 = p224FieldElement.zero(); $copy(u1, _tmp$2, p224FieldElement); u2 = p224FieldElement.zero(); $copy(u2, _tmp$3, p224FieldElement); s1 = p224FieldElement.zero(); $copy(s1, _tmp$4, p224FieldElement); s2 = p224FieldElement.zero(); $copy(s2, _tmp$5, p224FieldElement); h = p224FieldElement.zero(); $copy(h, _tmp$6, p224FieldElement); i = p224FieldElement.zero(); $copy(i, _tmp$7, p224FieldElement); j = p224FieldElement.zero(); $copy(j, _tmp$8, p224FieldElement); r = p224FieldElement.zero(); $copy(r, _tmp$9, p224FieldElement); v = p224FieldElement.zero(); $copy(v, _tmp$10, p224FieldElement);
		c = p224LargeFieldElement.zero(); $copy(c, p224LargeFieldElement.zero(), p224LargeFieldElement);
		z1IsZero = p224IsZero(z1);
		z2IsZero = p224IsZero(z2);
		p224Square(z1z1, z1, c);
		p224Square(z2z2, z2, c);
		p224Mul(u1, x1, z2z2, c);
		p224Mul(u2, x2, z1z1, c);
		p224Mul(s1, z2, z2z2, c);
		p224Mul(s1, y1, s1, c);
		p224Mul(s2, z1, z1z1, c);
		p224Mul(s2, y2, s2, c);
		p224Sub(h, u2, u1);
		p224Reduce(h);
		xEqual = p224IsZero(h);
		j$1 = 0;
		while (j$1 < 8) {
			(j$1 < 0 || j$1 >= i.length) ? $throwRuntimeError("index out of range") : i[j$1] = ((j$1 < 0 || j$1 >= h.length) ? $throwRuntimeError("index out of range") : h[j$1]) << 1 >>> 0;
			j$1 = j$1 + (1) >> 0;
		}
		p224Reduce(i);
		p224Square(i, i, c);
		p224Mul(j, h, i, c);
		p224Sub(r, s2, s1);
		p224Reduce(r);
		yEqual = p224IsZero(r);
		if ((xEqual === 1) && (yEqual === 1) && (z1IsZero === 0) && (z2IsZero === 0)) {
			p224DoubleJacobian(x3, y3, z3, x1, y1, z1);
			return;
		}
		i$1 = 0;
		while (i$1 < 8) {
			_lhs = r; _index = i$1; (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index] = (y = (1), y < 32 ? (((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index]) << y) : 0) >>> 0;
			i$1 = i$1 + (1) >> 0;
		}
		p224Reduce(r);
		p224Mul(v, u1, i, c);
		p224Add(z1z1, z1z1, z2z2);
		p224Add(z2z2, z1, z2);
		p224Reduce(z2z2);
		p224Square(z2z2, z2z2, c);
		p224Sub(z3, z2z2, z1z1);
		p224Reduce(z3);
		p224Mul(z3, z3, h, c);
		i$2 = 0;
		while (i$2 < 8) {
			(i$2 < 0 || i$2 >= z1z1.length) ? $throwRuntimeError("index out of range") : z1z1[i$2] = ((i$2 < 0 || i$2 >= v.length) ? $throwRuntimeError("index out of range") : v[i$2]) << 1 >>> 0;
			i$2 = i$2 + (1) >> 0;
		}
		p224Add(z1z1, j, z1z1);
		p224Reduce(z1z1);
		p224Square(x3, r, c);
		p224Sub(x3, x3, z1z1);
		p224Reduce(x3);
		i$3 = 0;
		while (i$3 < 8) {
			_lhs$1 = s1; _index$1 = i$3; (_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1] = (y$1 = (1), y$1 < 32 ? (((_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1]) << y$1) : 0) >>> 0;
			i$3 = i$3 + (1) >> 0;
		}
		p224Mul(s1, s1, j, c);
		p224Sub(z1z1, v, x3);
		p224Reduce(z1z1);
		p224Mul(z1z1, z1z1, r, c);
		p224Sub(y3, z1z1, s1);
		p224Reduce(y3);
		p224CopyConditional(x3, x2, z1IsZero);
		p224CopyConditional(x3, x1, z2IsZero);
		p224CopyConditional(y3, y2, z1IsZero);
		p224CopyConditional(y3, y1, z2IsZero);
		p224CopyConditional(z3, z2, z1IsZero);
		p224CopyConditional(z3, z1, z2IsZero);
	};
	p224DoubleJacobian = function(x3, y3, z3, x1, y1, z1) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, delta, gamma, beta, alpha, t, c, i, _lhs, _index, i$1, i$2, _lhs$1, _index$1, y, i$3, _lhs$2, _index$2, y$1;
		_tmp = p224FieldElement.zero(); $copy(_tmp, p224FieldElement.zero(), p224FieldElement); _tmp$1 = p224FieldElement.zero(); $copy(_tmp$1, p224FieldElement.zero(), p224FieldElement); _tmp$2 = p224FieldElement.zero(); $copy(_tmp$2, p224FieldElement.zero(), p224FieldElement); _tmp$3 = p224FieldElement.zero(); $copy(_tmp$3, p224FieldElement.zero(), p224FieldElement); _tmp$4 = p224FieldElement.zero(); $copy(_tmp$4, p224FieldElement.zero(), p224FieldElement); delta = p224FieldElement.zero(); $copy(delta, _tmp, p224FieldElement); gamma = p224FieldElement.zero(); $copy(gamma, _tmp$1, p224FieldElement); beta = p224FieldElement.zero(); $copy(beta, _tmp$2, p224FieldElement); alpha = p224FieldElement.zero(); $copy(alpha, _tmp$3, p224FieldElement); t = p224FieldElement.zero(); $copy(t, _tmp$4, p224FieldElement);
		c = p224LargeFieldElement.zero(); $copy(c, p224LargeFieldElement.zero(), p224LargeFieldElement);
		p224Square(delta, z1, c);
		p224Square(gamma, y1, c);
		p224Mul(beta, x1, gamma, c);
		p224Add(t, x1, delta);
		i = 0;
		while (i < 8) {
			_lhs = t; _index = i; (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index] = ((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index]) + ((((i < 0 || i >= t.length) ? $throwRuntimeError("index out of range") : t[i]) << 1 >>> 0)) >>> 0;
			i = i + (1) >> 0;
		}
		p224Reduce(t);
		p224Sub(alpha, x1, delta);
		p224Reduce(alpha);
		p224Mul(alpha, alpha, t, c);
		p224Add(z3, y1, z1);
		p224Reduce(z3);
		p224Square(z3, z3, c);
		p224Sub(z3, z3, gamma);
		p224Reduce(z3);
		p224Sub(z3, z3, delta);
		p224Reduce(z3);
		i$1 = 0;
		while (i$1 < 8) {
			(i$1 < 0 || i$1 >= delta.length) ? $throwRuntimeError("index out of range") : delta[i$1] = ((i$1 < 0 || i$1 >= beta.length) ? $throwRuntimeError("index out of range") : beta[i$1]) << 3 >>> 0;
			i$1 = i$1 + (1) >> 0;
		}
		p224Reduce(delta);
		p224Square(x3, alpha, c);
		p224Sub(x3, x3, delta);
		p224Reduce(x3);
		i$2 = 0;
		while (i$2 < 8) {
			_lhs$1 = beta; _index$1 = i$2; (_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1] = (y = (2), y < 32 ? (((_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1]) << y) : 0) >>> 0;
			i$2 = i$2 + (1) >> 0;
		}
		p224Sub(beta, beta, x3);
		p224Reduce(beta);
		p224Square(gamma, gamma, c);
		i$3 = 0;
		while (i$3 < 8) {
			_lhs$2 = gamma; _index$2 = i$3; (_index$2 < 0 || _index$2 >= _lhs$2.length) ? $throwRuntimeError("index out of range") : _lhs$2[_index$2] = (y$1 = (3), y$1 < 32 ? (((_index$2 < 0 || _index$2 >= _lhs$2.length) ? $throwRuntimeError("index out of range") : _lhs$2[_index$2]) << y$1) : 0) >>> 0;
			i$3 = i$3 + (1) >> 0;
		}
		p224Reduce(gamma);
		p224Mul(y3, alpha, beta, c);
		p224Sub(y3, y3, gamma);
		p224Reduce(y3);
	};
	p224CopyConditional = function(out, in$1, control) {
		var y, i, _lhs, _index;
		control = (y = (31), y < 32 ? (control << y) : 0) >>> 0;
		control = (((control >> 0) >> 31 >> 0) >>> 0);
		i = 0;
		while (i < 8) {
			_lhs = out; _index = i; _lhs.nilCheck, (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index] = ((_lhs.nilCheck, ((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index])) ^ (((((((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) ^ (in$1.nilCheck, ((i < 0 || i >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[i]))) >>> 0)) & control) >>> 0))) >>> 0;
			i = i + (1) >> 0;
		}
	};
	p224ScalarMult = function(outX, outY, outZ, inX, inY, inZ, scalar) {
		var _tmp, _tmp$1, _tmp$2, xx, yy, zz, i, _ref, _i, byte$1, bitNum, y, bit;
		_tmp = p224FieldElement.zero(); $copy(_tmp, p224FieldElement.zero(), p224FieldElement); _tmp$1 = p224FieldElement.zero(); $copy(_tmp$1, p224FieldElement.zero(), p224FieldElement); _tmp$2 = p224FieldElement.zero(); $copy(_tmp$2, p224FieldElement.zero(), p224FieldElement); xx = p224FieldElement.zero(); $copy(xx, _tmp, p224FieldElement); yy = p224FieldElement.zero(); $copy(yy, _tmp$1, p224FieldElement); zz = p224FieldElement.zero(); $copy(zz, _tmp$2, p224FieldElement);
		i = 0;
		while (i < 8) {
			outX.nilCheck, (i < 0 || i >= outX.length) ? $throwRuntimeError("index out of range") : outX[i] = 0;
			outY.nilCheck, (i < 0 || i >= outY.length) ? $throwRuntimeError("index out of range") : outY[i] = 0;
			outZ.nilCheck, (i < 0 || i >= outZ.length) ? $throwRuntimeError("index out of range") : outZ[i] = 0;
			i = i + (1) >> 0;
		}
		_ref = scalar;
		_i = 0;
		while (_i < _ref.$length) {
			byte$1 = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			bitNum = 0;
			while (bitNum < 8) {
				p224DoubleJacobian(outX, outY, outZ, outX, outY, outZ);
				bit = ((((((y = ((7 - bitNum >>> 0)), y < 32 ? (byte$1 >>> y) : 0) << 24 >>> 24)) & 1) >>> 0) >>> 0);
				p224AddJacobian(xx, yy, zz, inX, inY, inZ, outX, outY, outZ);
				p224CopyConditional(outX, xx, bit);
				p224CopyConditional(outY, yy, bit);
				p224CopyConditional(outZ, zz, bit);
				bitNum = bitNum + (1) >>> 0;
			}
			_i++;
		}
	};
	p224ToAffine = function(x, y, z) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, zinv, zinvsq, outx, outy, tmp, isPointAtInfinity;
		_tmp = p224FieldElement.zero(); $copy(_tmp, p224FieldElement.zero(), p224FieldElement); _tmp$1 = p224FieldElement.zero(); $copy(_tmp$1, p224FieldElement.zero(), p224FieldElement); _tmp$2 = p224FieldElement.zero(); $copy(_tmp$2, p224FieldElement.zero(), p224FieldElement); _tmp$3 = p224FieldElement.zero(); $copy(_tmp$3, p224FieldElement.zero(), p224FieldElement); zinv = p224FieldElement.zero(); $copy(zinv, _tmp, p224FieldElement); zinvsq = p224FieldElement.zero(); $copy(zinvsq, _tmp$1, p224FieldElement); outx = p224FieldElement.zero(); $copy(outx, _tmp$2, p224FieldElement); outy = p224FieldElement.zero(); $copy(outy, _tmp$3, p224FieldElement);
		tmp = p224LargeFieldElement.zero(); $copy(tmp, p224LargeFieldElement.zero(), p224LargeFieldElement);
		isPointAtInfinity = p224IsZero(z);
		if (isPointAtInfinity === 1) {
			return [new big.Int.Ptr(), new big.Int.Ptr()];
		}
		p224Invert(zinv, z);
		p224Square(zinvsq, zinv, tmp);
		p224Mul(x, x, zinvsq, tmp);
		p224Mul(zinvsq, zinvsq, zinv, tmp);
		p224Mul(y, y, zinvsq, tmp);
		p224Contract(outx, x);
		p224Contract(outy, y);
		return [p224ToBig(outx), p224ToBig(outy)];
	};
	get28BitsFromEnd = function(buf, shift) {
		var ret, i, b, l, x, y, y$1;
		ret = 0;
		i = 0;
		while (i < 4) {
			b = 0;
			l = buf.$length;
			if (l > 0) {
				b = (x = l - 1 >> 0, ((x < 0 || x >= buf.$length) ? $throwRuntimeError("index out of range") : buf.$array[buf.$offset + x]));
				if (!((i === 3)) || (shift === 4)) {
					buf = $subslice(buf, 0, (l - 1 >> 0));
				}
			}
			ret = (ret | (((y = shift, y < 32 ? (((y$1 = (((((8 >>> 16 << 16) * i >>> 0) + (8 << 16 >>> 16) * i) >>> 0)), y$1 < 32 ? ((b >>> 0) << y$1) : 0) >>> 0) >>> y) : 0) >>> 0))) >>> 0;
			i = i + (1) >>> 0;
		}
		ret = (ret & (268435455)) >>> 0;
		return [ret, buf];
	};
	p224FromBig = function(out, in$1) {
		var bytes, _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7;
		bytes = in$1.Bytes();
		_tuple = get28BitsFromEnd(bytes, 0); out.nilCheck, out[0] = _tuple[0]; bytes = _tuple[1];
		_tuple$1 = get28BitsFromEnd(bytes, 4); out.nilCheck, out[1] = _tuple$1[0]; bytes = _tuple$1[1];
		_tuple$2 = get28BitsFromEnd(bytes, 0); out.nilCheck, out[2] = _tuple$2[0]; bytes = _tuple$2[1];
		_tuple$3 = get28BitsFromEnd(bytes, 4); out.nilCheck, out[3] = _tuple$3[0]; bytes = _tuple$3[1];
		_tuple$4 = get28BitsFromEnd(bytes, 0); out.nilCheck, out[4] = _tuple$4[0]; bytes = _tuple$4[1];
		_tuple$5 = get28BitsFromEnd(bytes, 4); out.nilCheck, out[5] = _tuple$5[0]; bytes = _tuple$5[1];
		_tuple$6 = get28BitsFromEnd(bytes, 0); out.nilCheck, out[6] = _tuple$6[0]; bytes = _tuple$6[1];
		_tuple$7 = get28BitsFromEnd(bytes, 4); out.nilCheck, out[7] = _tuple$7[0]; bytes = _tuple$7[1];
	};
	p224ToBig = function(in$1) {
		var buf;
		buf = ($arrayType($Uint8, 28)).zero(); $copy(buf, ($arrayType($Uint8, 28)).zero(), ($arrayType($Uint8, 28)));
		buf[27] = ((in$1.nilCheck, in$1[0]) << 24 >>> 24);
		buf[26] = (((in$1.nilCheck, in$1[0]) >>> 8 >>> 0) << 24 >>> 24);
		buf[25] = (((in$1.nilCheck, in$1[0]) >>> 16 >>> 0) << 24 >>> 24);
		buf[24] = (((((((((in$1.nilCheck, in$1[0]) >>> 24 >>> 0)) & 15) >>> 0)) | (((((in$1.nilCheck, in$1[1]) << 4 >>> 0)) & 240) >>> 0)) >>> 0) << 24 >>> 24);
		buf[23] = (((in$1.nilCheck, in$1[1]) >>> 4 >>> 0) << 24 >>> 24);
		buf[22] = (((in$1.nilCheck, in$1[1]) >>> 12 >>> 0) << 24 >>> 24);
		buf[21] = (((in$1.nilCheck, in$1[1]) >>> 20 >>> 0) << 24 >>> 24);
		buf[20] = ((in$1.nilCheck, in$1[2]) << 24 >>> 24);
		buf[19] = (((in$1.nilCheck, in$1[2]) >>> 8 >>> 0) << 24 >>> 24);
		buf[18] = (((in$1.nilCheck, in$1[2]) >>> 16 >>> 0) << 24 >>> 24);
		buf[17] = (((((((((in$1.nilCheck, in$1[2]) >>> 24 >>> 0)) & 15) >>> 0)) | (((((in$1.nilCheck, in$1[3]) << 4 >>> 0)) & 240) >>> 0)) >>> 0) << 24 >>> 24);
		buf[16] = (((in$1.nilCheck, in$1[3]) >>> 4 >>> 0) << 24 >>> 24);
		buf[15] = (((in$1.nilCheck, in$1[3]) >>> 12 >>> 0) << 24 >>> 24);
		buf[14] = (((in$1.nilCheck, in$1[3]) >>> 20 >>> 0) << 24 >>> 24);
		buf[13] = ((in$1.nilCheck, in$1[4]) << 24 >>> 24);
		buf[12] = (((in$1.nilCheck, in$1[4]) >>> 8 >>> 0) << 24 >>> 24);
		buf[11] = (((in$1.nilCheck, in$1[4]) >>> 16 >>> 0) << 24 >>> 24);
		buf[10] = (((((((((in$1.nilCheck, in$1[4]) >>> 24 >>> 0)) & 15) >>> 0)) | (((((in$1.nilCheck, in$1[5]) << 4 >>> 0)) & 240) >>> 0)) >>> 0) << 24 >>> 24);
		buf[9] = (((in$1.nilCheck, in$1[5]) >>> 4 >>> 0) << 24 >>> 24);
		buf[8] = (((in$1.nilCheck, in$1[5]) >>> 12 >>> 0) << 24 >>> 24);
		buf[7] = (((in$1.nilCheck, in$1[5]) >>> 20 >>> 0) << 24 >>> 24);
		buf[6] = ((in$1.nilCheck, in$1[6]) << 24 >>> 24);
		buf[5] = (((in$1.nilCheck, in$1[6]) >>> 8 >>> 0) << 24 >>> 24);
		buf[4] = (((in$1.nilCheck, in$1[6]) >>> 16 >>> 0) << 24 >>> 24);
		buf[3] = (((((((((in$1.nilCheck, in$1[6]) >>> 24 >>> 0)) & 15) >>> 0)) | (((((in$1.nilCheck, in$1[7]) << 4 >>> 0)) & 240) >>> 0)) >>> 0) << 24 >>> 24);
		buf[2] = (((in$1.nilCheck, in$1[7]) >>> 4 >>> 0) << 24 >>> 24);
		buf[1] = (((in$1.nilCheck, in$1[7]) >>> 12 >>> 0) << 24 >>> 24);
		buf[0] = (((in$1.nilCheck, in$1[7]) >>> 20 >>> 0) << 24 >>> 24);
		return new big.Int.Ptr().SetBytes(new ($sliceType($Uint8))(buf));
	};
	initP256 = function() {
		var _tuple, _tuple$1, _tuple$2, _tuple$3, _tuple$4, _tuple$5;
		p256.CurveParams = new CurveParams.Ptr();
		_tuple = new big.Int.Ptr().SetString("115792089210356248762697446949407573530086143415290314195533631308867097853951", 10); p256.CurveParams.P = _tuple[0];
		_tuple$1 = new big.Int.Ptr().SetString("115792089210356248762697446949407573529996955224135760342422259061068512044369", 10); p256.CurveParams.N = _tuple$1[0];
		_tuple$2 = new big.Int.Ptr().SetString("5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b", 16); p256.CurveParams.B = _tuple$2[0];
		_tuple$3 = new big.Int.Ptr().SetString("6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296", 16); p256.CurveParams.Gx = _tuple$3[0];
		_tuple$4 = new big.Int.Ptr().SetString("4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5", 16); p256.CurveParams.Gy = _tuple$4[0];
		p256.CurveParams.BitSize = 256;
		_tuple$5 = new big.Int.Ptr().SetString("7fffffff00000001fffffffe8000000100000000ffffffff0000000180000000", 16); p256RInverse = _tuple$5[0];
	};
	p256Curve.Ptr.prototype.Params = function() {
		var curve;
		curve = new p256Curve.Ptr(); $copy(curve, this, p256Curve);
		return curve.CurveParams;
	};
	p256Curve.prototype.Params = function() { return this.$val.Params(); };
	p256GetScalar = function(out, in$1) {
		var n, scalarBytes, _ref, _i, i, v, x;
		n = new big.Int.Ptr().SetBytes(in$1);
		scalarBytes = ($sliceType($Uint8)).nil;
		if (n.Cmp(p256.CurveParams.N) >= 0) {
			n.Mod(n, p256.CurveParams.N);
			scalarBytes = n.Bytes();
		} else {
			scalarBytes = in$1;
		}
		_ref = scalarBytes;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			(x = scalarBytes.$length - ((1 + i >> 0)) >> 0, out.nilCheck, (x < 0 || x >= out.length) ? $throwRuntimeError("index out of range") : out[x] = v);
			_i++;
		}
	};
	p256Curve.Ptr.prototype.ScalarBaseMult = function(scalar) {
		var x = ($ptrType(big.Int)).nil, y = ($ptrType(big.Int)).nil, scalarReversed, _tmp, _tmp$1, _tmp$2, x1, y1, z1, _tuple;
		scalarReversed = ($arrayType($Uint8, 32)).zero(); $copy(scalarReversed, ($arrayType($Uint8, 32)).zero(), ($arrayType($Uint8, 32)));
		p256GetScalar(scalarReversed, scalar);
		_tmp = ($arrayType($Uint32, 9)).zero(); $copy(_tmp, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$1 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$1, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$2 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$2, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); x1 = ($arrayType($Uint32, 9)).zero(); $copy(x1, _tmp, ($arrayType($Uint32, 9))); y1 = ($arrayType($Uint32, 9)).zero(); $copy(y1, _tmp$1, ($arrayType($Uint32, 9))); z1 = ($arrayType($Uint32, 9)).zero(); $copy(z1, _tmp$2, ($arrayType($Uint32, 9)));
		p256ScalarBaseMult(x1, y1, z1, scalarReversed);
		_tuple = p256ToAffine(x1, y1, z1); x = _tuple[0]; y = _tuple[1];
		return [x, y];
	};
	p256Curve.prototype.ScalarBaseMult = function(scalar) { return this.$val.ScalarBaseMult(scalar); };
	p256Curve.Ptr.prototype.ScalarMult = function(bigX, bigY, scalar) {
		var x = ($ptrType(big.Int)).nil, y = ($ptrType(big.Int)).nil, scalarReversed, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, px, py, x1, y1, z1, _tuple;
		scalarReversed = ($arrayType($Uint8, 32)).zero(); $copy(scalarReversed, ($arrayType($Uint8, 32)).zero(), ($arrayType($Uint8, 32)));
		p256GetScalar(scalarReversed, scalar);
		_tmp = ($arrayType($Uint32, 9)).zero(); $copy(_tmp, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$1 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$1, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$2 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$2, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$3 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$3, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$4 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$4, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); px = ($arrayType($Uint32, 9)).zero(); $copy(px, _tmp, ($arrayType($Uint32, 9))); py = ($arrayType($Uint32, 9)).zero(); $copy(py, _tmp$1, ($arrayType($Uint32, 9))); x1 = ($arrayType($Uint32, 9)).zero(); $copy(x1, _tmp$2, ($arrayType($Uint32, 9))); y1 = ($arrayType($Uint32, 9)).zero(); $copy(y1, _tmp$3, ($arrayType($Uint32, 9))); z1 = ($arrayType($Uint32, 9)).zero(); $copy(z1, _tmp$4, ($arrayType($Uint32, 9)));
		p256FromBig(px, bigX);
		p256FromBig(py, bigY);
		p256ScalarMult(x1, y1, z1, px, py, scalarReversed);
		_tuple = p256ToAffine(x1, y1, z1); x = _tuple[0]; y = _tuple[1];
		return [x, y];
	};
	p256Curve.prototype.ScalarMult = function(bigX, bigY, scalar) { return this.$val.ScalarMult(bigX, bigY, scalar); };
	nonZeroToAllOnes = function(x) {
		return ((((x - 1 >>> 0)) >>> 31 >>> 0)) - 1 >>> 0;
	};
	p256ReduceCarry = function(inout, carry) {
		var carry_mask, _lhs, _index, _lhs$1, _index$1, _lhs$2, _index$2, _lhs$3, _index$3, _lhs$4, _index$4, _lhs$5, _index$5, _lhs$6, _index$6, _lhs$7, _index$7, _lhs$8, _index$8;
		carry_mask = nonZeroToAllOnes(carry);
		_lhs = inout; _index = 0; _lhs.nilCheck, (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index] = (_lhs.nilCheck, ((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index])) + ((carry << 1 >>> 0)) >>> 0;
		_lhs$1 = inout; _index$1 = 3; _lhs$1.nilCheck, (_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1] = (_lhs$1.nilCheck, ((_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1])) + (((268435456 & carry_mask) >>> 0)) >>> 0;
		_lhs$2 = inout; _index$2 = 3; _lhs$2.nilCheck, (_index$2 < 0 || _index$2 >= _lhs$2.length) ? $throwRuntimeError("index out of range") : _lhs$2[_index$2] = (_lhs$2.nilCheck, ((_index$2 < 0 || _index$2 >= _lhs$2.length) ? $throwRuntimeError("index out of range") : _lhs$2[_index$2])) - ((carry << 11 >>> 0)) >>> 0;
		_lhs$3 = inout; _index$3 = 4; _lhs$3.nilCheck, (_index$3 < 0 || _index$3 >= _lhs$3.length) ? $throwRuntimeError("index out of range") : _lhs$3[_index$3] = (_lhs$3.nilCheck, ((_index$3 < 0 || _index$3 >= _lhs$3.length) ? $throwRuntimeError("index out of range") : _lhs$3[_index$3])) + (((536870911 & carry_mask) >>> 0)) >>> 0;
		_lhs$4 = inout; _index$4 = 5; _lhs$4.nilCheck, (_index$4 < 0 || _index$4 >= _lhs$4.length) ? $throwRuntimeError("index out of range") : _lhs$4[_index$4] = (_lhs$4.nilCheck, ((_index$4 < 0 || _index$4 >= _lhs$4.length) ? $throwRuntimeError("index out of range") : _lhs$4[_index$4])) + (((268435455 & carry_mask) >>> 0)) >>> 0;
		_lhs$5 = inout; _index$5 = 6; _lhs$5.nilCheck, (_index$5 < 0 || _index$5 >= _lhs$5.length) ? $throwRuntimeError("index out of range") : _lhs$5[_index$5] = (_lhs$5.nilCheck, ((_index$5 < 0 || _index$5 >= _lhs$5.length) ? $throwRuntimeError("index out of range") : _lhs$5[_index$5])) + (((536870911 & carry_mask) >>> 0)) >>> 0;
		_lhs$6 = inout; _index$6 = 6; _lhs$6.nilCheck, (_index$6 < 0 || _index$6 >= _lhs$6.length) ? $throwRuntimeError("index out of range") : _lhs$6[_index$6] = (_lhs$6.nilCheck, ((_index$6 < 0 || _index$6 >= _lhs$6.length) ? $throwRuntimeError("index out of range") : _lhs$6[_index$6])) - ((carry << 22 >>> 0)) >>> 0;
		_lhs$7 = inout; _index$7 = 7; _lhs$7.nilCheck, (_index$7 < 0 || _index$7 >= _lhs$7.length) ? $throwRuntimeError("index out of range") : _lhs$7[_index$7] = (_lhs$7.nilCheck, ((_index$7 < 0 || _index$7 >= _lhs$7.length) ? $throwRuntimeError("index out of range") : _lhs$7[_index$7])) - (((1 & carry_mask) >>> 0)) >>> 0;
		_lhs$8 = inout; _index$8 = 7; _lhs$8.nilCheck, (_index$8 < 0 || _index$8 >= _lhs$8.length) ? $throwRuntimeError("index out of range") : _lhs$8[_index$8] = (_lhs$8.nilCheck, ((_index$8 < 0 || _index$8 >= _lhs$8.length) ? $throwRuntimeError("index out of range") : _lhs$8[_index$8])) + ((carry << 25 >>> 0)) >>> 0;
	};
	p256Sum = function(out, in$1, in2) {
		var carry, i, _lhs, _index, _lhs$1, _index$1, _lhs$2, _index$2, _lhs$3, _index$3;
		carry = 0;
		i = 0;
		while (true) {
			out.nilCheck, (i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (in$1.nilCheck, ((i < 0 || i >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[i])) + (in2.nilCheck, ((i < 0 || i >= in2.length) ? $throwRuntimeError("index out of range") : in2[i])) >>> 0;
			_lhs = out; _index = i; _lhs.nilCheck, (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index] = (_lhs.nilCheck, ((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index])) + (carry) >>> 0;
			carry = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 29 >>> 0;
			_lhs$1 = out; _index$1 = i; _lhs$1.nilCheck, (_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1] = ((_lhs$1.nilCheck, ((_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1])) & (536870911)) >>> 0;
			i = i + (1) >> 0;
			if (i === 9) {
				break;
			}
			out.nilCheck, (i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (in$1.nilCheck, ((i < 0 || i >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[i])) + (in2.nilCheck, ((i < 0 || i >= in2.length) ? $throwRuntimeError("index out of range") : in2[i])) >>> 0;
			_lhs$2 = out; _index$2 = i; _lhs$2.nilCheck, (_index$2 < 0 || _index$2 >= _lhs$2.length) ? $throwRuntimeError("index out of range") : _lhs$2[_index$2] = (_lhs$2.nilCheck, ((_index$2 < 0 || _index$2 >= _lhs$2.length) ? $throwRuntimeError("index out of range") : _lhs$2[_index$2])) + (carry) >>> 0;
			carry = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 28 >>> 0;
			_lhs$3 = out; _index$3 = i; _lhs$3.nilCheck, (_index$3 < 0 || _index$3 >= _lhs$3.length) ? $throwRuntimeError("index out of range") : _lhs$3[_index$3] = ((_lhs$3.nilCheck, ((_index$3 < 0 || _index$3 >= _lhs$3.length) ? $throwRuntimeError("index out of range") : _lhs$3[_index$3])) & (268435455)) >>> 0;
			i = i + (1) >> 0;
		}
		p256ReduceCarry(out, carry);
	};
	p256Diff = function(out, in$1, in2) {
		var carry, i, _lhs, _index, _lhs$1, _index$1, _lhs$2, _index$2, _lhs$3, _index$3, _lhs$4, _index$4, _lhs$5, _index$5;
		carry = 0;
		i = 0;
		while (true) {
			out.nilCheck, (i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (in$1.nilCheck, ((i < 0 || i >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[i])) - (in2.nilCheck, ((i < 0 || i >= in2.length) ? $throwRuntimeError("index out of range") : in2[i])) >>> 0;
			_lhs = out; _index = i; _lhs.nilCheck, (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index] = (_lhs.nilCheck, ((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index])) + (((i < 0 || i >= p256Zero31.length) ? $throwRuntimeError("index out of range") : p256Zero31[i])) >>> 0;
			_lhs$1 = out; _index$1 = i; _lhs$1.nilCheck, (_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1] = (_lhs$1.nilCheck, ((_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1])) + (carry) >>> 0;
			carry = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 29 >>> 0;
			_lhs$2 = out; _index$2 = i; _lhs$2.nilCheck, (_index$2 < 0 || _index$2 >= _lhs$2.length) ? $throwRuntimeError("index out of range") : _lhs$2[_index$2] = ((_lhs$2.nilCheck, ((_index$2 < 0 || _index$2 >= _lhs$2.length) ? $throwRuntimeError("index out of range") : _lhs$2[_index$2])) & (536870911)) >>> 0;
			i = i + (1) >> 0;
			if (i === 9) {
				break;
			}
			out.nilCheck, (i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = (in$1.nilCheck, ((i < 0 || i >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[i])) - (in2.nilCheck, ((i < 0 || i >= in2.length) ? $throwRuntimeError("index out of range") : in2[i])) >>> 0;
			_lhs$3 = out; _index$3 = i; _lhs$3.nilCheck, (_index$3 < 0 || _index$3 >= _lhs$3.length) ? $throwRuntimeError("index out of range") : _lhs$3[_index$3] = (_lhs$3.nilCheck, ((_index$3 < 0 || _index$3 >= _lhs$3.length) ? $throwRuntimeError("index out of range") : _lhs$3[_index$3])) + (((i < 0 || i >= p256Zero31.length) ? $throwRuntimeError("index out of range") : p256Zero31[i])) >>> 0;
			_lhs$4 = out; _index$4 = i; _lhs$4.nilCheck, (_index$4 < 0 || _index$4 >= _lhs$4.length) ? $throwRuntimeError("index out of range") : _lhs$4[_index$4] = (_lhs$4.nilCheck, ((_index$4 < 0 || _index$4 >= _lhs$4.length) ? $throwRuntimeError("index out of range") : _lhs$4[_index$4])) + (carry) >>> 0;
			carry = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 28 >>> 0;
			_lhs$5 = out; _index$5 = i; _lhs$5.nilCheck, (_index$5 < 0 || _index$5 >= _lhs$5.length) ? $throwRuntimeError("index out of range") : _lhs$5[_index$5] = ((_lhs$5.nilCheck, ((_index$5 < 0 || _index$5 >= _lhs$5.length) ? $throwRuntimeError("index out of range") : _lhs$5[_index$5])) & (268435455)) >>> 0;
			i = i + (1) >> 0;
		}
		p256ReduceCarry(out, carry);
	};
	p256ReduceDegree = function(out, tmp) {
		var tmp2, _tmp, _tmp$1, _tmp$2, carry, x, xMask, _lhs, _index, _lhs$1, _index$1, _lhs$2, _index$2, i, x$1, _lhs$3, _index$3, x$2, _lhs$4, _index$4, x$3, _lhs$5, _index$5, _lhs$6, _index$6, _lhs$7, _index$7, x$4, _lhs$8, _index$8, x$5, _lhs$9, _index$9, x$6, _lhs$10, _index$10, _lhs$11, _index$11, _lhs$12, _index$12, _lhs$13, _index$13, _lhs$14, _index$14, _lhs$15, _index$15, i$1, _lhs$16, _index$16, _lhs$17, _index$17, _lhs$18, _index$18, _lhs$19, _index$19, _lhs$20, _index$20, _lhs$21, _index$21, _lhs$22, _index$22, _lhs$23, _index$23, _lhs$24, _index$24, _lhs$25, _index$25, _lhs$26, _index$26, _lhs$27, _index$27, _lhs$28, _index$28, _lhs$29, _index$29, x$7, x$8, x$9, _lhs$30, _index$30, _lhs$31, _index$31, _lhs$32, _index$32, _lhs$33, _index$33, _lhs$34, _index$34, _lhs$35, _index$35, _lhs$36, _index$36, _lhs$37, _index$37, _lhs$38, _index$38, _lhs$39, _index$39, _lhs$40, _index$40, i$2, x$10, _lhs$41, _index$41, _lhs$42, _index$42, x$11, _lhs$43, _index$43, x$12, _lhs$44, _index$44, _lhs$45, _index$45, _lhs$46, _index$46, _lhs$47, _index$47;
		tmp2 = ($arrayType($Uint32, 18)).zero(); $copy(tmp2, ($arrayType($Uint32, 18)).zero(), ($arrayType($Uint32, 18)));
		_tmp = 0; _tmp$1 = 0; _tmp$2 = 0; carry = _tmp; x = _tmp$1; xMask = _tmp$2;
		tmp2[0] = ((tmp[0].$low >>> 0) & 536870911) >>> 0;
		tmp2[1] = (tmp[0].$low >>> 0) >>> 29 >>> 0;
		_lhs = tmp2; _index = 1; (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index] = (((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index]) | (((((($shiftRightUint64(tmp[0], 32).$low >>> 0) << 3 >>> 0)) & 268435455) >>> 0))) >>> 0;
		_lhs$1 = tmp2; _index$1 = 1; (_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1] = ((_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1]) + ((((tmp[1].$low >>> 0) & 268435455) >>> 0)) >>> 0;
		carry = tmp2[1] >>> 28 >>> 0;
		_lhs$2 = tmp2; _index$2 = 1; (_index$2 < 0 || _index$2 >= _lhs$2.length) ? $throwRuntimeError("index out of range") : _lhs$2[_index$2] = (((_index$2 < 0 || _index$2 >= _lhs$2.length) ? $throwRuntimeError("index out of range") : _lhs$2[_index$2]) & (268435455)) >>> 0;
		i = 2;
		while (i < 17) {
			(i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i] = (($shiftRightUint64((x$1 = i - 2 >> 0, ((x$1 < 0 || x$1 >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[x$1])), 32).$low >>> 0)) >>> 25 >>> 0;
			_lhs$3 = tmp2; _index$3 = i; (_index$3 < 0 || _index$3 >= _lhs$3.length) ? $throwRuntimeError("index out of range") : _lhs$3[_index$3] = ((_index$3 < 0 || _index$3 >= _lhs$3.length) ? $throwRuntimeError("index out of range") : _lhs$3[_index$3]) + (((((x$2 = i - 1 >> 0, ((x$2 < 0 || x$2 >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[x$2])).$low >>> 0)) >>> 28 >>> 0)) >>> 0;
			_lhs$4 = tmp2; _index$4 = i; (_index$4 < 0 || _index$4 >= _lhs$4.length) ? $throwRuntimeError("index out of range") : _lhs$4[_index$4] = ((_index$4 < 0 || _index$4 >= _lhs$4.length) ? $throwRuntimeError("index out of range") : _lhs$4[_index$4]) + (((((($shiftRightUint64((x$3 = i - 1 >> 0, ((x$3 < 0 || x$3 >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[x$3])), 32).$low >>> 0) << 4 >>> 0)) & 536870911) >>> 0)) >>> 0;
			_lhs$5 = tmp2; _index$5 = i; (_index$5 < 0 || _index$5 >= _lhs$5.length) ? $throwRuntimeError("index out of range") : _lhs$5[_index$5] = ((_index$5 < 0 || _index$5 >= _lhs$5.length) ? $throwRuntimeError("index out of range") : _lhs$5[_index$5]) + ((((((i < 0 || i >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[i]).$low >>> 0) & 536870911) >>> 0)) >>> 0;
			_lhs$6 = tmp2; _index$6 = i; (_index$6 < 0 || _index$6 >= _lhs$6.length) ? $throwRuntimeError("index out of range") : _lhs$6[_index$6] = ((_index$6 < 0 || _index$6 >= _lhs$6.length) ? $throwRuntimeError("index out of range") : _lhs$6[_index$6]) + (carry) >>> 0;
			carry = ((i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i]) >>> 29 >>> 0;
			_lhs$7 = tmp2; _index$7 = i; (_index$7 < 0 || _index$7 >= _lhs$7.length) ? $throwRuntimeError("index out of range") : _lhs$7[_index$7] = (((_index$7 < 0 || _index$7 >= _lhs$7.length) ? $throwRuntimeError("index out of range") : _lhs$7[_index$7]) & (536870911)) >>> 0;
			i = i + (1) >> 0;
			if (i === 17) {
				break;
			}
			(i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i] = ($shiftRightUint64((x$4 = i - 2 >> 0, ((x$4 < 0 || x$4 >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[x$4])), 32).$low >>> 0) >>> 25 >>> 0;
			_lhs$8 = tmp2; _index$8 = i; (_index$8 < 0 || _index$8 >= _lhs$8.length) ? $throwRuntimeError("index out of range") : _lhs$8[_index$8] = ((_index$8 < 0 || _index$8 >= _lhs$8.length) ? $throwRuntimeError("index out of range") : _lhs$8[_index$8]) + ((((x$5 = i - 1 >> 0, ((x$5 < 0 || x$5 >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[x$5])).$low >>> 0) >>> 29 >>> 0)) >>> 0;
			_lhs$9 = tmp2; _index$9 = i; (_index$9 < 0 || _index$9 >= _lhs$9.length) ? $throwRuntimeError("index out of range") : _lhs$9[_index$9] = ((_index$9 < 0 || _index$9 >= _lhs$9.length) ? $throwRuntimeError("index out of range") : _lhs$9[_index$9]) + ((((((($shiftRightUint64((x$6 = i - 1 >> 0, ((x$6 < 0 || x$6 >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[x$6])), 32).$low >>> 0)) << 3 >>> 0)) & 268435455) >>> 0)) >>> 0;
			_lhs$10 = tmp2; _index$10 = i; (_index$10 < 0 || _index$10 >= _lhs$10.length) ? $throwRuntimeError("index out of range") : _lhs$10[_index$10] = ((_index$10 < 0 || _index$10 >= _lhs$10.length) ? $throwRuntimeError("index out of range") : _lhs$10[_index$10]) + ((((((i < 0 || i >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[i]).$low >>> 0) & 268435455) >>> 0)) >>> 0;
			_lhs$11 = tmp2; _index$11 = i; (_index$11 < 0 || _index$11 >= _lhs$11.length) ? $throwRuntimeError("index out of range") : _lhs$11[_index$11] = ((_index$11 < 0 || _index$11 >= _lhs$11.length) ? $throwRuntimeError("index out of range") : _lhs$11[_index$11]) + (carry) >>> 0;
			carry = ((i < 0 || i >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i]) >>> 28 >>> 0;
			_lhs$12 = tmp2; _index$12 = i; (_index$12 < 0 || _index$12 >= _lhs$12.length) ? $throwRuntimeError("index out of range") : _lhs$12[_index$12] = (((_index$12 < 0 || _index$12 >= _lhs$12.length) ? $throwRuntimeError("index out of range") : _lhs$12[_index$12]) & (268435455)) >>> 0;
			i = i + (1) >> 0;
		}
		tmp2[17] = ($shiftRightUint64(tmp[15], 32).$low >>> 0) >>> 25 >>> 0;
		_lhs$13 = tmp2; _index$13 = 17; (_index$13 < 0 || _index$13 >= _lhs$13.length) ? $throwRuntimeError("index out of range") : _lhs$13[_index$13] = ((_index$13 < 0 || _index$13 >= _lhs$13.length) ? $throwRuntimeError("index out of range") : _lhs$13[_index$13]) + (((tmp[16].$low >>> 0) >>> 29 >>> 0)) >>> 0;
		_lhs$14 = tmp2; _index$14 = 17; (_index$14 < 0 || _index$14 >= _lhs$14.length) ? $throwRuntimeError("index out of range") : _lhs$14[_index$14] = ((_index$14 < 0 || _index$14 >= _lhs$14.length) ? $throwRuntimeError("index out of range") : _lhs$14[_index$14]) + ((($shiftRightUint64(tmp[16], 32).$low >>> 0) << 3 >>> 0)) >>> 0;
		_lhs$15 = tmp2; _index$15 = 17; (_index$15 < 0 || _index$15 >= _lhs$15.length) ? $throwRuntimeError("index out of range") : _lhs$15[_index$15] = ((_index$15 < 0 || _index$15 >= _lhs$15.length) ? $throwRuntimeError("index out of range") : _lhs$15[_index$15]) + (carry) >>> 0;
		i$1 = 0;
		while (true) {
			_lhs$16 = tmp2; _index$16 = i$1 + 1 >> 0; (_index$16 < 0 || _index$16 >= _lhs$16.length) ? $throwRuntimeError("index out of range") : _lhs$16[_index$16] = ((_index$16 < 0 || _index$16 >= _lhs$16.length) ? $throwRuntimeError("index out of range") : _lhs$16[_index$16]) + ((((i$1 < 0 || i$1 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i$1]) >>> 29 >>> 0)) >>> 0;
			x = (((i$1 < 0 || i$1 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i$1]) & 536870911) >>> 0;
			xMask = nonZeroToAllOnes(x);
			(i$1 < 0 || i$1 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[i$1] = 0;
			_lhs$17 = tmp2; _index$17 = i$1 + 3 >> 0; (_index$17 < 0 || _index$17 >= _lhs$17.length) ? $throwRuntimeError("index out of range") : _lhs$17[_index$17] = ((_index$17 < 0 || _index$17 >= _lhs$17.length) ? $throwRuntimeError("index out of range") : _lhs$17[_index$17]) + (((((x << 10 >>> 0)) & 268435455) >>> 0)) >>> 0;
			_lhs$18 = tmp2; _index$18 = i$1 + 4 >> 0; (_index$18 < 0 || _index$18 >= _lhs$18.length) ? $throwRuntimeError("index out of range") : _lhs$18[_index$18] = ((_index$18 < 0 || _index$18 >= _lhs$18.length) ? $throwRuntimeError("index out of range") : _lhs$18[_index$18]) + (((x >>> 18 >>> 0))) >>> 0;
			_lhs$19 = tmp2; _index$19 = i$1 + 6 >> 0; (_index$19 < 0 || _index$19 >= _lhs$19.length) ? $throwRuntimeError("index out of range") : _lhs$19[_index$19] = ((_index$19 < 0 || _index$19 >= _lhs$19.length) ? $throwRuntimeError("index out of range") : _lhs$19[_index$19]) + (((((x << 21 >>> 0)) & 536870911) >>> 0)) >>> 0;
			_lhs$20 = tmp2; _index$20 = i$1 + 7 >> 0; (_index$20 < 0 || _index$20 >= _lhs$20.length) ? $throwRuntimeError("index out of range") : _lhs$20[_index$20] = ((_index$20 < 0 || _index$20 >= _lhs$20.length) ? $throwRuntimeError("index out of range") : _lhs$20[_index$20]) + ((x >>> 8 >>> 0)) >>> 0;
			_lhs$21 = tmp2; _index$21 = i$1 + 7 >> 0; (_index$21 < 0 || _index$21 >= _lhs$21.length) ? $throwRuntimeError("index out of range") : _lhs$21[_index$21] = ((_index$21 < 0 || _index$21 >= _lhs$21.length) ? $throwRuntimeError("index out of range") : _lhs$21[_index$21]) + (((268435456 & xMask) >>> 0)) >>> 0;
			_lhs$22 = tmp2; _index$22 = i$1 + 8 >> 0; (_index$22 < 0 || _index$22 >= _lhs$22.length) ? $throwRuntimeError("index out of range") : _lhs$22[_index$22] = ((_index$22 < 0 || _index$22 >= _lhs$22.length) ? $throwRuntimeError("index out of range") : _lhs$22[_index$22]) + (((((x - 1 >>> 0)) & xMask) >>> 0)) >>> 0;
			_lhs$23 = tmp2; _index$23 = i$1 + 7 >> 0; (_index$23 < 0 || _index$23 >= _lhs$23.length) ? $throwRuntimeError("index out of range") : _lhs$23[_index$23] = ((_index$23 < 0 || _index$23 >= _lhs$23.length) ? $throwRuntimeError("index out of range") : _lhs$23[_index$23]) - (((((x << 24 >>> 0)) & 268435455) >>> 0)) >>> 0;
			_lhs$24 = tmp2; _index$24 = i$1 + 8 >> 0; (_index$24 < 0 || _index$24 >= _lhs$24.length) ? $throwRuntimeError("index out of range") : _lhs$24[_index$24] = ((_index$24 < 0 || _index$24 >= _lhs$24.length) ? $throwRuntimeError("index out of range") : _lhs$24[_index$24]) - ((x >>> 4 >>> 0)) >>> 0;
			_lhs$25 = tmp2; _index$25 = i$1 + 8 >> 0; (_index$25 < 0 || _index$25 >= _lhs$25.length) ? $throwRuntimeError("index out of range") : _lhs$25[_index$25] = ((_index$25 < 0 || _index$25 >= _lhs$25.length) ? $throwRuntimeError("index out of range") : _lhs$25[_index$25]) + (((536870912 & xMask) >>> 0)) >>> 0;
			_lhs$26 = tmp2; _index$26 = i$1 + 8 >> 0; (_index$26 < 0 || _index$26 >= _lhs$26.length) ? $throwRuntimeError("index out of range") : _lhs$26[_index$26] = ((_index$26 < 0 || _index$26 >= _lhs$26.length) ? $throwRuntimeError("index out of range") : _lhs$26[_index$26]) - (x) >>> 0;
			_lhs$27 = tmp2; _index$27 = i$1 + 8 >> 0; (_index$27 < 0 || _index$27 >= _lhs$27.length) ? $throwRuntimeError("index out of range") : _lhs$27[_index$27] = ((_index$27 < 0 || _index$27 >= _lhs$27.length) ? $throwRuntimeError("index out of range") : _lhs$27[_index$27]) + (((((x << 28 >>> 0)) & 536870911) >>> 0)) >>> 0;
			_lhs$28 = tmp2; _index$28 = i$1 + 9 >> 0; (_index$28 < 0 || _index$28 >= _lhs$28.length) ? $throwRuntimeError("index out of range") : _lhs$28[_index$28] = ((_index$28 < 0 || _index$28 >= _lhs$28.length) ? $throwRuntimeError("index out of range") : _lhs$28[_index$28]) + (((((((x >>> 1 >>> 0)) - 1 >>> 0)) & xMask) >>> 0)) >>> 0;
			if ((i$1 + 1 >> 0) === 9) {
				break;
			}
			_lhs$29 = tmp2; _index$29 = i$1 + 2 >> 0; (_index$29 < 0 || _index$29 >= _lhs$29.length) ? $throwRuntimeError("index out of range") : _lhs$29[_index$29] = ((_index$29 < 0 || _index$29 >= _lhs$29.length) ? $throwRuntimeError("index out of range") : _lhs$29[_index$29]) + (((x$7 = i$1 + 1 >> 0, ((x$7 < 0 || x$7 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[x$7])) >>> 28 >>> 0)) >>> 0;
			x = ((x$8 = i$1 + 1 >> 0, ((x$8 < 0 || x$8 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[x$8])) & 268435455) >>> 0;
			xMask = nonZeroToAllOnes(x);
			(x$9 = i$1 + 1 >> 0, (x$9 < 0 || x$9 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[x$9] = 0);
			_lhs$30 = tmp2; _index$30 = i$1 + 4 >> 0; (_index$30 < 0 || _index$30 >= _lhs$30.length) ? $throwRuntimeError("index out of range") : _lhs$30[_index$30] = ((_index$30 < 0 || _index$30 >= _lhs$30.length) ? $throwRuntimeError("index out of range") : _lhs$30[_index$30]) + (((((x << 11 >>> 0)) & 536870911) >>> 0)) >>> 0;
			_lhs$31 = tmp2; _index$31 = i$1 + 5 >> 0; (_index$31 < 0 || _index$31 >= _lhs$31.length) ? $throwRuntimeError("index out of range") : _lhs$31[_index$31] = ((_index$31 < 0 || _index$31 >= _lhs$31.length) ? $throwRuntimeError("index out of range") : _lhs$31[_index$31]) + (((x >>> 18 >>> 0))) >>> 0;
			_lhs$32 = tmp2; _index$32 = i$1 + 7 >> 0; (_index$32 < 0 || _index$32 >= _lhs$32.length) ? $throwRuntimeError("index out of range") : _lhs$32[_index$32] = ((_index$32 < 0 || _index$32 >= _lhs$32.length) ? $throwRuntimeError("index out of range") : _lhs$32[_index$32]) + (((((x << 21 >>> 0)) & 268435455) >>> 0)) >>> 0;
			_lhs$33 = tmp2; _index$33 = i$1 + 8 >> 0; (_index$33 < 0 || _index$33 >= _lhs$33.length) ? $throwRuntimeError("index out of range") : _lhs$33[_index$33] = ((_index$33 < 0 || _index$33 >= _lhs$33.length) ? $throwRuntimeError("index out of range") : _lhs$33[_index$33]) + ((x >>> 7 >>> 0)) >>> 0;
			_lhs$34 = tmp2; _index$34 = i$1 + 8 >> 0; (_index$34 < 0 || _index$34 >= _lhs$34.length) ? $throwRuntimeError("index out of range") : _lhs$34[_index$34] = ((_index$34 < 0 || _index$34 >= _lhs$34.length) ? $throwRuntimeError("index out of range") : _lhs$34[_index$34]) + (((536870912 & xMask) >>> 0)) >>> 0;
			_lhs$35 = tmp2; _index$35 = i$1 + 9 >> 0; (_index$35 < 0 || _index$35 >= _lhs$35.length) ? $throwRuntimeError("index out of range") : _lhs$35[_index$35] = ((_index$35 < 0 || _index$35 >= _lhs$35.length) ? $throwRuntimeError("index out of range") : _lhs$35[_index$35]) + (((((x - 1 >>> 0)) & xMask) >>> 0)) >>> 0;
			_lhs$36 = tmp2; _index$36 = i$1 + 8 >> 0; (_index$36 < 0 || _index$36 >= _lhs$36.length) ? $throwRuntimeError("index out of range") : _lhs$36[_index$36] = ((_index$36 < 0 || _index$36 >= _lhs$36.length) ? $throwRuntimeError("index out of range") : _lhs$36[_index$36]) - (((((x << 25 >>> 0)) & 536870911) >>> 0)) >>> 0;
			_lhs$37 = tmp2; _index$37 = i$1 + 9 >> 0; (_index$37 < 0 || _index$37 >= _lhs$37.length) ? $throwRuntimeError("index out of range") : _lhs$37[_index$37] = ((_index$37 < 0 || _index$37 >= _lhs$37.length) ? $throwRuntimeError("index out of range") : _lhs$37[_index$37]) - ((x >>> 4 >>> 0)) >>> 0;
			_lhs$38 = tmp2; _index$38 = i$1 + 9 >> 0; (_index$38 < 0 || _index$38 >= _lhs$38.length) ? $throwRuntimeError("index out of range") : _lhs$38[_index$38] = ((_index$38 < 0 || _index$38 >= _lhs$38.length) ? $throwRuntimeError("index out of range") : _lhs$38[_index$38]) + (((268435456 & xMask) >>> 0)) >>> 0;
			_lhs$39 = tmp2; _index$39 = i$1 + 9 >> 0; (_index$39 < 0 || _index$39 >= _lhs$39.length) ? $throwRuntimeError("index out of range") : _lhs$39[_index$39] = ((_index$39 < 0 || _index$39 >= _lhs$39.length) ? $throwRuntimeError("index out of range") : _lhs$39[_index$39]) - (x) >>> 0;
			_lhs$40 = tmp2; _index$40 = i$1 + 10 >> 0; (_index$40 < 0 || _index$40 >= _lhs$40.length) ? $throwRuntimeError("index out of range") : _lhs$40[_index$40] = ((_index$40 < 0 || _index$40 >= _lhs$40.length) ? $throwRuntimeError("index out of range") : _lhs$40[_index$40]) + (((((x - 1 >>> 0)) & xMask) >>> 0)) >>> 0;
			i$1 = i$1 + (2) >> 0;
		}
		carry = 0;
		i$2 = 0;
		while (i$2 < 8) {
			out.nilCheck, (i$2 < 0 || i$2 >= out.length) ? $throwRuntimeError("index out of range") : out[i$2] = (x$10 = i$2 + 9 >> 0, ((x$10 < 0 || x$10 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[x$10]));
			_lhs$41 = out; _index$41 = i$2; _lhs$41.nilCheck, (_index$41 < 0 || _index$41 >= _lhs$41.length) ? $throwRuntimeError("index out of range") : _lhs$41[_index$41] = (_lhs$41.nilCheck, ((_index$41 < 0 || _index$41 >= _lhs$41.length) ? $throwRuntimeError("index out of range") : _lhs$41[_index$41])) + (carry) >>> 0;
			_lhs$42 = out; _index$42 = i$2; _lhs$42.nilCheck, (_index$42 < 0 || _index$42 >= _lhs$42.length) ? $throwRuntimeError("index out of range") : _lhs$42[_index$42] = (_lhs$42.nilCheck, ((_index$42 < 0 || _index$42 >= _lhs$42.length) ? $throwRuntimeError("index out of range") : _lhs$42[_index$42])) + ((((((x$11 = i$2 + 10 >> 0, ((x$11 < 0 || x$11 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[x$11])) << 28 >>> 0)) & 536870911) >>> 0)) >>> 0;
			carry = (out.nilCheck, ((i$2 < 0 || i$2 >= out.length) ? $throwRuntimeError("index out of range") : out[i$2])) >>> 29 >>> 0;
			_lhs$43 = out; _index$43 = i$2; _lhs$43.nilCheck, (_index$43 < 0 || _index$43 >= _lhs$43.length) ? $throwRuntimeError("index out of range") : _lhs$43[_index$43] = ((_lhs$43.nilCheck, ((_index$43 < 0 || _index$43 >= _lhs$43.length) ? $throwRuntimeError("index out of range") : _lhs$43[_index$43])) & (536870911)) >>> 0;
			i$2 = i$2 + (1) >> 0;
			out.nilCheck, (i$2 < 0 || i$2 >= out.length) ? $throwRuntimeError("index out of range") : out[i$2] = (x$12 = i$2 + 9 >> 0, ((x$12 < 0 || x$12 >= tmp2.length) ? $throwRuntimeError("index out of range") : tmp2[x$12])) >>> 1 >>> 0;
			_lhs$44 = out; _index$44 = i$2; _lhs$44.nilCheck, (_index$44 < 0 || _index$44 >= _lhs$44.length) ? $throwRuntimeError("index out of range") : _lhs$44[_index$44] = (_lhs$44.nilCheck, ((_index$44 < 0 || _index$44 >= _lhs$44.length) ? $throwRuntimeError("index out of range") : _lhs$44[_index$44])) + (carry) >>> 0;
			carry = (out.nilCheck, ((i$2 < 0 || i$2 >= out.length) ? $throwRuntimeError("index out of range") : out[i$2])) >>> 28 >>> 0;
			_lhs$45 = out; _index$45 = i$2; _lhs$45.nilCheck, (_index$45 < 0 || _index$45 >= _lhs$45.length) ? $throwRuntimeError("index out of range") : _lhs$45[_index$45] = ((_lhs$45.nilCheck, ((_index$45 < 0 || _index$45 >= _lhs$45.length) ? $throwRuntimeError("index out of range") : _lhs$45[_index$45])) & (268435455)) >>> 0;
			i$2 = i$2 + (1) >> 0;
		}
		out.nilCheck, out[8] = tmp2[17];
		_lhs$46 = out; _index$46 = 8; _lhs$46.nilCheck, (_index$46 < 0 || _index$46 >= _lhs$46.length) ? $throwRuntimeError("index out of range") : _lhs$46[_index$46] = (_lhs$46.nilCheck, ((_index$46 < 0 || _index$46 >= _lhs$46.length) ? $throwRuntimeError("index out of range") : _lhs$46[_index$46])) + (carry) >>> 0;
		carry = (out.nilCheck, out[8]) >>> 29 >>> 0;
		_lhs$47 = out; _index$47 = 8; _lhs$47.nilCheck, (_index$47 < 0 || _index$47 >= _lhs$47.length) ? $throwRuntimeError("index out of range") : _lhs$47[_index$47] = ((_lhs$47.nilCheck, ((_index$47 < 0 || _index$47 >= _lhs$47.length) ? $throwRuntimeError("index out of range") : _lhs$47[_index$47])) & (536870911)) >>> 0;
		p256ReduceCarry(out, carry);
	};
	p256Square = function(out, in$1) {
		var tmp, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$50, x$51, x$52, x$53, x$54, x$55;
		tmp = ($arrayType($Uint64, 17)).zero(); $copy(tmp, ($arrayType($Uint64, 17)).zero(), ($arrayType($Uint64, 17)));
		tmp[0] = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), new $Uint64(0, (in$1.nilCheck, in$1[0])));
		tmp[1] = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[1])), 1)));
		tmp[2] = (x = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[2])), 1))), x$1 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[1])), 1))), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
		tmp[3] = (x$2 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[3])), 1))), x$3 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[2])), 1))), new $Uint64(x$2.$high + x$3.$high, x$2.$low + x$3.$low));
		tmp[4] = (x$4 = (x$5 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[4])), 1))), x$6 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[3])), 2))), new $Uint64(x$5.$high + x$6.$high, x$5.$low + x$6.$low)), x$7 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), new $Uint64(0, (in$1.nilCheck, in$1[2]))), new $Uint64(x$4.$high + x$7.$high, x$4.$low + x$7.$low));
		tmp[5] = (x$8 = (x$9 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[5])), 1))), x$10 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[4])), 1))), new $Uint64(x$9.$high + x$10.$high, x$9.$low + x$10.$low)), x$11 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[3])), 1))), new $Uint64(x$8.$high + x$11.$high, x$8.$low + x$11.$low));
		tmp[6] = (x$12 = (x$13 = (x$14 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[6])), 1))), x$15 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[5])), 2))), new $Uint64(x$14.$high + x$15.$high, x$14.$low + x$15.$low)), x$16 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[4])), 1))), new $Uint64(x$13.$high + x$16.$high, x$13.$low + x$16.$low)), x$17 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[3])), 1))), new $Uint64(x$12.$high + x$17.$high, x$12.$low + x$17.$low));
		tmp[7] = (x$18 = (x$19 = (x$20 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[7])), 1))), x$21 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[6])), 1))), new $Uint64(x$20.$high + x$21.$high, x$20.$low + x$21.$low)), x$22 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[5])), 1))), new $Uint64(x$19.$high + x$22.$high, x$19.$low + x$22.$low)), x$23 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[4])), 1))), new $Uint64(x$18.$high + x$23.$high, x$18.$low + x$23.$low));
		tmp[8] = (x$24 = (x$25 = (x$26 = (x$27 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[8])), 1))), x$28 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[7])), 2))), new $Uint64(x$27.$high + x$28.$high, x$27.$low + x$28.$low)), x$29 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[6])), 1))), new $Uint64(x$26.$high + x$29.$high, x$26.$low + x$29.$low)), x$30 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[5])), 2))), new $Uint64(x$25.$high + x$30.$high, x$25.$low + x$30.$low)), x$31 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), new $Uint64(0, (in$1.nilCheck, in$1[4]))), new $Uint64(x$24.$high + x$31.$high, x$24.$low + x$31.$low));
		tmp[9] = (x$32 = (x$33 = (x$34 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[8])), 1))), x$35 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[7])), 1))), new $Uint64(x$34.$high + x$35.$high, x$34.$low + x$35.$low)), x$36 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[6])), 1))), new $Uint64(x$33.$high + x$36.$high, x$33.$low + x$36.$low)), x$37 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[5])), 1))), new $Uint64(x$32.$high + x$37.$high, x$32.$low + x$37.$low));
		tmp[10] = (x$38 = (x$39 = (x$40 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[8])), 1))), x$41 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[7])), 2))), new $Uint64(x$40.$high + x$41.$high, x$40.$low + x$41.$low)), x$42 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[6])), 1))), new $Uint64(x$39.$high + x$42.$high, x$39.$low + x$42.$low)), x$43 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[5])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[5])), 1))), new $Uint64(x$38.$high + x$43.$high, x$38.$low + x$43.$low));
		tmp[11] = (x$44 = (x$45 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[8])), 1))), x$46 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[7])), 1))), new $Uint64(x$45.$high + x$46.$high, x$45.$low + x$46.$low)), x$47 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[5])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[6])), 1))), new $Uint64(x$44.$high + x$47.$high, x$44.$low + x$47.$low));
		tmp[12] = (x$48 = (x$49 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[8])), 1))), x$50 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[5])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[7])), 2))), new $Uint64(x$49.$high + x$50.$high, x$49.$low + x$50.$low)), x$51 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[6])), new $Uint64(0, (in$1.nilCheck, in$1[6]))), new $Uint64(x$48.$high + x$51.$high, x$48.$low + x$51.$low));
		tmp[13] = (x$52 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[5])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[8])), 1))), x$53 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[6])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[7])), 1))), new $Uint64(x$52.$high + x$53.$high, x$52.$low + x$53.$low));
		tmp[14] = (x$54 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[6])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[8])), 1))), x$55 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[7])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[7])), 1))), new $Uint64(x$54.$high + x$55.$high, x$54.$low + x$55.$low));
		tmp[15] = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[7])), ($shiftLeft64(new $Uint64(0, (in$1.nilCheck, in$1[8])), 1)));
		tmp[16] = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[8])), new $Uint64(0, (in$1.nilCheck, in$1[8])));
		p256ReduceDegree(out, $clone(tmp, ($arrayType($Uint64, 17))));
	};
	p256Mul = function(out, in$1, in2) {
		var tmp, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20, x$21, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, x$30, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, x$39, x$40, x$41, x$42, x$43, x$44, x$45, x$46, x$47, x$48, x$49, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$60, x$61, x$62, x$63, x$64, x$65, x$66, x$67, x$68, x$69, x$70, x$71, x$72, x$73, x$74, x$75, x$76, x$77, x$78, x$79, x$80, x$81, x$82, x$83, x$84, x$85, x$86, x$87, x$88, x$89, x$90, x$91, x$92, x$93, x$94, x$95, x$96, x$97, x$98, x$99, x$100, x$101, x$102, x$103, x$104, x$105, x$106, x$107, x$108, x$109, x$110, x$111, x$112, x$113, x$114, x$115, x$116, x$117, x$118, x$119, x$120, x$121, x$122, x$123, x$124, x$125, x$126, x$127;
		tmp = ($arrayType($Uint64, 17)).zero(); $copy(tmp, ($arrayType($Uint64, 17)).zero(), ($arrayType($Uint64, 17)));
		tmp[0] = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), new $Uint64(0, (in2.nilCheck, in2[0])));
		tmp[1] = (x = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[1])), 0))), x$1 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[0])), 0))), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
		tmp[2] = (x$2 = (x$3 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[2])), 0))), x$4 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[1])), 1))), new $Uint64(x$3.$high + x$4.$high, x$3.$low + x$4.$low)), x$5 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[0])), 0))), new $Uint64(x$2.$high + x$5.$high, x$2.$low + x$5.$low));
		tmp[3] = (x$6 = (x$7 = (x$8 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[3])), 0))), x$9 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[2])), 0))), new $Uint64(x$8.$high + x$9.$high, x$8.$low + x$9.$low)), x$10 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[1])), 0))), new $Uint64(x$7.$high + x$10.$high, x$7.$low + x$10.$low)), x$11 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[0])), 0))), new $Uint64(x$6.$high + x$11.$high, x$6.$low + x$11.$low));
		tmp[4] = (x$12 = (x$13 = (x$14 = (x$15 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[4])), 0))), x$16 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[3])), 1))), new $Uint64(x$15.$high + x$16.$high, x$15.$low + x$16.$low)), x$17 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[2])), 0))), new $Uint64(x$14.$high + x$17.$high, x$14.$low + x$17.$low)), x$18 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[1])), 1))), new $Uint64(x$13.$high + x$18.$high, x$13.$low + x$18.$low)), x$19 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[0])), 0))), new $Uint64(x$12.$high + x$19.$high, x$12.$low + x$19.$low));
		tmp[5] = (x$20 = (x$21 = (x$22 = (x$23 = (x$24 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[5])), 0))), x$25 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[4])), 0))), new $Uint64(x$24.$high + x$25.$high, x$24.$low + x$25.$low)), x$26 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[3])), 0))), new $Uint64(x$23.$high + x$26.$high, x$23.$low + x$26.$low)), x$27 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[2])), 0))), new $Uint64(x$22.$high + x$27.$high, x$22.$low + x$27.$low)), x$28 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[1])), 0))), new $Uint64(x$21.$high + x$28.$high, x$21.$low + x$28.$low)), x$29 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[5])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[0])), 0))), new $Uint64(x$20.$high + x$29.$high, x$20.$low + x$29.$low));
		tmp[6] = (x$30 = (x$31 = (x$32 = (x$33 = (x$34 = (x$35 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[6])), 0))), x$36 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[5])), 1))), new $Uint64(x$35.$high + x$36.$high, x$35.$low + x$36.$low)), x$37 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[4])), 0))), new $Uint64(x$34.$high + x$37.$high, x$34.$low + x$37.$low)), x$38 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[3])), 1))), new $Uint64(x$33.$high + x$38.$high, x$33.$low + x$38.$low)), x$39 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[2])), 0))), new $Uint64(x$32.$high + x$39.$high, x$32.$low + x$39.$low)), x$40 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[5])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[1])), 1))), new $Uint64(x$31.$high + x$40.$high, x$31.$low + x$40.$low)), x$41 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[6])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[0])), 0))), new $Uint64(x$30.$high + x$41.$high, x$30.$low + x$41.$low));
		tmp[7] = (x$42 = (x$43 = (x$44 = (x$45 = (x$46 = (x$47 = (x$48 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[7])), 0))), x$49 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[6])), 0))), new $Uint64(x$48.$high + x$49.$high, x$48.$low + x$49.$low)), x$50 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[5])), 0))), new $Uint64(x$47.$high + x$50.$high, x$47.$low + x$50.$low)), x$51 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[4])), 0))), new $Uint64(x$46.$high + x$51.$high, x$46.$low + x$51.$low)), x$52 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[3])), 0))), new $Uint64(x$45.$high + x$52.$high, x$45.$low + x$52.$low)), x$53 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[5])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[2])), 0))), new $Uint64(x$44.$high + x$53.$high, x$44.$low + x$53.$low)), x$54 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[6])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[1])), 0))), new $Uint64(x$43.$high + x$54.$high, x$43.$low + x$54.$low)), x$55 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[7])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[0])), 0))), new $Uint64(x$42.$high + x$55.$high, x$42.$low + x$55.$low));
		tmp[8] = (x$56 = (x$57 = (x$58 = (x$59 = (x$60 = (x$61 = (x$62 = (x$63 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[0])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[8])), 0))), x$64 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[7])), 1))), new $Uint64(x$63.$high + x$64.$high, x$63.$low + x$64.$low)), x$65 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[6])), 0))), new $Uint64(x$62.$high + x$65.$high, x$62.$low + x$65.$low)), x$66 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[5])), 1))), new $Uint64(x$61.$high + x$66.$high, x$61.$low + x$66.$low)), x$67 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[4])), 0))), new $Uint64(x$60.$high + x$67.$high, x$60.$low + x$67.$low)), x$68 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[5])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[3])), 1))), new $Uint64(x$59.$high + x$68.$high, x$59.$low + x$68.$low)), x$69 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[6])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[2])), 0))), new $Uint64(x$58.$high + x$69.$high, x$58.$low + x$69.$low)), x$70 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[7])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[1])), 1))), new $Uint64(x$57.$high + x$70.$high, x$57.$low + x$70.$low)), x$71 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[8])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[0])), 0))), new $Uint64(x$56.$high + x$71.$high, x$56.$low + x$71.$low));
		tmp[9] = (x$72 = (x$73 = (x$74 = (x$75 = (x$76 = (x$77 = (x$78 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[1])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[8])), 0))), x$79 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[7])), 0))), new $Uint64(x$78.$high + x$79.$high, x$78.$low + x$79.$low)), x$80 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[6])), 0))), new $Uint64(x$77.$high + x$80.$high, x$77.$low + x$80.$low)), x$81 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[5])), 0))), new $Uint64(x$76.$high + x$81.$high, x$76.$low + x$81.$low)), x$82 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[5])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[4])), 0))), new $Uint64(x$75.$high + x$82.$high, x$75.$low + x$82.$low)), x$83 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[6])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[3])), 0))), new $Uint64(x$74.$high + x$83.$high, x$74.$low + x$83.$low)), x$84 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[7])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[2])), 0))), new $Uint64(x$73.$high + x$84.$high, x$73.$low + x$84.$low)), x$85 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[8])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[1])), 0))), new $Uint64(x$72.$high + x$85.$high, x$72.$low + x$85.$low));
		tmp[10] = (x$86 = (x$87 = (x$88 = (x$89 = (x$90 = (x$91 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[2])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[8])), 0))), x$92 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[7])), 1))), new $Uint64(x$91.$high + x$92.$high, x$91.$low + x$92.$low)), x$93 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[6])), 0))), new $Uint64(x$90.$high + x$93.$high, x$90.$low + x$93.$low)), x$94 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[5])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[5])), 1))), new $Uint64(x$89.$high + x$94.$high, x$89.$low + x$94.$low)), x$95 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[6])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[4])), 0))), new $Uint64(x$88.$high + x$95.$high, x$88.$low + x$95.$low)), x$96 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[7])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[3])), 1))), new $Uint64(x$87.$high + x$96.$high, x$87.$low + x$96.$low)), x$97 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[8])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[2])), 0))), new $Uint64(x$86.$high + x$97.$high, x$86.$low + x$97.$low));
		tmp[11] = (x$98 = (x$99 = (x$100 = (x$101 = (x$102 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[3])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[8])), 0))), x$103 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[7])), 0))), new $Uint64(x$102.$high + x$103.$high, x$102.$low + x$103.$low)), x$104 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[5])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[6])), 0))), new $Uint64(x$101.$high + x$104.$high, x$101.$low + x$104.$low)), x$105 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[6])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[5])), 0))), new $Uint64(x$100.$high + x$105.$high, x$100.$low + x$105.$low)), x$106 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[7])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[4])), 0))), new $Uint64(x$99.$high + x$106.$high, x$99.$low + x$106.$low)), x$107 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[8])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[3])), 0))), new $Uint64(x$98.$high + x$107.$high, x$98.$low + x$107.$low));
		tmp[12] = (x$108 = (x$109 = (x$110 = (x$111 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[4])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[8])), 0))), x$112 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[5])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[7])), 1))), new $Uint64(x$111.$high + x$112.$high, x$111.$low + x$112.$low)), x$113 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[6])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[6])), 0))), new $Uint64(x$110.$high + x$113.$high, x$110.$low + x$113.$low)), x$114 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[7])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[5])), 1))), new $Uint64(x$109.$high + x$114.$high, x$109.$low + x$114.$low)), x$115 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[8])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[4])), 0))), new $Uint64(x$108.$high + x$115.$high, x$108.$low + x$115.$low));
		tmp[13] = (x$116 = (x$117 = (x$118 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[5])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[8])), 0))), x$119 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[6])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[7])), 0))), new $Uint64(x$118.$high + x$119.$high, x$118.$low + x$119.$low)), x$120 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[7])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[6])), 0))), new $Uint64(x$117.$high + x$120.$high, x$117.$low + x$120.$low)), x$121 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[8])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[5])), 0))), new $Uint64(x$116.$high + x$121.$high, x$116.$low + x$121.$low));
		tmp[14] = (x$122 = (x$123 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[6])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[8])), 0))), x$124 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[7])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[7])), 1))), new $Uint64(x$123.$high + x$124.$high, x$123.$low + x$124.$low)), x$125 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[8])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[6])), 0))), new $Uint64(x$122.$high + x$125.$high, x$122.$low + x$125.$low));
		tmp[15] = (x$126 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[7])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[8])), 0))), x$127 = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[8])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[7])), 0))), new $Uint64(x$126.$high + x$127.$high, x$126.$low + x$127.$low));
		tmp[16] = $mul64(new $Uint64(0, (in$1.nilCheck, in$1[8])), ($shiftLeft64(new $Uint64(0, (in2.nilCheck, in2[8])), 0)));
		p256ReduceDegree(out, $clone(tmp, ($arrayType($Uint64, 17))));
	};
	p256Assign = function(out, in$1) {
		$copy(out, in$1, ($arrayType($Uint32, 9)));
	};
	p256Invert = function(out, in$1) {
		var _tmp, _tmp$1, ftmp, ftmp2, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, e2, e4, e8, e16, e32, e64, i, i$1, i$2, i$3, i$4, i$5, i$6;
		_tmp = ($arrayType($Uint32, 9)).zero(); $copy(_tmp, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$1 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$1, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); ftmp = ($arrayType($Uint32, 9)).zero(); $copy(ftmp, _tmp, ($arrayType($Uint32, 9))); ftmp2 = ($arrayType($Uint32, 9)).zero(); $copy(ftmp2, _tmp$1, ($arrayType($Uint32, 9)));
		_tmp$2 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$2, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$3 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$3, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$4 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$4, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$5 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$5, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$6 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$6, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$7 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$7, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); e2 = ($arrayType($Uint32, 9)).zero(); $copy(e2, _tmp$2, ($arrayType($Uint32, 9))); e4 = ($arrayType($Uint32, 9)).zero(); $copy(e4, _tmp$3, ($arrayType($Uint32, 9))); e8 = ($arrayType($Uint32, 9)).zero(); $copy(e8, _tmp$4, ($arrayType($Uint32, 9))); e16 = ($arrayType($Uint32, 9)).zero(); $copy(e16, _tmp$5, ($arrayType($Uint32, 9))); e32 = ($arrayType($Uint32, 9)).zero(); $copy(e32, _tmp$6, ($arrayType($Uint32, 9))); e64 = ($arrayType($Uint32, 9)).zero(); $copy(e64, _tmp$7, ($arrayType($Uint32, 9)));
		p256Square(ftmp, in$1);
		p256Mul(ftmp, in$1, ftmp);
		p256Assign(e2, ftmp);
		p256Square(ftmp, ftmp);
		p256Square(ftmp, ftmp);
		p256Mul(ftmp, ftmp, e2);
		p256Assign(e4, ftmp);
		p256Square(ftmp, ftmp);
		p256Square(ftmp, ftmp);
		p256Square(ftmp, ftmp);
		p256Square(ftmp, ftmp);
		p256Mul(ftmp, ftmp, e4);
		p256Assign(e8, ftmp);
		i = 0;
		while (i < 8) {
			p256Square(ftmp, ftmp);
			i = i + (1) >> 0;
		}
		p256Mul(ftmp, ftmp, e8);
		p256Assign(e16, ftmp);
		i$1 = 0;
		while (i$1 < 16) {
			p256Square(ftmp, ftmp);
			i$1 = i$1 + (1) >> 0;
		}
		p256Mul(ftmp, ftmp, e16);
		p256Assign(e32, ftmp);
		i$2 = 0;
		while (i$2 < 32) {
			p256Square(ftmp, ftmp);
			i$2 = i$2 + (1) >> 0;
		}
		p256Assign(e64, ftmp);
		p256Mul(ftmp, ftmp, in$1);
		i$3 = 0;
		while (i$3 < 192) {
			p256Square(ftmp, ftmp);
			i$3 = i$3 + (1) >> 0;
		}
		p256Mul(ftmp2, e64, e32);
		i$4 = 0;
		while (i$4 < 16) {
			p256Square(ftmp2, ftmp2);
			i$4 = i$4 + (1) >> 0;
		}
		p256Mul(ftmp2, ftmp2, e16);
		i$5 = 0;
		while (i$5 < 8) {
			p256Square(ftmp2, ftmp2);
			i$5 = i$5 + (1) >> 0;
		}
		p256Mul(ftmp2, ftmp2, e8);
		i$6 = 0;
		while (i$6 < 4) {
			p256Square(ftmp2, ftmp2);
			i$6 = i$6 + (1) >> 0;
		}
		p256Mul(ftmp2, ftmp2, e4);
		p256Square(ftmp2, ftmp2);
		p256Square(ftmp2, ftmp2);
		p256Mul(ftmp2, ftmp2, e2);
		p256Square(ftmp2, ftmp2);
		p256Square(ftmp2, ftmp2);
		p256Mul(ftmp2, ftmp2, in$1);
		p256Mul(out, ftmp2, ftmp);
	};
	p256Scalar3 = function(out) {
		var carry, i, _lhs, _index, x, x$1, _lhs$1, _index$1, _lhs$2, _index$2, _lhs$3, _index$3, x$2, x$3, _lhs$4, _index$4, _lhs$5, _index$5;
		carry = 0;
		i = 0;
		while (true) {
			_lhs = out; _index = i; _lhs.nilCheck, (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index] = (x = (_lhs.nilCheck, ((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index])), x$1 = 3, (((x >>> 16 << 16) * x$1 >>> 0) + (x << 16 >>> 16) * x$1) >>> 0);
			_lhs$1 = out; _index$1 = i; _lhs$1.nilCheck, (_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1] = (_lhs$1.nilCheck, ((_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1])) + (carry) >>> 0;
			carry = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 29 >>> 0;
			_lhs$2 = out; _index$2 = i; _lhs$2.nilCheck, (_index$2 < 0 || _index$2 >= _lhs$2.length) ? $throwRuntimeError("index out of range") : _lhs$2[_index$2] = ((_lhs$2.nilCheck, ((_index$2 < 0 || _index$2 >= _lhs$2.length) ? $throwRuntimeError("index out of range") : _lhs$2[_index$2])) & (536870911)) >>> 0;
			i = i + (1) >> 0;
			if (i === 9) {
				break;
			}
			_lhs$3 = out; _index$3 = i; _lhs$3.nilCheck, (_index$3 < 0 || _index$3 >= _lhs$3.length) ? $throwRuntimeError("index out of range") : _lhs$3[_index$3] = (x$2 = (_lhs$3.nilCheck, ((_index$3 < 0 || _index$3 >= _lhs$3.length) ? $throwRuntimeError("index out of range") : _lhs$3[_index$3])), x$3 = 3, (((x$2 >>> 16 << 16) * x$3 >>> 0) + (x$2 << 16 >>> 16) * x$3) >>> 0);
			_lhs$4 = out; _index$4 = i; _lhs$4.nilCheck, (_index$4 < 0 || _index$4 >= _lhs$4.length) ? $throwRuntimeError("index out of range") : _lhs$4[_index$4] = (_lhs$4.nilCheck, ((_index$4 < 0 || _index$4 >= _lhs$4.length) ? $throwRuntimeError("index out of range") : _lhs$4[_index$4])) + (carry) >>> 0;
			carry = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 28 >>> 0;
			_lhs$5 = out; _index$5 = i; _lhs$5.nilCheck, (_index$5 < 0 || _index$5 >= _lhs$5.length) ? $throwRuntimeError("index out of range") : _lhs$5[_index$5] = ((_lhs$5.nilCheck, ((_index$5 < 0 || _index$5 >= _lhs$5.length) ? $throwRuntimeError("index out of range") : _lhs$5[_index$5])) & (268435455)) >>> 0;
			i = i + (1) >> 0;
		}
		p256ReduceCarry(out, carry);
	};
	p256Scalar4 = function(out) {
		var _tmp, _tmp$1, carry, nextCarry, i, _lhs, _index, y, _lhs$1, _index$1, _lhs$2, _index$2, _lhs$3, _index$3, _lhs$4, _index$4, y$1, _lhs$5, _index$5, _lhs$6, _index$6, _lhs$7, _index$7;
		_tmp = 0; _tmp$1 = 0; carry = _tmp; nextCarry = _tmp$1;
		i = 0;
		while (true) {
			nextCarry = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 27 >>> 0;
			_lhs = out; _index = i; _lhs.nilCheck, (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index] = (y = (2), y < 32 ? ((_lhs.nilCheck, ((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index])) << y) : 0) >>> 0;
			_lhs$1 = out; _index$1 = i; _lhs$1.nilCheck, (_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1] = ((_lhs$1.nilCheck, ((_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1])) & (536870911)) >>> 0;
			_lhs$2 = out; _index$2 = i; _lhs$2.nilCheck, (_index$2 < 0 || _index$2 >= _lhs$2.length) ? $throwRuntimeError("index out of range") : _lhs$2[_index$2] = (_lhs$2.nilCheck, ((_index$2 < 0 || _index$2 >= _lhs$2.length) ? $throwRuntimeError("index out of range") : _lhs$2[_index$2])) + (carry) >>> 0;
			carry = nextCarry + (((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 29 >>> 0)) >>> 0;
			_lhs$3 = out; _index$3 = i; _lhs$3.nilCheck, (_index$3 < 0 || _index$3 >= _lhs$3.length) ? $throwRuntimeError("index out of range") : _lhs$3[_index$3] = ((_lhs$3.nilCheck, ((_index$3 < 0 || _index$3 >= _lhs$3.length) ? $throwRuntimeError("index out of range") : _lhs$3[_index$3])) & (536870911)) >>> 0;
			i = i + (1) >> 0;
			if (i === 9) {
				break;
			}
			nextCarry = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 26 >>> 0;
			_lhs$4 = out; _index$4 = i; _lhs$4.nilCheck, (_index$4 < 0 || _index$4 >= _lhs$4.length) ? $throwRuntimeError("index out of range") : _lhs$4[_index$4] = (y$1 = (2), y$1 < 32 ? ((_lhs$4.nilCheck, ((_index$4 < 0 || _index$4 >= _lhs$4.length) ? $throwRuntimeError("index out of range") : _lhs$4[_index$4])) << y$1) : 0) >>> 0;
			_lhs$5 = out; _index$5 = i; _lhs$5.nilCheck, (_index$5 < 0 || _index$5 >= _lhs$5.length) ? $throwRuntimeError("index out of range") : _lhs$5[_index$5] = ((_lhs$5.nilCheck, ((_index$5 < 0 || _index$5 >= _lhs$5.length) ? $throwRuntimeError("index out of range") : _lhs$5[_index$5])) & (268435455)) >>> 0;
			_lhs$6 = out; _index$6 = i; _lhs$6.nilCheck, (_index$6 < 0 || _index$6 >= _lhs$6.length) ? $throwRuntimeError("index out of range") : _lhs$6[_index$6] = (_lhs$6.nilCheck, ((_index$6 < 0 || _index$6 >= _lhs$6.length) ? $throwRuntimeError("index out of range") : _lhs$6[_index$6])) + (carry) >>> 0;
			carry = nextCarry + (((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 28 >>> 0)) >>> 0;
			_lhs$7 = out; _index$7 = i; _lhs$7.nilCheck, (_index$7 < 0 || _index$7 >= _lhs$7.length) ? $throwRuntimeError("index out of range") : _lhs$7[_index$7] = ((_lhs$7.nilCheck, ((_index$7 < 0 || _index$7 >= _lhs$7.length) ? $throwRuntimeError("index out of range") : _lhs$7[_index$7])) & (268435455)) >>> 0;
			i = i + (1) >> 0;
		}
		p256ReduceCarry(out, carry);
	};
	p256Scalar8 = function(out) {
		var _tmp, _tmp$1, carry, nextCarry, i, _lhs, _index, y, _lhs$1, _index$1, _lhs$2, _index$2, _lhs$3, _index$3, _lhs$4, _index$4, y$1, _lhs$5, _index$5, _lhs$6, _index$6, _lhs$7, _index$7;
		_tmp = 0; _tmp$1 = 0; carry = _tmp; nextCarry = _tmp$1;
		i = 0;
		while (true) {
			nextCarry = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 26 >>> 0;
			_lhs = out; _index = i; _lhs.nilCheck, (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index] = (y = (3), y < 32 ? ((_lhs.nilCheck, ((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index])) << y) : 0) >>> 0;
			_lhs$1 = out; _index$1 = i; _lhs$1.nilCheck, (_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1] = ((_lhs$1.nilCheck, ((_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1])) & (536870911)) >>> 0;
			_lhs$2 = out; _index$2 = i; _lhs$2.nilCheck, (_index$2 < 0 || _index$2 >= _lhs$2.length) ? $throwRuntimeError("index out of range") : _lhs$2[_index$2] = (_lhs$2.nilCheck, ((_index$2 < 0 || _index$2 >= _lhs$2.length) ? $throwRuntimeError("index out of range") : _lhs$2[_index$2])) + (carry) >>> 0;
			carry = nextCarry + (((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 29 >>> 0)) >>> 0;
			_lhs$3 = out; _index$3 = i; _lhs$3.nilCheck, (_index$3 < 0 || _index$3 >= _lhs$3.length) ? $throwRuntimeError("index out of range") : _lhs$3[_index$3] = ((_lhs$3.nilCheck, ((_index$3 < 0 || _index$3 >= _lhs$3.length) ? $throwRuntimeError("index out of range") : _lhs$3[_index$3])) & (536870911)) >>> 0;
			i = i + (1) >> 0;
			if (i === 9) {
				break;
			}
			nextCarry = (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 25 >>> 0;
			_lhs$4 = out; _index$4 = i; _lhs$4.nilCheck, (_index$4 < 0 || _index$4 >= _lhs$4.length) ? $throwRuntimeError("index out of range") : _lhs$4[_index$4] = (y$1 = (3), y$1 < 32 ? ((_lhs$4.nilCheck, ((_index$4 < 0 || _index$4 >= _lhs$4.length) ? $throwRuntimeError("index out of range") : _lhs$4[_index$4])) << y$1) : 0) >>> 0;
			_lhs$5 = out; _index$5 = i; _lhs$5.nilCheck, (_index$5 < 0 || _index$5 >= _lhs$5.length) ? $throwRuntimeError("index out of range") : _lhs$5[_index$5] = ((_lhs$5.nilCheck, ((_index$5 < 0 || _index$5 >= _lhs$5.length) ? $throwRuntimeError("index out of range") : _lhs$5[_index$5])) & (268435455)) >>> 0;
			_lhs$6 = out; _index$6 = i; _lhs$6.nilCheck, (_index$6 < 0 || _index$6 >= _lhs$6.length) ? $throwRuntimeError("index out of range") : _lhs$6[_index$6] = (_lhs$6.nilCheck, ((_index$6 < 0 || _index$6 >= _lhs$6.length) ? $throwRuntimeError("index out of range") : _lhs$6[_index$6])) + (carry) >>> 0;
			carry = nextCarry + (((out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i])) >>> 28 >>> 0)) >>> 0;
			_lhs$7 = out; _index$7 = i; _lhs$7.nilCheck, (_index$7 < 0 || _index$7 >= _lhs$7.length) ? $throwRuntimeError("index out of range") : _lhs$7[_index$7] = ((_lhs$7.nilCheck, ((_index$7 < 0 || _index$7 >= _lhs$7.length) ? $throwRuntimeError("index out of range") : _lhs$7[_index$7])) & (268435455)) >>> 0;
			i = i + (1) >> 0;
		}
		p256ReduceCarry(out, carry);
	};
	p256PointDouble = function(xOut, yOut, zOut, x, y, z) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, delta, gamma, alpha, beta, tmp, tmp2;
		_tmp = ($arrayType($Uint32, 9)).zero(); $copy(_tmp, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$1 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$1, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$2 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$2, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$3 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$3, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$4 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$4, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$5 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$5, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); delta = ($arrayType($Uint32, 9)).zero(); $copy(delta, _tmp, ($arrayType($Uint32, 9))); gamma = ($arrayType($Uint32, 9)).zero(); $copy(gamma, _tmp$1, ($arrayType($Uint32, 9))); alpha = ($arrayType($Uint32, 9)).zero(); $copy(alpha, _tmp$2, ($arrayType($Uint32, 9))); beta = ($arrayType($Uint32, 9)).zero(); $copy(beta, _tmp$3, ($arrayType($Uint32, 9))); tmp = ($arrayType($Uint32, 9)).zero(); $copy(tmp, _tmp$4, ($arrayType($Uint32, 9))); tmp2 = ($arrayType($Uint32, 9)).zero(); $copy(tmp2, _tmp$5, ($arrayType($Uint32, 9)));
		p256Square(delta, z);
		p256Square(gamma, y);
		p256Mul(beta, x, gamma);
		p256Sum(tmp, x, delta);
		p256Diff(tmp2, x, delta);
		p256Mul(alpha, tmp, tmp2);
		p256Scalar3(alpha);
		p256Sum(tmp, y, z);
		p256Square(tmp, tmp);
		p256Diff(tmp, tmp, gamma);
		p256Diff(zOut, tmp, delta);
		p256Scalar4(beta);
		p256Square(xOut, alpha);
		p256Diff(xOut, xOut, beta);
		p256Diff(xOut, xOut, beta);
		p256Diff(tmp, beta, xOut);
		p256Mul(tmp, alpha, tmp);
		p256Square(tmp2, gamma);
		p256Scalar8(tmp2);
		p256Diff(yOut, tmp, tmp2);
	};
	p256PointAddMixed = function(xOut, yOut, zOut, x1, y1, z1, x2, y2) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tmp$10, z1z1, z1z1z1, s2, u2, h, i, j, r, rr, v, tmp;
		_tmp = ($arrayType($Uint32, 9)).zero(); $copy(_tmp, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$1 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$1, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$2 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$2, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$3 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$3, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$4 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$4, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$5 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$5, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$6 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$6, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$7 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$7, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$8 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$8, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$9 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$9, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$10 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$10, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); z1z1 = ($arrayType($Uint32, 9)).zero(); $copy(z1z1, _tmp, ($arrayType($Uint32, 9))); z1z1z1 = ($arrayType($Uint32, 9)).zero(); $copy(z1z1z1, _tmp$1, ($arrayType($Uint32, 9))); s2 = ($arrayType($Uint32, 9)).zero(); $copy(s2, _tmp$2, ($arrayType($Uint32, 9))); u2 = ($arrayType($Uint32, 9)).zero(); $copy(u2, _tmp$3, ($arrayType($Uint32, 9))); h = ($arrayType($Uint32, 9)).zero(); $copy(h, _tmp$4, ($arrayType($Uint32, 9))); i = ($arrayType($Uint32, 9)).zero(); $copy(i, _tmp$5, ($arrayType($Uint32, 9))); j = ($arrayType($Uint32, 9)).zero(); $copy(j, _tmp$6, ($arrayType($Uint32, 9))); r = ($arrayType($Uint32, 9)).zero(); $copy(r, _tmp$7, ($arrayType($Uint32, 9))); rr = ($arrayType($Uint32, 9)).zero(); $copy(rr, _tmp$8, ($arrayType($Uint32, 9))); v = ($arrayType($Uint32, 9)).zero(); $copy(v, _tmp$9, ($arrayType($Uint32, 9))); tmp = ($arrayType($Uint32, 9)).zero(); $copy(tmp, _tmp$10, ($arrayType($Uint32, 9)));
		p256Square(z1z1, z1);
		p256Sum(tmp, z1, z1);
		p256Mul(u2, x2, z1z1);
		p256Mul(z1z1z1, z1, z1z1);
		p256Mul(s2, y2, z1z1z1);
		p256Diff(h, u2, x1);
		p256Sum(i, h, h);
		p256Square(i, i);
		p256Mul(j, h, i);
		p256Diff(r, s2, y1);
		p256Sum(r, r, r);
		p256Mul(v, x1, i);
		p256Mul(zOut, tmp, h);
		p256Square(rr, r);
		p256Diff(xOut, rr, j);
		p256Diff(xOut, xOut, v);
		p256Diff(xOut, xOut, v);
		p256Diff(tmp, v, xOut);
		p256Mul(yOut, tmp, r);
		p256Mul(tmp, y1, j);
		p256Diff(yOut, yOut, tmp);
		p256Diff(yOut, yOut, tmp);
	};
	p256PointAdd = function(xOut, yOut, zOut, x1, y1, z1, x2, y2, z2) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, z1z1, z1z1z1, z2z2, z2z2z2, s1, s2, u1, u2, h, i, j, r, rr, v, tmp;
		_tmp = ($arrayType($Uint32, 9)).zero(); $copy(_tmp, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$1 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$1, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$2 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$2, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$3 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$3, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$4 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$4, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$5 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$5, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$6 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$6, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$7 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$7, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$8 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$8, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$9 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$9, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$10 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$10, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$11 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$11, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$12 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$12, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$13 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$13, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$14 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$14, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); z1z1 = ($arrayType($Uint32, 9)).zero(); $copy(z1z1, _tmp, ($arrayType($Uint32, 9))); z1z1z1 = ($arrayType($Uint32, 9)).zero(); $copy(z1z1z1, _tmp$1, ($arrayType($Uint32, 9))); z2z2 = ($arrayType($Uint32, 9)).zero(); $copy(z2z2, _tmp$2, ($arrayType($Uint32, 9))); z2z2z2 = ($arrayType($Uint32, 9)).zero(); $copy(z2z2z2, _tmp$3, ($arrayType($Uint32, 9))); s1 = ($arrayType($Uint32, 9)).zero(); $copy(s1, _tmp$4, ($arrayType($Uint32, 9))); s2 = ($arrayType($Uint32, 9)).zero(); $copy(s2, _tmp$5, ($arrayType($Uint32, 9))); u1 = ($arrayType($Uint32, 9)).zero(); $copy(u1, _tmp$6, ($arrayType($Uint32, 9))); u2 = ($arrayType($Uint32, 9)).zero(); $copy(u2, _tmp$7, ($arrayType($Uint32, 9))); h = ($arrayType($Uint32, 9)).zero(); $copy(h, _tmp$8, ($arrayType($Uint32, 9))); i = ($arrayType($Uint32, 9)).zero(); $copy(i, _tmp$9, ($arrayType($Uint32, 9))); j = ($arrayType($Uint32, 9)).zero(); $copy(j, _tmp$10, ($arrayType($Uint32, 9))); r = ($arrayType($Uint32, 9)).zero(); $copy(r, _tmp$11, ($arrayType($Uint32, 9))); rr = ($arrayType($Uint32, 9)).zero(); $copy(rr, _tmp$12, ($arrayType($Uint32, 9))); v = ($arrayType($Uint32, 9)).zero(); $copy(v, _tmp$13, ($arrayType($Uint32, 9))); tmp = ($arrayType($Uint32, 9)).zero(); $copy(tmp, _tmp$14, ($arrayType($Uint32, 9)));
		p256Square(z1z1, z1);
		p256Square(z2z2, z2);
		p256Mul(u1, x1, z2z2);
		p256Sum(tmp, z1, z2);
		p256Square(tmp, tmp);
		p256Diff(tmp, tmp, z1z1);
		p256Diff(tmp, tmp, z2z2);
		p256Mul(z2z2z2, z2, z2z2);
		p256Mul(s1, y1, z2z2z2);
		p256Mul(u2, x2, z1z1);
		p256Mul(z1z1z1, z1, z1z1);
		p256Mul(s2, y2, z1z1z1);
		p256Diff(h, u2, u1);
		p256Sum(i, h, h);
		p256Square(i, i);
		p256Mul(j, h, i);
		p256Diff(r, s2, s1);
		p256Sum(r, r, r);
		p256Mul(v, u1, i);
		p256Mul(zOut, tmp, h);
		p256Square(rr, r);
		p256Diff(xOut, rr, j);
		p256Diff(xOut, xOut, v);
		p256Diff(xOut, xOut, v);
		p256Diff(tmp, v, xOut);
		p256Mul(yOut, tmp, r);
		p256Mul(tmp, s1, j);
		p256Diff(yOut, yOut, tmp);
		p256Diff(yOut, yOut, tmp);
	};
	p256CopyConditional = function(out, in$1, mask$1) {
		var i, tmp, _lhs, _index;
		i = 0;
		while (i < 9) {
			tmp = (mask$1 & ((((in$1.nilCheck, ((i < 0 || i >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[i])) ^ (out.nilCheck, ((i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i]))) >>> 0))) >>> 0;
			_lhs = out; _index = i; _lhs.nilCheck, (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index] = ((_lhs.nilCheck, ((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index])) ^ (tmp)) >>> 0;
			i = i + (1) >> 0;
		}
	};
	p256SelectAffinePoint = function(xOut, yOut, table, index) {
		var _ref, _i, i, _ref$1, _i$1, i$1, i$2, mask$1, _ref$2, _i$2, j, _lhs, _index, _ref$3, _i$3, j$1, _lhs$1, _index$1;
		_ref = xOut;
		_i = 0;
		while (_i < 9) {
			i = _i;
			xOut.nilCheck, (i < 0 || i >= xOut.length) ? $throwRuntimeError("index out of range") : xOut[i] = 0;
			_i++;
		}
		_ref$1 = yOut;
		_i$1 = 0;
		while (_i$1 < 9) {
			i$1 = _i$1;
			yOut.nilCheck, (i$1 < 0 || i$1 >= yOut.length) ? $throwRuntimeError("index out of range") : yOut[i$1] = 0;
			_i$1++;
		}
		i$2 = 1;
		while (i$2 < 16) {
			mask$1 = (i$2 ^ index) >>> 0;
			mask$1 = (mask$1 | ((mask$1 >>> 2 >>> 0))) >>> 0;
			mask$1 = (mask$1 | ((mask$1 >>> 1 >>> 0))) >>> 0;
			mask$1 = (mask$1 & (1)) >>> 0;
			mask$1 = mask$1 - (1) >>> 0;
			_ref$2 = xOut;
			_i$2 = 0;
			while (_i$2 < 9) {
				j = _i$2;
				_lhs = xOut; _index = j; _lhs.nilCheck, (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index] = ((_lhs.nilCheck, ((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index])) | (((((0 < 0 || 0 >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + 0]) & mask$1) >>> 0))) >>> 0;
				table = $subslice(table, 1);
				_i$2++;
			}
			_ref$3 = yOut;
			_i$3 = 0;
			while (_i$3 < 9) {
				j$1 = _i$3;
				_lhs$1 = yOut; _index$1 = j$1; _lhs$1.nilCheck, (_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1] = ((_lhs$1.nilCheck, ((_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1])) | (((((0 < 0 || 0 >= table.$length) ? $throwRuntimeError("index out of range") : table.$array[table.$offset + 0]) & mask$1) >>> 0))) >>> 0;
				table = $subslice(table, 1);
				_i$3++;
			}
			i$2 = i$2 + (1) >>> 0;
		}
	};
	p256SelectJacobianPoint = function(xOut, yOut, zOut, table, index) {
		var _ref, _i, i, _ref$1, _i$1, i$1, _ref$2, _i$2, i$2, i$3, mask$1, _ref$3, _i$3, j, _lhs, _index, x, _ref$4, _i$4, j$1, _lhs$1, _index$1, x$1, _ref$5, _i$5, j$2, _lhs$2, _index$2, x$2;
		_ref = xOut;
		_i = 0;
		while (_i < 9) {
			i = _i;
			xOut.nilCheck, (i < 0 || i >= xOut.length) ? $throwRuntimeError("index out of range") : xOut[i] = 0;
			_i++;
		}
		_ref$1 = yOut;
		_i$1 = 0;
		while (_i$1 < 9) {
			i$1 = _i$1;
			yOut.nilCheck, (i$1 < 0 || i$1 >= yOut.length) ? $throwRuntimeError("index out of range") : yOut[i$1] = 0;
			_i$1++;
		}
		_ref$2 = zOut;
		_i$2 = 0;
		while (_i$2 < 9) {
			i$2 = _i$2;
			zOut.nilCheck, (i$2 < 0 || i$2 >= zOut.length) ? $throwRuntimeError("index out of range") : zOut[i$2] = 0;
			_i$2++;
		}
		i$3 = 1;
		while (i$3 < 16) {
			mask$1 = (i$3 ^ index) >>> 0;
			mask$1 = (mask$1 | ((mask$1 >>> 2 >>> 0))) >>> 0;
			mask$1 = (mask$1 | ((mask$1 >>> 1 >>> 0))) >>> 0;
			mask$1 = (mask$1 & (1)) >>> 0;
			mask$1 = mask$1 - (1) >>> 0;
			_ref$3 = xOut;
			_i$3 = 0;
			while (_i$3 < 9) {
				j = _i$3;
				_lhs = xOut; _index = j; _lhs.nilCheck, (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index] = ((_lhs.nilCheck, ((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index])) | ((((x = (table.nilCheck, ((i$3 < 0 || i$3 >= table.length) ? $throwRuntimeError("index out of range") : table[i$3]))[0], ((j < 0 || j >= x.length) ? $throwRuntimeError("index out of range") : x[j])) & mask$1) >>> 0))) >>> 0;
				_i$3++;
			}
			_ref$4 = yOut;
			_i$4 = 0;
			while (_i$4 < 9) {
				j$1 = _i$4;
				_lhs$1 = yOut; _index$1 = j$1; _lhs$1.nilCheck, (_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1] = ((_lhs$1.nilCheck, ((_index$1 < 0 || _index$1 >= _lhs$1.length) ? $throwRuntimeError("index out of range") : _lhs$1[_index$1])) | ((((x$1 = (table.nilCheck, ((i$3 < 0 || i$3 >= table.length) ? $throwRuntimeError("index out of range") : table[i$3]))[1], ((j$1 < 0 || j$1 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[j$1])) & mask$1) >>> 0))) >>> 0;
				_i$4++;
			}
			_ref$5 = zOut;
			_i$5 = 0;
			while (_i$5 < 9) {
				j$2 = _i$5;
				_lhs$2 = zOut; _index$2 = j$2; _lhs$2.nilCheck, (_index$2 < 0 || _index$2 >= _lhs$2.length) ? $throwRuntimeError("index out of range") : _lhs$2[_index$2] = ((_lhs$2.nilCheck, ((_index$2 < 0 || _index$2 >= _lhs$2.length) ? $throwRuntimeError("index out of range") : _lhs$2[_index$2])) | ((((x$2 = (table.nilCheck, ((i$3 < 0 || i$3 >= table.length) ? $throwRuntimeError("index out of range") : table[i$3]))[2], ((j$2 < 0 || j$2 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[j$2])) & mask$1) >>> 0))) >>> 0;
				_i$5++;
			}
			i$3 = i$3 + (1) >>> 0;
		}
	};
	p256GetBit = function(scalar, bit) {
		var y, x;
		return ((((((y = (((bit & 7) >>> 0)), y < 32 ? (((x = bit >>> 3 >>> 0, (scalar.nilCheck, ((x < 0 || x >= scalar.length) ? $throwRuntimeError("index out of range") : scalar[x])))) >>> y) : 0) << 24 >>> 24)) & 1) >>> 0) >>> 0);
	};
	p256ScalarBaseMult = function(xOut, yOut, zOut, scalar) {
		var nIsInfinityMask, _tmp, _tmp$1, _tmp$2, pIsNoninfiniteMask, mask$1, tableOffset, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, px, py, tx, ty, tz, _ref, _i, i, _ref$1, _i$1, i$1, _ref$2, _i$2, i$2, i$3, j, bit0, bit1, bit2, bit3, index;
		nIsInfinityMask = 4294967295;
		_tmp = 0; _tmp$1 = 0; _tmp$2 = 0; pIsNoninfiniteMask = _tmp; mask$1 = _tmp$1; tableOffset = _tmp$2;
		_tmp$3 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$3, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$4 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$4, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$5 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$5, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$6 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$6, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$7 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$7, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); px = ($arrayType($Uint32, 9)).zero(); $copy(px, _tmp$3, ($arrayType($Uint32, 9))); py = ($arrayType($Uint32, 9)).zero(); $copy(py, _tmp$4, ($arrayType($Uint32, 9))); tx = ($arrayType($Uint32, 9)).zero(); $copy(tx, _tmp$5, ($arrayType($Uint32, 9))); ty = ($arrayType($Uint32, 9)).zero(); $copy(ty, _tmp$6, ($arrayType($Uint32, 9))); tz = ($arrayType($Uint32, 9)).zero(); $copy(tz, _tmp$7, ($arrayType($Uint32, 9)));
		_ref = xOut;
		_i = 0;
		while (_i < 9) {
			i = _i;
			xOut.nilCheck, (i < 0 || i >= xOut.length) ? $throwRuntimeError("index out of range") : xOut[i] = 0;
			_i++;
		}
		_ref$1 = yOut;
		_i$1 = 0;
		while (_i$1 < 9) {
			i$1 = _i$1;
			yOut.nilCheck, (i$1 < 0 || i$1 >= yOut.length) ? $throwRuntimeError("index out of range") : yOut[i$1] = 0;
			_i$1++;
		}
		_ref$2 = zOut;
		_i$2 = 0;
		while (_i$2 < 9) {
			i$2 = _i$2;
			zOut.nilCheck, (i$2 < 0 || i$2 >= zOut.length) ? $throwRuntimeError("index out of range") : zOut[i$2] = 0;
			_i$2++;
		}
		i$3 = 0;
		while (i$3 < 32) {
			if (!((i$3 === 0))) {
				p256PointDouble(xOut, yOut, zOut, xOut, yOut, zOut);
			}
			tableOffset = 0;
			j = 0;
			while (j <= 32) {
				bit0 = p256GetBit(scalar, (31 - i$3 >>> 0) + j >>> 0);
				bit1 = p256GetBit(scalar, (95 - i$3 >>> 0) + j >>> 0);
				bit2 = p256GetBit(scalar, (159 - i$3 >>> 0) + j >>> 0);
				bit3 = p256GetBit(scalar, (223 - i$3 >>> 0) + j >>> 0);
				index = (((((bit0 | ((bit1 << 1 >>> 0))) >>> 0) | ((bit2 << 2 >>> 0))) >>> 0) | ((bit3 << 3 >>> 0))) >>> 0;
				p256SelectAffinePoint(px, py, $subslice(new ($sliceType($Uint32))(p256Precomputed), tableOffset), index);
				tableOffset = tableOffset + (270) >>> 0;
				p256PointAddMixed(tx, ty, tz, xOut, yOut, zOut, px, py);
				p256CopyConditional(xOut, px, nIsInfinityMask);
				p256CopyConditional(yOut, py, nIsInfinityMask);
				p256CopyConditional(zOut, p256One, nIsInfinityMask);
				pIsNoninfiniteMask = nonZeroToAllOnes(index);
				mask$1 = (pIsNoninfiniteMask & (~nIsInfinityMask >>> 0)) >>> 0;
				p256CopyConditional(xOut, tx, mask$1);
				p256CopyConditional(yOut, ty, mask$1);
				p256CopyConditional(zOut, tz, mask$1);
				nIsInfinityMask = (nIsInfinityMask & ((~pIsNoninfiniteMask >>> 0))) >>> 0;
				j = j + (32) >>> 0;
			}
			i$3 = i$3 + (1) >>> 0;
		}
	};
	p256PointToAffine = function(xOut, yOut, x, y, z) {
		var _tmp, _tmp$1, zInv, zInvSq;
		_tmp = ($arrayType($Uint32, 9)).zero(); $copy(_tmp, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$1 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$1, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); zInv = ($arrayType($Uint32, 9)).zero(); $copy(zInv, _tmp, ($arrayType($Uint32, 9))); zInvSq = ($arrayType($Uint32, 9)).zero(); $copy(zInvSq, _tmp$1, ($arrayType($Uint32, 9)));
		p256Invert(zInv, z);
		p256Square(zInvSq, zInv);
		p256Mul(xOut, x, zInvSq);
		p256Mul(zInv, zInv, zInvSq);
		p256Mul(yOut, y, zInv);
	};
	p256ToAffine = function(x, y, z) {
		var xOut = ($ptrType(big.Int)).nil, yOut = ($ptrType(big.Int)).nil, _tmp, _tmp$1, xx, yy, _tmp$2, _tmp$3;
		_tmp = ($arrayType($Uint32, 9)).zero(); $copy(_tmp, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$1 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$1, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); xx = ($arrayType($Uint32, 9)).zero(); $copy(xx, _tmp, ($arrayType($Uint32, 9))); yy = ($arrayType($Uint32, 9)).zero(); $copy(yy, _tmp$1, ($arrayType($Uint32, 9)));
		p256PointToAffine(xx, yy, x, y, z);
		_tmp$2 = p256ToBig(xx); _tmp$3 = p256ToBig(yy); xOut = _tmp$2; yOut = _tmp$3;
		return [xOut, yOut];
	};
	p256ScalarMult = function(xOut, yOut, zOut, x, y, scalar) {
		var _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, px, py, pz, tx, ty, tz, precomp, _tmp$6, _tmp$7, _tmp$8, _tmp$9, nIsInfinityMask, index, pIsNoninfiniteMask, mask$1, i, x$1, _q, x$2, _q$1, x$3, _q$2, x$4, x$5, x$6, _ref, _i, i$1, _ref$1, _i$1, i$2, _ref$2, _i$2, i$3, i$4, x$7, _q$3, y$1;
		_tmp = ($arrayType($Uint32, 9)).zero(); $copy(_tmp, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$1 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$1, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$2 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$2, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$3 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$3, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$4 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$4, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); _tmp$5 = ($arrayType($Uint32, 9)).zero(); $copy(_tmp$5, ($arrayType($Uint32, 9)).zero(), ($arrayType($Uint32, 9))); px = ($arrayType($Uint32, 9)).zero(); $copy(px, _tmp, ($arrayType($Uint32, 9))); py = ($arrayType($Uint32, 9)).zero(); $copy(py, _tmp$1, ($arrayType($Uint32, 9))); pz = ($arrayType($Uint32, 9)).zero(); $copy(pz, _tmp$2, ($arrayType($Uint32, 9))); tx = ($arrayType($Uint32, 9)).zero(); $copy(tx, _tmp$3, ($arrayType($Uint32, 9))); ty = ($arrayType($Uint32, 9)).zero(); $copy(ty, _tmp$4, ($arrayType($Uint32, 9))); tz = ($arrayType($Uint32, 9)).zero(); $copy(tz, _tmp$5, ($arrayType($Uint32, 9)));
		precomp = ($arrayType(($arrayType(($arrayType($Uint32, 9)), 3)), 16)).zero(); $copy(precomp, ($arrayType(($arrayType(($arrayType($Uint32, 9)), 3)), 16)).zero(), ($arrayType(($arrayType(($arrayType($Uint32, 9)), 3)), 16)));
		_tmp$6 = 0; _tmp$7 = 0; _tmp$8 = 0; _tmp$9 = 0; nIsInfinityMask = _tmp$6; index = _tmp$7; pIsNoninfiniteMask = _tmp$8; mask$1 = _tmp$9;
		$copy(precomp[1][0], x, ($arrayType($Uint32, 9)));
		$copy(precomp[1][1], y, ($arrayType($Uint32, 9)));
		$copy(precomp[1][2], p256One, ($arrayType($Uint32, 9)));
		i = 2;
		while (i < 16) {
			p256PointDouble(((i < 0 || i >= precomp.length) ? $throwRuntimeError("index out of range") : precomp[i])[0], ((i < 0 || i >= precomp.length) ? $throwRuntimeError("index out of range") : precomp[i])[1], ((i < 0 || i >= precomp.length) ? $throwRuntimeError("index out of range") : precomp[i])[2], (x$1 = (_q = i / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")), ((x$1 < 0 || x$1 >= precomp.length) ? $throwRuntimeError("index out of range") : precomp[x$1]))[0], (x$2 = (_q$1 = i / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$2 < 0 || x$2 >= precomp.length) ? $throwRuntimeError("index out of range") : precomp[x$2]))[1], (x$3 = (_q$2 = i / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")), ((x$3 < 0 || x$3 >= precomp.length) ? $throwRuntimeError("index out of range") : precomp[x$3]))[2]);
			p256PointAddMixed((x$4 = i + 1 >> 0, ((x$4 < 0 || x$4 >= precomp.length) ? $throwRuntimeError("index out of range") : precomp[x$4]))[0], (x$5 = i + 1 >> 0, ((x$5 < 0 || x$5 >= precomp.length) ? $throwRuntimeError("index out of range") : precomp[x$5]))[1], (x$6 = i + 1 >> 0, ((x$6 < 0 || x$6 >= precomp.length) ? $throwRuntimeError("index out of range") : precomp[x$6]))[2], ((i < 0 || i >= precomp.length) ? $throwRuntimeError("index out of range") : precomp[i])[0], ((i < 0 || i >= precomp.length) ? $throwRuntimeError("index out of range") : precomp[i])[1], ((i < 0 || i >= precomp.length) ? $throwRuntimeError("index out of range") : precomp[i])[2], x, y);
			i = i + (2) >> 0;
		}
		_ref = xOut;
		_i = 0;
		while (_i < 9) {
			i$1 = _i;
			xOut.nilCheck, (i$1 < 0 || i$1 >= xOut.length) ? $throwRuntimeError("index out of range") : xOut[i$1] = 0;
			_i++;
		}
		_ref$1 = yOut;
		_i$1 = 0;
		while (_i$1 < 9) {
			i$2 = _i$1;
			yOut.nilCheck, (i$2 < 0 || i$2 >= yOut.length) ? $throwRuntimeError("index out of range") : yOut[i$2] = 0;
			_i$1++;
		}
		_ref$2 = zOut;
		_i$2 = 0;
		while (_i$2 < 9) {
			i$3 = _i$2;
			zOut.nilCheck, (i$3 < 0 || i$3 >= zOut.length) ? $throwRuntimeError("index out of range") : zOut[i$3] = 0;
			_i$2++;
		}
		nIsInfinityMask = 4294967295;
		i$4 = 0;
		while (i$4 < 64) {
			if (!((i$4 === 0))) {
				p256PointDouble(xOut, yOut, zOut, xOut, yOut, zOut);
				p256PointDouble(xOut, yOut, zOut, xOut, yOut, zOut);
				p256PointDouble(xOut, yOut, zOut, xOut, yOut, zOut);
				p256PointDouble(xOut, yOut, zOut, xOut, yOut, zOut);
			}
			index = ((x$7 = 31 - (_q$3 = i$4 / 2, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0, (scalar.nilCheck, ((x$7 < 0 || x$7 >= scalar.length) ? $throwRuntimeError("index out of range") : scalar[x$7]))) >>> 0);
			if (((i$4 & 1)) === 1) {
				index = (index & (15)) >>> 0;
			} else {
				index = (y$1 = (4), y$1 < 32 ? (index >>> y$1) : 0) >>> 0;
			}
			p256SelectJacobianPoint(px, py, pz, precomp, index);
			p256PointAdd(tx, ty, tz, xOut, yOut, zOut, px, py, pz);
			p256CopyConditional(xOut, px, nIsInfinityMask);
			p256CopyConditional(yOut, py, nIsInfinityMask);
			p256CopyConditional(zOut, pz, nIsInfinityMask);
			pIsNoninfiniteMask = nonZeroToAllOnes(index);
			mask$1 = (pIsNoninfiniteMask & (~nIsInfinityMask >>> 0)) >>> 0;
			p256CopyConditional(xOut, tx, mask$1);
			p256CopyConditional(yOut, ty, mask$1);
			p256CopyConditional(zOut, tz, mask$1);
			nIsInfinityMask = (nIsInfinityMask & ((~pIsNoninfiniteMask >>> 0))) >>> 0;
			i$4 = i$4 + (1) >> 0;
		}
	};
	p256FromBig = function(out, in$1) {
		var tmp, i, bits, bits$1;
		tmp = new big.Int.Ptr().Lsh(in$1, 257);
		tmp.Mod(tmp, p256.CurveParams.P);
		i = 0;
		while (i < 9) {
			bits = tmp.Bits();
			if (bits.$length > 0) {
				out.nilCheck, (i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = ((((0 < 0 || 0 >= bits.$length) ? $throwRuntimeError("index out of range") : bits.$array[bits.$offset + 0]) >>> 0) & 536870911) >>> 0;
			} else {
				out.nilCheck, (i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = 0;
			}
			tmp.Rsh(tmp, 29);
			i = i + (1) >> 0;
			if (i === 9) {
				break;
			}
			bits$1 = tmp.Bits();
			if (bits$1.$length > 0) {
				out.nilCheck, (i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = ((((0 < 0 || 0 >= bits$1.$length) ? $throwRuntimeError("index out of range") : bits$1.$array[bits$1.$offset + 0]) >>> 0) & 268435455) >>> 0;
			} else {
				out.nilCheck, (i < 0 || i >= out.length) ? $throwRuntimeError("index out of range") : out[i] = 0;
			}
			tmp.Rsh(tmp, 28);
			i = i + (1) >> 0;
		}
	};
	p256ToBig = function(in$1) {
		var _tmp, _tmp$1, result, tmp, i;
		_tmp = new big.Int.Ptr(); _tmp$1 = new big.Int.Ptr(); result = _tmp; tmp = _tmp$1;
		result.SetInt64(new $Int64(0, (in$1.nilCheck, in$1[8])));
		i = 7;
		while (i >= 0) {
			if (((i & 1)) === 0) {
				result.Lsh(result, 29);
			} else {
				result.Lsh(result, 28);
			}
			tmp.SetInt64(new $Int64(0, (in$1.nilCheck, ((i < 0 || i >= in$1.length) ? $throwRuntimeError("index out of range") : in$1[i]))));
			result.Add(result, tmp);
			i = i - (1) >> 0;
		}
		result.Mul(result, p256RInverse);
		result.Mod(result, p256.CurveParams.P);
		return result;
	};
	$pkg.$init = function() {
		Curve.init([["Add", "Add", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int))], false)], ["Double", "Double", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int))], false)], ["IsOnCurve", "IsOnCurve", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int))], [$Bool], false)], ["Params", "Params", "", $funcType([], [($ptrType(CurveParams))], false)], ["ScalarBaseMult", "ScalarBaseMult", "", $funcType([($sliceType($Uint8))], [($ptrType(big.Int)), ($ptrType(big.Int))], false)], ["ScalarMult", "ScalarMult", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($sliceType($Uint8))], [($ptrType(big.Int)), ($ptrType(big.Int))], false)]]);
		($ptrType(CurveParams)).methods = [["Add", "Add", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), -1], ["Double", "Double", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), -1], ["IsOnCurve", "IsOnCurve", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int))], [$Bool], false), -1], ["Params", "Params", "", $funcType([], [($ptrType(CurveParams))], false), -1], ["ScalarBaseMult", "ScalarBaseMult", "", $funcType([($sliceType($Uint8))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), -1], ["ScalarMult", "ScalarMult", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($sliceType($Uint8))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), -1], ["addJacobian", "addJacobian", "crypto/elliptic", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], false), -1], ["affineFromJacobian", "affineFromJacobian", "crypto/elliptic", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), -1], ["doubleJacobian", "doubleJacobian", "crypto/elliptic", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], false), -1]];
		CurveParams.init([["P", "P", "", ($ptrType(big.Int)), ""], ["N", "N", "", ($ptrType(big.Int)), ""], ["B", "B", "", ($ptrType(big.Int)), ""], ["Gx", "Gx", "", ($ptrType(big.Int)), ""], ["Gy", "Gy", "", ($ptrType(big.Int)), ""], ["BitSize", "BitSize", "", $Int, ""]]);
		p224Curve.methods = [["Add", "Add", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), -1], ["Double", "Double", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), -1], ["IsOnCurve", "IsOnCurve", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int))], [$Bool], false), -1], ["Params", "Params", "", $funcType([], [($ptrType(CurveParams))], false), -1], ["ScalarBaseMult", "ScalarBaseMult", "", $funcType([($sliceType($Uint8))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), -1], ["ScalarMult", "ScalarMult", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($sliceType($Uint8))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), -1], ["addJacobian", "addJacobian", "crypto/elliptic", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], false), 0], ["affineFromJacobian", "affineFromJacobian", "crypto/elliptic", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), 0], ["doubleJacobian", "doubleJacobian", "crypto/elliptic", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], false), 0]];
		($ptrType(p224Curve)).methods = [["Add", "Add", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), -1], ["Double", "Double", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), -1], ["IsOnCurve", "IsOnCurve", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int))], [$Bool], false), -1], ["Params", "Params", "", $funcType([], [($ptrType(CurveParams))], false), -1], ["ScalarBaseMult", "ScalarBaseMult", "", $funcType([($sliceType($Uint8))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), -1], ["ScalarMult", "ScalarMult", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($sliceType($Uint8))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), -1], ["addJacobian", "addJacobian", "crypto/elliptic", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], false), 0], ["affineFromJacobian", "affineFromJacobian", "crypto/elliptic", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), 0], ["doubleJacobian", "doubleJacobian", "crypto/elliptic", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], false), 0]];
		p224Curve.init([["CurveParams", "", "", ($ptrType(CurveParams)), ""], ["gx", "gx", "crypto/elliptic", p224FieldElement, ""], ["gy", "gy", "crypto/elliptic", p224FieldElement, ""], ["b", "b", "crypto/elliptic", p224FieldElement, ""]]);
		p224FieldElement.init($Uint32, 8);
		p224LargeFieldElement.init($Uint64, 15);
		p256Curve.methods = [["Add", "Add", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), 0], ["Double", "Double", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), 0], ["IsOnCurve", "IsOnCurve", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int))], [$Bool], false), 0], ["Params", "Params", "", $funcType([], [($ptrType(CurveParams))], false), -1], ["ScalarBaseMult", "ScalarBaseMult", "", $funcType([($sliceType($Uint8))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), -1], ["ScalarMult", "ScalarMult", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($sliceType($Uint8))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), -1], ["addJacobian", "addJacobian", "crypto/elliptic", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], false), 0], ["affineFromJacobian", "affineFromJacobian", "crypto/elliptic", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), 0], ["doubleJacobian", "doubleJacobian", "crypto/elliptic", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], false), 0]];
		($ptrType(p256Curve)).methods = [["Add", "Add", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), 0], ["Double", "Double", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), 0], ["IsOnCurve", "IsOnCurve", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int))], [$Bool], false), 0], ["Params", "Params", "", $funcType([], [($ptrType(CurveParams))], false), -1], ["ScalarBaseMult", "ScalarBaseMult", "", $funcType([($sliceType($Uint8))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), -1], ["ScalarMult", "ScalarMult", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($sliceType($Uint8))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), -1], ["addJacobian", "addJacobian", "crypto/elliptic", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], false), 0], ["affineFromJacobian", "affineFromJacobian", "crypto/elliptic", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), 0], ["doubleJacobian", "doubleJacobian", "crypto/elliptic", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], false), 0]];
		p256Curve.init([["CurveParams", "", "", ($ptrType(CurveParams)), ""]]);
		initonce = new sync.Once.Ptr();
		p384 = ($ptrType(CurveParams)).nil;
		p521 = ($ptrType(CurveParams)).nil;
		p224 = new p224Curve.Ptr();
		p256 = new p256Curve.Ptr();
		p256RInverse = ($ptrType(big.Int)).nil;
		mask = new ($sliceType($Uint8))([255, 1, 3, 7, 15, 31, 63, 127]);
		p224P = $toNativeArray("Uint32", [1, 0, 0, 268431360, 268435455, 268435455, 268435455, 268435455]);
		p224ZeroModP31 = new ($sliceType($Uint32))([2147483656, 2147483640, 2147483640, 2147450872, 2147483640, 2147483640, 2147483640, 2147483640]);
		p224ZeroModP63 = $toNativeArray("Uint64", [new $Uint64(2147483656, 0), new $Uint64(2147483640, 0), new $Uint64(2147483640, 0), new $Uint64(2147483640, 0), new $Uint64(2147483639, 4294443008), new $Uint64(2147483640, 0), new $Uint64(2147483640, 0), new $Uint64(2147483640, 0)]);
		p256One = $toNativeArray("Uint32", [2, 0, 0, 268433408, 536870911, 268435455, 532676607, 33554431, 0]);
		p256Precomputed = $toNativeArray("Uint32", [290596984, 242421057, 230031737, 78635775, 310917853, 212721032, 295599836, 222981803, 51514350, 489335829, 254096764, 434396381, 96936400, 429049253, 170095751, 22329889, 21696699, 11419619, 222406006, 153287761, 37001551, 101408979, 373655214, 216620824, 535072883, 66729676, 99339564, 188755759, 22835391, 358715996, 94529284, 229187216, 215751807, 513877062, 236641822, 248061730, 40859512, 90604670, 168553630, 37024851, 439480858, 226879324, 90992905, 170293760, 190300240, 10025815, 178796492, 101451666, 217734681, 102476702, 92922779, 10691781, 131522279, 43478603, 532943434, 176956491, 484992866, 215358590, 405915872, 123172065, 496412073, 138651209, 205172986, 115533781, 124205610, 395011560, 67124891, 438243778, 7870186, 258227729, 93078495, 255999938, 425934842, 143782578, 305931036, 74112396, 88539357, 94251799, 388871183, 138291069, 185456137, 265411090, 56389202, 435020300, 219799744, 159190848, 184638233, 71951349, 14748830, 54179201, 90859435, 91714381, 501071970, 207073549, 21607325, 40541819, 204857247, 75982029, 124632266, 212120422, 244515755, 443842791, 92184193, 504621904, 256273651, 116484896, 79311219, 202804275, 365646905, 111382033, 121002173, 187258447, 66509915, 5486974, 321045696, 106813439, 60941558, 350622890, 153379607, 466107082, 182025965, 221826634, 260222982, 54653047, 174775689, 76106445, 166814421, 260313327, 455502422, 14152227, 65063826, 238663282, 111317018, 110789974, 518080, 163043539, 3185280, 449863551, 204453341, 213898269, 164542008, 273777244, 228642651, 135456897, 116610665, 111505196, 502845828, 3430432, 343397495, 23354801, 199756881, 203603518, 238413402, 451639968, 204952341, 258456729, 134076345, 421511614, 6366045, 46236905, 29730873, 75111974, 192722006, 155066973, 351520493, 214702793, 402536435, 77105545, 445695234, 49487938, 169309851, 184388732, 135863406, 500019767, 23199936, 276509345, 107743451, 282094082, 261267, 90308643, 376580903, 109796441, 40959228, 262999756, 241033666, 246105707, 50090300, 67630940, 195735859, 158359529, 193509607, 120899987, 31588239, 420833648, 180162304, 273063591, 53033664, 215783594, 30950397, 236240872, 364806751, 9130514, 246676327, 136101161, 197537558, 45546695, 257576489, 324406118, 202074818, 85649040, 222421617, 255761364, 30870187, 16949106, 121510965, 250023868, 181935023, 166511770, 141325342, 266780208, 392647399, 2348054, 528735877, 41804168, 107966648, 404542751, 158035532, 412033845, 173930329, 396852918, 267062899, 357230868, 49540177, 58878809, 194113917, 29829449, 325238538, 237239775, 173413552, 1015183, 495713, 136567250, 136396601, 287878667, 218717445, 193315010, 32289519, 38657156, 238414081, 406919754, 257809469, 58222217, 86139112, 95303012, 88256781, 148453957, 429206180, 160877633, 273786665, 79574169, 86713258, 278868094, 116766395, 528802279, 125439226, 281337663, 39453418, 184844341, 238149222, 208587427, 42902325, 42491940, 326299680, 16080181, 367290444, 254451223, 441087273, 213368497, 187332769, 447880991, 104209615, 113842077, 185816615, 308787572, 71338925, 482342488, 238904593, 13096815, 30177897, 243196699, 89107279, 2855247, 450001456, 215177118, 206574156, 84781712, 11616114, 184986229, 118447302, 373941674, 139088658, 53019708, 68960273, 332604433, 184854584, 225840429, 387167538, 195693571, 138420907, 113046977, 49566585, 25878640, 415883550, 34327194, 107956587, 65991316, 108331218, 226451772, 2997227, 192155704, 235148095, 360879757, 199853559, 28097562, 443192223, 54415606, 224812756, 189496278, 509228953, 112408647, 402282239, 106887472, 2219082, 45315673, 72416791, 188054373, 234221484, 356088815, 164846207, 288014687, 103081518, 177253935, 276753618, 32938942, 125660110, 91493268, 331777276, 156289296, 119886379, 231179651, 68086459, 534655626, 198581654, 220775303, 166165897, 307563584, 123325309, 57143092, 182626656, 152800220, 154428073, 16017903, 187603695, 221030257, 89005890, 8038985, 103901883, 37829774, 88235001, 468532794, 254222964, 526283558, 104949015, 245526642, 164552359, 7239219, 130619730, 226520526, 149071841, 239214106, 68733409, 31180944, 456743990, 169722229, 499445619, 144011060, 239820018, 453851672, 51989046, 113402911, 239342156, 170872490, 176956858, 261258967, 103265812, 121052362, 195126932, 68664323, 130066403, 163798041, 292069893, 146190349, 283373001, 163683314, 92807721, 455819618, 173862682, 356737579, 163398462, 56942669, 122161042, 97105331, 243662629, 67694423, 404017060, 18986011, 220498447, 61887010, 60535146, 209032813, 168001811, 172627817, 18857068, 152560910, 250363304, 379416236, 17569433, 172056915, 259148050, 365781175, 78428889, 99599866, 253038295, 1190737, 285520906, 213382210, 263923967, 111956938, 425804492, 129961897, 9795153, 81850901, 248789496, 66350037, 95217711, 285808310, 7188600, 268270935, 254724780, 212364780, 366392026, 157674697, 479376578, 2045969, 481329397, 47757316, 433176877, 253803846, 26550183, 171333315, 86221861, 265094802, 222617032, 320802651, 184028746, 215612532, 161199640, 47944780, 174534800, 29495521, 395087139, 21447555, 280523837, 159753563, 48711545, 5726520, 156793127, 321990906, 199251222, 167040537, 196486512, 161400209, 227830014, 487028781, 264711691, 117551768, 409175611, 140072120, 303696950, 166199007, 258257961, 163174174, 350418392, 260410682, 155381416, 228964197, 116240383, 178067660, 208004282, 477396614, 240036117, 427939745, 137975385, 86955234, 142427063, 58372379, 433230542, 260916882, 415434047, 143015443, 79775424, 113112410, 82068861, 370483849, 180850370, 442090914, 33721239, 119287041, 43353375, 67400827, 142103949, 131242660, 332936223, 148565975, 329029421, 112716405, 222993886, 267477976, 136140247, 173797224, 192622808, 199703919, 178815297, 228027521, 132622796, 415151985, 225918141, 334829905, 164675959, 29661816]);
		p256Zero31 = $toNativeArray("Uint32", [2147483640, 1073741820, 2147483644, 1073750012, 2147483644, 1073741820, 2164260860, 939524092, 2147483644]);
	};
	return $pkg;
})();
$packages["crypto/ecdsa"] = (function() {
	var $pkg = {}, elliptic = $packages["crypto/elliptic"], io = $packages["io"], big = $packages["math/big"], PublicKey, PrivateKey, one, randFieldElement, hashToInt, fermatInverse, Sign, Verify;
	PublicKey = $pkg.PublicKey = $newType(0, "Struct", "ecdsa.PublicKey", "PublicKey", "crypto/ecdsa", function(Curve_, X_, Y_) {
		this.$val = this;
		this.Curve = Curve_ !== undefined ? Curve_ : $ifaceNil;
		this.X = X_ !== undefined ? X_ : ($ptrType(big.Int)).nil;
		this.Y = Y_ !== undefined ? Y_ : ($ptrType(big.Int)).nil;
	});
	PrivateKey = $pkg.PrivateKey = $newType(0, "Struct", "ecdsa.PrivateKey", "PrivateKey", "crypto/ecdsa", function(PublicKey_, D_) {
		this.$val = this;
		this.PublicKey = PublicKey_ !== undefined ? PublicKey_ : new PublicKey.Ptr();
		this.D = D_ !== undefined ? D_ : ($ptrType(big.Int)).nil;
	});
	randFieldElement = function(c, rand) {
		var k = ($ptrType(big.Int)).nil, err = $ifaceNil, params, _q, b, _tuple, n;
		params = c.Params();
		b = ($sliceType($Uint8)).make(((_q = params.BitSize / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) + 8 >> 0));
		_tuple = io.ReadFull(rand, b); err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [k, err];
		}
		k = new big.Int.Ptr().SetBytes(b);
		n = new big.Int.Ptr().Sub(params.N, one);
		k.Mod(k, n);
		k.Add(k, one);
		return [k, err];
	};
	hashToInt = function(hash, c) {
		var orderBits, _q, orderBytes, ret, x, excess;
		orderBits = c.Params().N.BitLen();
		orderBytes = (_q = ((orderBits + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (hash.$length > orderBytes) {
			hash = $subslice(hash, 0, orderBytes);
		}
		ret = new big.Int.Ptr().SetBytes(hash);
		excess = (x = hash.$length, (((x >>> 16 << 16) * 8 >> 0) + (x << 16 >>> 16) * 8) >> 0) - orderBits >> 0;
		if (excess > 0) {
			ret.Rsh(ret, (excess >>> 0));
		}
		return ret;
	};
	fermatInverse = function(k, N) {
		var two, nMinus2;
		two = big.NewInt(new $Int64(0, 2));
		nMinus2 = new big.Int.Ptr().Sub(N, two);
		return new big.Int.Ptr().Exp(k, nMinus2, N);
	};
	Sign = $pkg.Sign = function(rand, priv, hash) {
		var r = ($ptrType(big.Int)).nil, s = ($ptrType(big.Int)).nil, err = $ifaceNil, c, N, _tmp, _tmp$1, k, kInv, _tuple, _tuple$1, e;
		c = priv.PublicKey.Curve;
		N = c.Params().N;
		_tmp = ($ptrType(big.Int)).nil; _tmp$1 = ($ptrType(big.Int)).nil; k = _tmp; kInv = _tmp$1;
		while (true) {
			while (true) {
				_tuple = randFieldElement(c, rand); k = _tuple[0]; err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					r = ($ptrType(big.Int)).nil;
					return [r, s, err];
				}
				kInv = fermatInverse(k, N);
				_tuple$1 = priv.PublicKey.Curve.ScalarBaseMult(k.Bytes()); r = _tuple$1[0];
				r.Mod(r, N);
				if (!((r.Sign() === 0))) {
					break;
				}
			}
			e = hashToInt(hash, c);
			s = new big.Int.Ptr().Mul(priv.D, r);
			s.Add(s, e);
			s.Mul(s, kInv);
			s.Mod(s, N);
			if (!((s.Sign() === 0))) {
				break;
			}
		}
		return [r, s, err];
	};
	Verify = $pkg.Verify = function(pub, hash, r, s) {
		var c, N, e, w, u1, u2, _tuple, x1, y1, _tuple$1, x2, y2, _tuple$2, x, y;
		c = pub.Curve;
		N = c.Params().N;
		if ((r.Sign() === 0) || (s.Sign() === 0)) {
			return false;
		}
		if (r.Cmp(N) >= 0 || s.Cmp(N) >= 0) {
			return false;
		}
		e = hashToInt(hash, c);
		w = new big.Int.Ptr().ModInverse(s, N);
		u1 = e.Mul(e, w);
		u1.Mod(u1, N);
		u2 = w.Mul(r, w);
		u2.Mod(u2, N);
		_tuple = c.ScalarBaseMult(u1.Bytes()); x1 = _tuple[0]; y1 = _tuple[1];
		_tuple$1 = c.ScalarMult(pub.X, pub.Y, u2.Bytes()); x2 = _tuple$1[0]; y2 = _tuple$1[1];
		_tuple$2 = c.Add(x1, y1, x2, y2); x = _tuple$2[0]; y = _tuple$2[1];
		if ((x.Sign() === 0) && (y.Sign() === 0)) {
			return false;
		}
		x.Mod(x, N);
		return x.Cmp(r) === 0;
	};
	$pkg.$init = function() {
		PublicKey.methods = [["Add", "Add", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), 0], ["Double", "Double", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), 0], ["IsOnCurve", "IsOnCurve", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int))], [$Bool], false), 0], ["Params", "Params", "", $funcType([], [($ptrType(elliptic.CurveParams))], false), 0], ["ScalarBaseMult", "ScalarBaseMult", "", $funcType([($sliceType($Uint8))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), 0], ["ScalarMult", "ScalarMult", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($sliceType($Uint8))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), 0]];
		($ptrType(PublicKey)).methods = [["Add", "Add", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), 0], ["Double", "Double", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), 0], ["IsOnCurve", "IsOnCurve", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int))], [$Bool], false), 0], ["Params", "Params", "", $funcType([], [($ptrType(elliptic.CurveParams))], false), 0], ["ScalarBaseMult", "ScalarBaseMult", "", $funcType([($sliceType($Uint8))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), 0], ["ScalarMult", "ScalarMult", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($sliceType($Uint8))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), 0]];
		PublicKey.init([["Curve", "", "", elliptic.Curve, ""], ["X", "X", "", ($ptrType(big.Int)), ""], ["Y", "Y", "", ($ptrType(big.Int)), ""]]);
		PrivateKey.methods = [["Add", "Add", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), 0], ["Double", "Double", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), 0], ["IsOnCurve", "IsOnCurve", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int))], [$Bool], false), 0], ["Params", "Params", "", $funcType([], [($ptrType(elliptic.CurveParams))], false), 0], ["ScalarBaseMult", "ScalarBaseMult", "", $funcType([($sliceType($Uint8))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), 0], ["ScalarMult", "ScalarMult", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($sliceType($Uint8))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), 0]];
		($ptrType(PrivateKey)).methods = [["Add", "Add", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), 0], ["Double", "Double", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), 0], ["IsOnCurve", "IsOnCurve", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int))], [$Bool], false), 0], ["Params", "Params", "", $funcType([], [($ptrType(elliptic.CurveParams))], false), 0], ["ScalarBaseMult", "ScalarBaseMult", "", $funcType([($sliceType($Uint8))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), 0], ["ScalarMult", "ScalarMult", "", $funcType([($ptrType(big.Int)), ($ptrType(big.Int)), ($sliceType($Uint8))], [($ptrType(big.Int)), ($ptrType(big.Int))], false), 0]];
		PrivateKey.init([["PublicKey", "", "", PublicKey, ""], ["D", "D", "", ($ptrType(big.Int)), ""]]);
		one = new big.Int.Ptr().SetInt64(new $Int64(0, 1));
	};
	return $pkg;
})();
$packages["crypto/hmac"] = (function() {
	var $pkg = {}, subtle = $packages["crypto/subtle"], hash = $packages["hash"], hmac, New;
	hmac = $pkg.hmac = $newType(0, "Struct", "hmac.hmac", "hmac", "crypto/hmac", function(size_, blocksize_, key_, tmp_, outer_, inner_) {
		this.$val = this;
		this.size = size_ !== undefined ? size_ : 0;
		this.blocksize = blocksize_ !== undefined ? blocksize_ : 0;
		this.key = key_ !== undefined ? key_ : ($sliceType($Uint8)).nil;
		this.tmp = tmp_ !== undefined ? tmp_ : ($sliceType($Uint8)).nil;
		this.outer = outer_ !== undefined ? outer_ : $ifaceNil;
		this.inner = inner_ !== undefined ? inner_ : $ifaceNil;
	});
	hmac.Ptr.prototype.tmpPad = function(xor) {
		var h, _ref, _i, i, k, x, i$1, x$1;
		h = this;
		_ref = h.key;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			k = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			(x = h.tmp, (i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = (xor ^ k) << 24 >>> 24);
			_i++;
		}
		i$1 = h.key.$length;
		while (i$1 < h.blocksize) {
			(x$1 = h.tmp, (i$1 < 0 || i$1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i$1] = xor);
			i$1 = i$1 + (1) >> 0;
		}
	};
	hmac.prototype.tmpPad = function(xor) { return this.$val.tmpPad(xor); };
	hmac.Ptr.prototype.Sum = function(in$1) {
		var h, origLen;
		h = this;
		origLen = in$1.$length;
		in$1 = h.inner.Sum(in$1);
		h.tmpPad(92);
		$copySlice($subslice(h.tmp, h.blocksize), $subslice(in$1, origLen));
		h.outer.Reset();
		h.outer.Write(h.tmp);
		return h.outer.Sum($subslice(in$1, 0, origLen));
	};
	hmac.prototype.Sum = function(in$1) { return this.$val.Sum(in$1); };
	hmac.Ptr.prototype.Write = function(p) {
		var n = 0, err = $ifaceNil, h, _tuple;
		h = this;
		_tuple = h.inner.Write(p); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	hmac.prototype.Write = function(p) { return this.$val.Write(p); };
	hmac.Ptr.prototype.Size = function() {
		var h;
		h = this;
		return h.size;
	};
	hmac.prototype.Size = function() { return this.$val.Size(); };
	hmac.Ptr.prototype.BlockSize = function() {
		var h;
		h = this;
		return h.blocksize;
	};
	hmac.prototype.BlockSize = function() { return this.$val.BlockSize(); };
	hmac.Ptr.prototype.Reset = function() {
		var h;
		h = this;
		h.inner.Reset();
		h.tmpPad(54);
		h.inner.Write($subslice(h.tmp, 0, h.blocksize));
	};
	hmac.prototype.Reset = function() { return this.$val.Reset(); };
	New = $pkg.New = function(h, key) {
		var hm;
		hm = new hmac.Ptr();
		hm.outer = h();
		hm.inner = h();
		hm.size = hm.inner.Size();
		hm.blocksize = hm.inner.BlockSize();
		hm.tmp = ($sliceType($Uint8)).make((hm.blocksize + hm.size >> 0));
		if (key.$length > hm.blocksize) {
			hm.outer.Write(key);
			key = hm.outer.Sum(($sliceType($Uint8)).nil);
		}
		hm.key = ($sliceType($Uint8)).make(key.$length);
		$copySlice(hm.key, key);
		hm.Reset();
		return hm;
	};
	$pkg.$init = function() {
		($ptrType(hmac)).methods = [["BlockSize", "BlockSize", "", $funcType([], [$Int], false), -1], ["Reset", "Reset", "", $funcType([], [], false), -1], ["Size", "Size", "", $funcType([], [$Int], false), -1], ["Sum", "Sum", "", $funcType([($sliceType($Uint8))], [($sliceType($Uint8))], false), -1], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["tmpPad", "tmpPad", "crypto/hmac", $funcType([$Uint8], [], false), -1]];
		hmac.init([["size", "size", "crypto/hmac", $Int, ""], ["blocksize", "blocksize", "crypto/hmac", $Int, ""], ["key", "key", "crypto/hmac", ($sliceType($Uint8)), ""], ["tmp", "tmp", "crypto/hmac", ($sliceType($Uint8)), ""], ["outer", "outer", "crypto/hmac", hash.Hash, ""], ["inner", "inner", "crypto/hmac", hash.Hash, ""]]);
	};
	return $pkg;
})();
$packages["crypto/md5"] = (function() {
	var $pkg = {}, crypto = $packages["crypto"], hash = $packages["hash"], runtime = $packages["runtime"], digest, littleEndian, block, init, New, init$1, blockGeneric;
	digest = $pkg.digest = $newType(0, "Struct", "md5.digest", "digest", "crypto/md5", function(s_, x_, nx_, len_) {
		this.$val = this;
		this.s = s_ !== undefined ? s_ : ($arrayType($Uint32, 4)).zero();
		this.x = x_ !== undefined ? x_ : ($arrayType($Uint8, 64)).zero();
		this.nx = nx_ !== undefined ? nx_ : 0;
		this.len = len_ !== undefined ? len_ : new $Uint64(0, 0);
	});
	init = function() {
		crypto.RegisterHash(2, New);
	};
	digest.Ptr.prototype.Reset = function() {
		var d;
		d = this;
		d.s[0] = 1732584193;
		d.s[1] = 4023233417;
		d.s[2] = 2562383102;
		d.s[3] = 271733878;
		d.nx = 0;
		d.len = new $Uint64(0, 0);
	};
	digest.prototype.Reset = function() { return this.$val.Reset(); };
	New = $pkg.New = function() {
		var d;
		d = new digest.Ptr();
		d.Reset();
		return d;
	};
	digest.Ptr.prototype.Size = function() {
		var d;
		d = this;
		return 16;
	};
	digest.prototype.Size = function() { return this.$val.Size(); };
	digest.Ptr.prototype.BlockSize = function() {
		var d;
		d = this;
		return 64;
	};
	digest.prototype.BlockSize = function() { return this.$val.BlockSize(); };
	digest.Ptr.prototype.Write = function(p) {
		var nn = 0, err = $ifaceNil, d, x, x$1, n, i, x$2, x$3, n$1;
		d = this;
		nn = p.$length;
		d.len = (x = d.len, x$1 = new $Uint64(0, nn), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
		if (d.nx > 0) {
			n = p.$length;
			if (n > (64 - d.nx >> 0)) {
				n = 64 - d.nx >> 0;
			}
			i = 0;
			while (i < n) {
				(x$2 = d.x, x$3 = d.nx + i >> 0, (x$3 < 0 || x$3 >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[x$3] = ((i < 0 || i >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + i]));
				i = i + (1) >> 0;
			}
			d.nx = d.nx + (n) >> 0;
			if (d.nx === 64) {
				block(d, $subslice(new ($sliceType($Uint8))(d.x), 0, 64));
				d.nx = 0;
			}
			p = $subslice(p, n);
		}
		if (p.$length >= 64) {
			n$1 = p.$length & ~63;
			block(d, $subslice(p, 0, n$1));
			p = $subslice(p, n$1);
		}
		if (p.$length > 0) {
			d.nx = $copySlice(new ($sliceType($Uint8))(d.x), p);
		}
		return [nn, err];
	};
	digest.prototype.Write = function(p) { return this.$val.Write(p); };
	digest.Ptr.prototype.Sum = function(in$1) {
		var d0, d, hash$1;
		d0 = this;
		d = new digest.Ptr(); $copy(d, d0, digest);
		hash$1 = ($arrayType($Uint8, 16)).zero(); $copy(hash$1, d.checkSum(), ($arrayType($Uint8, 16)));
		return $appendSlice(in$1, new ($sliceType($Uint8))(hash$1));
	};
	digest.prototype.Sum = function(in$1) { return this.$val.Sum(in$1); };
	digest.Ptr.prototype.checkSum = function() {
		var d, len, tmp, x, x$1, x$2, i, digest$1, _ref, _i, i$1, s, x$3, x$4, x$5, x$6;
		d = this;
		len = d.len;
		tmp = ($arrayType($Uint8, 64)).zero(); $copy(tmp, ($arrayType($Uint8, 64)).zero(), ($arrayType($Uint8, 64)));
		tmp[0] = 128;
		if ((x = $div64(len, new $Uint64(0, 64), true), (x.$high < 0 || (x.$high === 0 && x.$low < 56)))) {
			d.Write($subslice(new ($sliceType($Uint8))(tmp), 0, $flatten64((x$1 = $div64(len, new $Uint64(0, 64), true), new $Uint64(0 - x$1.$high, 56 - x$1.$low)))));
		} else {
			d.Write($subslice(new ($sliceType($Uint8))(tmp), 0, $flatten64((x$2 = $div64(len, new $Uint64(0, 64), true), new $Uint64(0 - x$2.$high, 120 - x$2.$low)))));
		}
		len = $shiftLeft64(len, (3));
		i = 0;
		while (i < 8) {
			(i < 0 || i >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[i] = ($shiftRightUint64(len, (((((8 >>> 16 << 16) * i >>> 0) + (8 << 16 >>> 16) * i) >>> 0))).$low << 24 >>> 24);
			i = i + (1) >>> 0;
		}
		d.Write($subslice(new ($sliceType($Uint8))(tmp), 0, 8));
		if (!((d.nx === 0))) {
			$panic(new $String("d.nx != 0"));
		}
		digest$1 = ($arrayType($Uint8, 16)).zero(); $copy(digest$1, ($arrayType($Uint8, 16)).zero(), ($arrayType($Uint8, 16)));
		_ref = d.s;
		_i = 0;
		while (_i < 4) {
			i$1 = _i;
			s = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
			(x$3 = (((i$1 >>> 16 << 16) * 4 >> 0) + (i$1 << 16 >>> 16) * 4) >> 0, (x$3 < 0 || x$3 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$3] = (s << 24 >>> 24));
			(x$4 = ((((i$1 >>> 16 << 16) * 4 >> 0) + (i$1 << 16 >>> 16) * 4) >> 0) + 1 >> 0, (x$4 < 0 || x$4 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$4] = ((s >>> 8 >>> 0) << 24 >>> 24));
			(x$5 = ((((i$1 >>> 16 << 16) * 4 >> 0) + (i$1 << 16 >>> 16) * 4) >> 0) + 2 >> 0, (x$5 < 0 || x$5 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$5] = ((s >>> 16 >>> 0) << 24 >>> 24));
			(x$6 = ((((i$1 >>> 16 << 16) * 4 >> 0) + (i$1 << 16 >>> 16) * 4) >> 0) + 3 >> 0, (x$6 < 0 || x$6 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$6] = ((s >>> 24 >>> 0) << 24 >>> 24));
			_i++;
		}
		return digest$1;
	};
	digest.prototype.checkSum = function() { return this.$val.checkSum(); };
	init$1 = function() {
		var x, y;
		x = 67305985;
		y = $toNativeArray("Uint8", [1, 2, 3, 4]);
		littleEndian = $equal(x, y, ($arrayType($Uint8, 4)));
	};
	blockGeneric = function(dig, p) {
		var a, b, c, d, X, xbuf, _tmp, _tmp$1, _tmp$2, _tmp$3, aa, bb, cc, dd, j, i, x, x$1, x$2, x$3;
		a = dig.s[0];
		b = dig.s[1];
		c = dig.s[2];
		d = dig.s[3];
		X = ($ptrType(($arrayType($Uint32, 16)))).nil;
		xbuf = ($arrayType($Uint32, 16)).zero(); $copy(xbuf, ($arrayType($Uint32, 16)).zero(), ($arrayType($Uint32, 16)));
		while (p.$length >= 64) {
			_tmp = a; _tmp$1 = b; _tmp$2 = c; _tmp$3 = d; aa = _tmp; bb = _tmp$1; cc = _tmp$2; dd = _tmp$3;
			if (littleEndian && ((($sliceToArray(p) & 3) >>> 0) === 0)) {
				X = $sliceToArray(p);
			} else {
				X = xbuf;
				j = 0;
				i = 0;
				while (i < 16) {
					(x$3 = i & 15, X.nilCheck, (x$3 < 0 || x$3 >= X.length) ? $throwRuntimeError("index out of range") : X[x$3] = ((((((((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]) >>> 0) | (((x = j + 1 >> 0, ((x < 0 || x >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x])) >>> 0) << 8 >>> 0)) >>> 0) | (((x$1 = j + 2 >> 0, ((x$1 < 0 || x$1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$1])) >>> 0) << 16 >>> 0)) >>> 0) | (((x$2 = j + 3 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$2])) >>> 0) << 24 >>> 0)) >>> 0);
					j = j + (4) >> 0;
					i = i + (1) >> 0;
				}
			}
			a = a + ((((((((((((c ^ d) >>> 0)) & b) >>> 0)) ^ d) >>> 0)) + (X.nilCheck, X[0]) >>> 0) + 3614090360 >>> 0)) >>> 0;
			a = (((a << 7 >>> 0) | (a >>> 25 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((((((((b ^ c) >>> 0)) & a) >>> 0)) ^ c) >>> 0)) + (X.nilCheck, X[1]) >>> 0) + 3905402710 >>> 0)) >>> 0;
			d = (((d << 12 >>> 0) | (d >>> 20 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((((((((a ^ b) >>> 0)) & d) >>> 0)) ^ b) >>> 0)) + (X.nilCheck, X[2]) >>> 0) + 606105819 >>> 0)) >>> 0;
			c = (((c << 17 >>> 0) | (c >>> 15 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((((((((d ^ a) >>> 0)) & c) >>> 0)) ^ a) >>> 0)) + (X.nilCheck, X[3]) >>> 0) + 3250441966 >>> 0)) >>> 0;
			b = (((b << 22 >>> 0) | (b >>> 10 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((((((((c ^ d) >>> 0)) & b) >>> 0)) ^ d) >>> 0)) + (X.nilCheck, X[4]) >>> 0) + 4118548399 >>> 0)) >>> 0;
			a = (((a << 7 >>> 0) | (a >>> 25 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((((((((b ^ c) >>> 0)) & a) >>> 0)) ^ c) >>> 0)) + (X.nilCheck, X[5]) >>> 0) + 1200080426 >>> 0)) >>> 0;
			d = (((d << 12 >>> 0) | (d >>> 20 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((((((((a ^ b) >>> 0)) & d) >>> 0)) ^ b) >>> 0)) + (X.nilCheck, X[6]) >>> 0) + 2821735955 >>> 0)) >>> 0;
			c = (((c << 17 >>> 0) | (c >>> 15 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((((((((d ^ a) >>> 0)) & c) >>> 0)) ^ a) >>> 0)) + (X.nilCheck, X[7]) >>> 0) + 4249261313 >>> 0)) >>> 0;
			b = (((b << 22 >>> 0) | (b >>> 10 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((((((((c ^ d) >>> 0)) & b) >>> 0)) ^ d) >>> 0)) + (X.nilCheck, X[8]) >>> 0) + 1770035416 >>> 0)) >>> 0;
			a = (((a << 7 >>> 0) | (a >>> 25 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((((((((b ^ c) >>> 0)) & a) >>> 0)) ^ c) >>> 0)) + (X.nilCheck, X[9]) >>> 0) + 2336552879 >>> 0)) >>> 0;
			d = (((d << 12 >>> 0) | (d >>> 20 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((((((((a ^ b) >>> 0)) & d) >>> 0)) ^ b) >>> 0)) + (X.nilCheck, X[10]) >>> 0) + 4294925233 >>> 0)) >>> 0;
			c = (((c << 17 >>> 0) | (c >>> 15 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((((((((d ^ a) >>> 0)) & c) >>> 0)) ^ a) >>> 0)) + (X.nilCheck, X[11]) >>> 0) + 2304563134 >>> 0)) >>> 0;
			b = (((b << 22 >>> 0) | (b >>> 10 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((((((((c ^ d) >>> 0)) & b) >>> 0)) ^ d) >>> 0)) + (X.nilCheck, X[12]) >>> 0) + 1804603682 >>> 0)) >>> 0;
			a = (((a << 7 >>> 0) | (a >>> 25 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((((((((b ^ c) >>> 0)) & a) >>> 0)) ^ c) >>> 0)) + (X.nilCheck, X[13]) >>> 0) + 4254626195 >>> 0)) >>> 0;
			d = (((d << 12 >>> 0) | (d >>> 20 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((((((((a ^ b) >>> 0)) & d) >>> 0)) ^ b) >>> 0)) + (X.nilCheck, X[14]) >>> 0) + 2792965006 >>> 0)) >>> 0;
			c = (((c << 17 >>> 0) | (c >>> 15 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((((((((d ^ a) >>> 0)) & c) >>> 0)) ^ a) >>> 0)) + (X.nilCheck, X[15]) >>> 0) + 1236535329 >>> 0)) >>> 0;
			b = (((b << 22 >>> 0) | (b >>> 10 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((((((((b ^ c) >>> 0)) & d) >>> 0)) ^ c) >>> 0)) + (X.nilCheck, X[1]) >>> 0) + 4129170786 >>> 0)) >>> 0;
			a = (((a << 5 >>> 0) | (a >>> 27 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((((((((a ^ b) >>> 0)) & c) >>> 0)) ^ b) >>> 0)) + (X.nilCheck, X[6]) >>> 0) + 3225465664 >>> 0)) >>> 0;
			d = (((d << 9 >>> 0) | (d >>> 23 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((((((((d ^ a) >>> 0)) & b) >>> 0)) ^ a) >>> 0)) + (X.nilCheck, X[11]) >>> 0) + 643717713 >>> 0)) >>> 0;
			c = (((c << 14 >>> 0) | (c >>> 18 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((((((((c ^ d) >>> 0)) & a) >>> 0)) ^ d) >>> 0)) + (X.nilCheck, X[0]) >>> 0) + 3921069994 >>> 0)) >>> 0;
			b = (((b << 20 >>> 0) | (b >>> 12 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((((((((b ^ c) >>> 0)) & d) >>> 0)) ^ c) >>> 0)) + (X.nilCheck, X[5]) >>> 0) + 3593408605 >>> 0)) >>> 0;
			a = (((a << 5 >>> 0) | (a >>> 27 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((((((((a ^ b) >>> 0)) & c) >>> 0)) ^ b) >>> 0)) + (X.nilCheck, X[10]) >>> 0) + 38016083 >>> 0)) >>> 0;
			d = (((d << 9 >>> 0) | (d >>> 23 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((((((((d ^ a) >>> 0)) & b) >>> 0)) ^ a) >>> 0)) + (X.nilCheck, X[15]) >>> 0) + 3634488961 >>> 0)) >>> 0;
			c = (((c << 14 >>> 0) | (c >>> 18 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((((((((c ^ d) >>> 0)) & a) >>> 0)) ^ d) >>> 0)) + (X.nilCheck, X[4]) >>> 0) + 3889429448 >>> 0)) >>> 0;
			b = (((b << 20 >>> 0) | (b >>> 12 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((((((((b ^ c) >>> 0)) & d) >>> 0)) ^ c) >>> 0)) + (X.nilCheck, X[9]) >>> 0) + 568446438 >>> 0)) >>> 0;
			a = (((a << 5 >>> 0) | (a >>> 27 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((((((((a ^ b) >>> 0)) & c) >>> 0)) ^ b) >>> 0)) + (X.nilCheck, X[14]) >>> 0) + 3275163606 >>> 0)) >>> 0;
			d = (((d << 9 >>> 0) | (d >>> 23 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((((((((d ^ a) >>> 0)) & b) >>> 0)) ^ a) >>> 0)) + (X.nilCheck, X[3]) >>> 0) + 4107603335 >>> 0)) >>> 0;
			c = (((c << 14 >>> 0) | (c >>> 18 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((((((((c ^ d) >>> 0)) & a) >>> 0)) ^ d) >>> 0)) + (X.nilCheck, X[8]) >>> 0) + 1163531501 >>> 0)) >>> 0;
			b = (((b << 20 >>> 0) | (b >>> 12 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((((((((b ^ c) >>> 0)) & d) >>> 0)) ^ c) >>> 0)) + (X.nilCheck, X[13]) >>> 0) + 2850285829 >>> 0)) >>> 0;
			a = (((a << 5 >>> 0) | (a >>> 27 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((((((((a ^ b) >>> 0)) & c) >>> 0)) ^ b) >>> 0)) + (X.nilCheck, X[2]) >>> 0) + 4243563512 >>> 0)) >>> 0;
			d = (((d << 9 >>> 0) | (d >>> 23 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((((((((d ^ a) >>> 0)) & b) >>> 0)) ^ a) >>> 0)) + (X.nilCheck, X[7]) >>> 0) + 1735328473 >>> 0)) >>> 0;
			c = (((c << 14 >>> 0) | (c >>> 18 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((((((((c ^ d) >>> 0)) & a) >>> 0)) ^ d) >>> 0)) + (X.nilCheck, X[12]) >>> 0) + 2368359562 >>> 0)) >>> 0;
			b = (((b << 20 >>> 0) | (b >>> 12 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((((b ^ c) >>> 0) ^ d) >>> 0)) + (X.nilCheck, X[5]) >>> 0) + 4294588738 >>> 0)) >>> 0;
			a = (((a << 4 >>> 0) | (a >>> 28 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((((a ^ b) >>> 0) ^ c) >>> 0)) + (X.nilCheck, X[8]) >>> 0) + 2272392833 >>> 0)) >>> 0;
			d = (((d << 11 >>> 0) | (d >>> 21 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((((d ^ a) >>> 0) ^ b) >>> 0)) + (X.nilCheck, X[11]) >>> 0) + 1839030562 >>> 0)) >>> 0;
			c = (((c << 16 >>> 0) | (c >>> 16 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((((c ^ d) >>> 0) ^ a) >>> 0)) + (X.nilCheck, X[14]) >>> 0) + 4259657740 >>> 0)) >>> 0;
			b = (((b << 23 >>> 0) | (b >>> 9 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((((b ^ c) >>> 0) ^ d) >>> 0)) + (X.nilCheck, X[1]) >>> 0) + 2763975236 >>> 0)) >>> 0;
			a = (((a << 4 >>> 0) | (a >>> 28 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((((a ^ b) >>> 0) ^ c) >>> 0)) + (X.nilCheck, X[4]) >>> 0) + 1272893353 >>> 0)) >>> 0;
			d = (((d << 11 >>> 0) | (d >>> 21 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((((d ^ a) >>> 0) ^ b) >>> 0)) + (X.nilCheck, X[7]) >>> 0) + 4139469664 >>> 0)) >>> 0;
			c = (((c << 16 >>> 0) | (c >>> 16 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((((c ^ d) >>> 0) ^ a) >>> 0)) + (X.nilCheck, X[10]) >>> 0) + 3200236656 >>> 0)) >>> 0;
			b = (((b << 23 >>> 0) | (b >>> 9 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((((b ^ c) >>> 0) ^ d) >>> 0)) + (X.nilCheck, X[13]) >>> 0) + 681279174 >>> 0)) >>> 0;
			a = (((a << 4 >>> 0) | (a >>> 28 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((((a ^ b) >>> 0) ^ c) >>> 0)) + (X.nilCheck, X[0]) >>> 0) + 3936430074 >>> 0)) >>> 0;
			d = (((d << 11 >>> 0) | (d >>> 21 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((((d ^ a) >>> 0) ^ b) >>> 0)) + (X.nilCheck, X[3]) >>> 0) + 3572445317 >>> 0)) >>> 0;
			c = (((c << 16 >>> 0) | (c >>> 16 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((((c ^ d) >>> 0) ^ a) >>> 0)) + (X.nilCheck, X[6]) >>> 0) + 76029189 >>> 0)) >>> 0;
			b = (((b << 23 >>> 0) | (b >>> 9 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((((b ^ c) >>> 0) ^ d) >>> 0)) + (X.nilCheck, X[9]) >>> 0) + 3654602809 >>> 0)) >>> 0;
			a = (((a << 4 >>> 0) | (a >>> 28 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((((a ^ b) >>> 0) ^ c) >>> 0)) + (X.nilCheck, X[12]) >>> 0) + 3873151461 >>> 0)) >>> 0;
			d = (((d << 11 >>> 0) | (d >>> 21 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((((d ^ a) >>> 0) ^ b) >>> 0)) + (X.nilCheck, X[15]) >>> 0) + 530742520 >>> 0)) >>> 0;
			c = (((c << 16 >>> 0) | (c >>> 16 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((((c ^ d) >>> 0) ^ a) >>> 0)) + (X.nilCheck, X[2]) >>> 0) + 3299628645 >>> 0)) >>> 0;
			b = (((b << 23 >>> 0) | (b >>> 9 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((c ^ (((b | (~d >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[0]) >>> 0) + 4096336452 >>> 0)) >>> 0;
			a = (((a << 6 >>> 0) | (a >>> 26 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((b ^ (((a | (~c >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[7]) >>> 0) + 1126891415 >>> 0)) >>> 0;
			d = (((d << 10 >>> 0) | (d >>> 22 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((a ^ (((d | (~b >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[14]) >>> 0) + 2878612391 >>> 0)) >>> 0;
			c = (((c << 15 >>> 0) | (c >>> 17 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((d ^ (((c | (~a >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[5]) >>> 0) + 4237533241 >>> 0)) >>> 0;
			b = (((b << 21 >>> 0) | (b >>> 11 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((c ^ (((b | (~d >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[12]) >>> 0) + 1700485571 >>> 0)) >>> 0;
			a = (((a << 6 >>> 0) | (a >>> 26 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((b ^ (((a | (~c >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[3]) >>> 0) + 2399980690 >>> 0)) >>> 0;
			d = (((d << 10 >>> 0) | (d >>> 22 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((a ^ (((d | (~b >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[10]) >>> 0) + 4293915773 >>> 0)) >>> 0;
			c = (((c << 15 >>> 0) | (c >>> 17 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((d ^ (((c | (~a >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[1]) >>> 0) + 2240044497 >>> 0)) >>> 0;
			b = (((b << 21 >>> 0) | (b >>> 11 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((c ^ (((b | (~d >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[8]) >>> 0) + 1873313359 >>> 0)) >>> 0;
			a = (((a << 6 >>> 0) | (a >>> 26 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((b ^ (((a | (~c >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[15]) >>> 0) + 4264355552 >>> 0)) >>> 0;
			d = (((d << 10 >>> 0) | (d >>> 22 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((a ^ (((d | (~b >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[6]) >>> 0) + 2734768916 >>> 0)) >>> 0;
			c = (((c << 15 >>> 0) | (c >>> 17 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((d ^ (((c | (~a >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[13]) >>> 0) + 1309151649 >>> 0)) >>> 0;
			b = (((b << 21 >>> 0) | (b >>> 11 >>> 0)) >>> 0) + c >>> 0;
			a = a + ((((((c ^ (((b | (~d >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[4]) >>> 0) + 4149444226 >>> 0)) >>> 0;
			a = (((a << 6 >>> 0) | (a >>> 26 >>> 0)) >>> 0) + b >>> 0;
			d = d + ((((((b ^ (((a | (~c >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[11]) >>> 0) + 3174756917 >>> 0)) >>> 0;
			d = (((d << 10 >>> 0) | (d >>> 22 >>> 0)) >>> 0) + a >>> 0;
			c = c + ((((((a ^ (((d | (~b >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[2]) >>> 0) + 718787259 >>> 0)) >>> 0;
			c = (((c << 15 >>> 0) | (c >>> 17 >>> 0)) >>> 0) + d >>> 0;
			b = b + ((((((d ^ (((c | (~a >>> 0)) >>> 0))) >>> 0)) + (X.nilCheck, X[9]) >>> 0) + 3951481745 >>> 0)) >>> 0;
			b = (((b << 21 >>> 0) | (b >>> 11 >>> 0)) >>> 0) + c >>> 0;
			a = a + (aa) >>> 0;
			b = b + (bb) >>> 0;
			c = c + (cc) >>> 0;
			d = d + (dd) >>> 0;
			p = $subslice(p, 64);
		}
		dig.s[0] = a;
		dig.s[1] = b;
		dig.s[2] = c;
		dig.s[3] = d;
	};
	$pkg.$init = function() {
		($ptrType(digest)).methods = [["BlockSize", "BlockSize", "", $funcType([], [$Int], false), -1], ["Reset", "Reset", "", $funcType([], [], false), -1], ["Size", "Size", "", $funcType([], [$Int], false), -1], ["Sum", "Sum", "", $funcType([($sliceType($Uint8))], [($sliceType($Uint8))], false), -1], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["checkSum", "checkSum", "crypto/md5", $funcType([], [($arrayType($Uint8, 16))], false), -1]];
		digest.init([["s", "s", "crypto/md5", ($arrayType($Uint32, 4)), ""], ["x", "x", "crypto/md5", ($arrayType($Uint8, 64)), ""], ["nx", "nx", "crypto/md5", $Int, ""], ["len", "len", "crypto/md5", $Uint64, ""]]);
		littleEndian = false;
		block = blockGeneric;
		init();
		init$1();
	};
	return $pkg;
})();
$packages["crypto/rand"] = (function() {
	var $pkg = {}, io = $packages["io"], bufio = $packages["bufio"], aes = $packages["crypto/aes"], cipher = $packages["crypto/cipher"], os = $packages["os"], runtime = $packages["runtime"], sync = $packages["sync"], time = $packages["time"], errors = $packages["errors"], big = $packages["math/big"], devReader, smallPrimesProduct, init, Int;
	devReader = $pkg.devReader = $newType(0, "Struct", "rand.devReader", "devReader", "crypto/rand", function(name_, f_, mu_) {
		this.$val = this;
		this.name = name_ !== undefined ? name_ : "";
		this.f = f_ !== undefined ? f_ : $ifaceNil;
		this.mu = mu_ !== undefined ? mu_ : new sync.Mutex.Ptr();
	});
	init = function() {
		$pkg.Reader = new devReader.Ptr("/dev/urandom", $ifaceNil, new sync.Mutex.Ptr());
	};
	devReader.Ptr.prototype.Read = function(b) {
		var n = 0, err = $ifaceNil, $deferred = [], $err = null, r, _tuple, f, err$1, _tmp, _tmp$1, _tuple$1;
		/* */ try { $deferFrames.push($deferred);
		r = this;
		r.mu.Lock();
		$deferred.push([$methodVal(r.mu, "Unlock"), []]);
		if ($interfaceIsEqual(r.f, $ifaceNil)) {
			_tuple = os.Open(r.name); f = _tuple[0]; err$1 = _tuple[1];
			if (f === ($ptrType(os.File)).nil) {
				_tmp = 0; _tmp$1 = err$1; n = _tmp; err = _tmp$1;
				return [n, err];
			}
			r.f = bufio.NewReader(f);
		}
		_tuple$1 = r.f.Read(b); n = _tuple$1[0]; err = _tuple$1[1];
		return [n, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [n, err]; }
	};
	devReader.prototype.Read = function(b) { return this.$val.Read(b); };
	Int = $pkg.Int = function(rand, max) {
		var n = ($ptrType(big.Int)).nil, err = $ifaceNil, _q, k, _r, b, bytes, _tuple, _tmp, _tmp$1, _lhs, _index, y;
		if (max.Sign() <= 0) {
			$panic(new $String("crypto/rand: argument to Int is <= 0"));
		}
		k = (_q = ((max.BitLen() + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		b = ((_r = max.BitLen() % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >>> 0);
		if (b === 0) {
			b = 8;
		}
		bytes = ($sliceType($Uint8)).make(k);
		n = new big.Int.Ptr();
		while (true) {
			_tuple = io.ReadFull(rand, bytes); err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp = ($ptrType(big.Int)).nil; _tmp$1 = err; n = _tmp; err = _tmp$1;
				return [n, err];
			}
			_lhs = bytes; _index = 0; (_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index] = (((_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index]) & (((((y = b, y < 32 ? (1 << y) : 0) >> 0) - 1 >> 0) << 24 >>> 24))) >>> 0;
			n.SetBytes(bytes);
			if (n.Cmp(max) < 0) {
				return [n, err];
			}
		}
	};
	$pkg.$init = function() {
		($ptrType(devReader)).methods = [["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1]];
		devReader.init([["name", "name", "crypto/rand", $String, ""], ["f", "f", "crypto/rand", io.Reader, ""], ["mu", "mu", "crypto/rand", sync.Mutex, ""]]);
		$pkg.Reader = $ifaceNil;
		smallPrimesProduct = new big.Int.Ptr().SetUint64(new $Uint64(3793877372, 820596253));
		init();
	};
	return $pkg;
})();
$packages["crypto/rc4"] = (function() {
	var $pkg = {}, strconv = $packages["strconv"], Cipher, KeySizeError, NewCipher;
	Cipher = $pkg.Cipher = $newType(0, "Struct", "rc4.Cipher", "Cipher", "crypto/rc4", function(s_, i_, j_) {
		this.$val = this;
		this.s = s_ !== undefined ? s_ : ($arrayType($Uint32, 256)).zero();
		this.i = i_ !== undefined ? i_ : 0;
		this.j = j_ !== undefined ? j_ : 0;
	});
	KeySizeError = $pkg.KeySizeError = $newType(4, "Int", "rc4.KeySizeError", "KeySizeError", "crypto/rc4", null);
	KeySizeError.prototype.Error = function() {
		var k;
		k = this.$val !== undefined ? this.$val : this;
		return "crypto/rc4: invalid key size " + strconv.Itoa((k >> 0));
	};
	$ptrType(KeySizeError).prototype.Error = function() { return new KeySizeError(this.$get()).Error(); };
	NewCipher = $pkg.NewCipher = function(key) {
		var k, c, i, x, j, i$1, x$1, x$2, _r, _tmp, x$3, _tmp$1, x$4, x$5, x$6;
		k = key.$length;
		if (k < 1 || k > 256) {
			return [($ptrType(Cipher)).nil, new KeySizeError((k >> 0))];
		}
		c = new Cipher.Ptr(); $copy(c, new Cipher.Ptr(), Cipher);
		i = 0;
		while (i < 256) {
			(x = c.s, (i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i] = (i >>> 0));
			i = i + (1) >> 0;
		}
		j = 0;
		i$1 = 0;
		while (i$1 < 256) {
			j = j + ((((x$1 = c.s, ((i$1 < 0 || i$1 >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[i$1])) << 24 >>> 24) + (x$2 = (_r = i$1 % k, _r === _r ? _r : $throwRuntimeError("integer divide by zero")), ((x$2 < 0 || x$2 >= key.$length) ? $throwRuntimeError("index out of range") : key.$array[key.$offset + x$2])) << 24 >>> 24)) << 24 >>> 24;
			_tmp = (x$3 = c.s, ((j < 0 || j >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[j])); _tmp$1 = (x$4 = c.s, ((i$1 < 0 || i$1 >= x$4.length) ? $throwRuntimeError("index out of range") : x$4[i$1])); (x$5 = c.s, (i$1 < 0 || i$1 >= x$5.length) ? $throwRuntimeError("index out of range") : x$5[i$1] = _tmp); (x$6 = c.s, (j < 0 || j >= x$6.length) ? $throwRuntimeError("index out of range") : x$6[j] = _tmp$1);
			i$1 = i$1 + (1) >> 0;
		}
		return [c, $ifaceNil];
	};
	Cipher.Ptr.prototype.Reset = function() {
		var c, _ref, _i, i, x, _tmp, _tmp$1;
		c = this;
		_ref = c.s;
		_i = 0;
		while (_i < 256) {
			i = _i;
			(x = c.s, (i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i] = 0);
			_i++;
		}
		_tmp = 0; _tmp$1 = 0; c.i = _tmp; c.j = _tmp$1;
	};
	Cipher.prototype.Reset = function() { return this.$val.Reset(); };
	Cipher.Ptr.prototype.xorKeyStreamGeneric = function(dst, src) {
		var c, _tmp, _tmp$1, i, j, _ref, _i, k, v, x, _tmp$2, x$1, _tmp$3, x$2, x$3, x$4, x$5, x$6, x$7, x$8, _tmp$4, _tmp$5;
		c = this;
		_tmp = c.i; _tmp$1 = c.j; i = _tmp; j = _tmp$1;
		_ref = src;
		_i = 0;
		while (_i < _ref.$length) {
			k = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			i = i + (1) << 24 >>> 24;
			j = j + (((x = c.s, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i])) << 24 >>> 24)) << 24 >>> 24;
			_tmp$2 = (x$1 = c.s, ((j < 0 || j >= x$1.length) ? $throwRuntimeError("index out of range") : x$1[j])); _tmp$3 = (x$2 = c.s, ((i < 0 || i >= x$2.length) ? $throwRuntimeError("index out of range") : x$2[i])); (x$3 = c.s, (i < 0 || i >= x$3.length) ? $throwRuntimeError("index out of range") : x$3[i] = _tmp$2); (x$4 = c.s, (j < 0 || j >= x$4.length) ? $throwRuntimeError("index out of range") : x$4[j] = _tmp$3);
			(k < 0 || k >= dst.$length) ? $throwRuntimeError("index out of range") : dst.$array[dst.$offset + k] = (v ^ ((x$5 = c.s, x$6 = (((x$7 = c.s, ((i < 0 || i >= x$7.length) ? $throwRuntimeError("index out of range") : x$7[i])) + (x$8 = c.s, ((j < 0 || j >= x$8.length) ? $throwRuntimeError("index out of range") : x$8[j])) >>> 0) << 24 >>> 24), ((x$6 < 0 || x$6 >= x$5.length) ? $throwRuntimeError("index out of range") : x$5[x$6])) << 24 >>> 24)) << 24 >>> 24;
			_i++;
		}
		_tmp$4 = i; _tmp$5 = j; c.i = _tmp$4; c.j = _tmp$5;
	};
	Cipher.prototype.xorKeyStreamGeneric = function(dst, src) { return this.$val.xorKeyStreamGeneric(dst, src); };
	Cipher.Ptr.prototype.XORKeyStream = function(dst, src) {
		var c;
		c = this;
		c.xorKeyStreamGeneric(dst, src);
	};
	Cipher.prototype.XORKeyStream = function(dst, src) { return this.$val.XORKeyStream(dst, src); };
	$pkg.$init = function() {
		($ptrType(Cipher)).methods = [["Reset", "Reset", "", $funcType([], [], false), -1], ["XORKeyStream", "XORKeyStream", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8))], [], false), -1], ["xorKeyStreamGeneric", "xorKeyStreamGeneric", "crypto/rc4", $funcType([($sliceType($Uint8)), ($sliceType($Uint8))], [], false), -1]];
		Cipher.init([["s", "s", "crypto/rc4", ($arrayType($Uint32, 256)), ""], ["i", "i", "crypto/rc4", $Uint8, ""], ["j", "j", "crypto/rc4", $Uint8, ""]]);
		KeySizeError.methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		($ptrType(KeySizeError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
	};
	return $pkg;
})();
$packages["crypto/rsa"] = (function() {
	var $pkg = {}, crypto = $packages["crypto"], subtle = $packages["crypto/subtle"], errors = $packages["errors"], io = $packages["io"], big = $packages["math/big"], bytes = $packages["bytes"], hash = $packages["hash"], rand = $packages["crypto/rand"], PublicKey, PrivateKey, PrecomputedValues, CRTValue, hashPrefixes, bigZero, bigOne, errPublicModulus, errPublicExponentSmall, errPublicExponentLarge, _map, _key, EncryptPKCS1v15, DecryptPKCS1v15SessionKey, decryptPKCS1v15, nonZeroRandomBytes, SignPKCS1v15, VerifyPKCS1v15, pkcs1v15HashInfo, copyWithLeftPad, checkPub, encrypt, modInverse, decrypt, leftPad;
	PublicKey = $pkg.PublicKey = $newType(0, "Struct", "rsa.PublicKey", "PublicKey", "crypto/rsa", function(N_, E_) {
		this.$val = this;
		this.N = N_ !== undefined ? N_ : ($ptrType(big.Int)).nil;
		this.E = E_ !== undefined ? E_ : 0;
	});
	PrivateKey = $pkg.PrivateKey = $newType(0, "Struct", "rsa.PrivateKey", "PrivateKey", "crypto/rsa", function(PublicKey_, D_, Primes_, Precomputed_) {
		this.$val = this;
		this.PublicKey = PublicKey_ !== undefined ? PublicKey_ : new PublicKey.Ptr();
		this.D = D_ !== undefined ? D_ : ($ptrType(big.Int)).nil;
		this.Primes = Primes_ !== undefined ? Primes_ : ($sliceType(($ptrType(big.Int)))).nil;
		this.Precomputed = Precomputed_ !== undefined ? Precomputed_ : new PrecomputedValues.Ptr();
	});
	PrecomputedValues = $pkg.PrecomputedValues = $newType(0, "Struct", "rsa.PrecomputedValues", "PrecomputedValues", "crypto/rsa", function(Dp_, Dq_, Qinv_, CRTValues_) {
		this.$val = this;
		this.Dp = Dp_ !== undefined ? Dp_ : ($ptrType(big.Int)).nil;
		this.Dq = Dq_ !== undefined ? Dq_ : ($ptrType(big.Int)).nil;
		this.Qinv = Qinv_ !== undefined ? Qinv_ : ($ptrType(big.Int)).nil;
		this.CRTValues = CRTValues_ !== undefined ? CRTValues_ : ($sliceType(CRTValue)).nil;
	});
	CRTValue = $pkg.CRTValue = $newType(0, "Struct", "rsa.CRTValue", "CRTValue", "crypto/rsa", function(Exp_, Coeff_, R_) {
		this.$val = this;
		this.Exp = Exp_ !== undefined ? Exp_ : ($ptrType(big.Int)).nil;
		this.Coeff = Coeff_ !== undefined ? Coeff_ : ($ptrType(big.Int)).nil;
		this.R = R_ !== undefined ? R_ : ($ptrType(big.Int)).nil;
	});
	EncryptPKCS1v15 = $pkg.EncryptPKCS1v15 = function(rand$1, pub, msg) {
		var out = ($sliceType($Uint8)).nil, err = $ifaceNil, err$1, _tmp, _tmp$1, _q, k, em, _tmp$2, _tmp$3, ps, mm, x, m, c;
		err$1 = checkPub(pub);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = ($sliceType($Uint8)).nil; _tmp$1 = err$1; out = _tmp; err = _tmp$1;
			return [out, err];
		}
		k = (_q = ((pub.N.BitLen() + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (msg.$length > (k - 11 >> 0)) {
			err = $pkg.ErrMessageTooLong;
			return [out, err];
		}
		em = ($sliceType($Uint8)).make(k);
		(1 < 0 || 1 >= em.$length) ? $throwRuntimeError("index out of range") : em.$array[em.$offset + 1] = 2;
		_tmp$2 = $subslice(em, 2, ((em.$length - msg.$length >> 0) - 1 >> 0)); _tmp$3 = $subslice(em, (em.$length - msg.$length >> 0)); ps = _tmp$2; mm = _tmp$3;
		err = nonZeroRandomBytes(ps, rand$1);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [out, err];
		}
		(x = (em.$length - msg.$length >> 0) - 1 >> 0, (x < 0 || x >= em.$length) ? $throwRuntimeError("index out of range") : em.$array[em.$offset + x] = 0);
		$copySlice(mm, msg);
		m = new big.Int.Ptr().SetBytes(em);
		c = encrypt(new big.Int.Ptr(), pub, m);
		copyWithLeftPad(em, c.Bytes());
		out = em;
		return [out, err];
	};
	DecryptPKCS1v15SessionKey = $pkg.DecryptPKCS1v15SessionKey = function(rand$1, priv, ciphertext, key) {
		var err = $ifaceNil, err$1, _q, k, _tuple, valid, em, index;
		err$1 = checkPub(priv.PublicKey);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			err = err$1;
			return err;
		}
		k = (_q = ((priv.PublicKey.N.BitLen() + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if ((k - (((key.$length + 3 >> 0) + 8 >> 0)) >> 0) < 0) {
			err = $pkg.ErrDecryption;
			return err;
		}
		_tuple = decryptPKCS1v15(rand$1, priv, ciphertext); valid = _tuple[0]; em = _tuple[1]; index = _tuple[2]; err = _tuple[3];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		if (!((em.$length === k))) {
			err = $pkg.ErrDecryption;
			return err;
		}
		valid = valid & (subtle.ConstantTimeEq(((em.$length - index >> 0) >> 0), (key.$length >> 0)));
		subtle.ConstantTimeCopy(valid, key, $subslice(em, (em.$length - key.$length >> 0)));
		return err;
	};
	decryptPKCS1v15 = function(rand$1, priv, ciphertext) {
		var valid = 0, em = ($sliceType($Uint8)).nil, index = 0, err = $ifaceNil, _q, k, c, _tuple, m, firstByteIsZero, secondByteIsTwo, lookingForIndex, i, equals0, validPS, _tmp, _tmp$1, _tmp$2, _tmp$3;
		k = (_q = ((priv.PublicKey.N.BitLen() + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (k < 11) {
			err = $pkg.ErrDecryption;
			return [valid, em, index, err];
		}
		c = new big.Int.Ptr().SetBytes(ciphertext);
		_tuple = decrypt(rand$1, priv, c); m = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [valid, em, index, err];
		}
		em = leftPad(m.Bytes(), k);
		firstByteIsZero = subtle.ConstantTimeByteEq(((0 < 0 || 0 >= em.$length) ? $throwRuntimeError("index out of range") : em.$array[em.$offset + 0]), 0);
		secondByteIsTwo = subtle.ConstantTimeByteEq(((1 < 0 || 1 >= em.$length) ? $throwRuntimeError("index out of range") : em.$array[em.$offset + 1]), 2);
		lookingForIndex = 1;
		i = 2;
		while (i < em.$length) {
			equals0 = subtle.ConstantTimeByteEq(((i < 0 || i >= em.$length) ? $throwRuntimeError("index out of range") : em.$array[em.$offset + i]), 0);
			index = subtle.ConstantTimeSelect(lookingForIndex & equals0, i, index);
			lookingForIndex = subtle.ConstantTimeSelect(equals0, 0, lookingForIndex);
			i = i + (1) >> 0;
		}
		validPS = subtle.ConstantTimeLessOrEq(10, index);
		valid = ((firstByteIsZero & secondByteIsTwo) & (((~lookingForIndex >> 0) & 1))) & validPS;
		index = subtle.ConstantTimeSelect(valid, index + 1 >> 0, 0);
		_tmp = valid; _tmp$1 = em; _tmp$2 = index; _tmp$3 = $ifaceNil; valid = _tmp; em = _tmp$1; index = _tmp$2; err = _tmp$3;
		return [valid, em, index, err];
	};
	nonZeroRandomBytes = function(s, rand$1) {
		var err = $ifaceNil, _tuple, i, _tuple$1, _lhs, _index;
		_tuple = io.ReadFull(rand$1, s); err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		i = 0;
		while (i < s.$length) {
			while (((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) === 0) {
				_tuple$1 = io.ReadFull(rand$1, $subslice(s, i, (i + 1 >> 0))); err = _tuple$1[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return err;
				}
				_lhs = s; _index = i; (_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index] = (((_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index]) ^ (66)) << 24 >>> 24;
			}
			i = i + (1) >> 0;
		}
		return err;
	};
	SignPKCS1v15 = $pkg.SignPKCS1v15 = function(rand$1, priv, hash$1, hashed) {
		var s = ($sliceType($Uint8)).nil, err = $ifaceNil, _tuple, hashLen, prefix, tLen, _q, k, _tmp, _tmp$1, em, i, m, _tuple$1, c;
		_tuple = pkcs1v15HashInfo(hash$1, hashed.$length); hashLen = _tuple[0]; prefix = _tuple[1]; err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [s, err];
		}
		tLen = prefix.$length + hashLen >> 0;
		k = (_q = ((priv.PublicKey.N.BitLen() + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (k < (tLen + 11 >> 0)) {
			_tmp = ($sliceType($Uint8)).nil; _tmp$1 = $pkg.ErrMessageTooLong; s = _tmp; err = _tmp$1;
			return [s, err];
		}
		em = ($sliceType($Uint8)).make(k);
		(1 < 0 || 1 >= em.$length) ? $throwRuntimeError("index out of range") : em.$array[em.$offset + 1] = 1;
		i = 2;
		while (i < ((k - tLen >> 0) - 1 >> 0)) {
			(i < 0 || i >= em.$length) ? $throwRuntimeError("index out of range") : em.$array[em.$offset + i] = 255;
			i = i + (1) >> 0;
		}
		$copySlice($subslice(em, (k - tLen >> 0), (k - hashLen >> 0)), prefix);
		$copySlice($subslice(em, (k - hashLen >> 0), k), hashed);
		m = new big.Int.Ptr().SetBytes(em);
		_tuple$1 = decrypt(rand$1, priv, m); c = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [s, err];
		}
		copyWithLeftPad(em, c.Bytes());
		s = em;
		return [s, err];
	};
	VerifyPKCS1v15 = $pkg.VerifyPKCS1v15 = function(pub, hash$1, hashed, sig) {
		var err = $ifaceNil, _tuple, hashLen, prefix, tLen, _q, k, c, m, em, ok, x, i;
		_tuple = pkcs1v15HashInfo(hash$1, hashed.$length); hashLen = _tuple[0]; prefix = _tuple[1]; err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		tLen = prefix.$length + hashLen >> 0;
		k = (_q = ((pub.N.BitLen() + 7 >> 0)) / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		if (k < (tLen + 11 >> 0)) {
			err = $pkg.ErrVerification;
			return err;
		}
		c = new big.Int.Ptr().SetBytes(sig);
		m = encrypt(new big.Int.Ptr(), pub, c);
		em = leftPad(m.Bytes(), k);
		ok = subtle.ConstantTimeByteEq(((0 < 0 || 0 >= em.$length) ? $throwRuntimeError("index out of range") : em.$array[em.$offset + 0]), 0);
		ok = ok & (subtle.ConstantTimeByteEq(((1 < 0 || 1 >= em.$length) ? $throwRuntimeError("index out of range") : em.$array[em.$offset + 1]), 1));
		ok = ok & (subtle.ConstantTimeCompare($subslice(em, (k - hashLen >> 0), k), hashed));
		ok = ok & (subtle.ConstantTimeCompare($subslice(em, (k - tLen >> 0), (k - hashLen >> 0)), prefix));
		ok = ok & (subtle.ConstantTimeByteEq((x = (k - tLen >> 0) - 1 >> 0, ((x < 0 || x >= em.$length) ? $throwRuntimeError("index out of range") : em.$array[em.$offset + x])), 0));
		i = 2;
		while (i < ((k - tLen >> 0) - 1 >> 0)) {
			ok = ok & (subtle.ConstantTimeByteEq(((i < 0 || i >= em.$length) ? $throwRuntimeError("index out of range") : em.$array[em.$offset + i]), 255));
			i = i + (1) >> 0;
		}
		if (!((ok === 1))) {
			err = $pkg.ErrVerification;
			return err;
		}
		err = $ifaceNil;
		return err;
	};
	pkcs1v15HashInfo = function(hash$1, inLen) {
		var hashLen = 0, prefix = ($sliceType($Uint8)).nil, err = $ifaceNil, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tuple, _entry, ok, _tmp$6, _tmp$7, _tmp$8;
		if (hash$1 === 0) {
			_tmp = inLen; _tmp$1 = ($sliceType($Uint8)).nil; _tmp$2 = $ifaceNil; hashLen = _tmp; prefix = _tmp$1; err = _tmp$2;
			return [hashLen, prefix, err];
		}
		hashLen = new crypto.Hash(hash$1).Size();
		if (!((inLen === hashLen))) {
			_tmp$3 = 0; _tmp$4 = ($sliceType($Uint8)).nil; _tmp$5 = errors.New("crypto/rsa: input must be hashed message"); hashLen = _tmp$3; prefix = _tmp$4; err = _tmp$5;
			return [hashLen, prefix, err];
		}
		_tuple = (_entry = hashPrefixes[hash$1], _entry !== undefined ? [_entry.v, true] : [($sliceType($Uint8)).nil, false]); prefix = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			_tmp$6 = 0; _tmp$7 = ($sliceType($Uint8)).nil; _tmp$8 = errors.New("crypto/rsa: unsupported hash function"); hashLen = _tmp$6; prefix = _tmp$7; err = _tmp$8;
			return [hashLen, prefix, err];
		}
		return [hashLen, prefix, err];
	};
	copyWithLeftPad = function(dest, src) {
		var numPaddingBytes, i;
		numPaddingBytes = dest.$length - src.$length >> 0;
		i = 0;
		while (i < numPaddingBytes) {
			(i < 0 || i >= dest.$length) ? $throwRuntimeError("index out of range") : dest.$array[dest.$offset + i] = 0;
			i = i + (1) >> 0;
		}
		$copySlice($subslice(dest, numPaddingBytes), src);
	};
	checkPub = function(pub) {
		if (pub.N === ($ptrType(big.Int)).nil) {
			return errPublicModulus;
		}
		if (pub.E < 2) {
			return errPublicExponentSmall;
		}
		if (pub.E > 2147483647) {
			return errPublicExponentLarge;
		}
		return $ifaceNil;
	};
	PrivateKey.Ptr.prototype.Validate = function() {
		var priv, err, _ref, _i, prime, modulus, _ref$1, _i$1, prime$1, congruence, de, _ref$2, _i$2, prime$2, pminus1;
		priv = this;
		err = checkPub(priv.PublicKey);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_ref = priv.Primes;
		_i = 0;
		while (_i < _ref.$length) {
			prime = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!prime.ProbablyPrime(20)) {
				return errors.New("crypto/rsa: prime factor is composite");
			}
			_i++;
		}
		modulus = new big.Int.Ptr().Set(bigOne);
		_ref$1 = priv.Primes;
		_i$1 = 0;
		while (_i$1 < _ref$1.$length) {
			prime$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			modulus.Mul(modulus, prime$1);
			_i$1++;
		}
		if (!((modulus.Cmp(priv.PublicKey.N) === 0))) {
			return errors.New("crypto/rsa: invalid modulus");
		}
		congruence = new big.Int.Ptr();
		de = new big.Int.Ptr().SetInt64(new $Int64(0, priv.PublicKey.E));
		de.Mul(de, priv.D);
		_ref$2 = priv.Primes;
		_i$2 = 0;
		while (_i$2 < _ref$2.$length) {
			prime$2 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
			pminus1 = new big.Int.Ptr().Sub(prime$2, bigOne);
			congruence.Mod(de, pminus1);
			if (!((congruence.Cmp(bigOne) === 0))) {
				return errors.New("crypto/rsa: invalid exponents");
			}
			_i$2++;
		}
		return $ifaceNil;
	};
	PrivateKey.prototype.Validate = function() { return this.$val.Validate(); };
	encrypt = function(c, pub, m) {
		var e;
		e = big.NewInt(new $Int64(0, pub.E));
		c.Exp(m, e, pub.N);
		return c;
	};
	modInverse = function(a, n) {
		var ia = ($ptrType(big.Int)).nil, ok = false, g, x, y, _tmp, _tmp$1;
		g = new big.Int.Ptr();
		x = new big.Int.Ptr();
		y = new big.Int.Ptr();
		g.GCD(x, y, a, n);
		if (!((g.Cmp(bigOne) === 0))) {
			return [ia, ok];
		}
		if (x.Cmp(bigOne) < 0) {
			x.Add(x, n);
		}
		_tmp = x; _tmp$1 = true; ia = _tmp; ok = _tmp$1;
		return [ia, ok];
	};
	PrivateKey.Ptr.prototype.Precompute = function() {
		var priv, x, x$1, x$2, x$3, x$4, x$5, r, i, x$6, prime, x$7, x$8, values;
		priv = this;
		if (!(priv.Precomputed.Dp === ($ptrType(big.Int)).nil)) {
			return;
		}
		priv.Precomputed.Dp = new big.Int.Ptr().Sub((x = priv.Primes, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), bigOne);
		priv.Precomputed.Dp.Mod(priv.D, priv.Precomputed.Dp);
		priv.Precomputed.Dq = new big.Int.Ptr().Sub((x$1 = priv.Primes, ((1 < 0 || 1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 1])), bigOne);
		priv.Precomputed.Dq.Mod(priv.D, priv.Precomputed.Dq);
		priv.Precomputed.Qinv = new big.Int.Ptr().ModInverse((x$2 = priv.Primes, ((1 < 0 || 1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 1])), (x$3 = priv.Primes, ((0 < 0 || 0 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])));
		r = new big.Int.Ptr().Mul((x$4 = priv.Primes, ((0 < 0 || 0 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + 0])), (x$5 = priv.Primes, ((1 < 0 || 1 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + 1])));
		priv.Precomputed.CRTValues = ($sliceType(CRTValue)).make((priv.Primes.$length - 2 >> 0));
		i = 2;
		while (i < priv.Primes.$length) {
			prime = (x$6 = priv.Primes, ((i < 0 || i >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + i]));
			values = (x$7 = priv.Precomputed.CRTValues, x$8 = i - 2 >> 0, ((x$8 < 0 || x$8 >= x$7.$length) ? $throwRuntimeError("index out of range") : x$7.$array[x$7.$offset + x$8]));
			values.Exp = new big.Int.Ptr().Sub(prime, bigOne);
			values.Exp.Mod(priv.D, values.Exp);
			values.R = new big.Int.Ptr().Set(r);
			values.Coeff = new big.Int.Ptr().ModInverse(r, prime);
			r.Mul(r, prime);
			i = i + (1) >> 0;
		}
	};
	PrivateKey.prototype.Precompute = function() { return this.$val.Precompute(); };
	decrypt = function(random, priv, c) {
		var m = ($ptrType(big.Int)).nil, err = $ifaceNil, ir, r, _tuple, ok, _tuple$1, bigE, rpowe, cCopy, x, x$1, m2, x$2, x$3, x$4, _ref, _i, i, values, x$5, x$6, prime;
		if (c.Cmp(priv.PublicKey.N) > 0) {
			err = $pkg.ErrDecryption;
			return [m, err];
		}
		ir = ($ptrType(big.Int)).nil;
		if (!($interfaceIsEqual(random, $ifaceNil))) {
			r = ($ptrType(big.Int)).nil;
			while (true) {
				_tuple = rand.Int(random, priv.PublicKey.N); r = _tuple[0]; err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return [m, err];
				}
				if (r.Cmp(bigZero) === 0) {
					r = bigOne;
				}
				ok = false;
				_tuple$1 = modInverse(r, priv.PublicKey.N); ir = _tuple$1[0]; ok = _tuple$1[1];
				if (ok) {
					break;
				}
			}
			bigE = big.NewInt(new $Int64(0, priv.PublicKey.E));
			rpowe = new big.Int.Ptr().Exp(r, bigE, priv.PublicKey.N);
			cCopy = new big.Int.Ptr().Set(c);
			cCopy.Mul(cCopy, rpowe);
			cCopy.Mod(cCopy, priv.PublicKey.N);
			c = cCopy;
		}
		if (priv.Precomputed.Dp === ($ptrType(big.Int)).nil) {
			m = new big.Int.Ptr().Exp(c, priv.D, priv.PublicKey.N);
		} else {
			m = new big.Int.Ptr().Exp(c, priv.Precomputed.Dp, (x = priv.Primes, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])));
			m2 = new big.Int.Ptr().Exp(c, priv.Precomputed.Dq, (x$1 = priv.Primes, ((1 < 0 || 1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 1])));
			m.Sub(m, m2);
			if (m.Sign() < 0) {
				m.Add(m, (x$2 = priv.Primes, ((0 < 0 || 0 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 0])));
			}
			m.Mul(m, priv.Precomputed.Qinv);
			m.Mod(m, (x$3 = priv.Primes, ((0 < 0 || 0 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])));
			m.Mul(m, (x$4 = priv.Primes, ((1 < 0 || 1 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + 1])));
			m.Add(m, m2);
			_ref = priv.Precomputed.CRTValues;
			_i = 0;
			while (_i < _ref.$length) {
				i = _i;
				values = new CRTValue.Ptr(); $copy(values, ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), CRTValue);
				prime = (x$5 = priv.Primes, x$6 = 2 + i >> 0, ((x$6 < 0 || x$6 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + x$6]));
				m2.Exp(c, values.Exp, prime);
				m2.Sub(m2, m);
				m2.Mul(m2, values.Coeff);
				m2.Mod(m2, prime);
				if (m2.Sign() < 0) {
					m2.Add(m2, prime);
				}
				m2.Mul(m2, values.R);
				m.Add(m, m2);
				_i++;
			}
		}
		if (!(ir === ($ptrType(big.Int)).nil)) {
			m.Mul(m, ir);
			m.Mod(m, priv.PublicKey.N);
		}
		return [m, err];
	};
	leftPad = function(input, size) {
		var out = ($sliceType($Uint8)).nil, n;
		n = input.$length;
		if (n > size) {
			n = size;
		}
		out = ($sliceType($Uint8)).make(size);
		$copySlice($subslice(out, (out.$length - n >> 0)), input);
		return out;
	};
	$pkg.$init = function() {
		PublicKey.init([["N", "N", "", ($ptrType(big.Int)), ""], ["E", "E", "", $Int, ""]]);
		($ptrType(PrivateKey)).methods = [["Precompute", "Precompute", "", $funcType([], [], false), -1], ["Validate", "Validate", "", $funcType([], [$error], false), -1]];
		PrivateKey.init([["PublicKey", "", "", PublicKey, ""], ["D", "D", "", ($ptrType(big.Int)), ""], ["Primes", "Primes", "", ($sliceType(($ptrType(big.Int)))), ""], ["Precomputed", "Precomputed", "", PrecomputedValues, ""]]);
		PrecomputedValues.init([["Dp", "Dp", "", ($ptrType(big.Int)), ""], ["Dq", "Dq", "", ($ptrType(big.Int)), ""], ["Qinv", "Qinv", "", ($ptrType(big.Int)), ""], ["CRTValues", "CRTValues", "", ($sliceType(CRTValue)), ""]]);
		CRTValue.init([["Exp", "Exp", "", ($ptrType(big.Int)), ""], ["Coeff", "Coeff", "", ($ptrType(big.Int)), ""], ["R", "R", "", ($ptrType(big.Int)), ""]]);
		hashPrefixes = (_map = new $Map(), _key = 2, _map[_key] = { k: _key, v: new ($sliceType($Uint8))([48, 32, 48, 12, 6, 8, 42, 134, 72, 134, 247, 13, 2, 5, 5, 0, 4, 16]) }, _key = 3, _map[_key] = { k: _key, v: new ($sliceType($Uint8))([48, 33, 48, 9, 6, 5, 43, 14, 3, 2, 26, 5, 0, 4, 20]) }, _key = 4, _map[_key] = { k: _key, v: new ($sliceType($Uint8))([48, 45, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 4, 5, 0, 4, 28]) }, _key = 5, _map[_key] = { k: _key, v: new ($sliceType($Uint8))([48, 49, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 5, 0, 4, 32]) }, _key = 6, _map[_key] = { k: _key, v: new ($sliceType($Uint8))([48, 65, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 2, 5, 0, 4, 48]) }, _key = 7, _map[_key] = { k: _key, v: new ($sliceType($Uint8))([48, 81, 48, 13, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 3, 5, 0, 4, 64]) }, _key = 8, _map[_key] = { k: _key, v: new ($sliceType($Uint8))([]) }, _key = 9, _map[_key] = { k: _key, v: new ($sliceType($Uint8))([48, 32, 48, 8, 6, 6, 40, 207, 6, 3, 0, 49, 4, 20]) }, _map);
		bigZero = big.NewInt(new $Int64(0, 0));
		bigOne = big.NewInt(new $Int64(0, 1));
		errPublicModulus = errors.New("crypto/rsa: missing public modulus");
		errPublicExponentSmall = errors.New("crypto/rsa: public exponent too small");
		errPublicExponentLarge = errors.New("crypto/rsa: public exponent too large");
		$pkg.ErrMessageTooLong = errors.New("crypto/rsa: message too long for RSA public key size");
		$pkg.ErrDecryption = errors.New("crypto/rsa: decryption error");
		$pkg.ErrVerification = errors.New("crypto/rsa: verification error");
	};
	return $pkg;
})();
$packages["crypto/sha1"] = (function() {
	var $pkg = {}, crypto = $packages["crypto"], hash = $packages["hash"], digest, block, init, New, blockGeneric;
	digest = $pkg.digest = $newType(0, "Struct", "sha1.digest", "digest", "crypto/sha1", function(h_, x_, nx_, len_) {
		this.$val = this;
		this.h = h_ !== undefined ? h_ : ($arrayType($Uint32, 5)).zero();
		this.x = x_ !== undefined ? x_ : ($arrayType($Uint8, 64)).zero();
		this.nx = nx_ !== undefined ? nx_ : 0;
		this.len = len_ !== undefined ? len_ : new $Uint64(0, 0);
	});
	init = function() {
		crypto.RegisterHash(3, New);
	};
	digest.Ptr.prototype.Reset = function() {
		var d;
		d = this;
		d.h[0] = 1732584193;
		d.h[1] = 4023233417;
		d.h[2] = 2562383102;
		d.h[3] = 271733878;
		d.h[4] = 3285377520;
		d.nx = 0;
		d.len = new $Uint64(0, 0);
	};
	digest.prototype.Reset = function() { return this.$val.Reset(); };
	New = $pkg.New = function() {
		var d;
		d = new digest.Ptr();
		d.Reset();
		return d;
	};
	digest.Ptr.prototype.Size = function() {
		var d;
		d = this;
		return 20;
	};
	digest.prototype.Size = function() { return this.$val.Size(); };
	digest.Ptr.prototype.BlockSize = function() {
		var d;
		d = this;
		return 64;
	};
	digest.prototype.BlockSize = function() { return this.$val.BlockSize(); };
	digest.Ptr.prototype.Write = function(p) {
		var nn = 0, err = $ifaceNil, d, x, x$1, n, n$1;
		d = this;
		nn = p.$length;
		d.len = (x = d.len, x$1 = new $Uint64(0, nn), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
		if (d.nx > 0) {
			n = $copySlice($subslice(new ($sliceType($Uint8))(d.x), d.nx), p);
			d.nx = d.nx + (n) >> 0;
			if (d.nx === 64) {
				block(d, new ($sliceType($Uint8))(d.x));
				d.nx = 0;
			}
			p = $subslice(p, n);
		}
		if (p.$length >= 64) {
			n$1 = p.$length & ~63;
			block(d, $subslice(p, 0, n$1));
			p = $subslice(p, n$1);
		}
		if (p.$length > 0) {
			d.nx = $copySlice(new ($sliceType($Uint8))(d.x), p);
		}
		return [nn, err];
	};
	digest.prototype.Write = function(p) { return this.$val.Write(p); };
	digest.Ptr.prototype.Sum = function(in$1) {
		var d0, d, hash$1;
		d0 = this;
		d = new digest.Ptr(); $copy(d, d0, digest);
		hash$1 = ($arrayType($Uint8, 20)).zero(); $copy(hash$1, d.checkSum(), ($arrayType($Uint8, 20)));
		return $appendSlice(in$1, new ($sliceType($Uint8))(hash$1));
	};
	digest.prototype.Sum = function(in$1) { return this.$val.Sum(in$1); };
	digest.Ptr.prototype.checkSum = function() {
		var d, len, tmp, x, x$1, x$2, i, digest$1, _ref, _i, i$1, s, x$3, x$4, x$5, x$6;
		d = this;
		len = d.len;
		tmp = ($arrayType($Uint8, 64)).zero(); $copy(tmp, ($arrayType($Uint8, 64)).zero(), ($arrayType($Uint8, 64)));
		tmp[0] = 128;
		if ((x = $div64(len, new $Uint64(0, 64), true), (x.$high < 0 || (x.$high === 0 && x.$low < 56)))) {
			d.Write($subslice(new ($sliceType($Uint8))(tmp), 0, $flatten64((x$1 = $div64(len, new $Uint64(0, 64), true), new $Uint64(0 - x$1.$high, 56 - x$1.$low)))));
		} else {
			d.Write($subslice(new ($sliceType($Uint8))(tmp), 0, $flatten64((x$2 = $div64(len, new $Uint64(0, 64), true), new $Uint64(0 - x$2.$high, 120 - x$2.$low)))));
		}
		len = $shiftLeft64(len, (3));
		i = 0;
		while (i < 8) {
			(i < 0 || i >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[i] = ($shiftRightUint64(len, ((56 - ((((8 >>> 16 << 16) * i >>> 0) + (8 << 16 >>> 16) * i) >>> 0) >>> 0))).$low << 24 >>> 24);
			i = i + (1) >>> 0;
		}
		d.Write($subslice(new ($sliceType($Uint8))(tmp), 0, 8));
		if (!((d.nx === 0))) {
			$panic(new $String("d.nx != 0"));
		}
		digest$1 = ($arrayType($Uint8, 20)).zero(); $copy(digest$1, ($arrayType($Uint8, 20)).zero(), ($arrayType($Uint8, 20)));
		_ref = d.h;
		_i = 0;
		while (_i < 5) {
			i$1 = _i;
			s = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
			(x$3 = (((i$1 >>> 16 << 16) * 4 >> 0) + (i$1 << 16 >>> 16) * 4) >> 0, (x$3 < 0 || x$3 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$3] = ((s >>> 24 >>> 0) << 24 >>> 24));
			(x$4 = ((((i$1 >>> 16 << 16) * 4 >> 0) + (i$1 << 16 >>> 16) * 4) >> 0) + 1 >> 0, (x$4 < 0 || x$4 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$4] = ((s >>> 16 >>> 0) << 24 >>> 24));
			(x$5 = ((((i$1 >>> 16 << 16) * 4 >> 0) + (i$1 << 16 >>> 16) * 4) >> 0) + 2 >> 0, (x$5 < 0 || x$5 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$5] = ((s >>> 8 >>> 0) << 24 >>> 24));
			(x$6 = ((((i$1 >>> 16 << 16) * 4 >> 0) + (i$1 << 16 >>> 16) * 4) >> 0) + 3 >> 0, (x$6 < 0 || x$6 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$6] = (s << 24 >>> 24));
			_i++;
		}
		return digest$1;
	};
	digest.prototype.checkSum = function() { return this.$val.checkSum(); };
	blockGeneric = function(dig, p) {
		var w, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, h0, h1, h2, h3, h4, i, j, x, x$1, x$2, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, a, b, c, d, e, i$1, f, a5, b30, x$3, t, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, x$4, x$5, x$6, x$7, tmp, x$8, f$1, a5$1, b30$1, x$9, t$1, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, x$10, x$11, x$12, x$13, tmp$1, x$14, f$2, a5$2, b30$2, x$15, t$2, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, x$16, x$17, x$18, x$19, tmp$2, x$20, f$3, a5$3, b30$3, x$21, t$3, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, x$22, x$23, x$24, x$25, tmp$3, x$26, f$4, a5$4, b30$4, x$27, t$4, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38, _tmp$39;
		w = ($arrayType($Uint32, 16)).zero(); $copy(w, ($arrayType($Uint32, 16)).zero(), ($arrayType($Uint32, 16)));
		_tmp = dig.h[0]; _tmp$1 = dig.h[1]; _tmp$2 = dig.h[2]; _tmp$3 = dig.h[3]; _tmp$4 = dig.h[4]; h0 = _tmp; h1 = _tmp$1; h2 = _tmp$2; h3 = _tmp$3; h4 = _tmp$4;
		while (p.$length >= 64) {
			i = 0;
			while (i < 16) {
				j = (((i >>> 16 << 16) * 4 >> 0) + (i << 16 >>> 16) * 4) >> 0;
				(i < 0 || i >= w.length) ? $throwRuntimeError("index out of range") : w[i] = (((((((((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]) >>> 0) << 24 >>> 0) | (((x = j + 1 >> 0, ((x < 0 || x >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x])) >>> 0) << 16 >>> 0)) >>> 0) | (((x$1 = j + 2 >> 0, ((x$1 < 0 || x$1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$1])) >>> 0) << 8 >>> 0)) >>> 0) | ((x$2 = j + 3 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$2])) >>> 0)) >>> 0;
				i = i + (1) >> 0;
			}
			_tmp$5 = h0; _tmp$6 = h1; _tmp$7 = h2; _tmp$8 = h3; _tmp$9 = h4; a = _tmp$5; b = _tmp$6; c = _tmp$7; d = _tmp$8; e = _tmp$9;
			i$1 = 0;
			while (i$1 < 16) {
				f = (((b & c) >>> 0) | ((((~b >>> 0)) & d) >>> 0)) >>> 0;
				a5 = ((a << 5 >>> 0) | (a >>> 27 >>> 0)) >>> 0;
				b30 = ((b << 30 >>> 0) | (b >>> 2 >>> 0)) >>> 0;
				t = (((a5 + f >>> 0) + e >>> 0) + (x$3 = i$1 & 15, ((x$3 < 0 || x$3 >= w.length) ? $throwRuntimeError("index out of range") : w[x$3])) >>> 0) + 1518500249 >>> 0;
				_tmp$10 = t; _tmp$11 = a; _tmp$12 = b30; _tmp$13 = c; _tmp$14 = d; a = _tmp$10; b = _tmp$11; c = _tmp$12; d = _tmp$13; e = _tmp$14;
				i$1 = i$1 + (1) >> 0;
			}
			while (i$1 < 20) {
				tmp = ((((((x$4 = ((i$1 - 3 >> 0)) & 15, ((x$4 < 0 || x$4 >= w.length) ? $throwRuntimeError("index out of range") : w[x$4])) ^ (x$5 = ((i$1 - 8 >> 0)) & 15, ((x$5 < 0 || x$5 >= w.length) ? $throwRuntimeError("index out of range") : w[x$5]))) >>> 0) ^ (x$6 = ((i$1 - 14 >> 0)) & 15, ((x$6 < 0 || x$6 >= w.length) ? $throwRuntimeError("index out of range") : w[x$6]))) >>> 0) ^ (x$7 = (i$1) & 15, ((x$7 < 0 || x$7 >= w.length) ? $throwRuntimeError("index out of range") : w[x$7]))) >>> 0;
				(x$8 = i$1 & 15, (x$8 < 0 || x$8 >= w.length) ? $throwRuntimeError("index out of range") : w[x$8] = ((tmp << 1 >>> 0) | (tmp >>> 31 >>> 0)) >>> 0);
				f$1 = (((b & c) >>> 0) | ((((~b >>> 0)) & d) >>> 0)) >>> 0;
				a5$1 = ((a << 5 >>> 0) | (a >>> 27 >>> 0)) >>> 0;
				b30$1 = ((b << 30 >>> 0) | (b >>> 2 >>> 0)) >>> 0;
				t$1 = (((a5$1 + f$1 >>> 0) + e >>> 0) + (x$9 = i$1 & 15, ((x$9 < 0 || x$9 >= w.length) ? $throwRuntimeError("index out of range") : w[x$9])) >>> 0) + 1518500249 >>> 0;
				_tmp$15 = t$1; _tmp$16 = a; _tmp$17 = b30$1; _tmp$18 = c; _tmp$19 = d; a = _tmp$15; b = _tmp$16; c = _tmp$17; d = _tmp$18; e = _tmp$19;
				i$1 = i$1 + (1) >> 0;
			}
			while (i$1 < 40) {
				tmp$1 = ((((((x$10 = ((i$1 - 3 >> 0)) & 15, ((x$10 < 0 || x$10 >= w.length) ? $throwRuntimeError("index out of range") : w[x$10])) ^ (x$11 = ((i$1 - 8 >> 0)) & 15, ((x$11 < 0 || x$11 >= w.length) ? $throwRuntimeError("index out of range") : w[x$11]))) >>> 0) ^ (x$12 = ((i$1 - 14 >> 0)) & 15, ((x$12 < 0 || x$12 >= w.length) ? $throwRuntimeError("index out of range") : w[x$12]))) >>> 0) ^ (x$13 = (i$1) & 15, ((x$13 < 0 || x$13 >= w.length) ? $throwRuntimeError("index out of range") : w[x$13]))) >>> 0;
				(x$14 = i$1 & 15, (x$14 < 0 || x$14 >= w.length) ? $throwRuntimeError("index out of range") : w[x$14] = ((tmp$1 << 1 >>> 0) | (tmp$1 >>> 31 >>> 0)) >>> 0);
				f$2 = (((b ^ c) >>> 0) ^ d) >>> 0;
				a5$2 = ((a << 5 >>> 0) | (a >>> 27 >>> 0)) >>> 0;
				b30$2 = ((b << 30 >>> 0) | (b >>> 2 >>> 0)) >>> 0;
				t$2 = (((a5$2 + f$2 >>> 0) + e >>> 0) + (x$15 = i$1 & 15, ((x$15 < 0 || x$15 >= w.length) ? $throwRuntimeError("index out of range") : w[x$15])) >>> 0) + 1859775393 >>> 0;
				_tmp$20 = t$2; _tmp$21 = a; _tmp$22 = b30$2; _tmp$23 = c; _tmp$24 = d; a = _tmp$20; b = _tmp$21; c = _tmp$22; d = _tmp$23; e = _tmp$24;
				i$1 = i$1 + (1) >> 0;
			}
			while (i$1 < 60) {
				tmp$2 = ((((((x$16 = ((i$1 - 3 >> 0)) & 15, ((x$16 < 0 || x$16 >= w.length) ? $throwRuntimeError("index out of range") : w[x$16])) ^ (x$17 = ((i$1 - 8 >> 0)) & 15, ((x$17 < 0 || x$17 >= w.length) ? $throwRuntimeError("index out of range") : w[x$17]))) >>> 0) ^ (x$18 = ((i$1 - 14 >> 0)) & 15, ((x$18 < 0 || x$18 >= w.length) ? $throwRuntimeError("index out of range") : w[x$18]))) >>> 0) ^ (x$19 = (i$1) & 15, ((x$19 < 0 || x$19 >= w.length) ? $throwRuntimeError("index out of range") : w[x$19]))) >>> 0;
				(x$20 = i$1 & 15, (x$20 < 0 || x$20 >= w.length) ? $throwRuntimeError("index out of range") : w[x$20] = ((tmp$2 << 1 >>> 0) | (tmp$2 >>> 31 >>> 0)) >>> 0);
				f$3 = (((((((b | c) >>> 0)) & d) >>> 0)) | (((b & c) >>> 0))) >>> 0;
				a5$3 = ((a << 5 >>> 0) | (a >>> 27 >>> 0)) >>> 0;
				b30$3 = ((b << 30 >>> 0) | (b >>> 2 >>> 0)) >>> 0;
				t$3 = (((a5$3 + f$3 >>> 0) + e >>> 0) + (x$21 = i$1 & 15, ((x$21 < 0 || x$21 >= w.length) ? $throwRuntimeError("index out of range") : w[x$21])) >>> 0) + 2400959708 >>> 0;
				_tmp$25 = t$3; _tmp$26 = a; _tmp$27 = b30$3; _tmp$28 = c; _tmp$29 = d; a = _tmp$25; b = _tmp$26; c = _tmp$27; d = _tmp$28; e = _tmp$29;
				i$1 = i$1 + (1) >> 0;
			}
			while (i$1 < 80) {
				tmp$3 = ((((((x$22 = ((i$1 - 3 >> 0)) & 15, ((x$22 < 0 || x$22 >= w.length) ? $throwRuntimeError("index out of range") : w[x$22])) ^ (x$23 = ((i$1 - 8 >> 0)) & 15, ((x$23 < 0 || x$23 >= w.length) ? $throwRuntimeError("index out of range") : w[x$23]))) >>> 0) ^ (x$24 = ((i$1 - 14 >> 0)) & 15, ((x$24 < 0 || x$24 >= w.length) ? $throwRuntimeError("index out of range") : w[x$24]))) >>> 0) ^ (x$25 = (i$1) & 15, ((x$25 < 0 || x$25 >= w.length) ? $throwRuntimeError("index out of range") : w[x$25]))) >>> 0;
				(x$26 = i$1 & 15, (x$26 < 0 || x$26 >= w.length) ? $throwRuntimeError("index out of range") : w[x$26] = ((tmp$3 << 1 >>> 0) | (tmp$3 >>> 31 >>> 0)) >>> 0);
				f$4 = (((b ^ c) >>> 0) ^ d) >>> 0;
				a5$4 = ((a << 5 >>> 0) | (a >>> 27 >>> 0)) >>> 0;
				b30$4 = ((b << 30 >>> 0) | (b >>> 2 >>> 0)) >>> 0;
				t$4 = (((a5$4 + f$4 >>> 0) + e >>> 0) + (x$27 = i$1 & 15, ((x$27 < 0 || x$27 >= w.length) ? $throwRuntimeError("index out of range") : w[x$27])) >>> 0) + 3395469782 >>> 0;
				_tmp$30 = t$4; _tmp$31 = a; _tmp$32 = b30$4; _tmp$33 = c; _tmp$34 = d; a = _tmp$30; b = _tmp$31; c = _tmp$32; d = _tmp$33; e = _tmp$34;
				i$1 = i$1 + (1) >> 0;
			}
			h0 = h0 + (a) >>> 0;
			h1 = h1 + (b) >>> 0;
			h2 = h2 + (c) >>> 0;
			h3 = h3 + (d) >>> 0;
			h4 = h4 + (e) >>> 0;
			p = $subslice(p, 64);
		}
		_tmp$35 = h0; _tmp$36 = h1; _tmp$37 = h2; _tmp$38 = h3; _tmp$39 = h4; dig.h[0] = _tmp$35; dig.h[1] = _tmp$36; dig.h[2] = _tmp$37; dig.h[3] = _tmp$38; dig.h[4] = _tmp$39;
	};
	$pkg.$init = function() {
		($ptrType(digest)).methods = [["BlockSize", "BlockSize", "", $funcType([], [$Int], false), -1], ["Reset", "Reset", "", $funcType([], [], false), -1], ["Size", "Size", "", $funcType([], [$Int], false), -1], ["Sum", "Sum", "", $funcType([($sliceType($Uint8))], [($sliceType($Uint8))], false), -1], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["checkSum", "checkSum", "crypto/sha1", $funcType([], [($arrayType($Uint8, 20))], false), -1]];
		digest.init([["h", "h", "crypto/sha1", ($arrayType($Uint32, 5)), ""], ["x", "x", "crypto/sha1", ($arrayType($Uint8, 64)), ""], ["nx", "nx", "crypto/sha1", $Int, ""], ["len", "len", "crypto/sha1", $Uint64, ""]]);
		block = blockGeneric;
		init();
	};
	return $pkg;
})();
$packages["crypto/sha256"] = (function() {
	var $pkg = {}, crypto = $packages["crypto"], hash = $packages["hash"], digest, _K, init, New, New224, block;
	digest = $pkg.digest = $newType(0, "Struct", "sha256.digest", "digest", "crypto/sha256", function(h_, x_, nx_, len_, is224_) {
		this.$val = this;
		this.h = h_ !== undefined ? h_ : ($arrayType($Uint32, 8)).zero();
		this.x = x_ !== undefined ? x_ : ($arrayType($Uint8, 64)).zero();
		this.nx = nx_ !== undefined ? nx_ : 0;
		this.len = len_ !== undefined ? len_ : new $Uint64(0, 0);
		this.is224 = is224_ !== undefined ? is224_ : false;
	});
	init = function() {
		crypto.RegisterHash(4, New224);
		crypto.RegisterHash(5, New);
	};
	digest.Ptr.prototype.Reset = function() {
		var d;
		d = this;
		if (!d.is224) {
			d.h[0] = 1779033703;
			d.h[1] = 3144134277;
			d.h[2] = 1013904242;
			d.h[3] = 2773480762;
			d.h[4] = 1359893119;
			d.h[5] = 2600822924;
			d.h[6] = 528734635;
			d.h[7] = 1541459225;
		} else {
			d.h[0] = 3238371032;
			d.h[1] = 914150663;
			d.h[2] = 812702999;
			d.h[3] = 4144912697;
			d.h[4] = 4290775857;
			d.h[5] = 1750603025;
			d.h[6] = 1694076839;
			d.h[7] = 3204075428;
		}
		d.nx = 0;
		d.len = new $Uint64(0, 0);
	};
	digest.prototype.Reset = function() { return this.$val.Reset(); };
	New = $pkg.New = function() {
		var d;
		d = new digest.Ptr();
		d.Reset();
		return d;
	};
	New224 = $pkg.New224 = function() {
		var d;
		d = new digest.Ptr();
		d.is224 = true;
		d.Reset();
		return d;
	};
	digest.Ptr.prototype.Size = function() {
		var d;
		d = this;
		if (!d.is224) {
			return 32;
		}
		return 28;
	};
	digest.prototype.Size = function() { return this.$val.Size(); };
	digest.Ptr.prototype.BlockSize = function() {
		var d;
		d = this;
		return 64;
	};
	digest.prototype.BlockSize = function() { return this.$val.BlockSize(); };
	digest.Ptr.prototype.Write = function(p) {
		var nn = 0, err = $ifaceNil, d, x, x$1, n, n$1;
		d = this;
		nn = p.$length;
		d.len = (x = d.len, x$1 = new $Uint64(0, nn), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
		if (d.nx > 0) {
			n = $copySlice($subslice(new ($sliceType($Uint8))(d.x), d.nx), p);
			d.nx = d.nx + (n) >> 0;
			if (d.nx === 64) {
				block(d, new ($sliceType($Uint8))(d.x));
				d.nx = 0;
			}
			p = $subslice(p, n);
		}
		if (p.$length >= 64) {
			n$1 = p.$length & ~63;
			block(d, $subslice(p, 0, n$1));
			p = $subslice(p, n$1);
		}
		if (p.$length > 0) {
			d.nx = $copySlice(new ($sliceType($Uint8))(d.x), p);
		}
		return [nn, err];
	};
	digest.prototype.Write = function(p) { return this.$val.Write(p); };
	digest.Ptr.prototype.Sum = function(in$1) {
		var d0, d, hash$1;
		d0 = this;
		d = new digest.Ptr(); $copy(d, d0, digest);
		hash$1 = ($arrayType($Uint8, 32)).zero(); $copy(hash$1, d.checkSum(), ($arrayType($Uint8, 32)));
		if (d.is224) {
			return $appendSlice(in$1, $subslice(new ($sliceType($Uint8))(hash$1), 0, 28));
		}
		return $appendSlice(in$1, new ($sliceType($Uint8))(hash$1));
	};
	digest.prototype.Sum = function(in$1) { return this.$val.Sum(in$1); };
	digest.Ptr.prototype.checkSum = function() {
		var d, len, tmp, x, x$1, x$2, i, h, digest$1, _ref, _i, i$1, s, x$3, x$4, x$5, x$6;
		d = this;
		len = d.len;
		tmp = ($arrayType($Uint8, 64)).zero(); $copy(tmp, ($arrayType($Uint8, 64)).zero(), ($arrayType($Uint8, 64)));
		tmp[0] = 128;
		if ((x = $div64(len, new $Uint64(0, 64), true), (x.$high < 0 || (x.$high === 0 && x.$low < 56)))) {
			d.Write($subslice(new ($sliceType($Uint8))(tmp), 0, $flatten64((x$1 = $div64(len, new $Uint64(0, 64), true), new $Uint64(0 - x$1.$high, 56 - x$1.$low)))));
		} else {
			d.Write($subslice(new ($sliceType($Uint8))(tmp), 0, $flatten64((x$2 = $div64(len, new $Uint64(0, 64), true), new $Uint64(0 - x$2.$high, 120 - x$2.$low)))));
		}
		len = $shiftLeft64(len, (3));
		i = 0;
		while (i < 8) {
			(i < 0 || i >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[i] = ($shiftRightUint64(len, ((56 - ((((8 >>> 16 << 16) * i >>> 0) + (8 << 16 >>> 16) * i) >>> 0) >>> 0))).$low << 24 >>> 24);
			i = i + (1) >>> 0;
		}
		d.Write($subslice(new ($sliceType($Uint8))(tmp), 0, 8));
		if (!((d.nx === 0))) {
			$panic(new $String("d.nx != 0"));
		}
		h = new ($sliceType($Uint32))(d.h);
		if (d.is224) {
			h = $subslice(new ($sliceType($Uint32))(d.h), 0, 7);
		}
		digest$1 = ($arrayType($Uint8, 32)).zero(); $copy(digest$1, ($arrayType($Uint8, 32)).zero(), ($arrayType($Uint8, 32)));
		_ref = h;
		_i = 0;
		while (_i < _ref.$length) {
			i$1 = _i;
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			(x$3 = (((i$1 >>> 16 << 16) * 4 >> 0) + (i$1 << 16 >>> 16) * 4) >> 0, (x$3 < 0 || x$3 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$3] = ((s >>> 24 >>> 0) << 24 >>> 24));
			(x$4 = ((((i$1 >>> 16 << 16) * 4 >> 0) + (i$1 << 16 >>> 16) * 4) >> 0) + 1 >> 0, (x$4 < 0 || x$4 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$4] = ((s >>> 16 >>> 0) << 24 >>> 24));
			(x$5 = ((((i$1 >>> 16 << 16) * 4 >> 0) + (i$1 << 16 >>> 16) * 4) >> 0) + 2 >> 0, (x$5 < 0 || x$5 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$5] = ((s >>> 8 >>> 0) << 24 >>> 24));
			(x$6 = ((((i$1 >>> 16 << 16) * 4 >> 0) + (i$1 << 16 >>> 16) * 4) >> 0) + 3 >> 0, (x$6 < 0 || x$6 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$6] = (s << 24 >>> 24));
			_i++;
		}
		return digest$1;
	};
	digest.prototype.checkSum = function() { return this.$val.checkSum(); };
	block = function(dig, p) {
		var w, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, h0, h1, h2, h3, h4, h5, h6, h7, i, j, x, x$1, x$2, i$1, x$3, v1, t1, x$4, v2, t2, x$5, x$6, _tmp$8, _tmp$9, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, a, b, c, d, e, f, g, h, i$2, t1$1, t2$1, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$20, _tmp$21, _tmp$22, _tmp$23;
		w = ($arrayType($Uint32, 64)).zero(); $copy(w, ($arrayType($Uint32, 64)).zero(), ($arrayType($Uint32, 64)));
		_tmp = dig.h[0]; _tmp$1 = dig.h[1]; _tmp$2 = dig.h[2]; _tmp$3 = dig.h[3]; _tmp$4 = dig.h[4]; _tmp$5 = dig.h[5]; _tmp$6 = dig.h[6]; _tmp$7 = dig.h[7]; h0 = _tmp; h1 = _tmp$1; h2 = _tmp$2; h3 = _tmp$3; h4 = _tmp$4; h5 = _tmp$5; h6 = _tmp$6; h7 = _tmp$7;
		while (p.$length >= 64) {
			i = 0;
			while (i < 16) {
				j = (((i >>> 16 << 16) * 4 >> 0) + (i << 16 >>> 16) * 4) >> 0;
				(i < 0 || i >= w.length) ? $throwRuntimeError("index out of range") : w[i] = (((((((((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j]) >>> 0) << 24 >>> 0) | (((x = j + 1 >> 0, ((x < 0 || x >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x])) >>> 0) << 16 >>> 0)) >>> 0) | (((x$1 = j + 2 >> 0, ((x$1 < 0 || x$1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$1])) >>> 0) << 8 >>> 0)) >>> 0) | ((x$2 = j + 3 >> 0, ((x$2 < 0 || x$2 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$2])) >>> 0)) >>> 0;
				i = i + (1) >> 0;
			}
			i$1 = 16;
			while (i$1 < 64) {
				v1 = (x$3 = i$1 - 2 >> 0, ((x$3 < 0 || x$3 >= w.length) ? $throwRuntimeError("index out of range") : w[x$3]));
				t1 = (((((((v1 >>> 17 >>> 0) | (v1 << 15 >>> 0)) >>> 0)) ^ ((((v1 >>> 19 >>> 0) | (v1 << 13 >>> 0)) >>> 0))) >>> 0) ^ ((v1 >>> 10 >>> 0))) >>> 0;
				v2 = (x$4 = i$1 - 15 >> 0, ((x$4 < 0 || x$4 >= w.length) ? $throwRuntimeError("index out of range") : w[x$4]));
				t2 = (((((((v2 >>> 7 >>> 0) | (v2 << 25 >>> 0)) >>> 0)) ^ ((((v2 >>> 18 >>> 0) | (v2 << 14 >>> 0)) >>> 0))) >>> 0) ^ ((v2 >>> 3 >>> 0))) >>> 0;
				(i$1 < 0 || i$1 >= w.length) ? $throwRuntimeError("index out of range") : w[i$1] = ((t1 + (x$5 = i$1 - 7 >> 0, ((x$5 < 0 || x$5 >= w.length) ? $throwRuntimeError("index out of range") : w[x$5])) >>> 0) + t2 >>> 0) + (x$6 = i$1 - 16 >> 0, ((x$6 < 0 || x$6 >= w.length) ? $throwRuntimeError("index out of range") : w[x$6])) >>> 0;
				i$1 = i$1 + (1) >> 0;
			}
			_tmp$8 = h0; _tmp$9 = h1; _tmp$10 = h2; _tmp$11 = h3; _tmp$12 = h4; _tmp$13 = h5; _tmp$14 = h6; _tmp$15 = h7; a = _tmp$8; b = _tmp$9; c = _tmp$10; d = _tmp$11; e = _tmp$12; f = _tmp$13; g = _tmp$14; h = _tmp$15;
			i$2 = 0;
			while (i$2 < 64) {
				t1$1 = (((h + (((((((((e >>> 6 >>> 0) | (e << 26 >>> 0)) >>> 0)) ^ ((((e >>> 11 >>> 0) | (e << 21 >>> 0)) >>> 0))) >>> 0) ^ ((((e >>> 25 >>> 0) | (e << 7 >>> 0)) >>> 0))) >>> 0)) >>> 0) + ((((((e & f) >>> 0)) ^ ((((~e >>> 0) & g) >>> 0))) >>> 0)) >>> 0) + ((i$2 < 0 || i$2 >= _K.$length) ? $throwRuntimeError("index out of range") : _K.$array[_K.$offset + i$2]) >>> 0) + ((i$2 < 0 || i$2 >= w.length) ? $throwRuntimeError("index out of range") : w[i$2]) >>> 0;
				t2$1 = (((((((((a >>> 2 >>> 0) | (a << 30 >>> 0)) >>> 0)) ^ ((((a >>> 13 >>> 0) | (a << 19 >>> 0)) >>> 0))) >>> 0) ^ ((((a >>> 22 >>> 0) | (a << 10 >>> 0)) >>> 0))) >>> 0)) + ((((((((a & b) >>> 0)) ^ (((a & c) >>> 0))) >>> 0) ^ (((b & c) >>> 0))) >>> 0)) >>> 0;
				h = g;
				g = f;
				f = e;
				e = d + t1$1 >>> 0;
				d = c;
				c = b;
				b = a;
				a = t1$1 + t2$1 >>> 0;
				i$2 = i$2 + (1) >> 0;
			}
			h0 = h0 + (a) >>> 0;
			h1 = h1 + (b) >>> 0;
			h2 = h2 + (c) >>> 0;
			h3 = h3 + (d) >>> 0;
			h4 = h4 + (e) >>> 0;
			h5 = h5 + (f) >>> 0;
			h6 = h6 + (g) >>> 0;
			h7 = h7 + (h) >>> 0;
			p = $subslice(p, 64);
		}
		_tmp$16 = h0; _tmp$17 = h1; _tmp$18 = h2; _tmp$19 = h3; _tmp$20 = h4; _tmp$21 = h5; _tmp$22 = h6; _tmp$23 = h7; dig.h[0] = _tmp$16; dig.h[1] = _tmp$17; dig.h[2] = _tmp$18; dig.h[3] = _tmp$19; dig.h[4] = _tmp$20; dig.h[5] = _tmp$21; dig.h[6] = _tmp$22; dig.h[7] = _tmp$23;
	};
	$pkg.$init = function() {
		($ptrType(digest)).methods = [["BlockSize", "BlockSize", "", $funcType([], [$Int], false), -1], ["Reset", "Reset", "", $funcType([], [], false), -1], ["Size", "Size", "", $funcType([], [$Int], false), -1], ["Sum", "Sum", "", $funcType([($sliceType($Uint8))], [($sliceType($Uint8))], false), -1], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["checkSum", "checkSum", "crypto/sha256", $funcType([], [($arrayType($Uint8, 32))], false), -1]];
		digest.init([["h", "h", "crypto/sha256", ($arrayType($Uint32, 8)), ""], ["x", "x", "crypto/sha256", ($arrayType($Uint8, 64)), ""], ["nx", "nx", "crypto/sha256", $Int, ""], ["len", "len", "crypto/sha256", $Uint64, ""], ["is224", "is224", "crypto/sha256", $Bool, ""]]);
		_K = new ($sliceType($Uint32))([1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298]);
		init();
	};
	return $pkg;
})();
$packages["crypto/dsa"] = (function() {
	var $pkg = {}, errors = $packages["errors"], io = $packages["io"], big = $packages["math/big"], Parameters, PublicKey, Verify;
	Parameters = $pkg.Parameters = $newType(0, "Struct", "dsa.Parameters", "Parameters", "crypto/dsa", function(P_, Q_, G_) {
		this.$val = this;
		this.P = P_ !== undefined ? P_ : ($ptrType(big.Int)).nil;
		this.Q = Q_ !== undefined ? Q_ : ($ptrType(big.Int)).nil;
		this.G = G_ !== undefined ? G_ : ($ptrType(big.Int)).nil;
	});
	PublicKey = $pkg.PublicKey = $newType(0, "Struct", "dsa.PublicKey", "PublicKey", "crypto/dsa", function(Parameters_, Y_) {
		this.$val = this;
		this.Parameters = Parameters_ !== undefined ? Parameters_ : new Parameters.Ptr();
		this.Y = Y_ !== undefined ? Y_ : ($ptrType(big.Int)).nil;
	});
	Verify = $pkg.Verify = function(pub, hash, r, s) {
		var w, n, z, u1, u2, v;
		if (r.Sign() < 1 || r.Cmp(pub.Parameters.Q) >= 0) {
			return false;
		}
		if (s.Sign() < 1 || s.Cmp(pub.Parameters.Q) >= 0) {
			return false;
		}
		w = new big.Int.Ptr().ModInverse(s, pub.Parameters.Q);
		n = pub.Parameters.Q.BitLen();
		if (!(((n & 7) === 0))) {
			return false;
		}
		z = new big.Int.Ptr().SetBytes(hash);
		u1 = new big.Int.Ptr().Mul(z, w);
		u1.Mod(u1, pub.Parameters.Q);
		u2 = w.Mul(r, w);
		u2.Mod(u2, pub.Parameters.Q);
		v = u1.Exp(pub.Parameters.G, u1, pub.Parameters.P);
		u2.Exp(pub.Y, u2, pub.Parameters.P);
		v.Mul(v, u2);
		v.Mod(v, pub.Parameters.P);
		v.Mod(v, pub.Parameters.Q);
		return v.Cmp(r) === 0;
	};
	$pkg.$init = function() {
		Parameters.init([["P", "P", "", ($ptrType(big.Int)), ""], ["Q", "Q", "", ($ptrType(big.Int)), ""], ["G", "G", "", ($ptrType(big.Int)), ""]]);
		PublicKey.init([["Parameters", "", "", Parameters, ""], ["Y", "Y", "", ($ptrType(big.Int)), ""]]);
		$pkg.ErrInvalidPublicKey = errors.New("crypto/dsa: invalid public key");
	};
	return $pkg;
})();
$packages["crypto/sha512"] = (function() {
	var $pkg = {}, crypto = $packages["crypto"], hash = $packages["hash"], digest, _K, init, New, New384, block;
	digest = $pkg.digest = $newType(0, "Struct", "sha512.digest", "digest", "crypto/sha512", function(h_, x_, nx_, len_, is384_) {
		this.$val = this;
		this.h = h_ !== undefined ? h_ : ($arrayType($Uint64, 8)).zero();
		this.x = x_ !== undefined ? x_ : ($arrayType($Uint8, 128)).zero();
		this.nx = nx_ !== undefined ? nx_ : 0;
		this.len = len_ !== undefined ? len_ : new $Uint64(0, 0);
		this.is384 = is384_ !== undefined ? is384_ : false;
	});
	init = function() {
		crypto.RegisterHash(6, New384);
		crypto.RegisterHash(7, New);
	};
	digest.Ptr.prototype.Reset = function() {
		var d;
		d = this;
		if (!d.is384) {
			d.h[0] = new $Uint64(1779033703, 4089235720);
			d.h[1] = new $Uint64(3144134277, 2227873595);
			d.h[2] = new $Uint64(1013904242, 4271175723);
			d.h[3] = new $Uint64(2773480762, 1595750129);
			d.h[4] = new $Uint64(1359893119, 2917565137);
			d.h[5] = new $Uint64(2600822924, 725511199);
			d.h[6] = new $Uint64(528734635, 4215389547);
			d.h[7] = new $Uint64(1541459225, 327033209);
		} else {
			d.h[0] = new $Uint64(3418070365, 3238371032);
			d.h[1] = new $Uint64(1654270250, 914150663);
			d.h[2] = new $Uint64(2438529370, 812702999);
			d.h[3] = new $Uint64(355462360, 4144912697);
			d.h[4] = new $Uint64(1731405415, 4290775857);
			d.h[5] = new $Uint64(2394180231, 1750603025);
			d.h[6] = new $Uint64(3675008525, 1694076839);
			d.h[7] = new $Uint64(1203062813, 3204075428);
		}
		d.nx = 0;
		d.len = new $Uint64(0, 0);
	};
	digest.prototype.Reset = function() { return this.$val.Reset(); };
	New = $pkg.New = function() {
		var d;
		d = new digest.Ptr();
		d.Reset();
		return d;
	};
	New384 = $pkg.New384 = function() {
		var d;
		d = new digest.Ptr();
		d.is384 = true;
		d.Reset();
		return d;
	};
	digest.Ptr.prototype.Size = function() {
		var d;
		d = this;
		if (!d.is384) {
			return 64;
		}
		return 48;
	};
	digest.prototype.Size = function() { return this.$val.Size(); };
	digest.Ptr.prototype.BlockSize = function() {
		var d;
		d = this;
		return 128;
	};
	digest.prototype.BlockSize = function() { return this.$val.BlockSize(); };
	digest.Ptr.prototype.Write = function(p) {
		var nn = 0, err = $ifaceNil, d, x, x$1, n, n$1;
		d = this;
		nn = p.$length;
		d.len = (x = d.len, x$1 = new $Uint64(0, nn), new $Uint64(x.$high + x$1.$high, x.$low + x$1.$low));
		if (d.nx > 0) {
			n = $copySlice($subslice(new ($sliceType($Uint8))(d.x), d.nx), p);
			d.nx = d.nx + (n) >> 0;
			if (d.nx === 128) {
				block(d, new ($sliceType($Uint8))(d.x));
				d.nx = 0;
			}
			p = $subslice(p, n);
		}
		if (p.$length >= 128) {
			n$1 = p.$length & ~127;
			block(d, $subslice(p, 0, n$1));
			p = $subslice(p, n$1);
		}
		if (p.$length > 0) {
			d.nx = $copySlice(new ($sliceType($Uint8))(d.x), p);
		}
		return [nn, err];
	};
	digest.prototype.Write = function(p) { return this.$val.Write(p); };
	digest.Ptr.prototype.Sum = function(in$1) {
		var d0, d, hash$1;
		d0 = this;
		d = new digest.Ptr();
		$copy(d, d0, digest);
		hash$1 = ($arrayType($Uint8, 64)).zero(); $copy(hash$1, d.checkSum(), ($arrayType($Uint8, 64)));
		if (d.is384) {
			return $appendSlice(in$1, $subslice(new ($sliceType($Uint8))(hash$1), 0, 48));
		}
		return $appendSlice(in$1, new ($sliceType($Uint8))(hash$1));
	};
	digest.prototype.Sum = function(in$1) { return this.$val.Sum(in$1); };
	digest.Ptr.prototype.checkSum = function() {
		var d, len, tmp, x, x$1, x$2, i, h, digest$1, _ref, _i, i$1, s, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x$10;
		d = this;
		len = d.len;
		tmp = ($arrayType($Uint8, 128)).zero(); $copy(tmp, ($arrayType($Uint8, 128)).zero(), ($arrayType($Uint8, 128)));
		tmp[0] = 128;
		if ((x = $div64(len, new $Uint64(0, 128), true), (x.$high < 0 || (x.$high === 0 && x.$low < 112)))) {
			d.Write($subslice(new ($sliceType($Uint8))(tmp), 0, $flatten64((x$1 = $div64(len, new $Uint64(0, 128), true), new $Uint64(0 - x$1.$high, 112 - x$1.$low)))));
		} else {
			d.Write($subslice(new ($sliceType($Uint8))(tmp), 0, $flatten64((x$2 = $div64(len, new $Uint64(0, 128), true), new $Uint64(0 - x$2.$high, 240 - x$2.$low)))));
		}
		len = $shiftLeft64(len, (3));
		i = 0;
		while (i < 16) {
			(i < 0 || i >= tmp.length) ? $throwRuntimeError("index out of range") : tmp[i] = ($shiftRightUint64(len, ((120 - ((((8 >>> 16 << 16) * i >>> 0) + (8 << 16 >>> 16) * i) >>> 0) >>> 0))).$low << 24 >>> 24);
			i = i + (1) >>> 0;
		}
		d.Write($subslice(new ($sliceType($Uint8))(tmp), 0, 16));
		if (!((d.nx === 0))) {
			$panic(new $String("d.nx != 0"));
		}
		h = new ($sliceType($Uint64))(d.h);
		if (d.is384) {
			h = $subslice(new ($sliceType($Uint64))(d.h), 0, 6);
		}
		digest$1 = ($arrayType($Uint8, 64)).zero(); $copy(digest$1, ($arrayType($Uint8, 64)).zero(), ($arrayType($Uint8, 64)));
		_ref = h;
		_i = 0;
		while (_i < _ref.$length) {
			i$1 = _i;
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			(x$3 = (((i$1 >>> 16 << 16) * 8 >> 0) + (i$1 << 16 >>> 16) * 8) >> 0, (x$3 < 0 || x$3 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$3] = ($shiftRightUint64(s, 56).$low << 24 >>> 24));
			(x$4 = ((((i$1 >>> 16 << 16) * 8 >> 0) + (i$1 << 16 >>> 16) * 8) >> 0) + 1 >> 0, (x$4 < 0 || x$4 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$4] = ($shiftRightUint64(s, 48).$low << 24 >>> 24));
			(x$5 = ((((i$1 >>> 16 << 16) * 8 >> 0) + (i$1 << 16 >>> 16) * 8) >> 0) + 2 >> 0, (x$5 < 0 || x$5 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$5] = ($shiftRightUint64(s, 40).$low << 24 >>> 24));
			(x$6 = ((((i$1 >>> 16 << 16) * 8 >> 0) + (i$1 << 16 >>> 16) * 8) >> 0) + 3 >> 0, (x$6 < 0 || x$6 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$6] = ($shiftRightUint64(s, 32).$low << 24 >>> 24));
			(x$7 = ((((i$1 >>> 16 << 16) * 8 >> 0) + (i$1 << 16 >>> 16) * 8) >> 0) + 4 >> 0, (x$7 < 0 || x$7 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$7] = ($shiftRightUint64(s, 24).$low << 24 >>> 24));
			(x$8 = ((((i$1 >>> 16 << 16) * 8 >> 0) + (i$1 << 16 >>> 16) * 8) >> 0) + 5 >> 0, (x$8 < 0 || x$8 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$8] = ($shiftRightUint64(s, 16).$low << 24 >>> 24));
			(x$9 = ((((i$1 >>> 16 << 16) * 8 >> 0) + (i$1 << 16 >>> 16) * 8) >> 0) + 6 >> 0, (x$9 < 0 || x$9 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$9] = ($shiftRightUint64(s, 8).$low << 24 >>> 24));
			(x$10 = ((((i$1 >>> 16 << 16) * 8 >> 0) + (i$1 << 16 >>> 16) * 8) >> 0) + 7 >> 0, (x$10 < 0 || x$10 >= digest$1.length) ? $throwRuntimeError("index out of range") : digest$1[x$10] = (s.$low << 24 >>> 24));
			_i++;
		}
		return digest$1;
	};
	digest.prototype.checkSum = function() { return this.$val.checkSum(); };
	block = function(dig, p) {
		var w, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, h0, h1, h2, h3, h4, h5, h6, h7, i, j, x, x$1, x$2, x$3, x$4, x$5, x$6, x$7, x$8, x$9, x$10, x$11, x$12, x$13, x$14, x$15, x$16, x$17, x$18, x$19, x$20, i$1, x$21, v1, x$22, x$23, x$24, x$25, x$26, x$27, x$28, x$29, t1, x$30, v2, x$31, x$32, x$33, x$34, x$35, x$36, x$37, x$38, t2, x$39, x$40, x$41, x$42, x$43, x$44, _tmp$8, _tmp$9, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _tmp$15, a, b, c, d, e, f, g, h, i$2, x$45, x$46, x$47, x$48, x$49, x$50, x$51, x$52, x$53, x$54, x$55, x$56, x$57, x$58, x$59, x$60, x$61, x$62, x$63, x$64, t1$1, x$65, x$66, x$67, x$68, x$69, x$70, x$71, x$72, x$73, x$74, x$75, x$76, x$77, x$78, x$79, x$80, t2$1, x$81, x$82, x$83, x$84, x$85, x$86, x$87, x$88, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$20, _tmp$21, _tmp$22, _tmp$23;
		w = ($arrayType($Uint64, 80)).zero(); $copy(w, ($arrayType($Uint64, 80)).zero(), ($arrayType($Uint64, 80)));
		_tmp = dig.h[0]; _tmp$1 = dig.h[1]; _tmp$2 = dig.h[2]; _tmp$3 = dig.h[3]; _tmp$4 = dig.h[4]; _tmp$5 = dig.h[5]; _tmp$6 = dig.h[6]; _tmp$7 = dig.h[7]; h0 = _tmp; h1 = _tmp$1; h2 = _tmp$2; h3 = _tmp$3; h4 = _tmp$4; h5 = _tmp$5; h6 = _tmp$6; h7 = _tmp$7;
		while (p.$length >= 128) {
			i = 0;
			while (i < 16) {
				j = (((i >>> 16 << 16) * 8 >> 0) + (i << 16 >>> 16) * 8) >> 0;
				(i < 0 || i >= w.length) ? $throwRuntimeError("index out of range") : w[i] = (x = (x$1 = (x$2 = (x$3 = (x$4 = (x$5 = (x$6 = $shiftLeft64(new $Uint64(0, ((j < 0 || j >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + j])), 56), x$7 = $shiftLeft64(new $Uint64(0, (x$8 = j + 1 >> 0, ((x$8 < 0 || x$8 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$8]))), 48), new $Uint64(x$6.$high | x$7.$high, (x$6.$low | x$7.$low) >>> 0)), x$9 = $shiftLeft64(new $Uint64(0, (x$10 = j + 2 >> 0, ((x$10 < 0 || x$10 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$10]))), 40), new $Uint64(x$5.$high | x$9.$high, (x$5.$low | x$9.$low) >>> 0)), x$11 = $shiftLeft64(new $Uint64(0, (x$12 = j + 3 >> 0, ((x$12 < 0 || x$12 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$12]))), 32), new $Uint64(x$4.$high | x$11.$high, (x$4.$low | x$11.$low) >>> 0)), x$13 = $shiftLeft64(new $Uint64(0, (x$14 = j + 4 >> 0, ((x$14 < 0 || x$14 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$14]))), 24), new $Uint64(x$3.$high | x$13.$high, (x$3.$low | x$13.$low) >>> 0)), x$15 = $shiftLeft64(new $Uint64(0, (x$16 = j + 5 >> 0, ((x$16 < 0 || x$16 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$16]))), 16), new $Uint64(x$2.$high | x$15.$high, (x$2.$low | x$15.$low) >>> 0)), x$17 = $shiftLeft64(new $Uint64(0, (x$18 = j + 6 >> 0, ((x$18 < 0 || x$18 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$18]))), 8), new $Uint64(x$1.$high | x$17.$high, (x$1.$low | x$17.$low) >>> 0)), x$19 = new $Uint64(0, (x$20 = j + 7 >> 0, ((x$20 < 0 || x$20 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x$20]))), new $Uint64(x.$high | x$19.$high, (x.$low | x$19.$low) >>> 0));
				i = i + (1) >> 0;
			}
			i$1 = 16;
			while (i$1 < 80) {
				v1 = (x$21 = i$1 - 2 >> 0, ((x$21 < 0 || x$21 >= w.length) ? $throwRuntimeError("index out of range") : w[x$21]));
				t1 = (x$22 = (x$23 = (x$24 = $shiftRightUint64(v1, 19), x$25 = $shiftLeft64(v1, 45), new $Uint64(x$24.$high | x$25.$high, (x$24.$low | x$25.$low) >>> 0)), x$26 = (x$27 = $shiftRightUint64(v1, 61), x$28 = $shiftLeft64(v1, 3), new $Uint64(x$27.$high | x$28.$high, (x$27.$low | x$28.$low) >>> 0)), new $Uint64(x$23.$high ^ x$26.$high, (x$23.$low ^ x$26.$low) >>> 0)), x$29 = $shiftRightUint64(v1, 6), new $Uint64(x$22.$high ^ x$29.$high, (x$22.$low ^ x$29.$low) >>> 0));
				v2 = (x$30 = i$1 - 15 >> 0, ((x$30 < 0 || x$30 >= w.length) ? $throwRuntimeError("index out of range") : w[x$30]));
				t2 = (x$31 = (x$32 = (x$33 = $shiftRightUint64(v2, 1), x$34 = $shiftLeft64(v2, 63), new $Uint64(x$33.$high | x$34.$high, (x$33.$low | x$34.$low) >>> 0)), x$35 = (x$36 = $shiftRightUint64(v2, 8), x$37 = $shiftLeft64(v2, 56), new $Uint64(x$36.$high | x$37.$high, (x$36.$low | x$37.$low) >>> 0)), new $Uint64(x$32.$high ^ x$35.$high, (x$32.$low ^ x$35.$low) >>> 0)), x$38 = $shiftRightUint64(v2, 7), new $Uint64(x$31.$high ^ x$38.$high, (x$31.$low ^ x$38.$low) >>> 0));
				(i$1 < 0 || i$1 >= w.length) ? $throwRuntimeError("index out of range") : w[i$1] = (x$39 = (x$40 = (x$41 = (x$42 = i$1 - 7 >> 0, ((x$42 < 0 || x$42 >= w.length) ? $throwRuntimeError("index out of range") : w[x$42])), new $Uint64(t1.$high + x$41.$high, t1.$low + x$41.$low)), new $Uint64(x$40.$high + t2.$high, x$40.$low + t2.$low)), x$43 = (x$44 = i$1 - 16 >> 0, ((x$44 < 0 || x$44 >= w.length) ? $throwRuntimeError("index out of range") : w[x$44])), new $Uint64(x$39.$high + x$43.$high, x$39.$low + x$43.$low));
				i$1 = i$1 + (1) >> 0;
			}
			_tmp$8 = h0; _tmp$9 = h1; _tmp$10 = h2; _tmp$11 = h3; _tmp$12 = h4; _tmp$13 = h5; _tmp$14 = h6; _tmp$15 = h7; a = _tmp$8; b = _tmp$9; c = _tmp$10; d = _tmp$11; e = _tmp$12; f = _tmp$13; g = _tmp$14; h = _tmp$15;
			i$2 = 0;
			while (i$2 < 80) {
				t1$1 = (x$45 = (x$46 = (x$47 = (x$48 = (x$49 = (x$50 = (x$51 = $shiftRightUint64(e, 14), x$52 = $shiftLeft64(e, 50), new $Uint64(x$51.$high | x$52.$high, (x$51.$low | x$52.$low) >>> 0)), x$53 = (x$54 = $shiftRightUint64(e, 18), x$55 = $shiftLeft64(e, 46), new $Uint64(x$54.$high | x$55.$high, (x$54.$low | x$55.$low) >>> 0)), new $Uint64(x$50.$high ^ x$53.$high, (x$50.$low ^ x$53.$low) >>> 0)), x$56 = (x$57 = $shiftRightUint64(e, 41), x$58 = $shiftLeft64(e, 23), new $Uint64(x$57.$high | x$58.$high, (x$57.$low | x$58.$low) >>> 0)), new $Uint64(x$49.$high ^ x$56.$high, (x$49.$low ^ x$56.$low) >>> 0)), new $Uint64(h.$high + x$48.$high, h.$low + x$48.$low)), x$59 = (x$60 = new $Uint64(e.$high & f.$high, (e.$low & f.$low) >>> 0), x$61 = (x$62 = new $Uint64(~e.$high, ~e.$low >>> 0), new $Uint64(x$62.$high & g.$high, (x$62.$low & g.$low) >>> 0)), new $Uint64(x$60.$high ^ x$61.$high, (x$60.$low ^ x$61.$low) >>> 0)), new $Uint64(x$47.$high + x$59.$high, x$47.$low + x$59.$low)), x$63 = ((i$2 < 0 || i$2 >= _K.$length) ? $throwRuntimeError("index out of range") : _K.$array[_K.$offset + i$2]), new $Uint64(x$46.$high + x$63.$high, x$46.$low + x$63.$low)), x$64 = ((i$2 < 0 || i$2 >= w.length) ? $throwRuntimeError("index out of range") : w[i$2]), new $Uint64(x$45.$high + x$64.$high, x$45.$low + x$64.$low));
				t2$1 = (x$65 = (x$66 = (x$67 = (x$68 = $shiftRightUint64(a, 28), x$69 = $shiftLeft64(a, 36), new $Uint64(x$68.$high | x$69.$high, (x$68.$low | x$69.$low) >>> 0)), x$70 = (x$71 = $shiftRightUint64(a, 34), x$72 = $shiftLeft64(a, 30), new $Uint64(x$71.$high | x$72.$high, (x$71.$low | x$72.$low) >>> 0)), new $Uint64(x$67.$high ^ x$70.$high, (x$67.$low ^ x$70.$low) >>> 0)), x$73 = (x$74 = $shiftRightUint64(a, 39), x$75 = $shiftLeft64(a, 25), new $Uint64(x$74.$high | x$75.$high, (x$74.$low | x$75.$low) >>> 0)), new $Uint64(x$66.$high ^ x$73.$high, (x$66.$low ^ x$73.$low) >>> 0)), x$76 = (x$77 = (x$78 = new $Uint64(a.$high & b.$high, (a.$low & b.$low) >>> 0), x$79 = new $Uint64(a.$high & c.$high, (a.$low & c.$low) >>> 0), new $Uint64(x$78.$high ^ x$79.$high, (x$78.$low ^ x$79.$low) >>> 0)), x$80 = new $Uint64(b.$high & c.$high, (b.$low & c.$low) >>> 0), new $Uint64(x$77.$high ^ x$80.$high, (x$77.$low ^ x$80.$low) >>> 0)), new $Uint64(x$65.$high + x$76.$high, x$65.$low + x$76.$low));
				h = g;
				g = f;
				f = e;
				e = new $Uint64(d.$high + t1$1.$high, d.$low + t1$1.$low);
				d = c;
				c = b;
				b = a;
				a = new $Uint64(t1$1.$high + t2$1.$high, t1$1.$low + t2$1.$low);
				i$2 = i$2 + (1) >> 0;
			}
			h0 = (x$81 = a, new $Uint64(h0.$high + x$81.$high, h0.$low + x$81.$low));
			h1 = (x$82 = b, new $Uint64(h1.$high + x$82.$high, h1.$low + x$82.$low));
			h2 = (x$83 = c, new $Uint64(h2.$high + x$83.$high, h2.$low + x$83.$low));
			h3 = (x$84 = d, new $Uint64(h3.$high + x$84.$high, h3.$low + x$84.$low));
			h4 = (x$85 = e, new $Uint64(h4.$high + x$85.$high, h4.$low + x$85.$low));
			h5 = (x$86 = f, new $Uint64(h5.$high + x$86.$high, h5.$low + x$86.$low));
			h6 = (x$87 = g, new $Uint64(h6.$high + x$87.$high, h6.$low + x$87.$low));
			h7 = (x$88 = h, new $Uint64(h7.$high + x$88.$high, h7.$low + x$88.$low));
			p = $subslice(p, 128);
		}
		_tmp$16 = h0; _tmp$17 = h1; _tmp$18 = h2; _tmp$19 = h3; _tmp$20 = h4; _tmp$21 = h5; _tmp$22 = h6; _tmp$23 = h7; dig.h[0] = _tmp$16; dig.h[1] = _tmp$17; dig.h[2] = _tmp$18; dig.h[3] = _tmp$19; dig.h[4] = _tmp$20; dig.h[5] = _tmp$21; dig.h[6] = _tmp$22; dig.h[7] = _tmp$23;
	};
	$pkg.$init = function() {
		($ptrType(digest)).methods = [["BlockSize", "BlockSize", "", $funcType([], [$Int], false), -1], ["Reset", "Reset", "", $funcType([], [], false), -1], ["Size", "Size", "", $funcType([], [$Int], false), -1], ["Sum", "Sum", "", $funcType([($sliceType($Uint8))], [($sliceType($Uint8))], false), -1], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["checkSum", "checkSum", "crypto/sha512", $funcType([], [($arrayType($Uint8, 64))], false), -1]];
		digest.init([["h", "h", "crypto/sha512", ($arrayType($Uint64, 8)), ""], ["x", "x", "crypto/sha512", ($arrayType($Uint8, 128)), ""], ["nx", "nx", "crypto/sha512", $Int, ""], ["len", "len", "crypto/sha512", $Uint64, ""], ["is384", "is384", "crypto/sha512", $Bool, ""]]);
		_K = new ($sliceType($Uint64))([new $Uint64(1116352408, 3609767458), new $Uint64(1899447441, 602891725), new $Uint64(3049323471, 3964484399), new $Uint64(3921009573, 2173295548), new $Uint64(961987163, 4081628472), new $Uint64(1508970993, 3053834265), new $Uint64(2453635748, 2937671579), new $Uint64(2870763221, 3664609560), new $Uint64(3624381080, 2734883394), new $Uint64(310598401, 1164996542), new $Uint64(607225278, 1323610764), new $Uint64(1426881987, 3590304994), new $Uint64(1925078388, 4068182383), new $Uint64(2162078206, 991336113), new $Uint64(2614888103, 633803317), new $Uint64(3248222580, 3479774868), new $Uint64(3835390401, 2666613458), new $Uint64(4022224774, 944711139), new $Uint64(264347078, 2341262773), new $Uint64(604807628, 2007800933), new $Uint64(770255983, 1495990901), new $Uint64(1249150122, 1856431235), new $Uint64(1555081692, 3175218132), new $Uint64(1996064986, 2198950837), new $Uint64(2554220882, 3999719339), new $Uint64(2821834349, 766784016), new $Uint64(2952996808, 2566594879), new $Uint64(3210313671, 3203337956), new $Uint64(3336571891, 1034457026), new $Uint64(3584528711, 2466948901), new $Uint64(113926993, 3758326383), new $Uint64(338241895, 168717936), new $Uint64(666307205, 1188179964), new $Uint64(773529912, 1546045734), new $Uint64(1294757372, 1522805485), new $Uint64(1396182291, 2643833823), new $Uint64(1695183700, 2343527390), new $Uint64(1986661051, 1014477480), new $Uint64(2177026350, 1206759142), new $Uint64(2456956037, 344077627), new $Uint64(2730485921, 1290863460), new $Uint64(2820302411, 3158454273), new $Uint64(3259730800, 3505952657), new $Uint64(3345764771, 106217008), new $Uint64(3516065817, 3606008344), new $Uint64(3600352804, 1432725776), new $Uint64(4094571909, 1467031594), new $Uint64(275423344, 851169720), new $Uint64(430227734, 3100823752), new $Uint64(506948616, 1363258195), new $Uint64(659060556, 3750685593), new $Uint64(883997877, 3785050280), new $Uint64(958139571, 3318307427), new $Uint64(1322822218, 3812723403), new $Uint64(1537002063, 2003034995), new $Uint64(1747873779, 3602036899), new $Uint64(1955562222, 1575990012), new $Uint64(2024104815, 1125592928), new $Uint64(2227730452, 2716904306), new $Uint64(2361852424, 442776044), new $Uint64(2428436474, 593698344), new $Uint64(2756734187, 3733110249), new $Uint64(3204031479, 2999351573), new $Uint64(3329325298, 3815920427), new $Uint64(3391569614, 3928383900), new $Uint64(3515267271, 566280711), new $Uint64(3940187606, 3454069534), new $Uint64(4118630271, 4000239992), new $Uint64(116418474, 1914138554), new $Uint64(174292421, 2731055270), new $Uint64(289380356, 3203993006), new $Uint64(460393269, 320620315), new $Uint64(685471733, 587496836), new $Uint64(852142971, 1086792851), new $Uint64(1017036298, 365543100), new $Uint64(1126000580, 2618297676), new $Uint64(1288033470, 3409855158), new $Uint64(1501505948, 4234509866), new $Uint64(1607167915, 987167468), new $Uint64(1816402316, 1246189591)]);
		init();
	};
	return $pkg;
})();
$packages["encoding/asn1"] = (function() {
	var $pkg = {}, fmt = $packages["fmt"], big = $packages["math/big"], reflect = $packages["reflect"], strconv = $packages["strconv"], time = $packages["time"], strings = $packages["strings"], bytes = $packages["bytes"], errors = $packages["errors"], io = $packages["io"], utf8 = $packages["unicode/utf8"], StructuralError, SyntaxError, BitString, ObjectIdentifier, Enumerated, Flag, RawValue, RawContent, tagAndLength, fieldParameters, forkableWriter, bigOne, bitStringType, objectIdentifierType, enumeratedType, flagType, timeType, rawValueType, rawContentsType, bigIntType, x, x$1, x$2, parseBool, parseInt64, parseInt32, parseBigInt, parseBitString, parseObjectIdentifier, parseBase128Int, parseUTCTime, parseGeneralizedTime, parsePrintableString, isPrintable, parseIA5String, parseT61String, parseUTF8String, parseTagAndLength, parseSequenceOf, invalidLength, parseField, setDefaultValue, Unmarshal, UnmarshalWithParams, parseFieldParameters, getUniversalType, newForkableWriter, marshalBase128Int, marshalInt64, int64Length, marshalBigInt, marshalLength, lengthLength, marshalTagAndLength, marshalBitString, marshalObjectIdentifier, marshalPrintableString, marshalIA5String, marshalUTF8String, marshalTwoDigits, marshalFourDigits, outsideUTCRange, marshalUTCTime, marshalGeneralizedTime, marshalTimeCommon, stripTagAndLength, marshalBody, marshalField, Marshal;
	StructuralError = $pkg.StructuralError = $newType(0, "Struct", "asn1.StructuralError", "StructuralError", "encoding/asn1", function(Msg_) {
		this.$val = this;
		this.Msg = Msg_ !== undefined ? Msg_ : "";
	});
	SyntaxError = $pkg.SyntaxError = $newType(0, "Struct", "asn1.SyntaxError", "SyntaxError", "encoding/asn1", function(Msg_) {
		this.$val = this;
		this.Msg = Msg_ !== undefined ? Msg_ : "";
	});
	BitString = $pkg.BitString = $newType(0, "Struct", "asn1.BitString", "BitString", "encoding/asn1", function(Bytes_, BitLength_) {
		this.$val = this;
		this.Bytes = Bytes_ !== undefined ? Bytes_ : ($sliceType($Uint8)).nil;
		this.BitLength = BitLength_ !== undefined ? BitLength_ : 0;
	});
	ObjectIdentifier = $pkg.ObjectIdentifier = $newType(12, "Slice", "asn1.ObjectIdentifier", "ObjectIdentifier", "encoding/asn1", null);
	Enumerated = $pkg.Enumerated = $newType(4, "Int", "asn1.Enumerated", "Enumerated", "encoding/asn1", null);
	Flag = $pkg.Flag = $newType(1, "Bool", "asn1.Flag", "Flag", "encoding/asn1", null);
	RawValue = $pkg.RawValue = $newType(0, "Struct", "asn1.RawValue", "RawValue", "encoding/asn1", function(Class_, Tag_, IsCompound_, Bytes_, FullBytes_) {
		this.$val = this;
		this.Class = Class_ !== undefined ? Class_ : 0;
		this.Tag = Tag_ !== undefined ? Tag_ : 0;
		this.IsCompound = IsCompound_ !== undefined ? IsCompound_ : false;
		this.Bytes = Bytes_ !== undefined ? Bytes_ : ($sliceType($Uint8)).nil;
		this.FullBytes = FullBytes_ !== undefined ? FullBytes_ : ($sliceType($Uint8)).nil;
	});
	RawContent = $pkg.RawContent = $newType(12, "Slice", "asn1.RawContent", "RawContent", "encoding/asn1", null);
	tagAndLength = $pkg.tagAndLength = $newType(0, "Struct", "asn1.tagAndLength", "tagAndLength", "encoding/asn1", function(class$0_, tag_, length_, isCompound_) {
		this.$val = this;
		this.class$0 = class$0_ !== undefined ? class$0_ : 0;
		this.tag = tag_ !== undefined ? tag_ : 0;
		this.length = length_ !== undefined ? length_ : 0;
		this.isCompound = isCompound_ !== undefined ? isCompound_ : false;
	});
	fieldParameters = $pkg.fieldParameters = $newType(0, "Struct", "asn1.fieldParameters", "fieldParameters", "encoding/asn1", function(optional_, explicit_, application_, defaultValue_, tag_, stringType_, set_, omitEmpty_) {
		this.$val = this;
		this.optional = optional_ !== undefined ? optional_ : false;
		this.explicit = explicit_ !== undefined ? explicit_ : false;
		this.application = application_ !== undefined ? application_ : false;
		this.defaultValue = defaultValue_ !== undefined ? defaultValue_ : ($ptrType($Int64)).nil;
		this.tag = tag_ !== undefined ? tag_ : ($ptrType($Int)).nil;
		this.stringType = stringType_ !== undefined ? stringType_ : 0;
		this.set = set_ !== undefined ? set_ : false;
		this.omitEmpty = omitEmpty_ !== undefined ? omitEmpty_ : false;
	});
	forkableWriter = $pkg.forkableWriter = $newType(0, "Struct", "asn1.forkableWriter", "forkableWriter", "encoding/asn1", function(Buffer_, pre_, post_) {
		this.$val = this;
		this.Buffer = Buffer_ !== undefined ? Buffer_ : ($ptrType(bytes.Buffer)).nil;
		this.pre = pre_ !== undefined ? pre_ : ($ptrType(forkableWriter)).nil;
		this.post = post_ !== undefined ? post_ : ($ptrType(forkableWriter)).nil;
	});
	StructuralError.Ptr.prototype.Error = function() {
		var e;
		e = new StructuralError.Ptr(); $copy(e, this, StructuralError);
		return "asn1: structure error: " + e.Msg;
	};
	StructuralError.prototype.Error = function() { return this.$val.Error(); };
	SyntaxError.Ptr.prototype.Error = function() {
		var e;
		e = new SyntaxError.Ptr(); $copy(e, this, SyntaxError);
		return "asn1: syntax error: " + e.Msg;
	};
	SyntaxError.prototype.Error = function() { return this.$val.Error(); };
	parseBool = function(bytes$1) {
		var ret = false, err = $ifaceNil, x$3, _ref, x$4;
		if (!((bytes$1.$length === 1))) {
			err = (x$3 = new SyntaxError.Ptr("invalid boolean"), new x$3.constructor.Struct(x$3));
			return [ret, err];
		}
		_ref = ((0 < 0 || 0 >= bytes$1.$length) ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + 0]);
		if (_ref === 0) {
			ret = false;
		} else if (_ref === 255) {
			ret = true;
		} else {
			err = (x$4 = new SyntaxError.Ptr("invalid boolean"), new x$4.constructor.Struct(x$4));
		}
		return [ret, err];
	};
	parseInt64 = function(bytes$1) {
		var ret = new $Int64(0, 0), err = $ifaceNil, x$3, bytesRead, x$4;
		if (bytes$1.$length > 8) {
			err = (x$3 = new StructuralError.Ptr("integer too large"), new x$3.constructor.Struct(x$3));
			return [ret, err];
		}
		bytesRead = 0;
		while (bytesRead < bytes$1.$length) {
			ret = $shiftLeft64(ret, (8));
			ret = (x$4 = new $Int64(0, ((bytesRead < 0 || bytesRead >= bytes$1.$length) ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + bytesRead])), new $Int64(ret.$high | x$4.$high, (ret.$low | x$4.$low) >>> 0));
			bytesRead = bytesRead + (1) >> 0;
		}
		ret = $shiftLeft64(ret, ((64 - ((bytes$1.$length << 24 >>> 24) * 8 << 24 >>> 24) << 24 >>> 24)));
		ret = $shiftRightInt64(ret, ((64 - ((bytes$1.$length << 24 >>> 24) * 8 << 24 >>> 24) << 24 >>> 24)));
		return [ret, err];
	};
	parseInt32 = function(bytes$1) {
		var _tuple, ret64, err, x$3, x$4;
		_tuple = parseInt64(bytes$1); ret64 = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [0, err];
		}
		if (!((x$3 = new $Int64(0, ((ret64.$low + ((ret64.$high >> 31) * 4294967296)) >> 0)), (ret64.$high === x$3.$high && ret64.$low === x$3.$low)))) {
			return [0, (x$4 = new StructuralError.Ptr("integer too large"), new x$4.constructor.Struct(x$4))];
		}
		return [((ret64.$low + ((ret64.$high >> 31) * 4294967296)) >> 0), $ifaceNil];
	};
	parseBigInt = function(bytes$1) {
		var ret, notBytes, _ref, _i, i;
		ret = new big.Int.Ptr();
		if (bytes$1.$length > 0 && (((((0 < 0 || 0 >= bytes$1.$length) ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + 0]) & 128) >>> 0) === 128)) {
			notBytes = ($sliceType($Uint8)).make(bytes$1.$length);
			_ref = notBytes;
			_i = 0;
			while (_i < _ref.$length) {
				i = _i;
				(i < 0 || i >= notBytes.$length) ? $throwRuntimeError("index out of range") : notBytes.$array[notBytes.$offset + i] = ~((i < 0 || i >= bytes$1.$length) ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + i]) << 24 >>> 24;
				_i++;
			}
			ret.SetBytes(notBytes);
			ret.Add(ret, bigOne);
			ret.Neg(ret);
			return ret;
		}
		ret.SetBytes(bytes$1);
		return ret;
	};
	BitString.Ptr.prototype.At = function(i) {
		var b, _q, x$3, _r, y, y$1, x$4;
		b = new BitString.Ptr(); $copy(b, this, BitString);
		if (i < 0 || i >= b.BitLength) {
			return 0;
		}
		x$3 = (_q = i / 8, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		y = 7 - ((_r = i % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >>> 0) >>> 0;
		return (((y$1 = y, y$1 < 32 ? ((x$4 = b.Bytes, ((x$3 < 0 || x$3 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$3])) >>> y$1) : 0) << 24 >>> 24) >> 0) & 1;
	};
	BitString.prototype.At = function(i) { return this.$val.At(i); };
	BitString.Ptr.prototype.RightAlign = function() {
		var b, _r, shift, a, y, x$3, i, y$1, x$4, x$5, _lhs, _index, y$2, x$6;
		b = new BitString.Ptr(); $copy(b, this, BitString);
		shift = ((8 - ((_r = b.BitLength % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero"))) >> 0) >>> 0);
		if ((shift === 8) || (b.Bytes.$length === 0)) {
			return b.Bytes;
		}
		a = ($sliceType($Uint8)).make(b.Bytes.$length);
		(0 < 0 || 0 >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + 0] = (y = shift, y < 32 ? ((x$3 = b.Bytes, ((0 < 0 || 0 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])) >>> y) : 0) << 24 >>> 24;
		i = 1;
		while (i < b.Bytes.$length) {
			(i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = (y$1 = ((8 - shift >>> 0)), y$1 < 32 ? ((x$4 = b.Bytes, x$5 = i - 1 >> 0, ((x$5 < 0 || x$5 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + x$5])) << y$1) : 0) << 24 >>> 24;
			_lhs = a; _index = i; (_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index] = (((_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index]) | (((y$2 = shift, y$2 < 32 ? ((x$6 = b.Bytes, ((i < 0 || i >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + i])) >>> y$2) : 0) << 24 >>> 24))) >>> 0;
			i = i + (1) >> 0;
		}
		return a;
	};
	BitString.prototype.RightAlign = function() { return this.$val.RightAlign(); };
	parseBitString = function(bytes$1) {
		var ret = new BitString.Ptr(), err = $ifaceNil, x$3, paddingBits, x$4, y, x$5, x$6;
		if (bytes$1.$length === 0) {
			err = (x$3 = new SyntaxError.Ptr("zero length BIT STRING"), new x$3.constructor.Struct(x$3));
			return [ret, err];
		}
		paddingBits = (((0 < 0 || 0 >= bytes$1.$length) ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + 0]) >> 0);
		if (paddingBits > 7 || (bytes$1.$length === 1) && paddingBits > 0 || !(((((x$4 = bytes$1.$length - 1 >> 0, ((x$4 < 0 || x$4 >= bytes$1.$length) ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + x$4])) & (((((y = ((0 < 0 || 0 >= bytes$1.$length) ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + 0]), y < 32 ? (1 << y) : 0) << 24 >>> 24)) - 1 << 24 >>> 24))) >>> 0) === 0))) {
			err = (x$5 = new SyntaxError.Ptr("invalid padding bits in BIT STRING"), new x$5.constructor.Struct(x$5));
			return [ret, err];
		}
		ret.BitLength = (x$6 = (bytes$1.$length - 1 >> 0), (((x$6 >>> 16 << 16) * 8 >> 0) + (x$6 << 16 >>> 16) * 8) >> 0) - paddingBits >> 0;
		ret.Bytes = $subslice(bytes$1, 1);
		return [ret, err];
	};
	ObjectIdentifier.prototype.Equal = function(other) {
		var oi, i;
		oi = this;
		if (!((oi.$length === other.$length))) {
			return false;
		}
		i = 0;
		while (i < oi.$length) {
			if (!((((i < 0 || i >= oi.$length) ? $throwRuntimeError("index out of range") : oi.$array[oi.$offset + i]) === ((i < 0 || i >= other.$length) ? $throwRuntimeError("index out of range") : other.$array[other.$offset + i])))) {
				return false;
			}
			i = i + (1) >> 0;
		}
		return true;
	};
	$ptrType(ObjectIdentifier).prototype.Equal = function(other) { return this.$get().Equal(other); };
	ObjectIdentifier.prototype.String = function() {
		var oi, s, _ref, _i, i, v;
		oi = this;
		s = "";
		_ref = oi;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (i > 0) {
				s = s + (".");
			}
			s = s + (strconv.Itoa(v));
			_i++;
		}
		return s;
	};
	$ptrType(ObjectIdentifier).prototype.String = function() { return this.$get().String(); };
	parseObjectIdentifier = function(bytes$1) {
		var s = ($sliceType($Int)).nil, err = $ifaceNil, x$3, _tuple, v, offset, _q, _r, i, _tuple$1;
		if (bytes$1.$length === 0) {
			err = (x$3 = new SyntaxError.Ptr("zero length OBJECT IDENTIFIER"), new x$3.constructor.Struct(x$3));
			return [s, err];
		}
		s = ($sliceType($Int)).make((bytes$1.$length + 1 >> 0));
		_tuple = parseBase128Int(bytes$1, 0); v = _tuple[0]; offset = _tuple[1]; err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [s, err];
		}
		if (v < 80) {
			(0 < 0 || 0 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0] = (_q = v / 40, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			(1 < 0 || 1 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 1] = (_r = v % 40, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		} else {
			(0 < 0 || 0 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 0] = 2;
			(1 < 0 || 1 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + 1] = v - 80 >> 0;
		}
		i = 2;
		while (offset < bytes$1.$length) {
			_tuple$1 = parseBase128Int(bytes$1, offset); v = _tuple$1[0]; offset = _tuple$1[1]; err = _tuple$1[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [s, err];
			}
			(i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i] = v;
			i = i + (1) >> 0;
		}
		s = $subslice(s, 0, i);
		return [s, err];
	};
	parseBase128Int = function(bytes$1, initOffset) {
		var ret = 0, offset = 0, err = $ifaceNil, shifted, x$3, y, b, x$4;
		offset = initOffset;
		shifted = 0;
		while (offset < bytes$1.$length) {
			if (shifted > 4) {
				err = (x$3 = new StructuralError.Ptr("base 128 integer too large"), new x$3.constructor.Struct(x$3));
				return [ret, offset, err];
			}
			ret = (y = (7), y < 32 ? (ret << y) : 0) >> 0;
			b = ((offset < 0 || offset >= bytes$1.$length) ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + offset]);
			ret = ret | ((((b & 127) >>> 0) >> 0));
			offset = offset + (1) >> 0;
			if (((b & 128) >>> 0) === 0) {
				return [ret, offset, err];
			}
			shifted = shifted + (1) >> 0;
		}
		err = (x$4 = new SyntaxError.Ptr("truncated base 128 integer"), new x$4.constructor.Struct(x$4));
		return [ret, offset, err];
	};
	parseUTCTime = function(bytes$1) {
		var ret = new time.Time.Ptr(), err = $ifaceNil, s, _tuple, _tuple$1;
		s = $bytesToString(bytes$1);
		_tuple = time.Parse("0601021504Z0700", s); $copy(ret, _tuple[0], time.Time); err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tuple$1 = time.Parse("060102150405Z0700", s); $copy(ret, _tuple$1[0], time.Time); err = _tuple$1[1];
		}
		if ($interfaceIsEqual(err, $ifaceNil) && ret.Year() >= 2050) {
			$copy(ret, ret.AddDate(-100, 0, 0), time.Time);
		}
		return [ret, err];
	};
	parseGeneralizedTime = function(bytes$1) {
		var ret = new time.Time.Ptr(), err = $ifaceNil, _tuple;
		_tuple = time.Parse("20060102150405Z0700", $bytesToString(bytes$1)); $copy(ret, _tuple[0], time.Time); err = _tuple[1];
		return [ret, err];
	};
	parsePrintableString = function(bytes$1) {
		var ret = "", err = $ifaceNil, _ref, _i, b, x$3;
		_ref = bytes$1;
		_i = 0;
		while (_i < _ref.$length) {
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!isPrintable(b)) {
				err = (x$3 = new SyntaxError.Ptr("PrintableString contains invalid character"), new x$3.constructor.Struct(x$3));
				return [ret, err];
			}
			_i++;
		}
		ret = $bytesToString(bytes$1);
		return [ret, err];
	};
	isPrintable = function(b) {
		return 97 <= b && b <= 122 || 65 <= b && b <= 90 || 48 <= b && b <= 57 || 39 <= b && b <= 41 || 43 <= b && b <= 47 || (b === 32) || (b === 58) || (b === 61) || (b === 63) || (b === 42);
	};
	parseIA5String = function(bytes$1) {
		var ret = "", err = $ifaceNil, _ref, _i, b, x$3;
		_ref = bytes$1;
		_i = 0;
		while (_i < _ref.$length) {
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (b >= 128) {
				err = (x$3 = new SyntaxError.Ptr("IA5String contains invalid character"), new x$3.constructor.Struct(x$3));
				return [ret, err];
			}
			_i++;
		}
		ret = $bytesToString(bytes$1);
		return [ret, err];
	};
	parseT61String = function(bytes$1) {
		var ret = "", err = $ifaceNil, _tmp, _tmp$1;
		_tmp = $bytesToString(bytes$1); _tmp$1 = $ifaceNil; ret = _tmp; err = _tmp$1;
		return [ret, err];
	};
	parseUTF8String = function(bytes$1) {
		var ret = "", err = $ifaceNil, _tmp, _tmp$1;
		_tmp = $bytesToString(bytes$1); _tmp$1 = $ifaceNil; ret = _tmp; err = _tmp$1;
		return [ret, err];
	};
	parseTagAndLength = function(bytes$1, initOffset) {
		var ret = new tagAndLength.Ptr(), offset = 0, err = $ifaceNil, b, _tuple, x$3, numBytes, x$4, i, x$5, x$6, y, x$7;
		offset = initOffset;
		b = ((offset < 0 || offset >= bytes$1.$length) ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + offset]);
		offset = offset + (1) >> 0;
		ret.class$0 = ((b >>> 6 << 24 >>> 24) >> 0);
		ret.isCompound = ((b & 32) >>> 0) === 32;
		ret.tag = (((b & 31) >>> 0) >> 0);
		if (ret.tag === 31) {
			_tuple = parseBase128Int(bytes$1, offset); ret.tag = _tuple[0]; offset = _tuple[1]; err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [ret, offset, err];
			}
		}
		if (offset >= bytes$1.$length) {
			err = (x$3 = new SyntaxError.Ptr("truncated tag or length"), new x$3.constructor.Struct(x$3));
			return [ret, offset, err];
		}
		b = ((offset < 0 || offset >= bytes$1.$length) ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + offset]);
		offset = offset + (1) >> 0;
		if (((b & 128) >>> 0) === 0) {
			ret.length = (((b & 127) >>> 0) >> 0);
		} else {
			numBytes = (((b & 127) >>> 0) >> 0);
			if (numBytes === 0) {
				err = (x$4 = new SyntaxError.Ptr("indefinite length found (not DER)"), new x$4.constructor.Struct(x$4));
				return [ret, offset, err];
			}
			ret.length = 0;
			i = 0;
			while (i < numBytes) {
				if (offset >= bytes$1.$length) {
					err = (x$5 = new SyntaxError.Ptr("truncated tag or length"), new x$5.constructor.Struct(x$5));
					return [ret, offset, err];
				}
				b = ((offset < 0 || offset >= bytes$1.$length) ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + offset]);
				offset = offset + (1) >> 0;
				if (ret.length >= 8388608) {
					err = (x$6 = new StructuralError.Ptr("length too large"), new x$6.constructor.Struct(x$6));
					return [ret, offset, err];
				}
				ret.length = (y = (8), y < 32 ? (ret.length << y) : 0) >> 0;
				ret.length = ret.length | ((b >> 0));
				if (ret.length === 0) {
					err = (x$7 = new StructuralError.Ptr("superfluous leading zeros in length"), new x$7.constructor.Struct(x$7));
					return [ret, offset, err];
				}
				i = i + (1) >> 0;
			}
		}
		return [ret, offset, err];
	};
	parseSequenceOf = function(bytes$1, sliceType, elemType) {
		var ret = new reflect.Value.Ptr(), err = $ifaceNil, _tuple, expectedTag, compoundType, ok, x$3, numElements, offset, t, _tuple$1, _ref, x$4, x$5, params, offset$1, i, _tuple$2;
		_tuple = getUniversalType(elemType); expectedTag = _tuple[0]; compoundType = _tuple[1]; ok = _tuple[2];
		if (!ok) {
			err = (x$3 = new StructuralError.Ptr("unknown Go type for slice"), new x$3.constructor.Struct(x$3));
			return [ret, err];
		}
		numElements = 0;
		offset = 0;
		while (offset < bytes$1.$length) {
			t = new tagAndLength.Ptr(); $copy(t, new tagAndLength.Ptr(), tagAndLength);
			_tuple$1 = parseTagAndLength(bytes$1, offset); $copy(t, _tuple$1[0], tagAndLength); offset = _tuple$1[1]; err = _tuple$1[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [ret, err];
			}
			_ref = t.tag;
			if (_ref === 22 || _ref === 27 || _ref === 20 || _ref === 12) {
				t.tag = 19;
			} else if (_ref === 24 || _ref === 23) {
				t.tag = 23;
			}
			if (!((t.class$0 === 0)) || !(t.isCompound === compoundType) || !((t.tag === expectedTag))) {
				err = (x$4 = new StructuralError.Ptr("sequence tag mismatch"), new x$4.constructor.Struct(x$4));
				return [ret, err];
			}
			if (invalidLength(offset, t.length, bytes$1.$length)) {
				err = (x$5 = new SyntaxError.Ptr("truncated sequence"), new x$5.constructor.Struct(x$5));
				return [ret, err];
			}
			offset = offset + (t.length) >> 0;
			numElements = numElements + (1) >> 0;
		}
		$copy(ret, reflect.MakeSlice(sliceType, numElements, numElements), reflect.Value);
		params = new fieldParameters.Ptr(false, false, false, ($ptrType($Int64)).nil, ($ptrType($Int)).nil, 0, false, false);
		offset$1 = 0;
		i = 0;
		while (i < numElements) {
			_tuple$2 = parseField($clone(ret.Index(i), reflect.Value), bytes$1, offset$1, $clone(params, fieldParameters)); offset$1 = _tuple$2[0]; err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [ret, err];
			}
			i = i + (1) >> 0;
		}
		return [ret, err];
	};
	invalidLength = function(offset, length, sliceLength) {
		return (offset + length >> 0) < offset || (offset + length >> 0) > sliceLength;
	};
	parseField = function(v, bytes$1, initOffset, params) {
		var offset = 0, err = $ifaceNil, fieldType, x$3, t, _tuple, x$4, result, ifaceType, t$1, _tuple$1, x$5, result$1, innerBytes, _ref, _tuple$2, _tuple$3, _tuple$4, _tuple$5, _tuple$6, _tuple$7, _tuple$8, _tuple$9, _tuple$10, universalTag, compoundType, ok1, x$6, _tuple$11, t$2, expectedClass, _tuple$12, x$7, ok, x$8, _ref$1, expectedClass$1, expectedTag, ok$1, x$9, x$10, innerBytes$1, _ref$2, _tuple$13, newSlice, err1, _tuple$14, bs, err1$1, time$1, err1$2, _tuple$15, _tuple$16, _tuple$17, parsedInt, err1$3, parsedInt$1, val, _ref$3, _tuple$18, parsedBool, err1$4, _tuple$19, parsedInt$2, err1$5, _tuple$20, parsedInt$3, err1$6, structType, bytes$2, innerOffset, i, field, _tuple$21, sliceType, _tuple$22, newSlice$1, err1$7, v$1, _ref$4, _tuple$23, _tuple$24, _tuple$25, _tuple$26, _tuple$27, x$11, x$12;
		offset = initOffset;
		fieldType = v.Type();
		if (offset === bytes$1.$length) {
			if (!setDefaultValue($clone(v, reflect.Value), $clone(params, fieldParameters))) {
				err = (x$3 = new SyntaxError.Ptr("sequence truncated"), new x$3.constructor.Struct(x$3));
			}
			return [offset, err];
		}
		if ($interfaceIsEqual(fieldType, rawValueType)) {
			t = new tagAndLength.Ptr(); $copy(t, new tagAndLength.Ptr(), tagAndLength);
			_tuple = parseTagAndLength(bytes$1, offset); $copy(t, _tuple[0], tagAndLength); offset = _tuple[1]; err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [offset, err];
			}
			if (invalidLength(offset, t.length, bytes$1.$length)) {
				err = (x$4 = new SyntaxError.Ptr("data truncated"), new x$4.constructor.Struct(x$4));
				return [offset, err];
			}
			result = new RawValue.Ptr(t.class$0, t.tag, t.isCompound, $subslice(bytes$1, offset, (offset + t.length >> 0)), $subslice(bytes$1, initOffset, (offset + t.length >> 0)));
			offset = offset + (t.length) >> 0;
			v.Set($clone(reflect.ValueOf(new result.constructor.Struct(result)), reflect.Value));
			return [offset, err];
		}
		ifaceType = fieldType;
		if ((ifaceType.Kind() === 20) && (ifaceType.NumMethod() === 0)) {
			t$1 = new tagAndLength.Ptr(); $copy(t$1, new tagAndLength.Ptr(), tagAndLength);
			_tuple$1 = parseTagAndLength(bytes$1, offset); $copy(t$1, _tuple$1[0], tagAndLength); offset = _tuple$1[1]; err = _tuple$1[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [offset, err];
			}
			if (invalidLength(offset, t$1.length, bytes$1.$length)) {
				err = (x$5 = new SyntaxError.Ptr("data truncated"), new x$5.constructor.Struct(x$5));
				return [offset, err];
			}
			result$1 = $ifaceNil;
			if (!t$1.isCompound && (t$1.class$0 === 0)) {
				innerBytes = $subslice(bytes$1, offset, (offset + t$1.length >> 0));
				_ref = t$1.tag;
				if (_ref === 19) {
					_tuple$2 = parsePrintableString(innerBytes); result$1 = new $String(_tuple$2[0]); err = _tuple$2[1];
				} else if (_ref === 22) {
					_tuple$3 = parseIA5String(innerBytes); result$1 = new $String(_tuple$3[0]); err = _tuple$3[1];
				} else if (_ref === 20) {
					_tuple$4 = parseT61String(innerBytes); result$1 = new $String(_tuple$4[0]); err = _tuple$4[1];
				} else if (_ref === 12) {
					_tuple$5 = parseUTF8String(innerBytes); result$1 = new $String(_tuple$5[0]); err = _tuple$5[1];
				} else if (_ref === 2) {
					_tuple$6 = parseInt64(innerBytes); result$1 = _tuple$6[0]; err = _tuple$6[1];
				} else if (_ref === 3) {
					_tuple$7 = parseBitString(innerBytes); result$1 = new _tuple$7[0].constructor.Struct(_tuple$7[0]); err = _tuple$7[1];
				} else if (_ref === 6) {
					_tuple$8 = parseObjectIdentifier(innerBytes); result$1 = _tuple$8[0]; err = _tuple$8[1];
				} else if (_ref === 23) {
					_tuple$9 = parseUTCTime(innerBytes); result$1 = new _tuple$9[0].constructor.Struct(_tuple$9[0]); err = _tuple$9[1];
				} else if (_ref === 4) {
					result$1 = innerBytes;
				} else {
				}
			}
			offset = offset + (t$1.length) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [offset, err];
			}
			if (!($interfaceIsEqual(result$1, $ifaceNil))) {
				v.Set($clone(reflect.ValueOf(result$1), reflect.Value));
			}
			return [offset, err];
		}
		_tuple$10 = getUniversalType(fieldType); universalTag = _tuple$10[0]; compoundType = _tuple$10[1]; ok1 = _tuple$10[2];
		if (!ok1) {
			err = (x$6 = new StructuralError.Ptr(fmt.Sprintf("unknown Go type: %v", new ($sliceType($emptyInterface))([fieldType]))), new x$6.constructor.Struct(x$6));
			return [offset, err];
		}
		_tuple$11 = parseTagAndLength(bytes$1, offset); t$2 = new tagAndLength.Ptr(); $copy(t$2, _tuple$11[0], tagAndLength); offset = _tuple$11[1]; err = _tuple$11[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [offset, err];
		}
		if (params.explicit) {
			expectedClass = 2;
			if (params.application) {
				expectedClass = 1;
			}
			if ((t$2.class$0 === expectedClass) && (t$2.tag === params.tag.$get()) && ((t$2.length === 0) || t$2.isCompound)) {
				if (t$2.length > 0) {
					_tuple$12 = parseTagAndLength(bytes$1, offset); $copy(t$2, _tuple$12[0], tagAndLength); offset = _tuple$12[1]; err = _tuple$12[2];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						return [offset, err];
					}
				} else {
					if (!($interfaceIsEqual(fieldType, flagType))) {
						err = (x$7 = new StructuralError.Ptr("zero length explicit tag was not an asn1.Flag"), new x$7.constructor.Struct(x$7));
						return [offset, err];
					}
					v.SetBool(true);
					return [offset, err];
				}
			} else {
				ok = setDefaultValue($clone(v, reflect.Value), $clone(params, fieldParameters));
				if (ok) {
					offset = initOffset;
				} else {
					err = (x$8 = new StructuralError.Ptr("explicitly tagged member didn't match"), new x$8.constructor.Struct(x$8));
				}
				return [offset, err];
			}
		}
		if (universalTag === 19) {
			_ref$1 = t$2.tag;
			if (_ref$1 === 22 || _ref$1 === 27 || _ref$1 === 20 || _ref$1 === 12) {
				universalTag = t$2.tag;
			}
		}
		if ((universalTag === 23) && (t$2.tag === 24)) {
			universalTag = 24;
		}
		if (params.set) {
			universalTag = 17;
		}
		expectedClass$1 = 0;
		expectedTag = universalTag;
		if (!params.explicit && !($pointerIsEqual(params.tag, ($ptrType($Int)).nil))) {
			expectedClass$1 = 2;
			expectedTag = params.tag.$get();
		}
		if (!params.explicit && params.application && !($pointerIsEqual(params.tag, ($ptrType($Int)).nil))) {
			expectedClass$1 = 1;
			expectedTag = params.tag.$get();
		}
		if (!((t$2.class$0 === expectedClass$1)) || !((t$2.tag === expectedTag)) || !(t$2.isCompound === compoundType)) {
			ok$1 = setDefaultValue($clone(v, reflect.Value), $clone(params, fieldParameters));
			if (ok$1) {
				offset = initOffset;
			} else {
				err = (x$9 = new StructuralError.Ptr(fmt.Sprintf("tags don't match (%d vs %+v) %+v %s @%d", new ($sliceType($emptyInterface))([new $Int(expectedTag), new t$2.constructor.Struct(t$2), new params.constructor.Struct(params), new $String(fieldType.Name()), new $Int(offset)]))), new x$9.constructor.Struct(x$9));
			}
			return [offset, err];
		}
		if (invalidLength(offset, t$2.length, bytes$1.$length)) {
			err = (x$10 = new SyntaxError.Ptr("data truncated"), new x$10.constructor.Struct(x$10));
			return [offset, err];
		}
		innerBytes$1 = $subslice(bytes$1, offset, (offset + t$2.length >> 0));
		offset = offset + (t$2.length) >> 0;
		_ref$2 = fieldType;
		if ($interfaceIsEqual(_ref$2, objectIdentifierType)) {
			_tuple$13 = parseObjectIdentifier(innerBytes$1); newSlice = _tuple$13[0]; err1 = _tuple$13[1];
			v.Set($clone(reflect.MakeSlice(v.Type(), newSlice.$length, newSlice.$length), reflect.Value));
			if ($interfaceIsEqual(err1, $ifaceNil)) {
				reflect.Copy($clone(v, reflect.Value), $clone(reflect.ValueOf(newSlice), reflect.Value));
			}
			err = err1;
			return [offset, err];
		} else if ($interfaceIsEqual(_ref$2, bitStringType)) {
			_tuple$14 = parseBitString(innerBytes$1); bs = new BitString.Ptr(); $copy(bs, _tuple$14[0], BitString); err1$1 = _tuple$14[1];
			if ($interfaceIsEqual(err1$1, $ifaceNil)) {
				v.Set($clone(reflect.ValueOf(new bs.constructor.Struct(bs)), reflect.Value));
			}
			err = err1$1;
			return [offset, err];
		} else if ($interfaceIsEqual(_ref$2, timeType)) {
			time$1 = new time.Time.Ptr(); $copy(time$1, new time.Time.Ptr(), time.Time);
			err1$2 = $ifaceNil;
			if (universalTag === 23) {
				_tuple$15 = parseUTCTime(innerBytes$1); $copy(time$1, _tuple$15[0], time.Time); err1$2 = _tuple$15[1];
			} else {
				_tuple$16 = parseGeneralizedTime(innerBytes$1); $copy(time$1, _tuple$16[0], time.Time); err1$2 = _tuple$16[1];
			}
			if ($interfaceIsEqual(err1$2, $ifaceNil)) {
				v.Set($clone(reflect.ValueOf(new time$1.constructor.Struct(time$1)), reflect.Value));
			}
			err = err1$2;
			return [offset, err];
		} else if ($interfaceIsEqual(_ref$2, enumeratedType)) {
			_tuple$17 = parseInt32(innerBytes$1); parsedInt = _tuple$17[0]; err1$3 = _tuple$17[1];
			if ($interfaceIsEqual(err1$3, $ifaceNil)) {
				v.SetInt(new $Int64(0, parsedInt));
			}
			err = err1$3;
			return [offset, err];
		} else if ($interfaceIsEqual(_ref$2, flagType)) {
			v.SetBool(true);
			return [offset, err];
		} else if ($interfaceIsEqual(_ref$2, bigIntType)) {
			parsedInt$1 = parseBigInt(innerBytes$1);
			v.Set($clone(reflect.ValueOf(parsedInt$1), reflect.Value));
			return [offset, err];
		}
		val = new reflect.Value.Ptr(); $copy(val, v, reflect.Value);
		_ref$3 = val.Kind();
		if (_ref$3 === 1) {
			_tuple$18 = parseBool(innerBytes$1); parsedBool = _tuple$18[0]; err1$4 = _tuple$18[1];
			if ($interfaceIsEqual(err1$4, $ifaceNil)) {
				val.SetBool(parsedBool);
			}
			err = err1$4;
			return [offset, err];
		} else if (_ref$3 === 2 || _ref$3 === 5 || _ref$3 === 6) {
			if (val.Type().Size() === 4) {
				_tuple$19 = parseInt32(innerBytes$1); parsedInt$2 = _tuple$19[0]; err1$5 = _tuple$19[1];
				if ($interfaceIsEqual(err1$5, $ifaceNil)) {
					val.SetInt(new $Int64(0, parsedInt$2));
				}
				err = err1$5;
			} else {
				_tuple$20 = parseInt64(innerBytes$1); parsedInt$3 = _tuple$20[0]; err1$6 = _tuple$20[1];
				if ($interfaceIsEqual(err1$6, $ifaceNil)) {
					val.SetInt(parsedInt$3);
				}
				err = err1$6;
			}
			return [offset, err];
		} else if (_ref$3 === 25) {
			structType = fieldType;
			if (structType.NumField() > 0 && $interfaceIsEqual(structType.Field(0).Type, rawContentsType)) {
				bytes$2 = $subslice(bytes$1, initOffset, offset);
				val.Field(0).Set($clone(reflect.ValueOf($subslice(new RawContent(bytes$2.$array), bytes$2.$offset, bytes$2.$offset + bytes$2.$length)), reflect.Value));
			}
			innerOffset = 0;
			i = 0;
			while (i < structType.NumField()) {
				field = new reflect.StructField.Ptr(); $copy(field, structType.Field(i), reflect.StructField);
				if ((i === 0) && $interfaceIsEqual(field.Type, rawContentsType)) {
					i = i + (1) >> 0;
					continue;
				}
				_tuple$21 = parseField($clone(val.Field(i), reflect.Value), innerBytes$1, innerOffset, $clone(parseFieldParameters(new reflect.StructTag(field.Tag).Get("asn1")), fieldParameters)); innerOffset = _tuple$21[0]; err = _tuple$21[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return [offset, err];
				}
				i = i + (1) >> 0;
			}
			return [offset, err];
		} else if (_ref$3 === 23) {
			sliceType = fieldType;
			if (sliceType.Elem().Kind() === 8) {
				val.Set($clone(reflect.MakeSlice(sliceType, innerBytes$1.$length, innerBytes$1.$length), reflect.Value));
				reflect.Copy($clone(val, reflect.Value), $clone(reflect.ValueOf(innerBytes$1), reflect.Value));
				return [offset, err];
			}
			_tuple$22 = parseSequenceOf(innerBytes$1, sliceType, sliceType.Elem()); newSlice$1 = new reflect.Value.Ptr(); $copy(newSlice$1, _tuple$22[0], reflect.Value); err1$7 = _tuple$22[1];
			if ($interfaceIsEqual(err1$7, $ifaceNil)) {
				val.Set($clone(newSlice$1, reflect.Value));
			}
			err = err1$7;
			return [offset, err];
		} else if (_ref$3 === 24) {
			v$1 = "";
			_ref$4 = universalTag;
			if (_ref$4 === 19) {
				_tuple$23 = parsePrintableString(innerBytes$1); v$1 = _tuple$23[0]; err = _tuple$23[1];
			} else if (_ref$4 === 22) {
				_tuple$24 = parseIA5String(innerBytes$1); v$1 = _tuple$24[0]; err = _tuple$24[1];
			} else if (_ref$4 === 20) {
				_tuple$25 = parseT61String(innerBytes$1); v$1 = _tuple$25[0]; err = _tuple$25[1];
			} else if (_ref$4 === 12) {
				_tuple$26 = parseUTF8String(innerBytes$1); v$1 = _tuple$26[0]; err = _tuple$26[1];
			} else if (_ref$4 === 27) {
				_tuple$27 = parseT61String(innerBytes$1); v$1 = _tuple$27[0]; err = _tuple$27[1];
			} else {
				err = (x$11 = new SyntaxError.Ptr(fmt.Sprintf("internal error: unknown string type %d", new ($sliceType($emptyInterface))([new $Int(universalTag)]))), new x$11.constructor.Struct(x$11));
			}
			if ($interfaceIsEqual(err, $ifaceNil)) {
				val.SetString(v$1);
			}
			return [offset, err];
		}
		err = (x$12 = new StructuralError.Ptr("unsupported: " + v.Type().String()), new x$12.constructor.Struct(x$12));
		return [offset, err];
	};
	setDefaultValue = function(v, params) {
		var ok = false, val, _ref;
		if (!params.optional) {
			return ok;
		}
		ok = true;
		if ($pointerIsEqual(params.defaultValue, ($ptrType($Int64)).nil)) {
			return ok;
		}
		val = new reflect.Value.Ptr(); $copy(val, v, reflect.Value);
		_ref = val.Kind();
		if (_ref === 2 || _ref === 3 || _ref === 4 || _ref === 5 || _ref === 6) {
			val.SetInt(params.defaultValue.$get());
		}
		return ok;
	};
	Unmarshal = $pkg.Unmarshal = function(b, val) {
		var rest = ($sliceType($Uint8)).nil, err = $ifaceNil, _tuple;
		_tuple = UnmarshalWithParams(b, val, ""); rest = _tuple[0]; err = _tuple[1];
		return [rest, err];
	};
	UnmarshalWithParams = $pkg.UnmarshalWithParams = function(b, val, params) {
		var rest = ($sliceType($Uint8)).nil, err = $ifaceNil, v, _tuple, offset, _tmp, _tmp$1, _tmp$2, _tmp$3;
		v = new reflect.Value.Ptr(); $copy(v, reflect.ValueOf(val).Elem(), reflect.Value);
		_tuple = parseField($clone(v, reflect.Value), b, 0, $clone(parseFieldParameters(params), fieldParameters)); offset = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = ($sliceType($Uint8)).nil; _tmp$1 = err; rest = _tmp; err = _tmp$1;
			return [rest, err];
		}
		_tmp$2 = $subslice(b, offset); _tmp$3 = $ifaceNil; rest = _tmp$2; err = _tmp$3;
		return [rest, err];
	};
	parseFieldParameters = function(str) {
		var ret = new fieldParameters.Ptr(), _ref, _i, part, _tuple, i, err, _tuple$1, i$1, err$1;
		_ref = strings.Split(str, ",");
		_i = 0;
		while (_i < _ref.$length) {
			part = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (part === "optional") {
				ret.optional = true;
			} else if (part === "explicit") {
				ret.explicit = true;
				if ($pointerIsEqual(ret.tag, ($ptrType($Int)).nil)) {
					ret.tag = $newDataPointer(0, ($ptrType($Int)));
				}
			} else if (part === "ia5") {
				ret.stringType = 22;
			} else if (part === "printable") {
				ret.stringType = 19;
			} else if (part === "utf8") {
				ret.stringType = 12;
			} else if (strings.HasPrefix(part, "default:")) {
				_tuple = strconv.ParseInt(part.substring(8), 10, 64); i = _tuple[0]; err = _tuple[1];
				if ($interfaceIsEqual(err, $ifaceNil)) {
					ret.defaultValue = $newDataPointer(new $Int64(0, 0), ($ptrType($Int64)));
					ret.defaultValue.$set(i);
				}
			} else if (strings.HasPrefix(part, "tag:")) {
				_tuple$1 = strconv.Atoi(part.substring(4)); i$1 = _tuple$1[0]; err$1 = _tuple$1[1];
				if ($interfaceIsEqual(err$1, $ifaceNil)) {
					ret.tag = $newDataPointer(0, ($ptrType($Int)));
					ret.tag.$set(i$1);
				}
			} else if (part === "set") {
				ret.set = true;
			} else if (part === "application") {
				ret.application = true;
				if ($pointerIsEqual(ret.tag, ($ptrType($Int)).nil)) {
					ret.tag = $newDataPointer(0, ($ptrType($Int)));
				}
			} else if (part === "omitempty") {
				ret.omitEmpty = true;
			}
			_i++;
		}
		return ret;
	};
	getUniversalType = function(t) {
		var tagNumber = 0, isCompound = false, ok = false, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14, _ref$1, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$20, _tmp$21, _tmp$22, _tmp$23, _tmp$24, _tmp$25, _tmp$26, _tmp$27, _tmp$28, _tmp$29, _tmp$30, _tmp$31, _tmp$32, _tmp$33, _tmp$34, _tmp$35, _tmp$36, _tmp$37, _tmp$38;
		_ref = t;
		if ($interfaceIsEqual(_ref, objectIdentifierType)) {
			_tmp = 6; _tmp$1 = false; _tmp$2 = true; tagNumber = _tmp; isCompound = _tmp$1; ok = _tmp$2;
			return [tagNumber, isCompound, ok];
		} else if ($interfaceIsEqual(_ref, bitStringType)) {
			_tmp$3 = 3; _tmp$4 = false; _tmp$5 = true; tagNumber = _tmp$3; isCompound = _tmp$4; ok = _tmp$5;
			return [tagNumber, isCompound, ok];
		} else if ($interfaceIsEqual(_ref, timeType)) {
			_tmp$6 = 23; _tmp$7 = false; _tmp$8 = true; tagNumber = _tmp$6; isCompound = _tmp$7; ok = _tmp$8;
			return [tagNumber, isCompound, ok];
		} else if ($interfaceIsEqual(_ref, enumeratedType)) {
			_tmp$9 = 10; _tmp$10 = false; _tmp$11 = true; tagNumber = _tmp$9; isCompound = _tmp$10; ok = _tmp$11;
			return [tagNumber, isCompound, ok];
		} else if ($interfaceIsEqual(_ref, bigIntType)) {
			_tmp$12 = 2; _tmp$13 = false; _tmp$14 = true; tagNumber = _tmp$12; isCompound = _tmp$13; ok = _tmp$14;
			return [tagNumber, isCompound, ok];
		}
		_ref$1 = t.Kind();
		if (_ref$1 === 1) {
			_tmp$15 = 1; _tmp$16 = false; _tmp$17 = true; tagNumber = _tmp$15; isCompound = _tmp$16; ok = _tmp$17;
			return [tagNumber, isCompound, ok];
		} else if (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 6) {
			_tmp$18 = 2; _tmp$19 = false; _tmp$20 = true; tagNumber = _tmp$18; isCompound = _tmp$19; ok = _tmp$20;
			return [tagNumber, isCompound, ok];
		} else if (_ref$1 === 25) {
			_tmp$21 = 16; _tmp$22 = true; _tmp$23 = true; tagNumber = _tmp$21; isCompound = _tmp$22; ok = _tmp$23;
			return [tagNumber, isCompound, ok];
		} else if (_ref$1 === 23) {
			if (t.Elem().Kind() === 8) {
				_tmp$24 = 4; _tmp$25 = false; _tmp$26 = true; tagNumber = _tmp$24; isCompound = _tmp$25; ok = _tmp$26;
				return [tagNumber, isCompound, ok];
			}
			if (strings.HasSuffix(t.Name(), "SET")) {
				_tmp$27 = 17; _tmp$28 = true; _tmp$29 = true; tagNumber = _tmp$27; isCompound = _tmp$28; ok = _tmp$29;
				return [tagNumber, isCompound, ok];
			}
			_tmp$30 = 16; _tmp$31 = true; _tmp$32 = true; tagNumber = _tmp$30; isCompound = _tmp$31; ok = _tmp$32;
			return [tagNumber, isCompound, ok];
		} else if (_ref$1 === 24) {
			_tmp$33 = 19; _tmp$34 = false; _tmp$35 = true; tagNumber = _tmp$33; isCompound = _tmp$34; ok = _tmp$35;
			return [tagNumber, isCompound, ok];
		}
		_tmp$36 = 0; _tmp$37 = false; _tmp$38 = false; tagNumber = _tmp$36; isCompound = _tmp$37; ok = _tmp$38;
		return [tagNumber, isCompound, ok];
	};
	newForkableWriter = function() {
		return new forkableWriter.Ptr(new bytes.Buffer.Ptr(), ($ptrType(forkableWriter)).nil, ($ptrType(forkableWriter)).nil);
	};
	forkableWriter.Ptr.prototype.fork = function() {
		var pre = ($ptrType(forkableWriter)).nil, post = ($ptrType(forkableWriter)).nil, f, _tmp, _tmp$1;
		f = this;
		if (!(f.pre === ($ptrType(forkableWriter)).nil) || !(f.post === ($ptrType(forkableWriter)).nil)) {
			$panic(new $String("have already forked"));
		}
		f.pre = newForkableWriter();
		f.post = newForkableWriter();
		_tmp = f.pre; _tmp$1 = f.post; pre = _tmp; post = _tmp$1;
		return [pre, post];
	};
	forkableWriter.prototype.fork = function() { return this.$val.fork(); };
	forkableWriter.Ptr.prototype.Len = function() {
		var l = 0, f;
		f = this;
		l = l + (f.Buffer.Len()) >> 0;
		if (!(f.pre === ($ptrType(forkableWriter)).nil)) {
			l = l + (f.pre.Len()) >> 0;
		}
		if (!(f.post === ($ptrType(forkableWriter)).nil)) {
			l = l + (f.post.Len()) >> 0;
		}
		return l;
	};
	forkableWriter.prototype.Len = function() { return this.$val.Len(); };
	forkableWriter.Ptr.prototype.writeTo = function(out) {
		var n = 0, err = $ifaceNil, f, _tuple, nn, _tuple$1, _tuple$2;
		f = this;
		_tuple = out.Write(f.Buffer.Bytes()); n = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [n, err];
		}
		nn = 0;
		if (!(f.pre === ($ptrType(forkableWriter)).nil)) {
			_tuple$1 = f.pre.writeTo(out); nn = _tuple$1[0]; err = _tuple$1[1];
			n = n + (nn) >> 0;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [n, err];
			}
		}
		if (!(f.post === ($ptrType(forkableWriter)).nil)) {
			_tuple$2 = f.post.writeTo(out); nn = _tuple$2[0]; err = _tuple$2[1];
			n = n + (nn) >> 0;
		}
		return [n, err];
	};
	forkableWriter.prototype.writeTo = function(out) { return this.$val.writeTo(out); };
	marshalBase128Int = function(out, n) {
		var err = $ifaceNil, l, i, i$1, o;
		if ((n.$high === 0 && n.$low === 0)) {
			err = out.Buffer.WriteByte(0);
			return err;
		}
		l = 0;
		i = n;
		while ((i.$high > 0 || (i.$high === 0 && i.$low > 0))) {
			l = l + (1) >> 0;
			i = $shiftRightInt64(i, (7));
		}
		i$1 = l - 1 >> 0;
		while (i$1 >= 0) {
			o = ($shiftRightInt64(n, (((((i$1 >>> 16 << 16) * 7 >> 0) + (i$1 << 16 >>> 16) * 7) >> 0) >>> 0)).$low << 24 >>> 24);
			o = (o & (127)) >>> 0;
			if (!((i$1 === 0))) {
				o = (o | (128)) >>> 0;
			}
			err = out.Buffer.WriteByte(o);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			i$1 = i$1 - (1) >> 0;
		}
		err = $ifaceNil;
		return err;
	};
	marshalInt64 = function(out, i) {
		var err = $ifaceNil, n, x$3;
		n = int64Length(i);
		while (n > 0) {
			err = out.Buffer.WriteByte(($shiftRightInt64(i, ((x$3 = (n - 1 >> 0), (((x$3 >>> 16 << 16) * 8 >> 0) + (x$3 << 16 >>> 16) * 8) >> 0) >>> 0)).$low << 24 >>> 24));
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			n = n - (1) >> 0;
		}
		err = $ifaceNil;
		return err;
	};
	int64Length = function(i) {
		var numBytes = 0;
		numBytes = 1;
		while ((i.$high > 0 || (i.$high === 0 && i.$low > 127))) {
			numBytes = numBytes + (1) >> 0;
			i = $shiftRightInt64(i, (8));
		}
		while ((i.$high < -1 || (i.$high === -1 && i.$low < 4294967168))) {
			numBytes = numBytes + (1) >> 0;
			i = $shiftRightInt64(i, (8));
		}
		return numBytes;
	};
	marshalBigInt = function(out, n) {
		var err = $ifaceNil, nMinus1, bytes$1, _ref, _i, i, _lhs, _index, _tuple, bytes$2, _tuple$1;
		if (n.Sign() < 0) {
			nMinus1 = new big.Int.Ptr().Neg(n);
			nMinus1.Sub(nMinus1, bigOne);
			bytes$1 = nMinus1.Bytes();
			_ref = bytes$1;
			_i = 0;
			while (_i < _ref.$length) {
				i = _i;
				_lhs = bytes$1; _index = i; (_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index] = (((_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index]) ^ (255)) << 24 >>> 24;
				_i++;
			}
			if ((bytes$1.$length === 0) || (((((0 < 0 || 0 >= bytes$1.$length) ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + 0]) & 128) >>> 0) === 0)) {
				err = out.Buffer.WriteByte(255);
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return err;
				}
			}
			_tuple = out.Buffer.Write(bytes$1); err = _tuple[1];
		} else if (n.Sign() === 0) {
			err = out.Buffer.WriteByte(0);
		} else {
			bytes$2 = n.Bytes();
			if (bytes$2.$length > 0 && !((((((0 < 0 || 0 >= bytes$2.$length) ? $throwRuntimeError("index out of range") : bytes$2.$array[bytes$2.$offset + 0]) & 128) >>> 0) === 0))) {
				err = out.Buffer.WriteByte(0);
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return err;
				}
			}
			_tuple$1 = out.Buffer.Write(bytes$2); err = _tuple$1[1];
		}
		return err;
	};
	marshalLength = function(out, i) {
		var err = $ifaceNil, n, x$3;
		n = lengthLength(i);
		while (n > 0) {
			err = out.Buffer.WriteByte((((i >> $min(((x$3 = (n - 1 >> 0), (((x$3 >>> 16 << 16) * 8 >> 0) + (x$3 << 16 >>> 16) * 8) >> 0) >>> 0), 31)) >> 0) << 24 >>> 24));
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			n = n - (1) >> 0;
		}
		err = $ifaceNil;
		return err;
	};
	lengthLength = function(i) {
		var numBytes = 0;
		numBytes = 1;
		while (i > 255) {
			numBytes = numBytes + (1) >> 0;
			i = (i >> $min((8), 31)) >> 0;
		}
		return numBytes;
	};
	marshalTagAndLength = function(out, t) {
		var err = $ifaceNil, b, l;
		b = (t.class$0 << 24 >>> 24) << 6 << 24 >>> 24;
		if (t.isCompound) {
			b = (b | (32)) >>> 0;
		}
		if (t.tag >= 31) {
			b = (b | (31)) >>> 0;
			err = out.Buffer.WriteByte(b);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			err = marshalBase128Int(out, new $Int64(0, t.tag));
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
		} else {
			b = (b | ((t.tag << 24 >>> 24))) >>> 0;
			err = out.Buffer.WriteByte(b);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
		}
		if (t.length >= 128) {
			l = lengthLength(t.length);
			err = out.Buffer.WriteByte((128 | (l << 24 >>> 24)) >>> 0);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			err = marshalLength(out, t.length);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
		} else {
			err = out.Buffer.WriteByte((t.length << 24 >>> 24));
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
		}
		err = $ifaceNil;
		return err;
	};
	marshalBitString = function(out, b) {
		var err = $ifaceNil, _r, _r$1, paddingBits, _tuple;
		paddingBits = ((_r = ((8 - (_r$1 = b.BitLength % 8, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) >> 0)) % 8, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24);
		err = out.Buffer.WriteByte(paddingBits);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_tuple = out.Buffer.Write(b.Bytes); err = _tuple[1];
		return err;
	};
	marshalObjectIdentifier = function(out, oid) {
		var err = $ifaceNil, x$3, x$4, i;
		if (oid.$length < 2 || ((0 < 0 || 0 >= oid.$length) ? $throwRuntimeError("index out of range") : oid.$array[oid.$offset + 0]) > 2 || (((0 < 0 || 0 >= oid.$length) ? $throwRuntimeError("index out of range") : oid.$array[oid.$offset + 0]) < 2 && ((1 < 0 || 1 >= oid.$length) ? $throwRuntimeError("index out of range") : oid.$array[oid.$offset + 1]) >= 40)) {
			err = (x$3 = new StructuralError.Ptr("invalid object identifier"), new x$3.constructor.Struct(x$3));
			return err;
		}
		err = marshalBase128Int(out, new $Int64(0, ((x$4 = ((0 < 0 || 0 >= oid.$length) ? $throwRuntimeError("index out of range") : oid.$array[oid.$offset + 0]), (((x$4 >>> 16 << 16) * 40 >> 0) + (x$4 << 16 >>> 16) * 40) >> 0) + ((1 < 0 || 1 >= oid.$length) ? $throwRuntimeError("index out of range") : oid.$array[oid.$offset + 1]) >> 0)));
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		i = 2;
		while (i < oid.$length) {
			err = marshalBase128Int(out, new $Int64(0, ((i < 0 || i >= oid.$length) ? $throwRuntimeError("index out of range") : oid.$array[oid.$offset + i])));
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			i = i + (1) >> 0;
		}
		return err;
	};
	marshalPrintableString = function(out, s) {
		var err = $ifaceNil, b, _ref, _i, c, x$3, _tuple;
		b = new ($sliceType($Uint8))($stringToBytes(s));
		_ref = b;
		_i = 0;
		while (_i < _ref.$length) {
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!isPrintable(c)) {
				err = (x$3 = new StructuralError.Ptr("PrintableString contains invalid character"), new x$3.constructor.Struct(x$3));
				return err;
			}
			_i++;
		}
		_tuple = out.Buffer.Write(b); err = _tuple[1];
		return err;
	};
	marshalIA5String = function(out, s) {
		var err = $ifaceNil, b, _ref, _i, c, x$3, _tuple;
		b = new ($sliceType($Uint8))($stringToBytes(s));
		_ref = b;
		_i = 0;
		while (_i < _ref.$length) {
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (c > 127) {
				err = (x$3 = new StructuralError.Ptr("IA5String contains invalid character"), new x$3.constructor.Struct(x$3));
				return err;
			}
			_i++;
		}
		_tuple = out.Buffer.Write(b); err = _tuple[1];
		return err;
	};
	marshalUTF8String = function(out, s) {
		var err = $ifaceNil, _tuple;
		_tuple = out.Buffer.Write(new ($sliceType($Uint8))($stringToBytes(s))); err = _tuple[1];
		return err;
	};
	marshalTwoDigits = function(out, v) {
		var err = $ifaceNil, _r, _q, _r$1;
		err = out.Buffer.WriteByte(((48 + (_r = ((_q = v / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"))) % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >> 0) << 24 >>> 24));
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		err = out.Buffer.WriteByte(((48 + (_r$1 = v % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) >> 0) << 24 >>> 24));
		return err;
	};
	marshalFourDigits = function(out, v) {
		var err = $ifaceNil, bytes$1, _ref, _i, i, _r, x$3, _q, _tuple;
		bytes$1 = ($arrayType($Uint8, 4)).zero(); $copy(bytes$1, ($arrayType($Uint8, 4)).zero(), ($arrayType($Uint8, 4)));
		_ref = bytes$1;
		_i = 0;
		while (_i < 4) {
			i = _i;
			(x$3 = 3 - i >> 0, (x$3 < 0 || x$3 >= bytes$1.length) ? $throwRuntimeError("index out of range") : bytes$1[x$3] = 48 + ((_r = v % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) << 24 >>> 24) << 24 >>> 24);
			v = (_q = v / (10), (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
			_i++;
		}
		_tuple = out.Buffer.Write(new ($sliceType($Uint8))(bytes$1)); err = _tuple[1];
		return err;
	};
	outsideUTCRange = function(t) {
		var year;
		year = t.Year();
		return year < 1950 || year >= 2050;
	};
	marshalUTCTime = function(out, t) {
		var err = $ifaceNil, year, x$3;
		year = t.Year();
		if (1950 <= year && year < 2000) {
			err = marshalTwoDigits(out, (year - 1900 >> 0));
		} else if (2000 <= year && year < 2050) {
			err = marshalTwoDigits(out, (year - 2000 >> 0));
		} else {
			err = (x$3 = new StructuralError.Ptr("cannot represent time as UTCTime"), new x$3.constructor.Struct(x$3));
			return err;
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		err = marshalTimeCommon(out, $clone(t, time.Time));
		return err;
	};
	marshalGeneralizedTime = function(out, t) {
		var err = $ifaceNil, year, x$3;
		year = t.Year();
		if (year < 0 || year > 9999) {
			err = (x$3 = new StructuralError.Ptr("cannot represent time as GeneralizedTime"), new x$3.constructor.Struct(x$3));
			return err;
		}
		err = marshalFourDigits(out, year);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		err = marshalTimeCommon(out, $clone(t, time.Time));
		return err;
	};
	marshalTimeCommon = function(out, t) {
		var err = $ifaceNil, _tuple, month, day, _tuple$1, hour, min, sec, _tuple$2, offset, _q, _q$1, offsetMinutes, _q$2, _r;
		_tuple = t.Date(); month = _tuple[1]; day = _tuple[2];
		err = marshalTwoDigits(out, (month >> 0));
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		err = marshalTwoDigits(out, day);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_tuple$1 = t.Clock(); hour = _tuple$1[0]; min = _tuple$1[1]; sec = _tuple$1[2];
		err = marshalTwoDigits(out, hour);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		err = marshalTwoDigits(out, min);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		err = marshalTwoDigits(out, sec);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_tuple$2 = t.Zone(); offset = _tuple$2[1];
		if ((_q = offset / 60, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) === 0) {
			err = out.Buffer.WriteByte(90);
			return err;
		} else if (offset > 0) {
			err = out.Buffer.WriteByte(43);
		} else if (offset < 0) {
			err = out.Buffer.WriteByte(45);
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		offsetMinutes = (_q$1 = offset / 60, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
		if (offsetMinutes < 0) {
			offsetMinutes = -offsetMinutes;
		}
		err = marshalTwoDigits(out, (_q$2 = offsetMinutes / 60, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero")));
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		err = marshalTwoDigits(out, (_r = offsetMinutes % 60, _r === _r ? _r : $throwRuntimeError("integer divide by zero")));
		return err;
	};
	stripTagAndLength = function(in$1) {
		var _tuple, offset, err;
		_tuple = parseTagAndLength(in$1, 0); offset = _tuple[1]; err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return in$1;
		}
		return $subslice(in$1, offset);
	};
	marshalBody = function(out, value, params) {
		var err = $ifaceNil, _ref, t, x$3, v, _ref$1, t$1, startingField, s, bytes$1, i, _tuple, i$1, pre, _tuple$1, sliceType, bytes$2, i$2, _tuple$2, fp, i$3, pre$1, _tuple$3, _ref$2, x$4;
		_ref = value.Type();
		if ($interfaceIsEqual(_ref, timeType)) {
			t = new time.Time.Ptr(); $copy(t, $assertType(value.Interface(), time.Time), time.Time);
			if (outsideUTCRange($clone(t, time.Time))) {
				err = marshalGeneralizedTime(out, $clone(t, time.Time));
				return err;
			} else {
				err = marshalUTCTime(out, $clone(t, time.Time));
				return err;
			}
		} else if ($interfaceIsEqual(_ref, bitStringType)) {
			err = marshalBitString(out, $clone($assertType(value.Interface(), BitString), BitString));
			return err;
		} else if ($interfaceIsEqual(_ref, objectIdentifierType)) {
			err = marshalObjectIdentifier(out, (x$3 = $assertType(value.Interface(), ObjectIdentifier), $subslice(new ($sliceType($Int))(x$3.$array), x$3.$offset, x$3.$offset + x$3.$length)));
			return err;
		} else if ($interfaceIsEqual(_ref, bigIntType)) {
			err = marshalBigInt(out, $assertType(value.Interface(), ($ptrType(big.Int))));
			return err;
		}
		v = new reflect.Value.Ptr(); $copy(v, value, reflect.Value);
		_ref$1 = v.Kind();
		if (_ref$1 === 1) {
			if (v.Bool()) {
				err = out.Buffer.WriteByte(255);
				return err;
			} else {
				err = out.Buffer.WriteByte(0);
				return err;
			}
		} else if (_ref$1 === 2 || _ref$1 === 3 || _ref$1 === 4 || _ref$1 === 5 || _ref$1 === 6) {
			err = marshalInt64(out, v.Int());
			return err;
		} else if (_ref$1 === 25) {
			t$1 = v.Type();
			startingField = 0;
			if (t$1.NumField() > 0 && $interfaceIsEqual(t$1.Field(0).Type, rawContentsType)) {
				s = new reflect.Value.Ptr(); $copy(s, v.Field(0), reflect.Value);
				if (s.Len() > 0) {
					bytes$1 = ($sliceType($Uint8)).make(s.Len());
					i = 0;
					while (i < s.Len()) {
						(i < 0 || i >= bytes$1.$length) ? $throwRuntimeError("index out of range") : bytes$1.$array[bytes$1.$offset + i] = (s.Index(i).Uint().$low << 24 >>> 24);
						i = i + (1) >> 0;
					}
					_tuple = out.Buffer.Write(stripTagAndLength(bytes$1)); err = _tuple[1];
					return err;
				} else {
					startingField = 1;
				}
			}
			i$1 = startingField;
			while (i$1 < t$1.NumField()) {
				pre = ($ptrType(forkableWriter)).nil;
				_tuple$1 = out.fork(); pre = _tuple$1[0]; out = _tuple$1[1];
				err = marshalField(pre, $clone(v.Field(i$1), reflect.Value), $clone(parseFieldParameters(new reflect.StructTag(t$1.Field(i$1).Tag).Get("asn1")), fieldParameters));
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return err;
				}
				i$1 = i$1 + (1) >> 0;
			}
			return err;
		} else if (_ref$1 === 23) {
			sliceType = v.Type();
			if (sliceType.Elem().Kind() === 8) {
				bytes$2 = ($sliceType($Uint8)).make(v.Len());
				i$2 = 0;
				while (i$2 < v.Len()) {
					(i$2 < 0 || i$2 >= bytes$2.$length) ? $throwRuntimeError("index out of range") : bytes$2.$array[bytes$2.$offset + i$2] = (v.Index(i$2).Uint().$low << 24 >>> 24);
					i$2 = i$2 + (1) >> 0;
				}
				_tuple$2 = out.Buffer.Write(bytes$2); err = _tuple$2[1];
				return err;
			}
			fp = new fieldParameters.Ptr(); $copy(fp, new fieldParameters.Ptr(), fieldParameters);
			i$3 = 0;
			while (i$3 < v.Len()) {
				pre$1 = ($ptrType(forkableWriter)).nil;
				_tuple$3 = out.fork(); pre$1 = _tuple$3[0]; out = _tuple$3[1];
				err = marshalField(pre$1, $clone(v.Index(i$3), reflect.Value), $clone(fp, fieldParameters));
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return err;
				}
				i$3 = i$3 + (1) >> 0;
			}
			return err;
		} else if (_ref$1 === 24) {
			_ref$2 = params.stringType;
			if (_ref$2 === 22) {
				err = marshalIA5String(out, v.String());
				return err;
			} else if (_ref$2 === 19) {
				err = marshalPrintableString(out, v.String());
				return err;
			} else {
				err = marshalUTF8String(out, v.String());
				return err;
			}
		}
		err = (x$4 = new StructuralError.Ptr("unknown Go type"), new x$4.constructor.Struct(x$4));
		return err;
	};
	marshalField = function(out, v, params) {
		var err = $ifaceNil, rv, _tuple, _tuple$1, _tuple$2, tag, isCompound, ok, x$3, class$1, x$4, _ref, _ref$1, _i, _rune, r, x$5, _tuple$3, tags, body, bodyLen, explicitTag, _tuple$4;
		if ((v.Kind() === 20) && (v.Type().NumMethod() === 0)) {
			err = marshalField(out, $clone(v.Elem(), reflect.Value), $clone(params, fieldParameters));
			return err;
		}
		if ((v.Kind() === 23) && (v.Len() === 0) && params.omitEmpty) {
			return err;
		}
		if (params.optional && reflect.DeepEqual(v.Interface(), reflect.Zero(v.Type()).Interface())) {
			return err;
		}
		if ($interfaceIsEqual(v.Type(), rawValueType)) {
			rv = new RawValue.Ptr(); $copy(rv, $assertType(v.Interface(), RawValue), RawValue);
			if (!((rv.FullBytes.$length === 0))) {
				_tuple = out.Buffer.Write(rv.FullBytes); err = _tuple[1];
			} else {
				err = marshalTagAndLength(out, new tagAndLength.Ptr(rv.Class, rv.Tag, rv.Bytes.$length, rv.IsCompound));
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return err;
				}
				_tuple$1 = out.Buffer.Write(rv.Bytes); err = _tuple$1[1];
			}
			return err;
		}
		_tuple$2 = getUniversalType(v.Type()); tag = _tuple$2[0]; isCompound = _tuple$2[1]; ok = _tuple$2[2];
		if (!ok) {
			err = (x$3 = new StructuralError.Ptr(fmt.Sprintf("unknown Go type: %v", new ($sliceType($emptyInterface))([v.Type()]))), new x$3.constructor.Struct(x$3));
			return err;
		}
		class$1 = 0;
		if (!((params.stringType === 0)) && !((tag === 19))) {
			err = (x$4 = new StructuralError.Ptr("explicit string type given to non-string member"), new x$4.constructor.Struct(x$4));
			return err;
		}
		_ref = tag;
		if (_ref === 19) {
			if (params.stringType === 0) {
				_ref$1 = v.String();
				_i = 0;
				while (_i < _ref$1.length) {
					_rune = $decodeRune(_ref$1, _i);
					r = _rune[0];
					if (r >= 128 || !isPrintable((r << 24 >>> 24))) {
						if (!utf8.ValidString(v.String())) {
							err = errors.New("asn1: string not valid UTF-8");
							return err;
						}
						tag = 12;
						break;
					}
					_i += _rune[1];
				}
			} else {
				tag = params.stringType;
			}
		} else if (_ref === 23) {
			if (outsideUTCRange($clone($assertType(v.Interface(), time.Time), time.Time))) {
				tag = 24;
			}
		}
		if (params.set) {
			if (!((tag === 16))) {
				err = (x$5 = new StructuralError.Ptr("non sequence tagged as set"), new x$5.constructor.Struct(x$5));
				return err;
			}
			tag = 17;
		}
		_tuple$3 = out.fork(); tags = _tuple$3[0]; body = _tuple$3[1];
		err = marshalBody(body, $clone(v, reflect.Value), $clone(params, fieldParameters));
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		bodyLen = body.Len();
		explicitTag = ($ptrType(forkableWriter)).nil;
		if (params.explicit) {
			_tuple$4 = tags.fork(); explicitTag = _tuple$4[0]; tags = _tuple$4[1];
		}
		if (!params.explicit && !($pointerIsEqual(params.tag, ($ptrType($Int)).nil))) {
			tag = params.tag.$get();
			class$1 = 2;
		}
		err = marshalTagAndLength(tags, new tagAndLength.Ptr(class$1, tag, bodyLen, isCompound));
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		if (params.explicit) {
			err = marshalTagAndLength(explicitTag, new tagAndLength.Ptr(2, params.tag.$get(), bodyLen + tags.Len() >> 0, true));
		}
		err = $ifaceNil;
		return err;
	};
	Marshal = $pkg.Marshal = function(val) {
		var out, v, f, err, _tuple;
		out = new bytes.Buffer.Ptr(); $copy(out, new bytes.Buffer.Ptr(), bytes.Buffer);
		v = new reflect.Value.Ptr(); $copy(v, reflect.ValueOf(val), reflect.Value);
		f = newForkableWriter();
		err = marshalField(f, $clone(v, reflect.Value), new fieldParameters.Ptr(false, false, false, ($ptrType($Int64)).nil, ($ptrType($Int)).nil, 0, false, false));
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($sliceType($Uint8)).nil, err];
		}
		_tuple = f.writeTo(out); err = _tuple[1];
		return [out.Bytes(), $ifaceNil];
	};
	$pkg.$init = function() {
		StructuralError.methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		($ptrType(StructuralError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		StructuralError.init([["Msg", "Msg", "", $String, ""]]);
		SyntaxError.methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		($ptrType(SyntaxError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		SyntaxError.init([["Msg", "Msg", "", $String, ""]]);
		BitString.methods = [["At", "At", "", $funcType([$Int], [$Int], false), -1], ["RightAlign", "RightAlign", "", $funcType([], [($sliceType($Uint8))], false), -1]];
		($ptrType(BitString)).methods = [["At", "At", "", $funcType([$Int], [$Int], false), -1], ["RightAlign", "RightAlign", "", $funcType([], [($sliceType($Uint8))], false), -1]];
		BitString.init([["Bytes", "Bytes", "", ($sliceType($Uint8)), ""], ["BitLength", "BitLength", "", $Int, ""]]);
		ObjectIdentifier.methods = [["Equal", "Equal", "", $funcType([ObjectIdentifier], [$Bool], false), -1], ["String", "String", "", $funcType([], [$String], false), -1]];
		($ptrType(ObjectIdentifier)).methods = [["Equal", "Equal", "", $funcType([ObjectIdentifier], [$Bool], false), -1], ["String", "String", "", $funcType([], [$String], false), -1]];
		ObjectIdentifier.init($Int);
		RawValue.init([["Class", "Class", "", $Int, ""], ["Tag", "Tag", "", $Int, ""], ["IsCompound", "IsCompound", "", $Bool, ""], ["Bytes", "Bytes", "", ($sliceType($Uint8)), ""], ["FullBytes", "FullBytes", "", ($sliceType($Uint8)), ""]]);
		RawContent.init($Uint8);
		tagAndLength.init([["class$0", "class", "encoding/asn1", $Int, ""], ["tag", "tag", "encoding/asn1", $Int, ""], ["length", "length", "encoding/asn1", $Int, ""], ["isCompound", "isCompound", "encoding/asn1", $Bool, ""]]);
		fieldParameters.init([["optional", "optional", "encoding/asn1", $Bool, ""], ["explicit", "explicit", "encoding/asn1", $Bool, ""], ["application", "application", "encoding/asn1", $Bool, ""], ["defaultValue", "defaultValue", "encoding/asn1", ($ptrType($Int64)), ""], ["tag", "tag", "encoding/asn1", ($ptrType($Int)), ""], ["stringType", "stringType", "encoding/asn1", $Int, ""], ["set", "set", "encoding/asn1", $Bool, ""], ["omitEmpty", "omitEmpty", "encoding/asn1", $Bool, ""]]);
		forkableWriter.methods = [["Bytes", "Bytes", "", $funcType([], [($sliceType($Uint8))], false), 0], ["Grow", "Grow", "", $funcType([$Int], [], false), 0], ["Next", "Next", "", $funcType([$Int], [($sliceType($Uint8))], false), 0], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0], ["ReadByte", "ReadByte", "", $funcType([], [$Uint8, $error], false), 0], ["ReadBytes", "ReadBytes", "", $funcType([$Uint8], [($sliceType($Uint8)), $error], false), 0], ["ReadFrom", "ReadFrom", "", $funcType([io.Reader], [$Int64, $error], false), 0], ["ReadRune", "ReadRune", "", $funcType([], [$Int32, $Int, $error], false), 0], ["ReadString", "ReadString", "", $funcType([$Uint8], [$String, $error], false), 0], ["Reset", "Reset", "", $funcType([], [], false), 0], ["String", "String", "", $funcType([], [$String], false), 0], ["Truncate", "Truncate", "", $funcType([$Int], [], false), 0], ["UnreadByte", "UnreadByte", "", $funcType([], [$error], false), 0], ["UnreadRune", "UnreadRune", "", $funcType([], [$error], false), 0], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0], ["WriteByte", "WriteByte", "", $funcType([$Uint8], [$error], false), 0], ["WriteRune", "WriteRune", "", $funcType([$Int32], [$Int, $error], false), 0], ["WriteString", "WriteString", "", $funcType([$String], [$Int, $error], false), 0], ["WriteTo", "WriteTo", "", $funcType([io.Writer], [$Int64, $error], false), 0], ["grow", "grow", "bytes", $funcType([$Int], [$Int], false), 0], ["readSlice", "readSlice", "bytes", $funcType([$Uint8], [($sliceType($Uint8)), $error], false), 0]];
		($ptrType(forkableWriter)).methods = [["Bytes", "Bytes", "", $funcType([], [($sliceType($Uint8))], false), 0], ["Grow", "Grow", "", $funcType([$Int], [], false), 0], ["Len", "Len", "", $funcType([], [$Int], false), -1], ["Next", "Next", "", $funcType([$Int], [($sliceType($Uint8))], false), 0], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0], ["ReadByte", "ReadByte", "", $funcType([], [$Uint8, $error], false), 0], ["ReadBytes", "ReadBytes", "", $funcType([$Uint8], [($sliceType($Uint8)), $error], false), 0], ["ReadFrom", "ReadFrom", "", $funcType([io.Reader], [$Int64, $error], false), 0], ["ReadRune", "ReadRune", "", $funcType([], [$Int32, $Int, $error], false), 0], ["ReadString", "ReadString", "", $funcType([$Uint8], [$String, $error], false), 0], ["Reset", "Reset", "", $funcType([], [], false), 0], ["String", "String", "", $funcType([], [$String], false), 0], ["Truncate", "Truncate", "", $funcType([$Int], [], false), 0], ["UnreadByte", "UnreadByte", "", $funcType([], [$error], false), 0], ["UnreadRune", "UnreadRune", "", $funcType([], [$error], false), 0], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0], ["WriteByte", "WriteByte", "", $funcType([$Uint8], [$error], false), 0], ["WriteRune", "WriteRune", "", $funcType([$Int32], [$Int, $error], false), 0], ["WriteString", "WriteString", "", $funcType([$String], [$Int, $error], false), 0], ["WriteTo", "WriteTo", "", $funcType([io.Writer], [$Int64, $error], false), 0], ["grow", "grow", "bytes", $funcType([$Int], [$Int], false), 0], ["readSlice", "readSlice", "bytes", $funcType([$Uint8], [($sliceType($Uint8)), $error], false), 0], ["fork", "fork", "encoding/asn1", $funcType([], [($ptrType(forkableWriter)), ($ptrType(forkableWriter))], false), -1], ["writeTo", "writeTo", "encoding/asn1", $funcType([io.Writer], [$Int, $error], false), -1]];
		forkableWriter.init([["Buffer", "", "", ($ptrType(bytes.Buffer)), ""], ["pre", "pre", "encoding/asn1", ($ptrType(forkableWriter)), ""], ["post", "post", "encoding/asn1", ($ptrType(forkableWriter)), ""]]);
		bigOne = big.NewInt(new $Int64(0, 1));
		bitStringType = reflect.TypeOf((x = new BitString.Ptr(($sliceType($Uint8)).nil, 0), new x.constructor.Struct(x)));
		objectIdentifierType = reflect.TypeOf(new ObjectIdentifier([]));
		enumeratedType = reflect.TypeOf(new Enumerated(0));
		flagType = reflect.TypeOf(new Flag(false));
		timeType = reflect.TypeOf((x$1 = new time.Time.Ptr(new $Int64(0, 0), 0, ($ptrType(time.Location)).nil), new x$1.constructor.Struct(x$1)));
		rawValueType = reflect.TypeOf((x$2 = new RawValue.Ptr(0, 0, false, ($sliceType($Uint8)).nil, ($sliceType($Uint8)).nil), new x$2.constructor.Struct(x$2)));
		rawContentsType = reflect.TypeOf(RawContent.nil);
		bigIntType = reflect.TypeOf(new big.Int.Ptr());
	};
	return $pkg;
})();
$packages["crypto/x509/pkix"] = (function() {
	var $pkg = {}, asn1 = $packages["encoding/asn1"], big = $packages["math/big"], time = $packages["time"], AlgorithmIdentifier, RDNSequence, RelativeDistinguishedNameSET, AttributeTypeAndValue, Extension, Name, CertificateList, TBSCertificateList, RevokedCertificate, oidCountry, oidOrganization, oidOrganizationalUnit, oidCommonName, oidSerialNumber, oidLocality, oidProvince, oidStreetAddress, oidPostalCode, appendRDNs;
	AlgorithmIdentifier = $pkg.AlgorithmIdentifier = $newType(0, "Struct", "pkix.AlgorithmIdentifier", "AlgorithmIdentifier", "crypto/x509/pkix", function(Algorithm_, Parameters_) {
		this.$val = this;
		this.Algorithm = Algorithm_ !== undefined ? Algorithm_ : asn1.ObjectIdentifier.nil;
		this.Parameters = Parameters_ !== undefined ? Parameters_ : new asn1.RawValue.Ptr();
	});
	RDNSequence = $pkg.RDNSequence = $newType(12, "Slice", "pkix.RDNSequence", "RDNSequence", "crypto/x509/pkix", null);
	RelativeDistinguishedNameSET = $pkg.RelativeDistinguishedNameSET = $newType(12, "Slice", "pkix.RelativeDistinguishedNameSET", "RelativeDistinguishedNameSET", "crypto/x509/pkix", null);
	AttributeTypeAndValue = $pkg.AttributeTypeAndValue = $newType(0, "Struct", "pkix.AttributeTypeAndValue", "AttributeTypeAndValue", "crypto/x509/pkix", function(Type_, Value_) {
		this.$val = this;
		this.Type = Type_ !== undefined ? Type_ : asn1.ObjectIdentifier.nil;
		this.Value = Value_ !== undefined ? Value_ : $ifaceNil;
	});
	Extension = $pkg.Extension = $newType(0, "Struct", "pkix.Extension", "Extension", "crypto/x509/pkix", function(Id_, Critical_, Value_) {
		this.$val = this;
		this.Id = Id_ !== undefined ? Id_ : asn1.ObjectIdentifier.nil;
		this.Critical = Critical_ !== undefined ? Critical_ : false;
		this.Value = Value_ !== undefined ? Value_ : ($sliceType($Uint8)).nil;
	});
	Name = $pkg.Name = $newType(0, "Struct", "pkix.Name", "Name", "crypto/x509/pkix", function(Country_, Organization_, OrganizationalUnit_, Locality_, Province_, StreetAddress_, PostalCode_, SerialNumber_, CommonName_, Names_) {
		this.$val = this;
		this.Country = Country_ !== undefined ? Country_ : ($sliceType($String)).nil;
		this.Organization = Organization_ !== undefined ? Organization_ : ($sliceType($String)).nil;
		this.OrganizationalUnit = OrganizationalUnit_ !== undefined ? OrganizationalUnit_ : ($sliceType($String)).nil;
		this.Locality = Locality_ !== undefined ? Locality_ : ($sliceType($String)).nil;
		this.Province = Province_ !== undefined ? Province_ : ($sliceType($String)).nil;
		this.StreetAddress = StreetAddress_ !== undefined ? StreetAddress_ : ($sliceType($String)).nil;
		this.PostalCode = PostalCode_ !== undefined ? PostalCode_ : ($sliceType($String)).nil;
		this.SerialNumber = SerialNumber_ !== undefined ? SerialNumber_ : "";
		this.CommonName = CommonName_ !== undefined ? CommonName_ : "";
		this.Names = Names_ !== undefined ? Names_ : ($sliceType(AttributeTypeAndValue)).nil;
	});
	CertificateList = $pkg.CertificateList = $newType(0, "Struct", "pkix.CertificateList", "CertificateList", "crypto/x509/pkix", function(TBSCertList_, SignatureAlgorithm_, SignatureValue_) {
		this.$val = this;
		this.TBSCertList = TBSCertList_ !== undefined ? TBSCertList_ : new TBSCertificateList.Ptr();
		this.SignatureAlgorithm = SignatureAlgorithm_ !== undefined ? SignatureAlgorithm_ : new AlgorithmIdentifier.Ptr();
		this.SignatureValue = SignatureValue_ !== undefined ? SignatureValue_ : new asn1.BitString.Ptr();
	});
	TBSCertificateList = $pkg.TBSCertificateList = $newType(0, "Struct", "pkix.TBSCertificateList", "TBSCertificateList", "crypto/x509/pkix", function(Raw_, Version_, Signature_, Issuer_, ThisUpdate_, NextUpdate_, RevokedCertificates_, Extensions_) {
		this.$val = this;
		this.Raw = Raw_ !== undefined ? Raw_ : asn1.RawContent.nil;
		this.Version = Version_ !== undefined ? Version_ : 0;
		this.Signature = Signature_ !== undefined ? Signature_ : new AlgorithmIdentifier.Ptr();
		this.Issuer = Issuer_ !== undefined ? Issuer_ : RDNSequence.nil;
		this.ThisUpdate = ThisUpdate_ !== undefined ? ThisUpdate_ : new time.Time.Ptr();
		this.NextUpdate = NextUpdate_ !== undefined ? NextUpdate_ : new time.Time.Ptr();
		this.RevokedCertificates = RevokedCertificates_ !== undefined ? RevokedCertificates_ : ($sliceType(RevokedCertificate)).nil;
		this.Extensions = Extensions_ !== undefined ? Extensions_ : ($sliceType(Extension)).nil;
	});
	RevokedCertificate = $pkg.RevokedCertificate = $newType(0, "Struct", "pkix.RevokedCertificate", "RevokedCertificate", "crypto/x509/pkix", function(SerialNumber_, RevocationTime_, Extensions_) {
		this.$val = this;
		this.SerialNumber = SerialNumber_ !== undefined ? SerialNumber_ : ($ptrType(big.Int)).nil;
		this.RevocationTime = RevocationTime_ !== undefined ? RevocationTime_ : new time.Time.Ptr();
		this.Extensions = Extensions_ !== undefined ? Extensions_ : ($sliceType(Extension)).nil;
	});
	Name.Ptr.prototype.FillFromRDNSequence = function(rdns) {
		var n, _ref, _i, rdn, atv, _tuple, value, ok, t, _ref$1;
		n = this;
		_ref = rdns.$get();
		_i = 0;
		while (_i < _ref.$length) {
			rdn = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (rdn.$length === 0) {
				_i++;
				continue;
			}
			atv = new AttributeTypeAndValue.Ptr(); $copy(atv, ((0 < 0 || 0 >= rdn.$length) ? $throwRuntimeError("index out of range") : rdn.$array[rdn.$offset + 0]), AttributeTypeAndValue);
			n.Names = $append(n.Names, atv);
			_tuple = $assertType(atv.Value, $String, true); value = _tuple[0]; ok = _tuple[1];
			if (!ok) {
				_i++;
				continue;
			}
			t = atv.Type;
			if ((t.$length === 4) && (((0 < 0 || 0 >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + 0]) === 2) && (((1 < 0 || 1 >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + 1]) === 5) && (((2 < 0 || 2 >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + 2]) === 4)) {
				_ref$1 = ((3 < 0 || 3 >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + 3]);
				if (_ref$1 === 3) {
					n.CommonName = value;
				} else if (_ref$1 === 5) {
					n.SerialNumber = value;
				} else if (_ref$1 === 6) {
					n.Country = $append(n.Country, value);
				} else if (_ref$1 === 7) {
					n.Locality = $append(n.Locality, value);
				} else if (_ref$1 === 8) {
					n.Province = $append(n.Province, value);
				} else if (_ref$1 === 9) {
					n.StreetAddress = $append(n.StreetAddress, value);
				} else if (_ref$1 === 10) {
					n.Organization = $append(n.Organization, value);
				} else if (_ref$1 === 11) {
					n.OrganizationalUnit = $append(n.OrganizationalUnit, value);
				} else if (_ref$1 === 17) {
					n.PostalCode = $append(n.PostalCode, value);
				}
			}
			_i++;
		}
	};
	Name.prototype.FillFromRDNSequence = function(rdns) { return this.$val.FillFromRDNSequence(rdns); };
	appendRDNs = function(in$1, values, oid) {
		var s, _ref, _i, i, value;
		if (values.$length === 0) {
			return in$1;
		}
		s = ($sliceType(AttributeTypeAndValue)).make(values.$length);
		_ref = values;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			value = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]).Type = oid;
			((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]).Value = new $String(value);
			_i++;
		}
		return $append(in$1, $subslice(new RelativeDistinguishedNameSET(s.$array), s.$offset, s.$offset + s.$length));
	};
	Name.Ptr.prototype.ToRDNSequence = function() {
		var ret = RDNSequence.nil, n;
		n = new Name.Ptr(); $copy(n, this, Name);
		ret = appendRDNs(ret, n.Country, $subslice(new asn1.ObjectIdentifier(oidCountry.$array), oidCountry.$offset, oidCountry.$offset + oidCountry.$length));
		ret = appendRDNs(ret, n.Organization, $subslice(new asn1.ObjectIdentifier(oidOrganization.$array), oidOrganization.$offset, oidOrganization.$offset + oidOrganization.$length));
		ret = appendRDNs(ret, n.OrganizationalUnit, $subslice(new asn1.ObjectIdentifier(oidOrganizationalUnit.$array), oidOrganizationalUnit.$offset, oidOrganizationalUnit.$offset + oidOrganizationalUnit.$length));
		ret = appendRDNs(ret, n.Locality, $subslice(new asn1.ObjectIdentifier(oidLocality.$array), oidLocality.$offset, oidLocality.$offset + oidLocality.$length));
		ret = appendRDNs(ret, n.Province, $subslice(new asn1.ObjectIdentifier(oidProvince.$array), oidProvince.$offset, oidProvince.$offset + oidProvince.$length));
		ret = appendRDNs(ret, n.StreetAddress, $subslice(new asn1.ObjectIdentifier(oidStreetAddress.$array), oidStreetAddress.$offset, oidStreetAddress.$offset + oidStreetAddress.$length));
		ret = appendRDNs(ret, n.PostalCode, $subslice(new asn1.ObjectIdentifier(oidPostalCode.$array), oidPostalCode.$offset, oidPostalCode.$offset + oidPostalCode.$length));
		if (n.CommonName.length > 0) {
			ret = appendRDNs(ret, new ($sliceType($String))([n.CommonName]), $subslice(new asn1.ObjectIdentifier(oidCommonName.$array), oidCommonName.$offset, oidCommonName.$offset + oidCommonName.$length));
		}
		if (n.SerialNumber.length > 0) {
			ret = appendRDNs(ret, new ($sliceType($String))([n.SerialNumber]), $subslice(new asn1.ObjectIdentifier(oidSerialNumber.$array), oidSerialNumber.$offset, oidSerialNumber.$offset + oidSerialNumber.$length));
		}
		ret = ret;
		return ret;
	};
	Name.prototype.ToRDNSequence = function() { return this.$val.ToRDNSequence(); };
	CertificateList.Ptr.prototype.HasExpired = function(now) {
		var certList;
		certList = this;
		return now.After($clone(certList.TBSCertList.NextUpdate, time.Time));
	};
	CertificateList.prototype.HasExpired = function(now) { return this.$val.HasExpired(now); };
	$pkg.$init = function() {
		AlgorithmIdentifier.init([["Algorithm", "Algorithm", "", asn1.ObjectIdentifier, ""], ["Parameters", "Parameters", "", asn1.RawValue, "asn1:\"optional\""]]);
		RDNSequence.init(RelativeDistinguishedNameSET);
		RelativeDistinguishedNameSET.init(AttributeTypeAndValue);
		AttributeTypeAndValue.init([["Type", "Type", "", asn1.ObjectIdentifier, ""], ["Value", "Value", "", $emptyInterface, ""]]);
		Extension.init([["Id", "Id", "", asn1.ObjectIdentifier, ""], ["Critical", "Critical", "", $Bool, "asn1:\"optional\""], ["Value", "Value", "", ($sliceType($Uint8)), ""]]);
		Name.methods = [["ToRDNSequence", "ToRDNSequence", "", $funcType([], [RDNSequence], false), -1]];
		($ptrType(Name)).methods = [["FillFromRDNSequence", "FillFromRDNSequence", "", $funcType([($ptrType(RDNSequence))], [], false), -1], ["ToRDNSequence", "ToRDNSequence", "", $funcType([], [RDNSequence], false), -1]];
		Name.init([["Country", "Country", "", ($sliceType($String)), ""], ["Organization", "Organization", "", ($sliceType($String)), ""], ["OrganizationalUnit", "OrganizationalUnit", "", ($sliceType($String)), ""], ["Locality", "Locality", "", ($sliceType($String)), ""], ["Province", "Province", "", ($sliceType($String)), ""], ["StreetAddress", "StreetAddress", "", ($sliceType($String)), ""], ["PostalCode", "PostalCode", "", ($sliceType($String)), ""], ["SerialNumber", "SerialNumber", "", $String, ""], ["CommonName", "CommonName", "", $String, ""], ["Names", "Names", "", ($sliceType(AttributeTypeAndValue)), ""]]);
		($ptrType(CertificateList)).methods = [["HasExpired", "HasExpired", "", $funcType([time.Time], [$Bool], false), -1]];
		CertificateList.init([["TBSCertList", "TBSCertList", "", TBSCertificateList, ""], ["SignatureAlgorithm", "SignatureAlgorithm", "", AlgorithmIdentifier, ""], ["SignatureValue", "SignatureValue", "", asn1.BitString, ""]]);
		TBSCertificateList.init([["Raw", "Raw", "", asn1.RawContent, ""], ["Version", "Version", "", $Int, "asn1:\"optional,default:2\""], ["Signature", "Signature", "", AlgorithmIdentifier, ""], ["Issuer", "Issuer", "", RDNSequence, ""], ["ThisUpdate", "ThisUpdate", "", time.Time, ""], ["NextUpdate", "NextUpdate", "", time.Time, ""], ["RevokedCertificates", "RevokedCertificates", "", ($sliceType(RevokedCertificate)), "asn1:\"optional\""], ["Extensions", "Extensions", "", ($sliceType(Extension)), "asn1:\"tag:0,optional,explicit\""]]);
		RevokedCertificate.init([["SerialNumber", "SerialNumber", "", ($ptrType(big.Int)), ""], ["RevocationTime", "RevocationTime", "", time.Time, ""], ["Extensions", "Extensions", "", ($sliceType(Extension)), "asn1:\"optional\""]]);
		oidCountry = new ($sliceType($Int))([2, 5, 4, 6]);
		oidOrganization = new ($sliceType($Int))([2, 5, 4, 10]);
		oidOrganizationalUnit = new ($sliceType($Int))([2, 5, 4, 11]);
		oidCommonName = new ($sliceType($Int))([2, 5, 4, 3]);
		oidSerialNumber = new ($sliceType($Int))([2, 5, 4, 5]);
		oidLocality = new ($sliceType($Int))([2, 5, 4, 7]);
		oidProvince = new ($sliceType($Int))([2, 5, 4, 8]);
		oidStreetAddress = new ($sliceType($Int))([2, 5, 4, 9]);
		oidPostalCode = new ($sliceType($Int))([2, 5, 4, 17]);
	};
	return $pkg;
})();
$packages["encoding/hex"] = (function() {
	var $pkg = {}, bytes = $packages["bytes"], errors = $packages["errors"], fmt = $packages["fmt"], io = $packages["io"];
	$pkg.$init = function() {
		$pkg.ErrLength = errors.New("encoding/hex: odd length hex string");
	};
	return $pkg;
})();
$packages["encoding/pem"] = (function() {
	var $pkg = {}, bytes = $packages["bytes"], base64 = $packages["encoding/base64"], io = $packages["io"], sort = $packages["sort"], Block, pemStart, pemEnd, pemEndOfLine, getLine, removeWhitespace, Decode, decodeError;
	Block = $pkg.Block = $newType(0, "Struct", "pem.Block", "Block", "encoding/pem", function(Type_, Headers_, Bytes_) {
		this.$val = this;
		this.Type = Type_ !== undefined ? Type_ : "";
		this.Headers = Headers_ !== undefined ? Headers_ : false;
		this.Bytes = Bytes_ !== undefined ? Bytes_ : ($sliceType($Uint8)).nil;
	});
	getLine = function(data) {
		var line = ($sliceType($Uint8)).nil, rest = ($sliceType($Uint8)).nil, i, j, x, _tmp, _tmp$1;
		i = bytes.Index(data, new ($sliceType($Uint8))([10]));
		j = 0;
		if (i < 0) {
			i = data.$length;
			j = i;
		} else {
			j = i + 1 >> 0;
			if (i > 0 && ((x = i - 1 >> 0, ((x < 0 || x >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + x])) === 13)) {
				i = i - (1) >> 0;
			}
		}
		_tmp = bytes.TrimRight($subslice(data, 0, i), " \t"); _tmp$1 = $subslice(data, j); line = _tmp; rest = _tmp$1;
		return [line, rest];
	};
	removeWhitespace = function(data) {
		var result, n, _ref, _i, b;
		result = ($sliceType($Uint8)).make(data.$length);
		n = 0;
		_ref = data;
		_i = 0;
		while (_i < _ref.$length) {
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if ((b === 32) || (b === 9) || (b === 13) || (b === 10)) {
				_i++;
				continue;
			}
			(n < 0 || n >= result.$length) ? $throwRuntimeError("index out of range") : result.$array[result.$offset + n] = b;
			n = n + (1) >> 0;
			_i++;
		}
		return $subslice(result, 0, n);
	};
	Decode = $pkg.Decode = function(data) {
		var p = ($ptrType(Block)).nil, rest = ($sliceType($Uint8)).nil, i, _tmp, _tmp$1, _tuple, typeLine, _tuple$1, _tmp$2, _tmp$3, _tuple$2, line, next, i$1, _tmp$4, _tmp$5, key, val, _key, i$2, _tuple$3, base64Data, _tuple$4, n, err, _tuple$5, _tuple$6;
		rest = data;
		if (bytes.HasPrefix(data, $subslice(pemStart, 1))) {
			rest = $subslice(rest, (pemStart.$length - 1 >> 0), data.$length);
		} else {
			i = bytes.Index(data, pemStart);
			if (i >= 0) {
				rest = $subslice(rest, (i + pemStart.$length >> 0), data.$length);
			} else {
				_tmp = ($ptrType(Block)).nil; _tmp$1 = data; p = _tmp; rest = _tmp$1;
				return [p, rest];
			}
		}
		_tuple = getLine(rest); typeLine = _tuple[0]; rest = _tuple[1];
		if (!bytes.HasSuffix(typeLine, pemEndOfLine)) {
			_tuple$1 = decodeError(data, rest); p = _tuple$1[0]; rest = _tuple$1[1];
			return [p, rest];
		}
		typeLine = $subslice(typeLine, 0, (typeLine.$length - pemEndOfLine.$length >> 0));
		p = new Block.Ptr($bytesToString(typeLine), new $Map(), ($sliceType($Uint8)).nil);
		while (true) {
			if (rest.$length === 0) {
				_tmp$2 = ($ptrType(Block)).nil; _tmp$3 = data; p = _tmp$2; rest = _tmp$3;
				return [p, rest];
			}
			_tuple$2 = getLine(rest); line = _tuple$2[0]; next = _tuple$2[1];
			i$1 = bytes.Index(line, new ($sliceType($Uint8))([58]));
			if (i$1 === -1) {
				break;
			}
			_tmp$4 = $subslice(line, 0, i$1); _tmp$5 = $subslice(line, (i$1 + 1 >> 0)); key = _tmp$4; val = _tmp$5;
			key = bytes.TrimSpace(key);
			val = bytes.TrimSpace(val);
			_key = $bytesToString(key); (p.Headers || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: $bytesToString(val) };
			rest = next;
		}
		i$2 = bytes.Index(rest, pemEnd);
		if (i$2 < 0) {
			_tuple$3 = decodeError(data, rest); p = _tuple$3[0]; rest = _tuple$3[1];
			return [p, rest];
		}
		base64Data = removeWhitespace($subslice(rest, 0, i$2));
		p.Bytes = ($sliceType($Uint8)).make(base64.StdEncoding.DecodedLen(base64Data.$length));
		_tuple$4 = base64.StdEncoding.Decode(p.Bytes, base64Data); n = _tuple$4[0]; err = _tuple$4[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tuple$5 = decodeError(data, rest); p = _tuple$5[0]; rest = _tuple$5[1];
			return [p, rest];
		}
		p.Bytes = $subslice(p.Bytes, 0, n);
		_tuple$6 = getLine($subslice(rest, (i$2 + pemEnd.$length >> 0))); rest = _tuple$6[1];
		return [p, rest];
	};
	decodeError = function(data, rest) {
		var _tuple, p;
		_tuple = Decode(rest); p = _tuple[0]; rest = _tuple[1];
		if (p === ($ptrType(Block)).nil) {
			rest = data;
		}
		return [p, rest];
	};
	$pkg.$init = function() {
		Block.init([["Type", "Type", "", $String, ""], ["Headers", "Headers", "", ($mapType($String, $String)), ""], ["Bytes", "Bytes", "", ($sliceType($Uint8)), ""]]);
		pemStart = new ($sliceType($Uint8))($stringToBytes("\n-----BEGIN "));
		pemEnd = new ($sliceType($Uint8))($stringToBytes("\n-----END "));
		pemEndOfLine = new ($sliceType($Uint8))($stringToBytes("-----"));
	};
	return $pkg;
})();
$packages["os/exec"] = (function() {
	var $pkg = {}, bytes = $packages["bytes"], errors = $packages["errors"], io = $packages["io"], os = $packages["os"], filepath = $packages["path/filepath"], runtime = $packages["runtime"], strconv = $packages["strconv"], strings = $packages["strings"], sync = $packages["sync"], syscall = $packages["syscall"], Error, Cmd, ExitError, closeOnce, Command, interfaceEqual, findExecutable, LookPath;
	Error = $pkg.Error = $newType(0, "Struct", "exec.Error", "Error", "os/exec", function(Name_, Err_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.Err = Err_ !== undefined ? Err_ : $ifaceNil;
	});
	Cmd = $pkg.Cmd = $newType(0, "Struct", "exec.Cmd", "Cmd", "os/exec", function(Path_, Args_, Env_, Dir_, Stdin_, Stdout_, Stderr_, ExtraFiles_, SysProcAttr_, Process_, ProcessState_, lookPathErr_, finished_, childFiles_, closeAfterStart_, closeAfterWait_, goroutine_, errch_) {
		this.$val = this;
		this.Path = Path_ !== undefined ? Path_ : "";
		this.Args = Args_ !== undefined ? Args_ : ($sliceType($String)).nil;
		this.Env = Env_ !== undefined ? Env_ : ($sliceType($String)).nil;
		this.Dir = Dir_ !== undefined ? Dir_ : "";
		this.Stdin = Stdin_ !== undefined ? Stdin_ : $ifaceNil;
		this.Stdout = Stdout_ !== undefined ? Stdout_ : $ifaceNil;
		this.Stderr = Stderr_ !== undefined ? Stderr_ : $ifaceNil;
		this.ExtraFiles = ExtraFiles_ !== undefined ? ExtraFiles_ : ($sliceType(($ptrType(os.File)))).nil;
		this.SysProcAttr = SysProcAttr_ !== undefined ? SysProcAttr_ : ($ptrType(syscall.SysProcAttr)).nil;
		this.Process = Process_ !== undefined ? Process_ : ($ptrType(os.Process)).nil;
		this.ProcessState = ProcessState_ !== undefined ? ProcessState_ : ($ptrType(os.ProcessState)).nil;
		this.lookPathErr = lookPathErr_ !== undefined ? lookPathErr_ : $ifaceNil;
		this.finished = finished_ !== undefined ? finished_ : false;
		this.childFiles = childFiles_ !== undefined ? childFiles_ : ($sliceType(($ptrType(os.File)))).nil;
		this.closeAfterStart = closeAfterStart_ !== undefined ? closeAfterStart_ : ($sliceType(io.Closer)).nil;
		this.closeAfterWait = closeAfterWait_ !== undefined ? closeAfterWait_ : ($sliceType(io.Closer)).nil;
		this.goroutine = goroutine_ !== undefined ? goroutine_ : ($sliceType(($funcType([], [$error], false)))).nil;
		this.errch = errch_ !== undefined ? errch_ : ($chanType($error, false, false)).nil;
	});
	ExitError = $pkg.ExitError = $newType(0, "Struct", "exec.ExitError", "ExitError", "os/exec", function(ProcessState_) {
		this.$val = this;
		this.ProcessState = ProcessState_ !== undefined ? ProcessState_ : ($ptrType(os.ProcessState)).nil;
	});
	closeOnce = $pkg.closeOnce = $newType(0, "Struct", "exec.closeOnce", "closeOnce", "os/exec", function(File_, once_, err_) {
		this.$val = this;
		this.File = File_ !== undefined ? File_ : ($ptrType(os.File)).nil;
		this.once = once_ !== undefined ? once_ : new sync.Once.Ptr();
		this.err = err_ !== undefined ? err_ : $ifaceNil;
	});
	Error.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return "exec: " + strconv.Quote(e.Name) + ": " + e.Err.Error();
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	Command = $pkg.Command = function(name, arg) {
		var cmd, _tuple, lp, err;
		cmd = new Cmd.Ptr(name, $appendSlice(new ($sliceType($String))([name]), arg), ($sliceType($String)).nil, "", $ifaceNil, $ifaceNil, $ifaceNil, ($sliceType(($ptrType(os.File)))).nil, ($ptrType(syscall.SysProcAttr)).nil, ($ptrType(os.Process)).nil, ($ptrType(os.ProcessState)).nil, $ifaceNil, false, ($sliceType(($ptrType(os.File)))).nil, ($sliceType(io.Closer)).nil, ($sliceType(io.Closer)).nil, ($sliceType(($funcType([], [$error], false)))).nil, ($chanType($error, false, false)).nil);
		if (filepath.Base(name) === name) {
			_tuple = LookPath(name); lp = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				cmd.lookPathErr = err;
			} else {
				cmd.Path = lp;
			}
		}
		return cmd;
	};
	interfaceEqual = function(a, b) {
		var $deferred = [], $err = null;
		/* */ try { $deferFrames.push($deferred);
		$deferred.push([(function() {
			$recover();
		}), []]);
		return $interfaceIsEqual(a, b);
		/* */ } catch(err) { $err = err; return false; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Cmd.Ptr.prototype.envv = function() {
		var c;
		c = this;
		if (!(c.Env === ($sliceType($String)).nil)) {
			return c.Env;
		}
		return os.Environ();
	};
	Cmd.prototype.envv = function() { return this.$val.envv(); };
	Cmd.Ptr.prototype.argv = function() {
		var c;
		c = this;
		if (c.Args.$length > 0) {
			return c.Args;
		}
		return new ($sliceType($String))([c.Path]);
	};
	Cmd.prototype.argv = function() { return this.$val.argv(); };
	Cmd.Ptr.prototype.stdin = function() {
		var f = ($ptrType(os.File)).nil, err = $ifaceNil, c, _tuple, _tuple$1, f$1, ok, _tmp, _tmp$1, _tuple$2, pr, pw, _tmp$2, _tmp$3;
		c = this;
		if ($interfaceIsEqual(c.Stdin, $ifaceNil)) {
			_tuple = os.Open("/dev/null"); f = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [f, err];
			}
			c.closeAfterStart = $append(c.closeAfterStart, f);
			return [f, err];
		}
		_tuple$1 = $assertType(c.Stdin, ($ptrType(os.File)), true); f$1 = _tuple$1[0]; ok = _tuple$1[1];
		if (ok) {
			_tmp = f$1; _tmp$1 = $ifaceNil; f = _tmp; err = _tmp$1;
			return [f, err];
		}
		_tuple$2 = os.Pipe(); pr = _tuple$2[0]; pw = _tuple$2[1]; err = _tuple$2[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [f, err];
		}
		c.closeAfterStart = $append(c.closeAfterStart, pr);
		c.closeAfterWait = $append(c.closeAfterWait, pw);
		c.goroutine = $append(c.goroutine, (function() {
			var _tuple$3, err$1, err1;
			_tuple$3 = io.Copy(pw, c.Stdin); err$1 = _tuple$3[1];
			err1 = pw.Close();
			if ($interfaceIsEqual(err$1, $ifaceNil)) {
				err$1 = err1;
			}
			return err$1;
		}));
		_tmp$2 = pr; _tmp$3 = $ifaceNil; f = _tmp$2; err = _tmp$3;
		return [f, err];
	};
	Cmd.prototype.stdin = function() { return this.$val.stdin(); };
	Cmd.Ptr.prototype.stdout = function() {
		var f = ($ptrType(os.File)).nil, err = $ifaceNil, c, _tuple;
		c = this;
		_tuple = c.writerDescriptor(c.Stdout); f = _tuple[0]; err = _tuple[1];
		return [f, err];
	};
	Cmd.prototype.stdout = function() { return this.$val.stdout(); };
	Cmd.Ptr.prototype.stderr = function() {
		var f = ($ptrType(os.File)).nil, err = $ifaceNil, c, _tmp, x, _tmp$1, _tuple;
		c = this;
		if (!($interfaceIsEqual(c.Stderr, $ifaceNil)) && interfaceEqual(c.Stderr, c.Stdout)) {
			_tmp = (x = c.childFiles, ((1 < 0 || 1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 1])); _tmp$1 = $ifaceNil; f = _tmp; err = _tmp$1;
			return [f, err];
		}
		_tuple = c.writerDescriptor(c.Stderr); f = _tuple[0]; err = _tuple[1];
		return [f, err];
	};
	Cmd.prototype.stderr = function() { return this.$val.stderr(); };
	Cmd.Ptr.prototype.writerDescriptor = function(w) {
		var f = ($ptrType(os.File)).nil, err = $ifaceNil, c, _tuple, _tuple$1, f$1, ok, _tmp, _tmp$1, _tuple$2, pr, pw, _tmp$2, _tmp$3;
		c = this;
		if ($interfaceIsEqual(w, $ifaceNil)) {
			_tuple = os.OpenFile("/dev/null", 1, 0); f = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [f, err];
			}
			c.closeAfterStart = $append(c.closeAfterStart, f);
			return [f, err];
		}
		_tuple$1 = $assertType(w, ($ptrType(os.File)), true); f$1 = _tuple$1[0]; ok = _tuple$1[1];
		if (ok) {
			_tmp = f$1; _tmp$1 = $ifaceNil; f = _tmp; err = _tmp$1;
			return [f, err];
		}
		_tuple$2 = os.Pipe(); pr = _tuple$2[0]; pw = _tuple$2[1]; err = _tuple$2[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [f, err];
		}
		c.closeAfterStart = $append(c.closeAfterStart, pw);
		c.closeAfterWait = $append(c.closeAfterWait, pr);
		c.goroutine = $append(c.goroutine, (function() {
			var _tuple$3, err$1;
			_tuple$3 = io.Copy(w, pr); err$1 = _tuple$3[1];
			return err$1;
		}));
		_tmp$2 = pw; _tmp$3 = $ifaceNil; f = _tmp$2; err = _tmp$3;
		return [f, err];
	};
	Cmd.prototype.writerDescriptor = function(w) { return this.$val.writerDescriptor(w); };
	Cmd.Ptr.prototype.closeDescriptors = function(closers) {
		var c, _ref, _i, fd;
		c = this;
		_ref = closers;
		_i = 0;
		while (_i < _ref.$length) {
			fd = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			fd.Close();
			_i++;
		}
	};
	Cmd.prototype.closeDescriptors = function(closers) { return this.$val.closeDescriptors(closers); };
	Cmd.Ptr.prototype.Run = function($b) {
		var $this = this, $args = arguments, $r, $s = 0, c, err, _r;
		/* */ if(!$b) { $nonblockingCall(); }; var $blocking_Run = function() { s: while (true) { switch ($s) { case 0:
		c = $this;
		err = c.Start();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_r = c.Wait(true); /* */ $s = 1; case 1: if (_r && _r.$blocking) { _r = _r(); }
		return _r;
		/* */ case -1: } return; } }; $blocking_Run.$blocking = true; return $blocking_Run;
	};
	Cmd.prototype.Run = function($b) { return this.$val.Run($b); };
	Cmd.Ptr.prototype.Start = function() {
		var c, F, _ref, _i, setupFd, _tuple, fd, err, err$1, _tuple$1, _ref$1, _i$1, fn;
		c = this;
		if (!($interfaceIsEqual(c.lookPathErr, $ifaceNil))) {
			c.closeDescriptors(c.closeAfterStart);
			c.closeDescriptors(c.closeAfterWait);
			return c.lookPathErr;
		}
		if (!(c.Process === ($ptrType(os.Process)).nil)) {
			return errors.New("exec: already started");
		}
		F = $newType(4, "Func", "exec.F", "F", "os/exec", null);
		F.init([($ptrType(Cmd))], [($ptrType(os.File)), $error], false);
		_ref = new ($sliceType(F))([$methodExpr(($ptrType(Cmd)).prototype.stdin), $methodExpr(($ptrType(Cmd)).prototype.stdout), $methodExpr(($ptrType(Cmd)).prototype.stderr)]);
		_i = 0;
		while (_i < _ref.$length) {
			setupFd = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_tuple = setupFd(c); fd = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				c.closeDescriptors(c.closeAfterStart);
				c.closeDescriptors(c.closeAfterWait);
				return err;
			}
			c.childFiles = $append(c.childFiles, fd);
			_i++;
		}
		c.childFiles = $appendSlice(c.childFiles, c.ExtraFiles);
		err$1 = $ifaceNil;
		_tuple$1 = os.StartProcess(c.Path, c.argv(), new os.ProcAttr.Ptr(c.Dir, c.envv(), c.childFiles, c.SysProcAttr)); c.Process = _tuple$1[0]; err$1 = _tuple$1[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			c.closeDescriptors(c.closeAfterStart);
			c.closeDescriptors(c.closeAfterWait);
			return err$1;
		}
		c.closeDescriptors(c.closeAfterStart);
		c.errch = new ($chanType($error, false, false))(c.goroutine.$length);
		_ref$1 = c.goroutine;
		_i$1 = 0;
		while (_i$1 < _ref$1.$length) {
			fn = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			$go((function(fn$1, $b) {
				var $this = this, $args = arguments, $r, $s = 0;
				/* */ if(!$b) { $nonblockingCall(); }; var $f = function() { s: while (true) { switch ($s) { case 0:
				$r = $send(c.errch, fn$1(), true); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
				/* */ case -1: } return; } }; $f.$blocking = true; return $f;
			}), [fn]);
			_i$1++;
		}
		return $ifaceNil;
	};
	Cmd.prototype.Start = function() { return this.$val.Start(); };
	ExitError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.ProcessState.String();
	};
	ExitError.prototype.Error = function() { return this.$val.Error(); };
	Cmd.Ptr.prototype.Wait = function($b) {
		var $this = this, $args = arguments, $r, $s = 0, c, _tuple, state, err, copyError, _ref, _i, _r, err$1;
		/* */ if(!$b) { $nonblockingCall(); }; var $blocking_Wait = function() { s: while (true) { switch ($s) { case 0:
		c = $this;
		if (c.Process === ($ptrType(os.Process)).nil) {
			return errors.New("exec: not started");
		}
		if (c.finished) {
			return errors.New("exec: Wait was already called");
		}
		c.finished = true;
		_tuple = c.Process.Wait(); state = _tuple[0]; err = _tuple[1];
		c.ProcessState = state;
		copyError = $ifaceNil;
		_ref = c.goroutine;
		_i = 0;
		/* while (_i < _ref.$length) { */ case 1: if(!(_i < _ref.$length)) { $s = 2; continue; }
			_r = $recv(c.errch, true); /* */ $s = 3; case 3: if (_r && _r.$blocking) { _r = _r(); }
			err$1 = _r[0];
			/* if (!($interfaceIsEqual(err$1, $ifaceNil)) && $interfaceIsEqual(copyError, $ifaceNil)) { */ if (!($interfaceIsEqual(err$1, $ifaceNil)) && $interfaceIsEqual(copyError, $ifaceNil)) {} else { $s = 4; continue; }
				copyError = err$1;
			/* } */ case 4:
			_i++;
		/* } */ $s = 1; continue; case 2:
		c.closeDescriptors(c.closeAfterWait);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		} else if (!state.Success()) {
			return new ExitError.Ptr(state);
		}
		return copyError;
		/* */ case -1: } return; } }; $blocking_Wait.$blocking = true; return $blocking_Wait;
	};
	Cmd.prototype.Wait = function($b) { return this.$val.Wait($b); };
	Cmd.Ptr.prototype.Output = function($b) {
		var $this = this, $args = arguments, $r, $s = 0, c, b, _r, err;
		/* */ if(!$b) { $nonblockingCall(); }; var $blocking_Output = function() { s: while (true) { switch ($s) { case 0:
		c = $this;
		if (!($interfaceIsEqual(c.Stdout, $ifaceNil))) {
			return [($sliceType($Uint8)).nil, errors.New("exec: Stdout already set")];
		}
		b = new bytes.Buffer.Ptr(); $copy(b, new bytes.Buffer.Ptr(), bytes.Buffer);
		c.Stdout = b;
		_r = c.Run(true); /* */ $s = 1; case 1: if (_r && _r.$blocking) { _r = _r(); }
		err = _r;
		return [b.Bytes(), err];
		/* */ case -1: } return; } }; $blocking_Output.$blocking = true; return $blocking_Output;
	};
	Cmd.prototype.Output = function($b) { return this.$val.Output($b); };
	Cmd.Ptr.prototype.CombinedOutput = function($b) {
		var $this = this, $args = arguments, $r, $s = 0, c, b, _r, err;
		/* */ if(!$b) { $nonblockingCall(); }; var $blocking_CombinedOutput = function() { s: while (true) { switch ($s) { case 0:
		c = $this;
		if (!($interfaceIsEqual(c.Stdout, $ifaceNil))) {
			return [($sliceType($Uint8)).nil, errors.New("exec: Stdout already set")];
		}
		if (!($interfaceIsEqual(c.Stderr, $ifaceNil))) {
			return [($sliceType($Uint8)).nil, errors.New("exec: Stderr already set")];
		}
		b = new bytes.Buffer.Ptr(); $copy(b, new bytes.Buffer.Ptr(), bytes.Buffer);
		c.Stdout = b;
		c.Stderr = b;
		_r = c.Run(true); /* */ $s = 1; case 1: if (_r && _r.$blocking) { _r = _r(); }
		err = _r;
		return [b.Bytes(), err];
		/* */ case -1: } return; } }; $blocking_CombinedOutput.$blocking = true; return $blocking_CombinedOutput;
	};
	Cmd.prototype.CombinedOutput = function($b) { return this.$val.CombinedOutput($b); };
	Cmd.Ptr.prototype.StdinPipe = function() {
		var c, _tuple, pr, pw, err, wc;
		c = this;
		if (!($interfaceIsEqual(c.Stdin, $ifaceNil))) {
			return [$ifaceNil, errors.New("exec: Stdin already set")];
		}
		if (!(c.Process === ($ptrType(os.Process)).nil)) {
			return [$ifaceNil, errors.New("exec: StdinPipe after process started")];
		}
		_tuple = os.Pipe(); pr = _tuple[0]; pw = _tuple[1]; err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, err];
		}
		c.Stdin = pr;
		c.closeAfterStart = $append(c.closeAfterStart, pr);
		wc = new closeOnce.Ptr(pw, new sync.Once.Ptr(), $ifaceNil);
		c.closeAfterWait = $append(c.closeAfterWait, wc);
		return [wc, $ifaceNil];
	};
	Cmd.prototype.StdinPipe = function() { return this.$val.StdinPipe(); };
	closeOnce.Ptr.prototype.Close = function() {
		var c;
		c = this;
		c.once.Do($methodVal(c, "close"));
		return c.err;
	};
	closeOnce.prototype.Close = function() { return this.$val.Close(); };
	closeOnce.Ptr.prototype.close = function() {
		var c;
		c = this;
		c.err = c.File.Close();
	};
	closeOnce.prototype.close = function() { return this.$val.close(); };
	Cmd.Ptr.prototype.StdoutPipe = function() {
		var c, _tuple, pr, pw, err;
		c = this;
		if (!($interfaceIsEqual(c.Stdout, $ifaceNil))) {
			return [$ifaceNil, errors.New("exec: Stdout already set")];
		}
		if (!(c.Process === ($ptrType(os.Process)).nil)) {
			return [$ifaceNil, errors.New("exec: StdoutPipe after process started")];
		}
		_tuple = os.Pipe(); pr = _tuple[0]; pw = _tuple[1]; err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, err];
		}
		c.Stdout = pw;
		c.closeAfterStart = $append(c.closeAfterStart, pw);
		c.closeAfterWait = $append(c.closeAfterWait, pr);
		return [pr, $ifaceNil];
	};
	Cmd.prototype.StdoutPipe = function() { return this.$val.StdoutPipe(); };
	Cmd.Ptr.prototype.StderrPipe = function() {
		var c, _tuple, pr, pw, err;
		c = this;
		if (!($interfaceIsEqual(c.Stderr, $ifaceNil))) {
			return [$ifaceNil, errors.New("exec: Stderr already set")];
		}
		if (!(c.Process === ($ptrType(os.Process)).nil)) {
			return [$ifaceNil, errors.New("exec: StderrPipe after process started")];
		}
		_tuple = os.Pipe(); pr = _tuple[0]; pw = _tuple[1]; err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [$ifaceNil, err];
		}
		c.Stderr = pw;
		c.closeAfterStart = $append(c.closeAfterStart, pw);
		c.closeAfterWait = $append(c.closeAfterWait, pr);
		return [pr, $ifaceNil];
	};
	Cmd.prototype.StderrPipe = function() { return this.$val.StderrPipe(); };
	findExecutable = function(file) {
		var _tuple, d, err, m;
		_tuple = os.Stat(file); d = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		m = d.Mode();
		if (!new os.FileMode(m).IsDir() && !((((m & 73) >>> 0) === 0))) {
			return $ifaceNil;
		}
		return os.ErrPermission;
	};
	LookPath = $pkg.LookPath = function(file) {
		var err, pathenv, _ref, _i, dir, path, err$1;
		if (strings.Contains(file, "/")) {
			err = findExecutable(file);
			if ($interfaceIsEqual(err, $ifaceNil)) {
				return [file, $ifaceNil];
			}
			return ["", new Error.Ptr(file, err)];
		}
		pathenv = os.Getenv("PATH");
		if (pathenv === "") {
			return ["", new Error.Ptr(file, $pkg.ErrNotFound)];
		}
		_ref = strings.Split(pathenv, ":");
		_i = 0;
		while (_i < _ref.$length) {
			dir = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (dir === "") {
				dir = ".";
			}
			path = dir + "/" + file;
			err$1 = findExecutable(path);
			if ($interfaceIsEqual(err$1, $ifaceNil)) {
				return [path, $ifaceNil];
			}
			_i++;
		}
		return ["", new Error.Ptr(file, $pkg.ErrNotFound)];
	};
	$pkg.$init = function() {
		($ptrType(Error)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		Error.init([["Name", "Name", "", $String, ""], ["Err", "Err", "", $error, ""]]);
		($ptrType(Cmd)).methods = [["CombinedOutput", "CombinedOutput", "", $funcType([], [($sliceType($Uint8)), $error], false), -1], ["Output", "Output", "", $funcType([], [($sliceType($Uint8)), $error], false), -1], ["Run", "Run", "", $funcType([], [$error], false), -1], ["Start", "Start", "", $funcType([], [$error], false), -1], ["StderrPipe", "StderrPipe", "", $funcType([], [io.ReadCloser, $error], false), -1], ["StdinPipe", "StdinPipe", "", $funcType([], [io.WriteCloser, $error], false), -1], ["StdoutPipe", "StdoutPipe", "", $funcType([], [io.ReadCloser, $error], false), -1], ["Wait", "Wait", "", $funcType([], [$error], false), -1], ["argv", "argv", "os/exec", $funcType([], [($sliceType($String))], false), -1], ["closeDescriptors", "closeDescriptors", "os/exec", $funcType([($sliceType(io.Closer))], [], false), -1], ["envv", "envv", "os/exec", $funcType([], [($sliceType($String))], false), -1], ["stderr", "stderr", "os/exec", $funcType([], [($ptrType(os.File)), $error], false), -1], ["stdin", "stdin", "os/exec", $funcType([], [($ptrType(os.File)), $error], false), -1], ["stdout", "stdout", "os/exec", $funcType([], [($ptrType(os.File)), $error], false), -1], ["writerDescriptor", "writerDescriptor", "os/exec", $funcType([io.Writer], [($ptrType(os.File)), $error], false), -1]];
		Cmd.init([["Path", "Path", "", $String, ""], ["Args", "Args", "", ($sliceType($String)), ""], ["Env", "Env", "", ($sliceType($String)), ""], ["Dir", "Dir", "", $String, ""], ["Stdin", "Stdin", "", io.Reader, ""], ["Stdout", "Stdout", "", io.Writer, ""], ["Stderr", "Stderr", "", io.Writer, ""], ["ExtraFiles", "ExtraFiles", "", ($sliceType(($ptrType(os.File)))), ""], ["SysProcAttr", "SysProcAttr", "", ($ptrType(syscall.SysProcAttr)), ""], ["Process", "Process", "", ($ptrType(os.Process)), ""], ["ProcessState", "ProcessState", "", ($ptrType(os.ProcessState)), ""], ["lookPathErr", "lookPathErr", "os/exec", $error, ""], ["finished", "finished", "os/exec", $Bool, ""], ["childFiles", "childFiles", "os/exec", ($sliceType(($ptrType(os.File)))), ""], ["closeAfterStart", "closeAfterStart", "os/exec", ($sliceType(io.Closer)), ""], ["closeAfterWait", "closeAfterWait", "os/exec", ($sliceType(io.Closer)), ""], ["goroutine", "goroutine", "os/exec", ($sliceType(($funcType([], [$error], false)))), ""], ["errch", "errch", "os/exec", ($chanType($error, false, false)), ""]]);
		ExitError.methods = [["Exited", "Exited", "", $funcType([], [$Bool], false), 0], ["Pid", "Pid", "", $funcType([], [$Int], false), 0], ["String", "String", "", $funcType([], [$String], false), 0], ["Success", "Success", "", $funcType([], [$Bool], false), 0], ["Sys", "Sys", "", $funcType([], [$emptyInterface], false), 0], ["SysUsage", "SysUsage", "", $funcType([], [$emptyInterface], false), 0], ["SystemTime", "SystemTime", "", $funcType([], [$packages["time"].Duration], false), 0], ["UserTime", "UserTime", "", $funcType([], [$packages["time"].Duration], false), 0], ["exited", "exited", "os", $funcType([], [$Bool], false), 0], ["success", "success", "os", $funcType([], [$Bool], false), 0], ["sys", "sys", "os", $funcType([], [$emptyInterface], false), 0], ["sysUsage", "sysUsage", "os", $funcType([], [$emptyInterface], false), 0], ["systemTime", "systemTime", "os", $funcType([], [$packages["time"].Duration], false), 0], ["userTime", "userTime", "os", $funcType([], [$packages["time"].Duration], false), 0]];
		($ptrType(ExitError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1], ["Exited", "Exited", "", $funcType([], [$Bool], false), 0], ["Pid", "Pid", "", $funcType([], [$Int], false), 0], ["String", "String", "", $funcType([], [$String], false), 0], ["Success", "Success", "", $funcType([], [$Bool], false), 0], ["Sys", "Sys", "", $funcType([], [$emptyInterface], false), 0], ["SysUsage", "SysUsage", "", $funcType([], [$emptyInterface], false), 0], ["SystemTime", "SystemTime", "", $funcType([], [$packages["time"].Duration], false), 0], ["UserTime", "UserTime", "", $funcType([], [$packages["time"].Duration], false), 0], ["exited", "exited", "os", $funcType([], [$Bool], false), 0], ["success", "success", "os", $funcType([], [$Bool], false), 0], ["sys", "sys", "os", $funcType([], [$emptyInterface], false), 0], ["sysUsage", "sysUsage", "os", $funcType([], [$emptyInterface], false), 0], ["systemTime", "systemTime", "os", $funcType([], [$packages["time"].Duration], false), 0], ["userTime", "userTime", "os", $funcType([], [$packages["time"].Duration], false), 0]];
		ExitError.init([["ProcessState", "", "", ($ptrType(os.ProcessState)), ""]]);
		closeOnce.methods = [["Chdir", "Chdir", "", $funcType([], [$error], false), 0], ["Chmod", "Chmod", "", $funcType([os.FileMode], [$error], false), 0], ["Chown", "Chown", "", $funcType([$Int, $Int], [$error], false), 0], ["Fd", "Fd", "", $funcType([], [$Uintptr], false), 0], ["Name", "Name", "", $funcType([], [$String], false), 0], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0], ["ReadAt", "ReadAt", "", $funcType([($sliceType($Uint8)), $Int64], [$Int, $error], false), 0], ["Readdir", "Readdir", "", $funcType([$Int], [($sliceType(os.FileInfo)), $error], false), 0], ["Readdirnames", "Readdirnames", "", $funcType([$Int], [($sliceType($String)), $error], false), 0], ["Seek", "Seek", "", $funcType([$Int64, $Int], [$Int64, $error], false), 0], ["Stat", "Stat", "", $funcType([], [os.FileInfo, $error], false), 0], ["Sync", "Sync", "", $funcType([], [$error], false), 0], ["Truncate", "Truncate", "", $funcType([$Int64], [$error], false), 0], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0], ["WriteAt", "WriteAt", "", $funcType([($sliceType($Uint8)), $Int64], [$Int, $error], false), 0], ["WriteString", "WriteString", "", $funcType([$String], [$Int, $error], false), 0], ["close", "close", "os", $funcType([], [$error], false), 0], ["pread", "pread", "os", $funcType([($sliceType($Uint8)), $Int64], [$Int, $error], false), 0], ["pwrite", "pwrite", "os", $funcType([($sliceType($Uint8)), $Int64], [$Int, $error], false), 0], ["read", "read", "os", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0], ["readdir", "readdir", "os", $funcType([$Int], [($sliceType(os.FileInfo)), $error], false), 0], ["readdirnames", "readdirnames", "os", $funcType([$Int], [($sliceType($String)), $error], false), 0], ["seek", "seek", "os", $funcType([$Int64, $Int], [$Int64, $error], false), 0], ["write", "write", "os", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0]];
		($ptrType(closeOnce)).methods = [["Chdir", "Chdir", "", $funcType([], [$error], false), 0], ["Chmod", "Chmod", "", $funcType([os.FileMode], [$error], false), 0], ["Chown", "Chown", "", $funcType([$Int, $Int], [$error], false), 0], ["Close", "Close", "", $funcType([], [$error], false), -1], ["Fd", "Fd", "", $funcType([], [$Uintptr], false), 0], ["Name", "Name", "", $funcType([], [$String], false), 0], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0], ["ReadAt", "ReadAt", "", $funcType([($sliceType($Uint8)), $Int64], [$Int, $error], false), 0], ["Readdir", "Readdir", "", $funcType([$Int], [($sliceType(os.FileInfo)), $error], false), 0], ["Readdirnames", "Readdirnames", "", $funcType([$Int], [($sliceType($String)), $error], false), 0], ["Seek", "Seek", "", $funcType([$Int64, $Int], [$Int64, $error], false), 0], ["Stat", "Stat", "", $funcType([], [os.FileInfo, $error], false), 0], ["Sync", "Sync", "", $funcType([], [$error], false), 0], ["Truncate", "Truncate", "", $funcType([$Int64], [$error], false), 0], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0], ["WriteAt", "WriteAt", "", $funcType([($sliceType($Uint8)), $Int64], [$Int, $error], false), 0], ["WriteString", "WriteString", "", $funcType([$String], [$Int, $error], false), 0], ["close", "close", "os", $funcType([], [$error], false), 0], ["pread", "pread", "os", $funcType([($sliceType($Uint8)), $Int64], [$Int, $error], false), 0], ["pwrite", "pwrite", "os", $funcType([($sliceType($Uint8)), $Int64], [$Int, $error], false), 0], ["read", "read", "os", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0], ["readdir", "readdir", "os", $funcType([$Int], [($sliceType(os.FileInfo)), $error], false), 0], ["readdirnames", "readdirnames", "os", $funcType([$Int], [($sliceType($String)), $error], false), 0], ["seek", "seek", "os", $funcType([$Int64, $Int], [$Int64, $error], false), 0], ["write", "write", "os", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0], ["close", "close", "os/exec", $funcType([], [], false), -1]];
		closeOnce.init([["File", "", "", ($ptrType(os.File)), ""], ["once", "once", "os/exec", sync.Once, ""], ["err", "err", "os/exec", $error, ""]]);
		$pkg.ErrNotFound = errors.New("executable file not found in $PATH");
	};
	return $pkg;
})();
$packages["crypto/x509"] = (function() {
	var $pkg = {}, pem = $packages["encoding/pem"], aes = $packages["crypto/aes"], cipher = $packages["crypto/cipher"], des = $packages["crypto/des"], md5 = $packages["crypto/md5"], hex = $packages["encoding/hex"], errors = $packages["errors"], io = $packages["io"], strings = $packages["strings"], rsa = $packages["crypto/rsa"], asn1 = $packages["encoding/asn1"], big = $packages["math/big"], pkix = $packages["crypto/x509/pkix"], fmt = $packages["fmt"], sync = $packages["sync"], exec = $packages["os/exec"], ecdsa = $packages["crypto/ecdsa"], elliptic = $packages["crypto/elliptic"], net = $packages["net"], runtime = $packages["runtime"], time = $packages["time"], utf8 = $packages["unicode/utf8"], bytes = $packages["bytes"], crypto = $packages["crypto"], dsa = $packages["crypto/dsa"], sha1 = $packages["crypto/sha1"], sha256 = $packages["crypto/sha256"], sha512 = $packages["crypto/sha512"], strconv = $packages["strconv"], CertPool, pkcs1PrivateKey, pkcs1AdditionalRSAPrime, rsaPublicKey, pkcs8, ecPrivateKey, InvalidReason, CertificateInvalidError, HostnameError, UnknownAuthorityError, SystemRootsError, VerifyOptions, certificate, tbsCertificate, dsaAlgorithmParameters, dsaSignature, ecdsaSignature, validity, publicKeyInfo, authKeyId, SignatureAlgorithm, PublicKeyAlgorithm, KeyUsage, ExtKeyUsage, Certificate, ConstraintViolationError, UnhandledCriticalExtension, basicConstraints, policyInformation, nameConstraints, generalSubtree, authorityInfoAccess, distributionPoint, distributionPointName, once, systemRoots, oidSignatureMD2WithRSA, oidSignatureMD5WithRSA, oidSignatureSHA1WithRSA, oidSignatureSHA256WithRSA, oidSignatureSHA384WithRSA, oidSignatureSHA512WithRSA, oidSignatureDSAWithSHA1, oidSignatureDSAWithSHA256, oidSignatureECDSAWithSHA1, oidSignatureECDSAWithSHA256, oidSignatureECDSAWithSHA384, oidSignatureECDSAWithSHA512, signatureAlgorithmDetails, oidPublicKeyRSA, oidPublicKeyDSA, oidPublicKeyECDSA, oidNamedCurveP224, oidNamedCurveP256, oidNamedCurveP384, oidNamedCurveP521, oidExtKeyUsageAny, oidExtKeyUsageServerAuth, oidExtKeyUsageClientAuth, oidExtKeyUsageCodeSigning, oidExtKeyUsageEmailProtection, oidExtKeyUsageIPSECEndSystem, oidExtKeyUsageIPSECTunnel, oidExtKeyUsageIPSECUser, oidExtKeyUsageTimeStamping, oidExtKeyUsageOCSPSigning, oidExtKeyUsageMicrosoftServerGatedCrypto, oidExtKeyUsageNetscapeServerGatedCrypto, extKeyUsageOIDs, entrustBrokenSPKI, oidExtensionAuthorityInfoAccess, oidAuthorityInfoAccessOcsp, oidAuthorityInfoAccessIssuers, NewCertPool, ParsePKCS1PrivateKey, ParsePKCS8PrivateKey, systemRootsPool, execSecurityRoots, initSystemRoots, ParseECPrivateKey, parseECPrivateKey, appendToFreshChain, matchHostnames, toLowerCaseASCII, checkChainForKeyUsage, getSignatureAlgorithmFromOID, getPublicKeyAlgorithmFromOID, namedCurveFromOID, extKeyUsageFromOID, parsePublicKey, parseSANExtension, parseCertificate, ParseCertificate;
	CertPool = $pkg.CertPool = $newType(0, "Struct", "x509.CertPool", "CertPool", "crypto/x509", function(bySubjectKeyId_, byName_, certs_) {
		this.$val = this;
		this.bySubjectKeyId = bySubjectKeyId_ !== undefined ? bySubjectKeyId_ : false;
		this.byName = byName_ !== undefined ? byName_ : false;
		this.certs = certs_ !== undefined ? certs_ : ($sliceType(($ptrType(Certificate)))).nil;
	});
	pkcs1PrivateKey = $pkg.pkcs1PrivateKey = $newType(0, "Struct", "x509.pkcs1PrivateKey", "pkcs1PrivateKey", "crypto/x509", function(Version_, N_, E_, D_, P_, Q_, Dp_, Dq_, Qinv_, AdditionalPrimes_) {
		this.$val = this;
		this.Version = Version_ !== undefined ? Version_ : 0;
		this.N = N_ !== undefined ? N_ : ($ptrType(big.Int)).nil;
		this.E = E_ !== undefined ? E_ : 0;
		this.D = D_ !== undefined ? D_ : ($ptrType(big.Int)).nil;
		this.P = P_ !== undefined ? P_ : ($ptrType(big.Int)).nil;
		this.Q = Q_ !== undefined ? Q_ : ($ptrType(big.Int)).nil;
		this.Dp = Dp_ !== undefined ? Dp_ : ($ptrType(big.Int)).nil;
		this.Dq = Dq_ !== undefined ? Dq_ : ($ptrType(big.Int)).nil;
		this.Qinv = Qinv_ !== undefined ? Qinv_ : ($ptrType(big.Int)).nil;
		this.AdditionalPrimes = AdditionalPrimes_ !== undefined ? AdditionalPrimes_ : ($sliceType(pkcs1AdditionalRSAPrime)).nil;
	});
	pkcs1AdditionalRSAPrime = $pkg.pkcs1AdditionalRSAPrime = $newType(0, "Struct", "x509.pkcs1AdditionalRSAPrime", "pkcs1AdditionalRSAPrime", "crypto/x509", function(Prime_, Exp_, Coeff_) {
		this.$val = this;
		this.Prime = Prime_ !== undefined ? Prime_ : ($ptrType(big.Int)).nil;
		this.Exp = Exp_ !== undefined ? Exp_ : ($ptrType(big.Int)).nil;
		this.Coeff = Coeff_ !== undefined ? Coeff_ : ($ptrType(big.Int)).nil;
	});
	rsaPublicKey = $pkg.rsaPublicKey = $newType(0, "Struct", "x509.rsaPublicKey", "rsaPublicKey", "crypto/x509", function(N_, E_) {
		this.$val = this;
		this.N = N_ !== undefined ? N_ : ($ptrType(big.Int)).nil;
		this.E = E_ !== undefined ? E_ : 0;
	});
	pkcs8 = $pkg.pkcs8 = $newType(0, "Struct", "x509.pkcs8", "pkcs8", "crypto/x509", function(Version_, Algo_, PrivateKey_) {
		this.$val = this;
		this.Version = Version_ !== undefined ? Version_ : 0;
		this.Algo = Algo_ !== undefined ? Algo_ : new pkix.AlgorithmIdentifier.Ptr();
		this.PrivateKey = PrivateKey_ !== undefined ? PrivateKey_ : ($sliceType($Uint8)).nil;
	});
	ecPrivateKey = $pkg.ecPrivateKey = $newType(0, "Struct", "x509.ecPrivateKey", "ecPrivateKey", "crypto/x509", function(Version_, PrivateKey_, NamedCurveOID_, PublicKey_) {
		this.$val = this;
		this.Version = Version_ !== undefined ? Version_ : 0;
		this.PrivateKey = PrivateKey_ !== undefined ? PrivateKey_ : ($sliceType($Uint8)).nil;
		this.NamedCurveOID = NamedCurveOID_ !== undefined ? NamedCurveOID_ : asn1.ObjectIdentifier.nil;
		this.PublicKey = PublicKey_ !== undefined ? PublicKey_ : new asn1.BitString.Ptr();
	});
	InvalidReason = $pkg.InvalidReason = $newType(4, "Int", "x509.InvalidReason", "InvalidReason", "crypto/x509", null);
	CertificateInvalidError = $pkg.CertificateInvalidError = $newType(0, "Struct", "x509.CertificateInvalidError", "CertificateInvalidError", "crypto/x509", function(Cert_, Reason_) {
		this.$val = this;
		this.Cert = Cert_ !== undefined ? Cert_ : ($ptrType(Certificate)).nil;
		this.Reason = Reason_ !== undefined ? Reason_ : 0;
	});
	HostnameError = $pkg.HostnameError = $newType(0, "Struct", "x509.HostnameError", "HostnameError", "crypto/x509", function(Certificate_, Host_) {
		this.$val = this;
		this.Certificate = Certificate_ !== undefined ? Certificate_ : ($ptrType(Certificate)).nil;
		this.Host = Host_ !== undefined ? Host_ : "";
	});
	UnknownAuthorityError = $pkg.UnknownAuthorityError = $newType(0, "Struct", "x509.UnknownAuthorityError", "UnknownAuthorityError", "crypto/x509", function(cert_, hintErr_, hintCert_) {
		this.$val = this;
		this.cert = cert_ !== undefined ? cert_ : ($ptrType(Certificate)).nil;
		this.hintErr = hintErr_ !== undefined ? hintErr_ : $ifaceNil;
		this.hintCert = hintCert_ !== undefined ? hintCert_ : ($ptrType(Certificate)).nil;
	});
	SystemRootsError = $pkg.SystemRootsError = $newType(0, "Struct", "x509.SystemRootsError", "SystemRootsError", "crypto/x509", function() {
		this.$val = this;
	});
	VerifyOptions = $pkg.VerifyOptions = $newType(0, "Struct", "x509.VerifyOptions", "VerifyOptions", "crypto/x509", function(DNSName_, Intermediates_, Roots_, CurrentTime_, KeyUsages_) {
		this.$val = this;
		this.DNSName = DNSName_ !== undefined ? DNSName_ : "";
		this.Intermediates = Intermediates_ !== undefined ? Intermediates_ : ($ptrType(CertPool)).nil;
		this.Roots = Roots_ !== undefined ? Roots_ : ($ptrType(CertPool)).nil;
		this.CurrentTime = CurrentTime_ !== undefined ? CurrentTime_ : new time.Time.Ptr();
		this.KeyUsages = KeyUsages_ !== undefined ? KeyUsages_ : ($sliceType(ExtKeyUsage)).nil;
	});
	certificate = $pkg.certificate = $newType(0, "Struct", "x509.certificate", "certificate", "crypto/x509", function(Raw_, TBSCertificate_, SignatureAlgorithm_, SignatureValue_) {
		this.$val = this;
		this.Raw = Raw_ !== undefined ? Raw_ : asn1.RawContent.nil;
		this.TBSCertificate = TBSCertificate_ !== undefined ? TBSCertificate_ : new tbsCertificate.Ptr();
		this.SignatureAlgorithm = SignatureAlgorithm_ !== undefined ? SignatureAlgorithm_ : new pkix.AlgorithmIdentifier.Ptr();
		this.SignatureValue = SignatureValue_ !== undefined ? SignatureValue_ : new asn1.BitString.Ptr();
	});
	tbsCertificate = $pkg.tbsCertificate = $newType(0, "Struct", "x509.tbsCertificate", "tbsCertificate", "crypto/x509", function(Raw_, Version_, SerialNumber_, SignatureAlgorithm_, Issuer_, Validity_, Subject_, PublicKey_, UniqueId_, SubjectUniqueId_, Extensions_) {
		this.$val = this;
		this.Raw = Raw_ !== undefined ? Raw_ : asn1.RawContent.nil;
		this.Version = Version_ !== undefined ? Version_ : 0;
		this.SerialNumber = SerialNumber_ !== undefined ? SerialNumber_ : ($ptrType(big.Int)).nil;
		this.SignatureAlgorithm = SignatureAlgorithm_ !== undefined ? SignatureAlgorithm_ : new pkix.AlgorithmIdentifier.Ptr();
		this.Issuer = Issuer_ !== undefined ? Issuer_ : new asn1.RawValue.Ptr();
		this.Validity = Validity_ !== undefined ? Validity_ : new validity.Ptr();
		this.Subject = Subject_ !== undefined ? Subject_ : new asn1.RawValue.Ptr();
		this.PublicKey = PublicKey_ !== undefined ? PublicKey_ : new publicKeyInfo.Ptr();
		this.UniqueId = UniqueId_ !== undefined ? UniqueId_ : new asn1.BitString.Ptr();
		this.SubjectUniqueId = SubjectUniqueId_ !== undefined ? SubjectUniqueId_ : new asn1.BitString.Ptr();
		this.Extensions = Extensions_ !== undefined ? Extensions_ : ($sliceType(pkix.Extension)).nil;
	});
	dsaAlgorithmParameters = $pkg.dsaAlgorithmParameters = $newType(0, "Struct", "x509.dsaAlgorithmParameters", "dsaAlgorithmParameters", "crypto/x509", function(P_, Q_, G_) {
		this.$val = this;
		this.P = P_ !== undefined ? P_ : ($ptrType(big.Int)).nil;
		this.Q = Q_ !== undefined ? Q_ : ($ptrType(big.Int)).nil;
		this.G = G_ !== undefined ? G_ : ($ptrType(big.Int)).nil;
	});
	dsaSignature = $pkg.dsaSignature = $newType(0, "Struct", "x509.dsaSignature", "dsaSignature", "crypto/x509", function(R_, S_) {
		this.$val = this;
		this.R = R_ !== undefined ? R_ : ($ptrType(big.Int)).nil;
		this.S = S_ !== undefined ? S_ : ($ptrType(big.Int)).nil;
	});
	ecdsaSignature = $pkg.ecdsaSignature = $newType(0, "Struct", "x509.ecdsaSignature", "ecdsaSignature", "crypto/x509", function(R_, S_) {
		this.$val = this;
		this.R = R_ !== undefined ? R_ : ($ptrType(big.Int)).nil;
		this.S = S_ !== undefined ? S_ : ($ptrType(big.Int)).nil;
	});
	validity = $pkg.validity = $newType(0, "Struct", "x509.validity", "validity", "crypto/x509", function(NotBefore_, NotAfter_) {
		this.$val = this;
		this.NotBefore = NotBefore_ !== undefined ? NotBefore_ : new time.Time.Ptr();
		this.NotAfter = NotAfter_ !== undefined ? NotAfter_ : new time.Time.Ptr();
	});
	publicKeyInfo = $pkg.publicKeyInfo = $newType(0, "Struct", "x509.publicKeyInfo", "publicKeyInfo", "crypto/x509", function(Raw_, Algorithm_, PublicKey_) {
		this.$val = this;
		this.Raw = Raw_ !== undefined ? Raw_ : asn1.RawContent.nil;
		this.Algorithm = Algorithm_ !== undefined ? Algorithm_ : new pkix.AlgorithmIdentifier.Ptr();
		this.PublicKey = PublicKey_ !== undefined ? PublicKey_ : new asn1.BitString.Ptr();
	});
	authKeyId = $pkg.authKeyId = $newType(0, "Struct", "x509.authKeyId", "authKeyId", "crypto/x509", function(Id_) {
		this.$val = this;
		this.Id = Id_ !== undefined ? Id_ : ($sliceType($Uint8)).nil;
	});
	SignatureAlgorithm = $pkg.SignatureAlgorithm = $newType(4, "Int", "x509.SignatureAlgorithm", "SignatureAlgorithm", "crypto/x509", null);
	PublicKeyAlgorithm = $pkg.PublicKeyAlgorithm = $newType(4, "Int", "x509.PublicKeyAlgorithm", "PublicKeyAlgorithm", "crypto/x509", null);
	KeyUsage = $pkg.KeyUsage = $newType(4, "Int", "x509.KeyUsage", "KeyUsage", "crypto/x509", null);
	ExtKeyUsage = $pkg.ExtKeyUsage = $newType(4, "Int", "x509.ExtKeyUsage", "ExtKeyUsage", "crypto/x509", null);
	Certificate = $pkg.Certificate = $newType(0, "Struct", "x509.Certificate", "Certificate", "crypto/x509", function(Raw_, RawTBSCertificate_, RawSubjectPublicKeyInfo_, RawSubject_, RawIssuer_, Signature_, SignatureAlgorithm_, PublicKeyAlgorithm_, PublicKey_, Version_, SerialNumber_, Issuer_, Subject_, NotBefore_, NotAfter_, KeyUsage_, Extensions_, ExtraExtensions_, ExtKeyUsage_, UnknownExtKeyUsage_, BasicConstraintsValid_, IsCA_, MaxPathLen_, SubjectKeyId_, AuthorityKeyId_, OCSPServer_, IssuingCertificateURL_, DNSNames_, EmailAddresses_, IPAddresses_, PermittedDNSDomainsCritical_, PermittedDNSDomains_, CRLDistributionPoints_, PolicyIdentifiers_) {
		this.$val = this;
		this.Raw = Raw_ !== undefined ? Raw_ : ($sliceType($Uint8)).nil;
		this.RawTBSCertificate = RawTBSCertificate_ !== undefined ? RawTBSCertificate_ : ($sliceType($Uint8)).nil;
		this.RawSubjectPublicKeyInfo = RawSubjectPublicKeyInfo_ !== undefined ? RawSubjectPublicKeyInfo_ : ($sliceType($Uint8)).nil;
		this.RawSubject = RawSubject_ !== undefined ? RawSubject_ : ($sliceType($Uint8)).nil;
		this.RawIssuer = RawIssuer_ !== undefined ? RawIssuer_ : ($sliceType($Uint8)).nil;
		this.Signature = Signature_ !== undefined ? Signature_ : ($sliceType($Uint8)).nil;
		this.SignatureAlgorithm = SignatureAlgorithm_ !== undefined ? SignatureAlgorithm_ : 0;
		this.PublicKeyAlgorithm = PublicKeyAlgorithm_ !== undefined ? PublicKeyAlgorithm_ : 0;
		this.PublicKey = PublicKey_ !== undefined ? PublicKey_ : $ifaceNil;
		this.Version = Version_ !== undefined ? Version_ : 0;
		this.SerialNumber = SerialNumber_ !== undefined ? SerialNumber_ : ($ptrType(big.Int)).nil;
		this.Issuer = Issuer_ !== undefined ? Issuer_ : new pkix.Name.Ptr();
		this.Subject = Subject_ !== undefined ? Subject_ : new pkix.Name.Ptr();
		this.NotBefore = NotBefore_ !== undefined ? NotBefore_ : new time.Time.Ptr();
		this.NotAfter = NotAfter_ !== undefined ? NotAfter_ : new time.Time.Ptr();
		this.KeyUsage = KeyUsage_ !== undefined ? KeyUsage_ : 0;
		this.Extensions = Extensions_ !== undefined ? Extensions_ : ($sliceType(pkix.Extension)).nil;
		this.ExtraExtensions = ExtraExtensions_ !== undefined ? ExtraExtensions_ : ($sliceType(pkix.Extension)).nil;
		this.ExtKeyUsage = ExtKeyUsage_ !== undefined ? ExtKeyUsage_ : ($sliceType(ExtKeyUsage)).nil;
		this.UnknownExtKeyUsage = UnknownExtKeyUsage_ !== undefined ? UnknownExtKeyUsage_ : ($sliceType(asn1.ObjectIdentifier)).nil;
		this.BasicConstraintsValid = BasicConstraintsValid_ !== undefined ? BasicConstraintsValid_ : false;
		this.IsCA = IsCA_ !== undefined ? IsCA_ : false;
		this.MaxPathLen = MaxPathLen_ !== undefined ? MaxPathLen_ : 0;
		this.SubjectKeyId = SubjectKeyId_ !== undefined ? SubjectKeyId_ : ($sliceType($Uint8)).nil;
		this.AuthorityKeyId = AuthorityKeyId_ !== undefined ? AuthorityKeyId_ : ($sliceType($Uint8)).nil;
		this.OCSPServer = OCSPServer_ !== undefined ? OCSPServer_ : ($sliceType($String)).nil;
		this.IssuingCertificateURL = IssuingCertificateURL_ !== undefined ? IssuingCertificateURL_ : ($sliceType($String)).nil;
		this.DNSNames = DNSNames_ !== undefined ? DNSNames_ : ($sliceType($String)).nil;
		this.EmailAddresses = EmailAddresses_ !== undefined ? EmailAddresses_ : ($sliceType($String)).nil;
		this.IPAddresses = IPAddresses_ !== undefined ? IPAddresses_ : ($sliceType(net.IP)).nil;
		this.PermittedDNSDomainsCritical = PermittedDNSDomainsCritical_ !== undefined ? PermittedDNSDomainsCritical_ : false;
		this.PermittedDNSDomains = PermittedDNSDomains_ !== undefined ? PermittedDNSDomains_ : ($sliceType($String)).nil;
		this.CRLDistributionPoints = CRLDistributionPoints_ !== undefined ? CRLDistributionPoints_ : ($sliceType($String)).nil;
		this.PolicyIdentifiers = PolicyIdentifiers_ !== undefined ? PolicyIdentifiers_ : ($sliceType(asn1.ObjectIdentifier)).nil;
	});
	ConstraintViolationError = $pkg.ConstraintViolationError = $newType(0, "Struct", "x509.ConstraintViolationError", "ConstraintViolationError", "crypto/x509", function() {
		this.$val = this;
	});
	UnhandledCriticalExtension = $pkg.UnhandledCriticalExtension = $newType(0, "Struct", "x509.UnhandledCriticalExtension", "UnhandledCriticalExtension", "crypto/x509", function() {
		this.$val = this;
	});
	basicConstraints = $pkg.basicConstraints = $newType(0, "Struct", "x509.basicConstraints", "basicConstraints", "crypto/x509", function(IsCA_, MaxPathLen_) {
		this.$val = this;
		this.IsCA = IsCA_ !== undefined ? IsCA_ : false;
		this.MaxPathLen = MaxPathLen_ !== undefined ? MaxPathLen_ : 0;
	});
	policyInformation = $pkg.policyInformation = $newType(0, "Struct", "x509.policyInformation", "policyInformation", "crypto/x509", function(Policy_) {
		this.$val = this;
		this.Policy = Policy_ !== undefined ? Policy_ : asn1.ObjectIdentifier.nil;
	});
	nameConstraints = $pkg.nameConstraints = $newType(0, "Struct", "x509.nameConstraints", "nameConstraints", "crypto/x509", function(Permitted_, Excluded_) {
		this.$val = this;
		this.Permitted = Permitted_ !== undefined ? Permitted_ : ($sliceType(generalSubtree)).nil;
		this.Excluded = Excluded_ !== undefined ? Excluded_ : ($sliceType(generalSubtree)).nil;
	});
	generalSubtree = $pkg.generalSubtree = $newType(0, "Struct", "x509.generalSubtree", "generalSubtree", "crypto/x509", function(Name_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
	});
	authorityInfoAccess = $pkg.authorityInfoAccess = $newType(0, "Struct", "x509.authorityInfoAccess", "authorityInfoAccess", "crypto/x509", function(Method_, Location_) {
		this.$val = this;
		this.Method = Method_ !== undefined ? Method_ : asn1.ObjectIdentifier.nil;
		this.Location = Location_ !== undefined ? Location_ : new asn1.RawValue.Ptr();
	});
	distributionPoint = $pkg.distributionPoint = $newType(0, "Struct", "x509.distributionPoint", "distributionPoint", "crypto/x509", function(DistributionPoint_, Reason_, CRLIssuer_) {
		this.$val = this;
		this.DistributionPoint = DistributionPoint_ !== undefined ? DistributionPoint_ : new distributionPointName.Ptr();
		this.Reason = Reason_ !== undefined ? Reason_ : new asn1.BitString.Ptr();
		this.CRLIssuer = CRLIssuer_ !== undefined ? CRLIssuer_ : new asn1.RawValue.Ptr();
	});
	distributionPointName = $pkg.distributionPointName = $newType(0, "Struct", "x509.distributionPointName", "distributionPointName", "crypto/x509", function(FullName_, RelativeName_) {
		this.$val = this;
		this.FullName = FullName_ !== undefined ? FullName_ : new asn1.RawValue.Ptr();
		this.RelativeName = RelativeName_ !== undefined ? RelativeName_ : pkix.RDNSequence.nil;
	});
	NewCertPool = $pkg.NewCertPool = function() {
		return new CertPool.Ptr(new $Map(), new $Map(), ($sliceType(($ptrType(Certificate)))).nil);
	};
	CertPool.Ptr.prototype.findVerifiedParents = function(cert) {
		var parents = ($sliceType($Int)).nil, errCert = ($ptrType(Certificate)).nil, err = $ifaceNil, s, candidates, _entry, _entry$1, _ref, _i, c, x, x$1;
		s = this;
		if (s === ($ptrType(CertPool)).nil) {
			return [parents, errCert, err];
		}
		candidates = ($sliceType($Int)).nil;
		if (cert.AuthorityKeyId.$length > 0) {
			candidates = (_entry = s.bySubjectKeyId[$bytesToString(cert.AuthorityKeyId)], _entry !== undefined ? _entry.v : ($sliceType($Int)).nil);
		}
		if (candidates.$length === 0) {
			candidates = (_entry$1 = s.byName[$bytesToString(cert.RawIssuer)], _entry$1 !== undefined ? _entry$1.v : ($sliceType($Int)).nil);
		}
		_ref = candidates;
		_i = 0;
		while (_i < _ref.$length) {
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			err = cert.CheckSignatureFrom((x = s.certs, ((c < 0 || c >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + c])));
			if ($interfaceIsEqual(err, $ifaceNil)) {
				parents = $append(parents, c);
			} else {
				errCert = (x$1 = s.certs, ((c < 0 || c >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + c]));
			}
			_i++;
		}
		return [parents, errCert, err];
	};
	CertPool.prototype.findVerifiedParents = function(cert) { return this.$val.findVerifiedParents(cert); };
	CertPool.Ptr.prototype.AddCert = function(cert) {
		var s, _ref, _i, c, n, keyId, _key, _entry, name, _key$1, _entry$1;
		s = this;
		if (cert === ($ptrType(Certificate)).nil) {
			$panic(new $String("adding nil Certificate to CertPool"));
		}
		_ref = s.certs;
		_i = 0;
		while (_i < _ref.$length) {
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (c.Equal(cert)) {
				return;
			}
			_i++;
		}
		n = s.certs.$length;
		s.certs = $append(s.certs, cert);
		if (cert.SubjectKeyId.$length > 0) {
			keyId = $bytesToString(cert.SubjectKeyId);
			_key = keyId; (s.bySubjectKeyId || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: $append((_entry = s.bySubjectKeyId[keyId], _entry !== undefined ? _entry.v : ($sliceType($Int)).nil), n) };
		}
		name = $bytesToString(cert.RawSubject);
		_key$1 = name; (s.byName || $throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: $append((_entry$1 = s.byName[name], _entry$1 !== undefined ? _entry$1.v : ($sliceType($Int)).nil), n) };
	};
	CertPool.prototype.AddCert = function(cert) { return this.$val.AddCert(cert); };
	CertPool.Ptr.prototype.AppendCertsFromPEM = function(pemCerts) {
		var ok = false, s, block, _tuple, _tuple$1, cert, err;
		s = this;
		while (pemCerts.$length > 0) {
			block = ($ptrType(pem.Block)).nil;
			_tuple = pem.Decode(pemCerts); block = _tuple[0]; pemCerts = _tuple[1];
			if (block === ($ptrType(pem.Block)).nil) {
				break;
			}
			if (!(block.Type === "CERTIFICATE") || !(($keys(block.Headers).length === 0))) {
				continue;
			}
			_tuple$1 = ParseCertificate(block.Bytes); cert = _tuple$1[0]; err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				continue;
			}
			s.AddCert(cert);
			ok = true;
		}
		return ok;
	};
	CertPool.prototype.AppendCertsFromPEM = function(pemCerts) { return this.$val.AppendCertsFromPEM(pemCerts); };
	CertPool.Ptr.prototype.Subjects = function() {
		var res = ($sliceType(($sliceType($Uint8)))).nil, s, _ref, _i, i, c;
		s = this;
		res = ($sliceType(($sliceType($Uint8)))).make(s.certs.$length);
		_ref = s.certs;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			(i < 0 || i >= res.$length) ? $throwRuntimeError("index out of range") : res.$array[res.$offset + i] = c.RawSubject;
			_i++;
		}
		return res;
	};
	CertPool.prototype.Subjects = function() { return this.$val.Subjects(); };
	ParsePKCS1PrivateKey = $pkg.ParsePKCS1PrivateKey = function(der) {
		var key = ($ptrType(rsa.PrivateKey)).nil, err = $ifaceNil, priv, _tuple, rest, x, _tmp, _tmp$1, _tmp$2, _tmp$3, x$1, x$2, _ref, _i, i, a, _tmp$4, _tmp$5, x$3, x$4, _tmp$6, _tmp$7;
		priv = new pkcs1PrivateKey.Ptr(); $copy(priv, new pkcs1PrivateKey.Ptr(), pkcs1PrivateKey);
		_tuple = asn1.Unmarshal(der, priv); rest = _tuple[0]; err = _tuple[1];
		if (rest.$length > 0) {
			err = (x = new asn1.SyntaxError.Ptr("trailing data"), new x.constructor.Struct(x));
			return [key, err];
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [key, err];
		}
		if (priv.Version > 1) {
			_tmp = ($ptrType(rsa.PrivateKey)).nil; _tmp$1 = errors.New("x509: unsupported private key version"); key = _tmp; err = _tmp$1;
			return [key, err];
		}
		if (priv.N.Sign() <= 0 || priv.D.Sign() <= 0 || priv.P.Sign() <= 0 || priv.Q.Sign() <= 0) {
			_tmp$2 = ($ptrType(rsa.PrivateKey)).nil; _tmp$3 = errors.New("x509: private key contains zero or negative value"); key = _tmp$2; err = _tmp$3;
			return [key, err];
		}
		key = new rsa.PrivateKey.Ptr();
		$copy(key.PublicKey, new rsa.PublicKey.Ptr(priv.N, priv.E), rsa.PublicKey);
		key.D = priv.D;
		key.Primes = ($sliceType(($ptrType(big.Int)))).make((2 + priv.AdditionalPrimes.$length >> 0));
		(x$1 = key.Primes, (0 < 0 || 0 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0] = priv.P);
		(x$2 = key.Primes, (1 < 0 || 1 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 1] = priv.Q);
		_ref = priv.AdditionalPrimes;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			a = new pkcs1AdditionalRSAPrime.Ptr(); $copy(a, ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), pkcs1AdditionalRSAPrime);
			if (a.Prime.Sign() <= 0) {
				_tmp$4 = ($ptrType(rsa.PrivateKey)).nil; _tmp$5 = errors.New("x509: private key contains zero or negative prime"); key = _tmp$4; err = _tmp$5;
				return [key, err];
			}
			(x$3 = key.Primes, x$4 = i + 2 >> 0, (x$4 < 0 || x$4 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + x$4] = a.Prime);
			_i++;
		}
		err = key.Validate();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$6 = ($ptrType(rsa.PrivateKey)).nil; _tmp$7 = err; key = _tmp$6; err = _tmp$7;
			return [key, err];
		}
		key.Precompute();
		return [key, err];
	};
	ParsePKCS8PrivateKey = $pkg.ParsePKCS8PrivateKey = function(der) {
		var key = $ifaceNil, err = $ifaceNil, privKey, _tuple, err$1, _tmp, _tmp$1, _tuple$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, bytes$1, namedCurveOID, _tuple$2, err$2, _tuple$3, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tmp$10, _tmp$11;
		privKey = new pkcs8.Ptr(); $copy(privKey, new pkcs8.Ptr(), pkcs8);
		_tuple = asn1.Unmarshal(der, privKey); err$1 = _tuple[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = $ifaceNil; _tmp$1 = err$1; key = _tmp; err = _tmp$1;
			return [key, err];
		}
		if (privKey.Algo.Algorithm.Equal(oidPublicKeyRSA)) {
			_tuple$1 = ParsePKCS1PrivateKey(privKey.PrivateKey); key = _tuple$1[0]; err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$2 = $ifaceNil; _tmp$3 = errors.New("x509: failed to parse RSA private key embedded in PKCS#8: " + err.Error()); key = _tmp$2; err = _tmp$3;
				return [key, err];
			}
			_tmp$4 = key; _tmp$5 = $ifaceNil; key = _tmp$4; err = _tmp$5;
			return [key, err];
		} else if (privKey.Algo.Algorithm.Equal(oidPublicKeyECDSA)) {
			bytes$1 = privKey.Algo.Parameters.FullBytes;
			namedCurveOID = $newDataPointer(asn1.ObjectIdentifier.nil, ($ptrType(asn1.ObjectIdentifier)));
			_tuple$2 = asn1.Unmarshal(bytes$1, namedCurveOID); err$2 = _tuple$2[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				namedCurveOID = ($ptrType(asn1.ObjectIdentifier)).nil;
			}
			_tuple$3 = parseECPrivateKey(namedCurveOID, privKey.PrivateKey); key = _tuple$3[0]; err = _tuple$3[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$6 = $ifaceNil; _tmp$7 = errors.New("x509: failed to parse EC private key embedded in PKCS#8: " + err.Error()); key = _tmp$6; err = _tmp$7;
				return [key, err];
			}
			_tmp$8 = key; _tmp$9 = $ifaceNil; key = _tmp$8; err = _tmp$9;
			return [key, err];
		} else {
			_tmp$10 = $ifaceNil; _tmp$11 = fmt.Errorf("x509: PKCS#8 wrapping contained private key with unknown algorithm: %v", new ($sliceType($emptyInterface))([privKey.Algo.Algorithm])); key = _tmp$10; err = _tmp$11;
			return [key, err];
		}
	};
	systemRootsPool = function() {
		once.Do(initSystemRoots);
		return systemRoots;
	};
	Certificate.Ptr.prototype.systemVerify = function(opts) {
		var chains = ($sliceType(($sliceType(($ptrType(Certificate)))))).nil, err = $ifaceNil, c, _tmp, _tmp$1;
		c = this;
		_tmp = ($sliceType(($sliceType(($ptrType(Certificate)))))).nil; _tmp$1 = $ifaceNil; chains = _tmp; err = _tmp$1;
		return [chains, err];
	};
	Certificate.prototype.systemVerify = function(opts) { return this.$val.systemVerify(opts); };
	execSecurityRoots = function($b) {
		var $this = this, $args = arguments, $r, $s = 0, cmd, _tuple, _r, data, err, roots;
		/* */ if(!$b) { $nonblockingCall(); }; var $blocking_execSecurityRoots = function() { s: while (true) { switch ($s) { case 0:
		cmd = exec.Command("/usr/bin/security", new ($sliceType($String))(["find-certificate", "-a", "-p", "/System/Library/Keychains/SystemRootCertificates.keychain"]));
		_r = cmd.Output(true); /* */ $s = 1; case 1: if (_r && _r.$blocking) { _r = _r(); }
		_tuple = _r; data = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($ptrType(CertPool)).nil, err];
		}
		roots = NewCertPool();
		roots.AppendCertsFromPEM(data);
		return [roots, $ifaceNil];
		/* */ case -1: } return; } }; $blocking_execSecurityRoots.$blocking = true; return $blocking_execSecurityRoots;
	};
	initSystemRoots = function($b) {
		var $this = this, $args = arguments, $r, $s = 0, _tuple, _r;
		/* */ if(!$b) { $nonblockingCall(); }; var $blocking_initSystemRoots = function() { s: while (true) { switch ($s) { case 0:
		_r = execSecurityRoots(true); /* */ $s = 1; case 1: if (_r && _r.$blocking) { _r = _r(); }
		_tuple = _r; systemRoots = _tuple[0];
		/* */ case -1: } return; } }; $blocking_initSystemRoots.$blocking = true; return $blocking_initSystemRoots;
	};
	ParseECPrivateKey = $pkg.ParseECPrivateKey = function(der) {
		var key = ($ptrType(ecdsa.PrivateKey)).nil, err = $ifaceNil, _tuple;
		_tuple = parseECPrivateKey(($ptrType(asn1.ObjectIdentifier)).nil, der); key = _tuple[0]; err = _tuple[1];
		return [key, err];
	};
	parseECPrivateKey = function(namedCurveOID, der) {
		var key = ($ptrType(ecdsa.PrivateKey)).nil, err = $ifaceNil, privKey, _tuple, err$1, _tmp, _tmp$1, _tmp$2, _tmp$3, curve, _tmp$4, _tmp$5, k, _tmp$6, _tmp$7, priv, _tuple$1, _tmp$8, _tmp$9;
		privKey = new ecPrivateKey.Ptr(); $copy(privKey, new ecPrivateKey.Ptr(), ecPrivateKey);
		_tuple = asn1.Unmarshal(der, privKey); err$1 = _tuple[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			_tmp = ($ptrType(ecdsa.PrivateKey)).nil; _tmp$1 = errors.New("x509: failed to parse EC private key: " + err$1.Error()); key = _tmp; err = _tmp$1;
			return [key, err];
		}
		if (!((privKey.Version === 1))) {
			_tmp$2 = ($ptrType(ecdsa.PrivateKey)).nil; _tmp$3 = fmt.Errorf("x509: unknown EC private key version %d", new ($sliceType($emptyInterface))([new $Int(privKey.Version)])); key = _tmp$2; err = _tmp$3;
			return [key, err];
		}
		curve = $ifaceNil;
		if (!($pointerIsEqual(namedCurveOID, ($ptrType(asn1.ObjectIdentifier)).nil))) {
			curve = namedCurveFromOID(namedCurveOID.$get());
		} else {
			curve = namedCurveFromOID(privKey.NamedCurveOID);
		}
		if ($interfaceIsEqual(curve, $ifaceNil)) {
			_tmp$4 = ($ptrType(ecdsa.PrivateKey)).nil; _tmp$5 = errors.New("x509: unknown elliptic curve"); key = _tmp$4; err = _tmp$5;
			return [key, err];
		}
		k = new big.Int.Ptr().SetBytes(privKey.PrivateKey);
		if (k.Cmp(curve.Params().N) >= 0) {
			_tmp$6 = ($ptrType(ecdsa.PrivateKey)).nil; _tmp$7 = errors.New("x509: invalid elliptic curve private key value"); key = _tmp$6; err = _tmp$7;
			return [key, err];
		}
		priv = new ecdsa.PrivateKey.Ptr();
		priv.PublicKey.Curve = curve;
		priv.D = k;
		_tuple$1 = curve.ScalarBaseMult(privKey.PrivateKey); priv.PublicKey.X = _tuple$1[0]; priv.PublicKey.Y = _tuple$1[1];
		_tmp$8 = priv; _tmp$9 = $ifaceNil; key = _tmp$8; err = _tmp$9;
		return [key, err];
	};
	CertificateInvalidError.Ptr.prototype.Error = function() {
		var e, _ref;
		e = new CertificateInvalidError.Ptr(); $copy(e, this, CertificateInvalidError);
		_ref = e.Reason;
		if (_ref === 0) {
			return "x509: certificate is not authorized to sign other certificates";
		} else if (_ref === 1) {
			return "x509: certificate has expired or is not yet valid";
		} else if (_ref === 2) {
			return "x509: a root or intermediate certificate is not authorized to sign in this domain";
		} else if (_ref === 3) {
			return "x509: too many intermediates for path length constraint";
		} else if (_ref === 4) {
			return "x509: certificate specifies an incompatible key usage";
		}
		return "x509: unknown error";
	};
	CertificateInvalidError.prototype.Error = function() { return this.$val.Error(); };
	HostnameError.Ptr.prototype.Error = function() {
		var h, c, valid, ip, _ref, _i, san;
		h = new HostnameError.Ptr(); $copy(h, this, HostnameError);
		c = h.Certificate;
		valid = "";
		ip = net.ParseIP(h.Host);
		if (!(ip === net.IP.nil)) {
			if (c.IPAddresses.$length === 0) {
				return "x509: cannot validate certificate for " + h.Host + " because it doesn't contain any IP SANs";
			}
			_ref = c.IPAddresses;
			_i = 0;
			while (_i < _ref.$length) {
				san = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (valid.length > 0) {
					valid = valid + (", ");
				}
				valid = valid + (san.String());
				_i++;
			}
		} else {
			if (c.DNSNames.$length > 0) {
				valid = strings.Join(c.DNSNames, ", ");
			} else {
				valid = c.Subject.CommonName;
			}
		}
		return "x509: certificate is valid for " + valid + ", not " + h.Host;
	};
	HostnameError.prototype.Error = function() { return this.$val.Error(); };
	UnknownAuthorityError.Ptr.prototype.Error = function() {
		var e, s, certName, x;
		e = new UnknownAuthorityError.Ptr(); $copy(e, this, UnknownAuthorityError);
		s = "x509: certificate signed by unknown authority";
		if (!($interfaceIsEqual(e.hintErr, $ifaceNil))) {
			certName = e.hintCert.Subject.CommonName;
			if (certName.length === 0) {
				if (e.hintCert.Subject.Organization.$length > 0) {
					certName = (x = e.hintCert.Subject.Organization, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
				}
				certName = "serial:" + e.hintCert.SerialNumber.String();
			}
			s = s + (fmt.Sprintf(" (possibly because of %q while trying to verify candidate authority certificate %q)", new ($sliceType($emptyInterface))([e.hintErr, new $String(certName)])));
		}
		return s;
	};
	UnknownAuthorityError.prototype.Error = function() { return this.$val.Error(); };
	SystemRootsError.Ptr.prototype.Error = function() {
		var e;
		e = new SystemRootsError.Ptr(); $copy(e, this, SystemRootsError);
		return "x509: failed to load system roots and no roots provided";
	};
	SystemRootsError.prototype.Error = function() { return this.$val.Error(); };
	Certificate.Ptr.prototype.isValid = function(certType, currentChain, opts) {
		var c, now, x, ok, _ref, _i, domain, x$1, x$2, numIntermediates, x$3;
		c = this;
		now = new time.Time.Ptr(); $copy(now, opts.CurrentTime, time.Time);
		if (now.IsZero()) {
			$copy(now, time.Now(), time.Time);
		}
		if (now.Before($clone(c.NotBefore, time.Time)) || now.After($clone(c.NotAfter, time.Time))) {
			return (x = new CertificateInvalidError.Ptr(c, 1), new x.constructor.Struct(x));
		}
		if (c.PermittedDNSDomains.$length > 0) {
			ok = false;
			_ref = c.PermittedDNSDomains;
			_i = 0;
			while (_i < _ref.$length) {
				domain = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (opts.DNSName === domain || (strings.HasSuffix(opts.DNSName, domain) && opts.DNSName.length >= (1 + domain.length >> 0) && (opts.DNSName.charCodeAt(((opts.DNSName.length - domain.length >> 0) - 1 >> 0)) === 46))) {
					ok = true;
					break;
				}
				_i++;
			}
			if (!ok) {
				return (x$1 = new CertificateInvalidError.Ptr(c, 2), new x$1.constructor.Struct(x$1));
			}
		}
		if ((certType === 1) && (!c.BasicConstraintsValid || !c.IsCA)) {
			return (x$2 = new CertificateInvalidError.Ptr(c, 0), new x$2.constructor.Struct(x$2));
		}
		if (c.BasicConstraintsValid && c.MaxPathLen >= 0) {
			numIntermediates = currentChain.$length - 1 >> 0;
			if (numIntermediates > c.MaxPathLen) {
				return (x$3 = new CertificateInvalidError.Ptr(c, 3), new x$3.constructor.Struct(x$3));
			}
		}
		return $ifaceNil;
	};
	Certificate.prototype.isValid = function(certType, currentChain, opts) { return this.$val.isValid(certType, currentChain, opts); };
	Certificate.Ptr.prototype.Verify = function(opts) {
		var chains = ($sliceType(($sliceType(($ptrType(Certificate)))))).nil, err = $ifaceNil, c, _tuple, _tmp, _tmp$1, x, _tuple$1, candidateChains, keyUsages, _ref, _i, usage, _ref$1, _i$1, candidate, x$1;
		c = this;
		if (opts.Roots === ($ptrType(CertPool)).nil && false) {
			_tuple = c.systemVerify(opts); chains = _tuple[0]; err = _tuple[1];
			return [chains, err];
		}
		if (opts.Roots === ($ptrType(CertPool)).nil) {
			opts.Roots = systemRootsPool();
			if (opts.Roots === ($ptrType(CertPool)).nil) {
				_tmp = ($sliceType(($sliceType(($ptrType(Certificate)))))).nil; _tmp$1 = (x = new SystemRootsError.Ptr(), new x.constructor.Struct(x)); chains = _tmp; err = _tmp$1;
				return [chains, err];
			}
		}
		err = c.isValid(0, ($sliceType(($ptrType(Certificate)))).nil, opts);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [chains, err];
		}
		if (opts.DNSName.length > 0) {
			err = c.VerifyHostname(opts.DNSName);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [chains, err];
			}
		}
		_tuple$1 = c.buildChains(new $Map(), new ($sliceType(($ptrType(Certificate))))([c]), opts); candidateChains = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [chains, err];
		}
		keyUsages = opts.KeyUsages;
		if (keyUsages.$length === 0) {
			keyUsages = new ($sliceType(ExtKeyUsage))([1]);
		}
		_ref = keyUsages;
		_i = 0;
		while (_i < _ref.$length) {
			usage = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (usage === 0) {
				chains = candidateChains;
				return [chains, err];
			}
			_i++;
		}
		_ref$1 = candidateChains;
		_i$1 = 0;
		while (_i$1 < _ref$1.$length) {
			candidate = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			if (checkChainForKeyUsage(candidate, keyUsages)) {
				chains = $append(chains, candidate);
			}
			_i$1++;
		}
		if (chains.$length === 0) {
			err = (x$1 = new CertificateInvalidError.Ptr(c, 4), new x$1.constructor.Struct(x$1));
		}
		return [chains, err];
	};
	Certificate.prototype.Verify = function(opts) { return this.$val.Verify(opts); };
	appendToFreshChain = function(chain, cert) {
		var n, x;
		n = ($sliceType(($ptrType(Certificate)))).make((chain.$length + 1 >> 0));
		$copySlice(n, chain);
		(x = chain.$length, (x < 0 || x >= n.$length) ? $throwRuntimeError("index out of range") : n.$array[n.$offset + x] = cert);
		return n;
	};
	Certificate.Ptr.prototype.buildChains = function(cache, currentChain, opts) {
		var chains = ($sliceType(($sliceType(($ptrType(Certificate)))))).nil, err = $ifaceNil, c, _tuple, possibleRoots, failedRoot, rootErr, _ref, _i, rootNum, x, root, _tuple$1, possibleIntermediates, failedIntermediate, intermediateErr, _ref$1, _i$1, intermediateNum, x$1, intermediate, _ref$2, _i$2, cert, childChains, _tuple$2, _entry, ok, _tuple$3, _key, hintErr, hintCert, x$2;
		c = this;
		_tuple = opts.Roots.findVerifiedParents(c); possibleRoots = _tuple[0]; failedRoot = _tuple[1]; rootErr = _tuple[2];
		_ref = possibleRoots;
		_i = 0;
		while (_i < _ref.$length) {
			rootNum = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			root = (x = opts.Roots.certs, ((rootNum < 0 || rootNum >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + rootNum]));
			err = root.isValid(2, currentChain, opts);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_i++;
				continue;
			}
			chains = $append(chains, appendToFreshChain(currentChain, root));
			_i++;
		}
		_tuple$1 = opts.Intermediates.findVerifiedParents(c); possibleIntermediates = _tuple$1[0]; failedIntermediate = _tuple$1[1]; intermediateErr = _tuple$1[2];
		_ref$1 = possibleIntermediates;
		_i$1 = 0;
		nextIntermediate:
		while (_i$1 < _ref$1.$length) {
			intermediateNum = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			intermediate = (x$1 = opts.Intermediates.certs, ((intermediateNum < 0 || intermediateNum >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + intermediateNum]));
			_ref$2 = currentChain;
			_i$2 = 0;
			while (_i$2 < _ref$2.$length) {
				cert = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
				if (cert === intermediate) {
					_i$1++;
					continue nextIntermediate;
				}
				_i$2++;
			}
			err = intermediate.isValid(1, currentChain, opts);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_i$1++;
				continue;
			}
			childChains = ($sliceType(($sliceType(($ptrType(Certificate)))))).nil;
			_tuple$2 = (_entry = cache[intermediateNum], _entry !== undefined ? [_entry.v, true] : [($sliceType(($sliceType(($ptrType(Certificate)))))).nil, false]); childChains = _tuple$2[0]; ok = _tuple$2[1];
			if (!ok) {
				_tuple$3 = intermediate.buildChains(cache, appendToFreshChain(currentChain, intermediate), opts); childChains = _tuple$3[0]; err = _tuple$3[1];
				_key = intermediateNum; (cache || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: childChains };
			}
			chains = $appendSlice(chains, childChains);
			_i$1++;
		}
		if (chains.$length > 0) {
			err = $ifaceNil;
		}
		if ((chains.$length === 0) && $interfaceIsEqual(err, $ifaceNil)) {
			hintErr = rootErr;
			hintCert = failedRoot;
			if ($interfaceIsEqual(hintErr, $ifaceNil)) {
				hintErr = intermediateErr;
				hintCert = failedIntermediate;
			}
			err = (x$2 = new UnknownAuthorityError.Ptr(c, hintErr, hintCert), new x$2.constructor.Struct(x$2));
		}
		return [chains, err];
	};
	Certificate.prototype.buildChains = function(cache, currentChain, opts) { return this.$val.buildChains(cache, currentChain, opts); };
	matchHostnames = function(pattern, host) {
		var patternParts, hostParts, _ref, _i, i, patternPart;
		if ((pattern.length === 0) || (host.length === 0)) {
			return false;
		}
		patternParts = strings.Split(pattern, ".");
		hostParts = strings.Split(host, ".");
		if (!((patternParts.$length === hostParts.$length))) {
			return false;
		}
		_ref = patternParts;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			patternPart = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (patternPart === "*") {
				_i++;
				continue;
			}
			if (!(patternPart === ((i < 0 || i >= hostParts.$length) ? $throwRuntimeError("index out of range") : hostParts.$array[hostParts.$offset + i]))) {
				return false;
			}
			_i++;
		}
		return true;
	};
	toLowerCaseASCII = function(in$1) {
		var isAlreadyLowerCase, _ref, _i, _rune, c, out, _ref$1, _i$1, i, c$1, _lhs, _index;
		isAlreadyLowerCase = true;
		_ref = in$1;
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			c = _rune[0];
			if (c === 65533) {
				isAlreadyLowerCase = false;
				break;
			}
			if (65 <= c && c <= 90) {
				isAlreadyLowerCase = false;
				break;
			}
			_i += _rune[1];
		}
		if (isAlreadyLowerCase) {
			return in$1;
		}
		out = new ($sliceType($Uint8))($stringToBytes(in$1));
		_ref$1 = out;
		_i$1 = 0;
		while (_i$1 < _ref$1.$length) {
			i = _i$1;
			c$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			if (65 <= c$1 && c$1 <= 90) {
				_lhs = out; _index = i; (_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index] = ((_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index]) + (32) << 24 >>> 24;
			}
			_i$1++;
		}
		return $bytesToString(out);
	};
	Certificate.Ptr.prototype.VerifyHostname = function(h) {
		var c, candidateIP, ip, _ref, _i, candidate, x, lowered, _ref$1, _i$1, match, x$1;
		c = this;
		candidateIP = h;
		if (h.length >= 3 && (h.charCodeAt(0) === 91) && (h.charCodeAt((h.length - 1 >> 0)) === 93)) {
			candidateIP = h.substring(1, (h.length - 1 >> 0));
		}
		ip = net.ParseIP(candidateIP);
		if (!(ip === net.IP.nil)) {
			_ref = c.IPAddresses;
			_i = 0;
			while (_i < _ref.$length) {
				candidate = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (ip.Equal(candidate)) {
					return $ifaceNil;
				}
				_i++;
			}
			return (x = new HostnameError.Ptr(c, candidateIP), new x.constructor.Struct(x));
		}
		lowered = toLowerCaseASCII(h);
		if (c.DNSNames.$length > 0) {
			_ref$1 = c.DNSNames;
			_i$1 = 0;
			while (_i$1 < _ref$1.$length) {
				match = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				if (matchHostnames(toLowerCaseASCII(match), lowered)) {
					return $ifaceNil;
				}
				_i$1++;
			}
		} else if (matchHostnames(toLowerCaseASCII(c.Subject.CommonName), lowered)) {
			return $ifaceNil;
		}
		return (x$1 = new HostnameError.Ptr(c, h), new x$1.constructor.Struct(x$1));
	};
	Certificate.prototype.VerifyHostname = function(h) { return this.$val.VerifyHostname(h); };
	checkChainForKeyUsage = function(chain, keyUsages) {
		var usages, usagesRemaining, i, cert, _ref, _i, usage, _ref$1, _i$1, i$1, requestedUsage, _ref$2, _i$2, usage$1;
		usages = ($sliceType(ExtKeyUsage)).make(keyUsages.$length);
		$copySlice(usages, keyUsages);
		if (chain.$length === 0) {
			return false;
		}
		usagesRemaining = usages.$length;
		i = chain.$length - 1 >> 0;
		NextCert:
		while (i >= 0) {
			cert = ((i < 0 || i >= chain.$length) ? $throwRuntimeError("index out of range") : chain.$array[chain.$offset + i]);
			if ((cert.ExtKeyUsage.$length === 0) && (cert.UnknownExtKeyUsage.$length === 0)) {
				i = i - (1) >> 0;
				continue;
			}
			_ref = cert.ExtKeyUsage;
			_i = 0;
			while (_i < _ref.$length) {
				usage = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				if (usage === 0) {
					i = i - (1) >> 0;
					continue NextCert;
				}
				_i++;
			}
			_ref$1 = usages;
			_i$1 = 0;
			NextRequestedUsage:
			while (_i$1 < _ref$1.$length) {
				i$1 = _i$1;
				requestedUsage = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				if (requestedUsage === -1) {
					_i$1++;
					continue;
				}
				_ref$2 = cert.ExtKeyUsage;
				_i$2 = 0;
				while (_i$2 < _ref$2.$length) {
					usage$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
					if (requestedUsage === usage$1) {
						_i$1++;
						continue NextRequestedUsage;
					} else if ((requestedUsage === 1) && ((usage$1 === 11) || (usage$1 === 10))) {
						_i$1++;
						continue NextRequestedUsage;
					}
					_i$2++;
				}
				(i$1 < 0 || i$1 >= usages.$length) ? $throwRuntimeError("index out of range") : usages.$array[usages.$offset + i$1] = -1;
				usagesRemaining = usagesRemaining - (1) >> 0;
				if (usagesRemaining === 0) {
					return false;
				}
				_i$1++;
			}
			i = i - (1) >> 0;
		}
		return true;
	};
	getSignatureAlgorithmFromOID = function(oid) {
		var _ref, _i, details;
		_ref = signatureAlgorithmDetails;
		_i = 0;
		while (_i < _ref.$length) {
			details = new ($structType([["algo", "algo", "crypto/x509", SignatureAlgorithm, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""], ["pubKeyAlgo", "pubKeyAlgo", "crypto/x509", PublicKeyAlgorithm, ""], ["hash", "hash", "crypto/x509", crypto.Hash, ""]])).Ptr(); $copy(details, ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), ($structType([["algo", "algo", "crypto/x509", SignatureAlgorithm, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""], ["pubKeyAlgo", "pubKeyAlgo", "crypto/x509", PublicKeyAlgorithm, ""], ["hash", "hash", "crypto/x509", crypto.Hash, ""]])));
			if (oid.Equal(details.oid)) {
				return details.algo;
			}
			_i++;
		}
		return 0;
	};
	getPublicKeyAlgorithmFromOID = function(oid) {
		if (oid.Equal(oidPublicKeyRSA)) {
			return 1;
		} else if (oid.Equal(oidPublicKeyDSA)) {
			return 2;
		} else if (oid.Equal(oidPublicKeyECDSA)) {
			return 3;
		}
		return 0;
	};
	namedCurveFromOID = function(oid) {
		if (oid.Equal(oidNamedCurveP224)) {
			return elliptic.P224();
		} else if (oid.Equal(oidNamedCurveP256)) {
			return elliptic.P256();
		} else if (oid.Equal(oidNamedCurveP384)) {
			return elliptic.P384();
		} else if (oid.Equal(oidNamedCurveP521)) {
			return elliptic.P521();
		}
		return $ifaceNil;
	};
	extKeyUsageFromOID = function(oid) {
		var eku = 0, ok = false, _ref, _i, pair, _tmp, _tmp$1;
		_ref = extKeyUsageOIDs;
		_i = 0;
		while (_i < _ref.$length) {
			pair = new ($structType([["extKeyUsage", "extKeyUsage", "crypto/x509", ExtKeyUsage, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""]])).Ptr(); $copy(pair, ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), ($structType([["extKeyUsage", "extKeyUsage", "crypto/x509", ExtKeyUsage, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""]])));
			if (oid.Equal(pair.oid)) {
				_tmp = pair.extKeyUsage; _tmp$1 = true; eku = _tmp; ok = _tmp$1;
				return [eku, ok];
			}
			_i++;
		}
		return [eku, ok];
	};
	ConstraintViolationError.Ptr.prototype.Error = function() {
		return "x509: invalid signature: parent certificate cannot sign this kind of certificate";
	};
	ConstraintViolationError.prototype.Error = function() { return this.$val.Error(); };
	Certificate.Ptr.prototype.Equal = function(other) {
		var c;
		c = this;
		return bytes.Equal(c.Raw, other.Raw);
	};
	Certificate.prototype.Equal = function(other) { return this.$val.Equal(other); };
	Certificate.Ptr.prototype.CheckSignatureFrom = function(parent) {
		var err = $ifaceNil, c, x, x$1;
		c = this;
		if (((parent.Version === 3) && !parent.BasicConstraintsValid || parent.BasicConstraintsValid && !parent.IsCA) && !bytes.Equal(c.RawSubjectPublicKeyInfo, entrustBrokenSPKI)) {
			err = (x = new ConstraintViolationError.Ptr(), new x.constructor.Struct(x));
			return err;
		}
		if (!((parent.KeyUsage === 0)) && ((parent.KeyUsage & 32) === 0)) {
			err = (x$1 = new ConstraintViolationError.Ptr(), new x$1.constructor.Struct(x$1));
			return err;
		}
		if (parent.PublicKeyAlgorithm === 0) {
			err = $pkg.ErrUnsupportedAlgorithm;
			return err;
		}
		err = parent.CheckSignature(c.SignatureAlgorithm, c.RawTBSCertificate, c.Signature);
		return err;
	};
	Certificate.prototype.CheckSignatureFrom = function(parent) { return this.$val.CheckSignatureFrom(parent); };
	Certificate.Ptr.prototype.CheckSignature = function(algo, signed, signature) {
		var err = $ifaceNil, c, hashType, _ref, h, digest, pub, _ref$1, dsaSig, _tuple, err$1, ecdsaSig, _tuple$1, err$2;
		c = this;
		hashType = 0;
		_ref = algo;
		if (_ref === 3 || _ref === 7 || _ref === 9) {
			hashType = 3;
		} else if (_ref === 4 || _ref === 8 || _ref === 10) {
			hashType = 5;
		} else if (_ref === 5 || _ref === 11) {
			hashType = 6;
		} else if (_ref === 6 || _ref === 12) {
			hashType = 7;
		} else {
			err = $pkg.ErrUnsupportedAlgorithm;
			return err;
		}
		if (!new crypto.Hash(hashType).Available()) {
			err = $pkg.ErrUnsupportedAlgorithm;
			return err;
		}
		h = new crypto.Hash(hashType).New();
		h.Write(signed);
		digest = h.Sum(($sliceType($Uint8)).nil);
		_ref$1 = c.PublicKey;
		if ($assertType(_ref$1, ($ptrType(rsa.PublicKey)), true)[1]) {
			pub = _ref$1.$val;
			err = rsa.VerifyPKCS1v15(pub, hashType, digest, signature);
			return err;
		} else if ($assertType(_ref$1, ($ptrType(dsa.PublicKey)), true)[1]) {
			pub = _ref$1.$val;
			dsaSig = new dsaSignature.Ptr();
			_tuple = asn1.Unmarshal(signature, dsaSig); err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				err = err$1;
				return err;
			}
			if (dsaSig.R.Sign() <= 0 || dsaSig.S.Sign() <= 0) {
				err = errors.New("x509: DSA signature contained zero or negative values");
				return err;
			}
			if (!dsa.Verify(pub, digest, dsaSig.R, dsaSig.S)) {
				err = errors.New("x509: DSA verification failure");
				return err;
			}
			return err;
		} else if ($assertType(_ref$1, ($ptrType(ecdsa.PublicKey)), true)[1]) {
			pub = _ref$1.$val;
			ecdsaSig = new ecdsaSignature.Ptr();
			_tuple$1 = asn1.Unmarshal(signature, ecdsaSig); err$2 = _tuple$1[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				err = err$2;
				return err;
			}
			if (ecdsaSig.R.Sign() <= 0 || ecdsaSig.S.Sign() <= 0) {
				err = errors.New("x509: ECDSA signature contained zero or negative values");
				return err;
			}
			if (!ecdsa.Verify(pub, digest, ecdsaSig.R, ecdsaSig.S)) {
				err = errors.New("x509: ECDSA verification failure");
				return err;
			}
			return err;
		}
		err = $pkg.ErrUnsupportedAlgorithm;
		return err;
	};
	Certificate.prototype.CheckSignature = function(algo, signed, signature) { return this.$val.CheckSignature(algo, signed, signature); };
	Certificate.Ptr.prototype.CheckCRLSignature = function(crl) {
		var err = $ifaceNil, c, algo, x;
		c = this;
		algo = getSignatureAlgorithmFromOID(crl.SignatureAlgorithm.Algorithm);
		err = c.CheckSignature(algo, (x = crl.TBSCertList.Raw, $subslice(new ($sliceType($Uint8))(x.$array), x.$offset, x.$offset + x.$length)), crl.SignatureValue.RightAlign());
		return err;
	};
	Certificate.prototype.CheckCRLSignature = function(crl) { return this.$val.CheckCRLSignature(crl); };
	UnhandledCriticalExtension.Ptr.prototype.Error = function() {
		var h;
		h = new UnhandledCriticalExtension.Ptr(); $copy(h, this, UnhandledCriticalExtension);
		return "x509: unhandled critical extension";
	};
	UnhandledCriticalExtension.prototype.Error = function() { return this.$val.Error(); };
	parsePublicKey = function(algo, keyData) {
		var asn1Data, _ref, p, _tuple, err, pub, p$1, _tuple$1, err$1, paramsData, params, _tuple$2, pub$1, paramsData$1, namedCurveOID, _tuple$3, err$2, namedCurve, _tuple$4, x, y, pub$2;
		asn1Data = keyData.PublicKey.RightAlign();
		_ref = algo;
		if (_ref === 1) {
			p = new rsaPublicKey.Ptr();
			_tuple = asn1.Unmarshal(asn1Data, p); err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [$ifaceNil, err];
			}
			if (p.N.Sign() <= 0) {
				return [$ifaceNil, errors.New("x509: RSA modulus is not a positive number")];
			}
			if (p.E <= 0) {
				return [$ifaceNil, errors.New("x509: RSA public exponent is not a positive number")];
			}
			pub = new rsa.PublicKey.Ptr(p.N, p.E);
			return [pub, $ifaceNil];
		} else if (_ref === 2) {
			p$1 = ($ptrType(big.Int)).nil;
			_tuple$1 = asn1.Unmarshal(asn1Data, new ($ptrType(($ptrType(big.Int))))(function() { return p$1; }, function($v) { p$1 = $v; })); err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return [$ifaceNil, err$1];
			}
			paramsData = keyData.Algorithm.Parameters.FullBytes;
			params = new dsaAlgorithmParameters.Ptr();
			_tuple$2 = asn1.Unmarshal(paramsData, params); err$1 = _tuple$2[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return [$ifaceNil, err$1];
			}
			if (p$1.Sign() <= 0 || params.P.Sign() <= 0 || params.Q.Sign() <= 0 || params.G.Sign() <= 0) {
				return [$ifaceNil, errors.New("x509: zero or negative DSA parameter")];
			}
			pub$1 = new dsa.PublicKey.Ptr(new dsa.Parameters.Ptr(params.P, params.Q, params.G), p$1);
			return [pub$1, $ifaceNil];
		} else if (_ref === 3) {
			paramsData$1 = keyData.Algorithm.Parameters.FullBytes;
			namedCurveOID = $newDataPointer(asn1.ObjectIdentifier.nil, ($ptrType(asn1.ObjectIdentifier)));
			_tuple$3 = asn1.Unmarshal(paramsData$1, namedCurveOID); err$2 = _tuple$3[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				return [$ifaceNil, err$2];
			}
			namedCurve = namedCurveFromOID(namedCurveOID.$get());
			if ($interfaceIsEqual(namedCurve, $ifaceNil)) {
				return [$ifaceNil, errors.New("x509: unsupported elliptic curve")];
			}
			_tuple$4 = elliptic.Unmarshal(namedCurve, asn1Data); x = _tuple$4[0]; y = _tuple$4[1];
			if (x === ($ptrType(big.Int)).nil) {
				return [$ifaceNil, errors.New("x509: failed to unmarshal elliptic curve point")];
			}
			pub$2 = new ecdsa.PublicKey.Ptr(namedCurve, x, y);
			return [pub$2, $ifaceNil];
		} else {
			return [$ifaceNil, $ifaceNil];
		}
	};
	parseSANExtension = function(value) {
		var dnsNames = ($sliceType($String)).nil, emailAddresses = ($sliceType($String)).nil, ipAddresses = ($sliceType(net.IP)).nil, err = $ifaceNil, seq, _tuple, x, rest, v, _tuple$1, _ref, _ref$1, x$1;
		seq = new asn1.RawValue.Ptr(); $copy(seq, new asn1.RawValue.Ptr(), asn1.RawValue);
		_tuple = asn1.Unmarshal(value, seq); err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [dnsNames, emailAddresses, ipAddresses, err];
		}
		if (!seq.IsCompound || !((seq.Tag === 16)) || !((seq.Class === 0))) {
			err = (x = new asn1.StructuralError.Ptr("bad SAN sequence"), new x.constructor.Struct(x));
			return [dnsNames, emailAddresses, ipAddresses, err];
		}
		rest = seq.Bytes;
		while (rest.$length > 0) {
			v = new asn1.RawValue.Ptr(); $copy(v, new asn1.RawValue.Ptr(), asn1.RawValue);
			_tuple$1 = asn1.Unmarshal(rest, v); rest = _tuple$1[0]; err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [dnsNames, emailAddresses, ipAddresses, err];
			}
			_ref = v.Tag;
			if (_ref === 1) {
				emailAddresses = $append(emailAddresses, $bytesToString(v.Bytes));
			} else if (_ref === 2) {
				dnsNames = $append(dnsNames, $bytesToString(v.Bytes));
			} else if (_ref === 7) {
				_ref$1 = v.Bytes.$length;
				if (_ref$1 === 4 || _ref$1 === 16) {
					ipAddresses = $append(ipAddresses, (x$1 = v.Bytes, $subslice(new net.IP(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length)));
				} else {
					err = errors.New("x509: certificate contained IP address of length " + strconv.Itoa(v.Bytes.$length));
					return [dnsNames, emailAddresses, ipAddresses, err];
				}
			}
		}
		return [dnsNames, emailAddresses, ipAddresses, err];
	};
	parseCertificate = function(in$1) {
		var out, x, x$1, x$2, err, _tuple, _tmp, _tmp$1, issuer, subject, _tuple$1, err$1, _tuple$2, err$2, _ref, _i, cdp, keyUsage, keyid, policies, aia, e, x$3, x$4, x$5, _ref$1, x$6, usageBits, _tuple$3, err$3, usage, i, y, constraints, _tuple$4, err$4, _tuple$5, constraints$1, _tuple$6, err$5, x$7, _ref$2, _i$1, subtree, x$8, _tuple$7, err$6, _ref$3, _i$2, dp, n, _tuple$8, a, _tuple$9, _tuple$10, _ref$4, _i$3, u, _tuple$11, extKeyUsage, ok, _tuple$12, _tuple$13, _ref$5, _i$4, i$1, policy, x$9, _tuple$14, _ref$6, _i$5, v, x$10;
		out = new Certificate.Ptr();
		out.Raw = (x = in$1.Raw, $subslice(new ($sliceType($Uint8))(x.$array), x.$offset, x.$offset + x.$length));
		out.RawTBSCertificate = (x$1 = in$1.TBSCertificate.Raw, $subslice(new ($sliceType($Uint8))(x$1.$array), x$1.$offset, x$1.$offset + x$1.$length));
		out.RawSubjectPublicKeyInfo = (x$2 = in$1.TBSCertificate.PublicKey.Raw, $subslice(new ($sliceType($Uint8))(x$2.$array), x$2.$offset, x$2.$offset + x$2.$length));
		out.RawSubject = in$1.TBSCertificate.Subject.FullBytes;
		out.RawIssuer = in$1.TBSCertificate.Issuer.FullBytes;
		out.Signature = in$1.SignatureValue.RightAlign();
		out.SignatureAlgorithm = getSignatureAlgorithmFromOID(in$1.TBSCertificate.SignatureAlgorithm.Algorithm);
		out.PublicKeyAlgorithm = getPublicKeyAlgorithmFromOID(in$1.TBSCertificate.PublicKey.Algorithm.Algorithm);
		err = $ifaceNil;
		_tuple = parsePublicKey(out.PublicKeyAlgorithm, in$1.TBSCertificate.PublicKey); out.PublicKey = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($ptrType(Certificate)).nil, err];
		}
		if (in$1.TBSCertificate.SerialNumber.Sign() < 0) {
			return [($ptrType(Certificate)).nil, errors.New("x509: negative serial number")];
		}
		out.Version = in$1.TBSCertificate.Version + 1 >> 0;
		out.SerialNumber = in$1.TBSCertificate.SerialNumber;
		_tmp = pkix.RDNSequence.nil; _tmp$1 = pkix.RDNSequence.nil; issuer = _tmp; subject = _tmp$1;
		_tuple$1 = asn1.Unmarshal(in$1.TBSCertificate.Subject.FullBytes, new ($ptrType(pkix.RDNSequence))(function() { return subject; }, function($v) { subject = $v; })); err$1 = _tuple$1[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			return [($ptrType(Certificate)).nil, err$1];
		}
		_tuple$2 = asn1.Unmarshal(in$1.TBSCertificate.Issuer.FullBytes, new ($ptrType(pkix.RDNSequence))(function() { return issuer; }, function($v) { issuer = $v; })); err$2 = _tuple$2[1];
		if (!($interfaceIsEqual(err$2, $ifaceNil))) {
			return [($ptrType(Certificate)).nil, err$2];
		}
		out.Issuer.FillFromRDNSequence(new ($ptrType(pkix.RDNSequence))(function() { return issuer; }, function($v) { issuer = $v; }));
		out.Subject.FillFromRDNSequence(new ($ptrType(pkix.RDNSequence))(function() { return subject; }, function($v) { subject = $v; }));
		$copy(out.NotBefore, in$1.TBSCertificate.Validity.NotBefore, time.Time);
		$copy(out.NotAfter, in$1.TBSCertificate.Validity.NotAfter, time.Time);
		_ref = in$1.TBSCertificate.Extensions;
		_i = 0;
		while (_i < _ref.$length) {
			aia = [undefined];
			cdp = [undefined];
			keyUsage = [undefined];
			keyid = [undefined];
			policies = [undefined];
			e = new pkix.Extension.Ptr(); $copy(e, ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), pkix.Extension);
			out.Extensions = $append(out.Extensions, e);
			if ((e.Id.$length === 4) && ((x$3 = e.Id, ((0 < 0 || 0 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0])) === 2) && ((x$4 = e.Id, ((1 < 0 || 1 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + 1])) === 5) && ((x$5 = e.Id, ((2 < 0 || 2 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + 2])) === 29)) {
				_ref$1 = (x$6 = e.Id, ((3 < 0 || 3 >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + 3]));
				if (_ref$1 === 15) {
					usageBits = new asn1.BitString.Ptr(); $copy(usageBits, new asn1.BitString.Ptr(), asn1.BitString);
					_tuple$3 = asn1.Unmarshal(e.Value, usageBits); err$3 = _tuple$3[1];
					if ($interfaceIsEqual(err$3, $ifaceNil)) {
						usage = 0;
						i = 0;
						while (i < 9) {
							if (!((usageBits.At(i) === 0))) {
								usage = usage | (((y = (i >>> 0), y < 32 ? (1 << y) : 0) >> 0));
							}
							i = i + (1) >> 0;
						}
						out.KeyUsage = (usage >> 0);
						_i++;
						continue;
					}
				} else if (_ref$1 === 19) {
					constraints = new basicConstraints.Ptr(); $copy(constraints, new basicConstraints.Ptr(), basicConstraints);
					_tuple$4 = asn1.Unmarshal(e.Value, constraints); err$4 = _tuple$4[1];
					if ($interfaceIsEqual(err$4, $ifaceNil)) {
						out.BasicConstraintsValid = true;
						out.IsCA = constraints.IsCA;
						out.MaxPathLen = constraints.MaxPathLen;
						_i++;
						continue;
					}
				} else if (_ref$1 === 17) {
					_tuple$5 = parseSANExtension(e.Value); out.DNSNames = _tuple$5[0]; out.EmailAddresses = _tuple$5[1]; out.IPAddresses = _tuple$5[2]; err = _tuple$5[3];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						return [($ptrType(Certificate)).nil, err];
					}
					if (out.DNSNames.$length > 0 || out.EmailAddresses.$length > 0 || out.IPAddresses.$length > 0) {
						_i++;
						continue;
					}
				} else if (_ref$1 === 30) {
					constraints$1 = new nameConstraints.Ptr(); $copy(constraints$1, new nameConstraints.Ptr(), nameConstraints);
					_tuple$6 = asn1.Unmarshal(e.Value, constraints$1); err$5 = _tuple$6[1];
					if (!($interfaceIsEqual(err$5, $ifaceNil))) {
						return [($ptrType(Certificate)).nil, err$5];
					}
					if (constraints$1.Excluded.$length > 0 && e.Critical) {
						return [out, (x$7 = new UnhandledCriticalExtension.Ptr(), new x$7.constructor.Struct(x$7))];
					}
					_ref$2 = constraints$1.Permitted;
					_i$1 = 0;
					while (_i$1 < _ref$2.$length) {
						subtree = new generalSubtree.Ptr(); $copy(subtree, ((_i$1 < 0 || _i$1 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$1]), generalSubtree);
						if (subtree.Name.length === 0) {
							if (e.Critical) {
								return [out, (x$8 = new UnhandledCriticalExtension.Ptr(), new x$8.constructor.Struct(x$8))];
							}
							_i$1++;
							continue;
						}
						out.PermittedDNSDomains = $append(out.PermittedDNSDomains, subtree.Name);
						_i$1++;
					}
					_i++;
					continue;
				} else if (_ref$1 === 31) {
					cdp[0] = ($sliceType(distributionPoint)).nil;
					_tuple$7 = asn1.Unmarshal(e.Value, new ($ptrType(($sliceType(distributionPoint))))(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, cdp)); err$6 = _tuple$7[1];
					if (!($interfaceIsEqual(err$6, $ifaceNil))) {
						return [($ptrType(Certificate)).nil, err$6];
					}
					_ref$3 = cdp[0];
					_i$2 = 0;
					while (_i$2 < _ref$3.$length) {
						dp = new distributionPoint.Ptr(); $copy(dp, ((_i$2 < 0 || _i$2 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$2]), distributionPoint);
						n = new asn1.RawValue.Ptr(); $copy(n, new asn1.RawValue.Ptr(), asn1.RawValue);
						_tuple$8 = asn1.Unmarshal(dp.DistributionPoint.FullName.Bytes, n); err$6 = _tuple$8[1];
						if (!($interfaceIsEqual(err$6, $ifaceNil))) {
							return [($ptrType(Certificate)).nil, err$6];
						}
						if (n.Tag === 6) {
							out.CRLDistributionPoints = $append(out.CRLDistributionPoints, $bytesToString(n.Bytes));
						}
						_i$2++;
					}
					_i++;
					continue;
				} else if (_ref$1 === 35) {
					a = new authKeyId.Ptr(); $copy(a, new authKeyId.Ptr(), authKeyId);
					_tuple$9 = asn1.Unmarshal(e.Value, a); err = _tuple$9[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						return [($ptrType(Certificate)).nil, err];
					}
					out.AuthorityKeyId = a.Id;
					_i++;
					continue;
				} else if (_ref$1 === 37) {
					keyUsage[0] = ($sliceType(asn1.ObjectIdentifier)).nil;
					_tuple$10 = asn1.Unmarshal(e.Value, new ($ptrType(($sliceType(asn1.ObjectIdentifier))))(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, keyUsage)); err = _tuple$10[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						return [($ptrType(Certificate)).nil, err];
					}
					_ref$4 = keyUsage[0];
					_i$3 = 0;
					while (_i$3 < _ref$4.$length) {
						u = ((_i$3 < 0 || _i$3 >= _ref$4.$length) ? $throwRuntimeError("index out of range") : _ref$4.$array[_ref$4.$offset + _i$3]);
						_tuple$11 = extKeyUsageFromOID(u); extKeyUsage = _tuple$11[0]; ok = _tuple$11[1];
						if (ok) {
							out.ExtKeyUsage = $append(out.ExtKeyUsage, extKeyUsage);
						} else {
							out.UnknownExtKeyUsage = $append(out.UnknownExtKeyUsage, u);
						}
						_i$3++;
					}
					_i++;
					continue;
				} else if (_ref$1 === 14) {
					keyid[0] = ($sliceType($Uint8)).nil;
					_tuple$12 = asn1.Unmarshal(e.Value, new ($ptrType(($sliceType($Uint8))))(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, keyid)); err = _tuple$12[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						return [($ptrType(Certificate)).nil, err];
					}
					out.SubjectKeyId = keyid[0];
					_i++;
					continue;
				} else if (_ref$1 === 32) {
					policies[0] = ($sliceType(policyInformation)).nil;
					_tuple$13 = asn1.Unmarshal(e.Value, new ($ptrType(($sliceType(policyInformation))))(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, policies)); err = _tuple$13[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						return [($ptrType(Certificate)).nil, err];
					}
					out.PolicyIdentifiers = ($sliceType(asn1.ObjectIdentifier)).make(policies[0].$length);
					_ref$5 = policies[0];
					_i$4 = 0;
					while (_i$4 < _ref$5.$length) {
						i$1 = _i$4;
						policy = new policyInformation.Ptr(); $copy(policy, ((_i$4 < 0 || _i$4 >= _ref$5.$length) ? $throwRuntimeError("index out of range") : _ref$5.$array[_ref$5.$offset + _i$4]), policyInformation);
						(x$9 = out.PolicyIdentifiers, (i$1 < 0 || i$1 >= x$9.$length) ? $throwRuntimeError("index out of range") : x$9.$array[x$9.$offset + i$1] = policy.Policy);
						_i$4++;
					}
				}
			} else if (e.Id.Equal($subslice(new asn1.ObjectIdentifier(oidExtensionAuthorityInfoAccess.$array), oidExtensionAuthorityInfoAccess.$offset, oidExtensionAuthorityInfoAccess.$offset + oidExtensionAuthorityInfoAccess.$length))) {
				aia[0] = ($sliceType(authorityInfoAccess)).nil;
				_tuple$14 = asn1.Unmarshal(e.Value, new ($ptrType(($sliceType(authorityInfoAccess))))(function() { return this.$target[0]; }, function($v) { this.$target[0] = $v; }, aia)); err = _tuple$14[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return [($ptrType(Certificate)).nil, err];
				}
				_ref$6 = aia[0];
				_i$5 = 0;
				while (_i$5 < _ref$6.$length) {
					v = new authorityInfoAccess.Ptr(); $copy(v, ((_i$5 < 0 || _i$5 >= _ref$6.$length) ? $throwRuntimeError("index out of range") : _ref$6.$array[_ref$6.$offset + _i$5]), authorityInfoAccess);
					if (!((v.Location.Tag === 6))) {
						_i$5++;
						continue;
					}
					if (v.Method.Equal(oidAuthorityInfoAccessOcsp)) {
						out.OCSPServer = $append(out.OCSPServer, $bytesToString(v.Location.Bytes));
					} else if (v.Method.Equal(oidAuthorityInfoAccessIssuers)) {
						out.IssuingCertificateURL = $append(out.IssuingCertificateURL, $bytesToString(v.Location.Bytes));
					}
					_i$5++;
				}
			}
			if (e.Critical) {
				return [out, (x$10 = new UnhandledCriticalExtension.Ptr(), new x$10.constructor.Struct(x$10))];
			}
			_i++;
		}
		return [out, $ifaceNil];
	};
	ParseCertificate = $pkg.ParseCertificate = function(asn1Data) {
		var cert, _tuple, rest, err, x;
		cert = new certificate.Ptr(); $copy(cert, new certificate.Ptr(), certificate);
		_tuple = asn1.Unmarshal(asn1Data, cert); rest = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($ptrType(Certificate)).nil, err];
		}
		if (rest.$length > 0) {
			return [($ptrType(Certificate)).nil, (x = new asn1.SyntaxError.Ptr("trailing data"), new x.constructor.Struct(x))];
		}
		return parseCertificate(cert);
	};
	Certificate.Ptr.prototype.CreateCRL = function(rand, priv, revokedCerts, now, expiry) {
		var crlBytes = ($sliceType($Uint8)).nil, err = $ifaceNil, c, _tuple, rsaPriv, ok, _tmp, _tmp$1, tbsCertList, _tuple$1, tbsCertListContents, h, digest, _tuple$2, signature, _tuple$3, x, x$1;
		c = this;
		_tuple = $assertType(priv, ($ptrType(rsa.PrivateKey)), true); rsaPriv = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			_tmp = ($sliceType($Uint8)).nil; _tmp$1 = errors.New("x509: non-RSA private keys not supported"); crlBytes = _tmp; err = _tmp$1;
			return [crlBytes, err];
		}
		tbsCertList = new pkix.TBSCertificateList.Ptr(asn1.RawContent.nil, 2, new pkix.AlgorithmIdentifier.Ptr(oidSignatureSHA1WithRSA, new asn1.RawValue.Ptr()), c.Subject.ToRDNSequence(), $clone(now.UTC(), time.Time), $clone(expiry.UTC(), time.Time), revokedCerts, ($sliceType(pkix.Extension)).nil);
		_tuple$1 = asn1.Marshal(new tbsCertList.constructor.Struct(tbsCertList)); tbsCertListContents = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [crlBytes, err];
		}
		h = sha1.New();
		h.Write(tbsCertListContents);
		digest = h.Sum(($sliceType($Uint8)).nil);
		_tuple$2 = rsa.SignPKCS1v15(rand, rsaPriv, 3, digest); signature = _tuple$2[0]; err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [crlBytes, err];
		}
		_tuple$3 = asn1.Marshal((x = new pkix.CertificateList.Ptr($clone(tbsCertList, pkix.TBSCertificateList), new pkix.AlgorithmIdentifier.Ptr(oidSignatureSHA1WithRSA, new asn1.RawValue.Ptr()), new asn1.BitString.Ptr(signature, (x$1 = signature.$length, (((x$1 >>> 16 << 16) * 8 >> 0) + (x$1 << 16 >>> 16) * 8) >> 0))), new x.constructor.Struct(x))); crlBytes = _tuple$3[0]; err = _tuple$3[1];
		return [crlBytes, err];
	};
	Certificate.prototype.CreateCRL = function(rand, priv, revokedCerts, now, expiry) { return this.$val.CreateCRL(rand, priv, revokedCerts, now, expiry); };
	$pkg.$init = function() {
		($ptrType(CertPool)).methods = [["AddCert", "AddCert", "", $funcType([($ptrType(Certificate))], [], false), -1], ["AppendCertsFromPEM", "AppendCertsFromPEM", "", $funcType([($sliceType($Uint8))], [$Bool], false), -1], ["Subjects", "Subjects", "", $funcType([], [($sliceType(($sliceType($Uint8))))], false), -1], ["findVerifiedParents", "findVerifiedParents", "crypto/x509", $funcType([($ptrType(Certificate))], [($sliceType($Int)), ($ptrType(Certificate)), $error], false), -1]];
		CertPool.init([["bySubjectKeyId", "bySubjectKeyId", "crypto/x509", ($mapType($String, ($sliceType($Int)))), ""], ["byName", "byName", "crypto/x509", ($mapType($String, ($sliceType($Int)))), ""], ["certs", "certs", "crypto/x509", ($sliceType(($ptrType(Certificate)))), ""]]);
		pkcs1PrivateKey.init([["Version", "Version", "", $Int, ""], ["N", "N", "", ($ptrType(big.Int)), ""], ["E", "E", "", $Int, ""], ["D", "D", "", ($ptrType(big.Int)), ""], ["P", "P", "", ($ptrType(big.Int)), ""], ["Q", "Q", "", ($ptrType(big.Int)), ""], ["Dp", "Dp", "", ($ptrType(big.Int)), "asn1:\"optional\""], ["Dq", "Dq", "", ($ptrType(big.Int)), "asn1:\"optional\""], ["Qinv", "Qinv", "", ($ptrType(big.Int)), "asn1:\"optional\""], ["AdditionalPrimes", "AdditionalPrimes", "", ($sliceType(pkcs1AdditionalRSAPrime)), "asn1:\"optional,omitempty\""]]);
		pkcs1AdditionalRSAPrime.init([["Prime", "Prime", "", ($ptrType(big.Int)), ""], ["Exp", "Exp", "", ($ptrType(big.Int)), ""], ["Coeff", "Coeff", "", ($ptrType(big.Int)), ""]]);
		rsaPublicKey.init([["N", "N", "", ($ptrType(big.Int)), ""], ["E", "E", "", $Int, ""]]);
		pkcs8.init([["Version", "Version", "", $Int, ""], ["Algo", "Algo", "", pkix.AlgorithmIdentifier, ""], ["PrivateKey", "PrivateKey", "", ($sliceType($Uint8)), ""]]);
		ecPrivateKey.init([["Version", "Version", "", $Int, ""], ["PrivateKey", "PrivateKey", "", ($sliceType($Uint8)), ""], ["NamedCurveOID", "NamedCurveOID", "", asn1.ObjectIdentifier, "asn1:\"optional,explicit,tag:0\""], ["PublicKey", "PublicKey", "", asn1.BitString, "asn1:\"optional,explicit,tag:1\""]]);
		CertificateInvalidError.methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		($ptrType(CertificateInvalidError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		CertificateInvalidError.init([["Cert", "Cert", "", ($ptrType(Certificate)), ""], ["Reason", "Reason", "", InvalidReason, ""]]);
		HostnameError.methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		($ptrType(HostnameError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		HostnameError.init([["Certificate", "Certificate", "", ($ptrType(Certificate)), ""], ["Host", "Host", "", $String, ""]]);
		UnknownAuthorityError.methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		($ptrType(UnknownAuthorityError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		UnknownAuthorityError.init([["cert", "cert", "crypto/x509", ($ptrType(Certificate)), ""], ["hintErr", "hintErr", "crypto/x509", $error, ""], ["hintCert", "hintCert", "crypto/x509", ($ptrType(Certificate)), ""]]);
		SystemRootsError.methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		($ptrType(SystemRootsError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		SystemRootsError.init([]);
		VerifyOptions.init([["DNSName", "DNSName", "", $String, ""], ["Intermediates", "Intermediates", "", ($ptrType(CertPool)), ""], ["Roots", "Roots", "", ($ptrType(CertPool)), ""], ["CurrentTime", "CurrentTime", "", time.Time, ""], ["KeyUsages", "KeyUsages", "", ($sliceType(ExtKeyUsage)), ""]]);
		certificate.init([["Raw", "Raw", "", asn1.RawContent, ""], ["TBSCertificate", "TBSCertificate", "", tbsCertificate, ""], ["SignatureAlgorithm", "SignatureAlgorithm", "", pkix.AlgorithmIdentifier, ""], ["SignatureValue", "SignatureValue", "", asn1.BitString, ""]]);
		tbsCertificate.init([["Raw", "Raw", "", asn1.RawContent, ""], ["Version", "Version", "", $Int, "asn1:\"optional,explicit,default:1,tag:0\""], ["SerialNumber", "SerialNumber", "", ($ptrType(big.Int)), ""], ["SignatureAlgorithm", "SignatureAlgorithm", "", pkix.AlgorithmIdentifier, ""], ["Issuer", "Issuer", "", asn1.RawValue, ""], ["Validity", "Validity", "", validity, ""], ["Subject", "Subject", "", asn1.RawValue, ""], ["PublicKey", "PublicKey", "", publicKeyInfo, ""], ["UniqueId", "UniqueId", "", asn1.BitString, "asn1:\"optional,tag:1\""], ["SubjectUniqueId", "SubjectUniqueId", "", asn1.BitString, "asn1:\"optional,tag:2\""], ["Extensions", "Extensions", "", ($sliceType(pkix.Extension)), "asn1:\"optional,explicit,tag:3\""]]);
		dsaAlgorithmParameters.init([["P", "P", "", ($ptrType(big.Int)), ""], ["Q", "Q", "", ($ptrType(big.Int)), ""], ["G", "G", "", ($ptrType(big.Int)), ""]]);
		dsaSignature.init([["R", "R", "", ($ptrType(big.Int)), ""], ["S", "S", "", ($ptrType(big.Int)), ""]]);
		ecdsaSignature.init([["R", "R", "", ($ptrType(big.Int)), ""], ["S", "S", "", ($ptrType(big.Int)), ""]]);
		validity.init([["NotBefore", "NotBefore", "", time.Time, ""], ["NotAfter", "NotAfter", "", time.Time, ""]]);
		publicKeyInfo.init([["Raw", "Raw", "", asn1.RawContent, ""], ["Algorithm", "Algorithm", "", pkix.AlgorithmIdentifier, ""], ["PublicKey", "PublicKey", "", asn1.BitString, ""]]);
		authKeyId.init([["Id", "Id", "", ($sliceType($Uint8)), "asn1:\"optional,tag:0\""]]);
		($ptrType(Certificate)).methods = [["CheckCRLSignature", "CheckCRLSignature", "", $funcType([($ptrType(pkix.CertificateList))], [$error], false), -1], ["CheckSignature", "CheckSignature", "", $funcType([SignatureAlgorithm, ($sliceType($Uint8)), ($sliceType($Uint8))], [$error], false), -1], ["CheckSignatureFrom", "CheckSignatureFrom", "", $funcType([($ptrType(Certificate))], [$error], false), -1], ["CreateCRL", "CreateCRL", "", $funcType([io.Reader, $emptyInterface, ($sliceType(pkix.RevokedCertificate)), time.Time, time.Time], [($sliceType($Uint8)), $error], false), -1], ["Equal", "Equal", "", $funcType([($ptrType(Certificate))], [$Bool], false), -1], ["Verify", "Verify", "", $funcType([VerifyOptions], [($sliceType(($sliceType(($ptrType(Certificate)))))), $error], false), -1], ["VerifyHostname", "VerifyHostname", "", $funcType([$String], [$error], false), -1], ["buildChains", "buildChains", "crypto/x509", $funcType([($mapType($Int, ($sliceType(($sliceType(($ptrType(Certificate)))))))), ($sliceType(($ptrType(Certificate)))), ($ptrType(VerifyOptions))], [($sliceType(($sliceType(($ptrType(Certificate)))))), $error], false), -1], ["isValid", "isValid", "crypto/x509", $funcType([$Int, ($sliceType(($ptrType(Certificate)))), ($ptrType(VerifyOptions))], [$error], false), -1], ["systemVerify", "systemVerify", "crypto/x509", $funcType([($ptrType(VerifyOptions))], [($sliceType(($sliceType(($ptrType(Certificate)))))), $error], false), -1]];
		Certificate.init([["Raw", "Raw", "", ($sliceType($Uint8)), ""], ["RawTBSCertificate", "RawTBSCertificate", "", ($sliceType($Uint8)), ""], ["RawSubjectPublicKeyInfo", "RawSubjectPublicKeyInfo", "", ($sliceType($Uint8)), ""], ["RawSubject", "RawSubject", "", ($sliceType($Uint8)), ""], ["RawIssuer", "RawIssuer", "", ($sliceType($Uint8)), ""], ["Signature", "Signature", "", ($sliceType($Uint8)), ""], ["SignatureAlgorithm", "SignatureAlgorithm", "", SignatureAlgorithm, ""], ["PublicKeyAlgorithm", "PublicKeyAlgorithm", "", PublicKeyAlgorithm, ""], ["PublicKey", "PublicKey", "", $emptyInterface, ""], ["Version", "Version", "", $Int, ""], ["SerialNumber", "SerialNumber", "", ($ptrType(big.Int)), ""], ["Issuer", "Issuer", "", pkix.Name, ""], ["Subject", "Subject", "", pkix.Name, ""], ["NotBefore", "NotBefore", "", time.Time, ""], ["NotAfter", "NotAfter", "", time.Time, ""], ["KeyUsage", "KeyUsage", "", KeyUsage, ""], ["Extensions", "Extensions", "", ($sliceType(pkix.Extension)), ""], ["ExtraExtensions", "ExtraExtensions", "", ($sliceType(pkix.Extension)), ""], ["ExtKeyUsage", "ExtKeyUsage", "", ($sliceType(ExtKeyUsage)), ""], ["UnknownExtKeyUsage", "UnknownExtKeyUsage", "", ($sliceType(asn1.ObjectIdentifier)), ""], ["BasicConstraintsValid", "BasicConstraintsValid", "", $Bool, ""], ["IsCA", "IsCA", "", $Bool, ""], ["MaxPathLen", "MaxPathLen", "", $Int, ""], ["SubjectKeyId", "SubjectKeyId", "", ($sliceType($Uint8)), ""], ["AuthorityKeyId", "AuthorityKeyId", "", ($sliceType($Uint8)), ""], ["OCSPServer", "OCSPServer", "", ($sliceType($String)), ""], ["IssuingCertificateURL", "IssuingCertificateURL", "", ($sliceType($String)), ""], ["DNSNames", "DNSNames", "", ($sliceType($String)), ""], ["EmailAddresses", "EmailAddresses", "", ($sliceType($String)), ""], ["IPAddresses", "IPAddresses", "", ($sliceType(net.IP)), ""], ["PermittedDNSDomainsCritical", "PermittedDNSDomainsCritical", "", $Bool, ""], ["PermittedDNSDomains", "PermittedDNSDomains", "", ($sliceType($String)), ""], ["CRLDistributionPoints", "CRLDistributionPoints", "", ($sliceType($String)), ""], ["PolicyIdentifiers", "PolicyIdentifiers", "", ($sliceType(asn1.ObjectIdentifier)), ""]]);
		ConstraintViolationError.methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		($ptrType(ConstraintViolationError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		ConstraintViolationError.init([]);
		UnhandledCriticalExtension.methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		($ptrType(UnhandledCriticalExtension)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		UnhandledCriticalExtension.init([]);
		basicConstraints.init([["IsCA", "IsCA", "", $Bool, "asn1:\"optional\""], ["MaxPathLen", "MaxPathLen", "", $Int, "asn1:\"optional,default:-1\""]]);
		policyInformation.init([["Policy", "Policy", "", asn1.ObjectIdentifier, ""]]);
		nameConstraints.init([["Permitted", "Permitted", "", ($sliceType(generalSubtree)), "asn1:\"optional,tag:0\""], ["Excluded", "Excluded", "", ($sliceType(generalSubtree)), "asn1:\"optional,tag:1\""]]);
		generalSubtree.init([["Name", "Name", "", $String, "asn1:\"tag:2,optional,ia5\""]]);
		authorityInfoAccess.init([["Method", "Method", "", asn1.ObjectIdentifier, ""], ["Location", "Location", "", asn1.RawValue, ""]]);
		distributionPoint.init([["DistributionPoint", "DistributionPoint", "", distributionPointName, "asn1:\"optional,tag:0\""], ["Reason", "Reason", "", asn1.BitString, "asn1:\"optional,tag:1\""], ["CRLIssuer", "CRLIssuer", "", asn1.RawValue, "asn1:\"optional,tag:2\""]]);
		distributionPointName.init([["FullName", "FullName", "", asn1.RawValue, "asn1:\"optional,tag:0\""], ["RelativeName", "RelativeName", "", pkix.RDNSequence, "asn1:\"optional,tag:1\""]]);
		once = new sync.Once.Ptr();
		systemRoots = ($ptrType(CertPool)).nil;
		$pkg.IncorrectPasswordError = errors.New("x509: decryption password incorrect");
		oidSignatureMD2WithRSA = new asn1.ObjectIdentifier([1, 2, 840, 113549, 1, 1, 2]);
		oidSignatureMD5WithRSA = new asn1.ObjectIdentifier([1, 2, 840, 113549, 1, 1, 4]);
		oidSignatureSHA1WithRSA = new asn1.ObjectIdentifier([1, 2, 840, 113549, 1, 1, 5]);
		oidSignatureSHA256WithRSA = new asn1.ObjectIdentifier([1, 2, 840, 113549, 1, 1, 11]);
		oidSignatureSHA384WithRSA = new asn1.ObjectIdentifier([1, 2, 840, 113549, 1, 1, 12]);
		oidSignatureSHA512WithRSA = new asn1.ObjectIdentifier([1, 2, 840, 113549, 1, 1, 13]);
		oidSignatureDSAWithSHA1 = new asn1.ObjectIdentifier([1, 2, 840, 10040, 4, 3]);
		oidSignatureDSAWithSHA256 = new asn1.ObjectIdentifier([2, 16, 840, 1, 101, 4, 3, 2]);
		oidSignatureECDSAWithSHA1 = new asn1.ObjectIdentifier([1, 2, 840, 10045, 4, 1]);
		oidSignatureECDSAWithSHA256 = new asn1.ObjectIdentifier([1, 2, 840, 10045, 4, 3, 2]);
		oidSignatureECDSAWithSHA384 = new asn1.ObjectIdentifier([1, 2, 840, 10045, 4, 3, 3]);
		oidSignatureECDSAWithSHA512 = new asn1.ObjectIdentifier([1, 2, 840, 10045, 4, 3, 4]);
		signatureAlgorithmDetails = new ($sliceType(($structType([["algo", "algo", "crypto/x509", SignatureAlgorithm, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""], ["pubKeyAlgo", "pubKeyAlgo", "crypto/x509", PublicKeyAlgorithm, ""], ["hash", "hash", "crypto/x509", crypto.Hash, ""]]))))([new ($structType([["algo", "algo", "crypto/x509", SignatureAlgorithm, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""], ["pubKeyAlgo", "pubKeyAlgo", "crypto/x509", PublicKeyAlgorithm, ""], ["hash", "hash", "crypto/x509", crypto.Hash, ""]])).Ptr(1, oidSignatureMD2WithRSA, 1, 0), new ($structType([["algo", "algo", "crypto/x509", SignatureAlgorithm, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""], ["pubKeyAlgo", "pubKeyAlgo", "crypto/x509", PublicKeyAlgorithm, ""], ["hash", "hash", "crypto/x509", crypto.Hash, ""]])).Ptr(2, oidSignatureMD5WithRSA, 1, 2), new ($structType([["algo", "algo", "crypto/x509", SignatureAlgorithm, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""], ["pubKeyAlgo", "pubKeyAlgo", "crypto/x509", PublicKeyAlgorithm, ""], ["hash", "hash", "crypto/x509", crypto.Hash, ""]])).Ptr(3, oidSignatureSHA1WithRSA, 1, 3), new ($structType([["algo", "algo", "crypto/x509", SignatureAlgorithm, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""], ["pubKeyAlgo", "pubKeyAlgo", "crypto/x509", PublicKeyAlgorithm, ""], ["hash", "hash", "crypto/x509", crypto.Hash, ""]])).Ptr(4, oidSignatureSHA256WithRSA, 1, 5), new ($structType([["algo", "algo", "crypto/x509", SignatureAlgorithm, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""], ["pubKeyAlgo", "pubKeyAlgo", "crypto/x509", PublicKeyAlgorithm, ""], ["hash", "hash", "crypto/x509", crypto.Hash, ""]])).Ptr(5, oidSignatureSHA384WithRSA, 1, 6), new ($structType([["algo", "algo", "crypto/x509", SignatureAlgorithm, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""], ["pubKeyAlgo", "pubKeyAlgo", "crypto/x509", PublicKeyAlgorithm, ""], ["hash", "hash", "crypto/x509", crypto.Hash, ""]])).Ptr(6, oidSignatureSHA512WithRSA, 1, 7), new ($structType([["algo", "algo", "crypto/x509", SignatureAlgorithm, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""], ["pubKeyAlgo", "pubKeyAlgo", "crypto/x509", PublicKeyAlgorithm, ""], ["hash", "hash", "crypto/x509", crypto.Hash, ""]])).Ptr(7, oidSignatureDSAWithSHA1, 2, 3), new ($structType([["algo", "algo", "crypto/x509", SignatureAlgorithm, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""], ["pubKeyAlgo", "pubKeyAlgo", "crypto/x509", PublicKeyAlgorithm, ""], ["hash", "hash", "crypto/x509", crypto.Hash, ""]])).Ptr(8, oidSignatureDSAWithSHA256, 2, 5), new ($structType([["algo", "algo", "crypto/x509", SignatureAlgorithm, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""], ["pubKeyAlgo", "pubKeyAlgo", "crypto/x509", PublicKeyAlgorithm, ""], ["hash", "hash", "crypto/x509", crypto.Hash, ""]])).Ptr(9, oidSignatureECDSAWithSHA1, 3, 3), new ($structType([["algo", "algo", "crypto/x509", SignatureAlgorithm, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""], ["pubKeyAlgo", "pubKeyAlgo", "crypto/x509", PublicKeyAlgorithm, ""], ["hash", "hash", "crypto/x509", crypto.Hash, ""]])).Ptr(10, oidSignatureECDSAWithSHA256, 3, 5), new ($structType([["algo", "algo", "crypto/x509", SignatureAlgorithm, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""], ["pubKeyAlgo", "pubKeyAlgo", "crypto/x509", PublicKeyAlgorithm, ""], ["hash", "hash", "crypto/x509", crypto.Hash, ""]])).Ptr(11, oidSignatureECDSAWithSHA384, 3, 6), new ($structType([["algo", "algo", "crypto/x509", SignatureAlgorithm, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""], ["pubKeyAlgo", "pubKeyAlgo", "crypto/x509", PublicKeyAlgorithm, ""], ["hash", "hash", "crypto/x509", crypto.Hash, ""]])).Ptr(12, oidSignatureECDSAWithSHA512, 3, 7)]);
		oidPublicKeyRSA = new asn1.ObjectIdentifier([1, 2, 840, 113549, 1, 1, 1]);
		oidPublicKeyDSA = new asn1.ObjectIdentifier([1, 2, 840, 10040, 4, 1]);
		oidPublicKeyECDSA = new asn1.ObjectIdentifier([1, 2, 840, 10045, 2, 1]);
		oidNamedCurveP224 = new asn1.ObjectIdentifier([1, 3, 132, 0, 33]);
		oidNamedCurveP256 = new asn1.ObjectIdentifier([1, 2, 840, 10045, 3, 1, 7]);
		oidNamedCurveP384 = new asn1.ObjectIdentifier([1, 3, 132, 0, 34]);
		oidNamedCurveP521 = new asn1.ObjectIdentifier([1, 3, 132, 0, 35]);
		oidExtKeyUsageAny = new asn1.ObjectIdentifier([2, 5, 29, 37, 0]);
		oidExtKeyUsageServerAuth = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 1]);
		oidExtKeyUsageClientAuth = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 2]);
		oidExtKeyUsageCodeSigning = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 3]);
		oidExtKeyUsageEmailProtection = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 4]);
		oidExtKeyUsageIPSECEndSystem = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 5]);
		oidExtKeyUsageIPSECTunnel = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 6]);
		oidExtKeyUsageIPSECUser = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 7]);
		oidExtKeyUsageTimeStamping = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 8]);
		oidExtKeyUsageOCSPSigning = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 3, 9]);
		oidExtKeyUsageMicrosoftServerGatedCrypto = new asn1.ObjectIdentifier([1, 3, 6, 1, 4, 1, 311, 10, 3, 3]);
		oidExtKeyUsageNetscapeServerGatedCrypto = new asn1.ObjectIdentifier([2, 16, 840, 1, 113730, 4, 1]);
		extKeyUsageOIDs = new ($sliceType(($structType([["extKeyUsage", "extKeyUsage", "crypto/x509", ExtKeyUsage, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""]]))))([new ($structType([["extKeyUsage", "extKeyUsage", "crypto/x509", ExtKeyUsage, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""]])).Ptr(0, oidExtKeyUsageAny), new ($structType([["extKeyUsage", "extKeyUsage", "crypto/x509", ExtKeyUsage, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""]])).Ptr(1, oidExtKeyUsageServerAuth), new ($structType([["extKeyUsage", "extKeyUsage", "crypto/x509", ExtKeyUsage, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""]])).Ptr(2, oidExtKeyUsageClientAuth), new ($structType([["extKeyUsage", "extKeyUsage", "crypto/x509", ExtKeyUsage, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""]])).Ptr(3, oidExtKeyUsageCodeSigning), new ($structType([["extKeyUsage", "extKeyUsage", "crypto/x509", ExtKeyUsage, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""]])).Ptr(4, oidExtKeyUsageEmailProtection), new ($structType([["extKeyUsage", "extKeyUsage", "crypto/x509", ExtKeyUsage, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""]])).Ptr(5, oidExtKeyUsageIPSECEndSystem), new ($structType([["extKeyUsage", "extKeyUsage", "crypto/x509", ExtKeyUsage, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""]])).Ptr(6, oidExtKeyUsageIPSECTunnel), new ($structType([["extKeyUsage", "extKeyUsage", "crypto/x509", ExtKeyUsage, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""]])).Ptr(7, oidExtKeyUsageIPSECUser), new ($structType([["extKeyUsage", "extKeyUsage", "crypto/x509", ExtKeyUsage, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""]])).Ptr(8, oidExtKeyUsageTimeStamping), new ($structType([["extKeyUsage", "extKeyUsage", "crypto/x509", ExtKeyUsage, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""]])).Ptr(9, oidExtKeyUsageOCSPSigning), new ($structType([["extKeyUsage", "extKeyUsage", "crypto/x509", ExtKeyUsage, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""]])).Ptr(10, oidExtKeyUsageMicrosoftServerGatedCrypto), new ($structType([["extKeyUsage", "extKeyUsage", "crypto/x509", ExtKeyUsage, ""], ["oid", "oid", "crypto/x509", asn1.ObjectIdentifier, ""]])).Ptr(11, oidExtKeyUsageNetscapeServerGatedCrypto)]);
		$pkg.ErrUnsupportedAlgorithm = errors.New("x509: cannot verify signature: algorithm unimplemented");
		entrustBrokenSPKI = new ($sliceType($Uint8))([48, 130, 1, 34, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 130, 1, 15, 0, 48, 130, 1, 10, 2, 130, 1, 1, 0, 151, 163, 45, 60, 158, 222, 5, 218, 19, 194, 17, 141, 157, 142, 227, 127, 199, 75, 126, 90, 159, 179, 255, 98, 171, 115, 200, 40, 107, 186, 16, 100, 130, 135, 19, 205, 87, 24, 255, 40, 206, 192, 230, 14, 6, 145, 80, 41, 131, 209, 242, 195, 42, 219, 216, 219, 78, 4, 204, 0, 235, 139, 182, 150, 220, 188, 170, 250, 82, 119, 4, 193, 219, 25, 228, 174, 156, 253, 60, 139, 3, 239, 77, 188, 26, 3, 101, 249, 193, 177, 63, 114, 134, 242, 56, 170, 25, 174, 16, 136, 120, 40, 218, 117, 195, 61, 2, 130, 2, 156, 185, 193, 101, 119, 118, 36, 76, 152, 247, 109, 49, 56, 251, 219, 254, 219, 55, 2, 118, 161, 24, 151, 166, 204, 222, 32, 9, 73, 54, 36, 105, 66, 246, 228, 55, 98, 241, 89, 109, 169, 60, 237, 52, 156, 163, 142, 219, 220, 58, 215, 247, 10, 111, 239, 46, 216, 213, 147, 90, 122, 237, 8, 73, 104, 226, 65, 227, 90, 144, 193, 134, 85, 252, 81, 67, 157, 224, 178, 196, 103, 180, 203, 50, 49, 37, 240, 84, 159, 75, 209, 111, 219, 212, 221, 252, 175, 94, 108, 120, 144, 149, 222, 202, 58, 72, 185, 121, 60, 155, 25, 214, 117, 5, 160, 249, 136, 215, 193, 232, 165, 9, 228, 26, 21, 220, 135, 35, 170, 178, 117, 140, 99, 37, 135, 216, 248, 61, 166, 194, 204, 102, 255, 165, 102, 104, 85, 2, 3, 1, 0, 1]);
		oidExtensionAuthorityInfoAccess = new ($sliceType($Int))([1, 3, 6, 1, 5, 5, 7, 1, 1]);
		oidAuthorityInfoAccessOcsp = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 48, 1]);
		oidAuthorityInfoAccessIssuers = new asn1.ObjectIdentifier([1, 3, 6, 1, 5, 5, 7, 48, 2]);
	};
	return $pkg;
})();
$packages["crypto/tls"] = (function() {
	var $pkg = {}, strconv = $packages["strconv"], aes = $packages["crypto/aes"], cipher = $packages["crypto/cipher"], des = $packages["crypto/des"], hmac = $packages["crypto/hmac"], rc4 = $packages["crypto/rc4"], sha1 = $packages["crypto/sha1"], x509 = $packages["crypto/x509"], hash = $packages["hash"], list = $packages["container/list"], crypto = $packages["crypto"], rand = $packages["crypto/rand"], fmt = $packages["fmt"], io = $packages["io"], big = $packages["math/big"], strings = $packages["strings"], sync = $packages["sync"], time = $packages["time"], bytes = $packages["bytes"], subtle = $packages["crypto/subtle"], errors = $packages["errors"], net = $packages["net"], ecdsa = $packages["crypto/ecdsa"], rsa = $packages["crypto/rsa"], asn1 = $packages["encoding/asn1"], elliptic = $packages["crypto/elliptic"], md5 = $packages["crypto/md5"], sha256 = $packages["crypto/sha256"], pem = $packages["encoding/pem"], ioutil = $packages["io/ioutil"], alert, keyAgreement, cipherSuite, macFunction, fixedNonceAEAD, ssl30MAC, tls10MAC, recordType, CurveID, signatureAndHash, ConnectionState, ClientAuthType, ClientSessionState, ClientSessionCache, Config, Certificate, ecdsaSignature, Conn, halfConn, cbcMode, block, clientHandshakeState, clientHelloMsg, serverHelloMsg, certificateMsg, serverKeyExchangeMsg, certificateStatusMsg, serverHelloDoneMsg, clientKeyExchangeMsg, finishedMsg, nextProtoMsg, certificateRequestMsg, certificateVerifyMsg, newSessionTicketMsg, serverHandshakeState, rsaKeyAgreement, ecdheKeyAgreement, finishedHash, sessionState, listener, alertText, cipherSuites, ssl30Pad1, ssl30Pad2, supportedSKXSignatureAlgorithms, supportedClientCertSignatureAlgorithms, defaultCurvePreferences, emptyConfig, once, varDefaultCipherSuites, errClientKeyExchange, errServerKeyExchange, masterSecretLabel, keyExpansionLabel, clientFinishedLabel, serverFinishedLabel, ssl3ClientFinishedMagic, ssl3ServerFinishedMagic, _map, _key, cipherRC4, cipher3DES, cipherAES, macSHA1, aeadAESGCM, rsaKA, ecdheECDSAKA, ecdheRSAKA, mutualCipherSuite, defaultConfig, defaultCipherSuites, initDefaultCipherSuites, unexpectedMessageError, removePadding, removePaddingSSL30, roundUp, padToBlockSize, clientSessionCacheKey, mutualProtocol, sha1Hash, md5SHA1Hash, sha256Hash, hashForServerKeyExchange, pickTLS12HashForSignature, curveForCurveID, splitPreMasterSecret, pHash, prf10, prf12, prf30, prfForVersion, masterFromPreMasterSecret, keysFromMasterSecret, newFinishedHash, finishedSum30, Server, NewListener, LoadX509KeyPair, X509KeyPair, parsePrivateKey;
	alert = $pkg.alert = $newType(1, "Uint8", "tls.alert", "alert", "crypto/tls", null);
	keyAgreement = $pkg.keyAgreement = $newType(8, "Interface", "tls.keyAgreement", "keyAgreement", "crypto/tls", null);
	cipherSuite = $pkg.cipherSuite = $newType(0, "Struct", "tls.cipherSuite", "cipherSuite", "crypto/tls", function(id_, keyLen_, macLen_, ivLen_, ka_, flags_, cipher_, mac_, aead_) {
		this.$val = this;
		this.id = id_ !== undefined ? id_ : 0;
		this.keyLen = keyLen_ !== undefined ? keyLen_ : 0;
		this.macLen = macLen_ !== undefined ? macLen_ : 0;
		this.ivLen = ivLen_ !== undefined ? ivLen_ : 0;
		this.ka = ka_ !== undefined ? ka_ : $throwNilPointerError;
		this.flags = flags_ !== undefined ? flags_ : 0;
		this.cipher = cipher_ !== undefined ? cipher_ : $throwNilPointerError;
		this.mac = mac_ !== undefined ? mac_ : $throwNilPointerError;
		this.aead = aead_ !== undefined ? aead_ : $throwNilPointerError;
	});
	macFunction = $pkg.macFunction = $newType(8, "Interface", "tls.macFunction", "macFunction", "crypto/tls", null);
	fixedNonceAEAD = $pkg.fixedNonceAEAD = $newType(0, "Struct", "tls.fixedNonceAEAD", "fixedNonceAEAD", "crypto/tls", function(sealNonce_, openNonce_, aead_) {
		this.$val = this;
		this.sealNonce = sealNonce_ !== undefined ? sealNonce_ : ($sliceType($Uint8)).nil;
		this.openNonce = openNonce_ !== undefined ? openNonce_ : ($sliceType($Uint8)).nil;
		this.aead = aead_ !== undefined ? aead_ : $ifaceNil;
	});
	ssl30MAC = $pkg.ssl30MAC = $newType(0, "Struct", "tls.ssl30MAC", "ssl30MAC", "crypto/tls", function(h_, key_) {
		this.$val = this;
		this.h = h_ !== undefined ? h_ : $ifaceNil;
		this.key = key_ !== undefined ? key_ : ($sliceType($Uint8)).nil;
	});
	tls10MAC = $pkg.tls10MAC = $newType(0, "Struct", "tls.tls10MAC", "tls10MAC", "crypto/tls", function(h_) {
		this.$val = this;
		this.h = h_ !== undefined ? h_ : $ifaceNil;
	});
	recordType = $pkg.recordType = $newType(1, "Uint8", "tls.recordType", "recordType", "crypto/tls", null);
	CurveID = $pkg.CurveID = $newType(2, "Uint16", "tls.CurveID", "CurveID", "crypto/tls", null);
	signatureAndHash = $pkg.signatureAndHash = $newType(0, "Struct", "tls.signatureAndHash", "signatureAndHash", "crypto/tls", function(hash_, signature_) {
		this.$val = this;
		this.hash = hash_ !== undefined ? hash_ : 0;
		this.signature = signature_ !== undefined ? signature_ : 0;
	});
	ConnectionState = $pkg.ConnectionState = $newType(0, "Struct", "tls.ConnectionState", "ConnectionState", "crypto/tls", function(Version_, HandshakeComplete_, DidResume_, CipherSuite_, NegotiatedProtocol_, NegotiatedProtocolIsMutual_, ServerName_, PeerCertificates_, VerifiedChains_) {
		this.$val = this;
		this.Version = Version_ !== undefined ? Version_ : 0;
		this.HandshakeComplete = HandshakeComplete_ !== undefined ? HandshakeComplete_ : false;
		this.DidResume = DidResume_ !== undefined ? DidResume_ : false;
		this.CipherSuite = CipherSuite_ !== undefined ? CipherSuite_ : 0;
		this.NegotiatedProtocol = NegotiatedProtocol_ !== undefined ? NegotiatedProtocol_ : "";
		this.NegotiatedProtocolIsMutual = NegotiatedProtocolIsMutual_ !== undefined ? NegotiatedProtocolIsMutual_ : false;
		this.ServerName = ServerName_ !== undefined ? ServerName_ : "";
		this.PeerCertificates = PeerCertificates_ !== undefined ? PeerCertificates_ : ($sliceType(($ptrType(x509.Certificate)))).nil;
		this.VerifiedChains = VerifiedChains_ !== undefined ? VerifiedChains_ : ($sliceType(($sliceType(($ptrType(x509.Certificate)))))).nil;
	});
	ClientAuthType = $pkg.ClientAuthType = $newType(4, "Int", "tls.ClientAuthType", "ClientAuthType", "crypto/tls", null);
	ClientSessionState = $pkg.ClientSessionState = $newType(0, "Struct", "tls.ClientSessionState", "ClientSessionState", "crypto/tls", function(sessionTicket_, vers_, cipherSuite_, masterSecret_, serverCertificates_) {
		this.$val = this;
		this.sessionTicket = sessionTicket_ !== undefined ? sessionTicket_ : ($sliceType($Uint8)).nil;
		this.vers = vers_ !== undefined ? vers_ : 0;
		this.cipherSuite = cipherSuite_ !== undefined ? cipherSuite_ : 0;
		this.masterSecret = masterSecret_ !== undefined ? masterSecret_ : ($sliceType($Uint8)).nil;
		this.serverCertificates = serverCertificates_ !== undefined ? serverCertificates_ : ($sliceType(($ptrType(x509.Certificate)))).nil;
	});
	ClientSessionCache = $pkg.ClientSessionCache = $newType(8, "Interface", "tls.ClientSessionCache", "ClientSessionCache", "crypto/tls", null);
	Config = $pkg.Config = $newType(0, "Struct", "tls.Config", "Config", "crypto/tls", function(Rand_, Time_, Certificates_, NameToCertificate_, RootCAs_, NextProtos_, ServerName_, ClientAuth_, ClientCAs_, InsecureSkipVerify_, CipherSuites_, PreferServerCipherSuites_, SessionTicketsDisabled_, SessionTicketKey_, ClientSessionCache_, MinVersion_, MaxVersion_, CurvePreferences_, serverInitOnce_) {
		this.$val = this;
		this.Rand = Rand_ !== undefined ? Rand_ : $ifaceNil;
		this.Time = Time_ !== undefined ? Time_ : $throwNilPointerError;
		this.Certificates = Certificates_ !== undefined ? Certificates_ : ($sliceType(Certificate)).nil;
		this.NameToCertificate = NameToCertificate_ !== undefined ? NameToCertificate_ : false;
		this.RootCAs = RootCAs_ !== undefined ? RootCAs_ : ($ptrType(x509.CertPool)).nil;
		this.NextProtos = NextProtos_ !== undefined ? NextProtos_ : ($sliceType($String)).nil;
		this.ServerName = ServerName_ !== undefined ? ServerName_ : "";
		this.ClientAuth = ClientAuth_ !== undefined ? ClientAuth_ : 0;
		this.ClientCAs = ClientCAs_ !== undefined ? ClientCAs_ : ($ptrType(x509.CertPool)).nil;
		this.InsecureSkipVerify = InsecureSkipVerify_ !== undefined ? InsecureSkipVerify_ : false;
		this.CipherSuites = CipherSuites_ !== undefined ? CipherSuites_ : ($sliceType($Uint16)).nil;
		this.PreferServerCipherSuites = PreferServerCipherSuites_ !== undefined ? PreferServerCipherSuites_ : false;
		this.SessionTicketsDisabled = SessionTicketsDisabled_ !== undefined ? SessionTicketsDisabled_ : false;
		this.SessionTicketKey = SessionTicketKey_ !== undefined ? SessionTicketKey_ : ($arrayType($Uint8, 32)).zero();
		this.ClientSessionCache = ClientSessionCache_ !== undefined ? ClientSessionCache_ : $ifaceNil;
		this.MinVersion = MinVersion_ !== undefined ? MinVersion_ : 0;
		this.MaxVersion = MaxVersion_ !== undefined ? MaxVersion_ : 0;
		this.CurvePreferences = CurvePreferences_ !== undefined ? CurvePreferences_ : ($sliceType(CurveID)).nil;
		this.serverInitOnce = serverInitOnce_ !== undefined ? serverInitOnce_ : new sync.Once.Ptr();
	});
	Certificate = $pkg.Certificate = $newType(0, "Struct", "tls.Certificate", "Certificate", "crypto/tls", function(Certificate_, PrivateKey_, OCSPStaple_, Leaf_) {
		this.$val = this;
		this.Certificate = Certificate_ !== undefined ? Certificate_ : ($sliceType(($sliceType($Uint8)))).nil;
		this.PrivateKey = PrivateKey_ !== undefined ? PrivateKey_ : $ifaceNil;
		this.OCSPStaple = OCSPStaple_ !== undefined ? OCSPStaple_ : ($sliceType($Uint8)).nil;
		this.Leaf = Leaf_ !== undefined ? Leaf_ : ($ptrType(x509.Certificate)).nil;
	});
	ecdsaSignature = $pkg.ecdsaSignature = $newType(0, "Struct", "tls.ecdsaSignature", "ecdsaSignature", "crypto/tls", function(R_, S_) {
		this.$val = this;
		this.R = R_ !== undefined ? R_ : ($ptrType(big.Int)).nil;
		this.S = S_ !== undefined ? S_ : ($ptrType(big.Int)).nil;
	});
	Conn = $pkg.Conn = $newType(0, "Struct", "tls.Conn", "Conn", "crypto/tls", function(conn_, isClient_, handshakeMutex_, handshakeErr_, vers_, haveVers_, config_, handshakeComplete_, didResume_, cipherSuite_, ocspResponse_, peerCertificates_, verifiedChains_, serverName_, clientProtocol_, clientProtocolFallback_, in$16_, out_, rawInput_, input_, hand_, tmp_) {
		this.$val = this;
		this.conn = conn_ !== undefined ? conn_ : $ifaceNil;
		this.isClient = isClient_ !== undefined ? isClient_ : false;
		this.handshakeMutex = handshakeMutex_ !== undefined ? handshakeMutex_ : new sync.Mutex.Ptr();
		this.handshakeErr = handshakeErr_ !== undefined ? handshakeErr_ : $ifaceNil;
		this.vers = vers_ !== undefined ? vers_ : 0;
		this.haveVers = haveVers_ !== undefined ? haveVers_ : false;
		this.config = config_ !== undefined ? config_ : ($ptrType(Config)).nil;
		this.handshakeComplete = handshakeComplete_ !== undefined ? handshakeComplete_ : false;
		this.didResume = didResume_ !== undefined ? didResume_ : false;
		this.cipherSuite = cipherSuite_ !== undefined ? cipherSuite_ : 0;
		this.ocspResponse = ocspResponse_ !== undefined ? ocspResponse_ : ($sliceType($Uint8)).nil;
		this.peerCertificates = peerCertificates_ !== undefined ? peerCertificates_ : ($sliceType(($ptrType(x509.Certificate)))).nil;
		this.verifiedChains = verifiedChains_ !== undefined ? verifiedChains_ : ($sliceType(($sliceType(($ptrType(x509.Certificate)))))).nil;
		this.serverName = serverName_ !== undefined ? serverName_ : "";
		this.clientProtocol = clientProtocol_ !== undefined ? clientProtocol_ : "";
		this.clientProtocolFallback = clientProtocolFallback_ !== undefined ? clientProtocolFallback_ : false;
		this.in$16 = in$16_ !== undefined ? in$16_ : new halfConn.Ptr();
		this.out = out_ !== undefined ? out_ : new halfConn.Ptr();
		this.rawInput = rawInput_ !== undefined ? rawInput_ : ($ptrType(block)).nil;
		this.input = input_ !== undefined ? input_ : ($ptrType(block)).nil;
		this.hand = hand_ !== undefined ? hand_ : new bytes.Buffer.Ptr();
		this.tmp = tmp_ !== undefined ? tmp_ : ($arrayType($Uint8, 16)).zero();
	});
	halfConn = $pkg.halfConn = $newType(0, "Struct", "tls.halfConn", "halfConn", "crypto/tls", function(Mutex_, err_, version_, cipher_, mac_, seq_, bfree_, nextCipher_, nextMac_, inDigestBuf_, outDigestBuf_) {
		this.$val = this;
		this.Mutex = Mutex_ !== undefined ? Mutex_ : new sync.Mutex.Ptr();
		this.err = err_ !== undefined ? err_ : $ifaceNil;
		this.version = version_ !== undefined ? version_ : 0;
		this.cipher = cipher_ !== undefined ? cipher_ : $ifaceNil;
		this.mac = mac_ !== undefined ? mac_ : $ifaceNil;
		this.seq = seq_ !== undefined ? seq_ : ($arrayType($Uint8, 8)).zero();
		this.bfree = bfree_ !== undefined ? bfree_ : ($ptrType(block)).nil;
		this.nextCipher = nextCipher_ !== undefined ? nextCipher_ : $ifaceNil;
		this.nextMac = nextMac_ !== undefined ? nextMac_ : $ifaceNil;
		this.inDigestBuf = inDigestBuf_ !== undefined ? inDigestBuf_ : ($sliceType($Uint8)).nil;
		this.outDigestBuf = outDigestBuf_ !== undefined ? outDigestBuf_ : ($sliceType($Uint8)).nil;
	});
	cbcMode = $pkg.cbcMode = $newType(8, "Interface", "tls.cbcMode", "cbcMode", "crypto/tls", null);
	block = $pkg.block = $newType(0, "Struct", "tls.block", "block", "crypto/tls", function(data_, off_, link_) {
		this.$val = this;
		this.data = data_ !== undefined ? data_ : ($sliceType($Uint8)).nil;
		this.off = off_ !== undefined ? off_ : 0;
		this.link = link_ !== undefined ? link_ : ($ptrType(block)).nil;
	});
	clientHandshakeState = $pkg.clientHandshakeState = $newType(0, "Struct", "tls.clientHandshakeState", "clientHandshakeState", "crypto/tls", function(c_, serverHello_, hello_, suite_, finishedHash_, masterSecret_, session_) {
		this.$val = this;
		this.c = c_ !== undefined ? c_ : ($ptrType(Conn)).nil;
		this.serverHello = serverHello_ !== undefined ? serverHello_ : ($ptrType(serverHelloMsg)).nil;
		this.hello = hello_ !== undefined ? hello_ : ($ptrType(clientHelloMsg)).nil;
		this.suite = suite_ !== undefined ? suite_ : ($ptrType(cipherSuite)).nil;
		this.finishedHash = finishedHash_ !== undefined ? finishedHash_ : new finishedHash.Ptr();
		this.masterSecret = masterSecret_ !== undefined ? masterSecret_ : ($sliceType($Uint8)).nil;
		this.session = session_ !== undefined ? session_ : ($ptrType(ClientSessionState)).nil;
	});
	clientHelloMsg = $pkg.clientHelloMsg = $newType(0, "Struct", "tls.clientHelloMsg", "clientHelloMsg", "crypto/tls", function(raw_, vers_, random_, sessionId_, cipherSuites_, compressionMethods_, nextProtoNeg_, serverName_, ocspStapling_, supportedCurves_, supportedPoints_, ticketSupported_, sessionTicket_, signatureAndHashes_, secureRenegotiation_) {
		this.$val = this;
		this.raw = raw_ !== undefined ? raw_ : ($sliceType($Uint8)).nil;
		this.vers = vers_ !== undefined ? vers_ : 0;
		this.random = random_ !== undefined ? random_ : ($sliceType($Uint8)).nil;
		this.sessionId = sessionId_ !== undefined ? sessionId_ : ($sliceType($Uint8)).nil;
		this.cipherSuites = cipherSuites_ !== undefined ? cipherSuites_ : ($sliceType($Uint16)).nil;
		this.compressionMethods = compressionMethods_ !== undefined ? compressionMethods_ : ($sliceType($Uint8)).nil;
		this.nextProtoNeg = nextProtoNeg_ !== undefined ? nextProtoNeg_ : false;
		this.serverName = serverName_ !== undefined ? serverName_ : "";
		this.ocspStapling = ocspStapling_ !== undefined ? ocspStapling_ : false;
		this.supportedCurves = supportedCurves_ !== undefined ? supportedCurves_ : ($sliceType(CurveID)).nil;
		this.supportedPoints = supportedPoints_ !== undefined ? supportedPoints_ : ($sliceType($Uint8)).nil;
		this.ticketSupported = ticketSupported_ !== undefined ? ticketSupported_ : false;
		this.sessionTicket = sessionTicket_ !== undefined ? sessionTicket_ : ($sliceType($Uint8)).nil;
		this.signatureAndHashes = signatureAndHashes_ !== undefined ? signatureAndHashes_ : ($sliceType(signatureAndHash)).nil;
		this.secureRenegotiation = secureRenegotiation_ !== undefined ? secureRenegotiation_ : false;
	});
	serverHelloMsg = $pkg.serverHelloMsg = $newType(0, "Struct", "tls.serverHelloMsg", "serverHelloMsg", "crypto/tls", function(raw_, vers_, random_, sessionId_, cipherSuite_, compressionMethod_, nextProtoNeg_, nextProtos_, ocspStapling_, ticketSupported_, secureRenegotiation_) {
		this.$val = this;
		this.raw = raw_ !== undefined ? raw_ : ($sliceType($Uint8)).nil;
		this.vers = vers_ !== undefined ? vers_ : 0;
		this.random = random_ !== undefined ? random_ : ($sliceType($Uint8)).nil;
		this.sessionId = sessionId_ !== undefined ? sessionId_ : ($sliceType($Uint8)).nil;
		this.cipherSuite = cipherSuite_ !== undefined ? cipherSuite_ : 0;
		this.compressionMethod = compressionMethod_ !== undefined ? compressionMethod_ : 0;
		this.nextProtoNeg = nextProtoNeg_ !== undefined ? nextProtoNeg_ : false;
		this.nextProtos = nextProtos_ !== undefined ? nextProtos_ : ($sliceType($String)).nil;
		this.ocspStapling = ocspStapling_ !== undefined ? ocspStapling_ : false;
		this.ticketSupported = ticketSupported_ !== undefined ? ticketSupported_ : false;
		this.secureRenegotiation = secureRenegotiation_ !== undefined ? secureRenegotiation_ : false;
	});
	certificateMsg = $pkg.certificateMsg = $newType(0, "Struct", "tls.certificateMsg", "certificateMsg", "crypto/tls", function(raw_, certificates_) {
		this.$val = this;
		this.raw = raw_ !== undefined ? raw_ : ($sliceType($Uint8)).nil;
		this.certificates = certificates_ !== undefined ? certificates_ : ($sliceType(($sliceType($Uint8)))).nil;
	});
	serverKeyExchangeMsg = $pkg.serverKeyExchangeMsg = $newType(0, "Struct", "tls.serverKeyExchangeMsg", "serverKeyExchangeMsg", "crypto/tls", function(raw_, key_) {
		this.$val = this;
		this.raw = raw_ !== undefined ? raw_ : ($sliceType($Uint8)).nil;
		this.key = key_ !== undefined ? key_ : ($sliceType($Uint8)).nil;
	});
	certificateStatusMsg = $pkg.certificateStatusMsg = $newType(0, "Struct", "tls.certificateStatusMsg", "certificateStatusMsg", "crypto/tls", function(raw_, statusType_, response_) {
		this.$val = this;
		this.raw = raw_ !== undefined ? raw_ : ($sliceType($Uint8)).nil;
		this.statusType = statusType_ !== undefined ? statusType_ : 0;
		this.response = response_ !== undefined ? response_ : ($sliceType($Uint8)).nil;
	});
	serverHelloDoneMsg = $pkg.serverHelloDoneMsg = $newType(0, "Struct", "tls.serverHelloDoneMsg", "serverHelloDoneMsg", "crypto/tls", function() {
		this.$val = this;
	});
	clientKeyExchangeMsg = $pkg.clientKeyExchangeMsg = $newType(0, "Struct", "tls.clientKeyExchangeMsg", "clientKeyExchangeMsg", "crypto/tls", function(raw_, ciphertext_) {
		this.$val = this;
		this.raw = raw_ !== undefined ? raw_ : ($sliceType($Uint8)).nil;
		this.ciphertext = ciphertext_ !== undefined ? ciphertext_ : ($sliceType($Uint8)).nil;
	});
	finishedMsg = $pkg.finishedMsg = $newType(0, "Struct", "tls.finishedMsg", "finishedMsg", "crypto/tls", function(raw_, verifyData_) {
		this.$val = this;
		this.raw = raw_ !== undefined ? raw_ : ($sliceType($Uint8)).nil;
		this.verifyData = verifyData_ !== undefined ? verifyData_ : ($sliceType($Uint8)).nil;
	});
	nextProtoMsg = $pkg.nextProtoMsg = $newType(0, "Struct", "tls.nextProtoMsg", "nextProtoMsg", "crypto/tls", function(raw_, proto_) {
		this.$val = this;
		this.raw = raw_ !== undefined ? raw_ : ($sliceType($Uint8)).nil;
		this.proto = proto_ !== undefined ? proto_ : "";
	});
	certificateRequestMsg = $pkg.certificateRequestMsg = $newType(0, "Struct", "tls.certificateRequestMsg", "certificateRequestMsg", "crypto/tls", function(raw_, hasSignatureAndHash_, certificateTypes_, signatureAndHashes_, certificateAuthorities_) {
		this.$val = this;
		this.raw = raw_ !== undefined ? raw_ : ($sliceType($Uint8)).nil;
		this.hasSignatureAndHash = hasSignatureAndHash_ !== undefined ? hasSignatureAndHash_ : false;
		this.certificateTypes = certificateTypes_ !== undefined ? certificateTypes_ : ($sliceType($Uint8)).nil;
		this.signatureAndHashes = signatureAndHashes_ !== undefined ? signatureAndHashes_ : ($sliceType(signatureAndHash)).nil;
		this.certificateAuthorities = certificateAuthorities_ !== undefined ? certificateAuthorities_ : ($sliceType(($sliceType($Uint8)))).nil;
	});
	certificateVerifyMsg = $pkg.certificateVerifyMsg = $newType(0, "Struct", "tls.certificateVerifyMsg", "certificateVerifyMsg", "crypto/tls", function(raw_, hasSignatureAndHash_, signatureAndHash_, signature_) {
		this.$val = this;
		this.raw = raw_ !== undefined ? raw_ : ($sliceType($Uint8)).nil;
		this.hasSignatureAndHash = hasSignatureAndHash_ !== undefined ? hasSignatureAndHash_ : false;
		this.signatureAndHash = signatureAndHash_ !== undefined ? signatureAndHash_ : new signatureAndHash.Ptr();
		this.signature = signature_ !== undefined ? signature_ : ($sliceType($Uint8)).nil;
	});
	newSessionTicketMsg = $pkg.newSessionTicketMsg = $newType(0, "Struct", "tls.newSessionTicketMsg", "newSessionTicketMsg", "crypto/tls", function(raw_, ticket_) {
		this.$val = this;
		this.raw = raw_ !== undefined ? raw_ : ($sliceType($Uint8)).nil;
		this.ticket = ticket_ !== undefined ? ticket_ : ($sliceType($Uint8)).nil;
	});
	serverHandshakeState = $pkg.serverHandshakeState = $newType(0, "Struct", "tls.serverHandshakeState", "serverHandshakeState", "crypto/tls", function(c_, clientHello_, hello_, suite_, ellipticOk_, ecdsaOk_, sessionState_, finishedHash_, masterSecret_, certsFromClient_, cert_) {
		this.$val = this;
		this.c = c_ !== undefined ? c_ : ($ptrType(Conn)).nil;
		this.clientHello = clientHello_ !== undefined ? clientHello_ : ($ptrType(clientHelloMsg)).nil;
		this.hello = hello_ !== undefined ? hello_ : ($ptrType(serverHelloMsg)).nil;
		this.suite = suite_ !== undefined ? suite_ : ($ptrType(cipherSuite)).nil;
		this.ellipticOk = ellipticOk_ !== undefined ? ellipticOk_ : false;
		this.ecdsaOk = ecdsaOk_ !== undefined ? ecdsaOk_ : false;
		this.sessionState = sessionState_ !== undefined ? sessionState_ : ($ptrType(sessionState)).nil;
		this.finishedHash = finishedHash_ !== undefined ? finishedHash_ : new finishedHash.Ptr();
		this.masterSecret = masterSecret_ !== undefined ? masterSecret_ : ($sliceType($Uint8)).nil;
		this.certsFromClient = certsFromClient_ !== undefined ? certsFromClient_ : ($sliceType(($sliceType($Uint8)))).nil;
		this.cert = cert_ !== undefined ? cert_ : ($ptrType(Certificate)).nil;
	});
	rsaKeyAgreement = $pkg.rsaKeyAgreement = $newType(0, "Struct", "tls.rsaKeyAgreement", "rsaKeyAgreement", "crypto/tls", function() {
		this.$val = this;
	});
	ecdheKeyAgreement = $pkg.ecdheKeyAgreement = $newType(0, "Struct", "tls.ecdheKeyAgreement", "ecdheKeyAgreement", "crypto/tls", function(version_, sigType_, privateKey_, curve_, x_, y_) {
		this.$val = this;
		this.version = version_ !== undefined ? version_ : 0;
		this.sigType = sigType_ !== undefined ? sigType_ : 0;
		this.privateKey = privateKey_ !== undefined ? privateKey_ : ($sliceType($Uint8)).nil;
		this.curve = curve_ !== undefined ? curve_ : $ifaceNil;
		this.x = x_ !== undefined ? x_ : ($ptrType(big.Int)).nil;
		this.y = y_ !== undefined ? y_ : ($ptrType(big.Int)).nil;
	});
	finishedHash = $pkg.finishedHash = $newType(0, "Struct", "tls.finishedHash", "finishedHash", "crypto/tls", function(client_, server_, clientMD5_, serverMD5_, version_) {
		this.$val = this;
		this.client = client_ !== undefined ? client_ : $ifaceNil;
		this.server = server_ !== undefined ? server_ : $ifaceNil;
		this.clientMD5 = clientMD5_ !== undefined ? clientMD5_ : $ifaceNil;
		this.serverMD5 = serverMD5_ !== undefined ? serverMD5_ : $ifaceNil;
		this.version = version_ !== undefined ? version_ : 0;
	});
	sessionState = $pkg.sessionState = $newType(0, "Struct", "tls.sessionState", "sessionState", "crypto/tls", function(vers_, cipherSuite_, masterSecret_, certificates_) {
		this.$val = this;
		this.vers = vers_ !== undefined ? vers_ : 0;
		this.cipherSuite = cipherSuite_ !== undefined ? cipherSuite_ : 0;
		this.masterSecret = masterSecret_ !== undefined ? masterSecret_ : ($sliceType($Uint8)).nil;
		this.certificates = certificates_ !== undefined ? certificates_ : ($sliceType(($sliceType($Uint8)))).nil;
	});
	listener = $pkg.listener = $newType(0, "Struct", "tls.listener", "listener", "crypto/tls", function(Listener_, config_) {
		this.$val = this;
		this.Listener = Listener_ !== undefined ? Listener_ : $ifaceNil;
		this.config = config_ !== undefined ? config_ : ($ptrType(Config)).nil;
	});
	alert.prototype.String = function() {
		var e, _tuple, _entry, s, ok;
		e = this.$val !== undefined ? this.$val : this;
		_tuple = (_entry = alertText[e], _entry !== undefined ? [_entry.v, true] : ["", false]); s = _tuple[0]; ok = _tuple[1];
		if (ok) {
			return s;
		}
		return "alert(" + strconv.Itoa((e >> 0)) + ")";
	};
	$ptrType(alert).prototype.String = function() { return new alert(this.$get()).String(); };
	alert.prototype.Error = function() {
		var e;
		e = this.$val !== undefined ? this.$val : this;
		return new alert(e).String();
	};
	$ptrType(alert).prototype.Error = function() { return new alert(this.$get()).Error(); };
	cipherRC4 = function(key, iv, isRead) {
		var _tuple, cipher$1;
		_tuple = rc4.NewCipher(key); cipher$1 = _tuple[0];
		return cipher$1;
	};
	cipher3DES = function(key, iv, isRead) {
		var _tuple, block$1;
		_tuple = des.NewTripleDESCipher(key); block$1 = _tuple[0];
		if (isRead) {
			return cipher.NewCBCDecrypter(block$1, iv);
		}
		return cipher.NewCBCEncrypter(block$1, iv);
	};
	cipherAES = function(key, iv, isRead) {
		var _tuple, block$1;
		_tuple = aes.NewCipher(key); block$1 = _tuple[0];
		if (isRead) {
			return cipher.NewCBCDecrypter(block$1, iv);
		}
		return cipher.NewCBCEncrypter(block$1, iv);
	};
	macSHA1 = function(version, key) {
		var mac, x;
		if (version === 768) {
			mac = new ssl30MAC.Ptr(sha1.New(), ($sliceType($Uint8)).make(key.$length));
			$copySlice(mac.key, key);
			return new mac.constructor.Struct(mac);
		}
		return (x = new tls10MAC.Ptr(hmac.New(sha1.New, key)), new x.constructor.Struct(x));
	};
	fixedNonceAEAD.Ptr.prototype.NonceSize = function() {
		var f;
		f = this;
		return 8;
	};
	fixedNonceAEAD.prototype.NonceSize = function() { return this.$val.NonceSize(); };
	fixedNonceAEAD.Ptr.prototype.Overhead = function() {
		var f;
		f = this;
		return f.aead.Overhead();
	};
	fixedNonceAEAD.prototype.Overhead = function() { return this.$val.Overhead(); };
	fixedNonceAEAD.Ptr.prototype.Seal = function(out, nonce, plaintext, additionalData) {
		var f;
		f = this;
		$copySlice($subslice(f.sealNonce, (f.sealNonce.$length - 8 >> 0)), nonce);
		return f.aead.Seal(out, f.sealNonce, plaintext, additionalData);
	};
	fixedNonceAEAD.prototype.Seal = function(out, nonce, plaintext, additionalData) { return this.$val.Seal(out, nonce, plaintext, additionalData); };
	fixedNonceAEAD.Ptr.prototype.Open = function(out, nonce, plaintext, additionalData) {
		var f;
		f = this;
		$copySlice($subslice(f.openNonce, (f.openNonce.$length - 8 >> 0)), nonce);
		return f.aead.Open(out, f.openNonce, plaintext, additionalData);
	};
	fixedNonceAEAD.prototype.Open = function(out, nonce, plaintext, additionalData) { return this.$val.Open(out, nonce, plaintext, additionalData); };
	aeadAESGCM = function(key, fixedNonce) {
		var _tuple, aes$1, err, _tuple$1, aead, _tmp, _tmp$1, nonce1, nonce2;
		_tuple = aes.NewCipher(key); aes$1 = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		_tuple$1 = cipher.NewGCM(aes$1); aead = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			$panic(err);
		}
		_tmp = ($sliceType($Uint8)).make(12); _tmp$1 = ($sliceType($Uint8)).make(12); nonce1 = _tmp; nonce2 = _tmp$1;
		$copySlice(nonce1, fixedNonce);
		$copySlice(nonce2, fixedNonce);
		return new fixedNonceAEAD.Ptr(nonce1, nonce2, aead);
	};
	ssl30MAC.Ptr.prototype.Size = function() {
		var s;
		s = new ssl30MAC.Ptr(); $copy(s, this, ssl30MAC);
		return s.h.Size();
	};
	ssl30MAC.prototype.Size = function() { return this.$val.Size(); };
	ssl30MAC.Ptr.prototype.MAC = function(digestBuf, seq, header, data) {
		var s, padLength;
		s = new ssl30MAC.Ptr(); $copy(s, this, ssl30MAC);
		padLength = 48;
		if (s.h.Size() === 20) {
			padLength = 40;
		}
		s.h.Reset();
		s.h.Write(s.key);
		s.h.Write($subslice(new ($sliceType($Uint8))(ssl30Pad1), 0, padLength));
		s.h.Write(seq);
		s.h.Write($subslice(header, 0, 1));
		s.h.Write($subslice(header, 3, 5));
		s.h.Write(data);
		digestBuf = s.h.Sum($subslice(digestBuf, 0, 0));
		s.h.Reset();
		s.h.Write(s.key);
		s.h.Write($subslice(new ($sliceType($Uint8))(ssl30Pad2), 0, padLength));
		s.h.Write(digestBuf);
		return s.h.Sum($subslice(digestBuf, 0, 0));
	};
	ssl30MAC.prototype.MAC = function(digestBuf, seq, header, data) { return this.$val.MAC(digestBuf, seq, header, data); };
	tls10MAC.Ptr.prototype.Size = function() {
		var s;
		s = new tls10MAC.Ptr(); $copy(s, this, tls10MAC);
		return s.h.Size();
	};
	tls10MAC.prototype.Size = function() { return this.$val.Size(); };
	tls10MAC.Ptr.prototype.MAC = function(digestBuf, seq, header, data) {
		var s;
		s = new tls10MAC.Ptr(); $copy(s, this, tls10MAC);
		s.h.Reset();
		s.h.Write(seq);
		s.h.Write(header);
		s.h.Write(data);
		return s.h.Sum($subslice(digestBuf, 0, 0));
	};
	tls10MAC.prototype.MAC = function(digestBuf, seq, header, data) { return this.$val.MAC(digestBuf, seq, header, data); };
	rsaKA = function(version) {
		var x;
		return (x = new rsaKeyAgreement.Ptr(), new x.constructor.Struct(x));
	};
	ecdheECDSAKA = function(version) {
		return new ecdheKeyAgreement.Ptr(version, 3, ($sliceType($Uint8)).nil, $ifaceNil, ($ptrType(big.Int)).nil, ($ptrType(big.Int)).nil);
	};
	ecdheRSAKA = function(version) {
		return new ecdheKeyAgreement.Ptr(version, 1, ($sliceType($Uint8)).nil, $ifaceNil, ($ptrType(big.Int)).nil, ($ptrType(big.Int)).nil);
	};
	mutualCipherSuite = function(have, want) {
		var _ref, _i, id, _ref$1, _i$1, suite;
		_ref = have;
		_i = 0;
		while (_i < _ref.$length) {
			id = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (id === want) {
				_ref$1 = cipherSuites;
				_i$1 = 0;
				while (_i$1 < _ref$1.$length) {
					suite = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
					if (suite.id === want) {
						return suite;
					}
					_i$1++;
				}
				return ($ptrType(cipherSuite)).nil;
			}
			_i++;
		}
		return ($ptrType(cipherSuite)).nil;
	};
	Config.Ptr.prototype.serverInit = function() {
		var c, _ref, _i, b, _tuple, err;
		c = this;
		if (c.SessionTicketsDisabled) {
			return;
		}
		_ref = c.SessionTicketKey;
		_i = 0;
		while (_i < 32) {
			b = ((_i < 0 || _i >= _ref.length) ? $throwRuntimeError("index out of range") : _ref[_i]);
			if (!((b === 0))) {
				return;
			}
			_i++;
		}
		_tuple = io.ReadFull(c.rand(), new ($sliceType($Uint8))(c.SessionTicketKey)); err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			c.SessionTicketsDisabled = true;
		}
	};
	Config.prototype.serverInit = function() { return this.$val.serverInit(); };
	Config.Ptr.prototype.rand = function() {
		var c, r;
		c = this;
		r = c.Rand;
		if ($interfaceIsEqual(r, $ifaceNil)) {
			return rand.Reader;
		}
		return r;
	};
	Config.prototype.rand = function() { return this.$val.rand(); };
	Config.Ptr.prototype.time = function() {
		var c, t;
		c = this;
		t = c.Time;
		if (t === $throwNilPointerError) {
			t = time.Now;
		}
		return t();
	};
	Config.prototype.time = function() { return this.$val.time(); };
	Config.Ptr.prototype.cipherSuites = function() {
		var c, s;
		c = this;
		s = c.CipherSuites;
		if (s === ($sliceType($Uint16)).nil) {
			s = defaultCipherSuites();
		}
		return s;
	};
	Config.prototype.cipherSuites = function() { return this.$val.cipherSuites(); };
	Config.Ptr.prototype.minVersion = function() {
		var c;
		c = this;
		if (c === ($ptrType(Config)).nil || (c.MinVersion === 0)) {
			return 768;
		}
		return c.MinVersion;
	};
	Config.prototype.minVersion = function() { return this.$val.minVersion(); };
	Config.Ptr.prototype.maxVersion = function() {
		var c;
		c = this;
		if (c === ($ptrType(Config)).nil || (c.MaxVersion === 0)) {
			return 771;
		}
		return c.MaxVersion;
	};
	Config.prototype.maxVersion = function() { return this.$val.maxVersion(); };
	Config.Ptr.prototype.curvePreferences = function() {
		var c;
		c = this;
		if (c === ($ptrType(Config)).nil || (c.CurvePreferences.$length === 0)) {
			return defaultCurvePreferences;
		}
		return c.CurvePreferences;
	};
	Config.prototype.curvePreferences = function() { return this.$val.curvePreferences(); };
	Config.Ptr.prototype.mutualVersion = function(vers) {
		var c, minVersion, maxVersion;
		c = this;
		minVersion = c.minVersion();
		maxVersion = c.maxVersion();
		if (vers < minVersion) {
			return [0, false];
		}
		if (vers > maxVersion) {
			vers = maxVersion;
		}
		return [vers, true];
	};
	Config.prototype.mutualVersion = function(vers) { return this.$val.mutualVersion(vers); };
	Config.Ptr.prototype.getCertificateForName = function(name) {
		var c, x, _tuple, _entry, cert, ok, labels, _ref, _i, i, candidate, _tuple$1, _entry$1, cert$1, ok$1, x$1;
		c = this;
		if ((c.Certificates.$length === 1) || c.NameToCertificate === false) {
			return (x = c.Certificates, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		}
		name = strings.ToLower(name);
		while (name.length > 0 && (name.charCodeAt((name.length - 1 >> 0)) === 46)) {
			name = name.substring(0, (name.length - 1 >> 0));
		}
		_tuple = (_entry = c.NameToCertificate[name], _entry !== undefined ? [_entry.v, true] : [($ptrType(Certificate)).nil, false]); cert = _tuple[0]; ok = _tuple[1];
		if (ok) {
			return cert;
		}
		labels = strings.Split(name, ".");
		_ref = labels;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			(i < 0 || i >= labels.$length) ? $throwRuntimeError("index out of range") : labels.$array[labels.$offset + i] = "*";
			candidate = strings.Join(labels, ".");
			_tuple$1 = (_entry$1 = c.NameToCertificate[candidate], _entry$1 !== undefined ? [_entry$1.v, true] : [($ptrType(Certificate)).nil, false]); cert$1 = _tuple$1[0]; ok$1 = _tuple$1[1];
			if (ok$1) {
				return cert$1;
			}
			_i++;
		}
		return (x$1 = c.Certificates, ((0 < 0 || 0 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0]));
	};
	Config.prototype.getCertificateForName = function(name) { return this.$val.getCertificateForName(name); };
	Config.Ptr.prototype.BuildNameToCertificate = function() {
		var c, _ref, _i, i, x, cert, _tuple, x$1, x509Cert, err, _key$1, _ref$1, _i$1, san, _key$2;
		c = this;
		c.NameToCertificate = new $Map();
		_ref = c.Certificates;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			cert = (x = c.Certificates, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
			_tuple = x509.ParseCertificate((x$1 = cert.Certificate, ((0 < 0 || 0 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0]))); x509Cert = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				_i++;
				continue;
			}
			if (x509Cert.Subject.CommonName.length > 0) {
				_key$1 = x509Cert.Subject.CommonName; (c.NameToCertificate || $throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: cert };
			}
			_ref$1 = x509Cert.DNSNames;
			_i$1 = 0;
			while (_i$1 < _ref$1.$length) {
				san = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				_key$2 = san; (c.NameToCertificate || $throwRuntimeError("assignment to entry in nil map"))[_key$2] = { k: _key$2, v: cert };
				_i$1++;
			}
			_i++;
		}
	};
	Config.prototype.BuildNameToCertificate = function() { return this.$val.BuildNameToCertificate(); };
	defaultConfig = function() {
		return emptyConfig;
	};
	defaultCipherSuites = function() {
		once.Do(initDefaultCipherSuites);
		return varDefaultCipherSuites;
	};
	initDefaultCipherSuites = function() {
		var _ref, _i, i, suite;
		varDefaultCipherSuites = ($sliceType($Uint16)).make(cipherSuites.$length);
		_ref = cipherSuites;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			suite = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			(i < 0 || i >= varDefaultCipherSuites.$length) ? $throwRuntimeError("index out of range") : varDefaultCipherSuites.$array[varDefaultCipherSuites.$offset + i] = suite.id;
			_i++;
		}
	};
	unexpectedMessageError = function(wanted, got) {
		return fmt.Errorf("tls: received unexpected handshake message of type %T when waiting for %T", new ($sliceType($emptyInterface))([got, wanted]));
	};
	Conn.Ptr.prototype.LocalAddr = function() {
		var c;
		c = this;
		return c.conn.LocalAddr();
	};
	Conn.prototype.LocalAddr = function() { return this.$val.LocalAddr(); };
	Conn.Ptr.prototype.RemoteAddr = function() {
		var c;
		c = this;
		return c.conn.RemoteAddr();
	};
	Conn.prototype.RemoteAddr = function() { return this.$val.RemoteAddr(); };
	Conn.Ptr.prototype.SetDeadline = function(t) {
		var c;
		c = this;
		return c.conn.SetDeadline($clone(t, time.Time));
	};
	Conn.prototype.SetDeadline = function(t) { return this.$val.SetDeadline(t); };
	Conn.Ptr.prototype.SetReadDeadline = function(t) {
		var c;
		c = this;
		return c.conn.SetReadDeadline($clone(t, time.Time));
	};
	Conn.prototype.SetReadDeadline = function(t) { return this.$val.SetReadDeadline(t); };
	Conn.Ptr.prototype.SetWriteDeadline = function(t) {
		var c;
		c = this;
		return c.conn.SetWriteDeadline($clone(t, time.Time));
	};
	Conn.prototype.SetWriteDeadline = function(t) { return this.$val.SetWriteDeadline(t); };
	halfConn.Ptr.prototype.setErrorLocked = function(err) {
		var hc;
		hc = this;
		hc.err = err;
		return err;
	};
	halfConn.prototype.setErrorLocked = function(err) { return this.$val.setErrorLocked(err); };
	halfConn.Ptr.prototype.error = function() {
		var hc, err;
		hc = this;
		hc.Mutex.Lock();
		err = hc.err;
		hc.Mutex.Unlock();
		return err;
	};
	halfConn.prototype.error = function() { return this.$val.error(); };
	halfConn.Ptr.prototype.prepareCipherSpec = function(version, cipher$1, mac) {
		var hc;
		hc = this;
		hc.version = version;
		hc.nextCipher = cipher$1;
		hc.nextMac = mac;
	};
	halfConn.prototype.prepareCipherSpec = function(version, cipher$1, mac) { return this.$val.prepareCipherSpec(version, cipher$1, mac); };
	halfConn.Ptr.prototype.changeCipherSpec = function() {
		var hc, _ref, _i, i, x;
		hc = this;
		if ($interfaceIsEqual(hc.nextCipher, $ifaceNil)) {
			return new alert(80);
		}
		hc.cipher = hc.nextCipher;
		hc.mac = hc.nextMac;
		hc.nextCipher = $ifaceNil;
		hc.nextMac = $ifaceNil;
		_ref = hc.seq;
		_i = 0;
		while (_i < 8) {
			i = _i;
			(x = hc.seq, (i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i] = 0);
			_i++;
		}
		return $ifaceNil;
	};
	halfConn.prototype.changeCipherSpec = function() { return this.$val.changeCipherSpec(); };
	halfConn.Ptr.prototype.incSeq = function() {
		var hc, i, _lhs, _index, x;
		hc = this;
		i = 7;
		while (i >= 0) {
			_lhs = hc.seq; _index = i; (_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index] = ((_index < 0 || _index >= _lhs.length) ? $throwRuntimeError("index out of range") : _lhs[_index]) + (1) << 24 >>> 24;
			if (!(((x = hc.seq, ((i < 0 || i >= x.length) ? $throwRuntimeError("index out of range") : x[i])) === 0))) {
				return;
			}
			i = i - (1) >> 0;
		}
		$panic(new $String("TLS: sequence number wraparound"));
	};
	halfConn.prototype.incSeq = function() { return this.$val.incSeq(); };
	removePadding = function(payload) {
		var x, paddingLen, t, good, toCheck, i, t$1, mask, x$1, b, toRemove;
		if (payload.$length < 1) {
			return [payload, 0];
		}
		paddingLen = (x = payload.$length - 1 >> 0, ((x < 0 || x >= payload.$length) ? $throwRuntimeError("index out of range") : payload.$array[payload.$offset + x]));
		t = ((payload.$length - 1 >> 0) >>> 0) - (paddingLen >>> 0) >>> 0;
		good = ((((~t >>> 0) >> 0) >> 31 >> 0) << 24 >>> 24);
		toCheck = 255;
		if ((toCheck + 1 >> 0) > payload.$length) {
			toCheck = payload.$length - 1 >> 0;
		}
		i = 0;
		while (i < toCheck) {
			t$1 = (paddingLen >>> 0) - (i >>> 0) >>> 0;
			mask = ((((~t$1 >>> 0) >> 0) >> 31 >> 0) << 24 >>> 24);
			b = (x$1 = (payload.$length - 1 >> 0) - i >> 0, ((x$1 < 0 || x$1 >= payload.$length) ? $throwRuntimeError("index out of range") : payload.$array[payload.$offset + x$1]));
			good = good & ~(((((mask & paddingLen) >>> 0) ^ ((mask & b) >>> 0)) << 24 >>> 24));
			i = i + (1) >> 0;
		}
		good = (good & ((good << 4 << 24 >>> 24))) >>> 0;
		good = (good & ((good << 2 << 24 >>> 24))) >>> 0;
		good = (good & ((good << 1 << 24 >>> 24))) >>> 0;
		good = (((good << 24 >> 24) >> 7 << 24 >> 24) << 24 >>> 24);
		toRemove = ((good & paddingLen) >>> 0) + 1 << 24 >>> 24;
		return [$subslice(payload, 0, (payload.$length - (toRemove >> 0) >> 0)), good];
	};
	removePaddingSSL30 = function(payload) {
		var x, paddingLen;
		if (payload.$length < 1) {
			return [payload, 0];
		}
		paddingLen = ((x = payload.$length - 1 >> 0, ((x < 0 || x >= payload.$length) ? $throwRuntimeError("index out of range") : payload.$array[payload.$offset + x])) >> 0) + 1 >> 0;
		if (paddingLen > payload.$length) {
			return [payload, 0];
		}
		return [$subslice(payload, 0, (payload.$length - paddingLen >> 0)), 255];
	};
	roundUp = function(a, b) {
		var _r, _r$1;
		return a + (_r = ((b - (_r$1 = a % b, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) >> 0)) % b, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >> 0;
	};
	halfConn.Ptr.prototype.decrypt = function(b) {
		var ok = false, prefixLen = 0, alertValue = 0, hc, payload, macSize, paddingGood, explicitIVLen, c, _ref, _tmp, _tmp$1, _tmp$2, nonce, additionalData, n, err, _tuple, _tmp$3, _tmp$4, _tmp$5, blockSize, _r, _tmp$6, _tmp$7, _tmp$8, _tuple$1, _tuple$2, _tmp$9, _tmp$10, _tmp$11, n$1, x, x$1, remoteMAC, localMAC, _tmp$12, _tmp$13, _tmp$14, _tmp$15, _tmp$16, _tmp$17;
		hc = this;
		payload = $subslice(b.data, 5);
		macSize = 0;
		if (!($interfaceIsEqual(hc.mac, $ifaceNil))) {
			macSize = hc.mac.Size();
		}
		paddingGood = 255;
		explicitIVLen = 0;
		if (!($interfaceIsEqual(hc.cipher, $ifaceNil))) {
			_ref = hc.cipher;
			if ($assertType(_ref, cipher.Stream, true)[1]) {
				c = _ref;
				c.XORKeyStream(payload, payload);
			} else if ($assertType(_ref, cipher.AEAD, true)[1]) {
				c = _ref;
				explicitIVLen = 8;
				if (payload.$length < explicitIVLen) {
					_tmp = false; _tmp$1 = 0; _tmp$2 = 20; ok = _tmp; prefixLen = _tmp$1; alertValue = _tmp$2;
					return [ok, prefixLen, alertValue];
				}
				nonce = $subslice(payload, 0, 8);
				payload = $subslice(payload, 8);
				additionalData = ($arrayType($Uint8, 13)).zero(); $copy(additionalData, ($arrayType($Uint8, 13)).zero(), ($arrayType($Uint8, 13)));
				$copySlice(new ($sliceType($Uint8))(additionalData), new ($sliceType($Uint8))(hc.seq));
				$copySlice($subslice(new ($sliceType($Uint8))(additionalData), 8), $subslice(b.data, 0, 3));
				n = payload.$length - c.Overhead() >> 0;
				additionalData[11] = ((n >> 8 >> 0) << 24 >>> 24);
				additionalData[12] = (n << 24 >>> 24);
				err = $ifaceNil;
				_tuple = c.Open($subslice(payload, 0, 0), nonce, payload, new ($sliceType($Uint8))(additionalData)); payload = _tuple[0]; err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					_tmp$3 = false; _tmp$4 = 0; _tmp$5 = 20; ok = _tmp$3; prefixLen = _tmp$4; alertValue = _tmp$5;
					return [ok, prefixLen, alertValue];
				}
				b.resize((5 + explicitIVLen >> 0) + payload.$length >> 0);
			} else if ($assertType(_ref, cbcMode, true)[1]) {
				c = _ref;
				blockSize = c.BlockSize();
				if (hc.version >= 770) {
					explicitIVLen = blockSize;
				}
				if (!(((_r = payload.$length % blockSize, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 0)) || payload.$length < roundUp((explicitIVLen + macSize >> 0) + 1 >> 0, blockSize)) {
					_tmp$6 = false; _tmp$7 = 0; _tmp$8 = 20; ok = _tmp$6; prefixLen = _tmp$7; alertValue = _tmp$8;
					return [ok, prefixLen, alertValue];
				}
				if (explicitIVLen > 0) {
					c.SetIV($subslice(payload, 0, explicitIVLen));
					payload = $subslice(payload, explicitIVLen);
				}
				c.CryptBlocks(payload, payload);
				if (hc.version === 768) {
					_tuple$1 = removePaddingSSL30(payload); payload = _tuple$1[0]; paddingGood = _tuple$1[1];
				} else {
					_tuple$2 = removePadding(payload); payload = _tuple$2[0]; paddingGood = _tuple$2[1];
				}
				b.resize((5 + explicitIVLen >> 0) + payload.$length >> 0);
			} else {
				c = _ref;
				$panic(new $String("unknown cipher type"));
			}
		}
		if (!($interfaceIsEqual(hc.mac, $ifaceNil))) {
			if (payload.$length < macSize) {
				_tmp$9 = false; _tmp$10 = 0; _tmp$11 = 20; ok = _tmp$9; prefixLen = _tmp$10; alertValue = _tmp$11;
				return [ok, prefixLen, alertValue];
			}
			n$1 = payload.$length - macSize >> 0;
			(x = b.data, (3 < 0 || 3 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 3] = ((n$1 >> 8 >> 0) << 24 >>> 24));
			(x$1 = b.data, (4 < 0 || 4 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 4] = (n$1 << 24 >>> 24));
			b.resize((5 + explicitIVLen >> 0) + n$1 >> 0);
			remoteMAC = $subslice(payload, n$1);
			localMAC = hc.mac.MAC(hc.inDigestBuf, $subslice(new ($sliceType($Uint8))(hc.seq), 0), $subslice(b.data, 0, 5), $subslice(payload, 0, n$1));
			if (!((subtle.ConstantTimeCompare(localMAC, remoteMAC) === 1)) || !((paddingGood === 255))) {
				_tmp$12 = false; _tmp$13 = 0; _tmp$14 = 20; ok = _tmp$12; prefixLen = _tmp$13; alertValue = _tmp$14;
				return [ok, prefixLen, alertValue];
			}
			hc.inDigestBuf = localMAC;
		}
		hc.incSeq();
		_tmp$15 = true; _tmp$16 = 5 + explicitIVLen >> 0; _tmp$17 = 0; ok = _tmp$15; prefixLen = _tmp$16; alertValue = _tmp$17;
		return [ok, prefixLen, alertValue];
	};
	halfConn.prototype.decrypt = function(b) { return this.$val.decrypt(b); };
	padToBlockSize = function(payload, blockSize) {
		var prefix = ($sliceType($Uint8)).nil, finalBlock = ($sliceType($Uint8)).nil, _r, overrun, paddingLen, i;
		overrun = (_r = payload.$length % blockSize, _r === _r ? _r : $throwRuntimeError("integer divide by zero"));
		paddingLen = blockSize - overrun >> 0;
		prefix = $subslice(payload, 0, (payload.$length - overrun >> 0));
		finalBlock = ($sliceType($Uint8)).make(blockSize);
		$copySlice(finalBlock, $subslice(payload, (payload.$length - overrun >> 0)));
		i = overrun;
		while (i < blockSize) {
			(i < 0 || i >= finalBlock.$length) ? $throwRuntimeError("index out of range") : finalBlock.$array[finalBlock.$offset + i] = ((paddingLen - 1 >> 0) << 24 >>> 24);
			i = i + (1) >> 0;
		}
		return [prefix, finalBlock];
	};
	halfConn.Ptr.prototype.encrypt = function(b, explicitIVLen) {
		var hc, mac, n, payload, c, _ref, payloadLen, nonce, payload$1, additionalData, blockSize, _tuple, prefix, finalBlock, n$1, x, x$1;
		hc = this;
		if (!($interfaceIsEqual(hc.mac, $ifaceNil))) {
			mac = hc.mac.MAC(hc.outDigestBuf, $subslice(new ($sliceType($Uint8))(hc.seq), 0), $subslice(b.data, 0, 5), $subslice(b.data, (5 + explicitIVLen >> 0)));
			n = b.data.$length;
			b.resize(n + mac.$length >> 0);
			$copySlice($subslice(b.data, n), mac);
			hc.outDigestBuf = mac;
		}
		payload = $subslice(b.data, 5);
		if (!($interfaceIsEqual(hc.cipher, $ifaceNil))) {
			_ref = hc.cipher;
			if ($assertType(_ref, cipher.Stream, true)[1]) {
				c = _ref;
				c.XORKeyStream(payload, payload);
			} else if ($assertType(_ref, cipher.AEAD, true)[1]) {
				c = _ref;
				payloadLen = (b.data.$length - 5 >> 0) - explicitIVLen >> 0;
				b.resize(b.data.$length + c.Overhead() >> 0);
				nonce = $subslice(b.data, 5, (5 + explicitIVLen >> 0));
				payload$1 = $subslice(b.data, (5 + explicitIVLen >> 0));
				payload$1 = $subslice(payload$1, 0, payloadLen);
				additionalData = ($arrayType($Uint8, 13)).zero(); $copy(additionalData, ($arrayType($Uint8, 13)).zero(), ($arrayType($Uint8, 13)));
				$copySlice(new ($sliceType($Uint8))(additionalData), new ($sliceType($Uint8))(hc.seq));
				$copySlice($subslice(new ($sliceType($Uint8))(additionalData), 8), $subslice(b.data, 0, 3));
				additionalData[11] = ((payloadLen >> 8 >> 0) << 24 >>> 24);
				additionalData[12] = (payloadLen << 24 >>> 24);
				c.Seal($subslice(payload$1, 0, 0), nonce, payload$1, new ($sliceType($Uint8))(additionalData));
			} else if ($assertType(_ref, cbcMode, true)[1]) {
				c = _ref;
				blockSize = c.BlockSize();
				if (explicitIVLen > 0) {
					c.SetIV($subslice(payload, 0, explicitIVLen));
					payload = $subslice(payload, explicitIVLen);
				}
				_tuple = padToBlockSize(payload, blockSize); prefix = _tuple[0]; finalBlock = _tuple[1];
				b.resize(((5 + explicitIVLen >> 0) + prefix.$length >> 0) + finalBlock.$length >> 0);
				c.CryptBlocks($subslice(b.data, (5 + explicitIVLen >> 0)), prefix);
				c.CryptBlocks($subslice(b.data, ((5 + explicitIVLen >> 0) + prefix.$length >> 0)), finalBlock);
			} else {
				c = _ref;
				$panic(new $String("unknown cipher type"));
			}
		}
		n$1 = b.data.$length - 5 >> 0;
		(x = b.data, (3 < 0 || 3 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 3] = ((n$1 >> 8 >> 0) << 24 >>> 24));
		(x$1 = b.data, (4 < 0 || 4 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 4] = (n$1 << 24 >>> 24));
		hc.incSeq();
		return [true, 0];
	};
	halfConn.prototype.encrypt = function(b, explicitIVLen) { return this.$val.encrypt(b, explicitIVLen); };
	block.Ptr.prototype.resize = function(n) {
		var b;
		b = this;
		if (n > b.data.$capacity) {
			b.reserve(n);
		}
		b.data = $subslice(b.data, 0, n);
	};
	block.prototype.resize = function(n) { return this.$val.resize(n); };
	block.Ptr.prototype.reserve = function(n) {
		var b, m, x, data;
		b = this;
		if (b.data.$capacity >= n) {
			return;
		}
		m = b.data.$capacity;
		if (m === 0) {
			m = 1024;
		}
		while (m < n) {
			m = (x = 2, (((m >>> 16 << 16) * x >> 0) + (m << 16 >>> 16) * x) >> 0);
		}
		data = ($sliceType($Uint8)).make(b.data.$length, m);
		$copySlice(data, b.data);
		b.data = data;
	};
	block.prototype.reserve = function(n) { return this.$val.reserve(n); };
	block.Ptr.prototype.readFromUntil = function(r, n) {
		var b, _tuple, m, err;
		b = this;
		if (b.data.$length >= n) {
			return $ifaceNil;
		}
		b.reserve(n);
		while (true) {
			_tuple = r.Read($subslice(b.data, b.data.$length, b.data.$capacity)); m = _tuple[0]; err = _tuple[1];
			b.data = $subslice(b.data, 0, (b.data.$length + m >> 0));
			if (b.data.$length >= n) {
				break;
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
		}
		return $ifaceNil;
	};
	block.prototype.readFromUntil = function(r, n) { return this.$val.readFromUntil(r, n); };
	block.Ptr.prototype.Read = function(p) {
		var n = 0, err = $ifaceNil, b;
		b = this;
		n = $copySlice(p, $subslice(b.data, b.off));
		b.off = b.off + (n) >> 0;
		return [n, err];
	};
	block.prototype.Read = function(p) { return this.$val.Read(p); };
	halfConn.Ptr.prototype.newBlock = function() {
		var hc, b;
		hc = this;
		b = hc.bfree;
		if (b === ($ptrType(block)).nil) {
			return new block.Ptr();
		}
		hc.bfree = b.link;
		b.link = ($ptrType(block)).nil;
		b.resize(0);
		return b;
	};
	halfConn.prototype.newBlock = function() { return this.$val.newBlock(); };
	halfConn.Ptr.prototype.freeBlock = function(b) {
		var hc;
		hc = this;
		b.link = hc.bfree;
		hc.bfree = b;
	};
	halfConn.prototype.freeBlock = function(b) { return this.$val.freeBlock(b); };
	halfConn.Ptr.prototype.splitBlock = function(b, n) {
		var hc, bb;
		hc = this;
		if (b.data.$length <= n) {
			return [b, ($ptrType(block)).nil];
		}
		bb = hc.newBlock();
		bb.resize(b.data.$length - n >> 0);
		$copySlice(bb.data, $subslice(b.data, n));
		b.data = $subslice(b.data, 0, n);
		return [b, bb];
	};
	halfConn.prototype.splitBlock = function(b, n) { return this.$val.splitBlock(b, n); };
	Conn.Ptr.prototype.readRecord = function(want) {
		var $this = this, $args = arguments, $s = 0, c, _ref, b, err, _tuple, e, ok, x, typ, x$1, x$2, vers, x$3, x$4, n, err$1, _tuple$1, e$1, ok$1, _tuple$2, _tuple$3, ok$2, off, err$2, data, err$3, _ref$1, _ref$2, err$4;
		/* */ s: while (true) { switch ($s) { case 0:
		c = $this;
		_ref = want;
		if (_ref === 22 || _ref === 20) {
			if (c.handshakeComplete) {
				c.sendAlert(80);
				return c.in$16.setErrorLocked(errors.New("tls: handshake or ChangeCipherSpec requested after handshake complete"));
			}
		} else if (_ref === 23) {
			if (!c.handshakeComplete) {
				c.sendAlert(80);
				return c.in$16.setErrorLocked(errors.New("tls: application data record requested before handshake complete"));
			}
		} else {
			c.sendAlert(80);
			return c.in$16.setErrorLocked(errors.New("tls: unknown record type requested"));
		}
		/* Again: */ case 1:
		if (c.rawInput === ($ptrType(block)).nil) {
			c.rawInput = c.in$16.newBlock();
		}
		b = c.rawInput;
		err = b.readFromUntil(c.conn, 5);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tuple = $assertType(err, net.Error, true); e = _tuple[0]; ok = _tuple[1];
			if (!ok || !e.Temporary()) {
				c.in$16.setErrorLocked(err);
			}
			return err;
		}
		typ = ((x = b.data, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])) << 24 >>> 24);
		if ((want === 22) && (typ === 128)) {
			c.sendAlert(70);
			return c.in$16.setErrorLocked(errors.New("tls: unsupported SSLv2 handshake received"));
		}
		vers = ((((x$1 = b.data, ((1 < 0 || 1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 1])) << 16 >>> 16) << 8 << 16 >>> 16) | ((x$2 = b.data, ((2 < 0 || 2 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 2])) << 16 >>> 16)) >>> 0;
		n = (((x$3 = b.data, ((3 < 0 || 3 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 3])) >> 0) << 8 >> 0) | ((x$4 = b.data, ((4 < 0 || 4 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + 4])) >> 0);
		if (c.haveVers && !((vers === c.vers))) {
			c.sendAlert(70);
			return c.in$16.setErrorLocked(fmt.Errorf("tls: received record with version %x when expecting version %x", new ($sliceType($emptyInterface))([new $Uint16(vers), new $Uint16(c.vers)])));
		}
		if (n > 18432) {
			c.sendAlert(22);
			return c.in$16.setErrorLocked(fmt.Errorf("tls: oversized record received with length %d", new ($sliceType($emptyInterface))([new $Int(n)])));
		}
		if (!c.haveVers) {
			if ((!((typ === 21)) && !((typ === want))) || vers >= 4096 || n >= 12288) {
				c.sendAlert(10);
				return c.in$16.setErrorLocked(fmt.Errorf("tls: first record does not look like a TLS handshake", new ($sliceType($emptyInterface))([])));
			}
		}
		err$1 = b.readFromUntil(c.conn, 5 + n >> 0);
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			if ($interfaceIsEqual(err$1, io.EOF)) {
				err$1 = io.ErrUnexpectedEOF;
			}
			_tuple$1 = $assertType(err$1, net.Error, true); e$1 = _tuple$1[0]; ok$1 = _tuple$1[1];
			if (!ok$1 || !e$1.Temporary()) {
				c.in$16.setErrorLocked(err$1);
			}
			return err$1;
		}
		_tuple$2 = c.in$16.splitBlock(b, 5 + n >> 0); b = _tuple$2[0]; c.rawInput = _tuple$2[1];
		_tuple$3 = c.in$16.decrypt(b); ok$2 = _tuple$3[0]; off = _tuple$3[1]; err$2 = _tuple$3[2];
		if (!ok$2) {
			c.in$16.setErrorLocked(c.sendAlert(err$2));
		}
		b.off = off;
		data = $subslice(b.data, b.off);
		if (data.$length > 16384) {
			err$3 = c.sendAlert(22);
			c.in$16.freeBlock(b);
			return c.in$16.setErrorLocked(err$3);
		}
		_ref$1 = typ;
		/* switch (0) { default: if (_ref$1 === 21) { */ if (_ref$1 === 21) {} else if (_ref$1 === 20) { $s = 2; continue; } else if (_ref$1 === 23) { $s = 3; continue; } else if (_ref$1 === 22) { $s = 4; continue; } else { $s = 5; continue; }
			if (!((data.$length === 2))) {
				c.in$16.setErrorLocked(c.sendAlert(10));
				/* break; */ $s = 6; continue;
			}
			if ((((1 < 0 || 1 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 1]) << 24 >>> 24) === 0) {
				c.in$16.setErrorLocked(io.EOF);
				/* break; */ $s = 6; continue;
			}
			_ref$2 = ((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]);
			/* if (_ref$2 === 1) { */ if (_ref$2 === 1) {} else if (_ref$2 === 2) { $s = 7; continue; } else { $s = 8; continue; }
				c.in$16.freeBlock(b);
				/* goto Again */ $s = 1; continue;
			/* } else if (_ref$2 === 2) { */ $s = 9; continue; case 7: 
				c.in$16.setErrorLocked(new net.OpError.Ptr("remote error", "", $ifaceNil, new alert((((1 < 0 || 1 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 1]) << 24 >>> 24))));
			/* } else { */ $s = 9; continue; case 8: 
				c.in$16.setErrorLocked(c.sendAlert(10));
			/* } */ case 9:
		/* } else if (_ref$1 === 20) { */ $s = 6; continue; case 2: 
			if (!((typ === want)) || !((data.$length === 1)) || !((((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]) === 1))) {
				c.in$16.setErrorLocked(c.sendAlert(10));
				/* break; */ $s = 6; continue;
			}
			err$4 = c.in$16.changeCipherSpec();
			if (!($interfaceIsEqual(err$4, $ifaceNil))) {
				c.in$16.setErrorLocked(c.sendAlert($assertType(err$4, alert)));
			}
		/* } else if (_ref$1 === 23) { */ $s = 6; continue; case 3: 
			if (!((typ === want))) {
				c.in$16.setErrorLocked(c.sendAlert(10));
				/* break; */ $s = 6; continue;
			}
			c.input = b;
			b = ($ptrType(block)).nil;
		/* } else if (_ref$1 === 22) { */ $s = 6; continue; case 4: 
			if (!((typ === want))) {
				return c.in$16.setErrorLocked(c.sendAlert(100));
			}
			c.hand.Write(data);
		/* } else { */ $s = 6; continue; case 5: 
			c.in$16.setErrorLocked(c.sendAlert(10));
		/* } } */ case 6:
		if (!(b === ($ptrType(block)).nil)) {
			c.in$16.freeBlock(b);
		}
		return c.in$16.err;
		/* */ case -1: } return; }
	};
	Conn.prototype.readRecord = function(want) { return this.$val.readRecord(want); };
	Conn.Ptr.prototype.sendAlertLocked = function(err) {
		var c, _ref;
		c = this;
		_ref = err;
		if (_ref === 100 || _ref === 0) {
			c.tmp[0] = 1;
		} else {
			c.tmp[0] = 2;
		}
		c.tmp[1] = (err << 24 >>> 24);
		c.writeRecord(21, $subslice(new ($sliceType($Uint8))(c.tmp), 0, 2));
		if (!((err === 0))) {
			return c.out.setErrorLocked(new net.OpError.Ptr("local error", "", $ifaceNil, new alert(err)));
		}
		return $ifaceNil;
	};
	Conn.prototype.sendAlertLocked = function(err) { return this.$val.sendAlertLocked(err); };
	Conn.Ptr.prototype.sendAlert = function(err) {
		var $deferred = [], $err = null, c;
		/* */ try { $deferFrames.push($deferred);
		c = this;
		c.out.Mutex.Lock();
		$deferred.push([$methodVal(c.out.Mutex, "Unlock"), []]);
		return c.sendAlertLocked(err);
		/* */ } catch(err) { $err = err; return $ifaceNil; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Conn.prototype.sendAlert = function(err) { return this.$val.sendAlert(err); };
	Conn.Ptr.prototype.writeRecord = function(typ, data) {
		var n = 0, err = $ifaceNil, c, b, m, explicitIVLen, explicitIVIsSeq, cbc, ok, _tuple, _tuple$1, ok$1, x, vers, x$1, x$2, x$3, x$4, explicitIV, _tuple$2, _tuple$3, _tmp, _tmp$1;
		c = this;
		b = c.out.newBlock();
		while (data.$length > 0) {
			m = data.$length;
			if (m > 16384) {
				m = 16384;
			}
			explicitIVLen = 0;
			explicitIVIsSeq = false;
			cbc = $ifaceNil;
			if (c.out.version >= 770) {
				ok = false;
				_tuple = $assertType(c.out.cipher, cbcMode, true); cbc = _tuple[0]; ok = _tuple[1];
				if (ok) {
					explicitIVLen = cbc.BlockSize();
				}
			}
			if (explicitIVLen === 0) {
				_tuple$1 = $assertType(c.out.cipher, cipher.AEAD, true); ok$1 = _tuple$1[1];
				if (ok$1) {
					explicitIVLen = 8;
					explicitIVIsSeq = true;
				}
			}
			b.resize((5 + explicitIVLen >> 0) + m >> 0);
			(x = b.data, (0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0] = (typ << 24 >>> 24));
			vers = c.vers;
			if (vers === 0) {
				vers = 769;
			}
			(x$1 = b.data, (1 < 0 || 1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 1] = ((vers >>> 8 << 16 >>> 16) << 24 >>> 24));
			(x$2 = b.data, (2 < 0 || 2 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 2] = (vers << 24 >>> 24));
			(x$3 = b.data, (3 < 0 || 3 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 3] = ((m >> 8 >> 0) << 24 >>> 24));
			(x$4 = b.data, (4 < 0 || 4 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + 4] = (m << 24 >>> 24));
			if (explicitIVLen > 0) {
				explicitIV = $subslice(b.data, 5, (5 + explicitIVLen >> 0));
				if (explicitIVIsSeq) {
					$copySlice(explicitIV, new ($sliceType($Uint8))(c.out.seq));
				} else {
					_tuple$2 = io.ReadFull(c.config.rand(), explicitIV); err = _tuple$2[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						break;
					}
				}
			}
			$copySlice($subslice(b.data, (5 + explicitIVLen >> 0)), data);
			c.out.encrypt(b, explicitIVLen);
			_tuple$3 = c.conn.Write(b.data); err = _tuple$3[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				break;
			}
			n = n + (m) >> 0;
			data = $subslice(data, m);
		}
		c.out.freeBlock(b);
		if (typ === 20) {
			err = c.out.changeCipherSpec();
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				c.tmp[0] = 2;
				c.tmp[1] = ($assertType(err, alert) << 24 >>> 24);
				c.writeRecord(21, $subslice(new ($sliceType($Uint8))(c.tmp), 0, 2));
				_tmp = n; _tmp$1 = c.out.setErrorLocked(new net.OpError.Ptr("local error", "", $ifaceNil, err)); n = _tmp; err = _tmp$1;
				return [n, err];
			}
		}
		return [n, err];
	};
	Conn.prototype.writeRecord = function(typ, data) { return this.$val.writeRecord(typ, data); };
	Conn.Ptr.prototype.readHandshake = function() {
		var c, err, err$1, data, n, err$2, err$3, m, _ref;
		c = this;
		while (c.hand.Len() < 4) {
			err = c.in$16.err;
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [$ifaceNil, err];
			}
			err$1 = c.readRecord(22);
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return [$ifaceNil, err$1];
			}
		}
		data = c.hand.Bytes();
		n = (((((1 < 0 || 1 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 1]) >> 0) << 16 >> 0) | ((((2 < 0 || 2 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 2]) >> 0) << 8 >> 0)) | (((3 < 0 || 3 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 3]) >> 0);
		if (n > 65536) {
			return [$ifaceNil, c.in$16.setErrorLocked(c.sendAlert(80))];
		}
		while (c.hand.Len() < (4 + n >> 0)) {
			err$2 = c.in$16.err;
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				return [$ifaceNil, err$2];
			}
			err$3 = c.readRecord(22);
			if (!($interfaceIsEqual(err$3, $ifaceNil))) {
				return [$ifaceNil, err$3];
			}
		}
		data = c.hand.Next(4 + n >> 0);
		m = $ifaceNil;
		_ref = ((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]);
		if (_ref === 1) {
			m = new clientHelloMsg.Ptr();
		} else if (_ref === 2) {
			m = new serverHelloMsg.Ptr();
		} else if (_ref === 4) {
			m = new newSessionTicketMsg.Ptr();
		} else if (_ref === 11) {
			m = new certificateMsg.Ptr();
		} else if (_ref === 13) {
			m = new certificateRequestMsg.Ptr(($sliceType($Uint8)).nil, c.vers >= 771, ($sliceType($Uint8)).nil, ($sliceType(signatureAndHash)).nil, ($sliceType(($sliceType($Uint8)))).nil);
		} else if (_ref === 22) {
			m = new certificateStatusMsg.Ptr();
		} else if (_ref === 12) {
			m = new serverKeyExchangeMsg.Ptr();
		} else if (_ref === 14) {
			m = new serverHelloDoneMsg.Ptr();
		} else if (_ref === 16) {
			m = new clientKeyExchangeMsg.Ptr();
		} else if (_ref === 15) {
			m = new certificateVerifyMsg.Ptr(($sliceType($Uint8)).nil, c.vers >= 771, new signatureAndHash.Ptr(), ($sliceType($Uint8)).nil);
		} else if (_ref === 67) {
			m = new nextProtoMsg.Ptr();
		} else if (_ref === 20) {
			m = new finishedMsg.Ptr();
		} else {
			return [$ifaceNil, c.in$16.setErrorLocked(c.sendAlert(10))];
		}
		data = $appendSlice(($sliceType($Uint8)).nil, data);
		if (!m.unmarshal(data)) {
			return [$ifaceNil, c.in$16.setErrorLocked(c.sendAlert(10))];
		}
		return [m, $ifaceNil];
	};
	Conn.prototype.readHandshake = function() { return this.$val.readHandshake(); };
	Conn.Ptr.prototype.Write = function(b) {
		var $deferred = [], $err = null, c, err, err$1, m, _tuple, ok, _tuple$1, n, err$2, _tmp, _tmp$1, _tuple$2, n$1, err$3;
		/* */ try { $deferFrames.push($deferred);
		c = this;
		err = c.Handshake();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [0, err];
		}
		c.out.Mutex.Lock();
		$deferred.push([$methodVal(c.out.Mutex, "Unlock"), []]);
		err$1 = c.out.err;
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			return [0, err$1];
		}
		if (!c.handshakeComplete) {
			return [0, new alert(80)];
		}
		m = 0;
		if (b.$length > 1 && c.vers <= 769) {
			_tuple = $assertType(c.out.cipher, cipher.BlockMode, true); ok = _tuple[1];
			if (ok) {
				_tuple$1 = c.writeRecord(23, $subslice(b, 0, 1)); n = _tuple$1[0]; err$2 = _tuple$1[1];
				if (!($interfaceIsEqual(err$2, $ifaceNil))) {
					return [n, c.out.setErrorLocked(err$2)];
				}
				_tmp = 1; _tmp$1 = $subslice(b, 1); m = _tmp; b = _tmp$1;
			}
		}
		_tuple$2 = c.writeRecord(23, b); n$1 = _tuple$2[0]; err$3 = _tuple$2[1];
		return [n$1 + m >> 0, c.out.setErrorLocked(err$3)];
		/* */ } catch(err) { $err = err; return [0, $ifaceNil]; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Conn.prototype.Write = function(b) { return this.$val.Write(b); };
	Conn.Ptr.prototype.Read = function(b) {
		var n = 0, err = $ifaceNil, $deferred = [], $err = null, c, emptyRecordCount, err$1, _tmp, _tmp$1, err$2, _tmp$2, _tmp$3, _tuple, ri, x, recErr, _tmp$4, _tmp$5, _tmp$6, _tmp$7;
		/* */ try { $deferFrames.push($deferred);
		c = this;
		err = c.Handshake();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [n, err];
		}
		if (b.$length === 0) {
			return [n, err];
		}
		c.in$16.Mutex.Lock();
		$deferred.push([$methodVal(c.in$16.Mutex, "Unlock"), []]);
		emptyRecordCount = 0;
		while (emptyRecordCount <= 100) {
			while (c.input === ($ptrType(block)).nil && $interfaceIsEqual(c.in$16.err, $ifaceNil)) {
				err$1 = c.readRecord(23);
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					_tmp = 0; _tmp$1 = err$1; n = _tmp; err = _tmp$1;
					return [n, err];
				}
			}
			err$2 = c.in$16.err;
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				_tmp$2 = 0; _tmp$3 = err$2; n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
			_tuple = c.input.Read(b); n = _tuple[0]; err = _tuple[1];
			if (c.input.off >= c.input.data.$length) {
				c.in$16.freeBlock(c.input);
				c.input = ($ptrType(block)).nil;
			}
			ri = c.rawInput;
			if (!(ri === ($ptrType(block)).nil) && !((n === 0)) && $interfaceIsEqual(err, $ifaceNil) && c.input === ($ptrType(block)).nil && ri.data.$length > 0 && (((x = ri.data, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])) << 24 >>> 24) === 21)) {
				recErr = c.readRecord(23);
				if (!($interfaceIsEqual(recErr, $ifaceNil))) {
					err = recErr;
				}
			}
			if (!((n === 0)) || !($interfaceIsEqual(err, $ifaceNil))) {
				_tmp$4 = n; _tmp$5 = err; n = _tmp$4; err = _tmp$5;
				return [n, err];
			}
			emptyRecordCount = emptyRecordCount + (1) >> 0;
		}
		_tmp$6 = 0; _tmp$7 = io.ErrNoProgress; n = _tmp$6; err = _tmp$7;
		return [n, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [n, err]; }
	};
	Conn.prototype.Read = function(b) { return this.$val.Read(b); };
	Conn.Ptr.prototype.Close = function() {
		var $deferred = [], $err = null, c, alertErr, err;
		/* */ try { $deferFrames.push($deferred);
		c = this;
		alertErr = $ifaceNil;
		c.handshakeMutex.Lock();
		$deferred.push([$methodVal(c.handshakeMutex, "Unlock"), []]);
		if (c.handshakeComplete) {
			alertErr = c.sendAlert(0);
		}
		err = c.conn.Close();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		return alertErr;
		/* */ } catch(err) { $err = err; return $ifaceNil; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Conn.prototype.Close = function() { return this.$val.Close(); };
	Conn.Ptr.prototype.Handshake = function() {
		var $deferred = [], $err = null, c, err;
		/* */ try { $deferFrames.push($deferred);
		c = this;
		c.handshakeMutex.Lock();
		$deferred.push([$methodVal(c.handshakeMutex, "Unlock"), []]);
		err = c.handshakeErr;
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		if (c.handshakeComplete) {
			return $ifaceNil;
		}
		if (c.isClient) {
			c.handshakeErr = c.clientHandshake();
		} else {
			c.handshakeErr = c.serverHandshake();
		}
		return c.handshakeErr;
		/* */ } catch(err) { $err = err; return $ifaceNil; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Conn.prototype.Handshake = function() { return this.$val.Handshake(); };
	Conn.Ptr.prototype.ConnectionState = function() {
		var $deferred = [], $err = null, c, state;
		/* */ try { $deferFrames.push($deferred);
		c = this;
		c.handshakeMutex.Lock();
		$deferred.push([$methodVal(c.handshakeMutex, "Unlock"), []]);
		state = new ConnectionState.Ptr(); $copy(state, new ConnectionState.Ptr(), ConnectionState);
		state.HandshakeComplete = c.handshakeComplete;
		if (c.handshakeComplete) {
			state.Version = c.vers;
			state.NegotiatedProtocol = c.clientProtocol;
			state.DidResume = c.didResume;
			state.NegotiatedProtocolIsMutual = !c.clientProtocolFallback;
			state.CipherSuite = c.cipherSuite;
			state.PeerCertificates = c.peerCertificates;
			state.VerifiedChains = c.verifiedChains;
			state.ServerName = c.serverName;
		}
		return state;
		/* */ } catch(err) { $err = err; return new ConnectionState.Ptr(); } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Conn.prototype.ConnectionState = function() { return this.$val.ConnectionState(); };
	Conn.Ptr.prototype.OCSPResponse = function() {
		var $deferred = [], $err = null, c;
		/* */ try { $deferFrames.push($deferred);
		c = this;
		c.handshakeMutex.Lock();
		$deferred.push([$methodVal(c.handshakeMutex, "Unlock"), []]);
		return c.ocspResponse;
		/* */ } catch(err) { $err = err; return ($sliceType($Uint8)).nil; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Conn.prototype.OCSPResponse = function() { return this.$val.OCSPResponse(); };
	Conn.Ptr.prototype.VerifyHostname = function(host) {
		var $deferred = [], $err = null, c, x;
		/* */ try { $deferFrames.push($deferred);
		c = this;
		c.handshakeMutex.Lock();
		$deferred.push([$methodVal(c.handshakeMutex, "Unlock"), []]);
		if (!c.isClient) {
			return errors.New("tls: VerifyHostname called on TLS server connection");
		}
		if (!c.handshakeComplete) {
			return errors.New("tls: handshake has not yet been performed");
		}
		return (x = c.peerCertificates, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).VerifyHostname(host);
		/* */ } catch(err) { $err = err; return $ifaceNil; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	Conn.prototype.VerifyHostname = function(host) { return this.$val.VerifyHostname(host); };
	Conn.Ptr.prototype.clientHandshake = function() {
		var c, hello, possibleCipherSuites, _ref, _i, suiteId, _ref$1, _i$1, suite, _tuple, err, session, cacheKey, sessionCache, _tuple$1, candidateSession, ok, cipherSuiteOk, _ref$2, _i$2, id, versOk, _tuple$2, err$1, _tuple$3, msg, _tuple$4, serverHello, ok$1, _tuple$5, vers, suite$1, hs, _tuple$6, isResume, err$2, err$3, err$4, err$5, err$6, err$7, err$8, err$9, err$10;
		c = this;
		if (c.config === ($ptrType(Config)).nil) {
			c.config = defaultConfig();
		}
		if ((c.config.ServerName.length === 0) && !c.config.InsecureSkipVerify) {
			return errors.New("tls: either ServerName or InsecureSkipVerify must be specified in the tls.Config");
		}
		hello = new clientHelloMsg.Ptr(($sliceType($Uint8)).nil, c.config.maxVersion(), ($sliceType($Uint8)).make(32), ($sliceType($Uint8)).nil, ($sliceType($Uint16)).nil, new ($sliceType($Uint8))([0]), c.config.NextProtos.$length > 0, c.config.ServerName, true, c.config.curvePreferences(), new ($sliceType($Uint8))([0]), false, ($sliceType($Uint8)).nil, ($sliceType(signatureAndHash)).nil, true);
		possibleCipherSuites = c.config.cipherSuites();
		hello.cipherSuites = ($sliceType($Uint16)).make(0, possibleCipherSuites.$length);
		_ref = possibleCipherSuites;
		_i = 0;
		NextCipherSuite:
		while (_i < _ref.$length) {
			suiteId = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_ref$1 = cipherSuites;
			_i$1 = 0;
			while (_i$1 < _ref$1.$length) {
				suite = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				if (!((suite.id === suiteId))) {
					_i$1++;
					continue;
				}
				if (hello.vers < 771 && !(((suite.flags & 4) === 0))) {
					_i$1++;
					continue;
				}
				hello.cipherSuites = $append(hello.cipherSuites, suiteId);
				_i++;
				continue NextCipherSuite;
			}
			_i++;
		}
		_tuple = io.ReadFull(c.config.rand(), hello.random); err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			c.sendAlert(80);
			return errors.New("tls: short read from Rand: " + err.Error());
		}
		if (hello.vers >= 771) {
			hello.signatureAndHashes = supportedSKXSignatureAlgorithms;
		}
		session = ($ptrType(ClientSessionState)).nil;
		cacheKey = "";
		sessionCache = c.config.ClientSessionCache;
		if (c.config.SessionTicketsDisabled) {
			sessionCache = $ifaceNil;
		}
		if (!($interfaceIsEqual(sessionCache, $ifaceNil))) {
			hello.ticketSupported = true;
			cacheKey = clientSessionCacheKey(c.conn.RemoteAddr(), c.config);
			_tuple$1 = sessionCache.Get(cacheKey); candidateSession = _tuple$1[0]; ok = _tuple$1[1];
			if (ok) {
				cipherSuiteOk = false;
				_ref$2 = hello.cipherSuites;
				_i$2 = 0;
				while (_i$2 < _ref$2.$length) {
					id = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
					if (id === candidateSession.cipherSuite) {
						cipherSuiteOk = true;
						break;
					}
					_i$2++;
				}
				versOk = candidateSession.vers >= c.config.minVersion() && candidateSession.vers <= c.config.maxVersion();
				if (versOk && cipherSuiteOk) {
					session = candidateSession;
				}
			}
		}
		if (!(session === ($ptrType(ClientSessionState)).nil)) {
			hello.sessionTicket = session.sessionTicket;
			hello.sessionId = ($sliceType($Uint8)).make(16);
			_tuple$2 = io.ReadFull(c.config.rand(), hello.sessionId); err$1 = _tuple$2[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				c.sendAlert(80);
				return errors.New("tls: short read from Rand: " + err$1.Error());
			}
		}
		c.writeRecord(22, hello.marshal());
		_tuple$3 = c.readHandshake(); msg = _tuple$3[0]; err = _tuple$3[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_tuple$4 = $assertType(msg, ($ptrType(serverHelloMsg)), true); serverHello = _tuple$4[0]; ok$1 = _tuple$4[1];
		if (!ok$1) {
			c.sendAlert(10);
			return unexpectedMessageError(serverHello, msg);
		}
		_tuple$5 = c.config.mutualVersion(serverHello.vers); vers = _tuple$5[0]; ok$1 = _tuple$5[1];
		if (!ok$1 || vers < 769) {
			c.sendAlert(70);
			return fmt.Errorf("tls: server selected unsupported protocol version %x", new ($sliceType($emptyInterface))([new $Uint16(serverHello.vers)]));
		}
		c.vers = vers;
		c.haveVers = true;
		suite$1 = mutualCipherSuite(c.config.cipherSuites(), serverHello.cipherSuite);
		if (suite$1 === ($ptrType(cipherSuite)).nil) {
			c.sendAlert(40);
			return fmt.Errorf("tls: server selected an unsupported cipher suite", new ($sliceType($emptyInterface))([]));
		}
		hs = new clientHandshakeState.Ptr(c, serverHello, hello, suite$1, $clone(newFinishedHash(c.vers), finishedHash), ($sliceType($Uint8)).nil, session);
		hs.finishedHash.Write(hs.hello.marshal());
		hs.finishedHash.Write(hs.serverHello.marshal());
		_tuple$6 = hs.processServerHello(); isResume = _tuple$6[0]; err = _tuple$6[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		if (isResume) {
			err$2 = hs.establishKeys();
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				return err$2;
			}
			err$3 = hs.readSessionTicket();
			if (!($interfaceIsEqual(err$3, $ifaceNil))) {
				return err$3;
			}
			err$4 = hs.readFinished();
			if (!($interfaceIsEqual(err$4, $ifaceNil))) {
				return err$4;
			}
			err$5 = hs.sendFinished();
			if (!($interfaceIsEqual(err$5, $ifaceNil))) {
				return err$5;
			}
		} else {
			err$6 = hs.doFullHandshake();
			if (!($interfaceIsEqual(err$6, $ifaceNil))) {
				return err$6;
			}
			err$7 = hs.establishKeys();
			if (!($interfaceIsEqual(err$7, $ifaceNil))) {
				return err$7;
			}
			err$8 = hs.sendFinished();
			if (!($interfaceIsEqual(err$8, $ifaceNil))) {
				return err$8;
			}
			err$9 = hs.readSessionTicket();
			if (!($interfaceIsEqual(err$9, $ifaceNil))) {
				return err$9;
			}
			err$10 = hs.readFinished();
			if (!($interfaceIsEqual(err$10, $ifaceNil))) {
				return err$10;
			}
		}
		if (!($interfaceIsEqual(sessionCache, $ifaceNil)) && !(hs.session === ($ptrType(ClientSessionState)).nil) && !(session === hs.session)) {
			sessionCache.Put(cacheKey, hs.session);
		}
		c.didResume = isResume;
		c.handshakeComplete = true;
		c.cipherSuite = suite$1.id;
		return $ifaceNil;
	};
	Conn.prototype.clientHandshake = function() { return this.$val.clientHandshake(); };
	clientHandshakeState.Ptr.prototype.doFullHandshake = function() {
		var hs, c, _tuple, msg, err, _tuple$1, certMsg, ok, certs, _ref, _i, i, asn1Data, _tuple$2, cert, err$1, opts, _ref$1, _i$1, i$1, cert$1, _tuple$3, _ref$2, _tuple$4, _tuple$5, cs, ok$1, _tuple$6, keyAgreement$1, _tuple$7, skx, _tuple$8, chainToSend, certRequested, _tuple$9, certReq, _tmp, _tmp$1, rsaAvail, ecdsaAvail, _ref$3, _i$2, certType, _ref$4, _ref$5, _i$3, i$2, chain, _ref$6, _i$4, j, cert$2, x509Cert, _tuple$10, _ref$7, _i$5, ca, _tuple$11, _tuple$12, shd, _tuple$13, preMasterSecret, ckx, signed, certVerify, key, _ref$8, x, _tuple$14, digest, hashId, _tuple$15, r, s, err$2, _tuple$16, x$1, _tuple$17, digest$1, hashFunc, hashId$1, _tuple$18;
		hs = this;
		c = hs.c;
		_tuple = c.readHandshake(); msg = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_tuple$1 = $assertType(msg, ($ptrType(certificateMsg)), true); certMsg = _tuple$1[0]; ok = _tuple$1[1];
		if (!ok || (certMsg.certificates.$length === 0)) {
			c.sendAlert(10);
			return unexpectedMessageError(certMsg, msg);
		}
		hs.finishedHash.Write(certMsg.marshal());
		certs = ($sliceType(($ptrType(x509.Certificate)))).make(certMsg.certificates.$length);
		_ref = certMsg.certificates;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			asn1Data = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_tuple$2 = x509.ParseCertificate(asn1Data); cert = _tuple$2[0]; err$1 = _tuple$2[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				c.sendAlert(42);
				return errors.New("tls: failed to parse certificate from server: " + err$1.Error());
			}
			(i < 0 || i >= certs.$length) ? $throwRuntimeError("index out of range") : certs.$array[certs.$offset + i] = cert;
			_i++;
		}
		if (!c.config.InsecureSkipVerify) {
			opts = new x509.VerifyOptions.Ptr(c.config.ServerName, x509.NewCertPool(), c.config.RootCAs, $clone(c.config.time(), time.Time), ($sliceType(x509.ExtKeyUsage)).nil);
			_ref$1 = certs;
			_i$1 = 0;
			while (_i$1 < _ref$1.$length) {
				i$1 = _i$1;
				cert$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				if (i$1 === 0) {
					_i$1++;
					continue;
				}
				opts.Intermediates.AddCert(cert$1);
				_i$1++;
			}
			_tuple$3 = ((0 < 0 || 0 >= certs.$length) ? $throwRuntimeError("index out of range") : certs.$array[certs.$offset + 0]).Verify($clone(opts, x509.VerifyOptions)); c.verifiedChains = _tuple$3[0]; err = _tuple$3[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				c.sendAlert(42);
				return err;
			}
		}
		_ref$2 = ((0 < 0 || 0 >= certs.$length) ? $throwRuntimeError("index out of range") : certs.$array[certs.$offset + 0]).PublicKey;
		switch (0) { default: if ($assertType(_ref$2, ($ptrType(rsa.PublicKey)), true)[1] || $assertType(_ref$2, ($ptrType(ecdsa.PublicKey)), true)[1]) {
			break;
		} else {
			c.sendAlert(43);
			return fmt.Errorf("tls: server's certificate contains an unsupported type of public key: %T", new ($sliceType($emptyInterface))([((0 < 0 || 0 >= certs.$length) ? $throwRuntimeError("index out of range") : certs.$array[certs.$offset + 0]).PublicKey]));
		} }
		c.peerCertificates = certs;
		if (hs.serverHello.ocspStapling) {
			_tuple$4 = c.readHandshake(); msg = _tuple$4[0]; err = _tuple$4[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			_tuple$5 = $assertType(msg, ($ptrType(certificateStatusMsg)), true); cs = _tuple$5[0]; ok$1 = _tuple$5[1];
			if (!ok$1) {
				c.sendAlert(10);
				return unexpectedMessageError(cs, msg);
			}
			hs.finishedHash.Write(cs.marshal());
			if (cs.statusType === 1) {
				c.ocspResponse = cs.response;
			}
		}
		_tuple$6 = c.readHandshake(); msg = _tuple$6[0]; err = _tuple$6[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		keyAgreement$1 = hs.suite.ka(c.vers);
		_tuple$7 = $assertType(msg, ($ptrType(serverKeyExchangeMsg)), true); skx = _tuple$7[0]; ok = _tuple$7[1];
		if (ok) {
			hs.finishedHash.Write(skx.marshal());
			err = keyAgreement$1.processServerKeyExchange(c.config, hs.hello, hs.serverHello, ((0 < 0 || 0 >= certs.$length) ? $throwRuntimeError("index out of range") : certs.$array[certs.$offset + 0]), skx);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				c.sendAlert(10);
				return err;
			}
			_tuple$8 = c.readHandshake(); msg = _tuple$8[0]; err = _tuple$8[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
		}
		chainToSend = ($ptrType(Certificate)).nil;
		certRequested = false;
		_tuple$9 = $assertType(msg, ($ptrType(certificateRequestMsg)), true); certReq = _tuple$9[0]; ok = _tuple$9[1];
		if (ok) {
			certRequested = true;
			hs.finishedHash.Write(certReq.marshal());
			_tmp = false; _tmp$1 = false; rsaAvail = _tmp; ecdsaAvail = _tmp$1;
			_ref$3 = certReq.certificateTypes;
			_i$2 = 0;
			while (_i$2 < _ref$3.$length) {
				certType = ((_i$2 < 0 || _i$2 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$2]);
				_ref$4 = certType;
				if (_ref$4 === 1) {
					rsaAvail = true;
				} else if (_ref$4 === 64) {
					ecdsaAvail = true;
				}
				_i$2++;
			}
			_ref$5 = c.config.Certificates;
			_i$3 = 0;
			findCert:
			while (_i$3 < _ref$5.$length) {
				i$2 = _i$3;
				chain = new Certificate.Ptr(); $copy(chain, ((_i$3 < 0 || _i$3 >= _ref$5.$length) ? $throwRuntimeError("index out of range") : _ref$5.$array[_ref$5.$offset + _i$3]), Certificate);
				if (!rsaAvail && !ecdsaAvail) {
					_i$3++;
					continue;
				}
				_ref$6 = chain.Certificate;
				_i$4 = 0;
				while (_i$4 < _ref$6.$length) {
					j = _i$4;
					cert$2 = ((_i$4 < 0 || _i$4 >= _ref$6.$length) ? $throwRuntimeError("index out of range") : _ref$6.$array[_ref$6.$offset + _i$4]);
					x509Cert = chain.Leaf;
					if (!((j === 0)) || x509Cert === ($ptrType(x509.Certificate)).nil) {
						_tuple$10 = x509.ParseCertificate(cert$2); x509Cert = _tuple$10[0]; err = _tuple$10[1];
						if (!($interfaceIsEqual(err, $ifaceNil))) {
							c.sendAlert(80);
							return errors.New("tls: failed to parse client certificate #" + strconv.Itoa(i$2) + ": " + err.Error());
						}
					}
					if (rsaAvail && (x509Cert.PublicKeyAlgorithm === 1)) {
					} else if (ecdsaAvail && (x509Cert.PublicKeyAlgorithm === 3)) {
					} else {
						_i$3++;
						continue findCert;
					}
					if (certReq.certificateAuthorities.$length === 0) {
						chainToSend = chain;
						break findCert;
					}
					_ref$7 = certReq.certificateAuthorities;
					_i$5 = 0;
					while (_i$5 < _ref$7.$length) {
						ca = ((_i$5 < 0 || _i$5 >= _ref$7.$length) ? $throwRuntimeError("index out of range") : _ref$7.$array[_ref$7.$offset + _i$5]);
						if (bytes.Equal(x509Cert.RawIssuer, ca)) {
							chainToSend = chain;
							break findCert;
						}
						_i$5++;
					}
					_i$4++;
				}
				_i$3++;
			}
			_tuple$11 = c.readHandshake(); msg = _tuple$11[0]; err = _tuple$11[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
		}
		_tuple$12 = $assertType(msg, ($ptrType(serverHelloDoneMsg)), true); shd = _tuple$12[0]; ok = _tuple$12[1];
		if (!ok) {
			c.sendAlert(10);
			return unexpectedMessageError(shd, msg);
		}
		hs.finishedHash.Write(shd.marshal());
		if (certRequested) {
			certMsg = new certificateMsg.Ptr();
			if (!(chainToSend === ($ptrType(Certificate)).nil)) {
				certMsg.certificates = chainToSend.Certificate;
			}
			hs.finishedHash.Write(certMsg.marshal());
			c.writeRecord(22, certMsg.marshal());
		}
		_tuple$13 = keyAgreement$1.generateClientKeyExchange(c.config, hs.hello, ((0 < 0 || 0 >= certs.$length) ? $throwRuntimeError("index out of range") : certs.$array[certs.$offset + 0])); preMasterSecret = _tuple$13[0]; ckx = _tuple$13[1]; err = _tuple$13[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			c.sendAlert(80);
			return err;
		}
		if (!(ckx === ($ptrType(clientKeyExchangeMsg)).nil)) {
			hs.finishedHash.Write(ckx.marshal());
			c.writeRecord(22, ckx.marshal());
		}
		if (!(chainToSend === ($ptrType(Certificate)).nil)) {
			signed = ($sliceType($Uint8)).nil;
			certVerify = new certificateVerifyMsg.Ptr(($sliceType($Uint8)).nil, c.vers >= 771, new signatureAndHash.Ptr(), ($sliceType($Uint8)).nil);
			_ref$8 = (x = c.config.Certificates, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])).PrivateKey;
			if ($assertType(_ref$8, ($ptrType(ecdsa.PrivateKey)), true)[1]) {
				key = _ref$8.$val;
				_tuple$14 = hs.finishedHash.hashForClientCertificate(3); digest = _tuple$14[0]; hashId = _tuple$14[2];
				_tuple$15 = ecdsa.Sign(c.config.rand(), key, digest); r = _tuple$15[0]; s = _tuple$15[1]; err$2 = _tuple$15[2];
				if ($interfaceIsEqual(err$2, $ifaceNil)) {
					_tuple$16 = asn1.Marshal((x$1 = new ecdsaSignature.Ptr(r, s), new x$1.constructor.Struct(x$1))); signed = _tuple$16[0]; err$2 = _tuple$16[1];
				}
				certVerify.signatureAndHash.signature = 3;
				certVerify.signatureAndHash.hash = hashId;
			} else if ($assertType(_ref$8, ($ptrType(rsa.PrivateKey)), true)[1]) {
				key = _ref$8.$val;
				_tuple$17 = hs.finishedHash.hashForClientCertificate(1); digest$1 = _tuple$17[0]; hashFunc = _tuple$17[1]; hashId$1 = _tuple$17[2];
				_tuple$18 = rsa.SignPKCS1v15(c.config.rand(), key, hashFunc, digest$1); signed = _tuple$18[0]; err = _tuple$18[1];
				certVerify.signatureAndHash.signature = 1;
				certVerify.signatureAndHash.hash = hashId$1;
			} else {
				key = _ref$8;
				err = errors.New("unknown private key type");
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				c.sendAlert(80);
				return errors.New("tls: failed to sign handshake with client certificate: " + err.Error());
			}
			certVerify.signature = signed;
			hs.finishedHash.Write(certVerify.marshal());
			c.writeRecord(22, certVerify.marshal());
		}
		hs.masterSecret = masterFromPreMasterSecret(c.vers, preMasterSecret, hs.hello.random, hs.serverHello.random);
		return $ifaceNil;
	};
	clientHandshakeState.prototype.doFullHandshake = function() { return this.$val.doFullHandshake(); };
	clientHandshakeState.Ptr.prototype.establishKeys = function() {
		var hs, c, _tuple, clientMAC, serverMAC, clientKey, serverKey, clientIV, serverIV, _tmp, _tmp$1, clientCipher, serverCipher, _tmp$2, _tmp$3, clientHash, serverHash;
		hs = this;
		c = hs.c;
		_tuple = keysFromMasterSecret(c.vers, hs.masterSecret, hs.hello.random, hs.serverHello.random, hs.suite.macLen, hs.suite.keyLen, hs.suite.ivLen); clientMAC = _tuple[0]; serverMAC = _tuple[1]; clientKey = _tuple[2]; serverKey = _tuple[3]; clientIV = _tuple[4]; serverIV = _tuple[5];
		_tmp = $ifaceNil; _tmp$1 = $ifaceNil; clientCipher = _tmp; serverCipher = _tmp$1;
		_tmp$2 = $ifaceNil; _tmp$3 = $ifaceNil; clientHash = _tmp$2; serverHash = _tmp$3;
		if (!(hs.suite.cipher === $throwNilPointerError)) {
			clientCipher = hs.suite.cipher(clientKey, clientIV, false);
			clientHash = hs.suite.mac(c.vers, clientMAC);
			serverCipher = hs.suite.cipher(serverKey, serverIV, true);
			serverHash = hs.suite.mac(c.vers, serverMAC);
		} else {
			clientCipher = hs.suite.aead(clientKey, clientIV);
			serverCipher = hs.suite.aead(serverKey, serverIV);
		}
		c.in$16.prepareCipherSpec(c.vers, serverCipher, serverHash);
		c.out.prepareCipherSpec(c.vers, clientCipher, clientHash);
		return $ifaceNil;
	};
	clientHandshakeState.prototype.establishKeys = function() { return this.$val.establishKeys(); };
	clientHandshakeState.Ptr.prototype.serverResumedSession = function() {
		var hs;
		hs = this;
		return !(hs.session === ($ptrType(ClientSessionState)).nil) && !(hs.hello.sessionId === ($sliceType($Uint8)).nil) && bytes.Equal(hs.serverHello.sessionId, hs.hello.sessionId);
	};
	clientHandshakeState.prototype.serverResumedSession = function() { return this.$val.serverResumedSession(); };
	clientHandshakeState.Ptr.prototype.processServerHello = function() {
		var hs, c;
		hs = this;
		c = hs.c;
		if (!((hs.serverHello.compressionMethod === 0))) {
			c.sendAlert(10);
			return [false, errors.New("tls: server selected unsupported compression format")];
		}
		if (!hs.hello.nextProtoNeg && hs.serverHello.nextProtoNeg) {
			c.sendAlert(40);
			return [false, errors.New("server advertised unrequested NPN extension")];
		}
		if (hs.serverResumedSession()) {
			hs.masterSecret = hs.session.masterSecret;
			c.peerCertificates = hs.session.serverCertificates;
			return [true, $ifaceNil];
		}
		return [false, $ifaceNil];
	};
	clientHandshakeState.prototype.processServerHello = function() { return this.$val.processServerHello(); };
	clientHandshakeState.Ptr.prototype.readFinished = function() {
		var hs, c, err, _tuple, msg, err$1, _tuple$1, serverFinished, ok, verify;
		hs = this;
		c = hs.c;
		c.readRecord(20);
		err = c.in$16.error();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_tuple = c.readHandshake(); msg = _tuple[0]; err$1 = _tuple[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			return err$1;
		}
		_tuple$1 = $assertType(msg, ($ptrType(finishedMsg)), true); serverFinished = _tuple$1[0]; ok = _tuple$1[1];
		if (!ok) {
			c.sendAlert(10);
			return unexpectedMessageError(serverFinished, msg);
		}
		verify = hs.finishedHash.serverSum(hs.masterSecret);
		if (!((verify.$length === serverFinished.verifyData.$length)) || !((subtle.ConstantTimeCompare(verify, serverFinished.verifyData) === 1))) {
			c.sendAlert(40);
			return errors.New("tls: server's Finished message was incorrect");
		}
		hs.finishedHash.Write(serverFinished.marshal());
		return $ifaceNil;
	};
	clientHandshakeState.prototype.readFinished = function() { return this.$val.readFinished(); };
	clientHandshakeState.Ptr.prototype.readSessionTicket = function() {
		var hs, c, _tuple, msg, err, _tuple$1, sessionTicketMsg, ok;
		hs = this;
		if (!hs.serverHello.ticketSupported) {
			return $ifaceNil;
		}
		c = hs.c;
		_tuple = c.readHandshake(); msg = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_tuple$1 = $assertType(msg, ($ptrType(newSessionTicketMsg)), true); sessionTicketMsg = _tuple$1[0]; ok = _tuple$1[1];
		if (!ok) {
			c.sendAlert(10);
			return unexpectedMessageError(sessionTicketMsg, msg);
		}
		hs.finishedHash.Write(sessionTicketMsg.marshal());
		hs.session = new ClientSessionState.Ptr(sessionTicketMsg.ticket, c.vers, hs.suite.id, hs.masterSecret, c.peerCertificates);
		return $ifaceNil;
	};
	clientHandshakeState.prototype.readSessionTicket = function() { return this.$val.readSessionTicket(); };
	clientHandshakeState.Ptr.prototype.sendFinished = function() {
		var hs, c, nextProto, _tuple, proto, fallback, finished;
		hs = this;
		c = hs.c;
		c.writeRecord(20, new ($sliceType($Uint8))([1]));
		if (hs.serverHello.nextProtoNeg) {
			nextProto = new nextProtoMsg.Ptr();
			_tuple = mutualProtocol(c.config.NextProtos, hs.serverHello.nextProtos); proto = _tuple[0]; fallback = _tuple[1];
			nextProto.proto = proto;
			c.clientProtocol = proto;
			c.clientProtocolFallback = fallback;
			hs.finishedHash.Write(nextProto.marshal());
			c.writeRecord(22, nextProto.marshal());
		}
		finished = new finishedMsg.Ptr();
		finished.verifyData = hs.finishedHash.clientSum(hs.masterSecret);
		hs.finishedHash.Write(finished.marshal());
		c.writeRecord(22, finished.marshal());
		return $ifaceNil;
	};
	clientHandshakeState.prototype.sendFinished = function() { return this.$val.sendFinished(); };
	clientSessionCacheKey = function(serverAddr, config) {
		if (config.ServerName.length > 0) {
			return config.ServerName;
		}
		return serverAddr.String();
	};
	mutualProtocol = function(clientProtos, serverProtos) {
		var _ref, _i, s, _ref$1, _i$1, c;
		_ref = serverProtos;
		_i = 0;
		while (_i < _ref.$length) {
			s = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_ref$1 = clientProtos;
			_i$1 = 0;
			while (_i$1 < _ref$1.$length) {
				c = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				if (s === c) {
					return [s, false];
				}
				_i$1++;
			}
			_i++;
		}
		return [((0 < 0 || 0 >= clientProtos.$length) ? $throwRuntimeError("index out of range") : clientProtos.$array[clientProtos.$offset + 0]), true];
	};
	clientHelloMsg.Ptr.prototype.marshal = function() {
		var m, x, length, numExtensions, extensionsLength, x$1, x$2, x$3, y, _ref, _i, i, suite, x$4, x$5, x$6, z, l, x$7, l$1, _ref$1, _i$1, curve, l$2, _ref$2, _i$2, pointFormat, l$3, x$8, l$4, _ref$3, _i$3, sigAndHash;
		m = this;
		if (!(m.raw === ($sliceType($Uint8)).nil)) {
			return m.raw;
		}
		length = ((((35 + m.sessionId.$length >> 0) + 2 >> 0) + (x = m.cipherSuites.$length, (((x >>> 16 << 16) * 2 >> 0) + (x << 16 >>> 16) * 2) >> 0) >> 0) + 1 >> 0) + m.compressionMethods.$length >> 0;
		numExtensions = 0;
		extensionsLength = 0;
		if (m.nextProtoNeg) {
			numExtensions = numExtensions + (1) >> 0;
		}
		if (m.ocspStapling) {
			extensionsLength = extensionsLength + (5) >> 0;
			numExtensions = numExtensions + (1) >> 0;
		}
		if (m.serverName.length > 0) {
			extensionsLength = extensionsLength + ((5 + m.serverName.length >> 0)) >> 0;
			numExtensions = numExtensions + (1) >> 0;
		}
		if (m.supportedCurves.$length > 0) {
			extensionsLength = extensionsLength + ((2 + (x$1 = m.supportedCurves.$length, (((2 >>> 16 << 16) * x$1 >> 0) + (2 << 16 >>> 16) * x$1) >> 0) >> 0)) >> 0;
			numExtensions = numExtensions + (1) >> 0;
		}
		if (m.supportedPoints.$length > 0) {
			extensionsLength = extensionsLength + ((1 + m.supportedPoints.$length >> 0)) >> 0;
			numExtensions = numExtensions + (1) >> 0;
		}
		if (m.ticketSupported) {
			extensionsLength = extensionsLength + (m.sessionTicket.$length) >> 0;
			numExtensions = numExtensions + (1) >> 0;
		}
		if (m.signatureAndHashes.$length > 0) {
			extensionsLength = extensionsLength + ((2 + (x$2 = m.signatureAndHashes.$length, (((2 >>> 16 << 16) * x$2 >> 0) + (2 << 16 >>> 16) * x$2) >> 0) >> 0)) >> 0;
			numExtensions = numExtensions + (1) >> 0;
		}
		if (m.secureRenegotiation) {
			extensionsLength = extensionsLength + (1) >> 0;
			numExtensions = numExtensions + (1) >> 0;
		}
		if (numExtensions > 0) {
			extensionsLength = extensionsLength + (((((4 >>> 16 << 16) * numExtensions >> 0) + (4 << 16 >>> 16) * numExtensions) >> 0)) >> 0;
			length = length + ((2 + extensionsLength >> 0)) >> 0;
		}
		x$3 = ($sliceType($Uint8)).make((4 + length >> 0));
		(0 < 0 || 0 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 0] = 1;
		(1 < 0 || 1 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 1] = ((length >> 16 >> 0) << 24 >>> 24);
		(2 < 0 || 2 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 2] = ((length >> 8 >> 0) << 24 >>> 24);
		(3 < 0 || 3 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 3] = (length << 24 >>> 24);
		(4 < 0 || 4 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 4] = ((m.vers >>> 8 << 16 >>> 16) << 24 >>> 24);
		(5 < 0 || 5 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 5] = (m.vers << 24 >>> 24);
		$copySlice($subslice(x$3, 6, 38), m.random);
		(38 < 0 || 38 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 38] = (m.sessionId.$length << 24 >>> 24);
		$copySlice($subslice(x$3, 39, (39 + m.sessionId.$length >> 0)), m.sessionId);
		y = $subslice(x$3, (39 + m.sessionId.$length >> 0));
		(0 < 0 || 0 >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + 0] = ((m.cipherSuites.$length >> 7 >> 0) << 24 >>> 24);
		(1 < 0 || 1 >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + 1] = ((m.cipherSuites.$length << 1 >> 0) << 24 >>> 24);
		_ref = m.cipherSuites;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			suite = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			(x$4 = 2 + ((((i >>> 16 << 16) * 2 >> 0) + (i << 16 >>> 16) * 2) >> 0) >> 0, (x$4 < 0 || x$4 >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + x$4] = ((suite >>> 8 << 16 >>> 16) << 24 >>> 24));
			(x$5 = 3 + ((((i >>> 16 << 16) * 2 >> 0) + (i << 16 >>> 16) * 2) >> 0) >> 0, (x$5 < 0 || x$5 >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + x$5] = (suite << 24 >>> 24));
			_i++;
		}
		z = $subslice(y, (2 + (x$6 = m.cipherSuites.$length, (((x$6 >>> 16 << 16) * 2 >> 0) + (x$6 << 16 >>> 16) * 2) >> 0) >> 0));
		(0 < 0 || 0 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0] = (m.compressionMethods.$length << 24 >>> 24);
		$copySlice($subslice(z, 1), m.compressionMethods);
		z = $subslice(z, (1 + m.compressionMethods.$length >> 0));
		if (numExtensions > 0) {
			(0 < 0 || 0 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0] = ((extensionsLength >> 8 >> 0) << 24 >>> 24);
			(1 < 0 || 1 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 1] = (extensionsLength << 24 >>> 24);
			z = $subslice(z, 2);
		}
		if (m.nextProtoNeg) {
			(0 < 0 || 0 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0] = 51;
			(1 < 0 || 1 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 1] = 116;
			z = $subslice(z, 4);
		}
		if (m.serverName.length > 0) {
			(0 < 0 || 0 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0] = 0;
			(1 < 0 || 1 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 1] = 0;
			l = m.serverName.length + 5 >> 0;
			(2 < 0 || 2 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 2] = ((l >> 8 >> 0) << 24 >>> 24);
			(3 < 0 || 3 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 3] = (l << 24 >>> 24);
			z = $subslice(z, 4);
			(0 < 0 || 0 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0] = ((((m.serverName.length + 3 >> 0)) >> 8 >> 0) << 24 >>> 24);
			(1 < 0 || 1 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 1] = ((m.serverName.length + 3 >> 0) << 24 >>> 24);
			(3 < 0 || 3 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 3] = ((m.serverName.length >> 8 >> 0) << 24 >>> 24);
			(4 < 0 || 4 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 4] = (m.serverName.length << 24 >>> 24);
			$copySlice($subslice(z, 5), new ($sliceType($Uint8))($stringToBytes(m.serverName)));
			z = $subslice(z, l);
		}
		if (m.ocspStapling) {
			(0 < 0 || 0 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0] = 0;
			(1 < 0 || 1 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 1] = 5;
			(2 < 0 || 2 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 2] = 0;
			(3 < 0 || 3 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 3] = 5;
			(4 < 0 || 4 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 4] = 1;
			z = $subslice(z, 9);
		}
		if (m.supportedCurves.$length > 0) {
			(0 < 0 || 0 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0] = 0;
			(1 < 0 || 1 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 1] = 10;
			l$1 = 2 + (x$7 = m.supportedCurves.$length, (((2 >>> 16 << 16) * x$7 >> 0) + (2 << 16 >>> 16) * x$7) >> 0) >> 0;
			(2 < 0 || 2 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 2] = ((l$1 >> 8 >> 0) << 24 >>> 24);
			(3 < 0 || 3 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 3] = (l$1 << 24 >>> 24);
			l$1 = l$1 - (2) >> 0;
			(4 < 0 || 4 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 4] = ((l$1 >> 8 >> 0) << 24 >>> 24);
			(5 < 0 || 5 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 5] = (l$1 << 24 >>> 24);
			z = $subslice(z, 6);
			_ref$1 = m.supportedCurves;
			_i$1 = 0;
			while (_i$1 < _ref$1.$length) {
				curve = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				(0 < 0 || 0 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0] = ((curve >>> 8 << 16 >>> 16) << 24 >>> 24);
				(1 < 0 || 1 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 1] = (curve << 24 >>> 24);
				z = $subslice(z, 2);
				_i$1++;
			}
		}
		if (m.supportedPoints.$length > 0) {
			(0 < 0 || 0 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0] = 0;
			(1 < 0 || 1 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 1] = 11;
			l$2 = 1 + m.supportedPoints.$length >> 0;
			(2 < 0 || 2 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 2] = ((l$2 >> 8 >> 0) << 24 >>> 24);
			(3 < 0 || 3 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 3] = (l$2 << 24 >>> 24);
			l$2 = l$2 - (1) >> 0;
			(4 < 0 || 4 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 4] = (l$2 << 24 >>> 24);
			z = $subslice(z, 5);
			_ref$2 = m.supportedPoints;
			_i$2 = 0;
			while (_i$2 < _ref$2.$length) {
				pointFormat = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
				(0 < 0 || 0 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0] = pointFormat;
				z = $subslice(z, 1);
				_i$2++;
			}
		}
		if (m.ticketSupported) {
			(0 < 0 || 0 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0] = 0;
			(1 < 0 || 1 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 1] = 35;
			l$3 = m.sessionTicket.$length;
			(2 < 0 || 2 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 2] = ((l$3 >> 8 >> 0) << 24 >>> 24);
			(3 < 0 || 3 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 3] = (l$3 << 24 >>> 24);
			z = $subslice(z, 4);
			$copySlice(z, m.sessionTicket);
			z = $subslice(z, m.sessionTicket.$length);
		}
		if (m.signatureAndHashes.$length > 0) {
			(0 < 0 || 0 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0] = 0;
			(1 < 0 || 1 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 1] = 13;
			l$4 = 2 + (x$8 = m.signatureAndHashes.$length, (((2 >>> 16 << 16) * x$8 >> 0) + (2 << 16 >>> 16) * x$8) >> 0) >> 0;
			(2 < 0 || 2 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 2] = ((l$4 >> 8 >> 0) << 24 >>> 24);
			(3 < 0 || 3 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 3] = (l$4 << 24 >>> 24);
			z = $subslice(z, 4);
			l$4 = l$4 - (2) >> 0;
			(0 < 0 || 0 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0] = ((l$4 >> 8 >> 0) << 24 >>> 24);
			(1 < 0 || 1 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 1] = (l$4 << 24 >>> 24);
			z = $subslice(z, 2);
			_ref$3 = m.signatureAndHashes;
			_i$3 = 0;
			while (_i$3 < _ref$3.$length) {
				sigAndHash = new signatureAndHash.Ptr(); $copy(sigAndHash, ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$3]), signatureAndHash);
				(0 < 0 || 0 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0] = sigAndHash.hash;
				(1 < 0 || 1 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 1] = sigAndHash.signature;
				z = $subslice(z, 2);
				_i$3++;
			}
		}
		if (m.secureRenegotiation) {
			(0 < 0 || 0 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0] = 255;
			(1 < 0 || 1 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 1] = 1;
			(2 < 0 || 2 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 2] = 0;
			(3 < 0 || 3 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 3] = 1;
			z = $subslice(z, 5);
		}
		m.raw = x$3;
		return x$3;
	};
	clientHelloMsg.prototype.marshal = function() { return this.$val.marshal(); };
	clientHelloMsg.Ptr.prototype.unmarshal = function(data) {
		var m, sessionIdLen, cipherSuiteLen, _r, _q, numCipherSuites, i, x, x$1, x$2, x$3, compressionMethodsLen, extensionsLength, extension, length, _ref, numNames, d, i$1, nameType, nameLen, l, _r$1, _q$1, numCurves, d$1, i$2, x$4, l$1, l$2, _q$2, n, d$2, _ref$1, _i, i$3, x$5, x$6;
		m = this;
		if (data.$length < 42) {
			return false;
		}
		m.raw = data;
		m.vers = (((((4 < 0 || 4 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 4]) << 16 >>> 16) << 8 << 16 >>> 16) | (((5 < 0 || 5 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 5]) << 16 >>> 16)) >>> 0;
		m.random = $subslice(data, 6, 38);
		sessionIdLen = (((38 < 0 || 38 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 38]) >> 0);
		if (sessionIdLen > 32 || data.$length < (39 + sessionIdLen >> 0)) {
			return false;
		}
		m.sessionId = $subslice(data, 39, (39 + sessionIdLen >> 0));
		data = $subslice(data, (39 + sessionIdLen >> 0));
		if (data.$length < 2) {
			return false;
		}
		cipherSuiteLen = ((((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]) >> 0) << 8 >> 0) | (((1 < 0 || 1 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 1]) >> 0);
		if (((_r = cipherSuiteLen % 2, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) === 1) || data.$length < (2 + cipherSuiteLen >> 0)) {
			return false;
		}
		numCipherSuites = (_q = cipherSuiteLen / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero"));
		m.cipherSuites = ($sliceType($Uint16)).make(numCipherSuites);
		i = 0;
		while (i < numCipherSuites) {
			(x$2 = m.cipherSuites, (i < 0 || i >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i] = ((((x = 2 + ((((2 >>> 16 << 16) * i >> 0) + (2 << 16 >>> 16) * i) >> 0) >> 0, ((x < 0 || x >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + x])) << 16 >>> 16) << 8 << 16 >>> 16) | ((x$1 = 3 + ((((2 >>> 16 << 16) * i >> 0) + (2 << 16 >>> 16) * i) >> 0) >> 0, ((x$1 < 0 || x$1 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + x$1])) << 16 >>> 16)) >>> 0);
			if ((x$3 = m.cipherSuites, ((i < 0 || i >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + i])) === 255) {
				m.secureRenegotiation = true;
			}
			i = i + (1) >> 0;
		}
		data = $subslice(data, (2 + cipherSuiteLen >> 0));
		if (data.$length < 1) {
			return false;
		}
		compressionMethodsLen = (((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]) >> 0);
		if (data.$length < (1 + compressionMethodsLen >> 0)) {
			return false;
		}
		m.compressionMethods = $subslice(data, 1, (1 + compressionMethodsLen >> 0));
		data = $subslice(data, (1 + compressionMethodsLen >> 0));
		m.nextProtoNeg = false;
		m.serverName = "";
		m.ocspStapling = false;
		m.ticketSupported = false;
		m.sessionTicket = ($sliceType($Uint8)).nil;
		m.signatureAndHashes = ($sliceType(signatureAndHash)).nil;
		if (data.$length === 0) {
			return true;
		}
		if (data.$length < 2) {
			return false;
		}
		extensionsLength = ((((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]) >> 0) << 8 >> 0) | (((1 < 0 || 1 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 1]) >> 0);
		data = $subslice(data, 2);
		if (!((extensionsLength === data.$length))) {
			return false;
		}
		while (!((data.$length === 0))) {
			if (data.$length < 4) {
				return false;
			}
			extension = (((((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]) << 16 >>> 16) << 8 << 16 >>> 16) | (((1 < 0 || 1 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 1]) << 16 >>> 16)) >>> 0;
			length = ((((2 < 0 || 2 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 2]) >> 0) << 8 >> 0) | (((3 < 0 || 3 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 3]) >> 0);
			data = $subslice(data, 4);
			if (data.$length < length) {
				return false;
			}
			_ref = extension;
			if (_ref === 0) {
				if (length < 2) {
					return false;
				}
				numNames = ((((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]) >> 0) << 8 >> 0) | (((1 < 0 || 1 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 1]) >> 0);
				d = $subslice(data, 2);
				i$1 = 0;
				while (i$1 < numNames) {
					if (d.$length < 3) {
						return false;
					}
					nameType = ((0 < 0 || 0 >= d.$length) ? $throwRuntimeError("index out of range") : d.$array[d.$offset + 0]);
					nameLen = ((((1 < 0 || 1 >= d.$length) ? $throwRuntimeError("index out of range") : d.$array[d.$offset + 1]) >> 0) << 8 >> 0) | (((2 < 0 || 2 >= d.$length) ? $throwRuntimeError("index out of range") : d.$array[d.$offset + 2]) >> 0);
					d = $subslice(d, 3);
					if (d.$length < nameLen) {
						return false;
					}
					if (nameType === 0) {
						m.serverName = $bytesToString($subslice(d, 0, nameLen));
						break;
					}
					d = $subslice(d, nameLen);
					i$1 = i$1 + (1) >> 0;
				}
			} else if (_ref === 13172) {
				if (length > 0) {
					return false;
				}
				m.nextProtoNeg = true;
			} else if (_ref === 5) {
				m.ocspStapling = length > 0 && (((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]) === 1);
			} else if (_ref === 10) {
				if (length < 2) {
					return false;
				}
				l = ((((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]) >> 0) << 8 >> 0) | (((1 < 0 || 1 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 1]) >> 0);
				if (((_r$1 = l % 2, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) === 1) || !((length === (l + 2 >> 0)))) {
					return false;
				}
				numCurves = (_q$1 = l / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero"));
				m.supportedCurves = ($sliceType(CurveID)).make(numCurves);
				d$1 = $subslice(data, 2);
				i$2 = 0;
				while (i$2 < numCurves) {
					(x$4 = m.supportedCurves, (i$2 < 0 || i$2 >= x$4.$length) ? $throwRuntimeError("index out of range") : x$4.$array[x$4.$offset + i$2] = (((((0 < 0 || 0 >= d$1.$length) ? $throwRuntimeError("index out of range") : d$1.$array[d$1.$offset + 0]) << 16 >>> 16) << 8 << 16 >>> 16) | (((1 < 0 || 1 >= d$1.$length) ? $throwRuntimeError("index out of range") : d$1.$array[d$1.$offset + 1]) << 16 >>> 16)) >>> 0);
					d$1 = $subslice(d$1, 2);
					i$2 = i$2 + (1) >> 0;
				}
			} else if (_ref === 11) {
				if (length < 1) {
					return false;
				}
				l$1 = (((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]) >> 0);
				if (!((length === (l$1 + 1 >> 0)))) {
					return false;
				}
				m.supportedPoints = ($sliceType($Uint8)).make(l$1);
				$copySlice(m.supportedPoints, $subslice(data, 1));
			} else if (_ref === 35) {
				m.ticketSupported = true;
				m.sessionTicket = $subslice(data, 0, length);
			} else if (_ref === 13) {
				if (length < 2 || !(((length & 1) === 0))) {
					return false;
				}
				l$2 = ((((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]) >> 0) << 8 >> 0) | (((1 < 0 || 1 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 1]) >> 0);
				if (!((l$2 === (length - 2 >> 0)))) {
					return false;
				}
				n = (_q$2 = l$2 / 2, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"));
				d$2 = $subslice(data, 2);
				m.signatureAndHashes = ($sliceType(signatureAndHash)).make(n);
				_ref$1 = m.signatureAndHashes;
				_i = 0;
				while (_i < _ref$1.$length) {
					i$3 = _i;
					(x$5 = m.signatureAndHashes, ((i$3 < 0 || i$3 >= x$5.$length) ? $throwRuntimeError("index out of range") : x$5.$array[x$5.$offset + i$3])).hash = ((0 < 0 || 0 >= d$2.$length) ? $throwRuntimeError("index out of range") : d$2.$array[d$2.$offset + 0]);
					(x$6 = m.signatureAndHashes, ((i$3 < 0 || i$3 >= x$6.$length) ? $throwRuntimeError("index out of range") : x$6.$array[x$6.$offset + i$3])).signature = ((1 < 0 || 1 >= d$2.$length) ? $throwRuntimeError("index out of range") : d$2.$array[d$2.$offset + 1]);
					d$2 = $subslice(d$2, 2);
					_i++;
				}
			} else if (_ref === 65282) {
				if (!((length === 1)) || !((((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]) === 0))) {
					return false;
				}
				m.secureRenegotiation = true;
			}
			data = $subslice(data, length);
		}
		return true;
	};
	clientHelloMsg.prototype.unmarshal = function(data) { return this.$val.unmarshal(data); };
	serverHelloMsg.Ptr.prototype.marshal = function() {
		var m, length, numExtensions, extensionsLength, nextProtoLen, _ref, _i, v, x, z, _ref$1, _i$1, v$1, l;
		m = this;
		if (!(m.raw === ($sliceType($Uint8)).nil)) {
			return m.raw;
		}
		length = 38 + m.sessionId.$length >> 0;
		numExtensions = 0;
		extensionsLength = 0;
		nextProtoLen = 0;
		if (m.nextProtoNeg) {
			numExtensions = numExtensions + (1) >> 0;
			_ref = m.nextProtos;
			_i = 0;
			while (_i < _ref.$length) {
				v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				nextProtoLen = nextProtoLen + (v.length) >> 0;
				_i++;
			}
			nextProtoLen = nextProtoLen + (m.nextProtos.$length) >> 0;
			extensionsLength = extensionsLength + (nextProtoLen) >> 0;
		}
		if (m.ocspStapling) {
			numExtensions = numExtensions + (1) >> 0;
		}
		if (m.ticketSupported) {
			numExtensions = numExtensions + (1) >> 0;
		}
		if (m.secureRenegotiation) {
			extensionsLength = extensionsLength + (1) >> 0;
			numExtensions = numExtensions + (1) >> 0;
		}
		if (numExtensions > 0) {
			extensionsLength = extensionsLength + (((((4 >>> 16 << 16) * numExtensions >> 0) + (4 << 16 >>> 16) * numExtensions) >> 0)) >> 0;
			length = length + ((2 + extensionsLength >> 0)) >> 0;
		}
		x = ($sliceType($Uint8)).make((4 + length >> 0));
		(0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0] = 2;
		(1 < 0 || 1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 1] = ((length >> 16 >> 0) << 24 >>> 24);
		(2 < 0 || 2 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 2] = ((length >> 8 >> 0) << 24 >>> 24);
		(3 < 0 || 3 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 3] = (length << 24 >>> 24);
		(4 < 0 || 4 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 4] = ((m.vers >>> 8 << 16 >>> 16) << 24 >>> 24);
		(5 < 0 || 5 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 5] = (m.vers << 24 >>> 24);
		$copySlice($subslice(x, 6, 38), m.random);
		(38 < 0 || 38 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 38] = (m.sessionId.$length << 24 >>> 24);
		$copySlice($subslice(x, 39, (39 + m.sessionId.$length >> 0)), m.sessionId);
		z = $subslice(x, (39 + m.sessionId.$length >> 0));
		(0 < 0 || 0 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0] = ((m.cipherSuite >>> 8 << 16 >>> 16) << 24 >>> 24);
		(1 < 0 || 1 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 1] = (m.cipherSuite << 24 >>> 24);
		(2 < 0 || 2 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 2] = m.compressionMethod;
		z = $subslice(z, 3);
		if (numExtensions > 0) {
			(0 < 0 || 0 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0] = ((extensionsLength >> 8 >> 0) << 24 >>> 24);
			(1 < 0 || 1 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 1] = (extensionsLength << 24 >>> 24);
			z = $subslice(z, 2);
		}
		if (m.nextProtoNeg) {
			(0 < 0 || 0 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0] = 51;
			(1 < 0 || 1 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 1] = 116;
			(2 < 0 || 2 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 2] = ((nextProtoLen >> 8 >> 0) << 24 >>> 24);
			(3 < 0 || 3 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 3] = (nextProtoLen << 24 >>> 24);
			z = $subslice(z, 4);
			_ref$1 = m.nextProtos;
			_i$1 = 0;
			while (_i$1 < _ref$1.$length) {
				v$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				l = v$1.length;
				if (l > 255) {
					l = 255;
				}
				(0 < 0 || 0 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0] = (l << 24 >>> 24);
				$copySlice($subslice(z, 1), new ($sliceType($Uint8))($stringToBytes(v$1.substring(0, l))));
				z = $subslice(z, (1 + l >> 0));
				_i$1++;
			}
		}
		if (m.ocspStapling) {
			(0 < 0 || 0 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0] = 0;
			(1 < 0 || 1 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 1] = 5;
			z = $subslice(z, 4);
		}
		if (m.ticketSupported) {
			(0 < 0 || 0 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0] = 0;
			(1 < 0 || 1 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 1] = 35;
			z = $subslice(z, 4);
		}
		if (m.secureRenegotiation) {
			(0 < 0 || 0 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 0] = 255;
			(1 < 0 || 1 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 1] = 1;
			(2 < 0 || 2 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 2] = 0;
			(3 < 0 || 3 >= z.$length) ? $throwRuntimeError("index out of range") : z.$array[z.$offset + 3] = 1;
			z = $subslice(z, 5);
		}
		m.raw = x;
		return x;
	};
	serverHelloMsg.prototype.marshal = function() { return this.$val.marshal(); };
	serverHelloMsg.Ptr.prototype.unmarshal = function(data) {
		var m, sessionIdLen, extensionsLength, extension, length, _ref, d, l;
		m = this;
		if (data.$length < 42) {
			return false;
		}
		m.raw = data;
		m.vers = (((((4 < 0 || 4 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 4]) << 16 >>> 16) << 8 << 16 >>> 16) | (((5 < 0 || 5 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 5]) << 16 >>> 16)) >>> 0;
		m.random = $subslice(data, 6, 38);
		sessionIdLen = (((38 < 0 || 38 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 38]) >> 0);
		if (sessionIdLen > 32 || data.$length < (39 + sessionIdLen >> 0)) {
			return false;
		}
		m.sessionId = $subslice(data, 39, (39 + sessionIdLen >> 0));
		data = $subslice(data, (39 + sessionIdLen >> 0));
		if (data.$length < 3) {
			return false;
		}
		m.cipherSuite = (((((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]) << 16 >>> 16) << 8 << 16 >>> 16) | (((1 < 0 || 1 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 1]) << 16 >>> 16)) >>> 0;
		m.compressionMethod = ((2 < 0 || 2 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 2]);
		data = $subslice(data, 3);
		m.nextProtoNeg = false;
		m.nextProtos = ($sliceType($String)).nil;
		m.ocspStapling = false;
		m.ticketSupported = false;
		if (data.$length === 0) {
			return true;
		}
		if (data.$length < 2) {
			return false;
		}
		extensionsLength = ((((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]) >> 0) << 8 >> 0) | (((1 < 0 || 1 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 1]) >> 0);
		data = $subslice(data, 2);
		if (!((data.$length === extensionsLength))) {
			return false;
		}
		while (!((data.$length === 0))) {
			if (data.$length < 4) {
				return false;
			}
			extension = (((((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]) << 16 >>> 16) << 8 << 16 >>> 16) | (((1 < 0 || 1 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 1]) << 16 >>> 16)) >>> 0;
			length = ((((2 < 0 || 2 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 2]) >> 0) << 8 >> 0) | (((3 < 0 || 3 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 3]) >> 0);
			data = $subslice(data, 4);
			if (data.$length < length) {
				return false;
			}
			_ref = extension;
			if (_ref === 13172) {
				m.nextProtoNeg = true;
				d = $subslice(data, 0, length);
				while (d.$length > 0) {
					l = (((0 < 0 || 0 >= d.$length) ? $throwRuntimeError("index out of range") : d.$array[d.$offset + 0]) >> 0);
					d = $subslice(d, 1);
					if ((l === 0) || l > d.$length) {
						return false;
					}
					m.nextProtos = $append(m.nextProtos, $bytesToString($subslice(d, 0, l)));
					d = $subslice(d, l);
				}
			} else if (_ref === 5) {
				if (length > 0) {
					return false;
				}
				m.ocspStapling = true;
			} else if (_ref === 35) {
				if (length > 0) {
					return false;
				}
				m.ticketSupported = true;
			} else if (_ref === 65281) {
				if (!((length === 1)) || !((((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]) === 0))) {
					return false;
				}
				m.secureRenegotiation = true;
			}
			data = $subslice(data, length);
		}
		return true;
	};
	serverHelloMsg.prototype.unmarshal = function(data) { return this.$val.unmarshal(data); };
	certificateMsg.Ptr.prototype.marshal = function() {
		var x = ($sliceType($Uint8)).nil, m, i, _ref, _i, slice, x$1, length, certificateOctets, y, _ref$1, _i$1, slice$1;
		m = this;
		if (!(m.raw === ($sliceType($Uint8)).nil)) {
			x = m.raw;
			return x;
		}
		i = 0;
		_ref = m.certificates;
		_i = 0;
		while (_i < _ref.$length) {
			slice = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			i = i + (slice.$length) >> 0;
			_i++;
		}
		length = (3 + (x$1 = m.certificates.$length, (((3 >>> 16 << 16) * x$1 >> 0) + (3 << 16 >>> 16) * x$1) >> 0) >> 0) + i >> 0;
		x = ($sliceType($Uint8)).make((4 + length >> 0));
		(0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0] = 11;
		(1 < 0 || 1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 1] = ((length >> 16 >> 0) << 24 >>> 24);
		(2 < 0 || 2 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 2] = ((length >> 8 >> 0) << 24 >>> 24);
		(3 < 0 || 3 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 3] = (length << 24 >>> 24);
		certificateOctets = length - 3 >> 0;
		(4 < 0 || 4 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 4] = ((certificateOctets >> 16 >> 0) << 24 >>> 24);
		(5 < 0 || 5 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 5] = ((certificateOctets >> 8 >> 0) << 24 >>> 24);
		(6 < 0 || 6 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 6] = (certificateOctets << 24 >>> 24);
		y = $subslice(x, 7);
		_ref$1 = m.certificates;
		_i$1 = 0;
		while (_i$1 < _ref$1.$length) {
			slice$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			(0 < 0 || 0 >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + 0] = ((slice$1.$length >> 16 >> 0) << 24 >>> 24);
			(1 < 0 || 1 >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + 1] = ((slice$1.$length >> 8 >> 0) << 24 >>> 24);
			(2 < 0 || 2 >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + 2] = (slice$1.$length << 24 >>> 24);
			$copySlice($subslice(y, 3), slice$1);
			y = $subslice(y, (3 + slice$1.$length >> 0));
			_i$1++;
		}
		m.raw = x;
		return x;
	};
	certificateMsg.prototype.marshal = function() { return this.$val.marshal(); };
	certificateMsg.Ptr.prototype.unmarshal = function(data) {
		var m, certsLen, numCerts, d, certLen, i, certLen$1, x;
		m = this;
		if (data.$length < 7) {
			return false;
		}
		m.raw = data;
		certsLen = (((((((4 < 0 || 4 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 4]) >>> 0) << 16 >>> 0) | ((((5 < 0 || 5 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 5]) >>> 0) << 8 >>> 0)) >>> 0) | (((6 < 0 || 6 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 6]) >>> 0)) >>> 0;
		if (!(((data.$length >>> 0) === (certsLen + 7 >>> 0)))) {
			return false;
		}
		numCerts = 0;
		d = $subslice(data, 7);
		while (certsLen > 0) {
			if (d.$length < 4) {
				return false;
			}
			certLen = (((((((0 < 0 || 0 >= d.$length) ? $throwRuntimeError("index out of range") : d.$array[d.$offset + 0]) >>> 0) << 16 >>> 0) | ((((1 < 0 || 1 >= d.$length) ? $throwRuntimeError("index out of range") : d.$array[d.$offset + 1]) >>> 0) << 8 >>> 0)) >>> 0) | (((2 < 0 || 2 >= d.$length) ? $throwRuntimeError("index out of range") : d.$array[d.$offset + 2]) >>> 0)) >>> 0;
			if ((d.$length >>> 0) < (3 + certLen >>> 0)) {
				return false;
			}
			d = $subslice(d, (3 + certLen >>> 0));
			certsLen = certsLen - ((3 + certLen >>> 0)) >>> 0;
			numCerts = numCerts + (1) >> 0;
		}
		m.certificates = ($sliceType(($sliceType($Uint8)))).make(numCerts);
		d = $subslice(data, 7);
		i = 0;
		while (i < numCerts) {
			certLen$1 = (((((((0 < 0 || 0 >= d.$length) ? $throwRuntimeError("index out of range") : d.$array[d.$offset + 0]) >>> 0) << 16 >>> 0) | ((((1 < 0 || 1 >= d.$length) ? $throwRuntimeError("index out of range") : d.$array[d.$offset + 1]) >>> 0) << 8 >>> 0)) >>> 0) | (((2 < 0 || 2 >= d.$length) ? $throwRuntimeError("index out of range") : d.$array[d.$offset + 2]) >>> 0)) >>> 0;
			(x = m.certificates, (i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = $subslice(d, 3, (3 + certLen$1 >>> 0)));
			d = $subslice(d, (3 + certLen$1 >>> 0));
			i = i + (1) >> 0;
		}
		return true;
	};
	certificateMsg.prototype.unmarshal = function(data) { return this.$val.unmarshal(data); };
	serverKeyExchangeMsg.Ptr.prototype.marshal = function() {
		var m, length, x;
		m = this;
		if (!(m.raw === ($sliceType($Uint8)).nil)) {
			return m.raw;
		}
		length = m.key.$length;
		x = ($sliceType($Uint8)).make((length + 4 >> 0));
		(0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0] = 12;
		(1 < 0 || 1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 1] = ((length >> 16 >> 0) << 24 >>> 24);
		(2 < 0 || 2 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 2] = ((length >> 8 >> 0) << 24 >>> 24);
		(3 < 0 || 3 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 3] = (length << 24 >>> 24);
		$copySlice($subslice(x, 4), m.key);
		m.raw = x;
		return x;
	};
	serverKeyExchangeMsg.prototype.marshal = function() { return this.$val.marshal(); };
	serverKeyExchangeMsg.Ptr.prototype.unmarshal = function(data) {
		var m;
		m = this;
		m.raw = data;
		if (data.$length < 4) {
			return false;
		}
		m.key = $subslice(data, 4);
		return true;
	};
	serverKeyExchangeMsg.prototype.unmarshal = function(data) { return this.$val.unmarshal(data); };
	certificateStatusMsg.Ptr.prototype.marshal = function() {
		var m, x, l;
		m = this;
		if (!(m.raw === ($sliceType($Uint8)).nil)) {
			return m.raw;
		}
		x = ($sliceType($Uint8)).nil;
		if (m.statusType === 1) {
			x = ($sliceType($Uint8)).make((8 + m.response.$length >> 0));
			(0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0] = 22;
			l = m.response.$length + 4 >> 0;
			(1 < 0 || 1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 1] = ((l >> 16 >> 0) << 24 >>> 24);
			(2 < 0 || 2 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 2] = ((l >> 8 >> 0) << 24 >>> 24);
			(3 < 0 || 3 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 3] = (l << 24 >>> 24);
			(4 < 0 || 4 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 4] = 1;
			l = l - (4) >> 0;
			(5 < 0 || 5 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 5] = ((l >> 16 >> 0) << 24 >>> 24);
			(6 < 0 || 6 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 6] = ((l >> 8 >> 0) << 24 >>> 24);
			(7 < 0 || 7 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 7] = (l << 24 >>> 24);
			$copySlice($subslice(x, 8), m.response);
		} else {
			x = new ($sliceType($Uint8))([22, 0, 0, 1, m.statusType]);
		}
		m.raw = x;
		return x;
	};
	certificateStatusMsg.prototype.marshal = function() { return this.$val.marshal(); };
	certificateStatusMsg.Ptr.prototype.unmarshal = function(data) {
		var m, respLen;
		m = this;
		m.raw = data;
		if (data.$length < 5) {
			return false;
		}
		m.statusType = ((4 < 0 || 4 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 4]);
		m.response = ($sliceType($Uint8)).nil;
		if (m.statusType === 1) {
			if (data.$length < 8) {
				return false;
			}
			respLen = (((((((5 < 0 || 5 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 5]) >>> 0) << 16 >>> 0) | ((((6 < 0 || 6 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 6]) >>> 0) << 8 >>> 0)) >>> 0) | (((7 < 0 || 7 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 7]) >>> 0)) >>> 0;
			if (!(((data.$length >>> 0) === (8 + respLen >>> 0)))) {
				return false;
			}
			m.response = $subslice(data, 8);
		}
		return true;
	};
	certificateStatusMsg.prototype.unmarshal = function(data) { return this.$val.unmarshal(data); };
	serverHelloDoneMsg.Ptr.prototype.marshal = function() {
		var m, x;
		m = this;
		x = ($sliceType($Uint8)).make(4);
		(0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0] = 14;
		return x;
	};
	serverHelloDoneMsg.prototype.marshal = function() { return this.$val.marshal(); };
	serverHelloDoneMsg.Ptr.prototype.unmarshal = function(data) {
		var m;
		m = this;
		return data.$length === 4;
	};
	serverHelloDoneMsg.prototype.unmarshal = function(data) { return this.$val.unmarshal(data); };
	clientKeyExchangeMsg.Ptr.prototype.marshal = function() {
		var m, length, x;
		m = this;
		if (!(m.raw === ($sliceType($Uint8)).nil)) {
			return m.raw;
		}
		length = m.ciphertext.$length;
		x = ($sliceType($Uint8)).make((length + 4 >> 0));
		(0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0] = 16;
		(1 < 0 || 1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 1] = ((length >> 16 >> 0) << 24 >>> 24);
		(2 < 0 || 2 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 2] = ((length >> 8 >> 0) << 24 >>> 24);
		(3 < 0 || 3 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 3] = (length << 24 >>> 24);
		$copySlice($subslice(x, 4), m.ciphertext);
		m.raw = x;
		return x;
	};
	clientKeyExchangeMsg.prototype.marshal = function() { return this.$val.marshal(); };
	clientKeyExchangeMsg.Ptr.prototype.unmarshal = function(data) {
		var m, l;
		m = this;
		m.raw = data;
		if (data.$length < 4) {
			return false;
		}
		l = (((((1 < 0 || 1 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 1]) >> 0) << 16 >> 0) | ((((2 < 0 || 2 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 2]) >> 0) << 8 >> 0)) | (((3 < 0 || 3 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 3]) >> 0);
		if (!((l === (data.$length - 4 >> 0)))) {
			return false;
		}
		m.ciphertext = $subslice(data, 4);
		return true;
	};
	clientKeyExchangeMsg.prototype.unmarshal = function(data) { return this.$val.unmarshal(data); };
	finishedMsg.Ptr.prototype.marshal = function() {
		var x = ($sliceType($Uint8)).nil, m;
		m = this;
		if (!(m.raw === ($sliceType($Uint8)).nil)) {
			x = m.raw;
			return x;
		}
		x = ($sliceType($Uint8)).make((4 + m.verifyData.$length >> 0));
		(0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0] = 20;
		(3 < 0 || 3 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 3] = (m.verifyData.$length << 24 >>> 24);
		$copySlice($subslice(x, 4), m.verifyData);
		m.raw = x;
		return x;
	};
	finishedMsg.prototype.marshal = function() { return this.$val.marshal(); };
	finishedMsg.Ptr.prototype.unmarshal = function(data) {
		var m;
		m = this;
		m.raw = data;
		if (data.$length < 4) {
			return false;
		}
		m.verifyData = $subslice(data, 4);
		return true;
	};
	finishedMsg.prototype.unmarshal = function(data) { return this.$val.unmarshal(data); };
	nextProtoMsg.Ptr.prototype.marshal = function() {
		var m, l, _r, padding, length, x, y;
		m = this;
		if (!(m.raw === ($sliceType($Uint8)).nil)) {
			return m.raw;
		}
		l = m.proto.length;
		if (l > 255) {
			l = 255;
		}
		padding = 32 - (_r = ((l + 2 >> 0)) % 32, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >> 0;
		length = (l + padding >> 0) + 2 >> 0;
		x = ($sliceType($Uint8)).make((length + 4 >> 0));
		(0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0] = 67;
		(1 < 0 || 1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 1] = ((length >> 16 >> 0) << 24 >>> 24);
		(2 < 0 || 2 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 2] = ((length >> 8 >> 0) << 24 >>> 24);
		(3 < 0 || 3 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 3] = (length << 24 >>> 24);
		y = $subslice(x, 4);
		(0 < 0 || 0 >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + 0] = (l << 24 >>> 24);
		$copySlice($subslice(y, 1), new ($sliceType($Uint8))($stringToBytes(m.proto.substring(0, l))));
		y = $subslice(y, (1 + l >> 0));
		(0 < 0 || 0 >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + 0] = (padding << 24 >>> 24);
		m.raw = x;
		return x;
	};
	nextProtoMsg.prototype.marshal = function() { return this.$val.marshal(); };
	nextProtoMsg.Ptr.prototype.unmarshal = function(data) {
		var m, protoLen, paddingLen;
		m = this;
		m.raw = data;
		if (data.$length < 5) {
			return false;
		}
		data = $subslice(data, 4);
		protoLen = (((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]) >> 0);
		data = $subslice(data, 1);
		if (data.$length < protoLen) {
			return false;
		}
		m.proto = $bytesToString($subslice(data, 0, protoLen));
		data = $subslice(data, protoLen);
		if (data.$length < 1) {
			return false;
		}
		paddingLen = (((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]) >> 0);
		data = $subslice(data, 1);
		if (!((data.$length === paddingLen))) {
			return false;
		}
		return true;
	};
	nextProtoMsg.prototype.unmarshal = function(data) { return this.$val.unmarshal(data); };
	certificateRequestMsg.Ptr.prototype.marshal = function() {
		var x = ($sliceType($Uint8)).nil, m, length, casLength, _ref, _i, ca, x$1, y, x$2, n, _ref$1, _i$1, sigAndHash, _ref$2, _i$2, ca$1;
		m = this;
		if (!(m.raw === ($sliceType($Uint8)).nil)) {
			x = m.raw;
			return x;
		}
		length = (1 + m.certificateTypes.$length >> 0) + 2 >> 0;
		casLength = 0;
		_ref = m.certificateAuthorities;
		_i = 0;
		while (_i < _ref.$length) {
			ca = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			casLength = casLength + ((2 + ca.$length >> 0)) >> 0;
			_i++;
		}
		length = length + (casLength) >> 0;
		if (m.hasSignatureAndHash) {
			length = length + ((2 + (x$1 = m.signatureAndHashes.$length, (((2 >>> 16 << 16) * x$1 >> 0) + (2 << 16 >>> 16) * x$1) >> 0) >> 0)) >> 0;
		}
		x = ($sliceType($Uint8)).make((4 + length >> 0));
		(0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0] = 13;
		(1 < 0 || 1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 1] = ((length >> 16 >> 0) << 24 >>> 24);
		(2 < 0 || 2 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 2] = ((length >> 8 >> 0) << 24 >>> 24);
		(3 < 0 || 3 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 3] = (length << 24 >>> 24);
		(4 < 0 || 4 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 4] = (m.certificateTypes.$length << 24 >>> 24);
		$copySlice($subslice(x, 5), m.certificateTypes);
		y = $subslice(x, (5 + m.certificateTypes.$length >> 0));
		if (m.hasSignatureAndHash) {
			n = (x$2 = m.signatureAndHashes.$length, (((x$2 >>> 16 << 16) * 2 >> 0) + (x$2 << 16 >>> 16) * 2) >> 0);
			(0 < 0 || 0 >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + 0] = ((n >> 8 >> 0) << 24 >>> 24);
			(1 < 0 || 1 >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + 1] = (n << 24 >>> 24);
			y = $subslice(y, 2);
			_ref$1 = m.signatureAndHashes;
			_i$1 = 0;
			while (_i$1 < _ref$1.$length) {
				sigAndHash = new signatureAndHash.Ptr(); $copy(sigAndHash, ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]), signatureAndHash);
				(0 < 0 || 0 >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + 0] = sigAndHash.hash;
				(1 < 0 || 1 >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + 1] = sigAndHash.signature;
				y = $subslice(y, 2);
				_i$1++;
			}
		}
		(0 < 0 || 0 >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + 0] = ((casLength >> 8 >> 0) << 24 >>> 24);
		(1 < 0 || 1 >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + 1] = (casLength << 24 >>> 24);
		y = $subslice(y, 2);
		_ref$2 = m.certificateAuthorities;
		_i$2 = 0;
		while (_i$2 < _ref$2.$length) {
			ca$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
			(0 < 0 || 0 >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + 0] = ((ca$1.$length >> 8 >> 0) << 24 >>> 24);
			(1 < 0 || 1 >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + 1] = (ca$1.$length << 24 >>> 24);
			y = $subslice(y, 2);
			$copySlice(y, ca$1);
			y = $subslice(y, ca$1.$length);
			_i$2++;
		}
		m.raw = x;
		return x;
	};
	certificateRequestMsg.prototype.marshal = function() { return this.$val.marshal(); };
	certificateRequestMsg.Ptr.prototype.unmarshal = function(data) {
		var m, length, numCertTypes, sigAndHashLen, _q, numSigAndHash, _ref, _i, i, x, x$1, casLength, cas, caLen;
		m = this;
		m.raw = data;
		if (data.$length < 5) {
			return false;
		}
		length = (((((((1 < 0 || 1 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 1]) >>> 0) << 16 >>> 0) | ((((2 < 0 || 2 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 2]) >>> 0) << 8 >>> 0)) >>> 0) | (((3 < 0 || 3 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 3]) >>> 0)) >>> 0;
		if (!((((data.$length >>> 0) - 4 >>> 0) === length))) {
			return false;
		}
		numCertTypes = (((4 < 0 || 4 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 4]) >> 0);
		data = $subslice(data, 5);
		if ((numCertTypes === 0) || data.$length <= numCertTypes) {
			return false;
		}
		m.certificateTypes = ($sliceType($Uint8)).make(numCertTypes);
		if (!(($copySlice(m.certificateTypes, data) === numCertTypes))) {
			return false;
		}
		data = $subslice(data, numCertTypes);
		if (m.hasSignatureAndHash) {
			if (data.$length < 2) {
				return false;
			}
			sigAndHashLen = (((((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]) << 16 >>> 16) << 8 << 16 >>> 16) | (((1 < 0 || 1 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 1]) << 16 >>> 16)) >>> 0;
			data = $subslice(data, 2);
			if (!((((sigAndHashLen & 1) >>> 0) === 0))) {
				return false;
			}
			if (data.$length < (sigAndHashLen >> 0)) {
				return false;
			}
			numSigAndHash = (_q = sigAndHashLen / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >>> 0 : $throwRuntimeError("integer divide by zero"));
			m.signatureAndHashes = ($sliceType(signatureAndHash)).make(numSigAndHash);
			_ref = m.signatureAndHashes;
			_i = 0;
			while (_i < _ref.$length) {
				i = _i;
				(x = m.signatureAndHashes, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])).hash = ((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]);
				(x$1 = m.signatureAndHashes, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])).signature = ((1 < 0 || 1 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 1]);
				data = $subslice(data, 2);
				_i++;
			}
		}
		if (data.$length < 2) {
			return false;
		}
		casLength = (((((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]) << 16 >>> 16) << 8 << 16 >>> 16) | (((1 < 0 || 1 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 1]) << 16 >>> 16)) >>> 0;
		data = $subslice(data, 2);
		if (data.$length < (casLength >> 0)) {
			return false;
		}
		cas = ($sliceType($Uint8)).make(casLength);
		$copySlice(cas, data);
		data = $subslice(data, casLength);
		m.certificateAuthorities = ($sliceType(($sliceType($Uint8)))).nil;
		while (cas.$length > 0) {
			if (cas.$length < 2) {
				return false;
			}
			caLen = (((((0 < 0 || 0 >= cas.$length) ? $throwRuntimeError("index out of range") : cas.$array[cas.$offset + 0]) << 16 >>> 16) << 8 << 16 >>> 16) | (((1 < 0 || 1 >= cas.$length) ? $throwRuntimeError("index out of range") : cas.$array[cas.$offset + 1]) << 16 >>> 16)) >>> 0;
			cas = $subslice(cas, 2);
			if (cas.$length < (caLen >> 0)) {
				return false;
			}
			m.certificateAuthorities = $append(m.certificateAuthorities, $subslice(cas, 0, caLen));
			cas = $subslice(cas, caLen);
		}
		if (data.$length > 0) {
			return false;
		}
		return true;
	};
	certificateRequestMsg.prototype.unmarshal = function(data) { return this.$val.unmarshal(data); };
	certificateVerifyMsg.Ptr.prototype.marshal = function() {
		var x = ($sliceType($Uint8)).nil, m, siglength, length, y;
		m = this;
		if (!(m.raw === ($sliceType($Uint8)).nil)) {
			x = m.raw;
			return x;
		}
		siglength = m.signature.$length;
		length = 2 + siglength >> 0;
		if (m.hasSignatureAndHash) {
			length = length + (2) >> 0;
		}
		x = ($sliceType($Uint8)).make((4 + length >> 0));
		(0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0] = 15;
		(1 < 0 || 1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 1] = ((length >> 16 >> 0) << 24 >>> 24);
		(2 < 0 || 2 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 2] = ((length >> 8 >> 0) << 24 >>> 24);
		(3 < 0 || 3 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 3] = (length << 24 >>> 24);
		y = $subslice(x, 4);
		if (m.hasSignatureAndHash) {
			(0 < 0 || 0 >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + 0] = m.signatureAndHash.hash;
			(1 < 0 || 1 >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + 1] = m.signatureAndHash.signature;
			y = $subslice(y, 2);
		}
		(0 < 0 || 0 >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + 0] = ((siglength >> 8 >> 0) << 24 >>> 24);
		(1 < 0 || 1 >= y.$length) ? $throwRuntimeError("index out of range") : y.$array[y.$offset + 1] = (siglength << 24 >>> 24);
		$copySlice($subslice(y, 2), m.signature);
		m.raw = x;
		return x;
	};
	certificateVerifyMsg.prototype.marshal = function() { return this.$val.marshal(); };
	certificateVerifyMsg.Ptr.prototype.unmarshal = function(data) {
		var m, length, siglength;
		m = this;
		m.raw = data;
		if (data.$length < 6) {
			return false;
		}
		length = (((((((1 < 0 || 1 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 1]) >>> 0) << 16 >>> 0) | ((((2 < 0 || 2 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 2]) >>> 0) << 8 >>> 0)) >>> 0) | (((3 < 0 || 3 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 3]) >>> 0)) >>> 0;
		if (!((((data.$length >>> 0) - 4 >>> 0) === length))) {
			return false;
		}
		data = $subslice(data, 4);
		if (m.hasSignatureAndHash) {
			m.signatureAndHash.hash = ((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]);
			m.signatureAndHash.signature = ((1 < 0 || 1 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 1]);
			data = $subslice(data, 2);
		}
		if (data.$length < 2) {
			return false;
		}
		siglength = ((((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]) >> 0) << 8 >> 0) + (((1 < 0 || 1 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 1]) >> 0) >> 0;
		data = $subslice(data, 2);
		if (!((data.$length === siglength))) {
			return false;
		}
		m.signature = data;
		return true;
	};
	certificateVerifyMsg.prototype.unmarshal = function(data) { return this.$val.unmarshal(data); };
	newSessionTicketMsg.Ptr.prototype.marshal = function() {
		var x = ($sliceType($Uint8)).nil, m, ticketLen, length;
		m = this;
		if (!(m.raw === ($sliceType($Uint8)).nil)) {
			x = m.raw;
			return x;
		}
		ticketLen = m.ticket.$length;
		length = 6 + ticketLen >> 0;
		x = ($sliceType($Uint8)).make((4 + length >> 0));
		(0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0] = 4;
		(1 < 0 || 1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 1] = ((length >> 16 >> 0) << 24 >>> 24);
		(2 < 0 || 2 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 2] = ((length >> 8 >> 0) << 24 >>> 24);
		(3 < 0 || 3 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 3] = (length << 24 >>> 24);
		(8 < 0 || 8 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 8] = ((ticketLen >> 8 >> 0) << 24 >>> 24);
		(9 < 0 || 9 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 9] = (ticketLen << 24 >>> 24);
		$copySlice($subslice(x, 10), m.ticket);
		m.raw = x;
		return x;
	};
	newSessionTicketMsg.prototype.marshal = function() { return this.$val.marshal(); };
	newSessionTicketMsg.Ptr.prototype.unmarshal = function(data) {
		var m, length, ticketLen;
		m = this;
		m.raw = data;
		if (data.$length < 10) {
			return false;
		}
		length = (((((((1 < 0 || 1 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 1]) >>> 0) << 16 >>> 0) | ((((2 < 0 || 2 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 2]) >>> 0) << 8 >>> 0)) >>> 0) | (((3 < 0 || 3 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 3]) >>> 0)) >>> 0;
		if (!((((data.$length >>> 0) - 4 >>> 0) === length))) {
			return false;
		}
		ticketLen = ((((8 < 0 || 8 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 8]) >> 0) << 8 >> 0) + (((9 < 0 || 9 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 9]) >> 0) >> 0;
		if (!(((data.$length - 10 >> 0) === ticketLen))) {
			return false;
		}
		m.ticket = $subslice(data, 10);
		return true;
	};
	newSessionTicketMsg.prototype.unmarshal = function(data) { return this.$val.unmarshal(data); };
	Conn.Ptr.prototype.serverHandshake = function() {
		var c, config, hs, _tuple, isResume, err, err$1, err$2, err$3, err$4, err$5, err$6, err$7, err$8, err$9;
		c = this;
		config = c.config;
		config.serverInitOnce.Do($methodVal(config, "serverInit"));
		hs = new serverHandshakeState.Ptr(c, ($ptrType(clientHelloMsg)).nil, ($ptrType(serverHelloMsg)).nil, ($ptrType(cipherSuite)).nil, false, false, ($ptrType(sessionState)).nil, new finishedHash.Ptr(), ($sliceType($Uint8)).nil, ($sliceType(($sliceType($Uint8)))).nil, ($ptrType(Certificate)).nil);
		_tuple = hs.readClientHello(); isResume = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		if (isResume) {
			err$1 = hs.doResumeHandshake();
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return err$1;
			}
			err$2 = hs.establishKeys();
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				return err$2;
			}
			err$3 = hs.sendFinished();
			if (!($interfaceIsEqual(err$3, $ifaceNil))) {
				return err$3;
			}
			err$4 = hs.readFinished();
			if (!($interfaceIsEqual(err$4, $ifaceNil))) {
				return err$4;
			}
			c.didResume = true;
		} else {
			err$5 = hs.doFullHandshake();
			if (!($interfaceIsEqual(err$5, $ifaceNil))) {
				return err$5;
			}
			err$6 = hs.establishKeys();
			if (!($interfaceIsEqual(err$6, $ifaceNil))) {
				return err$6;
			}
			err$7 = hs.readFinished();
			if (!($interfaceIsEqual(err$7, $ifaceNil))) {
				return err$7;
			}
			err$8 = hs.sendSessionTicket();
			if (!($interfaceIsEqual(err$8, $ifaceNil))) {
				return err$8;
			}
			err$9 = hs.sendFinished();
			if (!($interfaceIsEqual(err$9, $ifaceNil))) {
				return err$9;
			}
		}
		c.handshakeComplete = true;
		return $ifaceNil;
	};
	Conn.prototype.serverHandshake = function() { return this.$val.serverHandshake(); };
	serverHandshakeState.Ptr.prototype.readClientHello = function() {
		var isResume = false, err = $ifaceNil, hs, config, c, _tuple, msg, _tmp, _tmp$1, ok, _tuple$1, _tmp$2, _tmp$3, _tuple$2, _tmp$4, _tmp$5, supportedCurve, preferredCurves, _ref, _i, curve, _ref$1, _i$1, supported, supportedPointFormat, _ref$2, _i$2, pointFormat, foundCompression, _ref$3, _i$3, compression, _tmp$6, _tmp$7, _tuple$3, _tmp$8, _tmp$9, _tmp$10, _tmp$11, x, _tuple$4, _tmp$12, _tmp$13, _tmp$14, _tmp$15, preferenceList, supportedList, _ref$4, _i$4, id, _tmp$16, _tmp$17, _tmp$18, _tmp$19;
		hs = this;
		config = hs.c.config;
		c = hs.c;
		_tuple = c.readHandshake(); msg = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = false; _tmp$1 = err; isResume = _tmp; err = _tmp$1;
			return [isResume, err];
		}
		ok = false;
		_tuple$1 = $assertType(msg, ($ptrType(clientHelloMsg)), true); hs.clientHello = _tuple$1[0]; ok = _tuple$1[1];
		if (!ok) {
			c.sendAlert(10);
			_tmp$2 = false; _tmp$3 = unexpectedMessageError(hs.clientHello, msg); isResume = _tmp$2; err = _tmp$3;
			return [isResume, err];
		}
		_tuple$2 = config.mutualVersion(hs.clientHello.vers); c.vers = _tuple$2[0]; ok = _tuple$2[1];
		if (!ok) {
			c.sendAlert(70);
			_tmp$4 = false; _tmp$5 = fmt.Errorf("tls: client offered an unsupported, maximum protocol version of %x", new ($sliceType($emptyInterface))([new $Uint16(hs.clientHello.vers)])); isResume = _tmp$4; err = _tmp$5;
			return [isResume, err];
		}
		c.haveVers = true;
		$copy(hs.finishedHash, newFinishedHash(c.vers), finishedHash);
		hs.finishedHash.Write(hs.clientHello.marshal());
		hs.hello = new serverHelloMsg.Ptr();
		supportedCurve = false;
		preferredCurves = config.curvePreferences();
		_ref = hs.clientHello.supportedCurves;
		_i = 0;
		Curves:
		while (_i < _ref.$length) {
			curve = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_ref$1 = preferredCurves;
			_i$1 = 0;
			while (_i$1 < _ref$1.$length) {
				supported = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				if (supported === curve) {
					supportedCurve = true;
					break Curves;
				}
				_i$1++;
			}
			_i++;
		}
		supportedPointFormat = false;
		_ref$2 = hs.clientHello.supportedPoints;
		_i$2 = 0;
		while (_i$2 < _ref$2.$length) {
			pointFormat = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
			if (pointFormat === 0) {
				supportedPointFormat = true;
				break;
			}
			_i$2++;
		}
		hs.ellipticOk = supportedCurve && supportedPointFormat;
		foundCompression = false;
		_ref$3 = hs.clientHello.compressionMethods;
		_i$3 = 0;
		while (_i$3 < _ref$3.$length) {
			compression = ((_i$3 < 0 || _i$3 >= _ref$3.$length) ? $throwRuntimeError("index out of range") : _ref$3.$array[_ref$3.$offset + _i$3]);
			if (compression === 0) {
				foundCompression = true;
				break;
			}
			_i$3++;
		}
		if (!foundCompression) {
			c.sendAlert(40);
			_tmp$6 = false; _tmp$7 = errors.New("tls: client does not support uncompressed connections"); isResume = _tmp$6; err = _tmp$7;
			return [isResume, err];
		}
		hs.hello.vers = c.vers;
		hs.hello.random = ($sliceType($Uint8)).make(32);
		_tuple$3 = io.ReadFull(config.rand(), hs.hello.random); err = _tuple$3[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			c.sendAlert(80);
			_tmp$8 = false; _tmp$9 = err; isResume = _tmp$8; err = _tmp$9;
			return [isResume, err];
		}
		hs.hello.secureRenegotiation = hs.clientHello.secureRenegotiation;
		hs.hello.compressionMethod = 0;
		if (hs.clientHello.serverName.length > 0) {
			c.serverName = hs.clientHello.serverName;
		}
		if (hs.clientHello.nextProtoNeg && config.NextProtos.$length > 0) {
			hs.hello.nextProtoNeg = true;
			hs.hello.nextProtos = config.NextProtos;
		}
		if (config.Certificates.$length === 0) {
			c.sendAlert(80);
			_tmp$10 = false; _tmp$11 = errors.New("tls: no certificates configured"); isResume = _tmp$10; err = _tmp$11;
			return [isResume, err];
		}
		hs.cert = (x = config.Certificates, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
		if (hs.clientHello.serverName.length > 0) {
			hs.cert = config.getCertificateForName(hs.clientHello.serverName);
		}
		_tuple$4 = $assertType(hs.cert.PrivateKey, ($ptrType(ecdsa.PrivateKey)), true); hs.ecdsaOk = _tuple$4[1];
		if (hs.checkForResumption()) {
			_tmp$12 = true; _tmp$13 = $ifaceNil; isResume = _tmp$12; err = _tmp$13;
			return [isResume, err];
		}
		_tmp$14 = ($sliceType($Uint16)).nil; _tmp$15 = ($sliceType($Uint16)).nil; preferenceList = _tmp$14; supportedList = _tmp$15;
		if (c.config.PreferServerCipherSuites) {
			preferenceList = c.config.cipherSuites();
			supportedList = hs.clientHello.cipherSuites;
		} else {
			preferenceList = hs.clientHello.cipherSuites;
			supportedList = c.config.cipherSuites();
		}
		_ref$4 = preferenceList;
		_i$4 = 0;
		while (_i$4 < _ref$4.$length) {
			id = ((_i$4 < 0 || _i$4 >= _ref$4.$length) ? $throwRuntimeError("index out of range") : _ref$4.$array[_ref$4.$offset + _i$4]);
			hs.suite = c.tryCipherSuite(id, supportedList, c.vers, hs.ellipticOk, hs.ecdsaOk);
			if (!(hs.suite === ($ptrType(cipherSuite)).nil)) {
				break;
			}
			_i$4++;
		}
		if (hs.suite === ($ptrType(cipherSuite)).nil) {
			c.sendAlert(40);
			_tmp$16 = false; _tmp$17 = errors.New("tls: no cipher suite supported by both client and server"); isResume = _tmp$16; err = _tmp$17;
			return [isResume, err];
		}
		_tmp$18 = false; _tmp$19 = $ifaceNil; isResume = _tmp$18; err = _tmp$19;
		return [isResume, err];
	};
	serverHandshakeState.prototype.readClientHello = function() { return this.$val.readClientHello(); };
	serverHandshakeState.Ptr.prototype.checkForResumption = function() {
		var hs, c, ok, _tuple, _tuple$1, vers, ok$1, cipherSuiteOk, _ref, _i, id, sessionHasClientCerts, needClientCerts;
		hs = this;
		c = hs.c;
		ok = false;
		_tuple = c.decryptTicket(hs.clientHello.sessionTicket); hs.sessionState = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			return false;
		}
		if (hs.sessionState.vers > hs.clientHello.vers) {
			return false;
		}
		_tuple$1 = c.config.mutualVersion(hs.sessionState.vers); vers = _tuple$1[0]; ok$1 = _tuple$1[1];
		if (!ok$1 || !((vers === hs.sessionState.vers))) {
			return false;
		}
		cipherSuiteOk = false;
		_ref = hs.clientHello.cipherSuites;
		_i = 0;
		while (_i < _ref.$length) {
			id = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (id === hs.sessionState.cipherSuite) {
				cipherSuiteOk = true;
				break;
			}
			_i++;
		}
		if (!cipherSuiteOk) {
			return false;
		}
		hs.suite = c.tryCipherSuite(hs.sessionState.cipherSuite, c.config.cipherSuites(), hs.sessionState.vers, hs.ellipticOk, hs.ecdsaOk);
		if (hs.suite === ($ptrType(cipherSuite)).nil) {
			return false;
		}
		sessionHasClientCerts = !((hs.sessionState.certificates.$length === 0));
		needClientCerts = (c.config.ClientAuth === 2) || (c.config.ClientAuth === 4);
		if (needClientCerts && !sessionHasClientCerts) {
			return false;
		}
		if (sessionHasClientCerts && (c.config.ClientAuth === 0)) {
			return false;
		}
		return true;
	};
	serverHandshakeState.prototype.checkForResumption = function() { return this.$val.checkForResumption(); };
	serverHandshakeState.Ptr.prototype.doResumeHandshake = function() {
		var hs, c, _tuple, err;
		hs = this;
		c = hs.c;
		hs.hello.cipherSuite = hs.suite.id;
		hs.hello.sessionId = hs.clientHello.sessionId;
		hs.finishedHash.Write(hs.hello.marshal());
		c.writeRecord(22, hs.hello.marshal());
		if (hs.sessionState.certificates.$length > 0) {
			_tuple = hs.processCertsFromClient(hs.sessionState.certificates); err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
		}
		hs.masterSecret = hs.sessionState.masterSecret;
		return $ifaceNil;
	};
	serverHandshakeState.prototype.doResumeHandshake = function() { return this.$val.doResumeHandshake(); };
	serverHandshakeState.Ptr.prototype.doFullHandshake = function() {
		var hs, config, c, certMsg, certStatus, keyAgreement$1, _tuple, skx, err, certReq, helloDone, pub, _tuple$1, msg, ok, _tuple$2, _ref, _tuple$3, _tuple$4, _tuple$5, ckx, _tuple$6, _tuple$7, certVerify, ok$1, key, _ref$1, ecdsaSig, _tuple$8, _tuple$9, digest, _tuple$10, digest$1, hashFunc, _tuple$11, preMasterSecret;
		hs = this;
		config = hs.c.config;
		c = hs.c;
		if (hs.clientHello.ocspStapling && hs.cert.OCSPStaple.$length > 0) {
			hs.hello.ocspStapling = true;
		}
		hs.hello.ticketSupported = hs.clientHello.ticketSupported && !config.SessionTicketsDisabled;
		hs.hello.cipherSuite = hs.suite.id;
		hs.finishedHash.Write(hs.hello.marshal());
		c.writeRecord(22, hs.hello.marshal());
		certMsg = new certificateMsg.Ptr();
		certMsg.certificates = hs.cert.Certificate;
		hs.finishedHash.Write(certMsg.marshal());
		c.writeRecord(22, certMsg.marshal());
		if (hs.hello.ocspStapling) {
			certStatus = new certificateStatusMsg.Ptr();
			certStatus.statusType = 1;
			certStatus.response = hs.cert.OCSPStaple;
			hs.finishedHash.Write(certStatus.marshal());
			c.writeRecord(22, certStatus.marshal());
		}
		keyAgreement$1 = hs.suite.ka(c.vers);
		_tuple = keyAgreement$1.generateServerKeyExchange(config, hs.cert, hs.clientHello, hs.hello); skx = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			c.sendAlert(40);
			return err;
		}
		if (!(skx === ($ptrType(serverKeyExchangeMsg)).nil)) {
			hs.finishedHash.Write(skx.marshal());
			c.writeRecord(22, skx.marshal());
		}
		if (config.ClientAuth >= 1) {
			certReq = new certificateRequestMsg.Ptr();
			certReq.certificateTypes = new ($sliceType($Uint8))([1, 64]);
			if (c.vers >= 771) {
				certReq.hasSignatureAndHash = true;
				certReq.signatureAndHashes = supportedClientCertSignatureAlgorithms;
			}
			if (!(config.ClientCAs === ($ptrType(x509.CertPool)).nil)) {
				certReq.certificateAuthorities = config.ClientCAs.Subjects();
			}
			hs.finishedHash.Write(certReq.marshal());
			c.writeRecord(22, certReq.marshal());
		}
		helloDone = new serverHelloDoneMsg.Ptr();
		hs.finishedHash.Write(helloDone.marshal());
		c.writeRecord(22, helloDone.marshal());
		pub = $ifaceNil;
		_tuple$1 = c.readHandshake(); msg = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		ok = false;
		if (config.ClientAuth >= 1) {
			_tuple$2 = $assertType(msg, ($ptrType(certificateMsg)), true); certMsg = _tuple$2[0]; ok = _tuple$2[1];
			if (!ok) {
				c.sendAlert(10);
				return unexpectedMessageError(certMsg, msg);
			}
			hs.finishedHash.Write(certMsg.marshal());
			if (certMsg.certificates.$length === 0) {
				_ref = config.ClientAuth;
				if (_ref === 2 || _ref === 4) {
					c.sendAlert(42);
					return errors.New("tls: client didn't provide a certificate");
				}
			}
			_tuple$3 = hs.processCertsFromClient(certMsg.certificates); pub = _tuple$3[0]; err = _tuple$3[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			_tuple$4 = c.readHandshake(); msg = _tuple$4[0]; err = _tuple$4[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
		}
		_tuple$5 = $assertType(msg, ($ptrType(clientKeyExchangeMsg)), true); ckx = _tuple$5[0]; ok = _tuple$5[1];
		if (!ok) {
			c.sendAlert(10);
			return unexpectedMessageError(ckx, msg);
		}
		hs.finishedHash.Write(ckx.marshal());
		if (c.peerCertificates.$length > 0) {
			_tuple$6 = c.readHandshake(); msg = _tuple$6[0]; err = _tuple$6[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			_tuple$7 = $assertType(msg, ($ptrType(certificateVerifyMsg)), true); certVerify = _tuple$7[0]; ok$1 = _tuple$7[1];
			if (!ok$1) {
				c.sendAlert(10);
				return unexpectedMessageError(certVerify, msg);
			}
			_ref$1 = pub;
			switch (0) { default: if ($assertType(_ref$1, ($ptrType(ecdsa.PublicKey)), true)[1]) {
				key = _ref$1.$val;
				ecdsaSig = new ecdsaSignature.Ptr();
				_tuple$8 = asn1.Unmarshal(certVerify.signature, ecdsaSig); err = _tuple$8[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					break;
				}
				if (ecdsaSig.R.Sign() <= 0 || ecdsaSig.S.Sign() <= 0) {
					err = errors.New("ECDSA signature contained zero or negative values");
					break;
				}
				_tuple$9 = hs.finishedHash.hashForClientCertificate(3); digest = _tuple$9[0];
				if (!ecdsa.Verify(key, digest, ecdsaSig.R, ecdsaSig.S)) {
					err = errors.New("ECDSA verification failure");
					break;
				}
			} else if ($assertType(_ref$1, ($ptrType(rsa.PublicKey)), true)[1]) {
				key = _ref$1.$val;
				_tuple$10 = hs.finishedHash.hashForClientCertificate(1); digest$1 = _tuple$10[0]; hashFunc = _tuple$10[1];
				err = rsa.VerifyPKCS1v15(key, hashFunc, digest$1, certVerify.signature);
			} }
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				c.sendAlert(42);
				return errors.New("could not validate signature of connection nonces: " + err.Error());
			}
			hs.finishedHash.Write(certVerify.marshal());
		}
		_tuple$11 = keyAgreement$1.processClientKeyExchange(config, hs.cert, ckx, c.vers); preMasterSecret = _tuple$11[0]; err = _tuple$11[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			c.sendAlert(40);
			return err;
		}
		hs.masterSecret = masterFromPreMasterSecret(c.vers, preMasterSecret, hs.clientHello.random, hs.hello.random);
		return $ifaceNil;
	};
	serverHandshakeState.prototype.doFullHandshake = function() { return this.$val.doFullHandshake(); };
	serverHandshakeState.Ptr.prototype.establishKeys = function() {
		var hs, c, _tuple, clientMAC, serverMAC, clientKey, serverKey, clientIV, serverIV, _tmp, _tmp$1, clientCipher, serverCipher, _tmp$2, _tmp$3, clientHash, serverHash;
		hs = this;
		c = hs.c;
		_tuple = keysFromMasterSecret(c.vers, hs.masterSecret, hs.clientHello.random, hs.hello.random, hs.suite.macLen, hs.suite.keyLen, hs.suite.ivLen); clientMAC = _tuple[0]; serverMAC = _tuple[1]; clientKey = _tuple[2]; serverKey = _tuple[3]; clientIV = _tuple[4]; serverIV = _tuple[5];
		_tmp = $ifaceNil; _tmp$1 = $ifaceNil; clientCipher = _tmp; serverCipher = _tmp$1;
		_tmp$2 = $ifaceNil; _tmp$3 = $ifaceNil; clientHash = _tmp$2; serverHash = _tmp$3;
		if (hs.suite.aead === $throwNilPointerError) {
			clientCipher = hs.suite.cipher(clientKey, clientIV, true);
			clientHash = hs.suite.mac(c.vers, clientMAC);
			serverCipher = hs.suite.cipher(serverKey, serverIV, false);
			serverHash = hs.suite.mac(c.vers, serverMAC);
		} else {
			clientCipher = hs.suite.aead(clientKey, clientIV);
			serverCipher = hs.suite.aead(serverKey, serverIV);
		}
		c.in$16.prepareCipherSpec(c.vers, clientCipher, clientHash);
		c.out.prepareCipherSpec(c.vers, serverCipher, serverHash);
		return $ifaceNil;
	};
	serverHandshakeState.prototype.establishKeys = function() { return this.$val.establishKeys(); };
	serverHandshakeState.Ptr.prototype.readFinished = function() {
		var hs, c, err, _tuple, msg, err$1, _tuple$1, nextProto, ok, _tuple$2, msg$1, err$2, _tuple$3, clientFinished, ok$1, verify;
		hs = this;
		c = hs.c;
		c.readRecord(20);
		err = c.in$16.error();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		if (hs.hello.nextProtoNeg) {
			_tuple = c.readHandshake(); msg = _tuple[0]; err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return err$1;
			}
			_tuple$1 = $assertType(msg, ($ptrType(nextProtoMsg)), true); nextProto = _tuple$1[0]; ok = _tuple$1[1];
			if (!ok) {
				c.sendAlert(10);
				return unexpectedMessageError(nextProto, msg);
			}
			hs.finishedHash.Write(nextProto.marshal());
			c.clientProtocol = nextProto.proto;
		}
		_tuple$2 = c.readHandshake(); msg$1 = _tuple$2[0]; err$2 = _tuple$2[1];
		if (!($interfaceIsEqual(err$2, $ifaceNil))) {
			return err$2;
		}
		_tuple$3 = $assertType(msg$1, ($ptrType(finishedMsg)), true); clientFinished = _tuple$3[0]; ok$1 = _tuple$3[1];
		if (!ok$1) {
			c.sendAlert(10);
			return unexpectedMessageError(clientFinished, msg$1);
		}
		verify = hs.finishedHash.clientSum(hs.masterSecret);
		if (!((verify.$length === clientFinished.verifyData.$length)) || !((subtle.ConstantTimeCompare(verify, clientFinished.verifyData) === 1))) {
			c.sendAlert(40);
			return errors.New("tls: client's Finished message is incorrect");
		}
		hs.finishedHash.Write(clientFinished.marshal());
		return $ifaceNil;
	};
	serverHandshakeState.prototype.readFinished = function() { return this.$val.readFinished(); };
	serverHandshakeState.Ptr.prototype.sendSessionTicket = function() {
		var hs, c, m, err, state, _tuple;
		hs = this;
		if (!hs.hello.ticketSupported) {
			return $ifaceNil;
		}
		c = hs.c;
		m = new newSessionTicketMsg.Ptr();
		err = $ifaceNil;
		state = new sessionState.Ptr(c.vers, hs.suite.id, hs.masterSecret, hs.certsFromClient);
		_tuple = c.encryptTicket(state); m.ticket = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		hs.finishedHash.Write(m.marshal());
		c.writeRecord(22, m.marshal());
		return $ifaceNil;
	};
	serverHandshakeState.prototype.sendSessionTicket = function() { return this.$val.sendSessionTicket(); };
	serverHandshakeState.Ptr.prototype.sendFinished = function() {
		var hs, c, finished;
		hs = this;
		c = hs.c;
		c.writeRecord(20, new ($sliceType($Uint8))([1]));
		finished = new finishedMsg.Ptr();
		finished.verifyData = hs.finishedHash.serverSum(hs.masterSecret);
		hs.finishedHash.Write(finished.marshal());
		c.writeRecord(22, finished.marshal());
		c.cipherSuite = hs.suite.id;
		return $ifaceNil;
	};
	serverHandshakeState.prototype.sendFinished = function() { return this.$val.sendFinished(); };
	serverHandshakeState.Ptr.prototype.processCertsFromClient = function(certificates) {
		var hs, c, certs, err, _ref, _i, i, asn1Data, _tuple, opts, _ref$1, _i$1, cert, _tuple$1, chains, err$1, ok, _ref$2, _i$2, ku, pub, key, _ref$3;
		hs = this;
		c = hs.c;
		hs.certsFromClient = certificates;
		certs = ($sliceType(($ptrType(x509.Certificate)))).make(certificates.$length);
		err = $ifaceNil;
		_ref = certificates;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			asn1Data = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_tuple = x509.ParseCertificate(asn1Data); (i < 0 || i >= certs.$length) ? $throwRuntimeError("index out of range") : certs.$array[certs.$offset + i] = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				c.sendAlert(42);
				return [$ifaceNil, errors.New("tls: failed to parse client certificate: " + err.Error())];
			}
			_i++;
		}
		if (c.config.ClientAuth >= 3 && certs.$length > 0) {
			opts = new x509.VerifyOptions.Ptr("", x509.NewCertPool(), c.config.ClientCAs, $clone(c.config.time(), time.Time), new ($sliceType(x509.ExtKeyUsage))([2]));
			_ref$1 = $subslice(certs, 1);
			_i$1 = 0;
			while (_i$1 < _ref$1.$length) {
				cert = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				opts.Intermediates.AddCert(cert);
				_i$1++;
			}
			_tuple$1 = ((0 < 0 || 0 >= certs.$length) ? $throwRuntimeError("index out of range") : certs.$array[certs.$offset + 0]).Verify($clone(opts, x509.VerifyOptions)); chains = _tuple$1[0]; err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				c.sendAlert(42);
				return [$ifaceNil, errors.New("tls: failed to verify client's certificate: " + err$1.Error())];
			}
			ok = false;
			_ref$2 = ((0 < 0 || 0 >= certs.$length) ? $throwRuntimeError("index out of range") : certs.$array[certs.$offset + 0]).ExtKeyUsage;
			_i$2 = 0;
			while (_i$2 < _ref$2.$length) {
				ku = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
				if (ku === 2) {
					ok = true;
					break;
				}
				_i$2++;
			}
			if (!ok) {
				c.sendAlert(40);
				return [$ifaceNil, errors.New("tls: client's certificate's extended key usage doesn't permit it to be used for client authentication")];
			}
			c.verifiedChains = chains;
		}
		if (certs.$length > 0) {
			pub = $ifaceNil;
			_ref$3 = ((0 < 0 || 0 >= certs.$length) ? $throwRuntimeError("index out of range") : certs.$array[certs.$offset + 0]).PublicKey;
			if ($assertType(_ref$3, ($ptrType(ecdsa.PublicKey)), true)[1] || $assertType(_ref$3, ($ptrType(rsa.PublicKey)), true)[1]) {
				key = _ref$3;
				pub = key;
			} else {
				key = _ref$3;
				c.sendAlert(43);
				return [$ifaceNil, fmt.Errorf("tls: client's certificate contains an unsupported public key of type %T", new ($sliceType($emptyInterface))([((0 < 0 || 0 >= certs.$length) ? $throwRuntimeError("index out of range") : certs.$array[certs.$offset + 0]).PublicKey]))];
			}
			c.peerCertificates = certs;
			return [pub, $ifaceNil];
		}
		return [$ifaceNil, $ifaceNil];
	};
	serverHandshakeState.prototype.processCertsFromClient = function(certificates) { return this.$val.processCertsFromClient(certificates); };
	Conn.Ptr.prototype.tryCipherSuite = function(id, supportedCipherSuites, version, ellipticOk, ecdsaOk) {
		var c, _ref, _i, supported, candidate, _ref$1, _i$1, s;
		c = this;
		_ref = supportedCipherSuites;
		_i = 0;
		while (_i < _ref.$length) {
			supported = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (id === supported) {
				candidate = ($ptrType(cipherSuite)).nil;
				_ref$1 = cipherSuites;
				_i$1 = 0;
				while (_i$1 < _ref$1.$length) {
					s = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
					if (s.id === id) {
						candidate = s;
						break;
					}
					_i$1++;
				}
				if (candidate === ($ptrType(cipherSuite)).nil) {
					_i++;
					continue;
				}
				if ((!(((candidate.flags & 1) === 0))) && !ellipticOk) {
					_i++;
					continue;
				}
				if (!((!(((candidate.flags & 2) === 0))) === ecdsaOk)) {
					_i++;
					continue;
				}
				if (version < 771 && !(((candidate.flags & 4) === 0))) {
					_i++;
					continue;
				}
				return candidate;
			}
			_i++;
		}
		return ($ptrType(cipherSuite)).nil;
	};
	Conn.prototype.tryCipherSuite = function(id, supportedCipherSuites, version, ellipticOk, ecdsaOk) { return this.$val.tryCipherSuite(id, supportedCipherSuites, version, ellipticOk, ecdsaOk); };
	rsaKeyAgreement.Ptr.prototype.generateServerKeyExchange = function(config, cert, clientHello, hello) {
		var ka;
		ka = new rsaKeyAgreement.Ptr(); $copy(ka, this, rsaKeyAgreement);
		return [($ptrType(serverKeyExchangeMsg)).nil, $ifaceNil];
	};
	rsaKeyAgreement.prototype.generateServerKeyExchange = function(config, cert, clientHello, hello) { return this.$val.generateServerKeyExchange(config, cert, clientHello, hello); };
	rsaKeyAgreement.Ptr.prototype.processClientKeyExchange = function(config, cert, ckx, version) {
		var ka, preMasterSecret, _tuple, err, ciphertext, x, x$1, ciphertextLen;
		ka = new rsaKeyAgreement.Ptr(); $copy(ka, this, rsaKeyAgreement);
		preMasterSecret = ($sliceType($Uint8)).make(48);
		_tuple = io.ReadFull(config.rand(), $subslice(preMasterSecret, 2)); err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($sliceType($Uint8)).nil, err];
		}
		if (ckx.ciphertext.$length < 2) {
			return [($sliceType($Uint8)).nil, errClientKeyExchange];
		}
		ciphertext = ckx.ciphertext;
		if (!((version === 768))) {
			ciphertextLen = (((x = ckx.ciphertext, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])) >> 0) << 8 >> 0) | ((x$1 = ckx.ciphertext, ((1 < 0 || 1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 1])) >> 0);
			if (!((ciphertextLen === (ckx.ciphertext.$length - 2 >> 0)))) {
				return [($sliceType($Uint8)).nil, errClientKeyExchange];
			}
			ciphertext = $subslice(ckx.ciphertext, 2);
		}
		err = rsa.DecryptPKCS1v15SessionKey(config.rand(), $assertType(cert.PrivateKey, ($ptrType(rsa.PrivateKey))), ciphertext, preMasterSecret);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($sliceType($Uint8)).nil, err];
		}
		return [preMasterSecret, $ifaceNil];
	};
	rsaKeyAgreement.prototype.processClientKeyExchange = function(config, cert, ckx, version) { return this.$val.processClientKeyExchange(config, cert, ckx, version); };
	rsaKeyAgreement.Ptr.prototype.processServerKeyExchange = function(config, clientHello, serverHello, cert, skx) {
		var ka;
		ka = new rsaKeyAgreement.Ptr(); $copy(ka, this, rsaKeyAgreement);
		return errors.New("tls: unexpected ServerKeyExchange");
	};
	rsaKeyAgreement.prototype.processServerKeyExchange = function(config, clientHello, serverHello, cert, skx) { return this.$val.processServerKeyExchange(config, clientHello, serverHello, cert, skx); };
	rsaKeyAgreement.Ptr.prototype.generateClientKeyExchange = function(config, clientHello, cert) {
		var ka, preMasterSecret, _tuple, err, _tuple$1, encrypted, ckx, x, x$1;
		ka = new rsaKeyAgreement.Ptr(); $copy(ka, this, rsaKeyAgreement);
		preMasterSecret = ($sliceType($Uint8)).make(48);
		(0 < 0 || 0 >= preMasterSecret.$length) ? $throwRuntimeError("index out of range") : preMasterSecret.$array[preMasterSecret.$offset + 0] = ((clientHello.vers >>> 8 << 16 >>> 16) << 24 >>> 24);
		(1 < 0 || 1 >= preMasterSecret.$length) ? $throwRuntimeError("index out of range") : preMasterSecret.$array[preMasterSecret.$offset + 1] = (clientHello.vers << 24 >>> 24);
		_tuple = io.ReadFull(config.rand(), $subslice(preMasterSecret, 2)); err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($sliceType($Uint8)).nil, ($ptrType(clientKeyExchangeMsg)).nil, err];
		}
		_tuple$1 = rsa.EncryptPKCS1v15(config.rand(), $assertType(cert.PublicKey, ($ptrType(rsa.PublicKey))), preMasterSecret); encrypted = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($sliceType($Uint8)).nil, ($ptrType(clientKeyExchangeMsg)).nil, err];
		}
		ckx = new clientKeyExchangeMsg.Ptr();
		ckx.ciphertext = ($sliceType($Uint8)).make((encrypted.$length + 2 >> 0));
		(x = ckx.ciphertext, (0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0] = ((encrypted.$length >> 8 >> 0) << 24 >>> 24));
		(x$1 = ckx.ciphertext, (1 < 0 || 1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 1] = (encrypted.$length << 24 >>> 24));
		$copySlice($subslice(ckx.ciphertext, 2), encrypted);
		return [preMasterSecret, ckx, $ifaceNil];
	};
	rsaKeyAgreement.prototype.generateClientKeyExchange = function(config, clientHello, cert) { return this.$val.generateClientKeyExchange(config, clientHello, cert); };
	sha1Hash = function(slices) {
		var hsha1, _ref, _i, slice;
		hsha1 = sha1.New();
		_ref = slices;
		_i = 0;
		while (_i < _ref.$length) {
			slice = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			hsha1.Write(slice);
			_i++;
		}
		return hsha1.Sum(($sliceType($Uint8)).nil);
	};
	md5SHA1Hash = function(slices) {
		var md5sha1, hmd5, _ref, _i, slice;
		md5sha1 = ($sliceType($Uint8)).make(36);
		hmd5 = md5.New();
		_ref = slices;
		_i = 0;
		while (_i < _ref.$length) {
			slice = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			hmd5.Write(slice);
			_i++;
		}
		$copySlice(md5sha1, hmd5.Sum(($sliceType($Uint8)).nil));
		$copySlice($subslice(md5sha1, 16), sha1Hash(slices));
		return md5sha1;
	};
	sha256Hash = function(slices) {
		var h, _ref, _i, slice;
		h = sha256.New();
		_ref = slices;
		_i = 0;
		while (_i < _ref.$length) {
			slice = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			h.Write(slice);
			_i++;
		}
		return h.Sum(($sliceType($Uint8)).nil);
	};
	hashForServerKeyExchange = function(sigType, hashFunc, version, slices) {
		var _ref;
		if (version >= 771) {
			_ref = hashFunc;
			if (_ref === 4) {
				return [sha256Hash(slices), 5, $ifaceNil];
			} else if (_ref === 2) {
				return [sha1Hash(slices), 3, $ifaceNil];
			} else {
				return [($sliceType($Uint8)).nil, 0, errors.New("tls: unknown hash function used by peer")];
			}
		}
		if (sigType === 3) {
			return [sha1Hash(slices), 3, $ifaceNil];
		}
		return [md5SHA1Hash(slices), 8, $ifaceNil];
	};
	pickTLS12HashForSignature = function(sigType, clientSignatureAndHashes) {
		var _ref, _i, sigAndHash, _ref$1;
		if (clientSignatureAndHashes.$length === 0) {
			return [2, $ifaceNil];
		}
		_ref = clientSignatureAndHashes;
		_i = 0;
		while (_i < _ref.$length) {
			sigAndHash = new signatureAndHash.Ptr(); $copy(sigAndHash, ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), signatureAndHash);
			if (!((sigAndHash.signature === sigType))) {
				_i++;
				continue;
			}
			_ref$1 = sigAndHash.hash;
			if (_ref$1 === 2 || _ref$1 === 4) {
				return [sigAndHash.hash, $ifaceNil];
			}
			_i++;
		}
		return [0, errors.New("tls: client doesn't support any common hash functions")];
	};
	curveForCurveID = function(id) {
		var _ref;
		_ref = id;
		if (_ref === 23) {
			return [elliptic.P256(), true];
		} else if (_ref === 24) {
			return [elliptic.P384(), true];
		} else if (_ref === 25) {
			return [elliptic.P521(), true];
		} else {
			return [$ifaceNil, false];
		}
	};
	ecdheKeyAgreement.Ptr.prototype.generateServerKeyExchange = function(config, cert, clientHello, hello) {
		var ka, curveid, preferredCurves, _ref, _i, candidate, _ref$1, _i$1, c, ok, _tuple, _tmp, _tmp$1, x, y, err, _tuple$1, ecdhePublic, serverECDHParams, tls12HashId, _tuple$2, _tuple$3, digest, hashFunc, sig, _ref$2, _tuple$4, privKey, ok$1, _tuple$5, r, s, err$1, _tuple$6, x$1, _tuple$7, privKey$1, ok$2, _tuple$8, skx, sigAndHashLen, k;
		ka = this;
		curveid = 0;
		preferredCurves = config.curvePreferences();
		_ref = preferredCurves;
		_i = 0;
		NextCandidate:
		while (_i < _ref.$length) {
			candidate = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_ref$1 = clientHello.supportedCurves;
			_i$1 = 0;
			while (_i$1 < _ref$1.$length) {
				c = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				if (candidate === c) {
					curveid = c;
					break NextCandidate;
				}
				_i$1++;
			}
			_i++;
		}
		if (curveid === 0) {
			return [($ptrType(serverKeyExchangeMsg)).nil, errors.New("tls: no supported elliptic curves offered")];
		}
		ok = false;
		_tuple = curveForCurveID(curveid); ka.curve = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			return [($ptrType(serverKeyExchangeMsg)).nil, errors.New("tls: preferredCurves includes unsupported curve")];
		}
		_tmp = ($ptrType(big.Int)).nil; _tmp$1 = ($ptrType(big.Int)).nil; x = _tmp; y = _tmp$1;
		err = $ifaceNil;
		_tuple$1 = elliptic.GenerateKey(ka.curve, config.rand()); ka.privateKey = _tuple$1[0]; x = _tuple$1[1]; y = _tuple$1[2]; err = _tuple$1[3];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($ptrType(serverKeyExchangeMsg)).nil, err];
		}
		ecdhePublic = elliptic.Marshal(ka.curve, x, y);
		serverECDHParams = ($sliceType($Uint8)).make((4 + ecdhePublic.$length >> 0));
		(0 < 0 || 0 >= serverECDHParams.$length) ? $throwRuntimeError("index out of range") : serverECDHParams.$array[serverECDHParams.$offset + 0] = 3;
		(1 < 0 || 1 >= serverECDHParams.$length) ? $throwRuntimeError("index out of range") : serverECDHParams.$array[serverECDHParams.$offset + 1] = ((curveid >>> 8 << 16 >>> 16) << 24 >>> 24);
		(2 < 0 || 2 >= serverECDHParams.$length) ? $throwRuntimeError("index out of range") : serverECDHParams.$array[serverECDHParams.$offset + 2] = (curveid << 24 >>> 24);
		(3 < 0 || 3 >= serverECDHParams.$length) ? $throwRuntimeError("index out of range") : serverECDHParams.$array[serverECDHParams.$offset + 3] = (ecdhePublic.$length << 24 >>> 24);
		$copySlice($subslice(serverECDHParams, 4), ecdhePublic);
		tls12HashId = 0;
		if (ka.version >= 771) {
			_tuple$2 = pickTLS12HashForSignature(ka.sigType, clientHello.signatureAndHashes); tls12HashId = _tuple$2[0]; err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [($ptrType(serverKeyExchangeMsg)).nil, err];
			}
		}
		_tuple$3 = hashForServerKeyExchange(ka.sigType, tls12HashId, ka.version, new ($sliceType(($sliceType($Uint8))))([clientHello.random, hello.random, serverECDHParams])); digest = _tuple$3[0]; hashFunc = _tuple$3[1]; err = _tuple$3[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($ptrType(serverKeyExchangeMsg)).nil, err];
		}
		sig = ($sliceType($Uint8)).nil;
		_ref$2 = ka.sigType;
		if (_ref$2 === 3) {
			_tuple$4 = $assertType(cert.PrivateKey, ($ptrType(ecdsa.PrivateKey)), true); privKey = _tuple$4[0]; ok$1 = _tuple$4[1];
			if (!ok$1) {
				return [($ptrType(serverKeyExchangeMsg)).nil, errors.New("ECDHE ECDSA requires an ECDSA server private key")];
			}
			_tuple$5 = ecdsa.Sign(config.rand(), privKey, digest); r = _tuple$5[0]; s = _tuple$5[1]; err$1 = _tuple$5[2];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return [($ptrType(serverKeyExchangeMsg)).nil, errors.New("failed to sign ECDHE parameters: " + err$1.Error())];
			}
			_tuple$6 = asn1.Marshal((x$1 = new ecdsaSignature.Ptr(r, s), new x$1.constructor.Struct(x$1))); sig = _tuple$6[0]; err$1 = _tuple$6[1];
		} else if (_ref$2 === 1) {
			_tuple$7 = $assertType(cert.PrivateKey, ($ptrType(rsa.PrivateKey)), true); privKey$1 = _tuple$7[0]; ok$2 = _tuple$7[1];
			if (!ok$2) {
				return [($ptrType(serverKeyExchangeMsg)).nil, errors.New("ECDHE RSA requires a RSA server private key")];
			}
			_tuple$8 = rsa.SignPKCS1v15(config.rand(), privKey$1, hashFunc, digest); sig = _tuple$8[0]; err = _tuple$8[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [($ptrType(serverKeyExchangeMsg)).nil, errors.New("failed to sign ECDHE parameters: " + err.Error())];
			}
		} else {
			return [($ptrType(serverKeyExchangeMsg)).nil, errors.New("unknown ECDHE signature algorithm")];
		}
		skx = new serverKeyExchangeMsg.Ptr();
		sigAndHashLen = 0;
		if (ka.version >= 771) {
			sigAndHashLen = 2;
		}
		skx.key = ($sliceType($Uint8)).make((((serverECDHParams.$length + sigAndHashLen >> 0) + 2 >> 0) + sig.$length >> 0));
		$copySlice(skx.key, serverECDHParams);
		k = $subslice(skx.key, serverECDHParams.$length);
		if (ka.version >= 771) {
			(0 < 0 || 0 >= k.$length) ? $throwRuntimeError("index out of range") : k.$array[k.$offset + 0] = tls12HashId;
			(1 < 0 || 1 >= k.$length) ? $throwRuntimeError("index out of range") : k.$array[k.$offset + 1] = ka.sigType;
			k = $subslice(k, 2);
		}
		(0 < 0 || 0 >= k.$length) ? $throwRuntimeError("index out of range") : k.$array[k.$offset + 0] = ((sig.$length >> 8 >> 0) << 24 >>> 24);
		(1 < 0 || 1 >= k.$length) ? $throwRuntimeError("index out of range") : k.$array[k.$offset + 1] = (sig.$length << 24 >>> 24);
		$copySlice($subslice(k, 2), sig);
		return [skx, $ifaceNil];
	};
	ecdheKeyAgreement.prototype.generateServerKeyExchange = function(config, cert, clientHello, hello) { return this.$val.generateServerKeyExchange(config, cert, clientHello, hello); };
	ecdheKeyAgreement.Ptr.prototype.processClientKeyExchange = function(config, cert, ckx, version) {
		var ka, x, _tuple, x$1, y, _tuple$1, preMasterSecret, xBytes;
		ka = this;
		if ((ckx.ciphertext.$length === 0) || !((((x = ckx.ciphertext, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])) >> 0) === (ckx.ciphertext.$length - 1 >> 0)))) {
			return [($sliceType($Uint8)).nil, errClientKeyExchange];
		}
		_tuple = elliptic.Unmarshal(ka.curve, $subslice(ckx.ciphertext, 1)); x$1 = _tuple[0]; y = _tuple[1];
		if (x$1 === ($ptrType(big.Int)).nil) {
			return [($sliceType($Uint8)).nil, errClientKeyExchange];
		}
		_tuple$1 = ka.curve.ScalarMult(x$1, y, ka.privateKey); x$1 = _tuple$1[0];
		preMasterSecret = ($sliceType($Uint8)).make((((ka.curve.Params().BitSize + 7 >> 0)) >> 3 >> 0));
		xBytes = x$1.Bytes();
		$copySlice($subslice(preMasterSecret, (preMasterSecret.$length - xBytes.$length >> 0)), xBytes);
		return [preMasterSecret, $ifaceNil];
	};
	ecdheKeyAgreement.prototype.processClientKeyExchange = function(config, cert, ckx, version) { return this.$val.processClientKeyExchange(config, cert, ckx, version); };
	ecdheKeyAgreement.Ptr.prototype.processServerKeyExchange = function(config, clientHello, serverHello, cert, skx) {
		var ka, x, x$1, x$2, curveid, ok, _tuple, x$3, publicLen, _tuple$1, serverECDHParams, sig, tls12HashId, sigAndHash, _tmp, _tmp$1, sigLen, _tuple$2, digest, hashFunc, err, _ref, _tuple$3, pubKey, ok$1, ecdsaSig, _tuple$4, err$1, _tuple$5, pubKey$1, ok$2, err$2;
		ka = this;
		if (skx.key.$length < 4) {
			return errServerKeyExchange;
		}
		if (!(((x = skx.key, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])) === 3))) {
			return errors.New("tls: server selected unsupported curve");
		}
		curveid = ((((x$1 = skx.key, ((1 < 0 || 1 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 1])) << 16 >>> 16) << 8 << 16 >>> 16) | ((x$2 = skx.key, ((2 < 0 || 2 >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + 2])) << 16 >>> 16)) >>> 0;
		ok = false;
		_tuple = curveForCurveID(curveid); ka.curve = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			return errors.New("tls: server selected unsupported curve");
		}
		publicLen = ((x$3 = skx.key, ((3 < 0 || 3 >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + 3])) >> 0);
		if ((publicLen + 4 >> 0) > skx.key.$length) {
			return errServerKeyExchange;
		}
		_tuple$1 = elliptic.Unmarshal(ka.curve, $subslice(skx.key, 4, (4 + publicLen >> 0))); ka.x = _tuple$1[0]; ka.y = _tuple$1[1];
		if (ka.x === ($ptrType(big.Int)).nil) {
			return errServerKeyExchange;
		}
		serverECDHParams = $subslice(skx.key, 0, (4 + publicLen >> 0));
		sig = $subslice(skx.key, (4 + publicLen >> 0));
		if (sig.$length < 2) {
			return errServerKeyExchange;
		}
		tls12HashId = 0;
		if (ka.version >= 771) {
			sigAndHash = ($sliceType($Uint8)).nil;
			_tmp = $subslice(sig, 0, 2); _tmp$1 = $subslice(sig, 2); sigAndHash = _tmp; sig = _tmp$1;
			if (!((((1 < 0 || 1 >= sigAndHash.$length) ? $throwRuntimeError("index out of range") : sigAndHash.$array[sigAndHash.$offset + 1]) === ka.sigType))) {
				return errServerKeyExchange;
			}
			tls12HashId = ((0 < 0 || 0 >= sigAndHash.$length) ? $throwRuntimeError("index out of range") : sigAndHash.$array[sigAndHash.$offset + 0]);
			if (sig.$length < 2) {
				return errServerKeyExchange;
			}
		}
		sigLen = ((((0 < 0 || 0 >= sig.$length) ? $throwRuntimeError("index out of range") : sig.$array[sig.$offset + 0]) >> 0) << 8 >> 0) | (((1 < 0 || 1 >= sig.$length) ? $throwRuntimeError("index out of range") : sig.$array[sig.$offset + 1]) >> 0);
		if (!(((sigLen + 2 >> 0) === sig.$length))) {
			return errServerKeyExchange;
		}
		sig = $subslice(sig, 2);
		_tuple$2 = hashForServerKeyExchange(ka.sigType, tls12HashId, ka.version, new ($sliceType(($sliceType($Uint8))))([clientHello.random, serverHello.random, serverECDHParams])); digest = _tuple$2[0]; hashFunc = _tuple$2[1]; err = _tuple$2[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_ref = ka.sigType;
		if (_ref === 3) {
			_tuple$3 = $assertType(cert.PublicKey, ($ptrType(ecdsa.PublicKey)), true); pubKey = _tuple$3[0]; ok$1 = _tuple$3[1];
			if (!ok$1) {
				return errors.New("ECDHE ECDSA requires a ECDSA server public key");
			}
			ecdsaSig = new ecdsaSignature.Ptr();
			_tuple$4 = asn1.Unmarshal(sig, ecdsaSig); err$1 = _tuple$4[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return err$1;
			}
			if (ecdsaSig.R.Sign() <= 0 || ecdsaSig.S.Sign() <= 0) {
				return errors.New("ECDSA signature contained zero or negative values");
			}
			if (!ecdsa.Verify(pubKey, digest, ecdsaSig.R, ecdsaSig.S)) {
				return errors.New("ECDSA verification failure");
			}
		} else if (_ref === 1) {
			_tuple$5 = $assertType(cert.PublicKey, ($ptrType(rsa.PublicKey)), true); pubKey$1 = _tuple$5[0]; ok$2 = _tuple$5[1];
			if (!ok$2) {
				return errors.New("ECDHE RSA requires a RSA server public key");
			}
			err$2 = rsa.VerifyPKCS1v15(pubKey$1, hashFunc, digest, sig);
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				return err$2;
			}
		} else {
			return errors.New("unknown ECDHE signature algorithm");
		}
		return $ifaceNil;
	};
	ecdheKeyAgreement.prototype.processServerKeyExchange = function(config, clientHello, serverHello, cert, skx) { return this.$val.processServerKeyExchange(config, clientHello, serverHello, cert, skx); };
	ecdheKeyAgreement.Ptr.prototype.generateClientKeyExchange = function(config, clientHello, cert) {
		var ka, _tuple, priv, mx, my, err, _tuple$1, x, preMasterSecret, xBytes, serialized, ckx, x$1;
		ka = this;
		if ($interfaceIsEqual(ka.curve, $ifaceNil)) {
			return [($sliceType($Uint8)).nil, ($ptrType(clientKeyExchangeMsg)).nil, errors.New("missing ServerKeyExchange message")];
		}
		_tuple = elliptic.GenerateKey(ka.curve, config.rand()); priv = _tuple[0]; mx = _tuple[1]; my = _tuple[2]; err = _tuple[3];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($sliceType($Uint8)).nil, ($ptrType(clientKeyExchangeMsg)).nil, err];
		}
		_tuple$1 = ka.curve.ScalarMult(ka.x, ka.y, priv); x = _tuple$1[0];
		preMasterSecret = ($sliceType($Uint8)).make((((ka.curve.Params().BitSize + 7 >> 0)) >> 3 >> 0));
		xBytes = x.Bytes();
		$copySlice($subslice(preMasterSecret, (preMasterSecret.$length - xBytes.$length >> 0)), xBytes);
		serialized = elliptic.Marshal(ka.curve, mx, my);
		ckx = new clientKeyExchangeMsg.Ptr();
		ckx.ciphertext = ($sliceType($Uint8)).make((1 + serialized.$length >> 0));
		(x$1 = ckx.ciphertext, (0 < 0 || 0 >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + 0] = (serialized.$length << 24 >>> 24));
		$copySlice($subslice(ckx.ciphertext, 1), serialized);
		return [preMasterSecret, ckx, $ifaceNil];
	};
	ecdheKeyAgreement.prototype.generateClientKeyExchange = function(config, clientHello, cert) { return this.$val.generateClientKeyExchange(config, clientHello, cert); };
	splitPreMasterSecret = function(secret) {
		var s1 = ($sliceType($Uint8)).nil, s2 = ($sliceType($Uint8)).nil, _q, _q$1;
		s1 = $subslice(secret, 0, (_q = ((secret.$length + 1 >> 0)) / 2, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")));
		s2 = $subslice(secret, (_q$1 = secret.$length / 2, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")));
		return [s1, s2];
	};
	pHash = function(result, secret, seed, hash$1) {
		var h, a, j, b, todo;
		h = hmac.New(hash$1, secret);
		h.Write(seed);
		a = h.Sum(($sliceType($Uint8)).nil);
		j = 0;
		while (j < result.$length) {
			h.Reset();
			h.Write(a);
			h.Write(seed);
			b = h.Sum(($sliceType($Uint8)).nil);
			todo = b.$length;
			if ((j + todo >> 0) > result.$length) {
				todo = result.$length - j >> 0;
			}
			$copySlice($subslice(result, j, (j + todo >> 0)), b);
			j = j + (todo) >> 0;
			h.Reset();
			h.Write(a);
			a = h.Sum(($sliceType($Uint8)).nil);
		}
	};
	prf10 = function(result, secret, label, seed) {
		var hashSHA1, hashMD5, labelAndSeed, _tuple, s1, s2, result2, _ref, _i, i, b, _lhs, _index;
		hashSHA1 = sha1.New;
		hashMD5 = md5.New;
		labelAndSeed = ($sliceType($Uint8)).make((label.$length + seed.$length >> 0));
		$copySlice(labelAndSeed, label);
		$copySlice($subslice(labelAndSeed, label.$length), seed);
		_tuple = splitPreMasterSecret(secret); s1 = _tuple[0]; s2 = _tuple[1];
		pHash(result, s1, labelAndSeed, hashMD5);
		result2 = ($sliceType($Uint8)).make(result.$length);
		pHash(result2, s2, labelAndSeed, hashSHA1);
		_ref = result2;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_lhs = result; _index = i; (_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index] = (((_index < 0 || _index >= _lhs.$length) ? $throwRuntimeError("index out of range") : _lhs.$array[_lhs.$offset + _index]) ^ (b)) << 24 >>> 24;
			_i++;
		}
	};
	prf12 = function(result, secret, label, seed) {
		var labelAndSeed;
		labelAndSeed = ($sliceType($Uint8)).make((label.$length + seed.$length >> 0));
		$copySlice(labelAndSeed, label);
		$copySlice($subslice(labelAndSeed, label.$length), seed);
		pHash(result, secret, labelAndSeed, sha256.New);
	};
	prf30 = function(result, secret, label, seed) {
		var hashSHA1, hashMD5, done, i, b, j, digest;
		hashSHA1 = sha1.New();
		hashMD5 = md5.New();
		done = 0;
		i = 0;
		b = ($arrayType($Uint8, 11)).zero(); $copy(b, ($arrayType($Uint8, 11)).zero(), ($arrayType($Uint8, 11)));
		while (done < result.$length) {
			j = 0;
			while (j <= i) {
				(j < 0 || j >= b.length) ? $throwRuntimeError("index out of range") : b[j] = 65 + (i << 24 >>> 24) << 24 >>> 24;
				j = j + (1) >> 0;
			}
			hashSHA1.Reset();
			hashSHA1.Write($subslice(new ($sliceType($Uint8))(b), 0, (i + 1 >> 0)));
			hashSHA1.Write(secret);
			hashSHA1.Write(seed);
			digest = hashSHA1.Sum(($sliceType($Uint8)).nil);
			hashMD5.Reset();
			hashMD5.Write(secret);
			hashMD5.Write(digest);
			done = done + ($copySlice($subslice(result, done), hashMD5.Sum(($sliceType($Uint8)).nil))) >> 0;
			i = i + (1) >> 0;
		}
	};
	prfForVersion = function(version) {
		var _ref;
		_ref = version;
		if (_ref === 768) {
			return prf30;
		} else if (_ref === 769 || _ref === 770) {
			return prf10;
		} else if (_ref === 771) {
			return prf12;
		} else {
			$panic(new $String("unknown version"));
		}
	};
	masterFromPreMasterSecret = function(version, preMasterSecret, clientRandom, serverRandom) {
		var seed, masterSecret;
		seed = ($arrayType($Uint8, 64)).zero(); $copy(seed, ($arrayType($Uint8, 64)).zero(), ($arrayType($Uint8, 64)));
		$copySlice($subslice(new ($sliceType($Uint8))(seed), 0, clientRandom.$length), clientRandom);
		$copySlice($subslice(new ($sliceType($Uint8))(seed), clientRandom.$length), serverRandom);
		masterSecret = ($sliceType($Uint8)).make(48);
		prfForVersion(version)(masterSecret, preMasterSecret, masterSecretLabel, $subslice(new ($sliceType($Uint8))(seed), 0));
		return masterSecret;
	};
	keysFromMasterSecret = function(version, masterSecret, clientRandom, serverRandom, macLen, keyLen, ivLen) {
		var clientMAC = ($sliceType($Uint8)).nil, serverMAC = ($sliceType($Uint8)).nil, clientKey = ($sliceType($Uint8)).nil, serverKey = ($sliceType($Uint8)).nil, clientIV = ($sliceType($Uint8)).nil, serverIV = ($sliceType($Uint8)).nil, seed, n, keyMaterial;
		seed = ($arrayType($Uint8, 64)).zero(); $copy(seed, ($arrayType($Uint8, 64)).zero(), ($arrayType($Uint8, 64)));
		$copySlice($subslice(new ($sliceType($Uint8))(seed), 0, clientRandom.$length), serverRandom);
		$copySlice($subslice(new ($sliceType($Uint8))(seed), serverRandom.$length), clientRandom);
		n = (((((2 >>> 16 << 16) * macLen >> 0) + (2 << 16 >>> 16) * macLen) >> 0) + ((((2 >>> 16 << 16) * keyLen >> 0) + (2 << 16 >>> 16) * keyLen) >> 0) >> 0) + ((((2 >>> 16 << 16) * ivLen >> 0) + (2 << 16 >>> 16) * ivLen) >> 0) >> 0;
		keyMaterial = ($sliceType($Uint8)).make(n);
		prfForVersion(version)(keyMaterial, masterSecret, keyExpansionLabel, $subslice(new ($sliceType($Uint8))(seed), 0));
		clientMAC = $subslice(keyMaterial, 0, macLen);
		keyMaterial = $subslice(keyMaterial, macLen);
		serverMAC = $subslice(keyMaterial, 0, macLen);
		keyMaterial = $subslice(keyMaterial, macLen);
		clientKey = $subslice(keyMaterial, 0, keyLen);
		keyMaterial = $subslice(keyMaterial, keyLen);
		serverKey = $subslice(keyMaterial, 0, keyLen);
		keyMaterial = $subslice(keyMaterial, keyLen);
		clientIV = $subslice(keyMaterial, 0, ivLen);
		keyMaterial = $subslice(keyMaterial, ivLen);
		serverIV = $subslice(keyMaterial, 0, ivLen);
		return [clientMAC, serverMAC, clientKey, serverKey, clientIV, serverIV];
	};
	newFinishedHash = function(version) {
		if (version >= 771) {
			return new finishedHash.Ptr(sha256.New(), sha256.New(), $ifaceNil, $ifaceNil, version);
		}
		return new finishedHash.Ptr(sha1.New(), sha1.New(), md5.New(), md5.New(), version);
	};
	finishedHash.Ptr.prototype.Write = function(msg) {
		var n = 0, err = $ifaceNil, h, _tmp, _tmp$1;
		h = new finishedHash.Ptr(); $copy(h, this, finishedHash);
		h.client.Write(msg);
		h.server.Write(msg);
		if (h.version < 771) {
			h.clientMD5.Write(msg);
			h.serverMD5.Write(msg);
		}
		_tmp = msg.$length; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	finishedHash.prototype.Write = function(msg) { return this.$val.Write(msg); };
	finishedSum30 = function(md5$1, sha1$1, masterSecret, magic) {
		var md5Digest, sha1Digest, ret;
		md5$1.Write(new ($sliceType($Uint8))(magic));
		md5$1.Write(masterSecret);
		md5$1.Write(new ($sliceType($Uint8))(ssl30Pad1));
		md5Digest = md5$1.Sum(($sliceType($Uint8)).nil);
		md5$1.Reset();
		md5$1.Write(masterSecret);
		md5$1.Write(new ($sliceType($Uint8))(ssl30Pad2));
		md5$1.Write(md5Digest);
		md5Digest = md5$1.Sum(($sliceType($Uint8)).nil);
		sha1$1.Write(new ($sliceType($Uint8))(magic));
		sha1$1.Write(masterSecret);
		sha1$1.Write($subslice(new ($sliceType($Uint8))(ssl30Pad1), 0, 40));
		sha1Digest = sha1$1.Sum(($sliceType($Uint8)).nil);
		sha1$1.Reset();
		sha1$1.Write(masterSecret);
		sha1$1.Write($subslice(new ($sliceType($Uint8))(ssl30Pad2), 0, 40));
		sha1$1.Write(sha1Digest);
		sha1Digest = sha1$1.Sum(($sliceType($Uint8)).nil);
		ret = ($sliceType($Uint8)).make((md5Digest.$length + sha1Digest.$length >> 0));
		$copySlice(ret, md5Digest);
		$copySlice($subslice(ret, md5Digest.$length), sha1Digest);
		return ret;
	};
	finishedHash.Ptr.prototype.clientSum = function(masterSecret) {
		var h, out, seed, seed$1;
		h = new finishedHash.Ptr(); $copy(h, this, finishedHash);
		if (h.version === 768) {
			return finishedSum30(h.clientMD5, h.client, masterSecret, $clone(ssl3ClientFinishedMagic, ($arrayType($Uint8, 4))));
		}
		out = ($sliceType($Uint8)).make(12);
		if (h.version >= 771) {
			seed = h.client.Sum(($sliceType($Uint8)).nil);
			prf12(out, masterSecret, clientFinishedLabel, seed);
		} else {
			seed$1 = ($sliceType($Uint8)).make(0, 36);
			seed$1 = h.clientMD5.Sum(seed$1);
			seed$1 = h.client.Sum(seed$1);
			prf10(out, masterSecret, clientFinishedLabel, seed$1);
		}
		return out;
	};
	finishedHash.prototype.clientSum = function(masterSecret) { return this.$val.clientSum(masterSecret); };
	finishedHash.Ptr.prototype.serverSum = function(masterSecret) {
		var h, out, seed, seed$1;
		h = new finishedHash.Ptr(); $copy(h, this, finishedHash);
		if (h.version === 768) {
			return finishedSum30(h.serverMD5, h.server, masterSecret, $clone(ssl3ServerFinishedMagic, ($arrayType($Uint8, 4))));
		}
		out = ($sliceType($Uint8)).make(12);
		if (h.version >= 771) {
			seed = h.server.Sum(($sliceType($Uint8)).nil);
			prf12(out, masterSecret, serverFinishedLabel, seed);
		} else {
			seed$1 = ($sliceType($Uint8)).make(0, 36);
			seed$1 = h.serverMD5.Sum(seed$1);
			seed$1 = h.server.Sum(seed$1);
			prf10(out, masterSecret, serverFinishedLabel, seed$1);
		}
		return out;
	};
	finishedHash.prototype.serverSum = function(masterSecret) { return this.$val.serverSum(masterSecret); };
	finishedHash.Ptr.prototype.hashForClientCertificate = function(sigType) {
		var h, digest, digest$1, digest$2;
		h = new finishedHash.Ptr(); $copy(h, this, finishedHash);
		if (h.version >= 771) {
			digest = h.server.Sum(($sliceType($Uint8)).nil);
			return [digest, 5, 4];
		}
		if (sigType === 3) {
			digest$1 = h.server.Sum(($sliceType($Uint8)).nil);
			return [digest$1, 3, 2];
		}
		digest$2 = ($sliceType($Uint8)).make(0, 36);
		digest$2 = h.serverMD5.Sum(digest$2);
		digest$2 = h.server.Sum(digest$2);
		return [digest$2, 8, 0];
	};
	finishedHash.prototype.hashForClientCertificate = function(sigType) { return this.$val.hashForClientCertificate(sigType); };
	sessionState.Ptr.prototype.marshal = function() {
		var s, length, _ref, _i, cert, ret, x, _ref$1, _i$1, cert$1;
		s = this;
		length = (6 + s.masterSecret.$length >> 0) + 2 >> 0;
		_ref = s.certificates;
		_i = 0;
		while (_i < _ref.$length) {
			cert = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			length = length + ((4 + cert.$length >> 0)) >> 0;
			_i++;
		}
		ret = ($sliceType($Uint8)).make(length);
		x = ret;
		(0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0] = ((s.vers >>> 8 << 16 >>> 16) << 24 >>> 24);
		(1 < 0 || 1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 1] = (s.vers << 24 >>> 24);
		(2 < 0 || 2 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 2] = ((s.cipherSuite >>> 8 << 16 >>> 16) << 24 >>> 24);
		(3 < 0 || 3 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 3] = (s.cipherSuite << 24 >>> 24);
		(4 < 0 || 4 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 4] = ((s.masterSecret.$length >> 8 >> 0) << 24 >>> 24);
		(5 < 0 || 5 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 5] = (s.masterSecret.$length << 24 >>> 24);
		x = $subslice(x, 6);
		$copySlice(x, s.masterSecret);
		x = $subslice(x, s.masterSecret.$length);
		(0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0] = ((s.certificates.$length >> 8 >> 0) << 24 >>> 24);
		(1 < 0 || 1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 1] = (s.certificates.$length << 24 >>> 24);
		x = $subslice(x, 2);
		_ref$1 = s.certificates;
		_i$1 = 0;
		while (_i$1 < _ref$1.$length) {
			cert$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			(0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0] = ((cert$1.$length >> 24 >> 0) << 24 >>> 24);
			(1 < 0 || 1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 1] = ((cert$1.$length >> 16 >> 0) << 24 >>> 24);
			(2 < 0 || 2 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 2] = ((cert$1.$length >> 8 >> 0) << 24 >>> 24);
			(3 < 0 || 3 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 3] = (cert$1.$length << 24 >>> 24);
			$copySlice($subslice(x, 4), cert$1);
			x = $subslice(x, (4 + cert$1.$length >> 0));
			_i$1++;
		}
		return ret;
	};
	sessionState.prototype.marshal = function() { return this.$val.marshal(); };
	sessionState.Ptr.prototype.unmarshal = function(data) {
		var s, masterSecretLen, numCerts, _ref, _i, i, certLen, x;
		s = this;
		if (data.$length < 8) {
			return false;
		}
		s.vers = (((((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]) << 16 >>> 16) << 8 << 16 >>> 16) | (((1 < 0 || 1 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 1]) << 16 >>> 16)) >>> 0;
		s.cipherSuite = (((((2 < 0 || 2 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 2]) << 16 >>> 16) << 8 << 16 >>> 16) | (((3 < 0 || 3 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 3]) << 16 >>> 16)) >>> 0;
		masterSecretLen = ((((4 < 0 || 4 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 4]) >> 0) << 8 >> 0) | (((5 < 0 || 5 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 5]) >> 0);
		data = $subslice(data, 6);
		if (data.$length < masterSecretLen) {
			return false;
		}
		s.masterSecret = $subslice(data, 0, masterSecretLen);
		data = $subslice(data, masterSecretLen);
		if (data.$length < 2) {
			return false;
		}
		numCerts = ((((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]) >> 0) << 8 >> 0) | (((1 < 0 || 1 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 1]) >> 0);
		data = $subslice(data, 2);
		s.certificates = ($sliceType(($sliceType($Uint8)))).make(numCerts);
		_ref = s.certificates;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			if (data.$length < 4) {
				return false;
			}
			certLen = ((((((0 < 0 || 0 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 0]) >> 0) << 24 >> 0) | ((((1 < 0 || 1 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 1]) >> 0) << 16 >> 0)) | ((((2 < 0 || 2 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 2]) >> 0) << 8 >> 0)) | (((3 < 0 || 3 >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + 3]) >> 0);
			data = $subslice(data, 4);
			if (certLen < 0) {
				return false;
			}
			if (data.$length < certLen) {
				return false;
			}
			(x = s.certificates, (i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i] = $subslice(data, 0, certLen));
			data = $subslice(data, certLen);
			_i++;
		}
		if (data.$length > 0) {
			return false;
		}
		return true;
	};
	sessionState.prototype.unmarshal = function(data) { return this.$val.unmarshal(data); };
	Conn.Ptr.prototype.encryptTicket = function(state) {
		var c, serialized, encrypted, iv, macBytes, _tuple, err, _tuple$1, block$1, err$1, mac;
		c = this;
		serialized = state.marshal();
		encrypted = ($sliceType($Uint8)).make(((16 + serialized.$length >> 0) + 32 >> 0));
		iv = $subslice(encrypted, 0, 16);
		macBytes = $subslice(encrypted, (encrypted.$length - 32 >> 0));
		_tuple = io.ReadFull(c.config.rand(), iv); err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($sliceType($Uint8)).nil, err];
		}
		_tuple$1 = aes.NewCipher($subslice(new ($sliceType($Uint8))(c.config.SessionTicketKey), 0, 16)); block$1 = _tuple$1[0]; err$1 = _tuple$1[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			return [($sliceType($Uint8)).nil, errors.New("tls: failed to create cipher while encrypting ticket: " + err$1.Error())];
		}
		cipher.NewCTR(block$1, iv).XORKeyStream($subslice(encrypted, 16), serialized);
		mac = hmac.New(sha256.New, $subslice(new ($sliceType($Uint8))(c.config.SessionTicketKey), 16, 32));
		mac.Write($subslice(encrypted, 0, (encrypted.$length - 32 >> 0)));
		mac.Sum($subslice(macBytes, 0, 0));
		return [encrypted, $ifaceNil];
	};
	Conn.prototype.encryptTicket = function(state) { return this.$val.encryptTicket(state); };
	Conn.Ptr.prototype.decryptTicket = function(encrypted) {
		var c, iv, macBytes, mac, expected, _tuple, block$1, err, ciphertext, plaintext, state, ok;
		c = this;
		if (encrypted.$length < 48) {
			return [($ptrType(sessionState)).nil, false];
		}
		iv = $subslice(encrypted, 0, 16);
		macBytes = $subslice(encrypted, (encrypted.$length - 32 >> 0));
		mac = hmac.New(sha256.New, $subslice(new ($sliceType($Uint8))(c.config.SessionTicketKey), 16, 32));
		mac.Write($subslice(encrypted, 0, (encrypted.$length - 32 >> 0)));
		expected = mac.Sum(($sliceType($Uint8)).nil);
		if (!((subtle.ConstantTimeCompare(macBytes, expected) === 1))) {
			return [($ptrType(sessionState)).nil, false];
		}
		_tuple = aes.NewCipher($subslice(new ($sliceType($Uint8))(c.config.SessionTicketKey), 0, 16)); block$1 = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($ptrType(sessionState)).nil, false];
		}
		ciphertext = $subslice(encrypted, 16, (encrypted.$length - 32 >> 0));
		plaintext = ciphertext;
		cipher.NewCTR(block$1, iv).XORKeyStream(plaintext, ciphertext);
		state = new sessionState.Ptr();
		ok = state.unmarshal(plaintext);
		return [state, ok];
	};
	Conn.prototype.decryptTicket = function(encrypted) { return this.$val.decryptTicket(encrypted); };
	Server = $pkg.Server = function(conn, config) {
		return new Conn.Ptr(conn, false, new sync.Mutex.Ptr(), $ifaceNil, 0, false, config, false, false, 0, ($sliceType($Uint8)).nil, ($sliceType(($ptrType(x509.Certificate)))).nil, ($sliceType(($sliceType(($ptrType(x509.Certificate)))))).nil, "", "", false, new halfConn.Ptr(), new halfConn.Ptr(), ($ptrType(block)).nil, ($ptrType(block)).nil, new bytes.Buffer.Ptr(), ($arrayType($Uint8, 16)).zero());
	};
	listener.Ptr.prototype.Accept = function() {
		var c = $ifaceNil, err = $ifaceNil, l, _tuple;
		l = this;
		_tuple = l.Listener.Accept(); c = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [c, err];
		}
		c = Server(c, l.config);
		return [c, err];
	};
	listener.prototype.Accept = function() { return this.$val.Accept(); };
	NewListener = $pkg.NewListener = function(inner, config) {
		var l;
		l = new listener.Ptr();
		l.Listener = inner;
		l.config = config;
		return l;
	};
	LoadX509KeyPair = $pkg.LoadX509KeyPair = function(certFile, keyFile) {
		var cert = new Certificate.Ptr(), err = $ifaceNil, _tuple, certPEMBlock, _tuple$1, keyPEMBlock, _tuple$2;
		_tuple = ioutil.ReadFile(certFile); certPEMBlock = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [cert, err];
		}
		_tuple$1 = ioutil.ReadFile(keyFile); keyPEMBlock = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [cert, err];
		}
		_tuple$2 = X509KeyPair(certPEMBlock, keyPEMBlock); $copy(cert, _tuple$2[0], Certificate); err = _tuple$2[1];
		return [cert, err];
	};
	X509KeyPair = $pkg.X509KeyPair = function(certPEMBlock, keyPEMBlock) {
		var cert = new Certificate.Ptr(), err = $ifaceNil, certDERBlock, _tuple, keyDERBlock, _tuple$1, _tuple$2, _tuple$3, x, x509Cert, pub, _ref, _tuple$4, priv, ok, _tuple$5, priv$1, ok$1;
		certDERBlock = ($ptrType(pem.Block)).nil;
		while (true) {
			_tuple = pem.Decode(certPEMBlock); certDERBlock = _tuple[0]; certPEMBlock = _tuple[1];
			if (certDERBlock === ($ptrType(pem.Block)).nil) {
				break;
			}
			if (certDERBlock.Type === "CERTIFICATE") {
				cert.Certificate = $append(cert.Certificate, certDERBlock.Bytes);
			}
		}
		if (cert.Certificate.$length === 0) {
			err = errors.New("crypto/tls: failed to parse certificate PEM data");
			return [cert, err];
		}
		keyDERBlock = ($ptrType(pem.Block)).nil;
		while (true) {
			_tuple$1 = pem.Decode(keyPEMBlock); keyDERBlock = _tuple$1[0]; keyPEMBlock = _tuple$1[1];
			if (keyDERBlock === ($ptrType(pem.Block)).nil) {
				err = errors.New("crypto/tls: failed to parse key PEM data");
				return [cert, err];
			}
			if (keyDERBlock.Type === "PRIVATE KEY" || strings.HasSuffix(keyDERBlock.Type, " PRIVATE KEY")) {
				break;
			}
		}
		_tuple$2 = parsePrivateKey(keyDERBlock.Bytes); cert.PrivateKey = _tuple$2[0]; err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [cert, err];
		}
		_tuple$3 = x509.ParseCertificate((x = cert.Certificate, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]))); x509Cert = _tuple$3[0]; err = _tuple$3[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [cert, err];
		}
		_ref = x509Cert.PublicKey;
		if ($assertType(_ref, ($ptrType(rsa.PublicKey)), true)[1]) {
			pub = _ref.$val;
			_tuple$4 = $assertType(cert.PrivateKey, ($ptrType(rsa.PrivateKey)), true); priv = _tuple$4[0]; ok = _tuple$4[1];
			if (!ok) {
				err = errors.New("crypto/tls: private key type does not match public key type");
				return [cert, err];
			}
			if (!((pub.N.Cmp(priv.PublicKey.N) === 0))) {
				err = errors.New("crypto/tls: private key does not match public key");
				return [cert, err];
			}
		} else if ($assertType(_ref, ($ptrType(ecdsa.PublicKey)), true)[1]) {
			pub = _ref.$val;
			_tuple$5 = $assertType(cert.PrivateKey, ($ptrType(ecdsa.PrivateKey)), true); priv$1 = _tuple$5[0]; ok$1 = _tuple$5[1];
			if (!ok$1) {
				err = errors.New("crypto/tls: private key type does not match public key type");
				return [cert, err];
			}
			if (!((pub.X.Cmp(priv$1.PublicKey.X) === 0)) || !((pub.Y.Cmp(priv$1.PublicKey.Y) === 0))) {
				err = errors.New("crypto/tls: private key does not match public key");
				return [cert, err];
			}
		} else {
			pub = _ref;
			err = errors.New("crypto/tls: unknown public key algorithm");
			return [cert, err];
		}
		return [cert, err];
	};
	parsePrivateKey = function(der) {
		var _tuple, key, err, _tuple$1, key$1, err$1, key$2, _ref, _tuple$2, key$3, err$2;
		_tuple = x509.ParsePKCS1PrivateKey(der); key = _tuple[0]; err = _tuple[1];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			return [key, $ifaceNil];
		}
		_tuple$1 = x509.ParsePKCS8PrivateKey(der); key$1 = _tuple$1[0]; err$1 = _tuple$1[1];
		if ($interfaceIsEqual(err$1, $ifaceNil)) {
			_ref = key$1;
			if ($assertType(_ref, ($ptrType(rsa.PrivateKey)), true)[1] || $assertType(_ref, ($ptrType(ecdsa.PrivateKey)), true)[1]) {
				key$2 = _ref;
				return [key$2, $ifaceNil];
			} else {
				key$2 = _ref;
				return [$ifaceNil, errors.New("crypto/tls: found unknown private key type in PKCS#8 wrapping")];
			}
		}
		_tuple$2 = x509.ParseECPrivateKey(der); key$3 = _tuple$2[0]; err$2 = _tuple$2[1];
		if ($interfaceIsEqual(err$2, $ifaceNil)) {
			return [key$3, $ifaceNil];
		}
		return [$ifaceNil, errors.New("crypto/tls: failed to parse private key")];
	};
	$pkg.$init = function() {
		alert.methods = [["Error", "Error", "", $funcType([], [$String], false), -1], ["String", "String", "", $funcType([], [$String], false), -1]];
		($ptrType(alert)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1], ["String", "String", "", $funcType([], [$String], false), -1]];
		keyAgreement.init([["generateClientKeyExchange", "generateClientKeyExchange", "crypto/tls", $funcType([($ptrType(Config)), ($ptrType(clientHelloMsg)), ($ptrType(x509.Certificate))], [($sliceType($Uint8)), ($ptrType(clientKeyExchangeMsg)), $error], false)], ["generateServerKeyExchange", "generateServerKeyExchange", "crypto/tls", $funcType([($ptrType(Config)), ($ptrType(Certificate)), ($ptrType(clientHelloMsg)), ($ptrType(serverHelloMsg))], [($ptrType(serverKeyExchangeMsg)), $error], false)], ["processClientKeyExchange", "processClientKeyExchange", "crypto/tls", $funcType([($ptrType(Config)), ($ptrType(Certificate)), ($ptrType(clientKeyExchangeMsg)), $Uint16], [($sliceType($Uint8)), $error], false)], ["processServerKeyExchange", "processServerKeyExchange", "crypto/tls", $funcType([($ptrType(Config)), ($ptrType(clientHelloMsg)), ($ptrType(serverHelloMsg)), ($ptrType(x509.Certificate)), ($ptrType(serverKeyExchangeMsg))], [$error], false)]]);
		cipherSuite.init([["id", "id", "crypto/tls", $Uint16, ""], ["keyLen", "keyLen", "crypto/tls", $Int, ""], ["macLen", "macLen", "crypto/tls", $Int, ""], ["ivLen", "ivLen", "crypto/tls", $Int, ""], ["ka", "ka", "crypto/tls", ($funcType([$Uint16], [keyAgreement], false)), ""], ["flags", "flags", "crypto/tls", $Int, ""], ["cipher", "cipher", "crypto/tls", ($funcType([($sliceType($Uint8)), ($sliceType($Uint8)), $Bool], [$emptyInterface], false)), ""], ["mac", "mac", "crypto/tls", ($funcType([$Uint16, ($sliceType($Uint8))], [macFunction], false)), ""], ["aead", "aead", "crypto/tls", ($funcType([($sliceType($Uint8)), ($sliceType($Uint8))], [cipher.AEAD], false)), ""]]);
		macFunction.init([["MAC", "MAC", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8))], [($sliceType($Uint8))], false)], ["Size", "Size", "", $funcType([], [$Int], false)]]);
		($ptrType(fixedNonceAEAD)).methods = [["NonceSize", "NonceSize", "", $funcType([], [$Int], false), -1], ["Open", "Open", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8))], [($sliceType($Uint8)), $error], false), -1], ["Overhead", "Overhead", "", $funcType([], [$Int], false), -1], ["Seal", "Seal", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8))], [($sliceType($Uint8))], false), -1]];
		fixedNonceAEAD.init([["sealNonce", "sealNonce", "crypto/tls", ($sliceType($Uint8)), ""], ["openNonce", "openNonce", "crypto/tls", ($sliceType($Uint8)), ""], ["aead", "aead", "crypto/tls", cipher.AEAD, ""]]);
		ssl30MAC.methods = [["MAC", "MAC", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8))], [($sliceType($Uint8))], false), -1], ["Size", "Size", "", $funcType([], [$Int], false), -1]];
		($ptrType(ssl30MAC)).methods = [["MAC", "MAC", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8))], [($sliceType($Uint8))], false), -1], ["Size", "Size", "", $funcType([], [$Int], false), -1]];
		ssl30MAC.init([["h", "h", "crypto/tls", hash.Hash, ""], ["key", "key", "crypto/tls", ($sliceType($Uint8)), ""]]);
		tls10MAC.methods = [["MAC", "MAC", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8))], [($sliceType($Uint8))], false), -1], ["Size", "Size", "", $funcType([], [$Int], false), -1]];
		($ptrType(tls10MAC)).methods = [["MAC", "MAC", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8)), ($sliceType($Uint8))], [($sliceType($Uint8))], false), -1], ["Size", "Size", "", $funcType([], [$Int], false), -1]];
		tls10MAC.init([["h", "h", "crypto/tls", hash.Hash, ""]]);
		signatureAndHash.init([["hash", "hash", "crypto/tls", $Uint8, ""], ["signature", "signature", "crypto/tls", $Uint8, ""]]);
		ConnectionState.init([["Version", "Version", "", $Uint16, ""], ["HandshakeComplete", "HandshakeComplete", "", $Bool, ""], ["DidResume", "DidResume", "", $Bool, ""], ["CipherSuite", "CipherSuite", "", $Uint16, ""], ["NegotiatedProtocol", "NegotiatedProtocol", "", $String, ""], ["NegotiatedProtocolIsMutual", "NegotiatedProtocolIsMutual", "", $Bool, ""], ["ServerName", "ServerName", "", $String, ""], ["PeerCertificates", "PeerCertificates", "", ($sliceType(($ptrType(x509.Certificate)))), ""], ["VerifiedChains", "VerifiedChains", "", ($sliceType(($sliceType(($ptrType(x509.Certificate)))))), ""]]);
		ClientSessionState.init([["sessionTicket", "sessionTicket", "crypto/tls", ($sliceType($Uint8)), ""], ["vers", "vers", "crypto/tls", $Uint16, ""], ["cipherSuite", "cipherSuite", "crypto/tls", $Uint16, ""], ["masterSecret", "masterSecret", "crypto/tls", ($sliceType($Uint8)), ""], ["serverCertificates", "serverCertificates", "crypto/tls", ($sliceType(($ptrType(x509.Certificate)))), ""]]);
		ClientSessionCache.init([["Get", "Get", "", $funcType([$String], [($ptrType(ClientSessionState)), $Bool], false)], ["Put", "Put", "", $funcType([$String, ($ptrType(ClientSessionState))], [], false)]]);
		($ptrType(Config)).methods = [["BuildNameToCertificate", "BuildNameToCertificate", "", $funcType([], [], false), -1], ["cipherSuites", "cipherSuites", "crypto/tls", $funcType([], [($sliceType($Uint16))], false), -1], ["curvePreferences", "curvePreferences", "crypto/tls", $funcType([], [($sliceType(CurveID))], false), -1], ["getCertificateForName", "getCertificateForName", "crypto/tls", $funcType([$String], [($ptrType(Certificate))], false), -1], ["maxVersion", "maxVersion", "crypto/tls", $funcType([], [$Uint16], false), -1], ["minVersion", "minVersion", "crypto/tls", $funcType([], [$Uint16], false), -1], ["mutualVersion", "mutualVersion", "crypto/tls", $funcType([$Uint16], [$Uint16, $Bool], false), -1], ["rand", "rand", "crypto/tls", $funcType([], [io.Reader], false), -1], ["serverInit", "serverInit", "crypto/tls", $funcType([], [], false), -1], ["time", "time", "crypto/tls", $funcType([], [time.Time], false), -1]];
		Config.init([["Rand", "Rand", "", io.Reader, ""], ["Time", "Time", "", ($funcType([], [time.Time], false)), ""], ["Certificates", "Certificates", "", ($sliceType(Certificate)), ""], ["NameToCertificate", "NameToCertificate", "", ($mapType($String, ($ptrType(Certificate)))), ""], ["RootCAs", "RootCAs", "", ($ptrType(x509.CertPool)), ""], ["NextProtos", "NextProtos", "", ($sliceType($String)), ""], ["ServerName", "ServerName", "", $String, ""], ["ClientAuth", "ClientAuth", "", ClientAuthType, ""], ["ClientCAs", "ClientCAs", "", ($ptrType(x509.CertPool)), ""], ["InsecureSkipVerify", "InsecureSkipVerify", "", $Bool, ""], ["CipherSuites", "CipherSuites", "", ($sliceType($Uint16)), ""], ["PreferServerCipherSuites", "PreferServerCipherSuites", "", $Bool, ""], ["SessionTicketsDisabled", "SessionTicketsDisabled", "", $Bool, ""], ["SessionTicketKey", "SessionTicketKey", "", ($arrayType($Uint8, 32)), ""], ["ClientSessionCache", "ClientSessionCache", "", ClientSessionCache, ""], ["MinVersion", "MinVersion", "", $Uint16, ""], ["MaxVersion", "MaxVersion", "", $Uint16, ""], ["CurvePreferences", "CurvePreferences", "", ($sliceType(CurveID)), ""], ["serverInitOnce", "serverInitOnce", "crypto/tls", sync.Once, ""]]);
		Certificate.init([["Certificate", "Certificate", "", ($sliceType(($sliceType($Uint8)))), ""], ["PrivateKey", "PrivateKey", "", crypto.PrivateKey, ""], ["OCSPStaple", "OCSPStaple", "", ($sliceType($Uint8)), ""], ["Leaf", "Leaf", "", ($ptrType(x509.Certificate)), ""]]);
		ecdsaSignature.init([["R", "R", "", ($ptrType(big.Int)), ""], ["S", "S", "", ($ptrType(big.Int)), ""]]);
		($ptrType(Conn)).methods = [["Close", "Close", "", $funcType([], [$error], false), -1], ["ConnectionState", "ConnectionState", "", $funcType([], [ConnectionState], false), -1], ["Handshake", "Handshake", "", $funcType([], [$error], false), -1], ["LocalAddr", "LocalAddr", "", $funcType([], [net.Addr], false), -1], ["OCSPResponse", "OCSPResponse", "", $funcType([], [($sliceType($Uint8))], false), -1], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["RemoteAddr", "RemoteAddr", "", $funcType([], [net.Addr], false), -1], ["SetDeadline", "SetDeadline", "", $funcType([time.Time], [$error], false), -1], ["SetReadDeadline", "SetReadDeadline", "", $funcType([time.Time], [$error], false), -1], ["SetWriteDeadline", "SetWriteDeadline", "", $funcType([time.Time], [$error], false), -1], ["VerifyHostname", "VerifyHostname", "", $funcType([$String], [$error], false), -1], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["clientHandshake", "clientHandshake", "crypto/tls", $funcType([], [$error], false), -1], ["decryptTicket", "decryptTicket", "crypto/tls", $funcType([($sliceType($Uint8))], [($ptrType(sessionState)), $Bool], false), -1], ["encryptTicket", "encryptTicket", "crypto/tls", $funcType([($ptrType(sessionState))], [($sliceType($Uint8)), $error], false), -1], ["readHandshake", "readHandshake", "crypto/tls", $funcType([], [$emptyInterface, $error], false), -1], ["readRecord", "readRecord", "crypto/tls", $funcType([recordType], [$error], false), -1], ["sendAlert", "sendAlert", "crypto/tls", $funcType([alert], [$error], false), -1], ["sendAlertLocked", "sendAlertLocked", "crypto/tls", $funcType([alert], [$error], false), -1], ["serverHandshake", "serverHandshake", "crypto/tls", $funcType([], [$error], false), -1], ["tryCipherSuite", "tryCipherSuite", "crypto/tls", $funcType([$Uint16, ($sliceType($Uint16)), $Uint16, $Bool, $Bool], [($ptrType(cipherSuite))], false), -1], ["writeRecord", "writeRecord", "crypto/tls", $funcType([recordType, ($sliceType($Uint8))], [$Int, $error], false), -1]];
		Conn.init([["conn", "conn", "crypto/tls", net.Conn, ""], ["isClient", "isClient", "crypto/tls", $Bool, ""], ["handshakeMutex", "handshakeMutex", "crypto/tls", sync.Mutex, ""], ["handshakeErr", "handshakeErr", "crypto/tls", $error, ""], ["vers", "vers", "crypto/tls", $Uint16, ""], ["haveVers", "haveVers", "crypto/tls", $Bool, ""], ["config", "config", "crypto/tls", ($ptrType(Config)), ""], ["handshakeComplete", "handshakeComplete", "crypto/tls", $Bool, ""], ["didResume", "didResume", "crypto/tls", $Bool, ""], ["cipherSuite", "cipherSuite", "crypto/tls", $Uint16, ""], ["ocspResponse", "ocspResponse", "crypto/tls", ($sliceType($Uint8)), ""], ["peerCertificates", "peerCertificates", "crypto/tls", ($sliceType(($ptrType(x509.Certificate)))), ""], ["verifiedChains", "verifiedChains", "crypto/tls", ($sliceType(($sliceType(($ptrType(x509.Certificate)))))), ""], ["serverName", "serverName", "crypto/tls", $String, ""], ["clientProtocol", "clientProtocol", "crypto/tls", $String, ""], ["clientProtocolFallback", "clientProtocolFallback", "crypto/tls", $Bool, ""], ["in$16", "in", "crypto/tls", halfConn, ""], ["out", "out", "crypto/tls", halfConn, ""], ["rawInput", "rawInput", "crypto/tls", ($ptrType(block)), ""], ["input", "input", "crypto/tls", ($ptrType(block)), ""], ["hand", "hand", "crypto/tls", bytes.Buffer, ""], ["tmp", "tmp", "crypto/tls", ($arrayType($Uint8, 16)), ""]]);
		($ptrType(halfConn)).methods = [["Lock", "Lock", "", $funcType([], [], false), 0], ["Unlock", "Unlock", "", $funcType([], [], false), 0], ["changeCipherSpec", "changeCipherSpec", "crypto/tls", $funcType([], [$error], false), -1], ["decrypt", "decrypt", "crypto/tls", $funcType([($ptrType(block))], [$Bool, $Int, alert], false), -1], ["encrypt", "encrypt", "crypto/tls", $funcType([($ptrType(block)), $Int], [$Bool, alert], false), -1], ["error", "error", "crypto/tls", $funcType([], [$error], false), -1], ["freeBlock", "freeBlock", "crypto/tls", $funcType([($ptrType(block))], [], false), -1], ["incSeq", "incSeq", "crypto/tls", $funcType([], [], false), -1], ["newBlock", "newBlock", "crypto/tls", $funcType([], [($ptrType(block))], false), -1], ["prepareCipherSpec", "prepareCipherSpec", "crypto/tls", $funcType([$Uint16, $emptyInterface, macFunction], [], false), -1], ["resetSeq", "resetSeq", "crypto/tls", $funcType([], [], false), -1], ["setErrorLocked", "setErrorLocked", "crypto/tls", $funcType([$error], [$error], false), -1], ["splitBlock", "splitBlock", "crypto/tls", $funcType([($ptrType(block)), $Int], [($ptrType(block)), ($ptrType(block))], false), -1]];
		halfConn.init([["Mutex", "", "", sync.Mutex, ""], ["err", "err", "crypto/tls", $error, ""], ["version", "version", "crypto/tls", $Uint16, ""], ["cipher", "cipher", "crypto/tls", $emptyInterface, ""], ["mac", "mac", "crypto/tls", macFunction, ""], ["seq", "seq", "crypto/tls", ($arrayType($Uint8, 8)), ""], ["bfree", "bfree", "crypto/tls", ($ptrType(block)), ""], ["nextCipher", "nextCipher", "crypto/tls", $emptyInterface, ""], ["nextMac", "nextMac", "crypto/tls", macFunction, ""], ["inDigestBuf", "inDigestBuf", "crypto/tls", ($sliceType($Uint8)), ""], ["outDigestBuf", "outDigestBuf", "crypto/tls", ($sliceType($Uint8)), ""]]);
		cbcMode.init([["BlockSize", "BlockSize", "", $funcType([], [$Int], false)], ["CryptBlocks", "CryptBlocks", "", $funcType([($sliceType($Uint8)), ($sliceType($Uint8))], [], false)], ["SetIV", "SetIV", "", $funcType([($sliceType($Uint8))], [], false)]]);
		($ptrType(block)).methods = [["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["readFromUntil", "readFromUntil", "crypto/tls", $funcType([io.Reader, $Int], [$error], false), -1], ["reserve", "reserve", "crypto/tls", $funcType([$Int], [], false), -1], ["resize", "resize", "crypto/tls", $funcType([$Int], [], false), -1]];
		block.init([["data", "data", "crypto/tls", ($sliceType($Uint8)), ""], ["off", "off", "crypto/tls", $Int, ""], ["link", "link", "crypto/tls", ($ptrType(block)), ""]]);
		($ptrType(clientHandshakeState)).methods = [["doFullHandshake", "doFullHandshake", "crypto/tls", $funcType([], [$error], false), -1], ["establishKeys", "establishKeys", "crypto/tls", $funcType([], [$error], false), -1], ["processServerHello", "processServerHello", "crypto/tls", $funcType([], [$Bool, $error], false), -1], ["readFinished", "readFinished", "crypto/tls", $funcType([], [$error], false), -1], ["readSessionTicket", "readSessionTicket", "crypto/tls", $funcType([], [$error], false), -1], ["sendFinished", "sendFinished", "crypto/tls", $funcType([], [$error], false), -1], ["serverResumedSession", "serverResumedSession", "crypto/tls", $funcType([], [$Bool], false), -1]];
		clientHandshakeState.init([["c", "c", "crypto/tls", ($ptrType(Conn)), ""], ["serverHello", "serverHello", "crypto/tls", ($ptrType(serverHelloMsg)), ""], ["hello", "hello", "crypto/tls", ($ptrType(clientHelloMsg)), ""], ["suite", "suite", "crypto/tls", ($ptrType(cipherSuite)), ""], ["finishedHash", "finishedHash", "crypto/tls", finishedHash, ""], ["masterSecret", "masterSecret", "crypto/tls", ($sliceType($Uint8)), ""], ["session", "session", "crypto/tls", ($ptrType(ClientSessionState)), ""]]);
		($ptrType(clientHelloMsg)).methods = [["equal", "equal", "crypto/tls", $funcType([$emptyInterface], [$Bool], false), -1], ["marshal", "marshal", "crypto/tls", $funcType([], [($sliceType($Uint8))], false), -1], ["unmarshal", "unmarshal", "crypto/tls", $funcType([($sliceType($Uint8))], [$Bool], false), -1]];
		clientHelloMsg.init([["raw", "raw", "crypto/tls", ($sliceType($Uint8)), ""], ["vers", "vers", "crypto/tls", $Uint16, ""], ["random", "random", "crypto/tls", ($sliceType($Uint8)), ""], ["sessionId", "sessionId", "crypto/tls", ($sliceType($Uint8)), ""], ["cipherSuites", "cipherSuites", "crypto/tls", ($sliceType($Uint16)), ""], ["compressionMethods", "compressionMethods", "crypto/tls", ($sliceType($Uint8)), ""], ["nextProtoNeg", "nextProtoNeg", "crypto/tls", $Bool, ""], ["serverName", "serverName", "crypto/tls", $String, ""], ["ocspStapling", "ocspStapling", "crypto/tls", $Bool, ""], ["supportedCurves", "supportedCurves", "crypto/tls", ($sliceType(CurveID)), ""], ["supportedPoints", "supportedPoints", "crypto/tls", ($sliceType($Uint8)), ""], ["ticketSupported", "ticketSupported", "crypto/tls", $Bool, ""], ["sessionTicket", "sessionTicket", "crypto/tls", ($sliceType($Uint8)), ""], ["signatureAndHashes", "signatureAndHashes", "crypto/tls", ($sliceType(signatureAndHash)), ""], ["secureRenegotiation", "secureRenegotiation", "crypto/tls", $Bool, ""]]);
		($ptrType(serverHelloMsg)).methods = [["equal", "equal", "crypto/tls", $funcType([$emptyInterface], [$Bool], false), -1], ["marshal", "marshal", "crypto/tls", $funcType([], [($sliceType($Uint8))], false), -1], ["unmarshal", "unmarshal", "crypto/tls", $funcType([($sliceType($Uint8))], [$Bool], false), -1]];
		serverHelloMsg.init([["raw", "raw", "crypto/tls", ($sliceType($Uint8)), ""], ["vers", "vers", "crypto/tls", $Uint16, ""], ["random", "random", "crypto/tls", ($sliceType($Uint8)), ""], ["sessionId", "sessionId", "crypto/tls", ($sliceType($Uint8)), ""], ["cipherSuite", "cipherSuite", "crypto/tls", $Uint16, ""], ["compressionMethod", "compressionMethod", "crypto/tls", $Uint8, ""], ["nextProtoNeg", "nextProtoNeg", "crypto/tls", $Bool, ""], ["nextProtos", "nextProtos", "crypto/tls", ($sliceType($String)), ""], ["ocspStapling", "ocspStapling", "crypto/tls", $Bool, ""], ["ticketSupported", "ticketSupported", "crypto/tls", $Bool, ""], ["secureRenegotiation", "secureRenegotiation", "crypto/tls", $Bool, ""]]);
		($ptrType(certificateMsg)).methods = [["equal", "equal", "crypto/tls", $funcType([$emptyInterface], [$Bool], false), -1], ["marshal", "marshal", "crypto/tls", $funcType([], [($sliceType($Uint8))], false), -1], ["unmarshal", "unmarshal", "crypto/tls", $funcType([($sliceType($Uint8))], [$Bool], false), -1]];
		certificateMsg.init([["raw", "raw", "crypto/tls", ($sliceType($Uint8)), ""], ["certificates", "certificates", "crypto/tls", ($sliceType(($sliceType($Uint8)))), ""]]);
		($ptrType(serverKeyExchangeMsg)).methods = [["equal", "equal", "crypto/tls", $funcType([$emptyInterface], [$Bool], false), -1], ["marshal", "marshal", "crypto/tls", $funcType([], [($sliceType($Uint8))], false), -1], ["unmarshal", "unmarshal", "crypto/tls", $funcType([($sliceType($Uint8))], [$Bool], false), -1]];
		serverKeyExchangeMsg.init([["raw", "raw", "crypto/tls", ($sliceType($Uint8)), ""], ["key", "key", "crypto/tls", ($sliceType($Uint8)), ""]]);
		($ptrType(certificateStatusMsg)).methods = [["equal", "equal", "crypto/tls", $funcType([$emptyInterface], [$Bool], false), -1], ["marshal", "marshal", "crypto/tls", $funcType([], [($sliceType($Uint8))], false), -1], ["unmarshal", "unmarshal", "crypto/tls", $funcType([($sliceType($Uint8))], [$Bool], false), -1]];
		certificateStatusMsg.init([["raw", "raw", "crypto/tls", ($sliceType($Uint8)), ""], ["statusType", "statusType", "crypto/tls", $Uint8, ""], ["response", "response", "crypto/tls", ($sliceType($Uint8)), ""]]);
		($ptrType(serverHelloDoneMsg)).methods = [["equal", "equal", "crypto/tls", $funcType([$emptyInterface], [$Bool], false), -1], ["marshal", "marshal", "crypto/tls", $funcType([], [($sliceType($Uint8))], false), -1], ["unmarshal", "unmarshal", "crypto/tls", $funcType([($sliceType($Uint8))], [$Bool], false), -1]];
		serverHelloDoneMsg.init([]);
		($ptrType(clientKeyExchangeMsg)).methods = [["equal", "equal", "crypto/tls", $funcType([$emptyInterface], [$Bool], false), -1], ["marshal", "marshal", "crypto/tls", $funcType([], [($sliceType($Uint8))], false), -1], ["unmarshal", "unmarshal", "crypto/tls", $funcType([($sliceType($Uint8))], [$Bool], false), -1]];
		clientKeyExchangeMsg.init([["raw", "raw", "crypto/tls", ($sliceType($Uint8)), ""], ["ciphertext", "ciphertext", "crypto/tls", ($sliceType($Uint8)), ""]]);
		($ptrType(finishedMsg)).methods = [["equal", "equal", "crypto/tls", $funcType([$emptyInterface], [$Bool], false), -1], ["marshal", "marshal", "crypto/tls", $funcType([], [($sliceType($Uint8))], false), -1], ["unmarshal", "unmarshal", "crypto/tls", $funcType([($sliceType($Uint8))], [$Bool], false), -1]];
		finishedMsg.init([["raw", "raw", "crypto/tls", ($sliceType($Uint8)), ""], ["verifyData", "verifyData", "crypto/tls", ($sliceType($Uint8)), ""]]);
		($ptrType(nextProtoMsg)).methods = [["equal", "equal", "crypto/tls", $funcType([$emptyInterface], [$Bool], false), -1], ["marshal", "marshal", "crypto/tls", $funcType([], [($sliceType($Uint8))], false), -1], ["unmarshal", "unmarshal", "crypto/tls", $funcType([($sliceType($Uint8))], [$Bool], false), -1]];
		nextProtoMsg.init([["raw", "raw", "crypto/tls", ($sliceType($Uint8)), ""], ["proto", "proto", "crypto/tls", $String, ""]]);
		($ptrType(certificateRequestMsg)).methods = [["equal", "equal", "crypto/tls", $funcType([$emptyInterface], [$Bool], false), -1], ["marshal", "marshal", "crypto/tls", $funcType([], [($sliceType($Uint8))], false), -1], ["unmarshal", "unmarshal", "crypto/tls", $funcType([($sliceType($Uint8))], [$Bool], false), -1]];
		certificateRequestMsg.init([["raw", "raw", "crypto/tls", ($sliceType($Uint8)), ""], ["hasSignatureAndHash", "hasSignatureAndHash", "crypto/tls", $Bool, ""], ["certificateTypes", "certificateTypes", "crypto/tls", ($sliceType($Uint8)), ""], ["signatureAndHashes", "signatureAndHashes", "crypto/tls", ($sliceType(signatureAndHash)), ""], ["certificateAuthorities", "certificateAuthorities", "crypto/tls", ($sliceType(($sliceType($Uint8)))), ""]]);
		($ptrType(certificateVerifyMsg)).methods = [["equal", "equal", "crypto/tls", $funcType([$emptyInterface], [$Bool], false), -1], ["marshal", "marshal", "crypto/tls", $funcType([], [($sliceType($Uint8))], false), -1], ["unmarshal", "unmarshal", "crypto/tls", $funcType([($sliceType($Uint8))], [$Bool], false), -1]];
		certificateVerifyMsg.init([["raw", "raw", "crypto/tls", ($sliceType($Uint8)), ""], ["hasSignatureAndHash", "hasSignatureAndHash", "crypto/tls", $Bool, ""], ["signatureAndHash", "signatureAndHash", "crypto/tls", signatureAndHash, ""], ["signature", "signature", "crypto/tls", ($sliceType($Uint8)), ""]]);
		($ptrType(newSessionTicketMsg)).methods = [["equal", "equal", "crypto/tls", $funcType([$emptyInterface], [$Bool], false), -1], ["marshal", "marshal", "crypto/tls", $funcType([], [($sliceType($Uint8))], false), -1], ["unmarshal", "unmarshal", "crypto/tls", $funcType([($sliceType($Uint8))], [$Bool], false), -1]];
		newSessionTicketMsg.init([["raw", "raw", "crypto/tls", ($sliceType($Uint8)), ""], ["ticket", "ticket", "crypto/tls", ($sliceType($Uint8)), ""]]);
		($ptrType(serverHandshakeState)).methods = [["checkForResumption", "checkForResumption", "crypto/tls", $funcType([], [$Bool], false), -1], ["doFullHandshake", "doFullHandshake", "crypto/tls", $funcType([], [$error], false), -1], ["doResumeHandshake", "doResumeHandshake", "crypto/tls", $funcType([], [$error], false), -1], ["establishKeys", "establishKeys", "crypto/tls", $funcType([], [$error], false), -1], ["processCertsFromClient", "processCertsFromClient", "crypto/tls", $funcType([($sliceType(($sliceType($Uint8))))], [crypto.PublicKey, $error], false), -1], ["readClientHello", "readClientHello", "crypto/tls", $funcType([], [$Bool, $error], false), -1], ["readFinished", "readFinished", "crypto/tls", $funcType([], [$error], false), -1], ["sendFinished", "sendFinished", "crypto/tls", $funcType([], [$error], false), -1], ["sendSessionTicket", "sendSessionTicket", "crypto/tls", $funcType([], [$error], false), -1]];
		serverHandshakeState.init([["c", "c", "crypto/tls", ($ptrType(Conn)), ""], ["clientHello", "clientHello", "crypto/tls", ($ptrType(clientHelloMsg)), ""], ["hello", "hello", "crypto/tls", ($ptrType(serverHelloMsg)), ""], ["suite", "suite", "crypto/tls", ($ptrType(cipherSuite)), ""], ["ellipticOk", "ellipticOk", "crypto/tls", $Bool, ""], ["ecdsaOk", "ecdsaOk", "crypto/tls", $Bool, ""], ["sessionState", "sessionState", "crypto/tls", ($ptrType(sessionState)), ""], ["finishedHash", "finishedHash", "crypto/tls", finishedHash, ""], ["masterSecret", "masterSecret", "crypto/tls", ($sliceType($Uint8)), ""], ["certsFromClient", "certsFromClient", "crypto/tls", ($sliceType(($sliceType($Uint8)))), ""], ["cert", "cert", "crypto/tls", ($ptrType(Certificate)), ""]]);
		rsaKeyAgreement.methods = [["generateClientKeyExchange", "generateClientKeyExchange", "crypto/tls", $funcType([($ptrType(Config)), ($ptrType(clientHelloMsg)), ($ptrType(x509.Certificate))], [($sliceType($Uint8)), ($ptrType(clientKeyExchangeMsg)), $error], false), -1], ["generateServerKeyExchange", "generateServerKeyExchange", "crypto/tls", $funcType([($ptrType(Config)), ($ptrType(Certificate)), ($ptrType(clientHelloMsg)), ($ptrType(serverHelloMsg))], [($ptrType(serverKeyExchangeMsg)), $error], false), -1], ["processClientKeyExchange", "processClientKeyExchange", "crypto/tls", $funcType([($ptrType(Config)), ($ptrType(Certificate)), ($ptrType(clientKeyExchangeMsg)), $Uint16], [($sliceType($Uint8)), $error], false), -1], ["processServerKeyExchange", "processServerKeyExchange", "crypto/tls", $funcType([($ptrType(Config)), ($ptrType(clientHelloMsg)), ($ptrType(serverHelloMsg)), ($ptrType(x509.Certificate)), ($ptrType(serverKeyExchangeMsg))], [$error], false), -1]];
		($ptrType(rsaKeyAgreement)).methods = [["generateClientKeyExchange", "generateClientKeyExchange", "crypto/tls", $funcType([($ptrType(Config)), ($ptrType(clientHelloMsg)), ($ptrType(x509.Certificate))], [($sliceType($Uint8)), ($ptrType(clientKeyExchangeMsg)), $error], false), -1], ["generateServerKeyExchange", "generateServerKeyExchange", "crypto/tls", $funcType([($ptrType(Config)), ($ptrType(Certificate)), ($ptrType(clientHelloMsg)), ($ptrType(serverHelloMsg))], [($ptrType(serverKeyExchangeMsg)), $error], false), -1], ["processClientKeyExchange", "processClientKeyExchange", "crypto/tls", $funcType([($ptrType(Config)), ($ptrType(Certificate)), ($ptrType(clientKeyExchangeMsg)), $Uint16], [($sliceType($Uint8)), $error], false), -1], ["processServerKeyExchange", "processServerKeyExchange", "crypto/tls", $funcType([($ptrType(Config)), ($ptrType(clientHelloMsg)), ($ptrType(serverHelloMsg)), ($ptrType(x509.Certificate)), ($ptrType(serverKeyExchangeMsg))], [$error], false), -1]];
		rsaKeyAgreement.init([]);
		($ptrType(ecdheKeyAgreement)).methods = [["generateClientKeyExchange", "generateClientKeyExchange", "crypto/tls", $funcType([($ptrType(Config)), ($ptrType(clientHelloMsg)), ($ptrType(x509.Certificate))], [($sliceType($Uint8)), ($ptrType(clientKeyExchangeMsg)), $error], false), -1], ["generateServerKeyExchange", "generateServerKeyExchange", "crypto/tls", $funcType([($ptrType(Config)), ($ptrType(Certificate)), ($ptrType(clientHelloMsg)), ($ptrType(serverHelloMsg))], [($ptrType(serverKeyExchangeMsg)), $error], false), -1], ["processClientKeyExchange", "processClientKeyExchange", "crypto/tls", $funcType([($ptrType(Config)), ($ptrType(Certificate)), ($ptrType(clientKeyExchangeMsg)), $Uint16], [($sliceType($Uint8)), $error], false), -1], ["processServerKeyExchange", "processServerKeyExchange", "crypto/tls", $funcType([($ptrType(Config)), ($ptrType(clientHelloMsg)), ($ptrType(serverHelloMsg)), ($ptrType(x509.Certificate)), ($ptrType(serverKeyExchangeMsg))], [$error], false), -1]];
		ecdheKeyAgreement.init([["version", "version", "crypto/tls", $Uint16, ""], ["sigType", "sigType", "crypto/tls", $Uint8, ""], ["privateKey", "privateKey", "crypto/tls", ($sliceType($Uint8)), ""], ["curve", "curve", "crypto/tls", elliptic.Curve, ""], ["x", "x", "crypto/tls", ($ptrType(big.Int)), ""], ["y", "y", "crypto/tls", ($ptrType(big.Int)), ""]]);
		finishedHash.methods = [["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["clientSum", "clientSum", "crypto/tls", $funcType([($sliceType($Uint8))], [($sliceType($Uint8))], false), -1], ["hashForClientCertificate", "hashForClientCertificate", "crypto/tls", $funcType([$Uint8], [($sliceType($Uint8)), crypto.Hash, $Uint8], false), -1], ["serverSum", "serverSum", "crypto/tls", $funcType([($sliceType($Uint8))], [($sliceType($Uint8))], false), -1]];
		($ptrType(finishedHash)).methods = [["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["clientSum", "clientSum", "crypto/tls", $funcType([($sliceType($Uint8))], [($sliceType($Uint8))], false), -1], ["hashForClientCertificate", "hashForClientCertificate", "crypto/tls", $funcType([$Uint8], [($sliceType($Uint8)), crypto.Hash, $Uint8], false), -1], ["serverSum", "serverSum", "crypto/tls", $funcType([($sliceType($Uint8))], [($sliceType($Uint8))], false), -1]];
		finishedHash.init([["client", "client", "crypto/tls", hash.Hash, ""], ["server", "server", "crypto/tls", hash.Hash, ""], ["clientMD5", "clientMD5", "crypto/tls", hash.Hash, ""], ["serverMD5", "serverMD5", "crypto/tls", hash.Hash, ""], ["version", "version", "crypto/tls", $Uint16, ""]]);
		($ptrType(sessionState)).methods = [["equal", "equal", "crypto/tls", $funcType([$emptyInterface], [$Bool], false), -1], ["marshal", "marshal", "crypto/tls", $funcType([], [($sliceType($Uint8))], false), -1], ["unmarshal", "unmarshal", "crypto/tls", $funcType([($sliceType($Uint8))], [$Bool], false), -1]];
		sessionState.init([["vers", "vers", "crypto/tls", $Uint16, ""], ["cipherSuite", "cipherSuite", "crypto/tls", $Uint16, ""], ["masterSecret", "masterSecret", "crypto/tls", ($sliceType($Uint8)), ""], ["certificates", "certificates", "crypto/tls", ($sliceType(($sliceType($Uint8)))), ""]]);
		listener.methods = [["Addr", "Addr", "", $funcType([], [net.Addr], false), 0], ["Close", "Close", "", $funcType([], [$error], false), 0]];
		($ptrType(listener)).methods = [["Accept", "Accept", "", $funcType([], [net.Conn, $error], false), -1], ["Addr", "Addr", "", $funcType([], [net.Addr], false), 0], ["Close", "Close", "", $funcType([], [$error], false), 0]];
		listener.init([["Listener", "", "", net.Listener, ""], ["config", "config", "crypto/tls", ($ptrType(Config)), ""]]);
		emptyConfig = new Config.Ptr();
		once = new sync.Once.Ptr();
		varDefaultCipherSuites = ($sliceType($Uint16)).nil;
		alertText = (_map = new $Map(), _key = 0, _map[_key] = { k: _key, v: "close notify" }, _key = 10, _map[_key] = { k: _key, v: "unexpected message" }, _key = 20, _map[_key] = { k: _key, v: "bad record MAC" }, _key = 21, _map[_key] = { k: _key, v: "decryption failed" }, _key = 22, _map[_key] = { k: _key, v: "record overflow" }, _key = 30, _map[_key] = { k: _key, v: "decompression failure" }, _key = 40, _map[_key] = { k: _key, v: "handshake failure" }, _key = 42, _map[_key] = { k: _key, v: "bad certificate" }, _key = 43, _map[_key] = { k: _key, v: "unsupported certificate" }, _key = 44, _map[_key] = { k: _key, v: "revoked certificate" }, _key = 45, _map[_key] = { k: _key, v: "expired certificate" }, _key = 46, _map[_key] = { k: _key, v: "unknown certificate" }, _key = 47, _map[_key] = { k: _key, v: "illegal parameter" }, _key = 48, _map[_key] = { k: _key, v: "unknown certificate authority" }, _key = 49, _map[_key] = { k: _key, v: "access denied" }, _key = 50, _map[_key] = { k: _key, v: "error decoding message" }, _key = 51, _map[_key] = { k: _key, v: "error decrypting message" }, _key = 70, _map[_key] = { k: _key, v: "protocol version not supported" }, _key = 71, _map[_key] = { k: _key, v: "insufficient security level" }, _key = 80, _map[_key] = { k: _key, v: "internal error" }, _key = 90, _map[_key] = { k: _key, v: "user canceled" }, _key = 100, _map[_key] = { k: _key, v: "no renegotiation" }, _map);
		ssl30Pad1 = $toNativeArray("Uint8", [54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54]);
		ssl30Pad2 = $toNativeArray("Uint8", [92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92]);
		cipherSuites = new ($sliceType(($ptrType(cipherSuite))))([new cipherSuite.Ptr(49199, 16, 0, 4, ecdheRSAKA, 5, $throwNilPointerError, $throwNilPointerError, aeadAESGCM), new cipherSuite.Ptr(49195, 16, 0, 4, ecdheECDSAKA, 7, $throwNilPointerError, $throwNilPointerError, aeadAESGCM), new cipherSuite.Ptr(49169, 16, 20, 0, ecdheRSAKA, 1, cipherRC4, macSHA1, $throwNilPointerError), new cipherSuite.Ptr(49159, 16, 20, 0, ecdheECDSAKA, 3, cipherRC4, macSHA1, $throwNilPointerError), new cipherSuite.Ptr(49171, 16, 20, 16, ecdheRSAKA, 1, cipherAES, macSHA1, $throwNilPointerError), new cipherSuite.Ptr(49161, 16, 20, 16, ecdheECDSAKA, 3, cipherAES, macSHA1, $throwNilPointerError), new cipherSuite.Ptr(49172, 32, 20, 16, ecdheRSAKA, 1, cipherAES, macSHA1, $throwNilPointerError), new cipherSuite.Ptr(49162, 32, 20, 16, ecdheECDSAKA, 3, cipherAES, macSHA1, $throwNilPointerError), new cipherSuite.Ptr(5, 16, 20, 0, rsaKA, 0, cipherRC4, macSHA1, $throwNilPointerError), new cipherSuite.Ptr(47, 16, 20, 16, rsaKA, 0, cipherAES, macSHA1, $throwNilPointerError), new cipherSuite.Ptr(53, 32, 20, 16, rsaKA, 0, cipherAES, macSHA1, $throwNilPointerError), new cipherSuite.Ptr(49170, 24, 20, 8, ecdheRSAKA, 1, cipher3DES, macSHA1, $throwNilPointerError), new cipherSuite.Ptr(10, 24, 20, 8, rsaKA, 0, cipher3DES, macSHA1, $throwNilPointerError)]);
		supportedSKXSignatureAlgorithms = new ($sliceType(signatureAndHash))([new signatureAndHash.Ptr(4, 1), new signatureAndHash.Ptr(4, 3), new signatureAndHash.Ptr(2, 1), new signatureAndHash.Ptr(2, 3)]);
		supportedClientCertSignatureAlgorithms = new ($sliceType(signatureAndHash))([new signatureAndHash.Ptr(4, 1), new signatureAndHash.Ptr(4, 3)]);
		defaultCurvePreferences = new ($sliceType(CurveID))([23, 24, 25]);
		errClientKeyExchange = errors.New("tls: invalid ClientKeyExchange message");
		errServerKeyExchange = errors.New("tls: invalid ServerKeyExchange message");
		masterSecretLabel = new ($sliceType($Uint8))($stringToBytes("master secret"));
		keyExpansionLabel = new ($sliceType($Uint8))($stringToBytes("key expansion"));
		clientFinishedLabel = new ($sliceType($Uint8))($stringToBytes("client finished"));
		serverFinishedLabel = new ($sliceType($Uint8))($stringToBytes("server finished"));
		ssl3ClientFinishedMagic = $toNativeArray("Uint8", [67, 76, 78, 84]);
		ssl3ServerFinishedMagic = $toNativeArray("Uint8", [83, 82, 86, 82]);
	};
	return $pkg;
})();
$packages["mime"] = (function() {
	var $pkg = {}, strings = $packages["strings"], bytes = $packages["bytes"], errors = $packages["errors"], fmt = $packages["fmt"], sort = $packages["sort"], unicode = $packages["unicode"], sync = $packages["sync"], bufio = $packages["bufio"], os = $packages["os"], isTSpecial, isTokenChar, checkMediaTypeDisposition, ParseMediaType, decode2231Enc, isNotTokenChar, consumeToken, consumeValue, consumeMediaParam, percentHexUnescape, ishex, unhex;
	isTSpecial = function(r) {
		return !((strings.IndexRune("()<>@,;:\\\"/[]?=", r) === -1));
	};
	isTokenChar = function(r) {
		return r > 32 && r < 127 && !isTSpecial(r);
	};
	checkMediaTypeDisposition = function(s) {
		var _tuple, typ, rest, _tuple$1, subtype;
		_tuple = consumeToken(s); typ = _tuple[0]; rest = _tuple[1];
		if (typ === "") {
			return errors.New("mime: no media type");
		}
		if (rest === "") {
			return $ifaceNil;
		}
		if (!strings.HasPrefix(rest, "/")) {
			return errors.New("mime: expected slash after first token");
		}
		_tuple$1 = consumeToken(rest.substring(1)); subtype = _tuple$1[0]; rest = _tuple$1[1];
		if (subtype === "") {
			return errors.New("mime: expected token after slash");
		}
		if (!(rest === "")) {
			return errors.New("mime: unexpected content after media subtype");
		}
		return $ifaceNil;
	};
	ParseMediaType = $pkg.ParseMediaType = function(v) {
		var mediatype = "", params = false, err = $ifaceNil, i, _tmp, _tmp$1, _tmp$2, continuation, _tuple, key, value, rest, _tmp$3, _tmp$4, _tmp$5, pmap, idx, baseName, ok, _tuple$1, _entry, _key$1, _entry$1, _tuple$2, _entry$2, exists, _tmp$6, _tmp$7, _tmp$8, _key$2, buf, _ref, _i, _keys, _entry$3, key$1, pieceMap, singlePartKey, _tuple$3, _entry$4, v$1, ok$1, decv, _key$3, valid, n, simplePart, _tuple$4, _entry$5, v$2, ok$2, encodedPart, _tuple$5, _entry$6, v$3, ok$3, _tuple$6, decv$1, _key$4;
		i = strings.Index(v, ";");
		if (i === -1) {
			i = v.length;
		}
		mediatype = strings.TrimSpace(strings.ToLower(v.substring(0, i)));
		err = checkMediaTypeDisposition(mediatype);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = ""; _tmp$1 = false; _tmp$2 = err; mediatype = _tmp; params = _tmp$1; err = _tmp$2;
			return [mediatype, params, err];
		}
		params = new $Map();
		continuation = false;
		v = v.substring(i);
		while (v.length > 0) {
			v = strings.TrimLeftFunc(v, unicode.IsSpace);
			if (v.length === 0) {
				break;
			}
			_tuple = consumeMediaParam(v); key = _tuple[0]; value = _tuple[1]; rest = _tuple[2];
			if (key === "") {
				if (strings.TrimSpace(rest) === ";") {
					return [mediatype, params, err];
				}
				_tmp$3 = ""; _tmp$4 = false; _tmp$5 = errors.New("mime: invalid media parameter"); mediatype = _tmp$3; params = _tmp$4; err = _tmp$5;
				return [mediatype, params, err];
			}
			pmap = params;
			idx = strings.Index(key, "*");
			if (!((idx === -1))) {
				baseName = key.substring(0, idx);
				if (continuation === false) {
					continuation = new $Map();
				}
				ok = false;
				_tuple$1 = (_entry = continuation[baseName], _entry !== undefined ? [_entry.v, true] : [false, false]); pmap = _tuple$1[0]; ok = _tuple$1[1];
				if (!ok) {
					_key$1 = baseName; (continuation || $throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: new $Map() };
					pmap = (_entry$1 = continuation[baseName], _entry$1 !== undefined ? _entry$1.v : false);
				}
			}
			_tuple$2 = (_entry$2 = pmap[key], _entry$2 !== undefined ? [_entry$2.v, true] : ["", false]); exists = _tuple$2[1];
			if (exists) {
				_tmp$6 = ""; _tmp$7 = false; _tmp$8 = errors.New("mime: duplicate parameter name"); mediatype = _tmp$6; params = _tmp$7; err = _tmp$8;
				return [mediatype, params, err];
			}
			_key$2 = key; (pmap || $throwRuntimeError("assignment to entry in nil map"))[_key$2] = { k: _key$2, v: value };
			v = rest;
		}
		buf = new bytes.Buffer.Ptr(); $copy(buf, new bytes.Buffer.Ptr(), bytes.Buffer);
		_ref = continuation;
		_i = 0;
		_keys = $keys(_ref);
		while (_i < _keys.length) {
			_entry$3 = _ref[_keys[_i]];
			if (_entry$3 === undefined) {
				_i++;
				continue;
			}
			key$1 = _entry$3.k;
			pieceMap = _entry$3.v;
			singlePartKey = key$1 + "*";
			_tuple$3 = (_entry$4 = pieceMap[singlePartKey], _entry$4 !== undefined ? [_entry$4.v, true] : ["", false]); v$1 = _tuple$3[0]; ok$1 = _tuple$3[1];
			if (ok$1) {
				decv = decode2231Enc(v$1);
				_key$3 = key$1; (params || $throwRuntimeError("assignment to entry in nil map"))[_key$3] = { k: _key$3, v: decv };
				_i++;
				continue;
			}
			buf.Reset();
			valid = false;
			n = 0;
			while (true) {
				simplePart = fmt.Sprintf("%s*%d", new ($sliceType($emptyInterface))([new $String(key$1), new $Int(n)]));
				_tuple$4 = (_entry$5 = pieceMap[simplePart], _entry$5 !== undefined ? [_entry$5.v, true] : ["", false]); v$2 = _tuple$4[0]; ok$2 = _tuple$4[1];
				if (ok$2) {
					valid = true;
					buf.WriteString(v$2);
					n = n + (1) >> 0;
					continue;
				}
				encodedPart = simplePart + "*";
				_tuple$5 = (_entry$6 = pieceMap[encodedPart], _entry$6 !== undefined ? [_entry$6.v, true] : ["", false]); v$3 = _tuple$5[0]; ok$3 = _tuple$5[1];
				if (ok$3) {
					valid = true;
					if (n === 0) {
						buf.WriteString(decode2231Enc(v$3));
					} else {
						_tuple$6 = percentHexUnescape(v$3); decv$1 = _tuple$6[0];
						buf.WriteString(decv$1);
					}
				} else {
					break;
				}
				n = n + (1) >> 0;
			}
			if (valid) {
				_key$4 = key$1; (params || $throwRuntimeError("assignment to entry in nil map"))[_key$4] = { k: _key$4, v: buf.String() };
			}
			_i++;
		}
		return [mediatype, params, err];
	};
	decode2231Enc = function(v) {
		var sv, charset, _tuple, encv;
		sv = strings.SplitN(v, "'", 3);
		if (!((sv.$length === 3))) {
			return "";
		}
		charset = strings.ToLower(((0 < 0 || 0 >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + 0]));
		if (!(charset === "us-ascii") && !(charset === "utf-8")) {
			return "";
		}
		_tuple = percentHexUnescape(((2 < 0 || 2 >= sv.$length) ? $throwRuntimeError("index out of range") : sv.$array[sv.$offset + 2])); encv = _tuple[0];
		return encv;
	};
	isNotTokenChar = function(r) {
		return !isTokenChar(r);
	};
	consumeToken = function(v) {
		var token = "", rest = "", notPos, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		notPos = strings.IndexFunc(v, isNotTokenChar);
		if (notPos === -1) {
			_tmp = v; _tmp$1 = ""; token = _tmp; rest = _tmp$1;
			return [token, rest];
		}
		if (notPos === 0) {
			_tmp$2 = ""; _tmp$3 = v; token = _tmp$2; rest = _tmp$3;
			return [token, rest];
		}
		_tmp$4 = v.substring(0, notPos); _tmp$5 = v.substring(notPos); token = _tmp$4; rest = _tmp$5;
		return [token, rest];
	};
	consumeValue = function(v) {
		var value = "", rest = "", _tuple, leadQuote, buffer, idx, r, nextIsLiteral, _ref, _i, _rune, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		if (!strings.HasPrefix(v, "\"") && !strings.HasPrefix(v, "'")) {
			_tuple = consumeToken(v); value = _tuple[0]; rest = _tuple[1];
			return [value, rest];
		}
		leadQuote = (v.charCodeAt(0) >> 0);
		rest = v.substring(1);
		buffer = new bytes.Buffer.Ptr();
		idx = 0;
		r = 0;
		nextIsLiteral = false;
		_ref = rest;
		_i = 0;
		while (_i < _ref.length) {
			_rune = $decodeRune(_ref, _i);
			idx = _i;
			r = _rune[0];
			if (nextIsLiteral) {
				buffer.WriteRune(r);
				nextIsLiteral = false;
			} else if (r === leadQuote) {
				_tmp = buffer.String(); _tmp$1 = rest.substring((idx + 1 >> 0)); value = _tmp; rest = _tmp$1;
				return [value, rest];
			} else if (r === 92) {
				nextIsLiteral = true;
			} else if (!((r === 13)) && !((r === 10))) {
				buffer.WriteRune(r);
			} else {
				_tmp$2 = ""; _tmp$3 = v; value = _tmp$2; rest = _tmp$3;
				return [value, rest];
			}
			_i += _rune[1];
		}
		_tmp$4 = ""; _tmp$5 = v; value = _tmp$4; rest = _tmp$5;
		return [value, rest];
	};
	consumeMediaParam = function(v) {
		var param = "", value = "", rest = "", _tmp, _tmp$1, _tmp$2, _tuple, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tuple$1, _tmp$9, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14;
		rest = strings.TrimLeftFunc(v, unicode.IsSpace);
		if (!strings.HasPrefix(rest, ";")) {
			_tmp = ""; _tmp$1 = ""; _tmp$2 = v; param = _tmp; value = _tmp$1; rest = _tmp$2;
			return [param, value, rest];
		}
		rest = rest.substring(1);
		rest = strings.TrimLeftFunc(rest, unicode.IsSpace);
		_tuple = consumeToken(rest); param = _tuple[0]; rest = _tuple[1];
		param = strings.ToLower(param);
		if (param === "") {
			_tmp$3 = ""; _tmp$4 = ""; _tmp$5 = v; param = _tmp$3; value = _tmp$4; rest = _tmp$5;
			return [param, value, rest];
		}
		rest = strings.TrimLeftFunc(rest, unicode.IsSpace);
		if (!strings.HasPrefix(rest, "=")) {
			_tmp$6 = ""; _tmp$7 = ""; _tmp$8 = v; param = _tmp$6; value = _tmp$7; rest = _tmp$8;
			return [param, value, rest];
		}
		rest = rest.substring(1);
		rest = strings.TrimLeftFunc(rest, unicode.IsSpace);
		_tuple$1 = consumeValue(rest); value = _tuple$1[0]; rest = _tuple$1[1];
		if (value === "") {
			_tmp$9 = ""; _tmp$10 = ""; _tmp$11 = v; param = _tmp$9; value = _tmp$10; rest = _tmp$11;
			return [param, value, rest];
		}
		_tmp$12 = param; _tmp$13 = value; _tmp$14 = rest; param = _tmp$12; value = _tmp$13; rest = _tmp$14;
		return [param, value, rest];
	};
	percentHexUnescape = function(s) {
		var percents, i, t, j, i$1, _ref;
		percents = 0;
		i = 0;
		while (i < s.length) {
			if (!((s.charCodeAt(i) === 37))) {
				i = i + (1) >> 0;
				continue;
			}
			percents = percents + (1) >> 0;
			if ((i + 2 >> 0) >= s.length || !ishex(s.charCodeAt((i + 1 >> 0))) || !ishex(s.charCodeAt((i + 2 >> 0)))) {
				s = s.substring(i);
				if (s.length > 3) {
					s = s.substring(0, 3);
				}
				return ["", fmt.Errorf("mime: bogus characters after %%: %q", new ($sliceType($emptyInterface))([new $String(s)]))];
			}
			i = i + (3) >> 0;
		}
		if (percents === 0) {
			return [s, $ifaceNil];
		}
		t = ($sliceType($Uint8)).make((s.length - ((((2 >>> 16 << 16) * percents >> 0) + (2 << 16 >>> 16) * percents) >> 0) >> 0));
		j = 0;
		i$1 = 0;
		while (i$1 < s.length) {
			_ref = s.charCodeAt(i$1);
			if (_ref === 37) {
				(j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = ((unhex(s.charCodeAt((i$1 + 1 >> 0))) << 4 << 24 >>> 24) | unhex(s.charCodeAt((i$1 + 2 >> 0)))) >>> 0;
				j = j + (1) >> 0;
				i$1 = i$1 + (3) >> 0;
			} else {
				(j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = s.charCodeAt(i$1);
				j = j + (1) >> 0;
				i$1 = i$1 + (1) >> 0;
			}
		}
		return [$bytesToString(t), $ifaceNil];
	};
	ishex = function(c) {
		if (48 <= c && c <= 57) {
			return true;
		} else if (97 <= c && c <= 102) {
			return true;
		} else if (65 <= c && c <= 70) {
			return true;
		}
		return false;
	};
	unhex = function(c) {
		if (48 <= c && c <= 57) {
			return c - 48 << 24 >>> 24;
		} else if (97 <= c && c <= 102) {
			return (c - 97 << 24 >>> 24) + 10 << 24 >>> 24;
		} else if (65 <= c && c <= 70) {
			return (c - 65 << 24 >>> 24) + 10 << 24 >>> 24;
		}
		return 0;
	};
	$pkg.$init = function() {
	};
	return $pkg;
})();
$packages["net/textproto"] = (function() {
	var $pkg = {}, sync = $packages["sync"], bufio = $packages["bufio"], bytes = $packages["bytes"], io = $packages["io"], ioutil = $packages["io/ioutil"], strconv = $packages["strconv"], strings = $packages["strings"], fmt = $packages["fmt"], net = $packages["net"], MIMEHeader, Reader, dotReader, Error, ProtocolError, commonHeader, NewReader, trim, parseCodeLine, CanonicalMIMEHeaderKey, canonicalMIMEHeaderKey, init, TrimString, isASCIISpace, isASCIILetter;
	MIMEHeader = $pkg.MIMEHeader = $newType(4, "Map", "textproto.MIMEHeader", "MIMEHeader", "net/textproto", null);
	Reader = $pkg.Reader = $newType(0, "Struct", "textproto.Reader", "Reader", "net/textproto", function(R_, dot_, buf_) {
		this.$val = this;
		this.R = R_ !== undefined ? R_ : ($ptrType(bufio.Reader)).nil;
		this.dot = dot_ !== undefined ? dot_ : ($ptrType(dotReader)).nil;
		this.buf = buf_ !== undefined ? buf_ : ($sliceType($Uint8)).nil;
	});
	dotReader = $pkg.dotReader = $newType(0, "Struct", "textproto.dotReader", "dotReader", "net/textproto", function(r_, state_) {
		this.$val = this;
		this.r = r_ !== undefined ? r_ : ($ptrType(Reader)).nil;
		this.state = state_ !== undefined ? state_ : 0;
	});
	Error = $pkg.Error = $newType(0, "Struct", "textproto.Error", "Error", "net/textproto", function(Code_, Msg_) {
		this.$val = this;
		this.Code = Code_ !== undefined ? Code_ : 0;
		this.Msg = Msg_ !== undefined ? Msg_ : "";
	});
	ProtocolError = $pkg.ProtocolError = $newType(8, "String", "textproto.ProtocolError", "ProtocolError", "net/textproto", null);
	MIMEHeader.prototype.Add = function(key, value) {
		var h, _key, _entry;
		h = this.$val !== undefined ? this.$val : this;
		key = CanonicalMIMEHeaderKey(key);
		_key = key; (h || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: $append((_entry = h[key], _entry !== undefined ? _entry.v : ($sliceType($String)).nil), value) };
	};
	$ptrType(MIMEHeader).prototype.Add = function(key, value) { return new MIMEHeader(this.$get()).Add(key, value); };
	MIMEHeader.prototype.Set = function(key, value) {
		var h, _key;
		h = this.$val !== undefined ? this.$val : this;
		_key = CanonicalMIMEHeaderKey(key); (h || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: new ($sliceType($String))([value]) };
	};
	$ptrType(MIMEHeader).prototype.Set = function(key, value) { return new MIMEHeader(this.$get()).Set(key, value); };
	MIMEHeader.prototype.Get = function(key) {
		var h, _entry, v;
		h = this.$val !== undefined ? this.$val : this;
		if (h === false) {
			return "";
		}
		v = (_entry = h[CanonicalMIMEHeaderKey(key)], _entry !== undefined ? _entry.v : ($sliceType($String)).nil);
		if (v.$length === 0) {
			return "";
		}
		return ((0 < 0 || 0 >= v.$length) ? $throwRuntimeError("index out of range") : v.$array[v.$offset + 0]);
	};
	$ptrType(MIMEHeader).prototype.Get = function(key) { return new MIMEHeader(this.$get()).Get(key); };
	MIMEHeader.prototype.Del = function(key) {
		var h;
		h = this.$val !== undefined ? this.$val : this;
		delete h[CanonicalMIMEHeaderKey(key)];
	};
	$ptrType(MIMEHeader).prototype.Del = function(key) { return new MIMEHeader(this.$get()).Del(key); };
	NewReader = $pkg.NewReader = function(r) {
		return new Reader.Ptr(r, ($ptrType(dotReader)).nil, ($sliceType($Uint8)).nil);
	};
	Reader.Ptr.prototype.ReadLine = function() {
		var r, _tuple, line, err;
		r = this;
		_tuple = r.readLineSlice(); line = _tuple[0]; err = _tuple[1];
		return [$bytesToString(line), err];
	};
	Reader.prototype.ReadLine = function() { return this.$val.ReadLine(); };
	Reader.Ptr.prototype.ReadLineBytes = function() {
		var r, _tuple, line, err, buf;
		r = this;
		_tuple = r.readLineSlice(); line = _tuple[0]; err = _tuple[1];
		if (!(line === ($sliceType($Uint8)).nil)) {
			buf = ($sliceType($Uint8)).make(line.$length);
			$copySlice(buf, line);
			line = buf;
		}
		return [line, err];
	};
	Reader.prototype.ReadLineBytes = function() { return this.$val.ReadLineBytes(); };
	Reader.Ptr.prototype.readLineSlice = function() {
		var r, line, _tuple, l, more, err;
		r = this;
		r.closeDot();
		line = ($sliceType($Uint8)).nil;
		while (true) {
			_tuple = r.R.ReadLine(); l = _tuple[0]; more = _tuple[1]; err = _tuple[2];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [($sliceType($Uint8)).nil, err];
			}
			if (line === ($sliceType($Uint8)).nil && !more) {
				return [l, $ifaceNil];
			}
			line = $appendSlice(line, l);
			if (!more) {
				break;
			}
		}
		return [line, $ifaceNil];
	};
	Reader.prototype.readLineSlice = function() { return this.$val.readLineSlice(); };
	Reader.Ptr.prototype.ReadContinuedLine = function() {
		var r, _tuple, line, err;
		r = this;
		_tuple = r.readContinuedLineSlice(); line = _tuple[0]; err = _tuple[1];
		return [$bytesToString(line), err];
	};
	Reader.prototype.ReadContinuedLine = function() { return this.$val.ReadContinuedLine(); };
	trim = function(s) {
		var i, n, x, x$1;
		i = 0;
		while (i < s.$length && ((((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) === 32) || (((i < 0 || i >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + i]) === 9))) {
			i = i + (1) >> 0;
		}
		n = s.$length;
		while (n > i && (((x = n - 1 >> 0, ((x < 0 || x >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x])) === 32) || ((x$1 = n - 1 >> 0, ((x$1 < 0 || x$1 >= s.$length) ? $throwRuntimeError("index out of range") : s.$array[s.$offset + x$1])) === 9))) {
			n = n - (1) >> 0;
		}
		return $subslice(s, i, n);
	};
	Reader.Ptr.prototype.ReadContinuedLineBytes = function() {
		var r, _tuple, line, err, buf;
		r = this;
		_tuple = r.readContinuedLineSlice(); line = _tuple[0]; err = _tuple[1];
		if (!(line === ($sliceType($Uint8)).nil)) {
			buf = ($sliceType($Uint8)).make(line.$length);
			$copySlice(buf, line);
			line = buf;
		}
		return [line, err];
	};
	Reader.prototype.ReadContinuedLineBytes = function() { return this.$val.ReadContinuedLineBytes(); };
	Reader.Ptr.prototype.readContinuedLineSlice = function() {
		var r, _tuple, line, err, _tuple$1, peek, err$1, _tuple$2, line$1, err$2;
		r = this;
		_tuple = r.readLineSlice(); line = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($sliceType($Uint8)).nil, err];
		}
		if (line.$length === 0) {
			return [line, $ifaceNil];
		}
		if (r.R.Buffered() > 1) {
			_tuple$1 = r.R.Peek(1); peek = _tuple$1[0]; err$1 = _tuple$1[1];
			if ($interfaceIsEqual(err$1, $ifaceNil) && isASCIILetter(((0 < 0 || 0 >= peek.$length) ? $throwRuntimeError("index out of range") : peek.$array[peek.$offset + 0]))) {
				return [trim(line), $ifaceNil];
			}
		}
		r.buf = $appendSlice($subslice(r.buf, 0, 0), trim(line));
		while (r.skipSpace() > 0) {
			_tuple$2 = r.readLineSlice(); line$1 = _tuple$2[0]; err$2 = _tuple$2[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				break;
			}
			r.buf = $append(r.buf, 32);
			r.buf = $appendSlice(r.buf, line$1);
		}
		return [r.buf, $ifaceNil];
	};
	Reader.prototype.readContinuedLineSlice = function() { return this.$val.readContinuedLineSlice(); };
	Reader.Ptr.prototype.skipSpace = function() {
		var r, n, _tuple, c, err;
		r = this;
		n = 0;
		while (true) {
			_tuple = r.R.ReadByte(); c = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				break;
			}
			if (!((c === 32)) && !((c === 9))) {
				r.R.UnreadByte();
				break;
			}
			n = n + (1) >> 0;
		}
		return n;
	};
	Reader.prototype.skipSpace = function() { return this.$val.skipSpace(); };
	Reader.Ptr.prototype.readCodeLine = function(expectCode) {
		var code = 0, continued = false, message = "", err = $ifaceNil, r, _tuple, line, _tuple$1;
		r = this;
		_tuple = r.ReadLine(); line = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [code, continued, message, err];
		}
		_tuple$1 = parseCodeLine(line, expectCode); code = _tuple$1[0]; continued = _tuple$1[1]; message = _tuple$1[2]; err = _tuple$1[3];
		return [code, continued, message, err];
	};
	Reader.prototype.readCodeLine = function(expectCode) { return this.$val.readCodeLine(expectCode); };
	parseCodeLine = function(line, expectCode) {
		var code = 0, continued = false, message = "", err = $ifaceNil, _tuple, _q, _q$1;
		if (line.length < 4 || !((line.charCodeAt(3) === 32)) && !((line.charCodeAt(3) === 45))) {
			err = new ProtocolError("short response: " + line);
			return [code, continued, message, err];
		}
		continued = line.charCodeAt(3) === 45;
		_tuple = strconv.Atoi(line.substring(0, 3)); code = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil)) || code < 100) {
			err = new ProtocolError("invalid response code: " + line);
			return [code, continued, message, err];
		}
		message = line.substring(4);
		if (1 <= expectCode && expectCode < 10 && !(((_q = code / 100, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) === expectCode)) || 10 <= expectCode && expectCode < 100 && !(((_q$1 = code / 10, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) === expectCode)) || 100 <= expectCode && expectCode < 1000 && !((code === expectCode))) {
			err = new Error.Ptr(code, message);
		}
		return [code, continued, message, err];
	};
	Reader.Ptr.prototype.ReadCodeLine = function(expectCode) {
		var code = 0, message = "", err = $ifaceNil, r, _tuple, continued;
		r = this;
		_tuple = r.readCodeLine(expectCode); code = _tuple[0]; continued = _tuple[1]; message = _tuple[2]; err = _tuple[3];
		if ($interfaceIsEqual(err, $ifaceNil) && continued) {
			err = new ProtocolError("unexpected multi-line response: " + message);
		}
		return [code, message, err];
	};
	Reader.prototype.ReadCodeLine = function(expectCode) { return this.$val.ReadCodeLine(expectCode); };
	Reader.Ptr.prototype.ReadResponse = function(expectCode) {
		var code = 0, message = "", err = $ifaceNil, r, _tuple, continued, _tuple$1, line, err$1, _tmp, _tmp$1, _tmp$2, code2, moreMessage, _tuple$2;
		r = this;
		_tuple = r.readCodeLine(expectCode); code = _tuple[0]; continued = _tuple[1]; message = _tuple[2]; err = _tuple[3];
		while ($interfaceIsEqual(err, $ifaceNil) && continued) {
			_tuple$1 = r.ReadLine(); line = _tuple$1[0]; err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp = 0; _tmp$1 = ""; _tmp$2 = err$1; code = _tmp; message = _tmp$1; err = _tmp$2;
				return [code, message, err];
			}
			code2 = 0;
			moreMessage = "";
			_tuple$2 = parseCodeLine(line, expectCode); code2 = _tuple$2[0]; continued = _tuple$2[1]; moreMessage = _tuple$2[2]; err$1 = _tuple$2[3];
			if (!($interfaceIsEqual(err$1, $ifaceNil)) || !((code2 === code))) {
				message = message + ("\n" + strings.TrimRight(line, "\r\n"));
				continued = true;
				continue;
			}
			message = message + ("\n" + moreMessage);
		}
		return [code, message, err];
	};
	Reader.prototype.ReadResponse = function(expectCode) { return this.$val.ReadResponse(expectCode); };
	Reader.Ptr.prototype.DotReader = function() {
		var r;
		r = this;
		r.closeDot();
		r.dot = new dotReader.Ptr(r, 0);
		return r.dot;
	};
	Reader.prototype.DotReader = function() { return this.$val.DotReader(); };
	dotReader.Ptr.prototype.Read = function(b) {
		var n = 0, err = $ifaceNil, d, br, c, _tuple, _ref;
		d = this;
		br = d.r.R;
		while (n < b.$length && !((d.state === 5))) {
			c = 0;
			_tuple = br.ReadByte(); c = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if ($interfaceIsEqual(err, io.EOF)) {
					err = io.ErrUnexpectedEOF;
				}
				break;
			}
			_ref = d.state;
			switch (0) { default: if (_ref === 0) {
				if (c === 46) {
					d.state = 1;
					continue;
				}
				if (c === 13) {
					d.state = 3;
					continue;
				}
				d.state = 4;
			} else if (_ref === 1) {
				if (c === 13) {
					d.state = 2;
					continue;
				}
				if (c === 10) {
					d.state = 5;
					continue;
				}
				d.state = 4;
			} else if (_ref === 2) {
				if (c === 10) {
					d.state = 5;
					continue;
				}
				br.UnreadByte();
				c = 13;
				d.state = 4;
			} else if (_ref === 3) {
				if (c === 10) {
					d.state = 0;
					break;
				}
				br.UnreadByte();
				c = 13;
				d.state = 4;
			} else if (_ref === 4) {
				if (c === 13) {
					d.state = 3;
					continue;
				}
				if (c === 10) {
					d.state = 0;
				}
			} }
			(n < 0 || n >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + n] = c;
			n = n + (1) >> 0;
		}
		if ($interfaceIsEqual(err, $ifaceNil) && (d.state === 5)) {
			err = io.EOF;
		}
		if (!($interfaceIsEqual(err, $ifaceNil)) && d.r.dot === d) {
			d.r.dot = ($ptrType(dotReader)).nil;
		}
		return [n, err];
	};
	dotReader.prototype.Read = function(b) { return this.$val.Read(b); };
	Reader.Ptr.prototype.closeDot = function() {
		var r, buf;
		r = this;
		if (r.dot === ($ptrType(dotReader)).nil) {
			return;
		}
		buf = ($sliceType($Uint8)).make(128);
		while (!(r.dot === ($ptrType(dotReader)).nil)) {
			r.dot.Read(buf);
		}
	};
	Reader.prototype.closeDot = function() { return this.$val.closeDot(); };
	Reader.Ptr.prototype.ReadDotBytes = function() {
		var r;
		r = this;
		return ioutil.ReadAll(r.DotReader());
	};
	Reader.prototype.ReadDotBytes = function() { return this.$val.ReadDotBytes(); };
	Reader.Ptr.prototype.ReadDotLines = function() {
		var r, v, err, line, _tuple;
		r = this;
		v = ($sliceType($String)).nil;
		err = $ifaceNil;
		while (true) {
			line = "";
			_tuple = r.ReadLine(); line = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				if ($interfaceIsEqual(err, io.EOF)) {
					err = io.ErrUnexpectedEOF;
				}
				break;
			}
			if (line.length > 0 && (line.charCodeAt(0) === 46)) {
				if (line.length === 1) {
					break;
				}
				line = line.substring(1);
			}
			v = $append(v, line);
		}
		return [v, err];
	};
	Reader.prototype.ReadDotLines = function() { return this.$val.ReadDotLines(); };
	Reader.Ptr.prototype.ReadMIMEHeader = function() {
		var r, strs, hint, m, _tuple, kv, err, i, endKey, x, key, value, _entry, vv, _tmp, _tmp$1, _key, _key$1;
		r = this;
		strs = ($sliceType($String)).nil;
		hint = r.upcomingHeaderNewlines();
		if (hint > 0) {
			strs = ($sliceType($String)).make(hint);
		}
		m = new $Map();
		while (true) {
			_tuple = r.readContinuedLineSlice(); kv = _tuple[0]; err = _tuple[1];
			if (kv.$length === 0) {
				return [m, err];
			}
			i = bytes.IndexByte(kv, 58);
			if (i < 0) {
				return [m, new ProtocolError("malformed MIME header line: " + $bytesToString(kv))];
			}
			endKey = i;
			while (endKey > 0 && ((x = endKey - 1 >> 0, ((x < 0 || x >= kv.$length) ? $throwRuntimeError("index out of range") : kv.$array[kv.$offset + x])) === 32)) {
				endKey = endKey - (1) >> 0;
			}
			key = canonicalMIMEHeaderKey($subslice(kv, 0, endKey));
			i = i + (1) >> 0;
			while (i < kv.$length && ((((i < 0 || i >= kv.$length) ? $throwRuntimeError("index out of range") : kv.$array[kv.$offset + i]) === 32) || (((i < 0 || i >= kv.$length) ? $throwRuntimeError("index out of range") : kv.$array[kv.$offset + i]) === 9))) {
				i = i + (1) >> 0;
			}
			value = $bytesToString($subslice(kv, i));
			vv = (_entry = m[key], _entry !== undefined ? _entry.v : ($sliceType($String)).nil);
			if (vv === ($sliceType($String)).nil && strs.$length > 0) {
				_tmp = $subslice(strs, 0, 1, 1); _tmp$1 = $subslice(strs, 1); vv = _tmp; strs = _tmp$1;
				(0 < 0 || 0 >= vv.$length) ? $throwRuntimeError("index out of range") : vv.$array[vv.$offset + 0] = value;
				_key = key; (m || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: vv };
			} else {
				_key$1 = key; (m || $throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: $append(vv, value) };
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [m, err];
			}
		}
	};
	Reader.prototype.ReadMIMEHeader = function() { return this.$val.ReadMIMEHeader(); };
	Reader.Ptr.prototype.upcomingHeaderNewlines = function() {
		var n = 0, r, s, _tuple, peek, i;
		r = this;
		r.R.Peek(1);
		s = r.R.Buffered();
		if (s === 0) {
			return n;
		}
		_tuple = r.R.Peek(s); peek = _tuple[0];
		while (peek.$length > 0) {
			i = bytes.IndexByte(peek, 10);
			if (i < 3) {
				return n;
			}
			n = n + (1) >> 0;
			peek = $subslice(peek, (i + 1 >> 0));
		}
		return n;
	};
	Reader.prototype.upcomingHeaderNewlines = function() { return this.$val.upcomingHeaderNewlines(); };
	CanonicalMIMEHeaderKey = $pkg.CanonicalMIMEHeaderKey = function(s) {
		var upper, i, c;
		upper = true;
		i = 0;
		while (i < s.length) {
			c = s.charCodeAt(i);
			if (upper && 97 <= c && c <= 122) {
				return canonicalMIMEHeaderKey(new ($sliceType($Uint8))($stringToBytes(s)));
			}
			if (!upper && 65 <= c && c <= 90) {
				return canonicalMIMEHeaderKey(new ($sliceType($Uint8))($stringToBytes(s)));
			}
			upper = c === 45;
			i = i + (1) >> 0;
		}
		return s;
	};
	canonicalMIMEHeaderKey = function(a) {
		var upper, _ref, _i, i, c, _entry, v;
		upper = true;
		_ref = a;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (c === 32) {
				c = 45;
			} else if (upper && 97 <= c && c <= 122) {
				c = c - (32) << 24 >>> 24;
			} else if (!upper && 65 <= c && c <= 90) {
				c = c + (32) << 24 >>> 24;
			}
			(i < 0 || i >= a.$length) ? $throwRuntimeError("index out of range") : a.$array[a.$offset + i] = c;
			upper = c === 45;
			_i++;
		}
		v = (_entry = commonHeader[$bytesToString(a)], _entry !== undefined ? _entry.v : "");
		if (!(v === "")) {
			return v;
		}
		return $bytesToString(a);
	};
	init = function() {
		var _ref, _i, v, _key;
		_ref = new ($sliceType($String))(["Accept", "Accept-Charset", "Accept-Encoding", "Accept-Language", "Accept-Ranges", "Cache-Control", "Cc", "Connection", "Content-Id", "Content-Language", "Content-Length", "Content-Transfer-Encoding", "Content-Type", "Cookie", "Date", "Dkim-Signature", "Etag", "Expires", "From", "Host", "If-Modified-Since", "If-None-Match", "In-Reply-To", "Last-Modified", "Location", "Message-Id", "Mime-Version", "Pragma", "Received", "Return-Path", "Server", "Set-Cookie", "Subject", "To", "User-Agent", "Via", "X-Forwarded-For", "X-Imforwards", "X-Powered-By"]);
		_i = 0;
		while (_i < _ref.$length) {
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_key = v; (commonHeader || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: v };
			_i++;
		}
	};
	Error.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return fmt.Sprintf("%03d %s", new ($sliceType($emptyInterface))([new $Int(e.Code), new $String(e.Msg)]));
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	ProtocolError.prototype.Error = function() {
		var p;
		p = this.$val !== undefined ? this.$val : this;
		return p;
	};
	$ptrType(ProtocolError).prototype.Error = function() { return new ProtocolError(this.$get()).Error(); };
	TrimString = $pkg.TrimString = function(s) {
		while (s.length > 0 && isASCIISpace(s.charCodeAt(0))) {
			s = s.substring(1);
		}
		while (s.length > 0 && isASCIISpace(s.charCodeAt((s.length - 1 >> 0)))) {
			s = s.substring(0, (s.length - 1 >> 0));
		}
		return s;
	};
	isASCIISpace = function(b) {
		return (b === 32) || (b === 9) || (b === 10) || (b === 13);
	};
	isASCIILetter = function(b) {
		b = (b | (32)) >>> 0;
		return 97 <= b && b <= 122;
	};
	$pkg.$init = function() {
		MIMEHeader.methods = [["Add", "Add", "", $funcType([$String, $String], [], false), -1], ["Del", "Del", "", $funcType([$String], [], false), -1], ["Get", "Get", "", $funcType([$String], [$String], false), -1], ["Set", "Set", "", $funcType([$String, $String], [], false), -1]];
		($ptrType(MIMEHeader)).methods = [["Add", "Add", "", $funcType([$String, $String], [], false), -1], ["Del", "Del", "", $funcType([$String], [], false), -1], ["Get", "Get", "", $funcType([$String], [$String], false), -1], ["Set", "Set", "", $funcType([$String, $String], [], false), -1]];
		MIMEHeader.init($String, ($sliceType($String)));
		($ptrType(Reader)).methods = [["DotReader", "DotReader", "", $funcType([], [io.Reader], false), -1], ["ReadCodeLine", "ReadCodeLine", "", $funcType([$Int], [$Int, $String, $error], false), -1], ["ReadContinuedLine", "ReadContinuedLine", "", $funcType([], [$String, $error], false), -1], ["ReadContinuedLineBytes", "ReadContinuedLineBytes", "", $funcType([], [($sliceType($Uint8)), $error], false), -1], ["ReadDotBytes", "ReadDotBytes", "", $funcType([], [($sliceType($Uint8)), $error], false), -1], ["ReadDotLines", "ReadDotLines", "", $funcType([], [($sliceType($String)), $error], false), -1], ["ReadLine", "ReadLine", "", $funcType([], [$String, $error], false), -1], ["ReadLineBytes", "ReadLineBytes", "", $funcType([], [($sliceType($Uint8)), $error], false), -1], ["ReadMIMEHeader", "ReadMIMEHeader", "", $funcType([], [MIMEHeader, $error], false), -1], ["ReadResponse", "ReadResponse", "", $funcType([$Int], [$Int, $String, $error], false), -1], ["closeDot", "closeDot", "net/textproto", $funcType([], [], false), -1], ["readCodeLine", "readCodeLine", "net/textproto", $funcType([$Int], [$Int, $Bool, $String, $error], false), -1], ["readContinuedLineSlice", "readContinuedLineSlice", "net/textproto", $funcType([], [($sliceType($Uint8)), $error], false), -1], ["readLineSlice", "readLineSlice", "net/textproto", $funcType([], [($sliceType($Uint8)), $error], false), -1], ["skipSpace", "skipSpace", "net/textproto", $funcType([], [$Int], false), -1], ["upcomingHeaderNewlines", "upcomingHeaderNewlines", "net/textproto", $funcType([], [$Int], false), -1]];
		Reader.init([["R", "R", "", ($ptrType(bufio.Reader)), ""], ["dot", "dot", "net/textproto", ($ptrType(dotReader)), ""], ["buf", "buf", "net/textproto", ($sliceType($Uint8)), ""]]);
		($ptrType(dotReader)).methods = [["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1]];
		dotReader.init([["r", "r", "net/textproto", ($ptrType(Reader)), ""], ["state", "state", "net/textproto", $Int, ""]]);
		($ptrType(Error)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		Error.init([["Code", "Code", "", $Int, ""], ["Msg", "Msg", "", $String, ""]]);
		ProtocolError.methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		($ptrType(ProtocolError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		commonHeader = new $Map();
		init();
	};
	return $pkg;
})();
$packages["mime/multipart"] = (function() {
	var $pkg = {}, bytes = $packages["bytes"], errors = $packages["errors"], io = $packages["io"], ioutil = $packages["io/ioutil"], textproto = $packages["net/textproto"], os = $packages["os"], bufio = $packages["bufio"], fmt = $packages["fmt"], mime = $packages["mime"], rand = $packages["crypto/rand"], strings = $packages["strings"], Form, FileHeader, File, sectionReadCloser, Part, partReader, Reader, qpReader, emptyParams, crlf, lf, softSuffix, quoteEscaper, NewReader, newPart, skipLWSPChar, newQuotedPrintableReader, fromHex, isQPDiscardWhitespace;
	Form = $pkg.Form = $newType(0, "Struct", "multipart.Form", "Form", "mime/multipart", function(Value_, File_) {
		this.$val = this;
		this.Value = Value_ !== undefined ? Value_ : false;
		this.File = File_ !== undefined ? File_ : false;
	});
	FileHeader = $pkg.FileHeader = $newType(0, "Struct", "multipart.FileHeader", "FileHeader", "mime/multipart", function(Filename_, Header_, content_, tmpfile_) {
		this.$val = this;
		this.Filename = Filename_ !== undefined ? Filename_ : "";
		this.Header = Header_ !== undefined ? Header_ : false;
		this.content = content_ !== undefined ? content_ : ($sliceType($Uint8)).nil;
		this.tmpfile = tmpfile_ !== undefined ? tmpfile_ : "";
	});
	File = $pkg.File = $newType(8, "Interface", "multipart.File", "File", "mime/multipart", null);
	sectionReadCloser = $pkg.sectionReadCloser = $newType(0, "Struct", "multipart.sectionReadCloser", "sectionReadCloser", "mime/multipart", function(SectionReader_) {
		this.$val = this;
		this.SectionReader = SectionReader_ !== undefined ? SectionReader_ : ($ptrType(io.SectionReader)).nil;
	});
	Part = $pkg.Part = $newType(0, "Struct", "multipart.Part", "Part", "mime/multipart", function(Header_, buffer_, mr_, bytesRead_, disposition_, dispositionParams_, r_) {
		this.$val = this;
		this.Header = Header_ !== undefined ? Header_ : false;
		this.buffer = buffer_ !== undefined ? buffer_ : ($ptrType(bytes.Buffer)).nil;
		this.mr = mr_ !== undefined ? mr_ : ($ptrType(Reader)).nil;
		this.bytesRead = bytesRead_ !== undefined ? bytesRead_ : 0;
		this.disposition = disposition_ !== undefined ? disposition_ : "";
		this.dispositionParams = dispositionParams_ !== undefined ? dispositionParams_ : false;
		this.r = r_ !== undefined ? r_ : $ifaceNil;
	});
	partReader = $pkg.partReader = $newType(0, "Struct", "multipart.partReader", "partReader", "mime/multipart", function(p_) {
		this.$val = this;
		this.p = p_ !== undefined ? p_ : ($ptrType(Part)).nil;
	});
	Reader = $pkg.Reader = $newType(0, "Struct", "multipart.Reader", "Reader", "mime/multipart", function(bufReader_, currentPart_, partsRead_, nl_, nlDashBoundary_, dashBoundaryDash_, dashBoundary_) {
		this.$val = this;
		this.bufReader = bufReader_ !== undefined ? bufReader_ : ($ptrType(bufio.Reader)).nil;
		this.currentPart = currentPart_ !== undefined ? currentPart_ : ($ptrType(Part)).nil;
		this.partsRead = partsRead_ !== undefined ? partsRead_ : 0;
		this.nl = nl_ !== undefined ? nl_ : ($sliceType($Uint8)).nil;
		this.nlDashBoundary = nlDashBoundary_ !== undefined ? nlDashBoundary_ : ($sliceType($Uint8)).nil;
		this.dashBoundaryDash = dashBoundaryDash_ !== undefined ? dashBoundaryDash_ : ($sliceType($Uint8)).nil;
		this.dashBoundary = dashBoundary_ !== undefined ? dashBoundary_ : ($sliceType($Uint8)).nil;
	});
	qpReader = $pkg.qpReader = $newType(0, "Struct", "multipart.qpReader", "qpReader", "mime/multipart", function(br_, rerr_, line_) {
		this.$val = this;
		this.br = br_ !== undefined ? br_ : ($ptrType(bufio.Reader)).nil;
		this.rerr = rerr_ !== undefined ? rerr_ : $ifaceNil;
		this.line = line_ !== undefined ? line_ : ($sliceType($Uint8)).nil;
	});
	Reader.Ptr.prototype.ReadForm = function(maxMemory) {
		var f = ($ptrType(Form)).nil, err = $ifaceNil, $deferred = [], $err = null, r, form, maxValueBytes, _tuple, p, err$1, _tmp, _tmp$1, name, filename, b, _tuple$1, n, err$2, _tmp$2, _tmp$3, x, _tmp$4, _tmp$5, _key, _entry, fh, _tuple$2, n$1, _tmp$6, _tmp$7, _tuple$3, file, err$3, _tmp$8, _tmp$9, _tuple$4, _tmp$10, _tmp$11, x$1, _key$1, _entry$1, _tmp$12, _tmp$13;
		/* */ try { $deferFrames.push($deferred);
		r = this;
		form = new Form.Ptr(new $Map(), new $Map());
		$deferred.push([(function() {
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				form.RemoveAll();
			}
		}), []]);
		maxValueBytes = new $Int64(0, 10485760);
		while (true) {
			_tuple = r.NextPart(); p = _tuple[0]; err$1 = _tuple[1];
			if ($interfaceIsEqual(err$1, io.EOF)) {
				break;
			}
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp = ($ptrType(Form)).nil; _tmp$1 = err$1; f = _tmp; err = _tmp$1;
				return [f, err];
			}
			name = p.FormName();
			if (name === "") {
				continue;
			}
			filename = p.FileName();
			b = new bytes.Buffer.Ptr(); $copy(b, new bytes.Buffer.Ptr(), bytes.Buffer);
			if (filename === "") {
				_tuple$1 = io.CopyN(b, p, maxValueBytes); n = _tuple$1[0]; err$2 = _tuple$1[1];
				if (!($interfaceIsEqual(err$2, $ifaceNil)) && !($interfaceIsEqual(err$2, io.EOF))) {
					_tmp$2 = ($ptrType(Form)).nil; _tmp$3 = err$2; f = _tmp$2; err = _tmp$3;
					return [f, err];
				}
				maxValueBytes = (x = n, new $Int64(maxValueBytes.$high - x.$high, maxValueBytes.$low - x.$low));
				if ((maxValueBytes.$high === 0 && maxValueBytes.$low === 0)) {
					_tmp$4 = ($ptrType(Form)).nil; _tmp$5 = errors.New("multipart: message too large"); f = _tmp$4; err = _tmp$5;
					return [f, err];
				}
				_key = name; (form.Value || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: $append((_entry = form.Value[name], _entry !== undefined ? _entry.v : ($sliceType($String)).nil), b.String()) };
				continue;
			}
			fh = new FileHeader.Ptr(filename, p.Header, ($sliceType($Uint8)).nil, "");
			_tuple$2 = io.CopyN(b, p, new $Int64(maxMemory.$high + 0, maxMemory.$low + 1)); n$1 = _tuple$2[0]; err$1 = _tuple$2[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil)) && !($interfaceIsEqual(err$1, io.EOF))) {
				_tmp$6 = ($ptrType(Form)).nil; _tmp$7 = err$1; f = _tmp$6; err = _tmp$7;
				return [f, err];
			}
			if ((n$1.$high > maxMemory.$high || (n$1.$high === maxMemory.$high && n$1.$low > maxMemory.$low))) {
				_tuple$3 = ioutil.TempFile("", "multipart-"); file = _tuple$3[0]; err$3 = _tuple$3[1];
				if (!($interfaceIsEqual(err$3, $ifaceNil))) {
					_tmp$8 = ($ptrType(Form)).nil; _tmp$9 = err$3; f = _tmp$8; err = _tmp$9;
					return [f, err];
				}
				$deferred.push([$methodVal(file, "Close"), []]);
				_tuple$4 = io.Copy(file, io.MultiReader(new ($sliceType(io.Reader))([b, p]))); err$3 = _tuple$4[1];
				if (!($interfaceIsEqual(err$3, $ifaceNil))) {
					os.Remove(file.Name());
					_tmp$10 = ($ptrType(Form)).nil; _tmp$11 = err$3; f = _tmp$10; err = _tmp$11;
					return [f, err];
				}
				fh.tmpfile = file.Name();
			} else {
				fh.content = b.Bytes();
				maxMemory = (x$1 = n$1, new $Int64(maxMemory.$high - x$1.$high, maxMemory.$low - x$1.$low));
			}
			_key$1 = name; (form.File || $throwRuntimeError("assignment to entry in nil map"))[_key$1] = { k: _key$1, v: $append((_entry$1 = form.File[name], _entry$1 !== undefined ? _entry$1.v : ($sliceType(($ptrType(FileHeader)))).nil), fh) };
		}
		_tmp$12 = form; _tmp$13 = $ifaceNil; f = _tmp$12; err = _tmp$13;
		return [f, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [f, err]; }
	};
	Reader.prototype.ReadForm = function(maxMemory) { return this.$val.ReadForm(maxMemory); };
	Form.Ptr.prototype.RemoveAll = function() {
		var f, err, _ref, _i, _keys, _entry, fhs, _ref$1, _i$1, fh, e;
		f = this;
		err = $ifaceNil;
		_ref = f.File;
		_i = 0;
		_keys = $keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			fhs = _entry.v;
			_ref$1 = fhs;
			_i$1 = 0;
			while (_i$1 < _ref$1.$length) {
				fh = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				if (!(fh.tmpfile === "")) {
					e = os.Remove(fh.tmpfile);
					if (!($interfaceIsEqual(e, $ifaceNil)) && $interfaceIsEqual(err, $ifaceNil)) {
						err = e;
					}
				}
				_i$1++;
			}
			_i++;
		}
		return err;
	};
	Form.prototype.RemoveAll = function() { return this.$val.RemoveAll(); };
	FileHeader.Ptr.prototype.Open = function() {
		var fh, b, r, x;
		fh = this;
		b = fh.content;
		if (!(b === ($sliceType($Uint8)).nil)) {
			r = io.NewSectionReader(bytes.NewReader(b), new $Int64(0, 0), new $Int64(0, b.$length));
			return [(x = new sectionReadCloser.Ptr(r), new x.constructor.Struct(x)), $ifaceNil];
		}
		return os.Open(fh.tmpfile);
	};
	FileHeader.prototype.Open = function() { return this.$val.Open(); };
	sectionReadCloser.Ptr.prototype.Close = function() {
		var rc;
		rc = new sectionReadCloser.Ptr(); $copy(rc, this, sectionReadCloser);
		return $ifaceNil;
	};
	sectionReadCloser.prototype.Close = function() { return this.$val.Close(); };
	Part.Ptr.prototype.FormName = function() {
		var p, _entry;
		p = this;
		if (p.dispositionParams === false) {
			p.parseContentDisposition();
		}
		if (!(p.disposition === "form-data")) {
			return "";
		}
		return (_entry = p.dispositionParams["name"], _entry !== undefined ? _entry.v : "");
	};
	Part.prototype.FormName = function() { return this.$val.FormName(); };
	Part.Ptr.prototype.FileName = function() {
		var p, _entry;
		p = this;
		if (p.dispositionParams === false) {
			p.parseContentDisposition();
		}
		return (_entry = p.dispositionParams["filename"], _entry !== undefined ? _entry.v : "");
	};
	Part.prototype.FileName = function() { return this.$val.FileName(); };
	Part.Ptr.prototype.parseContentDisposition = function() {
		var p, v, err, _tuple;
		p = this;
		v = new textproto.MIMEHeader(p.Header).Get("Content-Disposition");
		err = $ifaceNil;
		_tuple = mime.ParseMediaType(v); p.disposition = _tuple[0]; p.dispositionParams = _tuple[1]; err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			p.dispositionParams = emptyParams;
		}
	};
	Part.prototype.parseContentDisposition = function() { return this.$val.parseContentDisposition(); };
	NewReader = $pkg.NewReader = function(r, boundary) {
		var b;
		b = new ($sliceType($Uint8))($stringToBytes("\r\n--" + boundary + "--"));
		return new Reader.Ptr(bufio.NewReader(r), ($ptrType(Part)).nil, 0, $subslice(b, 0, 2), $subslice(b, 0, (b.$length - 2 >> 0)), $subslice(b, 2), $subslice(b, 2, (b.$length - 2 >> 0)));
	};
	newPart = function(mr) {
		var bp, err, x;
		bp = new Part.Ptr(new $Map(), new bytes.Buffer.Ptr(), mr, 0, "", false, $ifaceNil);
		err = bp.populateHeaders();
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($ptrType(Part)).nil, err];
		}
		bp.r = (x = new partReader.Ptr(bp), new x.constructor.Struct(x));
		if (new textproto.MIMEHeader(bp.Header).Get("Content-Transfer-Encoding") === "quoted-printable") {
			new textproto.MIMEHeader(bp.Header).Del("Content-Transfer-Encoding");
			bp.r = newQuotedPrintableReader(bp.r);
		}
		return [bp, $ifaceNil];
	};
	Part.Ptr.prototype.populateHeaders = function() {
		var bp, r, _tuple, header, err;
		bp = this;
		r = textproto.NewReader(bp.mr.bufReader);
		_tuple = r.ReadMIMEHeader(); header = _tuple[0]; err = _tuple[1];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			bp.Header = header;
		}
		return err;
	};
	Part.prototype.populateHeaders = function() { return this.$val.populateHeaders(); };
	Part.Ptr.prototype.Read = function(d) {
		var n = 0, err = $ifaceNil, p, _tuple;
		p = this;
		_tuple = p.r.Read(d); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	Part.prototype.Read = function(d) { return this.$val.Read(d); };
	partReader.Ptr.prototype.Read = function(d) {
		var n = 0, err = $ifaceNil, $deferred = [], $err = null, pr, p, _tuple, _tuple$1, peek, _tmp, _tmp$1, unexpectedEOF, _tmp$2, _tmp$3, nCopy, foundBoundary, idx, safeCount, _tmp$4, _tmp$5, _tuple$2, err$1, _tmp$6, _tmp$7, _tuple$3;
		/* */ try { $deferFrames.push($deferred);
		pr = new partReader.Ptr(); $copy(pr, this, partReader);
		p = pr.p;
		$deferred.push([(function() {
			p.bytesRead = p.bytesRead + (n) >> 0;
		}), []]);
		if (p.buffer.Len() >= d.$length) {
			_tuple = p.buffer.Read(d); n = _tuple[0]; err = _tuple[1];
			return [n, err];
		}
		_tuple$1 = p.mr.bufReader.Peek(4096); peek = _tuple$1[0]; err = _tuple$1[1];
		if ((p.bytesRead === 0) && p.mr.peekBufferIsEmptyPart(peek)) {
			_tmp = 0; _tmp$1 = io.EOF; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		unexpectedEOF = $interfaceIsEqual(err, io.EOF);
		if (!($interfaceIsEqual(err, $ifaceNil)) && !unexpectedEOF) {
			_tmp$2 = 0; _tmp$3 = fmt.Errorf("multipart: Part Read: %v", new ($sliceType($emptyInterface))([err])); n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		if (peek === ($sliceType($Uint8)).nil) {
			$panic(new $String("nil peek buf"));
		}
		nCopy = 0;
		foundBoundary = false;
		idx = bytes.Index(peek, p.mr.nlDashBoundary);
		if (!((idx === -1))) {
			nCopy = idx;
			foundBoundary = true;
		} else {
			safeCount = peek.$length - p.mr.nlDashBoundary.$length >> 0;
			if (safeCount > 0) {
				nCopy = safeCount;
			} else if (unexpectedEOF) {
				_tmp$4 = 0; _tmp$5 = io.ErrUnexpectedEOF; n = _tmp$4; err = _tmp$5;
				return [n, err];
			}
		}
		if (nCopy > 0) {
			_tuple$2 = io.CopyN(p.buffer, p.mr.bufReader, new $Int64(0, nCopy)); err$1 = _tuple$2[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp$6 = 0; _tmp$7 = err$1; n = _tmp$6; err = _tmp$7;
				return [n, err];
			}
		}
		_tuple$3 = p.buffer.Read(d); n = _tuple$3[0]; err = _tuple$3[1];
		if ($interfaceIsEqual(err, io.EOF) && !foundBoundary) {
			err = $ifaceNil;
		}
		return [n, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [n, err]; }
	};
	partReader.prototype.Read = function(d) { return this.$val.Read(d); };
	Part.Ptr.prototype.Close = function() {
		var p;
		p = this;
		io.Copy(ioutil.Discard, p);
		return $ifaceNil;
	};
	Part.prototype.Close = function() { return this.$val.Close(); };
	Reader.Ptr.prototype.NextPart = function() {
		var r, expectNewPart, _tuple, line, err, _tuple$1, bp, err$1;
		r = this;
		if (!(r.currentPart === ($ptrType(Part)).nil)) {
			r.currentPart.Close();
		}
		expectNewPart = false;
		while (true) {
			_tuple = r.bufReader.ReadSlice(10); line = _tuple[0]; err = _tuple[1];
			if ($interfaceIsEqual(err, io.EOF) && r.isFinalBoundary(line)) {
				return [($ptrType(Part)).nil, io.EOF];
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [($ptrType(Part)).nil, fmt.Errorf("multipart: NextPart: %v", new ($sliceType($emptyInterface))([err]))];
			}
			if (r.isBoundaryDelimiterLine(line)) {
				r.partsRead = r.partsRead + (1) >> 0;
				_tuple$1 = newPart(r); bp = _tuple$1[0]; err$1 = _tuple$1[1];
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					return [($ptrType(Part)).nil, err$1];
				}
				r.currentPart = bp;
				return [bp, $ifaceNil];
			}
			if (r.isFinalBoundary(line)) {
				return [($ptrType(Part)).nil, io.EOF];
			}
			if (expectNewPart) {
				return [($ptrType(Part)).nil, fmt.Errorf("multipart: expecting a new Part; got line %q", new ($sliceType($emptyInterface))([new $String($bytesToString(line))]))];
			}
			if (r.partsRead === 0) {
				continue;
			}
			if (bytes.Equal(line, r.nl)) {
				expectNewPart = true;
				continue;
			}
			return [($ptrType(Part)).nil, fmt.Errorf("multipart: unexpected line in Next(): %q", new ($sliceType($emptyInterface))([line]))];
		}
	};
	Reader.prototype.NextPart = function() { return this.$val.NextPart(); };
	Reader.Ptr.prototype.isFinalBoundary = function(line) {
		var mr, rest;
		mr = this;
		if (!bytes.HasPrefix(line, mr.dashBoundaryDash)) {
			return false;
		}
		rest = $subslice(line, mr.dashBoundaryDash.$length);
		rest = skipLWSPChar(rest);
		return (rest.$length === 0) || bytes.Equal(rest, mr.nl);
	};
	Reader.prototype.isFinalBoundary = function(line) { return this.$val.isFinalBoundary(line); };
	Reader.Ptr.prototype.isBoundaryDelimiterLine = function(line) {
		var ret = false, mr, rest;
		mr = this;
		if (!bytes.HasPrefix(line, mr.dashBoundary)) {
			ret = false;
			return ret;
		}
		rest = $subslice(line, mr.dashBoundary.$length);
		rest = skipLWSPChar(rest);
		if ((mr.partsRead === 0) && (rest.$length === 1) && (((0 < 0 || 0 >= rest.$length) ? $throwRuntimeError("index out of range") : rest.$array[rest.$offset + 0]) === 10)) {
			mr.nl = $subslice(mr.nl, 1);
			mr.nlDashBoundary = $subslice(mr.nlDashBoundary, 1);
		}
		ret = bytes.Equal(rest, mr.nl);
		return ret;
	};
	Reader.prototype.isBoundaryDelimiterLine = function(line) { return this.$val.isBoundaryDelimiterLine(line); };
	Reader.Ptr.prototype.peekBufferIsEmptyPart = function(peek) {
		var mr, rest, rest$1;
		mr = this;
		if (bytes.HasPrefix(peek, mr.dashBoundaryDash)) {
			rest = $subslice(peek, mr.dashBoundaryDash.$length);
			rest = skipLWSPChar(rest);
			return bytes.HasPrefix(rest, mr.nl) || (rest.$length === 0);
		}
		if (!bytes.HasPrefix(peek, mr.dashBoundary)) {
			return false;
		}
		rest$1 = $subslice(peek, mr.dashBoundary.$length);
		rest$1 = skipLWSPChar(rest$1);
		return bytes.HasPrefix(rest$1, mr.nl);
	};
	Reader.prototype.peekBufferIsEmptyPart = function(peek) { return this.$val.peekBufferIsEmptyPart(peek); };
	skipLWSPChar = function(b) {
		while (b.$length > 0 && ((((0 < 0 || 0 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 0]) === 32) || (((0 < 0 || 0 >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + 0]) === 9))) {
			b = $subslice(b, 1);
		}
		return b;
	};
	newQuotedPrintableReader = function(r) {
		return new qpReader.Ptr(bufio.NewReader(r), $ifaceNil, ($sliceType($Uint8)).nil);
	};
	fromHex = function(b) {
		if (b >= 48 && b <= 57) {
			return [b - 48 << 24 >>> 24, $ifaceNil];
		} else if (b >= 65 && b <= 70) {
			return [(b - 65 << 24 >>> 24) + 10 << 24 >>> 24, $ifaceNil];
		}
		return [0, fmt.Errorf("multipart: invalid quoted-printable hex byte 0x%02x", new ($sliceType($emptyInterface))([new $Uint8(b)]))];
	};
	qpReader.Ptr.prototype.readHexByte = function(v) {
		var b = 0, err = $ifaceNil, q, _tmp, _tmp$1, _tmp$2, _tmp$3, hb, lb, _tuple, _tmp$4, _tmp$5, _tuple$1, _tmp$6, _tmp$7, _tmp$8, _tmp$9;
		q = this;
		if (v.$length < 2) {
			_tmp = 0; _tmp$1 = io.ErrUnexpectedEOF; b = _tmp; err = _tmp$1;
			return [b, err];
		}
		_tmp$2 = 0; _tmp$3 = 0; hb = _tmp$2; lb = _tmp$3;
		_tuple = fromHex(((0 < 0 || 0 >= v.$length) ? $throwRuntimeError("index out of range") : v.$array[v.$offset + 0])); hb = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$4 = 0; _tmp$5 = err; b = _tmp$4; err = _tmp$5;
			return [b, err];
		}
		_tuple$1 = fromHex(((1 < 0 || 1 >= v.$length) ? $throwRuntimeError("index out of range") : v.$array[v.$offset + 1])); lb = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$6 = 0; _tmp$7 = err; b = _tmp$6; err = _tmp$7;
			return [b, err];
		}
		_tmp$8 = ((hb << 4 << 24 >>> 24) | lb) >>> 0; _tmp$9 = $ifaceNil; b = _tmp$8; err = _tmp$9;
		return [b, err];
	};
	qpReader.prototype.readHexByte = function(v) { return this.$val.readHexByte(v); };
	isQPDiscardWhitespace = function(r) {
		var _ref;
		_ref = r;
		if (_ref === 10 || _ref === 13 || _ref === 32 || _ref === 9) {
			return true;
		}
		return false;
	};
	qpReader.Ptr.prototype.Read = function(p) {
		var n = 0, err = $ifaceNil, q, _tmp, _tmp$1, _tuple, hasLF, hasCR, wholeLine, rightStripped, x, b, _tuple$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7;
		q = this;
		while (p.$length > 0) {
			if (q.line.$length === 0) {
				if (!($interfaceIsEqual(q.rerr, $ifaceNil))) {
					_tmp = n; _tmp$1 = q.rerr; n = _tmp; err = _tmp$1;
					return [n, err];
				}
				_tuple = q.br.ReadSlice(10); q.line = _tuple[0]; q.rerr = _tuple[1];
				hasLF = bytes.HasSuffix(q.line, lf);
				hasCR = bytes.HasSuffix(q.line, crlf);
				wholeLine = q.line;
				q.line = bytes.TrimRightFunc(wholeLine, isQPDiscardWhitespace);
				if (bytes.HasSuffix(q.line, softSuffix)) {
					rightStripped = $subslice(wholeLine, q.line.$length);
					q.line = $subslice(q.line, 0, (q.line.$length - 1 >> 0));
					if (!bytes.HasPrefix(rightStripped, lf) && !bytes.HasPrefix(rightStripped, crlf)) {
						q.rerr = fmt.Errorf("multipart: invalid bytes after =: %q", new ($sliceType($emptyInterface))([rightStripped]));
					}
				} else if (hasLF) {
					if (hasCR) {
						q.line = $append(q.line, 13, 10);
					} else {
						q.line = $append(q.line, 10);
					}
				}
				continue;
			}
			b = (x = q.line, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0]));
			switch (0) { default: if (b === 61) {
				_tuple$1 = q.readHexByte($subslice(q.line, 1)); b = _tuple$1[0]; err = _tuple$1[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					_tmp$2 = n; _tmp$3 = err; n = _tmp$2; err = _tmp$3;
					return [n, err];
				}
				q.line = $subslice(q.line, 2);
			} else if ((b === 9) || (b === 13) || (b === 10)) {
				break;
			} else if (b < 32 || b > 126) {
				_tmp$4 = n; _tmp$5 = fmt.Errorf("multipart: invalid unescaped byte 0x%02x in quoted-printable body", new ($sliceType($emptyInterface))([new $Uint8(b)])); n = _tmp$4; err = _tmp$5;
				return [n, err];
			} }
			(0 < 0 || 0 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0] = b;
			p = $subslice(p, 1);
			q.line = $subslice(q.line, 1);
			n = n + (1) >> 0;
		}
		_tmp$6 = n; _tmp$7 = $ifaceNil; n = _tmp$6; err = _tmp$7;
		return [n, err];
	};
	qpReader.prototype.Read = function(p) { return this.$val.Read(p); };
	$pkg.$init = function() {
		($ptrType(Form)).methods = [["RemoveAll", "RemoveAll", "", $funcType([], [$error], false), -1]];
		Form.init([["Value", "Value", "", ($mapType($String, ($sliceType($String)))), ""], ["File", "File", "", ($mapType($String, ($sliceType(($ptrType(FileHeader)))))), ""]]);
		($ptrType(FileHeader)).methods = [["Open", "Open", "", $funcType([], [File, $error], false), -1]];
		FileHeader.init([["Filename", "Filename", "", $String, ""], ["Header", "Header", "", textproto.MIMEHeader, ""], ["content", "content", "mime/multipart", ($sliceType($Uint8)), ""], ["tmpfile", "tmpfile", "mime/multipart", $String, ""]]);
		File.init([["Close", "Close", "", $funcType([], [$error], false)], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false)], ["ReadAt", "ReadAt", "", $funcType([($sliceType($Uint8)), $Int64], [$Int, $error], false)], ["Seek", "Seek", "", $funcType([$Int64, $Int], [$Int64, $error], false)]]);
		sectionReadCloser.methods = [["Close", "Close", "", $funcType([], [$error], false), -1], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0], ["ReadAt", "ReadAt", "", $funcType([($sliceType($Uint8)), $Int64], [$Int, $error], false), 0], ["Seek", "Seek", "", $funcType([$Int64, $Int], [$Int64, $error], false), 0], ["Size", "Size", "", $funcType([], [$Int64], false), 0]];
		($ptrType(sectionReadCloser)).methods = [["Close", "Close", "", $funcType([], [$error], false), -1], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0], ["ReadAt", "ReadAt", "", $funcType([($sliceType($Uint8)), $Int64], [$Int, $error], false), 0], ["Seek", "Seek", "", $funcType([$Int64, $Int], [$Int64, $error], false), 0], ["Size", "Size", "", $funcType([], [$Int64], false), 0]];
		sectionReadCloser.init([["SectionReader", "", "", ($ptrType(io.SectionReader)), ""]]);
		($ptrType(Part)).methods = [["Close", "Close", "", $funcType([], [$error], false), -1], ["FileName", "FileName", "", $funcType([], [$String], false), -1], ["FormName", "FormName", "", $funcType([], [$String], false), -1], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["parseContentDisposition", "parseContentDisposition", "mime/multipart", $funcType([], [], false), -1], ["populateHeaders", "populateHeaders", "mime/multipart", $funcType([], [$error], false), -1]];
		Part.init([["Header", "Header", "", textproto.MIMEHeader, ""], ["buffer", "buffer", "mime/multipart", ($ptrType(bytes.Buffer)), ""], ["mr", "mr", "mime/multipart", ($ptrType(Reader)), ""], ["bytesRead", "bytesRead", "mime/multipart", $Int, ""], ["disposition", "disposition", "mime/multipart", $String, ""], ["dispositionParams", "dispositionParams", "mime/multipart", ($mapType($String, $String)), ""], ["r", "r", "mime/multipart", io.Reader, ""]]);
		partReader.methods = [["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1]];
		($ptrType(partReader)).methods = [["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1]];
		partReader.init([["p", "p", "mime/multipart", ($ptrType(Part)), ""]]);
		($ptrType(Reader)).methods = [["NextPart", "NextPart", "", $funcType([], [($ptrType(Part)), $error], false), -1], ["ReadForm", "ReadForm", "", $funcType([$Int64], [($ptrType(Form)), $error], false), -1], ["isBoundaryDelimiterLine", "isBoundaryDelimiterLine", "mime/multipart", $funcType([($sliceType($Uint8))], [$Bool], false), -1], ["isFinalBoundary", "isFinalBoundary", "mime/multipart", $funcType([($sliceType($Uint8))], [$Bool], false), -1], ["peekBufferIsEmptyPart", "peekBufferIsEmptyPart", "mime/multipart", $funcType([($sliceType($Uint8))], [$Bool], false), -1]];
		Reader.init([["bufReader", "bufReader", "mime/multipart", ($ptrType(bufio.Reader)), ""], ["currentPart", "currentPart", "mime/multipart", ($ptrType(Part)), ""], ["partsRead", "partsRead", "mime/multipart", $Int, ""], ["nl", "nl", "mime/multipart", ($sliceType($Uint8)), ""], ["nlDashBoundary", "nlDashBoundary", "mime/multipart", ($sliceType($Uint8)), ""], ["dashBoundaryDash", "dashBoundaryDash", "mime/multipart", ($sliceType($Uint8)), ""], ["dashBoundary", "dashBoundary", "mime/multipart", ($sliceType($Uint8)), ""]]);
		($ptrType(qpReader)).methods = [["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["readHexByte", "readHexByte", "mime/multipart", $funcType([($sliceType($Uint8))], [$Uint8, $error], false), -1]];
		qpReader.init([["br", "br", "mime/multipart", ($ptrType(bufio.Reader)), ""], ["rerr", "rerr", "mime/multipart", $error, ""], ["line", "line", "mime/multipart", ($sliceType($Uint8)), ""]]);
		emptyParams = new $Map();
		crlf = new ($sliceType($Uint8))($stringToBytes("\r\n"));
		lf = new ($sliceType($Uint8))($stringToBytes("\n"));
		softSuffix = new ($sliceType($Uint8))($stringToBytes("="));
		quoteEscaper = strings.NewReplacer(new ($sliceType($String))(["\\", "\\\\", "\"", "\\\""]));
	};
	return $pkg;
})();
$packages["net/url"] = (function() {
	var $pkg = {}, bytes = $packages["bytes"], errors = $packages["errors"], sort = $packages["sort"], strconv = $packages["strconv"], strings = $packages["strings"], Error, EscapeError, URL, Userinfo, Values, ishex, unhex, shouldEscape, QueryUnescape, unescape, QueryEscape, escape, User, UserPassword, getscheme, split, Parse, ParseRequestURI, parse, parseAuthority, ParseQuery, parseQuery, resolvePath;
	Error = $pkg.Error = $newType(0, "Struct", "url.Error", "Error", "net/url", function(Op_, URL_, Err_) {
		this.$val = this;
		this.Op = Op_ !== undefined ? Op_ : "";
		this.URL = URL_ !== undefined ? URL_ : "";
		this.Err = Err_ !== undefined ? Err_ : $ifaceNil;
	});
	EscapeError = $pkg.EscapeError = $newType(8, "String", "url.EscapeError", "EscapeError", "net/url", null);
	URL = $pkg.URL = $newType(0, "Struct", "url.URL", "URL", "net/url", function(Scheme_, Opaque_, User_, Host_, Path_, RawQuery_, Fragment_) {
		this.$val = this;
		this.Scheme = Scheme_ !== undefined ? Scheme_ : "";
		this.Opaque = Opaque_ !== undefined ? Opaque_ : "";
		this.User = User_ !== undefined ? User_ : ($ptrType(Userinfo)).nil;
		this.Host = Host_ !== undefined ? Host_ : "";
		this.Path = Path_ !== undefined ? Path_ : "";
		this.RawQuery = RawQuery_ !== undefined ? RawQuery_ : "";
		this.Fragment = Fragment_ !== undefined ? Fragment_ : "";
	});
	Userinfo = $pkg.Userinfo = $newType(0, "Struct", "url.Userinfo", "Userinfo", "net/url", function(username_, password_, passwordSet_) {
		this.$val = this;
		this.username = username_ !== undefined ? username_ : "";
		this.password = password_ !== undefined ? password_ : "";
		this.passwordSet = passwordSet_ !== undefined ? passwordSet_ : false;
	});
	Values = $pkg.Values = $newType(4, "Map", "url.Values", "Values", "net/url", null);
	Error.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return e.Op + " " + e.URL + ": " + e.Err.Error();
	};
	Error.prototype.Error = function() { return this.$val.Error(); };
	ishex = function(c) {
		if (48 <= c && c <= 57) {
			return true;
		} else if (97 <= c && c <= 102) {
			return true;
		} else if (65 <= c && c <= 70) {
			return true;
		}
		return false;
	};
	unhex = function(c) {
		if (48 <= c && c <= 57) {
			return c - 48 << 24 >>> 24;
		} else if (97 <= c && c <= 102) {
			return (c - 97 << 24 >>> 24) + 10 << 24 >>> 24;
		} else if (65 <= c && c <= 70) {
			return (c - 65 << 24 >>> 24) + 10 << 24 >>> 24;
		}
		return 0;
	};
	EscapeError.prototype.Error = function() {
		var e;
		e = this.$val !== undefined ? this.$val : this;
		return "invalid URL escape " + strconv.Quote(e);
	};
	$ptrType(EscapeError).prototype.Error = function() { return new EscapeError(this.$get()).Error(); };
	shouldEscape = function(c, mode) {
		var _ref, _ref$1;
		if (65 <= c && c <= 90 || 97 <= c && c <= 122 || 48 <= c && c <= 57) {
			return false;
		}
		_ref = c;
		if (_ref === 45 || _ref === 95 || _ref === 46 || _ref === 126) {
			return false;
		} else if (_ref === 36 || _ref === 38 || _ref === 43 || _ref === 44 || _ref === 47 || _ref === 58 || _ref === 59 || _ref === 61 || _ref === 63 || _ref === 64) {
			_ref$1 = mode;
			if (_ref$1 === 1) {
				return c === 63;
			} else if (_ref$1 === 2) {
				return (c === 64) || (c === 47) || (c === 58);
			} else if (_ref$1 === 3) {
				return true;
			} else if (_ref$1 === 4) {
				return false;
			}
		}
		return true;
	};
	QueryUnescape = $pkg.QueryUnescape = function(s) {
		return unescape(s, 3);
	};
	unescape = function(s, mode) {
		var n, hasPlus, i, _ref, t, j, i$1, _ref$1;
		n = 0;
		hasPlus = false;
		i = 0;
		while (i < s.length) {
			_ref = s.charCodeAt(i);
			if (_ref === 37) {
				n = n + (1) >> 0;
				if ((i + 2 >> 0) >= s.length || !ishex(s.charCodeAt((i + 1 >> 0))) || !ishex(s.charCodeAt((i + 2 >> 0)))) {
					s = s.substring(i);
					if (s.length > 3) {
						s = s.substring(0, 3);
					}
					return ["", new EscapeError(s)];
				}
				i = i + (3) >> 0;
			} else if (_ref === 43) {
				hasPlus = mode === 3;
				i = i + (1) >> 0;
			} else {
				i = i + (1) >> 0;
			}
		}
		if ((n === 0) && !hasPlus) {
			return [s, $ifaceNil];
		}
		t = ($sliceType($Uint8)).make((s.length - ((((2 >>> 16 << 16) * n >> 0) + (2 << 16 >>> 16) * n) >> 0) >> 0));
		j = 0;
		i$1 = 0;
		while (i$1 < s.length) {
			_ref$1 = s.charCodeAt(i$1);
			if (_ref$1 === 37) {
				(j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = ((unhex(s.charCodeAt((i$1 + 1 >> 0))) << 4 << 24 >>> 24) | unhex(s.charCodeAt((i$1 + 2 >> 0)))) >>> 0;
				j = j + (1) >> 0;
				i$1 = i$1 + (3) >> 0;
			} else if (_ref$1 === 43) {
				if (mode === 3) {
					(j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = 32;
				} else {
					(j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = 43;
				}
				j = j + (1) >> 0;
				i$1 = i$1 + (1) >> 0;
			} else {
				(j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = s.charCodeAt(i$1);
				j = j + (1) >> 0;
				i$1 = i$1 + (1) >> 0;
			}
		}
		return [$bytesToString(t), $ifaceNil];
	};
	QueryEscape = $pkg.QueryEscape = function(s) {
		return escape(s, 3);
	};
	escape = function(s, mode) {
		var _tmp, _tmp$1, spaceCount, hexCount, i, c, t, j, i$1, c$1, x, x$1;
		_tmp = 0; _tmp$1 = 0; spaceCount = _tmp; hexCount = _tmp$1;
		i = 0;
		while (i < s.length) {
			c = s.charCodeAt(i);
			if (shouldEscape(c, mode)) {
				if ((c === 32) && (mode === 3)) {
					spaceCount = spaceCount + (1) >> 0;
				} else {
					hexCount = hexCount + (1) >> 0;
				}
			}
			i = i + (1) >> 0;
		}
		if ((spaceCount === 0) && (hexCount === 0)) {
			return s;
		}
		t = ($sliceType($Uint8)).make((s.length + ((((2 >>> 16 << 16) * hexCount >> 0) + (2 << 16 >>> 16) * hexCount) >> 0) >> 0));
		j = 0;
		i$1 = 0;
		while (i$1 < s.length) {
			c$1 = s.charCodeAt(i$1);
			if ((c$1 === 32) && (mode === 3)) {
				(j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = 43;
				j = j + (1) >> 0;
			} else if (shouldEscape(c$1, mode)) {
				(j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = 37;
				(x = j + 1 >> 0, (x < 0 || x >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + x] = "0123456789ABCDEF".charCodeAt((c$1 >>> 4 << 24 >>> 24)));
				(x$1 = j + 2 >> 0, (x$1 < 0 || x$1 >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + x$1] = "0123456789ABCDEF".charCodeAt(((c$1 & 15) >>> 0)));
				j = j + (3) >> 0;
			} else {
				(j < 0 || j >= t.$length) ? $throwRuntimeError("index out of range") : t.$array[t.$offset + j] = s.charCodeAt(i$1);
				j = j + (1) >> 0;
			}
			i$1 = i$1 + (1) >> 0;
		}
		return $bytesToString(t);
	};
	User = $pkg.User = function(username) {
		return new Userinfo.Ptr(username, "", false);
	};
	UserPassword = $pkg.UserPassword = function(username, password) {
		return new Userinfo.Ptr(username, password, true);
	};
	Userinfo.Ptr.prototype.Username = function() {
		var u;
		u = this;
		return u.username;
	};
	Userinfo.prototype.Username = function() { return this.$val.Username(); };
	Userinfo.Ptr.prototype.Password = function() {
		var u;
		u = this;
		if (u.passwordSet) {
			return [u.password, true];
		}
		return ["", false];
	};
	Userinfo.prototype.Password = function() { return this.$val.Password(); };
	Userinfo.Ptr.prototype.String = function() {
		var u, s;
		u = this;
		s = escape(u.username, 2);
		if (u.passwordSet) {
			s = s + (":" + escape(u.password, 2));
		}
		return s;
	};
	Userinfo.prototype.String = function() { return this.$val.String(); };
	getscheme = function(rawurl) {
		var scheme = "", path = "", err = $ifaceNil, i, c, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, _tmp$9, _tmp$10, _tmp$11, _tmp$12, _tmp$13, _tmp$14;
		i = 0;
		while (i < rawurl.length) {
			c = rawurl.charCodeAt(i);
			if (97 <= c && c <= 122 || 65 <= c && c <= 90) {
			} else if (48 <= c && c <= 57 || (c === 43) || (c === 45) || (c === 46)) {
				if (i === 0) {
					_tmp = ""; _tmp$1 = rawurl; _tmp$2 = $ifaceNil; scheme = _tmp; path = _tmp$1; err = _tmp$2;
					return [scheme, path, err];
				}
			} else if (c === 58) {
				if (i === 0) {
					_tmp$3 = ""; _tmp$4 = ""; _tmp$5 = errors.New("missing protocol scheme"); scheme = _tmp$3; path = _tmp$4; err = _tmp$5;
					return [scheme, path, err];
				}
				_tmp$6 = rawurl.substring(0, i); _tmp$7 = rawurl.substring((i + 1 >> 0)); _tmp$8 = $ifaceNil; scheme = _tmp$6; path = _tmp$7; err = _tmp$8;
				return [scheme, path, err];
			} else {
				_tmp$9 = ""; _tmp$10 = rawurl; _tmp$11 = $ifaceNil; scheme = _tmp$9; path = _tmp$10; err = _tmp$11;
				return [scheme, path, err];
			}
			i = i + (1) >> 0;
		}
		_tmp$12 = ""; _tmp$13 = rawurl; _tmp$14 = $ifaceNil; scheme = _tmp$12; path = _tmp$13; err = _tmp$14;
		return [scheme, path, err];
	};
	split = function(s, c, cutc) {
		var i;
		i = strings.Index(s, c);
		if (i < 0) {
			return [s, ""];
		}
		if (cutc) {
			return [s.substring(0, i), s.substring((i + c.length >> 0))];
		}
		return [s.substring(0, i), s.substring(i)];
	};
	Parse = $pkg.Parse = function(rawurl) {
		var url = ($ptrType(URL)).nil, err = $ifaceNil, _tuple, u, frag, _tuple$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple$2, _tmp$4, _tmp$5, _tmp$6, _tmp$7;
		_tuple = split(rawurl, "#", true); u = _tuple[0]; frag = _tuple[1];
		_tuple$1 = parse(u, false); url = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = ($ptrType(URL)).nil; _tmp$1 = err; url = _tmp; err = _tmp$1;
			return [url, err];
		}
		if (frag === "") {
			_tmp$2 = url; _tmp$3 = $ifaceNil; url = _tmp$2; err = _tmp$3;
			return [url, err];
		}
		_tuple$2 = unescape(frag, 4); url.Fragment = _tuple$2[0]; err = _tuple$2[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$4 = ($ptrType(URL)).nil; _tmp$5 = new Error.Ptr("parse", rawurl, err); url = _tmp$4; err = _tmp$5;
			return [url, err];
		}
		_tmp$6 = url; _tmp$7 = $ifaceNil; url = _tmp$6; err = _tmp$7;
		return [url, err];
	};
	ParseRequestURI = $pkg.ParseRequestURI = function(rawurl) {
		var url = ($ptrType(URL)).nil, err = $ifaceNil, _tuple;
		_tuple = parse(rawurl, true); url = _tuple[0]; err = _tuple[1];
		return [url, err];
	};
	parse = function(rawurl, viaRequest) {
		var $this = this, $args = arguments, url = ($ptrType(URL)).nil, err = $ifaceNil, $s = 0, rest, _tuple, _tuple$1, _tmp, _tmp$1, authority, _tuple$2, _tuple$3, _tuple$4, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		/* */ s: while (true) { switch ($s) { case 0:
		rest = "";
		/* if (rawurl === "" && viaRequest) { */ if (rawurl === "" && viaRequest) {} else { $s = 2; continue; }
			err = errors.New("empty url");
			/* goto Error */ $s = 1; continue;
		/* } */ case 2:
		url = new URL.Ptr();
		if (rawurl === "*") {
			url.Path = "*";
			return [url, err];
		}
		_tuple = getscheme(rawurl); url.Scheme = _tuple[0]; rest = _tuple[1]; err = _tuple[2];
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ if (!($interfaceIsEqual(err, $ifaceNil))) {} else { $s = 3; continue; }
			/* goto Error */ $s = 1; continue;
		/* } */ case 3:
		url.Scheme = strings.ToLower(url.Scheme);
		_tuple$1 = split(rest, "?", true); rest = _tuple$1[0]; url.RawQuery = _tuple$1[1];
		/* if (!strings.HasPrefix(rest, "/")) { */ if (!strings.HasPrefix(rest, "/")) {} else { $s = 4; continue; }
			if (!(url.Scheme === "")) {
				url.Opaque = rest;
				_tmp = url; _tmp$1 = $ifaceNil; url = _tmp; err = _tmp$1;
				return [url, err];
			}
			/* if (viaRequest) { */ if (viaRequest) {} else { $s = 5; continue; }
				err = errors.New("invalid URI for request");
				/* goto Error */ $s = 1; continue;
			/* } */ case 5:
		/* } */ case 4:
		/* if ((!(url.Scheme === "") || !viaRequest && !strings.HasPrefix(rest, "///")) && strings.HasPrefix(rest, "//")) { */ if ((!(url.Scheme === "") || !viaRequest && !strings.HasPrefix(rest, "///")) && strings.HasPrefix(rest, "//")) {} else { $s = 6; continue; }
			authority = "";
			_tuple$2 = split(rest.substring(2), "/", false); authority = _tuple$2[0]; rest = _tuple$2[1];
			_tuple$3 = parseAuthority(authority); url.User = _tuple$3[0]; url.Host = _tuple$3[1]; err = _tuple$3[2];
			/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ if (!($interfaceIsEqual(err, $ifaceNil))) {} else { $s = 7; continue; }
				/* goto Error */ $s = 1; continue;
			/* } */ case 7:
			/* if (strings.Contains(url.Host, "%")) { */ if (strings.Contains(url.Host, "%")) {} else { $s = 8; continue; }
				err = errors.New("hexadecimal escape in host");
				/* goto Error */ $s = 1; continue;
			/* } */ case 8:
		/* } */ case 6:
		_tuple$4 = unescape(rest, 1); url.Path = _tuple$4[0]; err = _tuple$4[1];
		/* if (!($interfaceIsEqual(err, $ifaceNil))) { */ if (!($interfaceIsEqual(err, $ifaceNil))) {} else { $s = 9; continue; }
			/* goto Error */ $s = 1; continue;
		/* } */ case 9:
		_tmp$2 = url; _tmp$3 = $ifaceNil; url = _tmp$2; err = _tmp$3;
		return [url, err];
		/* Error: */ case 1:
		_tmp$4 = ($ptrType(URL)).nil; _tmp$5 = new Error.Ptr("parse", rawurl, err); url = _tmp$4; err = _tmp$5;
		return [url, err];
		/* */ case -1: } return; }
	};
	parseAuthority = function(authority) {
		var user = ($ptrType(Userinfo)).nil, host = "", err = $ifaceNil, i, _tmp, _tmp$1, userinfo, _tuple, _tuple$1, username, password, _tuple$2, _tuple$3;
		i = strings.LastIndex(authority, "@");
		if (i < 0) {
			host = authority;
			return [user, host, err];
		}
		_tmp = authority.substring(0, i); _tmp$1 = authority.substring((i + 1 >> 0)); userinfo = _tmp; host = _tmp$1;
		if (strings.Index(userinfo, ":") < 0) {
			_tuple = unescape(userinfo, 2); userinfo = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [user, host, err];
			}
			user = User(userinfo);
		} else {
			_tuple$1 = split(userinfo, ":", true); username = _tuple$1[0]; password = _tuple$1[1];
			_tuple$2 = unescape(username, 2); username = _tuple$2[0]; err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [user, host, err];
			}
			_tuple$3 = unescape(password, 2); password = _tuple$3[0]; err = _tuple$3[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [user, host, err];
			}
			user = UserPassword(username, password);
		}
		return [user, host, err];
	};
	URL.Ptr.prototype.String = function() {
		var u, buf, ui, h;
		u = this;
		buf = new bytes.Buffer.Ptr(); $copy(buf, new bytes.Buffer.Ptr(), bytes.Buffer);
		if (!(u.Scheme === "")) {
			buf.WriteString(u.Scheme);
			buf.WriteByte(58);
		}
		if (!(u.Opaque === "")) {
			buf.WriteString(u.Opaque);
		} else {
			if (!(u.Scheme === "") || !(u.Host === "") || !(u.User === ($ptrType(Userinfo)).nil)) {
				buf.WriteString("//");
				ui = u.User;
				if (!(ui === ($ptrType(Userinfo)).nil)) {
					buf.WriteString(ui.String());
					buf.WriteByte(64);
				}
				h = u.Host;
				if (!(h === "")) {
					buf.WriteString(h);
				}
			}
			if (!(u.Path === "") && !((u.Path.charCodeAt(0) === 47)) && !(u.Host === "")) {
				buf.WriteByte(47);
			}
			buf.WriteString(escape(u.Path, 1));
		}
		if (!(u.RawQuery === "")) {
			buf.WriteByte(63);
			buf.WriteString(u.RawQuery);
		}
		if (!(u.Fragment === "")) {
			buf.WriteByte(35);
			buf.WriteString(escape(u.Fragment, 4));
		}
		return buf.String();
	};
	URL.prototype.String = function() { return this.$val.String(); };
	Values.prototype.Get = function(key) {
		var v, _tuple, _entry, vs, ok;
		v = this.$val !== undefined ? this.$val : this;
		if (v === false) {
			return "";
		}
		_tuple = (_entry = v[key], _entry !== undefined ? [_entry.v, true] : [($sliceType($String)).nil, false]); vs = _tuple[0]; ok = _tuple[1];
		if (!ok || (vs.$length === 0)) {
			return "";
		}
		return ((0 < 0 || 0 >= vs.$length) ? $throwRuntimeError("index out of range") : vs.$array[vs.$offset + 0]);
	};
	$ptrType(Values).prototype.Get = function(key) { return new Values(this.$get()).Get(key); };
	Values.prototype.Set = function(key, value) {
		var v, _key;
		v = this.$val !== undefined ? this.$val : this;
		_key = key; (v || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: new ($sliceType($String))([value]) };
	};
	$ptrType(Values).prototype.Set = function(key, value) { return new Values(this.$get()).Set(key, value); };
	Values.prototype.Add = function(key, value) {
		var v, _key, _entry;
		v = this.$val !== undefined ? this.$val : this;
		_key = key; (v || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: $append((_entry = v[key], _entry !== undefined ? _entry.v : ($sliceType($String)).nil), value) };
	};
	$ptrType(Values).prototype.Add = function(key, value) { return new Values(this.$get()).Add(key, value); };
	Values.prototype.Del = function(key) {
		var v;
		v = this.$val !== undefined ? this.$val : this;
		delete v[key];
	};
	$ptrType(Values).prototype.Del = function(key) { return new Values(this.$get()).Del(key); };
	ParseQuery = $pkg.ParseQuery = function(query) {
		var m = false, err = $ifaceNil;
		m = new $Map();
		err = parseQuery(m, query);
		return [m, err];
	};
	parseQuery = function(m, query) {
		var err = $ifaceNil, key, i, _tmp, _tmp$1, value, i$1, _tmp$2, _tmp$3, _tuple, err1, _tuple$1, _key, _entry;
		while (!(query === "")) {
			key = query;
			i = strings.IndexAny(key, "&;");
			if (i >= 0) {
				_tmp = key.substring(0, i); _tmp$1 = key.substring((i + 1 >> 0)); key = _tmp; query = _tmp$1;
			} else {
				query = "";
			}
			if (key === "") {
				continue;
			}
			value = "";
			i$1 = strings.Index(key, "=");
			if (i$1 >= 0) {
				_tmp$2 = key.substring(0, i$1); _tmp$3 = key.substring((i$1 + 1 >> 0)); key = _tmp$2; value = _tmp$3;
			}
			_tuple = QueryUnescape(key); key = _tuple[0]; err1 = _tuple[1];
			if (!($interfaceIsEqual(err1, $ifaceNil))) {
				if ($interfaceIsEqual(err, $ifaceNil)) {
					err = err1;
				}
				continue;
			}
			_tuple$1 = QueryUnescape(value); value = _tuple$1[0]; err1 = _tuple$1[1];
			if (!($interfaceIsEqual(err1, $ifaceNil))) {
				if ($interfaceIsEqual(err, $ifaceNil)) {
					err = err1;
				}
				continue;
			}
			_key = key; (m || $throwRuntimeError("assignment to entry in nil map"))[_key] = { k: _key, v: $append((_entry = m[key], _entry !== undefined ? _entry.v : ($sliceType($String)).nil), value) };
		}
		err = err;
		return err;
	};
	Values.prototype.Encode = function() {
		var v, buf, keys, _ref, _i, _keys, _entry, k, _ref$1, _i$1, k$1, _entry$1, vs, prefix, _ref$2, _i$2, v$1;
		v = this.$val !== undefined ? this.$val : this;
		if (v === false) {
			return "";
		}
		buf = new bytes.Buffer.Ptr(); $copy(buf, new bytes.Buffer.Ptr(), bytes.Buffer);
		keys = ($sliceType($String)).make(0, $keys(v).length);
		_ref = v;
		_i = 0;
		_keys = $keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			keys = $append(keys, k);
			_i++;
		}
		sort.Strings(keys);
		_ref$1 = keys;
		_i$1 = 0;
		while (_i$1 < _ref$1.$length) {
			k$1 = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
			vs = (_entry$1 = v[k$1], _entry$1 !== undefined ? _entry$1.v : ($sliceType($String)).nil);
			prefix = QueryEscape(k$1) + "=";
			_ref$2 = vs;
			_i$2 = 0;
			while (_i$2 < _ref$2.$length) {
				v$1 = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
				if (buf.Len() > 0) {
					buf.WriteByte(38);
				}
				buf.WriteString(prefix);
				buf.WriteString(QueryEscape(v$1));
				_i$2++;
			}
			_i$1++;
		}
		return buf.String();
	};
	$ptrType(Values).prototype.Encode = function() { return new Values(this.$get()).Encode(); };
	resolvePath = function(base, ref) {
		var full, i, dst, src, _ref, _i, elem, _ref$1, x, last;
		full = "";
		if (ref === "") {
			full = base;
		} else if (!((ref.charCodeAt(0) === 47))) {
			i = strings.LastIndex(base, "/");
			full = base.substring(0, (i + 1 >> 0)) + ref;
		} else {
			full = ref;
		}
		if (full === "") {
			return "";
		}
		dst = ($sliceType($String)).nil;
		src = strings.Split(full, "/");
		_ref = src;
		_i = 0;
		while (_i < _ref.$length) {
			elem = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_ref$1 = elem;
			if (_ref$1 === ".") {
			} else if (_ref$1 === "..") {
				if (dst.$length > 0) {
					dst = $subslice(dst, 0, (dst.$length - 1 >> 0));
				}
			} else {
				dst = $append(dst, elem);
			}
			_i++;
		}
		last = (x = src.$length - 1 >> 0, ((x < 0 || x >= src.$length) ? $throwRuntimeError("index out of range") : src.$array[src.$offset + x]));
		if (last === "." || last === "..") {
			dst = $append(dst, "");
		}
		return "/" + strings.TrimLeft(strings.Join(dst, "/"), "/");
	};
	URL.Ptr.prototype.IsAbs = function() {
		var u;
		u = this;
		return !(u.Scheme === "");
	};
	URL.prototype.IsAbs = function() { return this.$val.IsAbs(); };
	URL.Ptr.prototype.Parse = function(ref) {
		var u, _tuple, refurl, err;
		u = this;
		_tuple = Parse(ref); refurl = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [($ptrType(URL)).nil, err];
		}
		return [u.ResolveReference(refurl), $ifaceNil];
	};
	URL.prototype.Parse = function(ref) { return this.$val.Parse(ref); };
	URL.Ptr.prototype.ResolveReference = function(ref) {
		var u, url;
		u = this;
		url = new URL.Ptr(); $copy(url, ref, URL);
		if (ref.Scheme === "") {
			url.Scheme = u.Scheme;
		}
		if (!(ref.Scheme === "") || !(ref.Host === "") || !(ref.User === ($ptrType(Userinfo)).nil)) {
			url.Path = resolvePath(ref.Path, "");
			return url;
		}
		if (!(ref.Opaque === "")) {
			url.User = ($ptrType(Userinfo)).nil;
			url.Host = "";
			url.Path = "";
			return url;
		}
		if (ref.Path === "") {
			if (ref.RawQuery === "") {
				url.RawQuery = u.RawQuery;
				if (ref.Fragment === "") {
					url.Fragment = u.Fragment;
				}
			}
		}
		url.Host = u.Host;
		url.User = u.User;
		url.Path = resolvePath(u.Path, ref.Path);
		return url;
	};
	URL.prototype.ResolveReference = function(ref) { return this.$val.ResolveReference(ref); };
	URL.Ptr.prototype.Query = function() {
		var u, _tuple, v;
		u = this;
		_tuple = ParseQuery(u.RawQuery); v = _tuple[0];
		return v;
	};
	URL.prototype.Query = function() { return this.$val.Query(); };
	URL.Ptr.prototype.RequestURI = function() {
		var u, result;
		u = this;
		result = u.Opaque;
		if (result === "") {
			result = escape(u.Path, 1);
			if (result === "") {
				result = "/";
			}
		} else {
			if (strings.HasPrefix(result, "//")) {
				result = u.Scheme + ":" + result;
			}
		}
		if (!(u.RawQuery === "")) {
			result = result + ("?" + u.RawQuery);
		}
		return result;
	};
	URL.prototype.RequestURI = function() { return this.$val.RequestURI(); };
	$pkg.$init = function() {
		($ptrType(Error)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		Error.init([["Op", "Op", "", $String, ""], ["URL", "URL", "", $String, ""], ["Err", "Err", "", $error, ""]]);
		EscapeError.methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		($ptrType(EscapeError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		($ptrType(URL)).methods = [["IsAbs", "IsAbs", "", $funcType([], [$Bool], false), -1], ["Parse", "Parse", "", $funcType([$String], [($ptrType(URL)), $error], false), -1], ["Query", "Query", "", $funcType([], [Values], false), -1], ["RequestURI", "RequestURI", "", $funcType([], [$String], false), -1], ["ResolveReference", "ResolveReference", "", $funcType([($ptrType(URL))], [($ptrType(URL))], false), -1], ["String", "String", "", $funcType([], [$String], false), -1]];
		URL.init([["Scheme", "Scheme", "", $String, ""], ["Opaque", "Opaque", "", $String, ""], ["User", "User", "", ($ptrType(Userinfo)), ""], ["Host", "Host", "", $String, ""], ["Path", "Path", "", $String, ""], ["RawQuery", "RawQuery", "", $String, ""], ["Fragment", "Fragment", "", $String, ""]]);
		($ptrType(Userinfo)).methods = [["Password", "Password", "", $funcType([], [$String, $Bool], false), -1], ["String", "String", "", $funcType([], [$String], false), -1], ["Username", "Username", "", $funcType([], [$String], false), -1]];
		Userinfo.init([["username", "username", "net/url", $String, ""], ["password", "password", "net/url", $String, ""], ["passwordSet", "passwordSet", "net/url", $Bool, ""]]);
		Values.methods = [["Add", "Add", "", $funcType([$String, $String], [], false), -1], ["Del", "Del", "", $funcType([$String], [], false), -1], ["Encode", "Encode", "", $funcType([], [$String], false), -1], ["Get", "Get", "", $funcType([$String], [$String], false), -1], ["Set", "Set", "", $funcType([$String, $String], [], false), -1]];
		($ptrType(Values)).methods = [["Add", "Add", "", $funcType([$String, $String], [], false), -1], ["Del", "Del", "", $funcType([$String], [], false), -1], ["Encode", "Encode", "", $funcType([], [$String], false), -1], ["Get", "Get", "", $funcType([$String], [$String], false), -1], ["Set", "Set", "", $funcType([$String, $String], [], false), -1]];
		Values.init($String, ($sliceType($String)));
	};
	return $pkg;
})();
$packages["path"] = (function() {
	var $pkg = {}, errors = $packages["errors"], strings = $packages["strings"], utf8 = $packages["unicode/utf8"], lazybuf, Clean, Split;
	lazybuf = $pkg.lazybuf = $newType(0, "Struct", "path.lazybuf", "lazybuf", "path", function(s_, buf_, w_) {
		this.$val = this;
		this.s = s_ !== undefined ? s_ : "";
		this.buf = buf_ !== undefined ? buf_ : ($sliceType($Uint8)).nil;
		this.w = w_ !== undefined ? w_ : 0;
	});
	lazybuf.Ptr.prototype.index = function(i) {
		var b, x;
		b = this;
		if (!(b.buf === ($sliceType($Uint8)).nil)) {
			return (x = b.buf, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]));
		}
		return b.s.charCodeAt(i);
	};
	lazybuf.prototype.index = function(i) { return this.$val.index(i); };
	lazybuf.Ptr.prototype.append = function(c) {
		var b, x, x$1;
		b = this;
		if (b.buf === ($sliceType($Uint8)).nil) {
			if (b.w < b.s.length && (b.s.charCodeAt(b.w) === c)) {
				b.w = b.w + (1) >> 0;
				return;
			}
			b.buf = ($sliceType($Uint8)).make(b.s.length);
			$copyString(b.buf, b.s.substring(0, b.w));
		}
		(x = b.buf, x$1 = b.w, (x$1 < 0 || x$1 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + x$1] = c);
		b.w = b.w + (1) >> 0;
	};
	lazybuf.prototype.append = function(c) { return this.$val.append(c); };
	lazybuf.Ptr.prototype.string = function() {
		var b;
		b = this;
		if (b.buf === ($sliceType($Uint8)).nil) {
			return b.s.substring(0, b.w);
		}
		return $bytesToString($subslice(b.buf, 0, b.w));
	};
	lazybuf.prototype.string = function() { return this.$val.string(); };
	Clean = $pkg.Clean = function(path) {
		var rooted, n, out, _tmp, _tmp$1, r, dotdot, _tmp$2, _tmp$3;
		if (path === "") {
			return ".";
		}
		rooted = path.charCodeAt(0) === 47;
		n = path.length;
		out = new lazybuf.Ptr(path, ($sliceType($Uint8)).nil, 0);
		_tmp = 0; _tmp$1 = 0; r = _tmp; dotdot = _tmp$1;
		if (rooted) {
			out.append(47);
			_tmp$2 = 1; _tmp$3 = 1; r = _tmp$2; dotdot = _tmp$3;
		}
		while (r < n) {
			if (path.charCodeAt(r) === 47) {
				r = r + (1) >> 0;
			} else if ((path.charCodeAt(r) === 46) && (((r + 1 >> 0) === n) || (path.charCodeAt((r + 1 >> 0)) === 47))) {
				r = r + (1) >> 0;
			} else if ((path.charCodeAt(r) === 46) && (path.charCodeAt((r + 1 >> 0)) === 46) && (((r + 2 >> 0) === n) || (path.charCodeAt((r + 2 >> 0)) === 47))) {
				r = r + (2) >> 0;
				if (out.w > dotdot) {
					out.w = out.w - (1) >> 0;
					while (out.w > dotdot && !((out.index(out.w) === 47))) {
						out.w = out.w - (1) >> 0;
					}
				} else if (!rooted) {
					if (out.w > 0) {
						out.append(47);
					}
					out.append(46);
					out.append(46);
					dotdot = out.w;
				}
			} else {
				if (rooted && !((out.w === 1)) || !rooted && !((out.w === 0))) {
					out.append(47);
				}
				while (r < n && !((path.charCodeAt(r) === 47))) {
					out.append(path.charCodeAt(r));
					r = r + (1) >> 0;
				}
			}
		}
		if (out.w === 0) {
			return ".";
		}
		return out.string();
	};
	Split = $pkg.Split = function(path) {
		var dir = "", file = "", i, _tmp, _tmp$1;
		i = strings.LastIndex(path, "/");
		_tmp = path.substring(0, (i + 1 >> 0)); _tmp$1 = path.substring((i + 1 >> 0)); dir = _tmp; file = _tmp$1;
		return [dir, file];
	};
	$pkg.$init = function() {
		($ptrType(lazybuf)).methods = [["append", "append", "path", $funcType([$Uint8], [], false), -1], ["index", "index", "path", $funcType([$Int], [$Uint8], false), -1], ["string", "string", "path", $funcType([], [$String], false), -1]];
		lazybuf.init([["s", "s", "path", $String, ""], ["buf", "buf", "path", ($sliceType($Uint8)), ""], ["w", "w", "path", $Int, ""]]);
		$pkg.ErrBadPattern = errors.New("syntax error in pattern");
	};
	return $pkg;
})();
$packages["net/http"] = (function() {
	var $pkg = {}, bufio = $packages["bufio"], bytes = $packages["bytes"], errors = $packages["errors"], fmt = $packages["fmt"], io = $packages["io"], base64 = $packages["encoding/base64"], ioutil = $packages["io/ioutil"], log = $packages["log"], url = $packages["net/url"], strings = $packages["strings"], sync = $packages["sync"], time = $packages["time"], net = $packages["net"], strconv = $packages["strconv"], mime = $packages["mime"], multipart = $packages["mime/multipart"], textproto = $packages["net/textproto"], os = $packages["os"], path = $packages["path"], filepath = $packages["path/filepath"], sort = $packages["sort"], tls = $packages["crypto/tls"], runtime = $packages["runtime"], atomic = $packages["sync/atomic"], binary = $packages["encoding/binary"], gzip = $packages["compress/gzip"], chunkedReader, chunkedWriter, Cookie, Header, writeStringer, stringWriter, keyValues, headerSorter, ProtocolError, badStringError, Request, maxBytesReader, Response, Handler, ResponseWriter, conn, switchWriter, liveSwitchReader, chunkWriter, response, writerOnly, expectContinueReader, extraHeader, HandlerFunc, redirectHandler, ServeMux, muxEntry, Server, ConnState, serverHandler, tcpKeepAliveListener, globalOptionsHandler, eofReaderWithWriteTo, initNPNRequest, sniffSig, exactSig, maskedSig, htmlSig, textSig, errorReader, transferWriter, transferReader, body, bodyLocked, cookieNameSanitizer, errSeeker, headerNewlineToSpace, headerSorterPool, isTokenTable, reqWriteExcludeHeader, multipartByReader, textprotoReaderPool, respExcludeHeader, crlf, colonSpace, bufioReaderPool, bufioWriter2kPool, bufioWriter4kPool, errTooLarge, extraHeaderKeys, headerContentLength, headerDate, statusMu, statusLines, htmlReplacer, stateName, eofReader, uniqNameNext, sniffSignatures, statusText, suppressedHeaders304, suppressedHeadersNoBody, singleCRLF, doubleCRLF, errTrailerEOF, _map, _key, _map$1, _key$1, _map$2, _key$2, _map$3, _key$3, newChunkedReader, readLine, trimTrailingWhitespace, isASCIISpace, newChunkedWriter, parseHexUint, basicAuth, readSetCookies, readCookies, validCookieDomain, isCookieDomainName, sanitizeCookieName, sanitizeCookieValue, validCookieValueByte, sanitizeCookiePath, validCookiePathByte, sanitizeOrWarn, parseCookieValue, isCookieNameValid, CanonicalHeaderKey, hasToken, isTokenBoundary, isToken, isNotToken, valueOrDefault, ParseHTTPVersion, parseRequestLine, newTextprotoReader, putTextprotoReader, ReadRequest, MaxBytesReader, copyValues, parsePostForm, fixPragmaCacheControl, srcIsRegularFile, bufioWriterPool, newBufioReader, putBufioReader, newBufioWriterSize, putBufioWriter, appendTime, statusLine, validNPN, Error, NotFound, NotFoundHandler, Redirect, htmlEscape, RedirectHandler, NewServeMux, pathMatch, cleanPath, DetectContentType, isWS, newTransferWriter, noBodyExpected, bodyAllowedForStatus, suppressedHeaders, readTransfer, chunked, isIdentity, fixTransferEncoding, fixLength, shouldClose, fixTrailer, seeUpcomingDoubleCRLF, mergeSetHeader, parseContentLength;
	chunkedReader = $pkg.chunkedReader = $newType(0, "Struct", "http.chunkedReader", "chunkedReader", "net/http", function(r_, n_, err_, buf_) {
		this.$val = this;
		this.r = r_ !== undefined ? r_ : ($ptrType(bufio.Reader)).nil;
		this.n = n_ !== undefined ? n_ : new $Uint64(0, 0);
		this.err = err_ !== undefined ? err_ : $ifaceNil;
		this.buf = buf_ !== undefined ? buf_ : ($arrayType($Uint8, 2)).zero();
	});
	chunkedWriter = $pkg.chunkedWriter = $newType(0, "Struct", "http.chunkedWriter", "chunkedWriter", "net/http", function(Wire_) {
		this.$val = this;
		this.Wire = Wire_ !== undefined ? Wire_ : $ifaceNil;
	});
	Cookie = $pkg.Cookie = $newType(0, "Struct", "http.Cookie", "Cookie", "net/http", function(Name_, Value_, Path_, Domain_, Expires_, RawExpires_, MaxAge_, Secure_, HttpOnly_, Raw_, Unparsed_) {
		this.$val = this;
		this.Name = Name_ !== undefined ? Name_ : "";
		this.Value = Value_ !== undefined ? Value_ : "";
		this.Path = Path_ !== undefined ? Path_ : "";
		this.Domain = Domain_ !== undefined ? Domain_ : "";
		this.Expires = Expires_ !== undefined ? Expires_ : new time.Time.Ptr();
		this.RawExpires = RawExpires_ !== undefined ? RawExpires_ : "";
		this.MaxAge = MaxAge_ !== undefined ? MaxAge_ : 0;
		this.Secure = Secure_ !== undefined ? Secure_ : false;
		this.HttpOnly = HttpOnly_ !== undefined ? HttpOnly_ : false;
		this.Raw = Raw_ !== undefined ? Raw_ : "";
		this.Unparsed = Unparsed_ !== undefined ? Unparsed_ : ($sliceType($String)).nil;
	});
	Header = $pkg.Header = $newType(4, "Map", "http.Header", "Header", "net/http", null);
	writeStringer = $pkg.writeStringer = $newType(8, "Interface", "http.writeStringer", "writeStringer", "net/http", null);
	stringWriter = $pkg.stringWriter = $newType(0, "Struct", "http.stringWriter", "stringWriter", "net/http", function(w_) {
		this.$val = this;
		this.w = w_ !== undefined ? w_ : $ifaceNil;
	});
	keyValues = $pkg.keyValues = $newType(0, "Struct", "http.keyValues", "keyValues", "net/http", function(key_, values_) {
		this.$val = this;
		this.key = key_ !== undefined ? key_ : "";
		this.values = values_ !== undefined ? values_ : ($sliceType($String)).nil;
	});
	headerSorter = $pkg.headerSorter = $newType(0, "Struct", "http.headerSorter", "headerSorter", "net/http", function(kvs_) {
		this.$val = this;
		this.kvs = kvs_ !== undefined ? kvs_ : ($sliceType(keyValues)).nil;
	});
	ProtocolError = $pkg.ProtocolError = $newType(0, "Struct", "http.ProtocolError", "ProtocolError", "net/http", function(ErrorString_) {
		this.$val = this;
		this.ErrorString = ErrorString_ !== undefined ? ErrorString_ : "";
	});
	badStringError = $pkg.badStringError = $newType(0, "Struct", "http.badStringError", "badStringError", "net/http", function(what_, str_) {
		this.$val = this;
		this.what = what_ !== undefined ? what_ : "";
		this.str = str_ !== undefined ? str_ : "";
	});
	Request = $pkg.Request = $newType(0, "Struct", "http.Request", "Request", "net/http", function(Method_, URL_, Proto_, ProtoMajor_, ProtoMinor_, Header_, Body_, ContentLength_, TransferEncoding_, Close_, Host_, Form_, PostForm_, MultipartForm_, Trailer_, RemoteAddr_, RequestURI_, TLS_) {
		this.$val = this;
		this.Method = Method_ !== undefined ? Method_ : "";
		this.URL = URL_ !== undefined ? URL_ : ($ptrType(url.URL)).nil;
		this.Proto = Proto_ !== undefined ? Proto_ : "";
		this.ProtoMajor = ProtoMajor_ !== undefined ? ProtoMajor_ : 0;
		this.ProtoMinor = ProtoMinor_ !== undefined ? ProtoMinor_ : 0;
		this.Header = Header_ !== undefined ? Header_ : false;
		this.Body = Body_ !== undefined ? Body_ : $ifaceNil;
		this.ContentLength = ContentLength_ !== undefined ? ContentLength_ : new $Int64(0, 0);
		this.TransferEncoding = TransferEncoding_ !== undefined ? TransferEncoding_ : ($sliceType($String)).nil;
		this.Close = Close_ !== undefined ? Close_ : false;
		this.Host = Host_ !== undefined ? Host_ : "";
		this.Form = Form_ !== undefined ? Form_ : false;
		this.PostForm = PostForm_ !== undefined ? PostForm_ : false;
		this.MultipartForm = MultipartForm_ !== undefined ? MultipartForm_ : ($ptrType(multipart.Form)).nil;
		this.Trailer = Trailer_ !== undefined ? Trailer_ : false;
		this.RemoteAddr = RemoteAddr_ !== undefined ? RemoteAddr_ : "";
		this.RequestURI = RequestURI_ !== undefined ? RequestURI_ : "";
		this.TLS = TLS_ !== undefined ? TLS_ : ($ptrType(tls.ConnectionState)).nil;
	});
	maxBytesReader = $pkg.maxBytesReader = $newType(0, "Struct", "http.maxBytesReader", "maxBytesReader", "net/http", function(w_, r_, n_, stopped_) {
		this.$val = this;
		this.w = w_ !== undefined ? w_ : $ifaceNil;
		this.r = r_ !== undefined ? r_ : $ifaceNil;
		this.n = n_ !== undefined ? n_ : new $Int64(0, 0);
		this.stopped = stopped_ !== undefined ? stopped_ : false;
	});
	Response = $pkg.Response = $newType(0, "Struct", "http.Response", "Response", "net/http", function(Status_, StatusCode_, Proto_, ProtoMajor_, ProtoMinor_, Header_, Body_, ContentLength_, TransferEncoding_, Close_, Trailer_, Request_, TLS_) {
		this.$val = this;
		this.Status = Status_ !== undefined ? Status_ : "";
		this.StatusCode = StatusCode_ !== undefined ? StatusCode_ : 0;
		this.Proto = Proto_ !== undefined ? Proto_ : "";
		this.ProtoMajor = ProtoMajor_ !== undefined ? ProtoMajor_ : 0;
		this.ProtoMinor = ProtoMinor_ !== undefined ? ProtoMinor_ : 0;
		this.Header = Header_ !== undefined ? Header_ : false;
		this.Body = Body_ !== undefined ? Body_ : $ifaceNil;
		this.ContentLength = ContentLength_ !== undefined ? ContentLength_ : new $Int64(0, 0);
		this.TransferEncoding = TransferEncoding_ !== undefined ? TransferEncoding_ : ($sliceType($String)).nil;
		this.Close = Close_ !== undefined ? Close_ : false;
		this.Trailer = Trailer_ !== undefined ? Trailer_ : false;
		this.Request = Request_ !== undefined ? Request_ : ($ptrType(Request)).nil;
		this.TLS = TLS_ !== undefined ? TLS_ : ($ptrType(tls.ConnectionState)).nil;
	});
	Handler = $pkg.Handler = $newType(8, "Interface", "http.Handler", "Handler", "net/http", null);
	ResponseWriter = $pkg.ResponseWriter = $newType(8, "Interface", "http.ResponseWriter", "ResponseWriter", "net/http", null);
	conn = $pkg.conn = $newType(0, "Struct", "http.conn", "conn", "net/http", function(remoteAddr_, server_, rwc_, sr_, lr_, buf_, tlsState_, mu_, clientGone_, closeNotifyc_, hijackedv_) {
		this.$val = this;
		this.remoteAddr = remoteAddr_ !== undefined ? remoteAddr_ : "";
		this.server = server_ !== undefined ? server_ : ($ptrType(Server)).nil;
		this.rwc = rwc_ !== undefined ? rwc_ : $ifaceNil;
		this.sr = sr_ !== undefined ? sr_ : new liveSwitchReader.Ptr();
		this.lr = lr_ !== undefined ? lr_ : ($ptrType(io.LimitedReader)).nil;
		this.buf = buf_ !== undefined ? buf_ : ($ptrType(bufio.ReadWriter)).nil;
		this.tlsState = tlsState_ !== undefined ? tlsState_ : ($ptrType(tls.ConnectionState)).nil;
		this.mu = mu_ !== undefined ? mu_ : new sync.Mutex.Ptr();
		this.clientGone = clientGone_ !== undefined ? clientGone_ : false;
		this.closeNotifyc = closeNotifyc_ !== undefined ? closeNotifyc_ : ($chanType($Bool, false, false)).nil;
		this.hijackedv = hijackedv_ !== undefined ? hijackedv_ : false;
	});
	switchWriter = $pkg.switchWriter = $newType(0, "Struct", "http.switchWriter", "switchWriter", "net/http", function(Writer_) {
		this.$val = this;
		this.Writer = Writer_ !== undefined ? Writer_ : $ifaceNil;
	});
	liveSwitchReader = $pkg.liveSwitchReader = $newType(0, "Struct", "http.liveSwitchReader", "liveSwitchReader", "net/http", function(Mutex_, r_) {
		this.$val = this;
		this.Mutex = Mutex_ !== undefined ? Mutex_ : new sync.Mutex.Ptr();
		this.r = r_ !== undefined ? r_ : $ifaceNil;
	});
	chunkWriter = $pkg.chunkWriter = $newType(0, "Struct", "http.chunkWriter", "chunkWriter", "net/http", function(res_, header_, wroteHeader_, chunking_) {
		this.$val = this;
		this.res = res_ !== undefined ? res_ : ($ptrType(response)).nil;
		this.header = header_ !== undefined ? header_ : false;
		this.wroteHeader = wroteHeader_ !== undefined ? wroteHeader_ : false;
		this.chunking = chunking_ !== undefined ? chunking_ : false;
	});
	response = $pkg.response = $newType(0, "Struct", "http.response", "response", "net/http", function(conn_, req_, wroteHeader_, wroteContinue_, w_, cw_, sw_, handlerHeader_, calledHeader_, written_, contentLength_, status_, closeAfterReply_, requestBodyLimitHit_, handlerDone_, dateBuf_, clenBuf_) {
		this.$val = this;
		this.conn = conn_ !== undefined ? conn_ : ($ptrType(conn)).nil;
		this.req = req_ !== undefined ? req_ : ($ptrType(Request)).nil;
		this.wroteHeader = wroteHeader_ !== undefined ? wroteHeader_ : false;
		this.wroteContinue = wroteContinue_ !== undefined ? wroteContinue_ : false;
		this.w = w_ !== undefined ? w_ : ($ptrType(bufio.Writer)).nil;
		this.cw = cw_ !== undefined ? cw_ : new chunkWriter.Ptr();
		this.sw = sw_ !== undefined ? sw_ : ($ptrType(switchWriter)).nil;
		this.handlerHeader = handlerHeader_ !== undefined ? handlerHeader_ : false;
		this.calledHeader = calledHeader_ !== undefined ? calledHeader_ : false;
		this.written = written_ !== undefined ? written_ : new $Int64(0, 0);
		this.contentLength = contentLength_ !== undefined ? contentLength_ : new $Int64(0, 0);
		this.status = status_ !== undefined ? status_ : 0;
		this.closeAfterReply = closeAfterReply_ !== undefined ? closeAfterReply_ : false;
		this.requestBodyLimitHit = requestBodyLimitHit_ !== undefined ? requestBodyLimitHit_ : false;
		this.handlerDone = handlerDone_ !== undefined ? handlerDone_ : false;
		this.dateBuf = dateBuf_ !== undefined ? dateBuf_ : ($arrayType($Uint8, 29)).zero();
		this.clenBuf = clenBuf_ !== undefined ? clenBuf_ : ($arrayType($Uint8, 10)).zero();
	});
	writerOnly = $pkg.writerOnly = $newType(0, "Struct", "http.writerOnly", "writerOnly", "net/http", function(Writer_) {
		this.$val = this;
		this.Writer = Writer_ !== undefined ? Writer_ : $ifaceNil;
	});
	expectContinueReader = $pkg.expectContinueReader = $newType(0, "Struct", "http.expectContinueReader", "expectContinueReader", "net/http", function(resp_, readCloser_, closed_) {
		this.$val = this;
		this.resp = resp_ !== undefined ? resp_ : ($ptrType(response)).nil;
		this.readCloser = readCloser_ !== undefined ? readCloser_ : $ifaceNil;
		this.closed = closed_ !== undefined ? closed_ : false;
	});
	extraHeader = $pkg.extraHeader = $newType(0, "Struct", "http.extraHeader", "extraHeader", "net/http", function(contentType_, connection_, transferEncoding_, date_, contentLength_) {
		this.$val = this;
		this.contentType = contentType_ !== undefined ? contentType_ : "";
		this.connection = connection_ !== undefined ? connection_ : "";
		this.transferEncoding = transferEncoding_ !== undefined ? transferEncoding_ : "";
		this.date = date_ !== undefined ? date_ : ($sliceType($Uint8)).nil;
		this.contentLength = contentLength_ !== undefined ? contentLength_ : ($sliceType($Uint8)).nil;
	});
	HandlerFunc = $pkg.HandlerFunc = $newType(4, "Func", "http.HandlerFunc", "HandlerFunc", "net/http", null);
	redirectHandler = $pkg.redirectHandler = $newType(0, "Struct", "http.redirectHandler", "redirectHandler", "net/http", function(url_, code_) {
		this.$val = this;
		this.url = url_ !== undefined ? url_ : "";
		this.code = code_ !== undefined ? code_ : 0;
	});
	ServeMux = $pkg.ServeMux = $newType(0, "Struct", "http.ServeMux", "ServeMux", "net/http", function(mu_, m_, hosts_) {
		this.$val = this;
		this.mu = mu_ !== undefined ? mu_ : new sync.RWMutex.Ptr();
		this.m = m_ !== undefined ? m_ : false;
		this.hosts = hosts_ !== undefined ? hosts_ : false;
	});
	muxEntry = $pkg.muxEntry = $newType(0, "Struct", "http.muxEntry", "muxEntry", "net/http", function(explicit_, h_, pattern_) {
		this.$val = this;
		this.explicit = explicit_ !== undefined ? explicit_ : false;
		this.h = h_ !== undefined ? h_ : $ifaceNil;
		this.pattern = pattern_ !== undefined ? pattern_ : "";
	});
	Server = $pkg.Server = $newType(0, "Struct", "http.Server", "Server", "net/http", function(Addr_, Handler_, ReadTimeout_, WriteTimeout_, MaxHeaderBytes_, TLSConfig_, TLSNextProto_, ConnState_, ErrorLog_, disableKeepAlives_) {
		this.$val = this;
		this.Addr = Addr_ !== undefined ? Addr_ : "";
		this.Handler = Handler_ !== undefined ? Handler_ : $ifaceNil;
		this.ReadTimeout = ReadTimeout_ !== undefined ? ReadTimeout_ : new time.Duration(0, 0);
		this.WriteTimeout = WriteTimeout_ !== undefined ? WriteTimeout_ : new time.Duration(0, 0);
		this.MaxHeaderBytes = MaxHeaderBytes_ !== undefined ? MaxHeaderBytes_ : 0;
		this.TLSConfig = TLSConfig_ !== undefined ? TLSConfig_ : ($ptrType(tls.Config)).nil;
		this.TLSNextProto = TLSNextProto_ !== undefined ? TLSNextProto_ : false;
		this.ConnState = ConnState_ !== undefined ? ConnState_ : $throwNilPointerError;
		this.ErrorLog = ErrorLog_ !== undefined ? ErrorLog_ : ($ptrType(log.Logger)).nil;
		this.disableKeepAlives = disableKeepAlives_ !== undefined ? disableKeepAlives_ : 0;
	});
	ConnState = $pkg.ConnState = $newType(4, "Int", "http.ConnState", "ConnState", "net/http", null);
	serverHandler = $pkg.serverHandler = $newType(0, "Struct", "http.serverHandler", "serverHandler", "net/http", function(srv_) {
		this.$val = this;
		this.srv = srv_ !== undefined ? srv_ : ($ptrType(Server)).nil;
	});
	tcpKeepAliveListener = $pkg.tcpKeepAliveListener = $newType(0, "Struct", "http.tcpKeepAliveListener", "tcpKeepAliveListener", "net/http", function(TCPListener_) {
		this.$val = this;
		this.TCPListener = TCPListener_ !== undefined ? TCPListener_ : ($ptrType(net.TCPListener)).nil;
	});
	globalOptionsHandler = $pkg.globalOptionsHandler = $newType(0, "Struct", "http.globalOptionsHandler", "globalOptionsHandler", "net/http", function() {
		this.$val = this;
	});
	eofReaderWithWriteTo = $pkg.eofReaderWithWriteTo = $newType(0, "Struct", "http.eofReaderWithWriteTo", "eofReaderWithWriteTo", "net/http", function() {
		this.$val = this;
	});
	initNPNRequest = $pkg.initNPNRequest = $newType(0, "Struct", "http.initNPNRequest", "initNPNRequest", "net/http", function(c_, h_) {
		this.$val = this;
		this.c = c_ !== undefined ? c_ : ($ptrType(tls.Conn)).nil;
		this.h = h_ !== undefined ? h_ : new serverHandler.Ptr();
	});
	sniffSig = $pkg.sniffSig = $newType(8, "Interface", "http.sniffSig", "sniffSig", "net/http", null);
	exactSig = $pkg.exactSig = $newType(0, "Struct", "http.exactSig", "exactSig", "net/http", function(sig_, ct_) {
		this.$val = this;
		this.sig = sig_ !== undefined ? sig_ : ($sliceType($Uint8)).nil;
		this.ct = ct_ !== undefined ? ct_ : "";
	});
	maskedSig = $pkg.maskedSig = $newType(0, "Struct", "http.maskedSig", "maskedSig", "net/http", function(mask_, pat_, skipWS_, ct_) {
		this.$val = this;
		this.mask = mask_ !== undefined ? mask_ : ($sliceType($Uint8)).nil;
		this.pat = pat_ !== undefined ? pat_ : ($sliceType($Uint8)).nil;
		this.skipWS = skipWS_ !== undefined ? skipWS_ : false;
		this.ct = ct_ !== undefined ? ct_ : "";
	});
	htmlSig = $pkg.htmlSig = $newType(12, "Slice", "http.htmlSig", "htmlSig", "net/http", null);
	textSig = $pkg.textSig = $newType(4, "Int", "http.textSig", "textSig", "net/http", null);
	errorReader = $pkg.errorReader = $newType(0, "Struct", "http.errorReader", "errorReader", "net/http", function(err_) {
		this.$val = this;
		this.err = err_ !== undefined ? err_ : $ifaceNil;
	});
	transferWriter = $pkg.transferWriter = $newType(0, "Struct", "http.transferWriter", "transferWriter", "net/http", function(Method_, Body_, BodyCloser_, ResponseToHEAD_, ContentLength_, Close_, TransferEncoding_, Trailer_) {
		this.$val = this;
		this.Method = Method_ !== undefined ? Method_ : "";
		this.Body = Body_ !== undefined ? Body_ : $ifaceNil;
		this.BodyCloser = BodyCloser_ !== undefined ? BodyCloser_ : $ifaceNil;
		this.ResponseToHEAD = ResponseToHEAD_ !== undefined ? ResponseToHEAD_ : false;
		this.ContentLength = ContentLength_ !== undefined ? ContentLength_ : new $Int64(0, 0);
		this.Close = Close_ !== undefined ? Close_ : false;
		this.TransferEncoding = TransferEncoding_ !== undefined ? TransferEncoding_ : ($sliceType($String)).nil;
		this.Trailer = Trailer_ !== undefined ? Trailer_ : false;
	});
	transferReader = $pkg.transferReader = $newType(0, "Struct", "http.transferReader", "transferReader", "net/http", function(Header_, StatusCode_, RequestMethod_, ProtoMajor_, ProtoMinor_, Body_, ContentLength_, TransferEncoding_, Close_, Trailer_) {
		this.$val = this;
		this.Header = Header_ !== undefined ? Header_ : false;
		this.StatusCode = StatusCode_ !== undefined ? StatusCode_ : 0;
		this.RequestMethod = RequestMethod_ !== undefined ? RequestMethod_ : "";
		this.ProtoMajor = ProtoMajor_ !== undefined ? ProtoMajor_ : 0;
		this.ProtoMinor = ProtoMinor_ !== undefined ? ProtoMinor_ : 0;
		this.Body = Body_ !== undefined ? Body_ : $ifaceNil;
		this.ContentLength = ContentLength_ !== undefined ? ContentLength_ : new $Int64(0, 0);
		this.TransferEncoding = TransferEncoding_ !== undefined ? TransferEncoding_ : ($sliceType($String)).nil;
		this.Close = Close_ !== undefined ? Close_ : false;
		this.Trailer = Trailer_ !== undefined ? Trailer_ : false;
	});
	body = $pkg.body = $newType(0, "Struct", "http.body", "body", "net/http", function(src_, hdr_, r_, closing_, mu_, closed_) {
		this.$val = this;
		this.src = src_ !== undefined ? src_ : $ifaceNil;
		this.hdr = hdr_ !== undefined ? hdr_ : $ifaceNil;
		this.r = r_ !== undefined ? r_ : ($ptrType(bufio.Reader)).nil;
		this.closing = closing_ !== undefined ? closing_ : false;
		this.mu = mu_ !== undefined ? mu_ : new sync.Mutex.Ptr();
		this.closed = closed_ !== undefined ? closed_ : false;
	});
	bodyLocked = $pkg.bodyLocked = $newType(0, "Struct", "http.bodyLocked", "bodyLocked", "net/http", function(b_) {
		this.$val = this;
		this.b = b_ !== undefined ? b_ : ($ptrType(body)).nil;
	});
	newChunkedReader = function(r) {
		var _tuple, br, ok;
		_tuple = $assertType(r, ($ptrType(bufio.Reader)), true); br = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			br = bufio.NewReader(r);
		}
		return new chunkedReader.Ptr(br, new $Uint64(0, 0), $ifaceNil, ($arrayType($Uint8, 2)).zero());
	};
	chunkedReader.Ptr.prototype.beginChunk = function() {
		var cr, line, _tuple, _tuple$1, x;
		cr = this;
		line = ($sliceType($Uint8)).nil;
		_tuple = readLine(cr.r); line = _tuple[0]; cr.err = _tuple[1];
		if (!($interfaceIsEqual(cr.err, $ifaceNil))) {
			return;
		}
		_tuple$1 = parseHexUint(line); cr.n = _tuple$1[0]; cr.err = _tuple$1[1];
		if (!($interfaceIsEqual(cr.err, $ifaceNil))) {
			return;
		}
		if ((x = cr.n, (x.$high === 0 && x.$low === 0))) {
			cr.err = io.EOF;
		}
	};
	chunkedReader.prototype.beginChunk = function() { return this.$val.beginChunk(); };
	chunkedReader.Ptr.prototype.chunkHeaderAvailable = function() {
		var cr, n, _tuple, peek;
		cr = this;
		n = cr.r.Buffered();
		if (n > 0) {
			_tuple = cr.r.Peek(n); peek = _tuple[0];
			return bytes.IndexByte(peek, 10) >= 0;
		}
		return false;
	};
	chunkedReader.prototype.chunkHeaderAvailable = function() { return this.$val.chunkHeaderAvailable(); };
	chunkedReader.Ptr.prototype.Read = function(b) {
		var n = 0, err = $ifaceNil, cr, x, rbuf, x$1, x$2, n0, _tuple, x$3, x$4, x$5, _tuple$1, _tmp, _tmp$1;
		cr = this;
		while ($interfaceIsEqual(cr.err, $ifaceNil)) {
			if ((x = cr.n, (x.$high === 0 && x.$low === 0))) {
				if (n > 0 && !cr.chunkHeaderAvailable()) {
					break;
				}
				cr.beginChunk();
				continue;
			}
			if (b.$length === 0) {
				break;
			}
			rbuf = b;
			if ((x$1 = new $Uint64(0, rbuf.$length), x$2 = cr.n, (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
				rbuf = $subslice(rbuf, 0, $flatten64(cr.n));
			}
			n0 = 0;
			_tuple = cr.r.Read(rbuf); n0 = _tuple[0]; cr.err = _tuple[1];
			n = n + (n0) >> 0;
			b = $subslice(b, n0);
			cr.n = (x$3 = cr.n, x$4 = new $Uint64(0, n0), new $Uint64(x$3.$high - x$4.$high, x$3.$low - x$4.$low));
			if ((x$5 = cr.n, (x$5.$high === 0 && x$5.$low === 0)) && $interfaceIsEqual(cr.err, $ifaceNil)) {
				_tuple$1 = io.ReadFull(cr.r, $subslice(new ($sliceType($Uint8))(cr.buf), 0, 2)); cr.err = _tuple$1[1];
				if ($interfaceIsEqual(cr.err, $ifaceNil)) {
					if (!((cr.buf[0] === 13)) || !((cr.buf[1] === 10))) {
						cr.err = errors.New("malformed chunked encoding");
					}
				}
			}
		}
		_tmp = n; _tmp$1 = cr.err; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	chunkedReader.prototype.Read = function(b) { return this.$val.Read(b); };
	readLine = function(b) {
		var p = ($sliceType($Uint8)).nil, err = $ifaceNil, _tuple, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		_tuple = b.ReadSlice(10); p = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			} else if ($interfaceIsEqual(err, bufio.ErrBufferFull)) {
				err = $pkg.ErrLineTooLong;
			}
			_tmp = ($sliceType($Uint8)).nil; _tmp$1 = err; p = _tmp; err = _tmp$1;
			return [p, err];
		}
		if (p.$length >= 4096) {
			_tmp$2 = ($sliceType($Uint8)).nil; _tmp$3 = $pkg.ErrLineTooLong; p = _tmp$2; err = _tmp$3;
			return [p, err];
		}
		_tmp$4 = trimTrailingWhitespace(p); _tmp$5 = $ifaceNil; p = _tmp$4; err = _tmp$5;
		return [p, err];
	};
	trimTrailingWhitespace = function(b) {
		var x;
		while (b.$length > 0 && isASCIISpace((x = b.$length - 1 >> 0, ((x < 0 || x >= b.$length) ? $throwRuntimeError("index out of range") : b.$array[b.$offset + x])))) {
			b = $subslice(b, 0, (b.$length - 1 >> 0));
		}
		return b;
	};
	isASCIISpace = function(b) {
		return (b === 32) || (b === 9) || (b === 10) || (b === 13);
	};
	newChunkedWriter = function(w) {
		return new chunkedWriter.Ptr(w);
	};
	chunkedWriter.Ptr.prototype.Write = function(data) {
		var n = 0, err = $ifaceNil, cw, _tmp, _tmp$1, _tuple, _tmp$2, _tmp$3, _tuple$1, _tuple$2;
		cw = this;
		if (data.$length === 0) {
			_tmp = 0; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		_tuple = fmt.Fprintf(cw.Wire, "%x\r\n", new ($sliceType($emptyInterface))([new $Int(data.$length)])); err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$2 = 0; _tmp$3 = err; n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		_tuple$1 = cw.Wire.Write(data); n = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [n, err];
		}
		if (!((n === data.$length))) {
			err = io.ErrShortWrite;
			return [n, err];
		}
		_tuple$2 = io.WriteString(cw.Wire, "\r\n"); err = _tuple$2[1];
		return [n, err];
	};
	chunkedWriter.prototype.Write = function(data) { return this.$val.Write(data); };
	chunkedWriter.Ptr.prototype.Close = function() {
		var cw, _tuple, err;
		cw = this;
		_tuple = io.WriteString(cw.Wire, "0\r\n"); err = _tuple[1];
		return err;
	};
	chunkedWriter.prototype.Close = function() { return this.$val.Close(); };
	parseHexUint = function(v) {
		var n = new $Uint64(0, 0), err = $ifaceNil, _ref, _i, b, _tmp, _tmp$1, x;
		_ref = v;
		_i = 0;
		while (_i < _ref.$length) {
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			n = $shiftLeft64(n, (4));
			if (48 <= b && b <= 57) {
				b = b - 48 << 24 >>> 24;
			} else if (97 <= b && b <= 102) {
				b = (b - 97 << 24 >>> 24) + 10 << 24 >>> 24;
			} else if (65 <= b && b <= 70) {
				b = (b - 65 << 24 >>> 24) + 10 << 24 >>> 24;
			} else {
				_tmp = new $Uint64(0, 0); _tmp$1 = errors.New("invalid byte in chunk length"); n = _tmp; err = _tmp$1;
				return [n, err];
			}
			n = (x = new $Uint64(0, b), new $Uint64(n.$high | x.$high, (n.$low | x.$low) >>> 0));
			_i++;
		}
		return [n, err];
	};
	basicAuth = function(username, password) {
		var auth;
		auth = username + ":" + password;
		return base64.StdEncoding.EncodeToString(new ($sliceType($Uint8))($stringToBytes(auth)));
	};
	readSetCookies = function(h) {
		var cookies, _ref, _entry, _i, line, parts, j, _tmp, _tmp$1, name, value, _tuple, success, c, i, _tmp$2, _tmp$3, attr, val, j$1, _tmp$4, _tmp$5, lowerAttr, _tuple$1, _ref$1, _tuple$2, secs, err, _tuple$3, exptime, err$1, _tuple$4;
		cookies = new ($sliceType(($ptrType(Cookie))))([]);
		_ref = (_entry = h["Set-Cookie"], _entry !== undefined ? _entry.v : ($sliceType($String)).nil);
		_i = 0;
		while (_i < _ref.$length) {
			line = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			parts = strings.Split(strings.TrimSpace(line), ";");
			if ((parts.$length === 1) && ((0 < 0 || 0 >= parts.$length) ? $throwRuntimeError("index out of range") : parts.$array[parts.$offset + 0]) === "") {
				_i++;
				continue;
			}
			(0 < 0 || 0 >= parts.$length) ? $throwRuntimeError("index out of range") : parts.$array[parts.$offset + 0] = strings.TrimSpace(((0 < 0 || 0 >= parts.$length) ? $throwRuntimeError("index out of range") : parts.$array[parts.$offset + 0]));
			j = strings.Index(((0 < 0 || 0 >= parts.$length) ? $throwRuntimeError("index out of range") : parts.$array[parts.$offset + 0]), "=");
			if (j < 0) {
				_i++;
				continue;
			}
			_tmp = ((0 < 0 || 0 >= parts.$length) ? $throwRuntimeError("index out of range") : parts.$array[parts.$offset + 0]).substring(0, j); _tmp$1 = ((0 < 0 || 0 >= parts.$length) ? $throwRuntimeError("index out of range") : parts.$array[parts.$offset + 0]).substring((j + 1 >> 0)); name = _tmp; value = _tmp$1;
			if (!isCookieNameValid(name)) {
				_i++;
				continue;
			}
			_tuple = parseCookieValue(value); value = _tuple[0]; success = _tuple[1];
			if (!success) {
				_i++;
				continue;
			}
			c = new Cookie.Ptr(name, value, "", "", new time.Time.Ptr(), "", 0, false, false, line, ($sliceType($String)).nil);
			i = 1;
			while (i < parts.$length) {
				(i < 0 || i >= parts.$length) ? $throwRuntimeError("index out of range") : parts.$array[parts.$offset + i] = strings.TrimSpace(((i < 0 || i >= parts.$length) ? $throwRuntimeError("index out of range") : parts.$array[parts.$offset + i]));
				if (((i < 0 || i >= parts.$length) ? $throwRuntimeError("index out of range") : parts.$array[parts.$offset + i]).length === 0) {
					i = i + (1) >> 0;
					continue;
				}
				_tmp$2 = ((i < 0 || i >= parts.$length) ? $throwRuntimeError("index out of range") : parts.$array[parts.$offset + i]); _tmp$3 = ""; attr = _tmp$2; val = _tmp$3;
				j$1 = strings.Index(attr, "=");
				if (j$1 >= 0) {
					_tmp$4 = attr.substring(0, j$1); _tmp$5 = attr.substring((j$1 + 1 >> 0)); attr = _tmp$4; val = _tmp$5;
				}
				lowerAttr = strings.ToLower(attr);
				_tuple$1 = parseCookieValue(val); val = _tuple$1[0]; success = _tuple$1[1];
				if (!success) {
					c.Unparsed = $append(c.Unparsed, ((i < 0 || i >= parts.$length) ? $throwRuntimeError("index out of range") : parts.$array[parts.$offset + i]));
					i = i + (1) >> 0;
					continue;
				}
				_ref$1 = lowerAttr;
				switch (0) { default: if (_ref$1 === "secure") {
					c.Secure = true;
					i = i + (1) >> 0;
					continue;
				} else if (_ref$1 === "httponly") {
					c.HttpOnly = true;
					i = i + (1) >> 0;
					continue;
				} else if (_ref$1 === "domain") {
					c.Domain = val;
					i = i + (1) >> 0;
					continue;
				} else if (_ref$1 === "max-age") {
					_tuple$2 = strconv.Atoi(val); secs = _tuple$2[0]; err = _tuple$2[1];
					if (!($interfaceIsEqual(err, $ifaceNil)) || !((secs === 0)) && (val.charCodeAt(0) === 48)) {
						break;
					}
					if (secs <= 0) {
						c.MaxAge = -1;
					} else {
						c.MaxAge = secs;
					}
					i = i + (1) >> 0;
					continue;
				} else if (_ref$1 === "expires") {
					c.RawExpires = val;
					_tuple$3 = time.Parse("Mon, 02 Jan 2006 15:04:05 MST", val); exptime = new time.Time.Ptr(); $copy(exptime, _tuple$3[0], time.Time); err$1 = _tuple$3[1];
					if (!($interfaceIsEqual(err$1, $ifaceNil))) {
						_tuple$4 = time.Parse("Mon, 02-Jan-2006 15:04:05 MST", val); $copy(exptime, _tuple$4[0], time.Time); err$1 = _tuple$4[1];
						if (!($interfaceIsEqual(err$1, $ifaceNil))) {
							$copy(c.Expires, new time.Time.Ptr(new $Int64(0, 0), 0, ($ptrType(time.Location)).nil), time.Time);
							break;
						}
					}
					$copy(c.Expires, exptime.UTC(), time.Time);
					i = i + (1) >> 0;
					continue;
				} else if (_ref$1 === "path") {
					c.Path = val;
					i = i + (1) >> 0;
					continue;
				} }
				c.Unparsed = $append(c.Unparsed, ((i < 0 || i >= parts.$length) ? $throwRuntimeError("index out of range") : parts.$array[parts.$offset + i]));
				i = i + (1) >> 0;
			}
			cookies = $append(cookies, c);
			_i++;
		}
		return cookies;
	};
	Cookie.Ptr.prototype.String = function() {
		var c, b, d, x;
		c = this;
		b = new bytes.Buffer.Ptr(); $copy(b, new bytes.Buffer.Ptr(), bytes.Buffer);
		fmt.Fprintf(b, "%s=%s", new ($sliceType($emptyInterface))([new $String(sanitizeCookieName(c.Name)), new $String(sanitizeCookieValue(c.Value))]));
		if (c.Path.length > 0) {
			fmt.Fprintf(b, "; Path=%s", new ($sliceType($emptyInterface))([new $String(sanitizeCookiePath(c.Path))]));
		}
		if (c.Domain.length > 0) {
			if (validCookieDomain(c.Domain)) {
				d = c.Domain;
				if (d.charCodeAt(0) === 46) {
					d = d.substring(1);
				}
				fmt.Fprintf(b, "; Domain=%s", new ($sliceType($emptyInterface))([new $String(d)]));
			} else {
				log.Printf("net/http: invalid Cookie.Domain %q; dropping domain attribute", new ($sliceType($emptyInterface))([new $String(c.Domain)]));
			}
		}
		if ((x = c.Expires.Unix(), (x.$high > 0 || (x.$high === 0 && x.$low > 0)))) {
			fmt.Fprintf(b, "; Expires=%s", new ($sliceType($emptyInterface))([new $String(c.Expires.UTC().Format("Mon, 02 Jan 2006 15:04:05 MST"))]));
		}
		if (c.MaxAge > 0) {
			fmt.Fprintf(b, "; Max-Age=%d", new ($sliceType($emptyInterface))([new $Int(c.MaxAge)]));
		} else if (c.MaxAge < 0) {
			fmt.Fprintf(b, "; Max-Age=0", new ($sliceType($emptyInterface))([]));
		}
		if (c.HttpOnly) {
			fmt.Fprintf(b, "; HttpOnly", new ($sliceType($emptyInterface))([]));
		}
		if (c.Secure) {
			fmt.Fprintf(b, "; Secure", new ($sliceType($emptyInterface))([]));
		}
		return b.String();
	};
	Cookie.prototype.String = function() { return this.$val.String(); };
	readCookies = function(h, filter) {
		var cookies, _tuple, _entry, lines, ok, _ref, _i, line, parts, parsedPairs, i, _tmp, _tmp$1, name, val, j, _tmp$2, _tmp$3, _tuple$1, success;
		cookies = new ($sliceType(($ptrType(Cookie))))([]);
		_tuple = (_entry = h["Cookie"], _entry !== undefined ? [_entry.v, true] : [($sliceType($String)).nil, false]); lines = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			return cookies;
		}
		_ref = lines;
		_i = 0;
		while (_i < _ref.$length) {
			line = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			parts = strings.Split(strings.TrimSpace(line), ";");
			if ((parts.$length === 1) && ((0 < 0 || 0 >= parts.$length) ? $throwRuntimeError("index out of range") : parts.$array[parts.$offset + 0]) === "") {
				_i++;
				continue;
			}
			parsedPairs = 0;
			i = 0;
			while (i < parts.$length) {
				(i < 0 || i >= parts.$length) ? $throwRuntimeError("index out of range") : parts.$array[parts.$offset + i] = strings.TrimSpace(((i < 0 || i >= parts.$length) ? $throwRuntimeError("index out of range") : parts.$array[parts.$offset + i]));
				if (((i < 0 || i >= parts.$length) ? $throwRuntimeError("index out of range") : parts.$array[parts.$offset + i]).length === 0) {
					i = i + (1) >> 0;
					continue;
				}
				_tmp = ((i < 0 || i >= parts.$length) ? $throwRuntimeError("index out of range") : parts.$array[parts.$offset + i]); _tmp$1 = ""; name = _tmp; val = _tmp$1;
				j = strings.Index(name, "=");
				if (j >= 0) {
					_tmp$2 = name.substring(0, j); _tmp$3 = name.substring((j + 1 >> 0)); name = _tmp$2; val = _tmp$3;
				}
				if (!isCookieNameValid(name)) {
					i = i + (1) >> 0;
					continue;
				}
				if (!(filter === "") && !(filter === name)) {
					i = i + (1) >> 0;
					continue;
				}
				_tuple$1 = parseCookieValue(val); val = _tuple$1[0]; success = _tuple$1[1];
				if (!success) {
					i = i + (1) >> 0;
					continue;
				}
				cookies = $append(cookies, new Cookie.Ptr(name, val, "", "", new time.Time.Ptr(), "", 0, false, false, "", ($sliceType($String)).nil));
				parsedPairs = parsedPairs + (1) >> 0;
				i = i + (1) >> 0;
			}
			_i++;
		}
		return cookies;
	};
	validCookieDomain = function(v) {
		if (isCookieDomainName(v)) {
			return true;
		}
		if (!(net.ParseIP(v) === net.IP.nil) && !strings.Contains(v, ":")) {
			return true;
		}
		return false;
	};
	isCookieDomainName = function(s) {
		var last, ok, partlen, i, c;
		if (s.length === 0) {
			return false;
		}
		if (s.length > 255) {
			return false;
		}
		if (s.charCodeAt(0) === 46) {
			s = s.substring(1);
		}
		last = 46;
		ok = false;
		partlen = 0;
		i = 0;
		while (i < s.length) {
			c = s.charCodeAt(i);
			if (97 <= c && c <= 122 || 65 <= c && c <= 90) {
				ok = true;
				partlen = partlen + (1) >> 0;
			} else if (48 <= c && c <= 57) {
				partlen = partlen + (1) >> 0;
			} else if (c === 45) {
				if (last === 46) {
					return false;
				}
				partlen = partlen + (1) >> 0;
			} else if (c === 46) {
				if ((last === 46) || (last === 45)) {
					return false;
				}
				if (partlen > 63 || (partlen === 0)) {
					return false;
				}
				partlen = 0;
			} else {
				return false;
			}
			last = c;
			i = i + (1) >> 0;
		}
		if ((last === 45) || partlen > 63) {
			return false;
		}
		return ok;
	};
	sanitizeCookieName = function(n) {
		return cookieNameSanitizer.Replace(n);
	};
	sanitizeCookieValue = function(v) {
		v = sanitizeOrWarn("Cookie.Value", validCookieValueByte, v);
		if (v.length === 0) {
			return v;
		}
		if ((v.charCodeAt(0) === 32) || (v.charCodeAt(0) === 44) || (v.charCodeAt((v.length - 1 >> 0)) === 32) || (v.charCodeAt((v.length - 1 >> 0)) === 44)) {
			return "\"" + v + "\"";
		}
		return v;
	};
	validCookieValueByte = function(b) {
		return 32 <= b && b < 127 && !((b === 34)) && !((b === 59)) && !((b === 92));
	};
	sanitizeCookiePath = function(v) {
		return sanitizeOrWarn("Cookie.Path", validCookiePathByte, v);
	};
	validCookiePathByte = function(b) {
		return 32 <= b && b < 127 && !((b === 59));
	};
	sanitizeOrWarn = function(fieldName, valid, v) {
		var ok, i, buf, i$1, b;
		ok = true;
		i = 0;
		while (i < v.length) {
			if (valid(v.charCodeAt(i))) {
				i = i + (1) >> 0;
				continue;
			}
			log.Printf("net/http: invalid byte %q in %s; dropping invalid bytes", new ($sliceType($emptyInterface))([new $Uint8(v.charCodeAt(i)), new $String(fieldName)]));
			ok = false;
			break;
		}
		if (ok) {
			return v;
		}
		buf = ($sliceType($Uint8)).make(0, v.length);
		i$1 = 0;
		while (i$1 < v.length) {
			b = v.charCodeAt(i$1);
			if (valid(b)) {
				buf = $append(buf, b);
			}
			i$1 = i$1 + (1) >> 0;
		}
		return $bytesToString(buf);
	};
	parseCookieValue = function(raw) {
		var i;
		if (raw.length > 1 && (raw.charCodeAt(0) === 34) && (raw.charCodeAt((raw.length - 1 >> 0)) === 34)) {
			raw = raw.substring(1, (raw.length - 1 >> 0));
		}
		i = 0;
		while (i < raw.length) {
			if (!validCookieValueByte(raw.charCodeAt(i))) {
				return ["", false];
			}
			i = i + (1) >> 0;
		}
		return [raw, true];
	};
	isCookieNameValid = function(raw) {
		return strings.IndexFunc(raw, isNotToken) < 0;
	};
	Header.prototype.Add = function(key, value) {
		var h;
		h = this.$val !== undefined ? this.$val : this;
		new textproto.MIMEHeader(h).Add(key, value);
	};
	$ptrType(Header).prototype.Add = function(key, value) { return new Header(this.$get()).Add(key, value); };
	Header.prototype.Set = function(key, value) {
		var h;
		h = this.$val !== undefined ? this.$val : this;
		new textproto.MIMEHeader(h).Set(key, value);
	};
	$ptrType(Header).prototype.Set = function(key, value) { return new Header(this.$get()).Set(key, value); };
	Header.prototype.Get = function(key) {
		var h;
		h = this.$val !== undefined ? this.$val : this;
		return new textproto.MIMEHeader(h).Get(key);
	};
	$ptrType(Header).prototype.Get = function(key) { return new Header(this.$get()).Get(key); };
	Header.prototype.get = function(key) {
		var h, _entry, v;
		h = this.$val !== undefined ? this.$val : this;
		v = (_entry = h[key], _entry !== undefined ? _entry.v : ($sliceType($String)).nil);
		if (v.$length > 0) {
			return ((0 < 0 || 0 >= v.$length) ? $throwRuntimeError("index out of range") : v.$array[v.$offset + 0]);
		}
		return "";
	};
	$ptrType(Header).prototype.get = function(key) { return new Header(this.$get()).get(key); };
	Header.prototype.Del = function(key) {
		var h;
		h = this.$val !== undefined ? this.$val : this;
		new textproto.MIMEHeader(h).Del(key);
	};
	$ptrType(Header).prototype.Del = function(key) { return new Header(this.$get()).Del(key); };
	Header.prototype.Write = function(w) {
		var h;
		h = this.$val !== undefined ? this.$val : this;
		return new Header(h).WriteSubset(w, false);
	};
	$ptrType(Header).prototype.Write = function(w) { return new Header(this.$get()).Write(w); };
	Header.prototype.clone = function() {
		var h, h2, _ref, _i, _keys, _entry, k, vv, vv2, _key$5;
		h = this.$val !== undefined ? this.$val : this;
		h2 = new $Map();
		_ref = h;
		_i = 0;
		_keys = $keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			vv = _entry.v;
			vv2 = ($sliceType($String)).make(vv.$length);
			$copySlice(vv2, vv);
			_key$5 = k; (h2 || $throwRuntimeError("assignment to entry in nil map"))[_key$5] = { k: _key$5, v: vv2 };
			_i++;
		}
		return h2;
	};
	$ptrType(Header).prototype.clone = function() { return new Header(this.$get()).clone(); };
	stringWriter.Ptr.prototype.WriteString = function(s) {
		var n = 0, err = $ifaceNil, w, _tuple;
		w = new stringWriter.Ptr(); $copy(w, this, stringWriter);
		_tuple = w.w.Write(new ($sliceType($Uint8))($stringToBytes(s))); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	stringWriter.prototype.WriteString = function(s) { return this.$val.WriteString(s); };
	headerSorter.Ptr.prototype.Len = function() {
		var s;
		s = this;
		return s.kvs.$length;
	};
	headerSorter.prototype.Len = function() { return this.$val.Len(); };
	headerSorter.Ptr.prototype.Swap = function(i, j) {
		var s, _tmp, x, _tmp$1, x$1, x$2, x$3;
		s = this;
		_tmp = new keyValues.Ptr(); $copy(_tmp, (x = s.kvs, ((j < 0 || j >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + j])), keyValues); _tmp$1 = new keyValues.Ptr(); $copy(_tmp$1, (x$1 = s.kvs, ((i < 0 || i >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + i])), keyValues); $copy((x$2 = s.kvs, ((i < 0 || i >= x$2.$length) ? $throwRuntimeError("index out of range") : x$2.$array[x$2.$offset + i])), _tmp, keyValues); $copy((x$3 = s.kvs, ((j < 0 || j >= x$3.$length) ? $throwRuntimeError("index out of range") : x$3.$array[x$3.$offset + j])), _tmp$1, keyValues);
	};
	headerSorter.prototype.Swap = function(i, j) { return this.$val.Swap(i, j); };
	headerSorter.Ptr.prototype.Less = function(i, j) {
		var s, x, x$1;
		s = this;
		return (x = s.kvs, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i])).key < (x$1 = s.kvs, ((j < 0 || j >= x$1.$length) ? $throwRuntimeError("index out of range") : x$1.$array[x$1.$offset + j])).key;
	};
	headerSorter.prototype.Less = function(i, j) { return this.$val.Less(i, j); };
	Header.prototype.sortedKeyValues = function(exclude) {
		var kvs = ($sliceType(keyValues)).nil, hs = ($ptrType(headerSorter)).nil, h, _ref, _i, _keys, _entry, k, vv, _entry$1, _tmp, _tmp$1;
		h = this.$val !== undefined ? this.$val : this;
		hs = $assertType(headerSorterPool.Get(), ($ptrType(headerSorter)));
		if (hs.kvs.$capacity < $keys(h).length) {
			hs.kvs = ($sliceType(keyValues)).make(0, $keys(h).length);
		}
		kvs = $subslice(hs.kvs, 0, 0);
		_ref = h;
		_i = 0;
		_keys = $keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			vv = _entry.v;
			if (!(_entry$1 = exclude[k], _entry$1 !== undefined ? _entry$1.v : false)) {
				kvs = $append(kvs, new keyValues.Ptr(k, vv));
			}
			_i++;
		}
		hs.kvs = kvs;
		sort.Sort(hs);
		_tmp = kvs; _tmp$1 = hs; kvs = _tmp; hs = _tmp$1;
		return [kvs, hs];
	};
	$ptrType(Header).prototype.sortedKeyValues = function(exclude) { return new Header(this.$get()).sortedKeyValues(exclude); };
	Header.prototype.WriteSubset = function(w, exclude) {
		var h, _tuple, ws, ok, x, _tuple$1, kvs, sorter, _ref, _i, kv, _ref$1, _i$1, v, _ref$2, _i$2, s, _tuple$2, err;
		h = this.$val !== undefined ? this.$val : this;
		_tuple = $assertType(w, writeStringer, true); ws = _tuple[0]; ok = _tuple[1];
		if (!ok) {
			ws = (x = new stringWriter.Ptr(w), new x.constructor.Struct(x));
		}
		_tuple$1 = new Header(h).sortedKeyValues(exclude); kvs = _tuple$1[0]; sorter = _tuple$1[1];
		_ref = kvs;
		_i = 0;
		while (_i < _ref.$length) {
			kv = new keyValues.Ptr(); $copy(kv, ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]), keyValues);
			_ref$1 = kv.values;
			_i$1 = 0;
			while (_i$1 < _ref$1.$length) {
				v = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				v = headerNewlineToSpace.Replace(v);
				v = textproto.TrimString(v);
				_ref$2 = new ($sliceType($String))([kv.key, ": ", v, "\r\n"]);
				_i$2 = 0;
				while (_i$2 < _ref$2.$length) {
					s = ((_i$2 < 0 || _i$2 >= _ref$2.$length) ? $throwRuntimeError("index out of range") : _ref$2.$array[_ref$2.$offset + _i$2]);
					_tuple$2 = ws.WriteString(s); err = _tuple$2[1];
					if (!($interfaceIsEqual(err, $ifaceNil))) {
						return err;
					}
					_i$2++;
				}
				_i$1++;
			}
			_i++;
		}
		headerSorterPool.Put(sorter);
		return $ifaceNil;
	};
	$ptrType(Header).prototype.WriteSubset = function(w, exclude) { return new Header(this.$get()).WriteSubset(w, exclude); };
	CanonicalHeaderKey = $pkg.CanonicalHeaderKey = function(s) {
		return textproto.CanonicalMIMEHeaderKey(s);
	};
	hasToken = function(v, token) {
		var sp, b, endPos;
		if (token.length > v.length || token === "") {
			return false;
		}
		if (v === token) {
			return true;
		}
		sp = 0;
		while (sp <= (v.length - token.length >> 0)) {
			b = v.charCodeAt(sp);
			if (!((b === token.charCodeAt(0))) && !((((b | 32) >>> 0) === token.charCodeAt(0)))) {
				sp = sp + (1) >> 0;
				continue;
			}
			if (sp > 0 && !isTokenBoundary(v.charCodeAt((sp - 1 >> 0)))) {
				sp = sp + (1) >> 0;
				continue;
			}
			endPos = sp + token.length >> 0;
			if (!((endPos === v.length)) && !isTokenBoundary(v.charCodeAt(endPos))) {
				sp = sp + (1) >> 0;
				continue;
			}
			if (strings.EqualFold(v.substring(sp, (sp + token.length >> 0)), token)) {
				return true;
			}
			sp = sp + (1) >> 0;
		}
		return false;
	};
	isTokenBoundary = function(b) {
		return (b === 32) || (b === 44) || (b === 9);
	};
	isToken = function(r) {
		var i;
		i = (r >> 0);
		return i < 127 && ((i < 0 || i >= isTokenTable.length) ? $throwRuntimeError("index out of range") : isTokenTable[i]);
	};
	isNotToken = function(r) {
		return !isToken(r);
	};
	ProtocolError.Ptr.prototype.Error = function() {
		var err;
		err = this;
		return err.ErrorString;
	};
	ProtocolError.prototype.Error = function() { return this.$val.Error(); };
	badStringError.Ptr.prototype.Error = function() {
		var e;
		e = this;
		return fmt.Sprintf("%s %q", new ($sliceType($emptyInterface))([new $String(e.what), new $String(e.str)]));
	};
	badStringError.prototype.Error = function() { return this.$val.Error(); };
	Request.Ptr.prototype.ProtoAtLeast = function(major, minor) {
		var r;
		r = this;
		return r.ProtoMajor > major || (r.ProtoMajor === major) && r.ProtoMinor >= minor;
	};
	Request.prototype.ProtoAtLeast = function(major, minor) { return this.$val.ProtoAtLeast(major, minor); };
	Request.Ptr.prototype.UserAgent = function() {
		var r;
		r = this;
		return new Header(r.Header).Get("User-Agent");
	};
	Request.prototype.UserAgent = function() { return this.$val.UserAgent(); };
	Request.Ptr.prototype.Cookies = function() {
		var r;
		r = this;
		return readCookies(r.Header, "");
	};
	Request.prototype.Cookies = function() { return this.$val.Cookies(); };
	Request.Ptr.prototype.Cookie = function(name) {
		var r, _ref, _i, c;
		r = this;
		_ref = readCookies(r.Header, name);
		_i = 0;
		while (_i < _ref.$length) {
			c = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			return [c, $ifaceNil];
		}
		return [($ptrType(Cookie)).nil, $pkg.ErrNoCookie];
	};
	Request.prototype.Cookie = function(name) { return this.$val.Cookie(name); };
	Request.Ptr.prototype.AddCookie = function(c) {
		var r, s, c$1;
		r = this;
		s = fmt.Sprintf("%s=%s", new ($sliceType($emptyInterface))([new $String(sanitizeCookieName(c.Name)), new $String(sanitizeCookieValue(c.Value))]));
		c$1 = new Header(r.Header).Get("Cookie");
		if (!(c$1 === "")) {
			new Header(r.Header).Set("Cookie", c$1 + "; " + s);
		} else {
			new Header(r.Header).Set("Cookie", s);
		}
	};
	Request.prototype.AddCookie = function(c) { return this.$val.AddCookie(c); };
	Request.Ptr.prototype.Referer = function() {
		var r;
		r = this;
		return new Header(r.Header).Get("Referer");
	};
	Request.prototype.Referer = function() { return this.$val.Referer(); };
	Request.Ptr.prototype.MultipartReader = function() {
		var r;
		r = this;
		if (r.MultipartForm === multipartByReader) {
			return [($ptrType(multipart.Reader)).nil, errors.New("http: MultipartReader called twice")];
		}
		if (!(r.MultipartForm === ($ptrType(multipart.Form)).nil)) {
			return [($ptrType(multipart.Reader)).nil, errors.New("http: multipart handled by ParseMultipartForm")];
		}
		r.MultipartForm = multipartByReader;
		return r.multipartReader();
	};
	Request.prototype.MultipartReader = function() { return this.$val.MultipartReader(); };
	Request.Ptr.prototype.multipartReader = function() {
		var r, v, _tuple, d, params, err, _tuple$1, _entry, boundary, ok;
		r = this;
		v = new Header(r.Header).Get("Content-Type");
		if (v === "") {
			return [($ptrType(multipart.Reader)).nil, $pkg.ErrNotMultipart];
		}
		_tuple = mime.ParseMediaType(v); d = _tuple[0]; params = _tuple[1]; err = _tuple[2];
		if (!($interfaceIsEqual(err, $ifaceNil)) || !(d === "multipart/form-data")) {
			return [($ptrType(multipart.Reader)).nil, $pkg.ErrNotMultipart];
		}
		_tuple$1 = (_entry = params["boundary"], _entry !== undefined ? [_entry.v, true] : ["", false]); boundary = _tuple$1[0]; ok = _tuple$1[1];
		if (!ok) {
			return [($ptrType(multipart.Reader)).nil, $pkg.ErrMissingBoundary];
		}
		return [multipart.NewReader(r.Body, boundary), $ifaceNil];
	};
	Request.prototype.multipartReader = function() { return this.$val.multipartReader(); };
	valueOrDefault = function(value, def) {
		if (!(value === "")) {
			return value;
		}
		return def;
	};
	Request.Ptr.prototype.Write = function(w) {
		var r;
		r = this;
		return r.write(w, false, false);
	};
	Request.prototype.Write = function(w) { return this.$val.Write(w); };
	Request.Ptr.prototype.WriteProxy = function(w) {
		var r;
		r = this;
		return r.write(w, true, false);
	};
	Request.prototype.WriteProxy = function(w) { return this.$val.WriteProxy(w); };
	Request.Ptr.prototype.write = function(w, usingProxy, extraHeaders) {
		var req, host, ruri, bw, _tuple, ok, userAgent, _entry, ua, _tuple$1, tw, err;
		req = this;
		host = req.Host;
		if (host === "") {
			if (req.URL === ($ptrType(url.URL)).nil) {
				return errors.New("http: Request.Write on Request with no Host or URL set");
			}
			host = req.URL.Host;
		}
		ruri = req.URL.RequestURI();
		if (usingProxy && !(req.URL.Scheme === "") && req.URL.Opaque === "") {
			ruri = req.URL.Scheme + "://" + host + ruri;
		} else if (req.Method === "CONNECT" && req.URL.Path === "") {
			ruri = host;
		}
		bw = ($ptrType(bufio.Writer)).nil;
		_tuple = $assertType(w, io.ByteWriter, true); ok = _tuple[1];
		if (!ok) {
			bw = bufio.NewWriter(w);
			w = bw;
		}
		fmt.Fprintf(w, "%s %s HTTP/1.1\r\n", new ($sliceType($emptyInterface))([new $String(valueOrDefault(req.Method, "GET")), new $String(ruri)]));
		fmt.Fprintf(w, "Host: %s\r\n", new ($sliceType($emptyInterface))([new $String(host)]));
		userAgent = "Go 1.1 package http";
		if (!(req.Header === false)) {
			ua = (_entry = req.Header["User-Agent"], _entry !== undefined ? _entry.v : ($sliceType($String)).nil);
			if (ua.$length > 0) {
				userAgent = ((0 < 0 || 0 >= ua.$length) ? $throwRuntimeError("index out of range") : ua.$array[ua.$offset + 0]);
			}
		}
		if (!(userAgent === "")) {
			fmt.Fprintf(w, "User-Agent: %s\r\n", new ($sliceType($emptyInterface))([new $String(userAgent)]));
		}
		_tuple$1 = newTransferWriter(req); tw = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		err = tw.WriteHeader(w);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		err = new Header(req.Header).WriteSubset(w, reqWriteExcludeHeader);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		if (!(extraHeaders === false)) {
			err = new Header(extraHeaders).Write(w);
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
		}
		io.WriteString(w, "\r\n");
		err = tw.WriteBody(w);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		if (!(bw === ($ptrType(bufio.Writer)).nil)) {
			return bw.Flush();
		}
		return $ifaceNil;
	};
	Request.prototype.write = function(w, usingProxy, extraHeaders) { return this.$val.write(w, usingProxy, extraHeaders); };
	ParseHTTPVersion = $pkg.ParseHTTPVersion = function(vers) {
		var major = 0, minor = 0, ok = false, _ref, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7, _tmp$8, dot, _tmp$9, _tmp$10, _tmp$11, _tuple, err, _tmp$12, _tmp$13, _tmp$14, _tuple$1, _tmp$15, _tmp$16, _tmp$17, _tmp$18, _tmp$19, _tmp$20;
		_ref = vers;
		if (_ref === "HTTP/1.1") {
			_tmp = 1; _tmp$1 = 1; _tmp$2 = true; major = _tmp; minor = _tmp$1; ok = _tmp$2;
			return [major, minor, ok];
		} else if (_ref === "HTTP/1.0") {
			_tmp$3 = 1; _tmp$4 = 0; _tmp$5 = true; major = _tmp$3; minor = _tmp$4; ok = _tmp$5;
			return [major, minor, ok];
		}
		if (!strings.HasPrefix(vers, "HTTP/")) {
			_tmp$6 = 0; _tmp$7 = 0; _tmp$8 = false; major = _tmp$6; minor = _tmp$7; ok = _tmp$8;
			return [major, minor, ok];
		}
		dot = strings.Index(vers, ".");
		if (dot < 0) {
			_tmp$9 = 0; _tmp$10 = 0; _tmp$11 = false; major = _tmp$9; minor = _tmp$10; ok = _tmp$11;
			return [major, minor, ok];
		}
		_tuple = strconv.Atoi(vers.substring(5, dot)); major = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil)) || major < 0 || major > 1000000) {
			_tmp$12 = 0; _tmp$13 = 0; _tmp$14 = false; major = _tmp$12; minor = _tmp$13; ok = _tmp$14;
			return [major, minor, ok];
		}
		_tuple$1 = strconv.Atoi(vers.substring((dot + 1 >> 0))); minor = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil)) || minor < 0 || minor > 1000000) {
			_tmp$15 = 0; _tmp$16 = 0; _tmp$17 = false; major = _tmp$15; minor = _tmp$16; ok = _tmp$17;
			return [major, minor, ok];
		}
		_tmp$18 = major; _tmp$19 = minor; _tmp$20 = true; major = _tmp$18; minor = _tmp$19; ok = _tmp$20;
		return [major, minor, ok];
	};
	Request.Ptr.prototype.SetBasicAuth = function(username, password) {
		var r;
		r = this;
		new Header(r.Header).Set("Authorization", "Basic " + basicAuth(username, password));
	};
	Request.prototype.SetBasicAuth = function(username, password) { return this.$val.SetBasicAuth(username, password); };
	parseRequestLine = function(line) {
		var method = "", requestURI = "", proto = "", ok = false, s1, s2, _tmp, _tmp$1, _tmp$2, _tmp$3;
		s1 = strings.Index(line, " ");
		s2 = strings.Index(line.substring((s1 + 1 >> 0)), " ");
		if (s1 < 0 || s2 < 0) {
			return [method, requestURI, proto, ok];
		}
		s2 = s2 + ((s1 + 1 >> 0)) >> 0;
		_tmp = line.substring(0, s1); _tmp$1 = line.substring((s1 + 1 >> 0), s2); _tmp$2 = line.substring((s2 + 1 >> 0)); _tmp$3 = true; method = _tmp; requestURI = _tmp$1; proto = _tmp$2; ok = _tmp$3;
		return [method, requestURI, proto, ok];
	};
	newTextprotoReader = function(br) {
		var v, tr;
		v = textprotoReaderPool.Get();
		if (!($interfaceIsEqual(v, $ifaceNil))) {
			tr = $assertType(v, ($ptrType(textproto.Reader)));
			tr.R = br;
			return tr;
		}
		return textproto.NewReader(br);
	};
	putTextprotoReader = function(r) {
		r.R = ($ptrType(bufio.Reader)).nil;
		textprotoReaderPool.Put(r);
	};
	ReadRequest = $pkg.ReadRequest = function(b) {
		var req = ($ptrType(Request)).nil, err = $ifaceNil, $deferred = [], $err = null, tp, s, _tuple, _tmp, _tmp$1, ok, _tuple$1, _tmp$2, _tmp$3, rawurl, _tuple$2, _tmp$4, _tmp$5, justAuthority, _tuple$3, _tmp$6, _tmp$7, _tuple$4, mimeHeader, _tmp$8, _tmp$9, _tmp$10, _tmp$11, _tmp$12, _tmp$13;
		/* */ try { $deferFrames.push($deferred);
		tp = newTextprotoReader(b);
		req = new Request.Ptr();
		s = "";
		_tuple = tp.ReadLine(); s = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = ($ptrType(Request)).nil; _tmp$1 = err; req = _tmp; err = _tmp$1;
			return [req, err];
		}
		$deferred.push([(function() {
			putTextprotoReader(tp);
			if ($interfaceIsEqual(err, io.EOF)) {
				err = io.ErrUnexpectedEOF;
			}
		}), []]);
		ok = false;
		_tuple$1 = parseRequestLine(s); req.Method = _tuple$1[0]; req.RequestURI = _tuple$1[1]; req.Proto = _tuple$1[2]; ok = _tuple$1[3];
		if (!ok) {
			_tmp$2 = ($ptrType(Request)).nil; _tmp$3 = new badStringError.Ptr("malformed HTTP request", s); req = _tmp$2; err = _tmp$3;
			return [req, err];
		}
		rawurl = req.RequestURI;
		_tuple$2 = ParseHTTPVersion(req.Proto); req.ProtoMajor = _tuple$2[0]; req.ProtoMinor = _tuple$2[1]; ok = _tuple$2[2];
		if (!ok) {
			_tmp$4 = ($ptrType(Request)).nil; _tmp$5 = new badStringError.Ptr("malformed HTTP version", req.Proto); req = _tmp$4; err = _tmp$5;
			return [req, err];
		}
		justAuthority = req.Method === "CONNECT" && !strings.HasPrefix(rawurl, "/");
		if (justAuthority) {
			rawurl = "http://" + rawurl;
		}
		_tuple$3 = url.ParseRequestURI(rawurl); req.URL = _tuple$3[0]; err = _tuple$3[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$6 = ($ptrType(Request)).nil; _tmp$7 = err; req = _tmp$6; err = _tmp$7;
			return [req, err];
		}
		if (justAuthority) {
			req.URL.Scheme = "";
		}
		_tuple$4 = tp.ReadMIMEHeader(); mimeHeader = _tuple$4[0]; err = _tuple$4[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$8 = ($ptrType(Request)).nil; _tmp$9 = err; req = _tmp$8; err = _tmp$9;
			return [req, err];
		}
		req.Header = mimeHeader;
		req.Host = req.URL.Host;
		if (req.Host === "") {
			req.Host = new Header(req.Header).get("Host");
		}
		delete req.Header["Host"];
		fixPragmaCacheControl(req.Header);
		err = readTransfer(req, b);
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp$10 = ($ptrType(Request)).nil; _tmp$11 = err; req = _tmp$10; err = _tmp$11;
			return [req, err];
		}
		_tmp$12 = req; _tmp$13 = $ifaceNil; req = _tmp$12; err = _tmp$13;
		return [req, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [req, err]; }
	};
	MaxBytesReader = $pkg.MaxBytesReader = function(w, r, n) {
		return new maxBytesReader.Ptr(w, r, n, false);
	};
	maxBytesReader.Ptr.prototype.Read = function(p) {
		var n = 0, err = $ifaceNil, l, x, _tuple, res, ok, _tmp, _tmp$1, x$1, x$2, _tuple$1, x$3, x$4;
		l = this;
		if ((x = l.n, (x.$high < 0 || (x.$high === 0 && x.$low <= 0)))) {
			if (!l.stopped) {
				l.stopped = true;
				_tuple = $assertType(l.w, ($ptrType(response)), true); res = _tuple[0]; ok = _tuple[1];
				if (ok) {
					res.requestTooLarge();
				}
			}
			_tmp = 0; _tmp$1 = errors.New("http: request body too large"); n = _tmp; err = _tmp$1;
			return [n, err];
		}
		if ((x$1 = new $Int64(0, p.$length), x$2 = l.n, (x$1.$high > x$2.$high || (x$1.$high === x$2.$high && x$1.$low > x$2.$low)))) {
			p = $subslice(p, 0, $flatten64(l.n));
		}
		_tuple$1 = l.r.Read(p); n = _tuple$1[0]; err = _tuple$1[1];
		l.n = (x$3 = l.n, x$4 = new $Int64(0, n), new $Int64(x$3.$high - x$4.$high, x$3.$low - x$4.$low));
		return [n, err];
	};
	maxBytesReader.prototype.Read = function(p) { return this.$val.Read(p); };
	maxBytesReader.Ptr.prototype.Close = function() {
		var l;
		l = this;
		return l.r.Close();
	};
	maxBytesReader.prototype.Close = function() { return this.$val.Close(); };
	copyValues = function(dst, src) {
		var _ref, _i, _keys, _entry, k, vs, _ref$1, _i$1, value;
		_ref = src;
		_i = 0;
		_keys = $keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			vs = _entry.v;
			_ref$1 = vs;
			_i$1 = 0;
			while (_i$1 < _ref$1.$length) {
				value = ((_i$1 < 0 || _i$1 >= _ref$1.$length) ? $throwRuntimeError("index out of range") : _ref$1.$array[_ref$1.$offset + _i$1]);
				new url.Values(dst).Add(k, value);
				_i$1++;
			}
			_i++;
		}
	};
	parsePostForm = function(r) {
		var vs = false, err = $ifaceNil, ct, _tuple, reader, maxFormSize, _tuple$1, ok, _tuple$2, b, e, x, _tuple$3;
		if ($interfaceIsEqual(r.Body, $ifaceNil)) {
			err = errors.New("missing form body");
			return [vs, err];
		}
		ct = new Header(r.Header).Get("Content-Type");
		if (ct === "") {
			ct = "application/octet-stream";
		}
		_tuple = mime.ParseMediaType(ct); ct = _tuple[0]; err = _tuple[2];
		switch (0) { default: if (ct === "application/x-www-form-urlencoded") {
			reader = r.Body;
			maxFormSize = new $Int64(2147483647, 4294967295);
			_tuple$1 = $assertType(r.Body, ($ptrType(maxBytesReader)), true); ok = _tuple$1[1];
			if (!ok) {
				maxFormSize = new $Int64(0, 10485760);
				reader = io.LimitReader(r.Body, new $Int64(maxFormSize.$high + 0, maxFormSize.$low + 1));
			}
			_tuple$2 = ioutil.ReadAll(reader); b = _tuple$2[0]; e = _tuple$2[1];
			if (!($interfaceIsEqual(e, $ifaceNil))) {
				if ($interfaceIsEqual(err, $ifaceNil)) {
					err = e;
				}
				break;
			}
			if ((x = new $Int64(0, b.$length), (x.$high > maxFormSize.$high || (x.$high === maxFormSize.$high && x.$low > maxFormSize.$low)))) {
				err = errors.New("http: POST too large");
				return [vs, err];
			}
			_tuple$3 = url.ParseQuery($bytesToString(b)); vs = _tuple$3[0]; e = _tuple$3[1];
			if ($interfaceIsEqual(err, $ifaceNil)) {
				err = e;
			}
		} }
		return [vs, err];
	};
	Request.Ptr.prototype.ParseForm = function() {
		var r, err, _tuple, newValues, e, _tuple$1;
		r = this;
		err = $ifaceNil;
		if (r.PostForm === false) {
			if (r.Method === "POST" || r.Method === "PUT" || r.Method === "PATCH") {
				_tuple = parsePostForm(r); r.PostForm = _tuple[0]; err = _tuple[1];
			}
			if (r.PostForm === false) {
				r.PostForm = new $Map();
			}
		}
		if (r.Form === false) {
			if ($keys(r.PostForm).length > 0) {
				r.Form = new $Map();
				copyValues(r.Form, r.PostForm);
			}
			newValues = false;
			if (!(r.URL === ($ptrType(url.URL)).nil)) {
				e = $ifaceNil;
				_tuple$1 = url.ParseQuery(r.URL.RawQuery); newValues = _tuple$1[0]; e = _tuple$1[1];
				if ($interfaceIsEqual(err, $ifaceNil)) {
					err = e;
				}
			}
			if (newValues === false) {
				newValues = new $Map();
			}
			if (r.Form === false) {
				r.Form = newValues;
			} else {
				copyValues(r.Form, newValues);
			}
		}
		return err;
	};
	Request.prototype.ParseForm = function() { return this.$val.ParseForm(); };
	Request.Ptr.prototype.ParseMultipartForm = function(maxMemory) {
		var r, err, _tuple, mr, err$1, _tuple$1, f, _ref, _i, _keys, _entry, k, v, _key$5, _entry$1;
		r = this;
		if (r.MultipartForm === multipartByReader) {
			return errors.New("http: multipart handled by MultipartReader");
		}
		if (r.Form === false) {
			err = r.ParseForm();
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
		}
		if (!(r.MultipartForm === ($ptrType(multipart.Form)).nil)) {
			return $ifaceNil;
		}
		_tuple = r.multipartReader(); mr = _tuple[0]; err$1 = _tuple[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			return err$1;
		}
		_tuple$1 = mr.ReadForm(maxMemory); f = _tuple$1[0]; err$1 = _tuple$1[1];
		if (!($interfaceIsEqual(err$1, $ifaceNil))) {
			return err$1;
		}
		_ref = f.Value;
		_i = 0;
		_keys = $keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			v = _entry.v;
			_key$5 = k; (r.Form || $throwRuntimeError("assignment to entry in nil map"))[_key$5] = { k: _key$5, v: $appendSlice((_entry$1 = r.Form[k], _entry$1 !== undefined ? _entry$1.v : ($sliceType($String)).nil), v) };
			_i++;
		}
		r.MultipartForm = f;
		return $ifaceNil;
	};
	Request.prototype.ParseMultipartForm = function(maxMemory) { return this.$val.ParseMultipartForm(maxMemory); };
	Request.Ptr.prototype.FormValue = function(key) {
		var r, _entry, vs;
		r = this;
		if (r.Form === false) {
			r.ParseMultipartForm(new $Int64(0, 33554432));
		}
		vs = (_entry = r.Form[key], _entry !== undefined ? _entry.v : ($sliceType($String)).nil);
		if (vs.$length > 0) {
			return ((0 < 0 || 0 >= vs.$length) ? $throwRuntimeError("index out of range") : vs.$array[vs.$offset + 0]);
		}
		return "";
	};
	Request.prototype.FormValue = function(key) { return this.$val.FormValue(key); };
	Request.Ptr.prototype.PostFormValue = function(key) {
		var r, _entry, vs;
		r = this;
		if (r.PostForm === false) {
			r.ParseMultipartForm(new $Int64(0, 33554432));
		}
		vs = (_entry = r.PostForm[key], _entry !== undefined ? _entry.v : ($sliceType($String)).nil);
		if (vs.$length > 0) {
			return ((0 < 0 || 0 >= vs.$length) ? $throwRuntimeError("index out of range") : vs.$array[vs.$offset + 0]);
		}
		return "";
	};
	Request.prototype.PostFormValue = function(key) { return this.$val.PostFormValue(key); };
	Request.Ptr.prototype.FormFile = function(key) {
		var r, err, _entry, fhs, _tuple, f, err$1;
		r = this;
		if (r.MultipartForm === multipartByReader) {
			return [$ifaceNil, ($ptrType(multipart.FileHeader)).nil, errors.New("http: multipart handled by MultipartReader")];
		}
		if (r.MultipartForm === ($ptrType(multipart.Form)).nil) {
			err = r.ParseMultipartForm(new $Int64(0, 33554432));
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [$ifaceNil, ($ptrType(multipart.FileHeader)).nil, err];
			}
		}
		if (!(r.MultipartForm === ($ptrType(multipart.Form)).nil) && !(r.MultipartForm.File === false)) {
			fhs = (_entry = r.MultipartForm.File[key], _entry !== undefined ? _entry.v : ($sliceType(($ptrType(multipart.FileHeader)))).nil);
			if (fhs.$length > 0) {
				_tuple = ((0 < 0 || 0 >= fhs.$length) ? $throwRuntimeError("index out of range") : fhs.$array[fhs.$offset + 0]).Open(); f = _tuple[0]; err$1 = _tuple[1];
				return [f, ((0 < 0 || 0 >= fhs.$length) ? $throwRuntimeError("index out of range") : fhs.$array[fhs.$offset + 0]), err$1];
			}
		}
		return [$ifaceNil, ($ptrType(multipart.FileHeader)).nil, $pkg.ErrMissingFile];
	};
	Request.prototype.FormFile = function(key) { return this.$val.FormFile(key); };
	Request.Ptr.prototype.expectsContinue = function() {
		var r;
		r = this;
		return hasToken(new Header(r.Header).get("Expect"), "100-continue");
	};
	Request.prototype.expectsContinue = function() { return this.$val.expectsContinue(); };
	Request.Ptr.prototype.wantsHttp10KeepAlive = function() {
		var r;
		r = this;
		if (!((r.ProtoMajor === 1)) || !((r.ProtoMinor === 0))) {
			return false;
		}
		return hasToken(new Header(r.Header).get("Connection"), "keep-alive");
	};
	Request.prototype.wantsHttp10KeepAlive = function() { return this.$val.wantsHttp10KeepAlive(); };
	Request.Ptr.prototype.wantsClose = function() {
		var r;
		r = this;
		return hasToken(new Header(r.Header).get("Connection"), "close");
	};
	Request.prototype.wantsClose = function() { return this.$val.wantsClose(); };
	Response.Ptr.prototype.Cookies = function() {
		var r;
		r = this;
		return readSetCookies(r.Header);
	};
	Response.prototype.Cookies = function() { return this.$val.Cookies(); };
	Response.Ptr.prototype.Location = function() {
		var r, lv;
		r = this;
		lv = new Header(r.Header).Get("Location");
		if (lv === "") {
			return [($ptrType(url.URL)).nil, $pkg.ErrNoLocation];
		}
		if (!(r.Request === ($ptrType(Request)).nil) && !(r.Request.URL === ($ptrType(url.URL)).nil)) {
			return r.Request.URL.Parse(lv);
		}
		return url.Parse(lv);
	};
	Response.prototype.Location = function() { return this.$val.Location(); };
	fixPragmaCacheControl = function(header) {
		var _tuple, _entry, hp, ok, _tuple$1, _entry$1, presentcc, _key$5;
		_tuple = (_entry = header["Pragma"], _entry !== undefined ? [_entry.v, true] : [($sliceType($String)).nil, false]); hp = _tuple[0]; ok = _tuple[1];
		if (ok && hp.$length > 0 && ((0 < 0 || 0 >= hp.$length) ? $throwRuntimeError("index out of range") : hp.$array[hp.$offset + 0]) === "no-cache") {
			_tuple$1 = (_entry$1 = header["Cache-Control"], _entry$1 !== undefined ? [_entry$1.v, true] : [($sliceType($String)).nil, false]); presentcc = _tuple$1[1];
			if (!presentcc) {
				_key$5 = "Cache-Control"; (header || $throwRuntimeError("assignment to entry in nil map"))[_key$5] = { k: _key$5, v: new ($sliceType($String))(["no-cache"]) };
			}
		}
	};
	Response.Ptr.prototype.ProtoAtLeast = function(major, minor) {
		var r;
		r = this;
		return r.ProtoMajor > major || (r.ProtoMajor === major) && r.ProtoMinor >= minor;
	};
	Response.prototype.ProtoAtLeast = function(major, minor) { return this.$val.ProtoAtLeast(major, minor); };
	Response.Ptr.prototype.Write = function(w) {
		var r, text, ok, _tuple, _entry, _tmp, _tmp$1, protoMajor, protoMinor, statusCode, _tuple$1, err, r1, x, buf, _tuple$2, n, err$1, x$1, x$2, _tuple$3, tw, err$2, contentLengthAlreadySent, x$3, _tuple$4, err$3, _tuple$5, err$4;
		r = this;
		text = r.Status;
		if (text === "") {
			ok = false;
			_tuple = (_entry = statusText[r.StatusCode], _entry !== undefined ? [_entry.v, true] : ["", false]); text = _tuple[0]; ok = _tuple[1];
			if (!ok) {
				text = "status code " + strconv.Itoa(r.StatusCode);
			}
		}
		_tmp = strconv.Itoa(r.ProtoMajor); _tmp$1 = strconv.Itoa(r.ProtoMinor); protoMajor = _tmp; protoMinor = _tmp$1;
		statusCode = strconv.Itoa(r.StatusCode) + " ";
		text = strings.TrimPrefix(text, statusCode);
		_tuple$1 = io.WriteString(w, "HTTP/" + protoMajor + "." + protoMinor + " " + statusCode + text + "\r\n"); err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		r1 = new Response.Ptr();
		$copy(r1, r, Response);
		if ((x = r1.ContentLength, (x.$high === 0 && x.$low === 0)) && !($interfaceIsEqual(r1.Body, $ifaceNil))) {
			buf = ($arrayType($Uint8, 1)).zero(); $copy(buf, ($arrayType($Uint8, 1)).zero(), ($arrayType($Uint8, 1)));
			_tuple$2 = r1.Body.Read(new ($sliceType($Uint8))(buf)); n = _tuple$2[0]; err$1 = _tuple$2[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil)) && !($interfaceIsEqual(err$1, io.EOF))) {
				return err$1;
			}
			if (n === 0) {
				r1.Body = eofReader;
			} else {
				r1.ContentLength = new $Int64(-1, 4294967295);
				r1.Body = (x$1 = new ($structType([["Reader", "", "", io.Reader, ""], ["Closer", "", "", io.Closer, ""]])).Ptr(io.MultiReader(new ($sliceType(io.Reader))([bytes.NewReader($subslice(new ($sliceType($Uint8))(buf), 0, 1)), r.Body])), r.Body), new x$1.constructor.Struct(x$1));
			}
		}
		if ((x$2 = r1.ContentLength, (x$2.$high === -1 && x$2.$low === 4294967295)) && !r1.Close && r1.ProtoAtLeast(1, 1) && !chunked(r1.TransferEncoding)) {
			r1.Close = true;
		}
		_tuple$3 = newTransferWriter(r1); tw = _tuple$3[0]; err$2 = _tuple$3[1];
		if (!($interfaceIsEqual(err$2, $ifaceNil))) {
			return err$2;
		}
		err$2 = tw.WriteHeader(w);
		if (!($interfaceIsEqual(err$2, $ifaceNil))) {
			return err$2;
		}
		err$2 = new Header(r.Header).WriteSubset(w, respExcludeHeader);
		if (!($interfaceIsEqual(err$2, $ifaceNil))) {
			return err$2;
		}
		contentLengthAlreadySent = tw.shouldSendContentLength();
		if ((x$3 = r1.ContentLength, (x$3.$high === 0 && x$3.$low === 0)) && !chunked(r1.TransferEncoding) && !contentLengthAlreadySent) {
			_tuple$4 = io.WriteString(w, "Content-Length: 0\r\n"); err$3 = _tuple$4[1];
			if (!($interfaceIsEqual(err$3, $ifaceNil))) {
				return err$3;
			}
		}
		_tuple$5 = io.WriteString(w, "\r\n"); err$4 = _tuple$5[1];
		if (!($interfaceIsEqual(err$4, $ifaceNil))) {
			return err$4;
		}
		err$2 = tw.WriteBody(w);
		if (!($interfaceIsEqual(err$2, $ifaceNil))) {
			return err$2;
		}
		return $ifaceNil;
	};
	Response.prototype.Write = function(w) { return this.$val.Write(w); };
	conn.Ptr.prototype.hijacked = function() {
		var $deferred = [], $err = null, c;
		/* */ try { $deferFrames.push($deferred);
		c = this;
		c.mu.Lock();
		$deferred.push([$methodVal(c.mu, "Unlock"), []]);
		return c.hijackedv;
		/* */ } catch(err) { $err = err; return false; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	conn.prototype.hijacked = function() { return this.$val.hijacked(); };
	conn.Ptr.prototype.hijack = function() {
		var rwc = $ifaceNil, buf = ($ptrType(bufio.ReadWriter)).nil, err = $ifaceNil, $deferred = [], $err = null, c, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5;
		/* */ try { $deferFrames.push($deferred);
		c = this;
		c.mu.Lock();
		$deferred.push([$methodVal(c.mu, "Unlock"), []]);
		if (c.hijackedv) {
			_tmp = $ifaceNil; _tmp$1 = ($ptrType(bufio.ReadWriter)).nil; _tmp$2 = $pkg.ErrHijacked; rwc = _tmp; buf = _tmp$1; err = _tmp$2;
			return [rwc, buf, err];
		}
		if (!(c.closeNotifyc === ($chanType($Bool, false, false)).nil)) {
			_tmp$3 = $ifaceNil; _tmp$4 = ($ptrType(bufio.ReadWriter)).nil; _tmp$5 = errors.New("http: Hijack is incompatible with use of CloseNotifier"); rwc = _tmp$3; buf = _tmp$4; err = _tmp$5;
			return [rwc, buf, err];
		}
		c.hijackedv = true;
		rwc = c.rwc;
		buf = c.buf;
		c.rwc = $ifaceNil;
		c.buf = ($ptrType(bufio.ReadWriter)).nil;
		c.setState(rwc, 3);
		return [rwc, buf, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [rwc, buf, err]; }
	};
	conn.prototype.hijack = function() { return this.$val.hijack(); };
	conn.Ptr.prototype.closeNotify = function() {
		var $deferred = [], $err = null, c, _tuple, pr, pw, readSource;
		/* */ try { $deferFrames.push($deferred);
		c = this;
		c.mu.Lock();
		$deferred.push([$methodVal(c.mu, "Unlock"), []]);
		if (c.closeNotifyc === ($chanType($Bool, false, false)).nil) {
			c.closeNotifyc = new ($chanType($Bool, false, false))(1);
			if (c.hijackedv) {
				return c.closeNotifyc;
			}
			_tuple = io.Pipe(); pr = _tuple[0]; pw = _tuple[1];
			readSource = c.sr.r;
			c.sr.Mutex.Lock();
			c.sr.r = pr;
			c.sr.Mutex.Unlock();
			$go((function($b) {
				var $this = this, $args = arguments, $r, $s = 0, _tuple$1, err;
				/* */ if(!$b) { $nonblockingCall(); }; var $f = function() { s: while (true) { switch ($s) { case 0:
				_tuple$1 = io.Copy(pw, readSource); err = _tuple$1[1];
				if ($interfaceIsEqual(err, $ifaceNil)) {
					err = io.EOF;
				}
				pw.CloseWithError(err);
				$r = c.noteClientGone(true); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
				/* */ case -1: } return; } }; $f.$blocking = true; return $f;
			}), []);
		}
		return c.closeNotifyc;
		/* */ } catch(err) { $err = err; return ($chanType($Bool, false, true)).nil; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	conn.prototype.closeNotify = function() { return this.$val.closeNotify(); };
	conn.Ptr.prototype.noteClientGone = function($b) {
		var $this = this, $args = arguments, $r, $deferred = [], $err = null, $s = 0, c;
		/* */ if(!$b) { $nonblockingCall(); }; var $blocking_noteClientGone = function() { try { $deferFrames.push($deferred); s: while (true) { switch ($s) { case 0:
		c = $this;
		c.mu.Lock();
		$deferred.push([$methodVal(c.mu, "Unlock"), [true]]);
		/* if (!(c.closeNotifyc === ($chanType($Bool, false, false)).nil) && !c.clientGone) { */ if (!(c.closeNotifyc === ($chanType($Bool, false, false)).nil) && !c.clientGone) {} else { $s = 1; continue; }
			$r = $send(c.closeNotifyc, true, true); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		/* } */ case 1:
		c.clientGone = true;
		/* */ case -1: } return; } } catch(err) { $err = err; } finally { $deferFrames.pop(); if ($curGoroutine.asleep && !$jumpToDefer) { throw null; } $s = -1; $callDeferred($deferred, $err); } }; $blocking_noteClientGone.$blocking = true; return $blocking_noteClientGone;
	};
	conn.prototype.noteClientGone = function($b) { return this.$val.noteClientGone($b); };
	liveSwitchReader.Ptr.prototype.Read = function(p) {
		var n = 0, err = $ifaceNil, sr, r, _tuple;
		sr = this;
		sr.Mutex.Lock();
		r = sr.r;
		sr.Mutex.Unlock();
		_tuple = r.Read(p); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	liveSwitchReader.prototype.Read = function(p) { return this.$val.Read(p); };
	chunkWriter.Ptr.prototype.Write = function(p) {
		var n = 0, err = $ifaceNil, cw, _tmp, _tmp$1, _tuple, _tuple$1, _tuple$2;
		cw = this;
		if (!cw.wroteHeader) {
			cw.writeHeader(p);
		}
		if (cw.res.req.Method === "HEAD") {
			_tmp = p.$length; _tmp$1 = $ifaceNil; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		if (cw.chunking) {
			_tuple = fmt.Fprintf(cw.res.conn.buf, "%x\r\n", new ($sliceType($emptyInterface))([new $Int(p.$length)])); err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				cw.res.conn.rwc.Close();
				return [n, err];
			}
		}
		_tuple$1 = cw.res.conn.buf.Writer.Write(p); n = _tuple$1[0]; err = _tuple$1[1];
		if (cw.chunking && $interfaceIsEqual(err, $ifaceNil)) {
			_tuple$2 = cw.res.conn.buf.Writer.Write(crlf); err = _tuple$2[1];
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			cw.res.conn.rwc.Close();
		}
		return [n, err];
	};
	chunkWriter.prototype.Write = function(p) { return this.$val.Write(p); };
	chunkWriter.Ptr.prototype.flush = function() {
		var cw;
		cw = this;
		if (!cw.wroteHeader) {
			cw.writeHeader(($sliceType($Uint8)).nil);
		}
		cw.res.conn.buf.Writer.Flush();
	};
	chunkWriter.prototype.flush = function() { return this.$val.flush(); };
	chunkWriter.Ptr.prototype.close = function() {
		var cw;
		cw = this;
		if (!cw.wroteHeader) {
			cw.writeHeader(($sliceType($Uint8)).nil);
		}
		if (cw.chunking) {
			cw.res.conn.buf.Writer.WriteString("0\r\n\r\n");
		}
	};
	chunkWriter.prototype.close = function() { return this.$val.close(); };
	response.Ptr.prototype.requestTooLarge = function() {
		var w;
		w = this;
		w.closeAfterReply = true;
		w.requestBodyLimitHit = true;
		if (!w.wroteHeader) {
			new Header(w.Header()).Set("Connection", "close");
		}
	};
	response.prototype.requestTooLarge = function() { return this.$val.requestTooLarge(); };
	response.Ptr.prototype.needsSniff = function() {
		var w, _tuple, _entry, haveType, x;
		w = this;
		_tuple = (_entry = w.handlerHeader["Content-Type"], _entry !== undefined ? [_entry.v, true] : [($sliceType($String)).nil, false]); haveType = _tuple[1];
		return !w.cw.wroteHeader && !haveType && (x = w.written, (x.$high < 0 || (x.$high === 0 && x.$low < 512)));
	};
	response.prototype.needsSniff = function() { return this.$val.needsSniff(); };
	srcIsRegularFile = function(src) {
		var isRegular = false, err = $ifaceNil, v, _ref, _tuple, fi, err$1, _tmp, _tmp$1, _tmp$2, _tmp$3, _tuple$1;
		_ref = src;
		if ($assertType(_ref, ($ptrType(os.File)), true)[1]) {
			v = _ref.$val;
			_tuple = v.Stat(); fi = _tuple[0]; err$1 = _tuple[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp = false; _tmp$1 = err$1; isRegular = _tmp; err = _tmp$1;
				return [isRegular, err];
			}
			_tmp$2 = new os.FileMode(fi.Mode()).IsRegular(); _tmp$3 = $ifaceNil; isRegular = _tmp$2; err = _tmp$3;
			return [isRegular, err];
		} else if ($assertType(_ref, ($ptrType(io.LimitedReader)), true)[1]) {
			v = _ref.$val;
			_tuple$1 = srcIsRegularFile(v.R); isRegular = _tuple$1[0]; err = _tuple$1[1];
			return [isRegular, err];
		} else {
			v = _ref;
			return [isRegular, err];
		}
	};
	response.Ptr.prototype.ReadFrom = function(src) {
		var n = new $Int64(0, 0), err = $ifaceNil, w, _tuple, rf, ok, _tuple$1, regFile, _tmp, _tmp$1, _tuple$2, x, _tuple$3, x$1, n0, err$1, x$2, _tmp$2, _tmp$3, _tuple$4, n0$1, err$2, x$3, x$4, x$5, _tmp$4, _tmp$5, _tuple$5, x$6, n0$2, x$7, _tmp$6, _tmp$7;
		w = this;
		_tuple = $assertType(w.conn.rwc, io.ReaderFrom, true); rf = _tuple[0]; ok = _tuple[1];
		_tuple$1 = srcIsRegularFile(src); regFile = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			_tmp = new $Int64(0, 0); _tmp$1 = err; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		if (!ok || !regFile) {
			_tuple$2 = io.Copy((x = new writerOnly.Ptr(w), new x.constructor.Struct(x)), src); n = _tuple$2[0]; err = _tuple$2[1];
			return [n, err];
		}
		if (!w.wroteHeader) {
			w.WriteHeader(200);
		}
		if (w.needsSniff()) {
			_tuple$3 = io.Copy((x$1 = new writerOnly.Ptr(w), new x$1.constructor.Struct(x$1)), io.LimitReader(src, new $Int64(0, 512))); n0 = _tuple$3[0]; err$1 = _tuple$3[1];
			n = (x$2 = n0, new $Int64(n.$high + x$2.$high, n.$low + x$2.$low));
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				_tmp$2 = n; _tmp$3 = err$1; n = _tmp$2; err = _tmp$3;
				return [n, err];
			}
		}
		w.w.Flush();
		w.cw.flush();
		if (!w.cw.chunking && w.bodyAllowed()) {
			_tuple$4 = rf.ReadFrom(src); n0$1 = _tuple$4[0]; err$2 = _tuple$4[1];
			n = (x$3 = n0$1, new $Int64(n.$high + x$3.$high, n.$low + x$3.$low));
			w.written = (x$4 = w.written, x$5 = n0$1, new $Int64(x$4.$high + x$5.$high, x$4.$low + x$5.$low));
			_tmp$4 = n; _tmp$5 = err$2; n = _tmp$4; err = _tmp$5;
			return [n, err];
		}
		_tuple$5 = io.Copy((x$6 = new writerOnly.Ptr(w), new x$6.constructor.Struct(x$6)), src); n0$2 = _tuple$5[0]; err = _tuple$5[1];
		n = (x$7 = n0$2, new $Int64(n.$high + x$7.$high, n.$low + x$7.$low));
		_tmp$6 = n; _tmp$7 = err; n = _tmp$6; err = _tmp$7;
		return [n, err];
	};
	response.prototype.ReadFrom = function(src) { return this.$val.ReadFrom(src); };
	Server.Ptr.prototype.newConn = function(rwc) {
		var c = ($ptrType(conn)).nil, err = $ifaceNil, srv, br, bw, _tmp, _tmp$1;
		srv = this;
		c = new conn.Ptr();
		c.remoteAddr = rwc.RemoteAddr().String();
		c.server = srv;
		c.rwc = rwc;
		$copy(c.sr, new liveSwitchReader.Ptr(new sync.Mutex.Ptr(), c.rwc), liveSwitchReader);
		c.lr = $assertType(io.LimitReader(c.sr, new $Int64(2147483647, 4294967295)), ($ptrType(io.LimitedReader)));
		br = newBufioReader(c.lr);
		bw = newBufioWriterSize(c.rwc, 4096);
		c.buf = bufio.NewReadWriter(br, bw);
		_tmp = c; _tmp$1 = $ifaceNil; c = _tmp; err = _tmp$1;
		return [c, err];
	};
	Server.prototype.newConn = function(rwc) { return this.$val.newConn(rwc); };
	bufioWriterPool = function(size) {
		var _ref;
		_ref = size;
		if (_ref === 2048) {
			return bufioWriter2kPool;
		} else if (_ref === 4096) {
			return bufioWriter4kPool;
		}
		return ($ptrType(sync.Pool)).nil;
	};
	newBufioReader = function(r) {
		var v, br;
		v = bufioReaderPool.Get();
		if (!($interfaceIsEqual(v, $ifaceNil))) {
			br = $assertType(v, ($ptrType(bufio.Reader)));
			br.Reset(r);
			return br;
		}
		return bufio.NewReader(r);
	};
	putBufioReader = function(br) {
		br.Reset($ifaceNil);
		bufioReaderPool.Put(br);
	};
	newBufioWriterSize = function(w, size) {
		var pool, v, bw;
		pool = bufioWriterPool(size);
		if (!(pool === ($ptrType(sync.Pool)).nil)) {
			v = pool.Get();
			if (!($interfaceIsEqual(v, $ifaceNil))) {
				bw = $assertType(v, ($ptrType(bufio.Writer)));
				bw.Reset(w);
				return bw;
			}
		}
		return bufio.NewWriterSize(w, size);
	};
	putBufioWriter = function(bw) {
		var pool;
		bw.Reset($ifaceNil);
		pool = bufioWriterPool(bw.Available());
		if (!(pool === ($ptrType(sync.Pool)).nil)) {
			pool.Put(bw);
		}
	};
	Server.Ptr.prototype.maxHeaderBytes = function() {
		var srv;
		srv = this;
		if (srv.MaxHeaderBytes > 0) {
			return srv.MaxHeaderBytes;
		}
		return 1048576;
	};
	Server.prototype.maxHeaderBytes = function() { return this.$val.maxHeaderBytes(); };
	Server.Ptr.prototype.initialLimitedReaderSize = function() {
		var srv, x;
		srv = this;
		return (x = new $Int64(0, srv.maxHeaderBytes()), new $Int64(x.$high + 0, x.$low + 4096));
	};
	Server.prototype.initialLimitedReaderSize = function() { return this.$val.initialLimitedReaderSize(); };
	expectContinueReader.Ptr.prototype.Read = function(p) {
		var n = 0, err = $ifaceNil, ecr, _tmp, _tmp$1, _tuple;
		ecr = this;
		if (ecr.closed) {
			_tmp = 0; _tmp$1 = $pkg.ErrBodyReadAfterClose; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		if (!ecr.resp.wroteContinue && !ecr.resp.conn.hijacked()) {
			ecr.resp.wroteContinue = true;
			ecr.resp.conn.buf.Writer.WriteString("HTTP/1.1 100 Continue\r\n\r\n");
			ecr.resp.conn.buf.Writer.Flush();
		}
		_tuple = ecr.readCloser.Read(p); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	expectContinueReader.prototype.Read = function(p) { return this.$val.Read(p); };
	expectContinueReader.Ptr.prototype.Close = function() {
		var ecr;
		ecr = this;
		ecr.closed = true;
		return ecr.readCloser.Close();
	};
	expectContinueReader.prototype.Close = function() { return this.$val.Close(); };
	appendTime = function(b, t) {
		var _tuple, yy, mm, dd, _tuple$1, hh, mn, ss, x, day, x$1, mon, _q, _r, _q$1, _r$1, _q$2, _r$2, _q$3, _r$3, _q$4, _r$4, _q$5, _r$5, _q$6, _r$6;
		$copy(t, t.UTC(), time.Time);
		_tuple = t.Date(); yy = _tuple[0]; mm = _tuple[1]; dd = _tuple[2];
		_tuple$1 = t.Clock(); hh = _tuple$1[0]; mn = _tuple$1[1]; ss = _tuple$1[2];
		day = "SunMonTueWedThuFriSat".substring((x = t.Weekday(), (((3 >>> 16 << 16) * x >> 0) + (3 << 16 >>> 16) * x) >> 0));
		mon = "JanFebMarAprMayJunJulAugSepOctNovDec".substring((x$1 = (mm - 1 >> 0), (((3 >>> 16 << 16) * x$1 >> 0) + (3 << 16 >>> 16) * x$1) >> 0));
		return $append(b, day.charCodeAt(0), day.charCodeAt(1), day.charCodeAt(2), 44, 32, ((48 + (_q = dd / 10, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) << 24 >>> 24), ((48 + (_r = dd % 10, _r === _r ? _r : $throwRuntimeError("integer divide by zero")) >> 0) << 24 >>> 24), 32, mon.charCodeAt(0), mon.charCodeAt(1), mon.charCodeAt(2), 32, ((48 + (_q$1 = yy / 1000, (_q$1 === _q$1 && _q$1 !== 1/0 && _q$1 !== -1/0) ? _q$1 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) << 24 >>> 24), ((48 + (_r$1 = ((_q$2 = yy / 100, (_q$2 === _q$2 && _q$2 !== 1/0 && _q$2 !== -1/0) ? _q$2 >> 0 : $throwRuntimeError("integer divide by zero"))) % 10, _r$1 === _r$1 ? _r$1 : $throwRuntimeError("integer divide by zero")) >> 0) << 24 >>> 24), ((48 + (_r$2 = ((_q$3 = yy / 10, (_q$3 === _q$3 && _q$3 !== 1/0 && _q$3 !== -1/0) ? _q$3 >> 0 : $throwRuntimeError("integer divide by zero"))) % 10, _r$2 === _r$2 ? _r$2 : $throwRuntimeError("integer divide by zero")) >> 0) << 24 >>> 24), ((48 + (_r$3 = yy % 10, _r$3 === _r$3 ? _r$3 : $throwRuntimeError("integer divide by zero")) >> 0) << 24 >>> 24), 32, ((48 + (_q$4 = hh / 10, (_q$4 === _q$4 && _q$4 !== 1/0 && _q$4 !== -1/0) ? _q$4 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) << 24 >>> 24), ((48 + (_r$4 = hh % 10, _r$4 === _r$4 ? _r$4 : $throwRuntimeError("integer divide by zero")) >> 0) << 24 >>> 24), 58, ((48 + (_q$5 = mn / 10, (_q$5 === _q$5 && _q$5 !== 1/0 && _q$5 !== -1/0) ? _q$5 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) << 24 >>> 24), ((48 + (_r$5 = mn % 10, _r$5 === _r$5 ? _r$5 : $throwRuntimeError("integer divide by zero")) >> 0) << 24 >>> 24), 58, ((48 + (_q$6 = ss / 10, (_q$6 === _q$6 && _q$6 !== 1/0 && _q$6 !== -1/0) ? _q$6 >> 0 : $throwRuntimeError("integer divide by zero")) >> 0) << 24 >>> 24), ((48 + (_r$6 = ss % 10, _r$6 === _r$6 ? _r$6 : $throwRuntimeError("integer divide by zero")) >> 0) << 24 >>> 24), 32, 71, 77, 84);
	};
	conn.Ptr.prototype.readRequest = function() {
		var w = ($ptrType(response)).nil, err = $ifaceNil, $deferred = [], $err = null, c, _tmp, _tmp$1, d, d$1, req, _tuple, x, _tmp$2, _tmp$3, _tmp$4, _tmp$5, _tmp$6, _tmp$7;
		/* */ try { $deferFrames.push($deferred);
		c = this;
		if (c.hijacked()) {
			_tmp = ($ptrType(response)).nil; _tmp$1 = $pkg.ErrHijacked; w = _tmp; err = _tmp$1;
			return [w, err];
		}
		d = c.server.ReadTimeout;
		if (!((d.$high === 0 && d.$low === 0))) {
			c.rwc.SetReadDeadline($clone(time.Now().Add(d), time.Time));
		}
		d$1 = c.server.WriteTimeout;
		if (!((d$1.$high === 0 && d$1.$low === 0))) {
			$deferred.push([(function() {
				c.rwc.SetWriteDeadline($clone(time.Now().Add(d$1), time.Time));
			}), []]);
		}
		c.lr.N = c.server.initialLimitedReaderSize();
		req = ($ptrType(Request)).nil;
		_tuple = ReadRequest(c.buf.Reader); req = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ((x = c.lr.N, (x.$high === 0 && x.$low === 0))) {
				_tmp$2 = ($ptrType(response)).nil; _tmp$3 = errTooLarge; w = _tmp$2; err = _tmp$3;
				return [w, err];
			}
			_tmp$4 = ($ptrType(response)).nil; _tmp$5 = err; w = _tmp$4; err = _tmp$5;
			return [w, err];
		}
		c.lr.N = new $Int64(2147483647, 4294967295);
		req.RemoteAddr = c.remoteAddr;
		req.TLS = c.tlsState;
		w = new response.Ptr(c, req, false, false, ($ptrType(bufio.Writer)).nil, new chunkWriter.Ptr(), ($ptrType(switchWriter)).nil, new $Map(), false, new $Int64(0, 0), new $Int64(-1, 4294967295), 0, false, false, false, ($arrayType($Uint8, 29)).zero(), ($arrayType($Uint8, 10)).zero());
		w.cw.res = w;
		w.w = newBufioWriterSize(w.cw, 2048);
		_tmp$6 = w; _tmp$7 = $ifaceNil; w = _tmp$6; err = _tmp$7;
		return [w, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [w, err]; }
	};
	conn.prototype.readRequest = function() { return this.$val.readRequest(); };
	response.Ptr.prototype.Header = function() {
		var w;
		w = this;
		if (w.cw.header === false && w.wroteHeader && !w.cw.wroteHeader) {
			w.cw.header = new Header(w.handlerHeader).clone();
		}
		w.calledHeader = true;
		return w.handlerHeader;
	};
	response.prototype.Header = function() { return this.$val.Header(); };
	response.Ptr.prototype.WriteHeader = function(code) {
		var w, cl, _tuple, v, err;
		w = this;
		if (w.conn.hijacked()) {
			w.conn.server.logf("http: response.WriteHeader on hijacked connection", new ($sliceType($emptyInterface))([]));
			return;
		}
		if (w.wroteHeader) {
			w.conn.server.logf("http: multiple response.WriteHeader calls", new ($sliceType($emptyInterface))([]));
			return;
		}
		w.wroteHeader = true;
		w.status = code;
		if (w.calledHeader && w.cw.header === false) {
			w.cw.header = new Header(w.handlerHeader).clone();
		}
		cl = new Header(w.handlerHeader).get("Content-Length");
		if (!(cl === "")) {
			_tuple = strconv.ParseInt(cl, 10, 64); v = _tuple[0]; err = _tuple[1];
			if ($interfaceIsEqual(err, $ifaceNil) && (v.$high > 0 || (v.$high === 0 && v.$low >= 0))) {
				w.contentLength = v;
			} else {
				w.conn.server.logf("http: invalid Content-Length of %q", new ($sliceType($emptyInterface))([new $String(cl)]));
				new Header(w.handlerHeader).Del("Content-Length");
			}
		}
	};
	response.prototype.WriteHeader = function(code) { return this.$val.WriteHeader(code); };
	extraHeader.Ptr.prototype.Write = function(w) {
		var h, _ref, _i, i, v;
		h = new extraHeader.Ptr(); $copy(h, this, extraHeader);
		if (!(h.date === ($sliceType($Uint8)).nil)) {
			w.Write(headerDate);
			w.Write(h.date);
			w.Write(crlf);
		}
		if (!(h.contentLength === ($sliceType($Uint8)).nil)) {
			w.Write(headerContentLength);
			w.Write(h.contentLength);
			w.Write(crlf);
		}
		_ref = new ($sliceType($String))([h.contentType, h.connection, h.transferEncoding]);
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (!(v === "")) {
				w.Write(((i < 0 || i >= extraHeaderKeys.$length) ? $throwRuntimeError("index out of range") : extraHeaderKeys.$array[extraHeaderKeys.$offset + i]));
				w.Write(colonSpace);
				w.WriteString(v);
				w.Write(crlf);
			}
			_i++;
		}
	};
	extraHeader.prototype.Write = function(w) { return this.$val.Write(w); };
	chunkWriter.Ptr.prototype.writeHeader = function(p) {
		var cw, w, keepAlivesEnabled, isHEAD, header, owned, excludeHeader, delHeader, setHeader, sentLength, x, hasCL, _tuple, _entry, connectionHeaderSet, x$1, _tuple$1, ecr, isExpecter, _tuple$2, n, code, _tuple$3, _entry$1, haveType, _ref, _i, k, _tuple$4, _entry$2, ok, te, hasTE;
		cw = this;
		if (cw.wroteHeader) {
			return;
		}
		cw.wroteHeader = true;
		w = cw.res;
		keepAlivesEnabled = w.conn.server.doKeepAlives();
		isHEAD = w.req.Method === "HEAD";
		header = cw.header;
		owned = !(header === false);
		if (!owned) {
			header = w.handlerHeader;
		}
		excludeHeader = false;
		delHeader = (function(key) {
			var _tuple, _entry, ok, _key$5;
			if (owned) {
				new Header(header).Del(key);
				return;
			}
			_tuple = (_entry = header[key], _entry !== undefined ? [_entry.v, true] : [($sliceType($String)).nil, false]); ok = _tuple[1];
			if (!ok) {
				return;
			}
			if (excludeHeader === false) {
				excludeHeader = new $Map();
			}
			_key$5 = key; (excludeHeader || $throwRuntimeError("assignment to entry in nil map"))[_key$5] = { k: _key$5, v: true };
		});
		setHeader = new extraHeader.Ptr(); $copy(setHeader, new extraHeader.Ptr(), extraHeader);
		if (w.handlerDone && bodyAllowedForStatus(w.status) && new Header(header).get("Content-Length") === "" && (!isHEAD || p.$length > 0)) {
			w.contentLength = new $Int64(0, p.$length);
			setHeader.contentLength = strconv.AppendInt($subslice(new ($sliceType($Uint8))(cw.res.clenBuf), 0, 0), new $Int64(0, p.$length), 10);
		}
		if (w.req.wantsHttp10KeepAlive() && keepAlivesEnabled) {
			sentLength = !(new Header(header).get("Content-Length") === "");
			if (sentLength && new Header(header).get("Connection") === "keep-alive") {
				w.closeAfterReply = false;
			}
		}
		hasCL = !((x = w.contentLength, (x.$high === -1 && x.$low === 4294967295)));
		if (w.req.wantsHttp10KeepAlive() && (isHEAD || hasCL)) {
			_tuple = (_entry = header["Connection"], _entry !== undefined ? [_entry.v, true] : [($sliceType($String)).nil, false]); connectionHeaderSet = _tuple[1];
			if (!connectionHeaderSet) {
				setHeader.connection = "keep-alive";
			}
		} else if (!w.req.ProtoAtLeast(1, 1) || w.req.wantsClose()) {
			w.closeAfterReply = true;
		}
		if (new Header(header).get("Connection") === "close" || !keepAlivesEnabled) {
			w.closeAfterReply = true;
		}
		if (!((x$1 = w.req.ContentLength, (x$1.$high === 0 && x$1.$low === 0))) && !w.closeAfterReply) {
			_tuple$1 = $assertType(w.req.Body, ($ptrType(expectContinueReader)), true); ecr = _tuple$1[0]; isExpecter = _tuple$1[1];
			if (!isExpecter || ecr.resp.wroteContinue) {
				_tuple$2 = io.CopyN(ioutil.Discard, w.req.Body, new $Int64(0, 262145)); n = _tuple$2[0];
				if ((n.$high > 0 || (n.$high === 0 && n.$low >= 262144))) {
					w.requestTooLarge();
					delHeader("Connection");
					setHeader.connection = "close";
				} else {
					w.req.Body.Close();
				}
			}
		}
		code = w.status;
		if (bodyAllowedForStatus(code)) {
			_tuple$3 = (_entry$1 = header["Content-Type"], _entry$1 !== undefined ? [_entry$1.v, true] : [($sliceType($String)).nil, false]); haveType = _tuple$3[1];
			if (!haveType) {
				setHeader.contentType = DetectContentType(p);
			}
		} else {
			_ref = suppressedHeaders(code);
			_i = 0;
			while (_i < _ref.$length) {
				k = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
				delHeader(k);
				_i++;
			}
		}
		_tuple$4 = (_entry$2 = header["Date"], _entry$2 !== undefined ? [_entry$2.v, true] : [($sliceType($String)).nil, false]); ok = _tuple$4[1];
		if (!ok) {
			setHeader.date = appendTime($subslice(new ($sliceType($Uint8))(cw.res.dateBuf), 0, 0), $clone(time.Now(), time.Time));
		}
		te = new Header(header).get("Transfer-Encoding");
		hasTE = !(te === "");
		if (hasCL && hasTE && !(te === "identity")) {
			w.conn.server.logf("http: WriteHeader called with both Transfer-Encoding of %q and a Content-Length of %d", new ($sliceType($emptyInterface))([new $String(te), w.contentLength]));
			delHeader("Content-Length");
			hasCL = false;
		}
		if (w.req.Method === "HEAD" || !bodyAllowedForStatus(code)) {
		} else if (code === 204) {
			delHeader("Transfer-Encoding");
		} else if (hasCL) {
			delHeader("Transfer-Encoding");
		} else if (w.req.ProtoAtLeast(1, 1)) {
			cw.chunking = true;
			setHeader.transferEncoding = "chunked";
		} else {
			w.closeAfterReply = true;
			delHeader("Transfer-Encoding");
		}
		if (cw.chunking) {
			delHeader("Content-Length");
		}
		if (!w.req.ProtoAtLeast(1, 0)) {
			return;
		}
		if (w.closeAfterReply && (!keepAlivesEnabled || !hasToken(new Header(cw.header).get("Connection"), "close"))) {
			delHeader("Connection");
			if (w.req.ProtoAtLeast(1, 1)) {
				setHeader.connection = "close";
			}
		}
		w.conn.buf.Writer.WriteString(statusLine(w.req, code));
		new Header(cw.header).WriteSubset(w.conn.buf, excludeHeader);
		setHeader.Write(w.conn.buf.Writer);
		w.conn.buf.Writer.Write(crlf);
	};
	chunkWriter.prototype.writeHeader = function(p) { return this.$val.writeHeader(p); };
	statusLine = function(req, code) {
		var $deferred = [], $err = null, key, proto11, _tuple, _entry, line, ok, proto, codestring, _tuple$1, _entry$1, text, _key$5;
		/* */ try { $deferFrames.push($deferred);
		key = code;
		proto11 = req.ProtoAtLeast(1, 1);
		if (!proto11) {
			key = -key;
		}
		statusMu.RLock();
		_tuple = (_entry = statusLines[key], _entry !== undefined ? [_entry.v, true] : ["", false]); line = _tuple[0]; ok = _tuple[1];
		statusMu.RUnlock();
		if (ok) {
			return line;
		}
		proto = "HTTP/1.0";
		if (proto11) {
			proto = "HTTP/1.1";
		}
		codestring = strconv.Itoa(code);
		_tuple$1 = (_entry$1 = statusText[code], _entry$1 !== undefined ? [_entry$1.v, true] : ["", false]); text = _tuple$1[0]; ok = _tuple$1[1];
		if (!ok) {
			text = "status code " + codestring;
		}
		line = proto + " " + codestring + " " + text + "\r\n";
		if (ok) {
			statusMu.Lock();
			$deferred.push([$methodVal(statusMu, "Unlock"), []]);
			_key$5 = key; (statusLines || $throwRuntimeError("assignment to entry in nil map"))[_key$5] = { k: _key$5, v: line };
		}
		return line;
		/* */ } catch(err) { $err = err; return ""; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	response.Ptr.prototype.bodyAllowed = function() {
		var w;
		w = this;
		if (!w.wroteHeader) {
			$panic(new $String(""));
		}
		return bodyAllowedForStatus(w.status);
	};
	response.prototype.bodyAllowed = function() { return this.$val.bodyAllowed(); };
	response.Ptr.prototype.Write = function(data) {
		var n = 0, err = $ifaceNil, w, _tuple;
		w = this;
		_tuple = w.write(data.$length, data, ""); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	response.prototype.Write = function(data) { return this.$val.Write(data); };
	response.Ptr.prototype.WriteString = function(data) {
		var n = 0, err = $ifaceNil, w, _tuple;
		w = this;
		_tuple = w.write(data.length, ($sliceType($Uint8)).nil, data); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	response.prototype.WriteString = function(data) { return this.$val.WriteString(data); };
	response.Ptr.prototype.write = function(lenData, dataB, dataS) {
		var n = 0, err = $ifaceNil, w, _tmp, _tmp$1, _tmp$2, _tmp$3, _tmp$4, _tmp$5, x, x$1, x$2, x$3, x$4, _tmp$6, _tmp$7, _tuple, _tuple$1;
		w = this;
		if (w.conn.hijacked()) {
			w.conn.server.logf("http: response.Write on hijacked connection", new ($sliceType($emptyInterface))([]));
			_tmp = 0; _tmp$1 = $pkg.ErrHijacked; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		if (!w.wroteHeader) {
			w.WriteHeader(200);
		}
		if (lenData === 0) {
			_tmp$2 = 0; _tmp$3 = $ifaceNil; n = _tmp$2; err = _tmp$3;
			return [n, err];
		}
		if (!w.bodyAllowed()) {
			_tmp$4 = 0; _tmp$5 = $pkg.ErrBodyNotAllowed; n = _tmp$4; err = _tmp$5;
			return [n, err];
		}
		w.written = (x = w.written, x$1 = new $Int64(0, lenData), new $Int64(x.$high + x$1.$high, x.$low + x$1.$low));
		if (!((x$2 = w.contentLength, (x$2.$high === -1 && x$2.$low === 4294967295))) && (x$3 = w.written, x$4 = w.contentLength, (x$3.$high > x$4.$high || (x$3.$high === x$4.$high && x$3.$low > x$4.$low)))) {
			_tmp$6 = 0; _tmp$7 = $pkg.ErrContentLength; n = _tmp$6; err = _tmp$7;
			return [n, err];
		}
		if (!(dataB === ($sliceType($Uint8)).nil)) {
			_tuple = w.w.Write(dataB); n = _tuple[0]; err = _tuple[1];
			return [n, err];
		} else {
			_tuple$1 = w.w.WriteString(dataS); n = _tuple$1[0]; err = _tuple$1[1];
			return [n, err];
		}
	};
	response.prototype.write = function(lenData, dataB, dataS) { return this.$val.write(lenData, dataB, dataS); };
	response.Ptr.prototype.finishRequest = function() {
		var w, x, x$1, x$2;
		w = this;
		w.handlerDone = true;
		if (!w.wroteHeader) {
			w.WriteHeader(200);
		}
		w.w.Flush();
		putBufioWriter(w.w);
		w.cw.close();
		w.conn.buf.Writer.Flush();
		w.req.Body.Close();
		if (!(w.req.MultipartForm === ($ptrType(multipart.Form)).nil)) {
			w.req.MultipartForm.RemoveAll();
		}
		if (!(w.req.Method === "HEAD") && !((x = w.contentLength, (x.$high === -1 && x.$low === 4294967295))) && w.bodyAllowed() && !((x$1 = w.contentLength, x$2 = w.written, (x$1.$high === x$2.$high && x$1.$low === x$2.$low)))) {
			w.closeAfterReply = true;
		}
	};
	response.prototype.finishRequest = function() { return this.$val.finishRequest(); };
	response.Ptr.prototype.Flush = function() {
		var w;
		w = this;
		if (!w.wroteHeader) {
			w.WriteHeader(200);
		}
		w.w.Flush();
		w.cw.flush();
	};
	response.prototype.Flush = function() { return this.$val.Flush(); };
	conn.Ptr.prototype.finalFlush = function() {
		var c;
		c = this;
		if (!(c.buf === ($ptrType(bufio.ReadWriter)).nil)) {
			c.buf.Writer.Flush();
			putBufioReader(c.buf.Reader);
			putBufioWriter(c.buf.Writer);
			c.buf = ($ptrType(bufio.ReadWriter)).nil;
		}
	};
	conn.prototype.finalFlush = function() { return this.$val.finalFlush(); };
	conn.Ptr.prototype.close = function() {
		var c;
		c = this;
		c.finalFlush();
		if (!($interfaceIsEqual(c.rwc, $ifaceNil))) {
			c.rwc.Close();
			c.rwc = $ifaceNil;
		}
	};
	conn.prototype.close = function() { return this.$val.close(); };
	conn.Ptr.prototype.closeWriteAndWait = function($b) {
		var $this = this, $args = arguments, $r, $s = 0, c, _tuple, tcp, ok;
		/* */ if(!$b) { $nonblockingCall(); }; var $blocking_closeWriteAndWait = function() { s: while (true) { switch ($s) { case 0:
		c = $this;
		c.finalFlush();
		_tuple = $assertType(c.rwc, ($ptrType(net.TCPConn)), true); tcp = _tuple[0]; ok = _tuple[1];
		if (ok) {
			tcp.CloseWrite();
		}
		$r = time.Sleep(new time.Duration(0, 500000000), true); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		/* */ case -1: } return; } }; $blocking_closeWriteAndWait.$blocking = true; return $blocking_closeWriteAndWait;
	};
	conn.prototype.closeWriteAndWait = function($b) { return this.$val.closeWriteAndWait($b); };
	validNPN = function(proto) {
		var _ref;
		_ref = proto;
		if (_ref === "" || _ref === "http/1.1" || _ref === "http/1.0") {
			return false;
		}
		return true;
	};
	conn.Ptr.prototype.setState = function(nc, state) {
		var c, hook;
		c = this;
		hook = c.server.ConnState;
		if (!(hook === $throwNilPointerError)) {
			hook(nc, state);
		}
	};
	conn.prototype.setState = function(nc, state) { return this.$val.setState(nc, state); };
	conn.Ptr.prototype.serve = function($b) {
		var $this = this, $args = arguments, $r, $deferred = [], $err = null, $s = 0, c, origConn, _tuple, tlsConn, ok, d, d$1, err, proto, _entry, fn, h, _tuple$1, w, err$1, x, x$1, _tuple$2, neterr, ok$1, req, x$2;
		/* */ if(!$b) { $nonblockingCall(); }; var $blocking_serve = function() { try { $deferFrames.push($deferred); s: while (true) { switch ($s) { case 0:
		c = $this;
		origConn = c.rwc;
		$deferred.push([(function() {
			var err, buf;
			err = $recover();
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				buf = ($sliceType($Uint8)).make(65536);
				buf = $subslice(buf, 0, runtime.Stack(buf, false));
				c.server.logf("http: panic serving %v: %v\n%s", new ($sliceType($emptyInterface))([new $String(c.remoteAddr), err, buf]));
			}
			if (!c.hijacked()) {
				c.close();
				c.setState(origConn, 4);
			}
		}), [true]]);
		_tuple = $assertType(c.rwc, ($ptrType(tls.Conn)), true); tlsConn = _tuple[0]; ok = _tuple[1];
		if (ok) {
			d = c.server.ReadTimeout;
			if (!((d.$high === 0 && d.$low === 0))) {
				c.rwc.SetReadDeadline($clone(time.Now().Add(d), time.Time));
			}
			d$1 = c.server.WriteTimeout;
			if (!((d$1.$high === 0 && d$1.$low === 0))) {
				c.rwc.SetWriteDeadline($clone(time.Now().Add(d$1), time.Time));
			}
			err = tlsConn.Handshake();
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				c.server.logf("http: TLS handshake error from %s: %v", new ($sliceType($emptyInterface))([c.rwc.RemoteAddr(), err]));
				return;
			}
			c.tlsState = new tls.ConnectionState.Ptr();
			$copy(c.tlsState, tlsConn.ConnectionState(), tls.ConnectionState);
			proto = c.tlsState.NegotiatedProtocol;
			if (validNPN(proto)) {
				fn = (_entry = c.server.TLSNextProto[proto], _entry !== undefined ? _entry.v : $throwNilPointerError);
				if (!(fn === $throwNilPointerError)) {
					h = new initNPNRequest.Ptr(tlsConn, new serverHandler.Ptr(c.server));
					fn(c.server, tlsConn, new h.constructor.Struct(h));
				}
				return;
			}
		}
		/* while (true) { */ case 1: if(!(true)) { $s = 2; continue; }
			_tuple$1 = c.readRequest(); w = _tuple$1[0]; err$1 = _tuple$1[1];
			if (!((x = c.lr.N, x$1 = c.server.initialLimitedReaderSize(), (x.$high === x$1.$high && x.$low === x$1.$low)))) {
				c.setState(c.rwc, 1);
			}
			/* if (!($interfaceIsEqual(err$1, $ifaceNil))) { */ if (!($interfaceIsEqual(err$1, $ifaceNil))) {} else { $s = 3; continue; }
				/* if ($interfaceIsEqual(err$1, errTooLarge)) { */ if ($interfaceIsEqual(err$1, errTooLarge)) {} else if ($interfaceIsEqual(err$1, io.EOF)) { $s = 4; continue; } else { $s = 5; continue; }
					io.WriteString(c.rwc, "HTTP/1.1 413 Request Entity Too Large\r\n\r\n");
					$r = c.closeWriteAndWait(true); /* */ $s = 7; case 7: if ($r && $r.$blocking) { $r = $r(); }
					/* break; */ $s = 2; continue;
				/* } else if ($interfaceIsEqual(err$1, io.EOF)) { */ $s = 6; continue; case 4: 
					/* break; */ $s = 2; continue;
				/* } else { */ $s = 6; continue; case 5: 
					_tuple$2 = $assertType(err$1, net.Error, true); neterr = _tuple$2[0]; ok$1 = _tuple$2[1];
					if (ok$1 && neterr.Timeout()) {
						/* break; */ $s = 2; continue;
					}
				/* } */ case 6:
				io.WriteString(c.rwc, "HTTP/1.1 400 Bad Request\r\n\r\n");
				/* break; */ $s = 2; continue;
			/* } */ case 3:
			req = w.req;
			if (req.expectsContinue()) {
				if (req.ProtoAtLeast(1, 1) && !((x$2 = req.ContentLength, (x$2.$high === 0 && x$2.$low === 0)))) {
					req.Body = new expectContinueReader.Ptr(w, req.Body, false);
				}
				new Header(req.Header).Del("Expect");
			} else if (!(new Header(req.Header).get("Expect") === "")) {
				w.sendExpectationFailed();
				/* break; */ $s = 2; continue;
			}
			new serverHandler.Ptr(c.server).ServeHTTP(w, w.req);
			if (c.hijacked()) {
				return;
			}
			w.finishRequest();
			/* if (w.closeAfterReply) { */ if (w.closeAfterReply) {} else { $s = 8; continue; }
				/* if (w.requestBodyLimitHit) { */ if (w.requestBodyLimitHit) {} else { $s = 9; continue; }
					$r = c.closeWriteAndWait(true); /* */ $s = 10; case 10: if ($r && $r.$blocking) { $r = $r(); }
				/* } */ case 9:
				/* break; */ $s = 2; continue;
			/* } */ case 8:
			c.setState(c.rwc, 2);
		/* } */ $s = 1; continue; case 2:
		/* */ case -1: } return; } } catch(err) { $err = err; } finally { $deferFrames.pop(); if ($curGoroutine.asleep && !$jumpToDefer) { throw null; } $s = -1; $callDeferred($deferred, $err); } }; $blocking_serve.$blocking = true; return $blocking_serve;
	};
	conn.prototype.serve = function($b) { return this.$val.serve($b); };
	response.Ptr.prototype.sendExpectationFailed = function() {
		var w;
		w = this;
		new Header(w.Header()).Set("Connection", "close");
		w.WriteHeader(417);
		w.finishRequest();
	};
	response.prototype.sendExpectationFailed = function() { return this.$val.sendExpectationFailed(); };
	response.Ptr.prototype.Hijack = function() {
		var rwc = $ifaceNil, buf = ($ptrType(bufio.ReadWriter)).nil, err = $ifaceNil, w, _tuple, _tmp, _tmp$1, _tmp$2;
		w = this;
		if (w.wroteHeader) {
			w.cw.flush();
		}
		_tuple = w.conn.hijack(); rwc = _tuple[0]; buf = _tuple[1]; err = _tuple[2];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			putBufioWriter(w.w);
			w.w = ($ptrType(bufio.Writer)).nil;
		}
		_tmp = rwc; _tmp$1 = buf; _tmp$2 = err; rwc = _tmp; buf = _tmp$1; err = _tmp$2;
		return [rwc, buf, err];
	};
	response.prototype.Hijack = function() { return this.$val.Hijack(); };
	response.Ptr.prototype.CloseNotify = function() {
		var w;
		w = this;
		return w.conn.closeNotify();
	};
	response.prototype.CloseNotify = function() { return this.$val.CloseNotify(); };
	HandlerFunc.prototype.ServeHTTP = function(w, r) {
		var f;
		f = this.$val !== undefined ? this.$val : this;
		f(w, r);
	};
	$ptrType(HandlerFunc).prototype.ServeHTTP = function(w, r) { return new HandlerFunc(this.$get()).ServeHTTP(w, r); };
	Error = $pkg.Error = function(w, error, code) {
		new Header(w.Header()).Set("Content-Type", "text/plain; charset=utf-8");
		w.WriteHeader(code);
		fmt.Fprintln(w, new ($sliceType($emptyInterface))([new $String(error)]));
	};
	NotFound = $pkg.NotFound = function(w, r) {
		Error(w, "404 page not found", 404);
	};
	NotFoundHandler = $pkg.NotFoundHandler = function() {
		return new HandlerFunc(NotFound);
	};
	Redirect = $pkg.Redirect = function(w, r, urlStr, code) {
		var _tuple, u, err, oldpath, _tuple$1, olddir, query, i, _tmp, _tmp$1, trailing, _entry, note;
		_tuple = url.Parse(urlStr); u = _tuple[0]; err = _tuple[1];
		if ($interfaceIsEqual(err, $ifaceNil)) {
			oldpath = r.URL.Path;
			if (oldpath === "") {
				oldpath = "/";
			}
			if (u.Scheme === "") {
				if (urlStr === "" || !((urlStr.charCodeAt(0) === 47))) {
					_tuple$1 = path.Split(oldpath); olddir = _tuple$1[0];
					urlStr = olddir + urlStr;
				}
				query = "";
				i = strings.Index(urlStr, "?");
				if (!((i === -1))) {
					_tmp = urlStr.substring(0, i); _tmp$1 = urlStr.substring(i); urlStr = _tmp; query = _tmp$1;
				}
				trailing = strings.HasSuffix(urlStr, "/");
				urlStr = path.Clean(urlStr);
				if (trailing && !strings.HasSuffix(urlStr, "/")) {
					urlStr = urlStr + ("/");
				}
				urlStr = urlStr + (query);
			}
		}
		new Header(w.Header()).Set("Location", urlStr);
		w.WriteHeader(code);
		if (r.Method === "GET") {
			note = "<a href=\"" + htmlEscape(urlStr) + "\">" + (_entry = statusText[code], _entry !== undefined ? _entry.v : "") + "</a>.\n";
			fmt.Fprintln(w, new ($sliceType($emptyInterface))([new $String(note)]));
		}
	};
	htmlEscape = function(s) {
		return htmlReplacer.Replace(s);
	};
	redirectHandler.Ptr.prototype.ServeHTTP = function(w, r) {
		var rh;
		rh = this;
		Redirect(w, r, rh.url, rh.code);
	};
	redirectHandler.prototype.ServeHTTP = function(w, r) { return this.$val.ServeHTTP(w, r); };
	RedirectHandler = $pkg.RedirectHandler = function(url$1, code) {
		return new redirectHandler.Ptr(url$1, code);
	};
	NewServeMux = $pkg.NewServeMux = function() {
		return new ServeMux.Ptr(new sync.RWMutex.Ptr(), new $Map(), false);
	};
	pathMatch = function(pattern, path$1) {
		var n;
		if (pattern.length === 0) {
			return false;
		}
		n = pattern.length;
		if (!((pattern.charCodeAt((n - 1 >> 0)) === 47))) {
			return pattern === path$1;
		}
		return path$1.length >= n && path$1.substring(0, n) === pattern;
	};
	cleanPath = function(p) {
		var np;
		if (p === "") {
			return "/";
		}
		if (!((p.charCodeAt(0) === 47))) {
			p = "/" + p;
		}
		np = path.Clean(p);
		if ((p.charCodeAt((p.length - 1 >> 0)) === 47) && !(np === "/")) {
			np = np + ("/");
		}
		return np;
	};
	ServeMux.Ptr.prototype.match = function(path$1) {
		var h = $ifaceNil, pattern = "", mux, n, _ref, _i, _keys, _entry, k, v;
		mux = this;
		n = 0;
		_ref = mux.m;
		_i = 0;
		_keys = $keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			v = new muxEntry.Ptr(); $copy(v, _entry.v, muxEntry);
			if (!pathMatch(k, path$1)) {
				_i++;
				continue;
			}
			if ($interfaceIsEqual(h, $ifaceNil) || k.length > n) {
				n = k.length;
				h = v.h;
				pattern = v.pattern;
			}
			_i++;
		}
		return [h, pattern];
	};
	ServeMux.prototype.match = function(path$1) { return this.$val.match(path$1); };
	ServeMux.Ptr.prototype.Handler = function(r) {
		var h = $ifaceNil, pattern = "", mux, p, _tuple, url$1, _tmp, _tmp$1, _tuple$1;
		mux = this;
		if (!(r.Method === "CONNECT")) {
			p = cleanPath(r.URL.Path);
			if (!(p === r.URL.Path)) {
				_tuple = mux.handler(r.Host, p); pattern = _tuple[1];
				url$1 = new url.URL.Ptr(); $copy(url$1, r.URL, url.URL);
				url$1.Path = p;
				_tmp = RedirectHandler(url$1.String(), 301); _tmp$1 = pattern; h = _tmp; pattern = _tmp$1;
				return [h, pattern];
			}
		}
		_tuple$1 = mux.handler(r.Host, r.URL.Path); h = _tuple$1[0]; pattern = _tuple$1[1];
		return [h, pattern];
	};
	ServeMux.prototype.Handler = function(r) { return this.$val.Handler(r); };
	ServeMux.Ptr.prototype.handler = function(host, path$1) {
		var h = $ifaceNil, pattern = "", $deferred = [], $err = null, mux, _tuple, _tuple$1, _tmp, _tmp$1;
		/* */ try { $deferFrames.push($deferred);
		mux = this;
		mux.mu.RLock();
		$deferred.push([$methodVal(mux.mu, "RUnlock"), []]);
		if (mux.hosts) {
			_tuple = mux.match(host + path$1); h = _tuple[0]; pattern = _tuple[1];
		}
		if ($interfaceIsEqual(h, $ifaceNil)) {
			_tuple$1 = mux.match(path$1); h = _tuple$1[0]; pattern = _tuple$1[1];
		}
		if ($interfaceIsEqual(h, $ifaceNil)) {
			_tmp = NotFoundHandler(); _tmp$1 = ""; h = _tmp; pattern = _tmp$1;
		}
		return [h, pattern];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [h, pattern]; }
	};
	ServeMux.prototype.handler = function(host, path$1) { return this.$val.handler(host, path$1); };
	ServeMux.Ptr.prototype.ServeHTTP = function(w, r) {
		var mux, _tuple, h;
		mux = this;
		if (r.RequestURI === "*") {
			if (r.ProtoAtLeast(1, 1)) {
				new Header(w.Header()).Set("Connection", "close");
			}
			w.WriteHeader(400);
			return;
		}
		_tuple = mux.Handler(r); h = _tuple[0];
		h.ServeHTTP(w, r);
	};
	ServeMux.prototype.ServeHTTP = function(w, r) { return this.$val.ServeHTTP(w, r); };
	ServeMux.Ptr.prototype.Handle = function(pattern, handler) {
		var $deferred = [], $err = null, mux, _entry, _key$5, n, _entry$1, path$1, _key$6;
		/* */ try { $deferFrames.push($deferred);
		mux = this;
		mux.mu.Lock();
		$deferred.push([$methodVal(mux.mu, "Unlock"), []]);
		if (pattern === "") {
			$panic(new $String("http: invalid pattern " + pattern));
		}
		if ($interfaceIsEqual(handler, $ifaceNil)) {
			$panic(new $String("http: nil handler"));
		}
		if ((_entry = mux.m[pattern], _entry !== undefined ? _entry.v : new muxEntry.Ptr()).explicit) {
			$panic(new $String("http: multiple registrations for " + pattern));
		}
		_key$5 = pattern; (mux.m || $throwRuntimeError("assignment to entry in nil map"))[_key$5] = { k: _key$5, v: new muxEntry.Ptr(true, handler, pattern) };
		if (!((pattern.charCodeAt(0) === 47))) {
			mux.hosts = true;
		}
		n = pattern.length;
		if (n > 0 && (pattern.charCodeAt((n - 1 >> 0)) === 47) && !(_entry$1 = mux.m[pattern.substring(0, (n - 1 >> 0))], _entry$1 !== undefined ? _entry$1.v : new muxEntry.Ptr()).explicit) {
			path$1 = pattern;
			if (!((pattern.charCodeAt(0) === 47))) {
				path$1 = pattern.substring(strings.Index(pattern, "/"));
			}
			_key$6 = pattern.substring(0, (n - 1 >> 0)); (mux.m || $throwRuntimeError("assignment to entry in nil map"))[_key$6] = { k: _key$6, v: new muxEntry.Ptr(false, RedirectHandler(path$1, 301), pattern) };
		}
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	ServeMux.prototype.Handle = function(pattern, handler) { return this.$val.Handle(pattern, handler); };
	ServeMux.Ptr.prototype.HandleFunc = function(pattern, handler) {
		var mux;
		mux = this;
		mux.Handle(pattern, new HandlerFunc(handler));
	};
	ServeMux.prototype.HandleFunc = function(pattern, handler) { return this.$val.HandleFunc(pattern, handler); };
	ConnState.prototype.String = function() {
		var c, _entry;
		c = this.$val !== undefined ? this.$val : this;
		return (_entry = stateName[c], _entry !== undefined ? _entry.v : "");
	};
	$ptrType(ConnState).prototype.String = function() { return new ConnState(this.$get()).String(); };
	serverHandler.Ptr.prototype.ServeHTTP = function(rw, req) {
		var sh, handler, x;
		sh = new serverHandler.Ptr(); $copy(sh, this, serverHandler);
		handler = sh.srv.Handler;
		if ($interfaceIsEqual(handler, $ifaceNil)) {
			handler = $pkg.DefaultServeMux;
		}
		if (req.RequestURI === "*" && req.Method === "OPTIONS") {
			handler = (x = new globalOptionsHandler.Ptr(), new x.constructor.Struct(x));
		}
		handler.ServeHTTP(rw, req);
	};
	serverHandler.prototype.ServeHTTP = function(rw, req) { return this.$val.ServeHTTP(rw, req); };
	Server.Ptr.prototype.ListenAndServe = function($b) {
		var $this = this, $args = arguments, $r, $s = 0, srv, addr, _tuple, ln, err, x, _r;
		/* */ if(!$b) { $nonblockingCall(); }; var $blocking_ListenAndServe = function() { s: while (true) { switch ($s) { case 0:
		srv = $this;
		addr = srv.Addr;
		if (addr === "") {
			addr = ":http";
		}
		_tuple = net.Listen("tcp", addr); ln = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_r = srv.Serve((x = new tcpKeepAliveListener.Ptr($assertType(ln, ($ptrType(net.TCPListener)))), new x.constructor.Struct(x)), true); /* */ $s = 1; case 1: if (_r && _r.$blocking) { _r = _r(); }
		return _r;
		/* */ case -1: } return; } }; $blocking_ListenAndServe.$blocking = true; return $blocking_ListenAndServe;
	};
	Server.prototype.ListenAndServe = function($b) { return this.$val.ListenAndServe($b); };
	Server.Ptr.prototype.Serve = function(l, $b) {
		var $this = this, $args = arguments, $r, $deferred = [], $err = null, $s = 0, srv, tempDelay, _tuple, rw, e, _tuple$1, ne, ok, max, _tuple$2, c, err;
		/* */ if(!$b) { $nonblockingCall(); }; var $blocking_Serve = function() { try { $deferFrames.push($deferred); s: while (true) { switch ($s) { case 0:
		srv = $this;
		$deferred.push([$methodVal(l, "Close"), [true]]);
		tempDelay = new time.Duration(0, 0);
		/* while (true) { */ case 1: if(!(true)) { $s = 2; continue; }
			_tuple = l.Accept(); rw = _tuple[0]; e = _tuple[1];
			/* if (!($interfaceIsEqual(e, $ifaceNil))) { */ if (!($interfaceIsEqual(e, $ifaceNil))) {} else { $s = 3; continue; }
				_tuple$1 = $assertType(e, net.Error, true); ne = _tuple$1[0]; ok = _tuple$1[1];
				/* if (ok && ne.Temporary()) { */ if (ok && ne.Temporary()) {} else { $s = 4; continue; }
					if ((tempDelay.$high === 0 && tempDelay.$low === 0)) {
						tempDelay = new time.Duration(0, 5000000);
					} else {
						tempDelay = $mul64(tempDelay, (new time.Duration(0, 2)));
					}
					max = new time.Duration(0, 1000000000);
					if ((tempDelay.$high > max.$high || (tempDelay.$high === max.$high && tempDelay.$low > max.$low))) {
						tempDelay = max;
					}
					srv.logf("http: Accept error: %v; retrying in %v", new ($sliceType($emptyInterface))([e, tempDelay]));
					$r = time.Sleep(tempDelay, true); /* */ $s = 5; case 5: if ($r && $r.$blocking) { $r = $r(); }
					/* continue; */ $s = 1; continue;
				/* } */ case 4:
				return e;
			/* } */ case 3:
			tempDelay = new time.Duration(0, 0);
			_tuple$2 = srv.newConn(rw); c = _tuple$2[0]; err = _tuple$2[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				/* continue; */ $s = 1; continue;
			}
			c.setState(c.rwc, 0);
			$go($methodVal(c, "serve"), []);
		/* } */ $s = 1; continue; case 2:
		/* */ case -1: } return; } } catch(err) { $err = err; return $ifaceNil; } finally { $deferFrames.pop(); if ($curGoroutine.asleep && !$jumpToDefer) { throw null; } $s = -1; $callDeferred($deferred, $err); } }; $blocking_Serve.$blocking = true; return $blocking_Serve;
	};
	Server.prototype.Serve = function(l, $b) { return this.$val.Serve(l, $b); };
	Server.Ptr.prototype.doKeepAlives = function() {
		var s;
		s = this;
		return atomic.LoadInt32(new ($ptrType($Int32))(function() { return this.$target.disableKeepAlives; }, function($v) { this.$target.disableKeepAlives = $v; }, s)) === 0;
	};
	Server.prototype.doKeepAlives = function() { return this.$val.doKeepAlives(); };
	Server.Ptr.prototype.SetKeepAlivesEnabled = function(v) {
		var s;
		s = this;
		if (v) {
			atomic.StoreInt32(new ($ptrType($Int32))(function() { return this.$target.disableKeepAlives; }, function($v) { this.$target.disableKeepAlives = $v; }, s), 0);
		} else {
			atomic.StoreInt32(new ($ptrType($Int32))(function() { return this.$target.disableKeepAlives; }, function($v) { this.$target.disableKeepAlives = $v; }, s), 1);
		}
	};
	Server.prototype.SetKeepAlivesEnabled = function(v) { return this.$val.SetKeepAlivesEnabled(v); };
	Server.Ptr.prototype.logf = function(format, args) {
		var s;
		s = this;
		if (!(s.ErrorLog === ($ptrType(log.Logger)).nil)) {
			s.ErrorLog.Printf(format, args);
		} else {
			log.Printf(format, args);
		}
	};
	Server.prototype.logf = function(format, args) { return this.$val.logf(format, args); };
	Server.Ptr.prototype.ListenAndServeTLS = function(certFile, keyFile, $b) {
		var $this = this, $args = arguments, $r, $s = 0, srv, addr, config, err, _tuple, x, _tuple$1, ln, x$1, tlsListener, _r;
		/* */ if(!$b) { $nonblockingCall(); }; var $blocking_ListenAndServeTLS = function() { s: while (true) { switch ($s) { case 0:
		srv = $this;
		addr = srv.Addr;
		if (addr === "") {
			addr = ":https";
		}
		config = new tls.Config.Ptr($ifaceNil, $throwNilPointerError, ($sliceType(tls.Certificate)).nil, false, ($ptrType($packages["crypto/x509"].CertPool)).nil, ($sliceType($String)).nil, "", 0, ($ptrType($packages["crypto/x509"].CertPool)).nil, false, ($sliceType($Uint16)).nil, false, false, ($arrayType($Uint8, 32)).zero(), $ifaceNil, 0, 0, ($sliceType(tls.CurveID)).nil, new sync.Once.Ptr());
		if (!(srv.TLSConfig === ($ptrType(tls.Config)).nil)) {
			$copy(config, srv.TLSConfig, tls.Config);
		}
		if (config.NextProtos === ($sliceType($String)).nil) {
			config.NextProtos = new ($sliceType($String))(["http/1.1"]);
		}
		err = $ifaceNil;
		config.Certificates = ($sliceType(tls.Certificate)).make(1);
		_tuple = tls.LoadX509KeyPair(certFile, keyFile); $copy((x = config.Certificates, ((0 < 0 || 0 >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + 0])), _tuple[0], tls.Certificate); err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		_tuple$1 = net.Listen("tcp", addr); ln = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		tlsListener = tls.NewListener((x$1 = new tcpKeepAliveListener.Ptr($assertType(ln, ($ptrType(net.TCPListener)))), new x$1.constructor.Struct(x$1)), config);
		_r = srv.Serve(tlsListener, true); /* */ $s = 1; case 1: if (_r && _r.$blocking) { _r = _r(); }
		return _r;
		/* */ case -1: } return; } }; $blocking_ListenAndServeTLS.$blocking = true; return $blocking_ListenAndServeTLS;
	};
	Server.prototype.ListenAndServeTLS = function(certFile, keyFile, $b) { return this.$val.ListenAndServeTLS(certFile, keyFile, $b); };
	tcpKeepAliveListener.Ptr.prototype.Accept = function() {
		var c = $ifaceNil, err = $ifaceNil, ln, _tuple, tc, _tmp, _tmp$1;
		ln = new tcpKeepAliveListener.Ptr(); $copy(ln, this, tcpKeepAliveListener);
		_tuple = ln.TCPListener.AcceptTCP(); tc = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return [c, err];
		}
		tc.SetKeepAlive(true);
		tc.SetKeepAlivePeriod(new time.Duration(41, 3906340864));
		_tmp = tc; _tmp$1 = $ifaceNil; c = _tmp; err = _tmp$1;
		return [c, err];
	};
	tcpKeepAliveListener.prototype.Accept = function() { return this.$val.Accept(); };
	globalOptionsHandler.Ptr.prototype.ServeHTTP = function(w, r) {
		var x, mb;
		new Header(w.Header()).Set("Content-Length", "0");
		if (!((x = r.ContentLength, (x.$high === 0 && x.$low === 0)))) {
			mb = MaxBytesReader(w, r.Body, new $Int64(0, 4096));
			io.Copy(ioutil.Discard, mb);
		}
	};
	globalOptionsHandler.prototype.ServeHTTP = function(w, r) { return this.$val.ServeHTTP(w, r); };
	eofReaderWithWriteTo.Ptr.prototype.WriteTo = function(param) {
		return [new $Int64(0, 0), $ifaceNil];
	};
	eofReaderWithWriteTo.prototype.WriteTo = function(param) { return this.$val.WriteTo(param); };
	eofReaderWithWriteTo.Ptr.prototype.Read = function(param) {
		return [0, io.EOF];
	};
	eofReaderWithWriteTo.prototype.Read = function(param) { return this.$val.Read(param); };
	initNPNRequest.Ptr.prototype.ServeHTTP = function(rw, req) {
		var h;
		h = new initNPNRequest.Ptr(); $copy(h, this, initNPNRequest);
		if (req.TLS === ($ptrType(tls.ConnectionState)).nil) {
			req.TLS = new tls.ConnectionState.Ptr(0, false, false, 0, "", false, "", ($sliceType(($ptrType($packages["crypto/x509"].Certificate)))).nil, ($sliceType(($sliceType(($ptrType($packages["crypto/x509"].Certificate)))))).nil);
			$copy(req.TLS, h.c.ConnectionState(), tls.ConnectionState);
		}
		if ($interfaceIsEqual(req.Body, $ifaceNil)) {
			req.Body = eofReader;
		}
		if (req.RemoteAddr === "") {
			req.RemoteAddr = h.c.RemoteAddr().String();
		}
		h.h.ServeHTTP(rw, req);
	};
	initNPNRequest.prototype.ServeHTTP = function(rw, req) { return this.$val.ServeHTTP(rw, req); };
	DetectContentType = $pkg.DetectContentType = function(data) {
		var firstNonWS, _ref, _i, sig, ct;
		if (data.$length > 512) {
			data = $subslice(data, 0, 512);
		}
		firstNonWS = 0;
		while (firstNonWS < data.$length && isWS(((firstNonWS < 0 || firstNonWS >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + firstNonWS]))) {
			firstNonWS = firstNonWS + (1) >> 0;
		}
		_ref = sniffSignatures;
		_i = 0;
		while (_i < _ref.$length) {
			sig = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			ct = sig.match(data, firstNonWS);
			if (!(ct === "")) {
				return ct;
			}
			_i++;
		}
		return "application/octet-stream";
	};
	isWS = function(b) {
		return !((bytes.IndexByte(new ($sliceType($Uint8))($stringToBytes("\t\n\f\r ")), b) === -1));
	};
	exactSig.Ptr.prototype.match = function(data, firstNonWS) {
		var e;
		e = this;
		if (bytes.HasPrefix(data, e.sig)) {
			return e.ct;
		}
		return "";
	};
	exactSig.prototype.match = function(data, firstNonWS) { return this.$val.match(data, firstNonWS); };
	maskedSig.Ptr.prototype.match = function(data, firstNonWS) {
		var m, _ref, _i, i, mask, db, x;
		m = this;
		if (m.skipWS) {
			data = $subslice(data, firstNonWS);
		}
		if (data.$length < m.mask.$length) {
			return "";
		}
		_ref = m.mask;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			mask = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			db = (((i < 0 || i >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + i]) & mask) >>> 0;
			if (!((db === (x = m.pat, ((i < 0 || i >= x.$length) ? $throwRuntimeError("index out of range") : x.$array[x.$offset + i]))))) {
				return "";
			}
			_i++;
		}
		return m.ct;
	};
	maskedSig.prototype.match = function(data, firstNonWS) { return this.$val.match(data, firstNonWS); };
	htmlSig.prototype.match = function(data, firstNonWS) {
		var h, _ref, _i, i, b, db, x, db$1;
		h = this;
		data = $subslice(data, firstNonWS);
		if (data.$length < (h.$length + 1 >> 0)) {
			return "";
		}
		_ref = h;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			db = ((i < 0 || i >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + i]);
			if (65 <= b && b <= 90) {
				db = (db & (223)) >>> 0;
			}
			if (!((b === db))) {
				return "";
			}
			_i++;
		}
		db$1 = (x = h.$length, ((x < 0 || x >= data.$length) ? $throwRuntimeError("index out of range") : data.$array[data.$offset + x]));
		if (!((db$1 === 32)) && !((db$1 === 62))) {
			return "";
		}
		return "text/html; charset=utf-8";
	};
	$ptrType(htmlSig).prototype.match = function(data, firstNonWS) { return this.$get().match(data, firstNonWS); };
	textSig.prototype.match = function(data, firstNonWS) {
		var _ref, _i, b;
		_ref = $subslice(data, firstNonWS);
		_i = 0;
		while (_i < _ref.$length) {
			b = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (0 <= b && b <= 8 || b === 11 || 14 <= b && b <= 26 || 28 <= b && b <= 31) {
				return "";
			}
			_i++;
		}
		return "text/plain; charset=utf-8";
	};
	$ptrType(textSig).prototype.match = function(data, firstNonWS) { return new textSig(this.$get()).match(data, firstNonWS); };
	errorReader.Ptr.prototype.Read = function(p) {
		var n = 0, err = $ifaceNil, r, _tmp, _tmp$1;
		r = this;
		_tmp = 0; _tmp$1 = r.err; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	errorReader.prototype.Read = function(p) { return this.$val.Read(p); };
	newTransferWriter = function(r) {
		var t = ($ptrType(transferWriter)).nil, err = $ifaceNil, atLeastHTTP11, rr, _ref, x, _tmp, _tmp$1, x$1, buf, _tuple, n, rerr, x$2, _tmp$2, _tmp$3;
		t = new transferWriter.Ptr("", $ifaceNil, $ifaceNil, false, new $Int64(0, 0), false, ($sliceType($String)).nil, false);
		atLeastHTTP11 = false;
		_ref = r;
		if ($assertType(_ref, ($ptrType(Request)), true)[1]) {
			rr = _ref.$val;
			if (!((x = rr.ContentLength, (x.$high === 0 && x.$low === 0))) && $interfaceIsEqual(rr.Body, $ifaceNil)) {
				_tmp = ($ptrType(transferWriter)).nil; _tmp$1 = fmt.Errorf("http: Request.ContentLength=%d with nil Body", new ($sliceType($emptyInterface))([rr.ContentLength])); t = _tmp; err = _tmp$1;
				return [t, err];
			}
			t.Method = rr.Method;
			t.Body = rr.Body;
			t.BodyCloser = rr.Body;
			t.ContentLength = rr.ContentLength;
			t.Close = rr.Close;
			t.TransferEncoding = rr.TransferEncoding;
			t.Trailer = rr.Trailer;
			atLeastHTTP11 = rr.ProtoAtLeast(1, 1);
			if (!($interfaceIsEqual(t.Body, $ifaceNil)) && (t.TransferEncoding.$length === 0) && atLeastHTTP11) {
				if ((x$1 = t.ContentLength, (x$1.$high === 0 && x$1.$low === 0))) {
					buf = ($arrayType($Uint8, 1)).zero(); $copy(buf, ($arrayType($Uint8, 1)).zero(), ($arrayType($Uint8, 1)));
					_tuple = io.ReadFull(t.Body, new ($sliceType($Uint8))(buf)); n = _tuple[0]; rerr = _tuple[1];
					if (!($interfaceIsEqual(rerr, $ifaceNil)) && !($interfaceIsEqual(rerr, io.EOF))) {
						t.ContentLength = new $Int64(-1, 4294967295);
						t.Body = new errorReader.Ptr(rerr);
					} else if (n === 1) {
						t.ContentLength = new $Int64(-1, 4294967295);
						t.Body = io.MultiReader(new ($sliceType(io.Reader))([bytes.NewReader(new ($sliceType($Uint8))(buf)), t.Body]));
					} else {
						t.Body = $ifaceNil;
						t.BodyCloser = $ifaceNil;
					}
				}
				if ((x$2 = t.ContentLength, (x$2.$high < 0 || (x$2.$high === 0 && x$2.$low < 0)))) {
					t.TransferEncoding = new ($sliceType($String))(["chunked"]);
				}
			}
		} else if ($assertType(_ref, ($ptrType(Response)), true)[1]) {
			rr = _ref.$val;
			if (!(rr.Request === ($ptrType(Request)).nil)) {
				t.Method = rr.Request.Method;
			}
			t.Body = rr.Body;
			t.BodyCloser = rr.Body;
			t.ContentLength = rr.ContentLength;
			t.Close = rr.Close;
			t.TransferEncoding = rr.TransferEncoding;
			t.Trailer = rr.Trailer;
			atLeastHTTP11 = rr.ProtoAtLeast(1, 1);
			t.ResponseToHEAD = noBodyExpected(t.Method);
		}
		if (t.ResponseToHEAD) {
			t.Body = $ifaceNil;
			if (chunked(t.TransferEncoding)) {
				t.ContentLength = new $Int64(-1, 4294967295);
			}
		} else {
			if (!atLeastHTTP11 || $interfaceIsEqual(t.Body, $ifaceNil)) {
				t.TransferEncoding = ($sliceType($String)).nil;
			}
			if (chunked(t.TransferEncoding)) {
				t.ContentLength = new $Int64(-1, 4294967295);
			} else if ($interfaceIsEqual(t.Body, $ifaceNil)) {
				t.ContentLength = new $Int64(0, 0);
			}
		}
		if (!chunked(t.TransferEncoding)) {
			t.Trailer = false;
		}
		_tmp$2 = t; _tmp$3 = $ifaceNil; t = _tmp$2; err = _tmp$3;
		return [t, err];
	};
	noBodyExpected = function(requestMethod) {
		return requestMethod === "HEAD";
	};
	transferWriter.Ptr.prototype.shouldSendContentLength = function() {
		var t, x, x$1;
		t = this;
		if (chunked(t.TransferEncoding)) {
			return false;
		}
		if ((x = t.ContentLength, (x.$high > 0 || (x.$high === 0 && x.$low > 0)))) {
			return true;
		}
		if (t.Method === "POST" || t.Method === "PUT") {
			return true;
		}
		if ((x$1 = t.ContentLength, (x$1.$high === 0 && x$1.$low === 0)) && isIdentity(t.TransferEncoding)) {
			return true;
		}
		return false;
	};
	transferWriter.prototype.shouldSendContentLength = function() { return this.$val.shouldSendContentLength(); };
	transferWriter.Ptr.prototype.WriteHeader = function(w) {
		var t, _tuple, err, _tuple$1, err$1, _tuple$2, err$2, _tuple$3, err$3, keys, _ref, _i, _keys, _entry, k, _ref$1, _tuple$4, err$4;
		t = this;
		if (t.Close) {
			_tuple = io.WriteString(w, "Connection: close\r\n"); err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
		}
		if (t.shouldSendContentLength()) {
			_tuple$1 = io.WriteString(w, "Content-Length: "); err$1 = _tuple$1[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				return err$1;
			}
			_tuple$2 = io.WriteString(w, strconv.FormatInt(t.ContentLength, 10) + "\r\n"); err$2 = _tuple$2[1];
			if (!($interfaceIsEqual(err$2, $ifaceNil))) {
				return err$2;
			}
		} else if (chunked(t.TransferEncoding)) {
			_tuple$3 = io.WriteString(w, "Transfer-Encoding: chunked\r\n"); err$3 = _tuple$3[1];
			if (!($interfaceIsEqual(err$3, $ifaceNil))) {
				return err$3;
			}
		}
		if (!(t.Trailer === false)) {
			keys = ($sliceType($String)).make(0, $keys(t.Trailer).length);
			_ref = t.Trailer;
			_i = 0;
			_keys = $keys(_ref);
			while (_i < _keys.length) {
				_entry = _ref[_keys[_i]];
				if (_entry === undefined) {
					_i++;
					continue;
				}
				k = _entry.k;
				k = CanonicalHeaderKey(k);
				_ref$1 = k;
				if (_ref$1 === "Transfer-Encoding" || _ref$1 === "Trailer" || _ref$1 === "Content-Length") {
					return new badStringError.Ptr("invalid Trailer key", k);
				}
				keys = $append(keys, k);
				_i++;
			}
			if (keys.$length > 0) {
				sort.Strings(keys);
				_tuple$4 = io.WriteString(w, "Trailer: " + strings.Join(keys, ",") + "\r\n"); err$4 = _tuple$4[1];
				if (!($interfaceIsEqual(err$4, $ifaceNil))) {
					return err$4;
				}
			}
		}
		return $ifaceNil;
	};
	transferWriter.prototype.WriteHeader = function(w) { return this.$val.WriteHeader(w); };
	transferWriter.Ptr.prototype.WriteBody = function(w) {
		var t, err, ncopy, x, cw, _tuple, _tuple$1, _tuple$2, nextra, _tuple$3, x$1, x$2, x$3, err$1, _tuple$4;
		t = this;
		err = $ifaceNil;
		ncopy = new $Int64(0, 0);
		if (!($interfaceIsEqual(t.Body, $ifaceNil))) {
			if (chunked(t.TransferEncoding)) {
				cw = newChunkedWriter(w);
				_tuple = io.Copy(cw, t.Body); err = _tuple[1];
				if ($interfaceIsEqual(err, $ifaceNil)) {
					err = cw.Close();
				}
			} else if ((x = t.ContentLength, (x.$high === -1 && x.$low === 4294967295))) {
				_tuple$1 = io.Copy(w, t.Body); ncopy = _tuple$1[0]; err = _tuple$1[1];
			} else {
				_tuple$2 = io.Copy(w, io.LimitReader(t.Body, t.ContentLength)); ncopy = _tuple$2[0]; err = _tuple$2[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					return err;
				}
				nextra = new $Int64(0, 0);
				_tuple$3 = io.Copy(ioutil.Discard, t.Body); nextra = _tuple$3[0]; err = _tuple$3[1];
				ncopy = (x$1 = nextra, new $Int64(ncopy.$high + x$1.$high, ncopy.$low + x$1.$low));
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
			err = t.BodyCloser.Close();
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return err;
			}
		}
		if (!t.ResponseToHEAD && !((x$2 = t.ContentLength, (x$2.$high === -1 && x$2.$low === 4294967295))) && !((x$3 = t.ContentLength, (x$3.$high === ncopy.$high && x$3.$low === ncopy.$low)))) {
			return fmt.Errorf("http: Request.ContentLength=%d with Body length %d", new ($sliceType($emptyInterface))([t.ContentLength, ncopy]));
		}
		if (chunked(t.TransferEncoding)) {
			if (!(t.Trailer === false)) {
				err$1 = new Header(t.Trailer).Write(w);
				if (!($interfaceIsEqual(err$1, $ifaceNil))) {
					return err$1;
				}
			}
			_tuple$4 = io.WriteString(w, "\r\n"); err = _tuple$4[1];
		}
		return err;
	};
	transferWriter.prototype.WriteBody = function(w) { return this.$val.WriteBody(w); };
	bodyAllowedForStatus = function(status) {
		if (status >= 100 && status <= 199) {
			return false;
		} else if (status === 204) {
			return false;
		} else if (status === 304) {
			return false;
		}
		return true;
	};
	suppressedHeaders = function(status) {
		if (status === 304) {
			return suppressedHeaders304;
		} else if (!bodyAllowedForStatus(status)) {
			return suppressedHeadersNoBody;
		}
		return ($sliceType($String)).nil;
	};
	readTransfer = function(msg, r) {
		var err = $ifaceNil, t, isResponse, rr, _ref, _tmp, _tmp$1, _tuple, _tuple$1, realLength, _tuple$2, n, err$1, _tuple$3, _ref$1, rr$1, _ref$2;
		t = new transferReader.Ptr(false, 0, "GET", 0, 0, $ifaceNil, new $Int64(0, 0), ($sliceType($String)).nil, false, false);
		isResponse = false;
		_ref = msg;
		if ($assertType(_ref, ($ptrType(Response)), true)[1]) {
			rr = _ref.$val;
			t.Header = rr.Header;
			t.StatusCode = rr.StatusCode;
			t.ProtoMajor = rr.ProtoMajor;
			t.ProtoMinor = rr.ProtoMinor;
			t.Close = shouldClose(t.ProtoMajor, t.ProtoMinor, t.Header);
			isResponse = true;
			if (!(rr.Request === ($ptrType(Request)).nil)) {
				t.RequestMethod = rr.Request.Method;
			}
		} else if ($assertType(_ref, ($ptrType(Request)), true)[1]) {
			rr = _ref.$val;
			t.Header = rr.Header;
			t.ProtoMajor = rr.ProtoMajor;
			t.ProtoMinor = rr.ProtoMinor;
			t.StatusCode = 200;
		} else {
			rr = _ref;
			$panic(new $String("unexpected type"));
		}
		if ((t.ProtoMajor === 0) && (t.ProtoMinor === 0)) {
			_tmp = 1; _tmp$1 = 1; t.ProtoMajor = _tmp; t.ProtoMinor = _tmp$1;
		}
		_tuple = fixTransferEncoding(t.RequestMethod, t.Header); t.TransferEncoding = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = err;
			return err;
		}
		_tuple$1 = fixLength(isResponse, t.StatusCode, t.RequestMethod, t.Header, t.TransferEncoding); realLength = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = err;
			return err;
		}
		if (isResponse && t.RequestMethod === "HEAD") {
			_tuple$2 = parseContentLength(new Header(t.Header).get("Content-Length")); n = _tuple$2[0]; err$1 = _tuple$2[1];
			if (!($interfaceIsEqual(err$1, $ifaceNil))) {
				err = err$1;
				return err;
			} else {
				t.ContentLength = n;
			}
		} else {
			t.ContentLength = realLength;
		}
		_tuple$3 = fixTrailer(t.Header, t.TransferEncoding); t.Trailer = _tuple$3[0]; err = _tuple$3[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			err = err;
			return err;
		}
		_ref$1 = msg;
		if ($assertType(_ref$1, ($ptrType(Response)), true)[1]) {
			if ((realLength.$high === -1 && realLength.$low === 4294967295) && !chunked(t.TransferEncoding) && bodyAllowedForStatus(t.StatusCode)) {
				t.Close = true;
			}
		}
		if (chunked(t.TransferEncoding)) {
			if (noBodyExpected(t.RequestMethod)) {
				t.Body = eofReader;
			} else {
				t.Body = new body.Ptr(newChunkedReader(r), msg, r, t.Close, new sync.Mutex.Ptr(), false);
			}
		} else if ((realLength.$high === 0 && realLength.$low === 0)) {
			t.Body = eofReader;
		} else if ((realLength.$high > 0 || (realLength.$high === 0 && realLength.$low > 0))) {
			t.Body = new body.Ptr(io.LimitReader(r, realLength), $ifaceNil, ($ptrType(bufio.Reader)).nil, t.Close, new sync.Mutex.Ptr(), false);
		} else {
			if (t.Close) {
				t.Body = new body.Ptr(r, $ifaceNil, ($ptrType(bufio.Reader)).nil, t.Close, new sync.Mutex.Ptr(), false);
			} else {
				t.Body = eofReader;
			}
		}
		_ref$2 = msg;
		if ($assertType(_ref$2, ($ptrType(Request)), true)[1]) {
			rr$1 = _ref$2.$val;
			rr$1.Body = t.Body;
			rr$1.ContentLength = t.ContentLength;
			rr$1.TransferEncoding = t.TransferEncoding;
			rr$1.Close = t.Close;
			rr$1.Trailer = t.Trailer;
		} else if ($assertType(_ref$2, ($ptrType(Response)), true)[1]) {
			rr$1 = _ref$2.$val;
			rr$1.Body = t.Body;
			rr$1.ContentLength = t.ContentLength;
			rr$1.TransferEncoding = t.TransferEncoding;
			rr$1.Close = t.Close;
			rr$1.Trailer = t.Trailer;
		}
		err = $ifaceNil;
		return err;
	};
	chunked = function(te) {
		return te.$length > 0 && ((0 < 0 || 0 >= te.$length) ? $throwRuntimeError("index out of range") : te.$array[te.$offset + 0]) === "chunked";
	};
	isIdentity = function(te) {
		return (te.$length === 1) && ((0 < 0 || 0 >= te.$length) ? $throwRuntimeError("index out of range") : te.$array[te.$offset + 0]) === "identity";
	};
	fixTransferEncoding = function(requestMethod, header) {
		var _tuple, _entry, raw, present, encodings, te, _ref, _i, encoding, x;
		_tuple = (_entry = header["Transfer-Encoding"], _entry !== undefined ? [_entry.v, true] : [($sliceType($String)).nil, false]); raw = _tuple[0]; present = _tuple[1];
		if (!present) {
			return [($sliceType($String)).nil, $ifaceNil];
		}
		delete header["Transfer-Encoding"];
		encodings = strings.Split(((0 < 0 || 0 >= raw.$length) ? $throwRuntimeError("index out of range") : raw.$array[raw.$offset + 0]), ",");
		te = ($sliceType($String)).make(0, encodings.$length);
		_ref = encodings;
		_i = 0;
		while (_i < _ref.$length) {
			encoding = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			encoding = strings.ToLower(strings.TrimSpace(encoding));
			if (encoding === "identity") {
				break;
			}
			if (!(encoding === "chunked")) {
				return [($sliceType($String)).nil, new badStringError.Ptr("unsupported transfer encoding", encoding)];
			}
			te = $subslice(te, 0, (te.$length + 1 >> 0));
			(x = te.$length - 1 >> 0, (x < 0 || x >= te.$length) ? $throwRuntimeError("index out of range") : te.$array[te.$offset + x] = encoding);
			_i++;
		}
		if (te.$length > 1) {
			return [($sliceType($String)).nil, new badStringError.Ptr("too many transfer encodings", strings.Join(te, ","))];
		}
		if (te.$length > 0) {
			delete header["Content-Length"];
			return [te, $ifaceNil];
		}
		return [($sliceType($String)).nil, $ifaceNil];
	};
	fixLength = function(isResponse, status, requestMethod, header, te) {
		var _q, _ref, cl, _tuple, n, err;
		if (noBodyExpected(requestMethod)) {
			return [new $Int64(0, 0), $ifaceNil];
		}
		if ((_q = status / 100, (_q === _q && _q !== 1/0 && _q !== -1/0) ? _q >> 0 : $throwRuntimeError("integer divide by zero")) === 1) {
			return [new $Int64(0, 0), $ifaceNil];
		}
		_ref = status;
		if (_ref === 204 || _ref === 304) {
			return [new $Int64(0, 0), $ifaceNil];
		}
		if (chunked(te)) {
			return [new $Int64(-1, 4294967295), $ifaceNil];
		}
		cl = strings.TrimSpace(new Header(header).get("Content-Length"));
		if (!(cl === "")) {
			_tuple = parseContentLength(cl); n = _tuple[0]; err = _tuple[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [new $Int64(-1, 4294967295), err];
			}
			return [n, $ifaceNil];
		} else {
			new Header(header).Del("Content-Length");
		}
		if (!isResponse && requestMethod === "GET") {
			return [new $Int64(0, 0), $ifaceNil];
		}
		return [new $Int64(-1, 4294967295), $ifaceNil];
	};
	shouldClose = function(major, minor, header) {
		if (major < 1) {
			return true;
		} else if ((major === 1) && (minor === 0)) {
			if (!strings.Contains(strings.ToLower(new Header(header).get("Connection")), "keep-alive")) {
				return true;
			}
			return false;
		} else {
			if (strings.ToLower(new Header(header).get("Connection")) === "close") {
				new Header(header).Del("Connection");
				return true;
			}
		}
		return false;
	};
	fixTrailer = function(header, te) {
		var raw, trailer, keys, _ref, _i, key, _ref$1, _key$5;
		raw = new Header(header).get("Trailer");
		if (raw === "") {
			return [false, $ifaceNil];
		}
		new Header(header).Del("Trailer");
		trailer = new $Map();
		keys = strings.Split(raw, ",");
		_ref = keys;
		_i = 0;
		while (_i < _ref.$length) {
			key = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			key = CanonicalHeaderKey(strings.TrimSpace(key));
			_ref$1 = key;
			if (_ref$1 === "Transfer-Encoding" || _ref$1 === "Trailer" || _ref$1 === "Content-Length") {
				return [false, new badStringError.Ptr("bad trailer key", key)];
			}
			_key$5 = key; (trailer || $throwRuntimeError("assignment to entry in nil map"))[_key$5] = { k: _key$5, v: ($sliceType($String)).nil };
			_i++;
		}
		if ($keys(trailer).length === 0) {
			return [false, $ifaceNil];
		}
		if (!chunked(te)) {
			return [false, $pkg.ErrUnexpectedTrailer];
		}
		return [trailer, $ifaceNil];
	};
	body.Ptr.prototype.Read = function(p) {
		var n = 0, err = $ifaceNil, $deferred = [], $err = null, b, _tmp, _tmp$1, _tuple;
		/* */ try { $deferFrames.push($deferred);
		b = this;
		b.mu.Lock();
		$deferred.push([$methodVal(b.mu, "Unlock"), []]);
		if (b.closed) {
			_tmp = 0; _tmp$1 = $pkg.ErrBodyReadAfterClose; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		_tuple = b.readLocked(p); n = _tuple[0]; err = _tuple[1];
		return [n, err];
		/* */ } catch(err) { $err = err; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); return [n, err]; }
	};
	body.prototype.Read = function(p) { return this.$val.Read(p); };
	body.Ptr.prototype.readLocked = function(p) {
		var n = 0, err = $ifaceNil, b, _tuple, e, _tuple$1, lr, ok, x, _tuple$2, lr$1, ok$1, x$1, _tmp, _tmp$1;
		b = this;
		_tuple = b.src.Read(p); n = _tuple[0]; err = _tuple[1];
		if ($interfaceIsEqual(err, io.EOF)) {
			if (!($interfaceIsEqual(b.hdr, $ifaceNil))) {
				e = b.readTrailer();
				if (!($interfaceIsEqual(e, $ifaceNil))) {
					err = e;
				}
				b.hdr = $ifaceNil;
			} else {
				_tuple$1 = $assertType(b.src, ($ptrType(io.LimitedReader)), true); lr = _tuple$1[0]; ok = _tuple$1[1];
				if (ok && (x = lr.N, (x.$high > 0 || (x.$high === 0 && x.$low > 0)))) {
					err = io.ErrUnexpectedEOF;
				}
			}
		}
		if ($interfaceIsEqual(err, $ifaceNil) && n > 0) {
			_tuple$2 = $assertType(b.src, ($ptrType(io.LimitedReader)), true); lr$1 = _tuple$2[0]; ok$1 = _tuple$2[1];
			if (ok$1 && (x$1 = lr$1.N, (x$1.$high === 0 && x$1.$low === 0))) {
				err = io.EOF;
			}
		}
		_tmp = n; _tmp$1 = err; n = _tmp; err = _tmp$1;
		return [n, err];
	};
	body.prototype.readLocked = function(p) { return this.$val.readLocked(p); };
	seeUpcomingDoubleCRLF = function(r) {
		var peekSize, _tuple, buf, err;
		peekSize = 4;
		while (true) {
			_tuple = r.Peek(peekSize); buf = _tuple[0]; err = _tuple[1];
			if (bytes.HasSuffix(buf, doubleCRLF)) {
				return true;
			}
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				break;
			}
			peekSize = peekSize + (1) >> 0;
		}
		return false;
	};
	body.Ptr.prototype.readTrailer = function() {
		var b, _tuple, buf, err, _tuple$1, hdr, rr, _ref;
		b = this;
		_tuple = b.r.Peek(2); buf = _tuple[0]; err = _tuple[1];
		if (bytes.Equal(buf, singleCRLF)) {
			b.r.ReadByte();
			b.r.ReadByte();
			return $ifaceNil;
		}
		if (buf.$length < 2) {
			return errTrailerEOF;
		}
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			return err;
		}
		if (!seeUpcomingDoubleCRLF(b.r)) {
			return errors.New("http: suspiciously long trailer after chunked body");
		}
		_tuple$1 = textproto.NewReader(b.r).ReadMIMEHeader(); hdr = _tuple$1[0]; err = _tuple$1[1];
		if (!($interfaceIsEqual(err, $ifaceNil))) {
			if ($interfaceIsEqual(err, io.EOF)) {
				return errTrailerEOF;
			}
			return err;
		}
		_ref = b.hdr;
		if ($assertType(_ref, ($ptrType(Request)), true)[1]) {
			rr = _ref.$val;
			mergeSetHeader(new ($ptrType(Header))(function() { return this.$target.Trailer; }, function($v) { this.$target.Trailer = $v; }, rr), hdr);
		} else if ($assertType(_ref, ($ptrType(Response)), true)[1]) {
			rr = _ref.$val;
			mergeSetHeader(new ($ptrType(Header))(function() { return this.$target.Trailer; }, function($v) { this.$target.Trailer = $v; }, rr), hdr);
		}
		return $ifaceNil;
	};
	body.prototype.readTrailer = function() { return this.$val.readTrailer(); };
	mergeSetHeader = function(dst, src) {
		var _ref, _i, _keys, _entry, k, vv, _key$5;
		if (dst.$get() === false) {
			dst.$set(src);
			return;
		}
		_ref = src;
		_i = 0;
		_keys = $keys(_ref);
		while (_i < _keys.length) {
			_entry = _ref[_keys[_i]];
			if (_entry === undefined) {
				_i++;
				continue;
			}
			k = _entry.k;
			vv = _entry.v;
			_key$5 = k; (dst.$get() || $throwRuntimeError("assignment to entry in nil map"))[_key$5] = { k: _key$5, v: vv };
			_i++;
		}
	};
	body.Ptr.prototype.Close = function() {
		var $deferred = [], $err = null, b, err, _tuple, x;
		/* */ try { $deferFrames.push($deferred);
		b = this;
		b.mu.Lock();
		$deferred.push([$methodVal(b.mu, "Unlock"), []]);
		if (b.closed) {
			return $ifaceNil;
		}
		err = $ifaceNil;
		if ($interfaceIsEqual(b.hdr, $ifaceNil) && b.closing) {
		} else {
			_tuple = io.Copy(ioutil.Discard, (x = new bodyLocked.Ptr(b), new x.constructor.Struct(x))); err = _tuple[1];
		}
		b.closed = true;
		return err;
		/* */ } catch(err) { $err = err; return $ifaceNil; } finally { $deferFrames.pop(); $callDeferred($deferred, $err); }
	};
	body.prototype.Close = function() { return this.$val.Close(); };
	bodyLocked.Ptr.prototype.Read = function(p) {
		var n = 0, err = $ifaceNil, bl, _tmp, _tmp$1, _tuple;
		bl = new bodyLocked.Ptr(); $copy(bl, this, bodyLocked);
		if (bl.b.closed) {
			_tmp = 0; _tmp$1 = $pkg.ErrBodyReadAfterClose; n = _tmp; err = _tmp$1;
			return [n, err];
		}
		_tuple = bl.b.readLocked(p); n = _tuple[0]; err = _tuple[1];
		return [n, err];
	};
	bodyLocked.prototype.Read = function(p) { return this.$val.Read(p); };
	parseContentLength = function(cl) {
		var _tuple, n, err;
		cl = strings.TrimSpace(cl);
		if (cl === "") {
			return [new $Int64(-1, 4294967295), $ifaceNil];
		}
		_tuple = strconv.ParseInt(cl, 10, 64); n = _tuple[0]; err = _tuple[1];
		if (!($interfaceIsEqual(err, $ifaceNil)) || (n.$high < 0 || (n.$high === 0 && n.$low < 0))) {
			return [new $Int64(0, 0), new badStringError.Ptr("bad Content-Length", cl)];
		}
		return [n, $ifaceNil];
	};
	$pkg.$init = function() {
		($ptrType(chunkedReader)).methods = [["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["beginChunk", "beginChunk", "net/http", $funcType([], [], false), -1], ["chunkHeaderAvailable", "chunkHeaderAvailable", "net/http", $funcType([], [$Bool], false), -1]];
		chunkedReader.init([["r", "r", "net/http", ($ptrType(bufio.Reader)), ""], ["n", "n", "net/http", $Uint64, ""], ["err", "err", "net/http", $error, ""], ["buf", "buf", "net/http", ($arrayType($Uint8, 2)), ""]]);
		($ptrType(chunkedWriter)).methods = [["Close", "Close", "", $funcType([], [$error], false), -1], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1]];
		chunkedWriter.init([["Wire", "Wire", "", io.Writer, ""]]);
		($ptrType(Cookie)).methods = [["String", "String", "", $funcType([], [$String], false), -1]];
		Cookie.init([["Name", "Name", "", $String, ""], ["Value", "Value", "", $String, ""], ["Path", "Path", "", $String, ""], ["Domain", "Domain", "", $String, ""], ["Expires", "Expires", "", time.Time, ""], ["RawExpires", "RawExpires", "", $String, ""], ["MaxAge", "MaxAge", "", $Int, ""], ["Secure", "Secure", "", $Bool, ""], ["HttpOnly", "HttpOnly", "", $Bool, ""], ["Raw", "Raw", "", $String, ""], ["Unparsed", "Unparsed", "", ($sliceType($String)), ""]]);
		Header.methods = [["Add", "Add", "", $funcType([$String, $String], [], false), -1], ["Del", "Del", "", $funcType([$String], [], false), -1], ["Get", "Get", "", $funcType([$String], [$String], false), -1], ["Set", "Set", "", $funcType([$String, $String], [], false), -1], ["Write", "Write", "", $funcType([io.Writer], [$error], false), -1], ["WriteSubset", "WriteSubset", "", $funcType([io.Writer, ($mapType($String, $Bool))], [$error], false), -1], ["clone", "clone", "net/http", $funcType([], [Header], false), -1], ["get", "get", "net/http", $funcType([$String], [$String], false), -1], ["sortedKeyValues", "sortedKeyValues", "net/http", $funcType([($mapType($String, $Bool))], [($sliceType(keyValues)), ($ptrType(headerSorter))], false), -1]];
		($ptrType(Header)).methods = [["Add", "Add", "", $funcType([$String, $String], [], false), -1], ["Del", "Del", "", $funcType([$String], [], false), -1], ["Get", "Get", "", $funcType([$String], [$String], false), -1], ["Set", "Set", "", $funcType([$String, $String], [], false), -1], ["Write", "Write", "", $funcType([io.Writer], [$error], false), -1], ["WriteSubset", "WriteSubset", "", $funcType([io.Writer, ($mapType($String, $Bool))], [$error], false), -1], ["clone", "clone", "net/http", $funcType([], [Header], false), -1], ["get", "get", "net/http", $funcType([$String], [$String], false), -1], ["sortedKeyValues", "sortedKeyValues", "net/http", $funcType([($mapType($String, $Bool))], [($sliceType(keyValues)), ($ptrType(headerSorter))], false), -1]];
		Header.init($String, ($sliceType($String)));
		writeStringer.init([["WriteString", "WriteString", "", $funcType([$String], [$Int, $error], false)]]);
		stringWriter.methods = [["WriteString", "WriteString", "", $funcType([$String], [$Int, $error], false), -1]];
		($ptrType(stringWriter)).methods = [["WriteString", "WriteString", "", $funcType([$String], [$Int, $error], false), -1]];
		stringWriter.init([["w", "w", "net/http", io.Writer, ""]]);
		keyValues.init([["key", "key", "net/http", $String, ""], ["values", "values", "net/http", ($sliceType($String)), ""]]);
		($ptrType(headerSorter)).methods = [["Len", "Len", "", $funcType([], [$Int], false), -1], ["Less", "Less", "", $funcType([$Int, $Int], [$Bool], false), -1], ["Swap", "Swap", "", $funcType([$Int, $Int], [], false), -1]];
		headerSorter.init([["kvs", "kvs", "net/http", ($sliceType(keyValues)), ""]]);
		($ptrType(ProtocolError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		ProtocolError.init([["ErrorString", "ErrorString", "", $String, ""]]);
		($ptrType(badStringError)).methods = [["Error", "Error", "", $funcType([], [$String], false), -1]];
		badStringError.init([["what", "what", "net/http", $String, ""], ["str", "str", "net/http", $String, ""]]);
		($ptrType(Request)).methods = [["AddCookie", "AddCookie", "", $funcType([($ptrType(Cookie))], [], false), -1], ["Cookie", "Cookie", "", $funcType([$String], [($ptrType(Cookie)), $error], false), -1], ["Cookies", "Cookies", "", $funcType([], [($sliceType(($ptrType(Cookie))))], false), -1], ["FormFile", "FormFile", "", $funcType([$String], [multipart.File, ($ptrType(multipart.FileHeader)), $error], false), -1], ["FormValue", "FormValue", "", $funcType([$String], [$String], false), -1], ["MultipartReader", "MultipartReader", "", $funcType([], [($ptrType(multipart.Reader)), $error], false), -1], ["ParseForm", "ParseForm", "", $funcType([], [$error], false), -1], ["ParseMultipartForm", "ParseMultipartForm", "", $funcType([$Int64], [$error], false), -1], ["PostFormValue", "PostFormValue", "", $funcType([$String], [$String], false), -1], ["ProtoAtLeast", "ProtoAtLeast", "", $funcType([$Int, $Int], [$Bool], false), -1], ["Referer", "Referer", "", $funcType([], [$String], false), -1], ["SetBasicAuth", "SetBasicAuth", "", $funcType([$String, $String], [], false), -1], ["UserAgent", "UserAgent", "", $funcType([], [$String], false), -1], ["Write", "Write", "", $funcType([io.Writer], [$error], false), -1], ["WriteProxy", "WriteProxy", "", $funcType([io.Writer], [$error], false), -1], ["closeBody", "closeBody", "net/http", $funcType([], [], false), -1], ["expectsContinue", "expectsContinue", "net/http", $funcType([], [$Bool], false), -1], ["multipartReader", "multipartReader", "net/http", $funcType([], [($ptrType(multipart.Reader)), $error], false), -1], ["wantsClose", "wantsClose", "net/http", $funcType([], [$Bool], false), -1], ["wantsHttp10KeepAlive", "wantsHttp10KeepAlive", "net/http", $funcType([], [$Bool], false), -1], ["write", "write", "net/http", $funcType([io.Writer, $Bool, Header], [$error], false), -1]];
		Request.init([["Method", "Method", "", $String, ""], ["URL", "URL", "", ($ptrType(url.URL)), ""], ["Proto", "Proto", "", $String, ""], ["ProtoMajor", "ProtoMajor", "", $Int, ""], ["ProtoMinor", "ProtoMinor", "", $Int, ""], ["Header", "Header", "", Header, ""], ["Body", "Body", "", io.ReadCloser, ""], ["ContentLength", "ContentLength", "", $Int64, ""], ["TransferEncoding", "TransferEncoding", "", ($sliceType($String)), ""], ["Close", "Close", "", $Bool, ""], ["Host", "Host", "", $String, ""], ["Form", "Form", "", url.Values, ""], ["PostForm", "PostForm", "", url.Values, ""], ["MultipartForm", "MultipartForm", "", ($ptrType(multipart.Form)), ""], ["Trailer", "Trailer", "", Header, ""], ["RemoteAddr", "RemoteAddr", "", $String, ""], ["RequestURI", "RequestURI", "", $String, ""], ["TLS", "TLS", "", ($ptrType(tls.ConnectionState)), ""]]);
		($ptrType(maxBytesReader)).methods = [["Close", "Close", "", $funcType([], [$error], false), -1], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1]];
		maxBytesReader.init([["w", "w", "net/http", ResponseWriter, ""], ["r", "r", "net/http", io.ReadCloser, ""], ["n", "n", "net/http", $Int64, ""], ["stopped", "stopped", "net/http", $Bool, ""]]);
		($ptrType(Response)).methods = [["Cookies", "Cookies", "", $funcType([], [($sliceType(($ptrType(Cookie))))], false), -1], ["Location", "Location", "", $funcType([], [($ptrType(url.URL)), $error], false), -1], ["ProtoAtLeast", "ProtoAtLeast", "", $funcType([$Int, $Int], [$Bool], false), -1], ["Write", "Write", "", $funcType([io.Writer], [$error], false), -1]];
		Response.init([["Status", "Status", "", $String, ""], ["StatusCode", "StatusCode", "", $Int, ""], ["Proto", "Proto", "", $String, ""], ["ProtoMajor", "ProtoMajor", "", $Int, ""], ["ProtoMinor", "ProtoMinor", "", $Int, ""], ["Header", "Header", "", Header, ""], ["Body", "Body", "", io.ReadCloser, ""], ["ContentLength", "ContentLength", "", $Int64, ""], ["TransferEncoding", "TransferEncoding", "", ($sliceType($String)), ""], ["Close", "Close", "", $Bool, ""], ["Trailer", "Trailer", "", Header, ""], ["Request", "Request", "", ($ptrType(Request)), ""], ["TLS", "TLS", "", ($ptrType(tls.ConnectionState)), ""]]);
		Handler.init([["ServeHTTP", "ServeHTTP", "", $funcType([ResponseWriter, ($ptrType(Request))], [], false)]]);
		ResponseWriter.init([["Header", "Header", "", $funcType([], [Header], false)], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false)], ["WriteHeader", "WriteHeader", "", $funcType([$Int], [], false)]]);
		($ptrType(conn)).methods = [["close", "close", "net/http", $funcType([], [], false), -1], ["closeNotify", "closeNotify", "net/http", $funcType([], [($chanType($Bool, false, true))], false), -1], ["closeWriteAndWait", "closeWriteAndWait", "net/http", $funcType([], [], false), -1], ["finalFlush", "finalFlush", "net/http", $funcType([], [], false), -1], ["hijack", "hijack", "net/http", $funcType([], [net.Conn, ($ptrType(bufio.ReadWriter)), $error], false), -1], ["hijacked", "hijacked", "net/http", $funcType([], [$Bool], false), -1], ["noteClientGone", "noteClientGone", "net/http", $funcType([], [], false), -1], ["readRequest", "readRequest", "net/http", $funcType([], [($ptrType(response)), $error], false), -1], ["serve", "serve", "net/http", $funcType([], [], false), -1], ["setState", "setState", "net/http", $funcType([net.Conn, ConnState], [], false), -1]];
		conn.init([["remoteAddr", "remoteAddr", "net/http", $String, ""], ["server", "server", "net/http", ($ptrType(Server)), ""], ["rwc", "rwc", "net/http", net.Conn, ""], ["sr", "sr", "net/http", liveSwitchReader, ""], ["lr", "lr", "net/http", ($ptrType(io.LimitedReader)), ""], ["buf", "buf", "net/http", ($ptrType(bufio.ReadWriter)), ""], ["tlsState", "tlsState", "net/http", ($ptrType(tls.ConnectionState)), ""], ["mu", "mu", "net/http", sync.Mutex, ""], ["clientGone", "clientGone", "net/http", $Bool, ""], ["closeNotifyc", "closeNotifyc", "net/http", ($chanType($Bool, false, false)), ""], ["hijackedv", "hijackedv", "net/http", $Bool, ""]]);
		switchWriter.methods = [["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0]];
		($ptrType(switchWriter)).methods = [["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0]];
		switchWriter.init([["Writer", "", "", io.Writer, ""]]);
		($ptrType(liveSwitchReader)).methods = [["Lock", "Lock", "", $funcType([], [], false), 0], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["Unlock", "Unlock", "", $funcType([], [], false), 0]];
		liveSwitchReader.init([["Mutex", "", "", sync.Mutex, ""], ["r", "r", "net/http", io.Reader, ""]]);
		($ptrType(chunkWriter)).methods = [["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["close", "close", "net/http", $funcType([], [], false), -1], ["flush", "flush", "net/http", $funcType([], [], false), -1], ["writeHeader", "writeHeader", "net/http", $funcType([($sliceType($Uint8))], [], false), -1]];
		chunkWriter.init([["res", "res", "net/http", ($ptrType(response)), ""], ["header", "header", "net/http", Header, ""], ["wroteHeader", "wroteHeader", "net/http", $Bool, ""], ["chunking", "chunking", "net/http", $Bool, ""]]);
		($ptrType(response)).methods = [["CloseNotify", "CloseNotify", "", $funcType([], [($chanType($Bool, false, true))], false), -1], ["Flush", "Flush", "", $funcType([], [], false), -1], ["Header", "Header", "", $funcType([], [Header], false), -1], ["Hijack", "Hijack", "", $funcType([], [net.Conn, ($ptrType(bufio.ReadWriter)), $error], false), -1], ["ReadFrom", "ReadFrom", "", $funcType([io.Reader], [$Int64, $error], false), -1], ["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["WriteHeader", "WriteHeader", "", $funcType([$Int], [], false), -1], ["WriteString", "WriteString", "", $funcType([$String], [$Int, $error], false), -1], ["bodyAllowed", "bodyAllowed", "net/http", $funcType([], [$Bool], false), -1], ["finishRequest", "finishRequest", "net/http", $funcType([], [], false), -1], ["needsSniff", "needsSniff", "net/http", $funcType([], [$Bool], false), -1], ["requestTooLarge", "requestTooLarge", "net/http", $funcType([], [], false), -1], ["sendExpectationFailed", "sendExpectationFailed", "net/http", $funcType([], [], false), -1], ["write", "write", "net/http", $funcType([$Int, ($sliceType($Uint8)), $String], [$Int, $error], false), -1]];
		response.init([["conn", "conn", "net/http", ($ptrType(conn)), ""], ["req", "req", "net/http", ($ptrType(Request)), ""], ["wroteHeader", "wroteHeader", "net/http", $Bool, ""], ["wroteContinue", "wroteContinue", "net/http", $Bool, ""], ["w", "w", "net/http", ($ptrType(bufio.Writer)), ""], ["cw", "cw", "net/http", chunkWriter, ""], ["sw", "sw", "net/http", ($ptrType(switchWriter)), ""], ["handlerHeader", "handlerHeader", "net/http", Header, ""], ["calledHeader", "calledHeader", "net/http", $Bool, ""], ["written", "written", "net/http", $Int64, ""], ["contentLength", "contentLength", "net/http", $Int64, ""], ["status", "status", "net/http", $Int, ""], ["closeAfterReply", "closeAfterReply", "net/http", $Bool, ""], ["requestBodyLimitHit", "requestBodyLimitHit", "net/http", $Bool, ""], ["handlerDone", "handlerDone", "net/http", $Bool, ""], ["dateBuf", "dateBuf", "net/http", ($arrayType($Uint8, 29)), ""], ["clenBuf", "clenBuf", "net/http", ($arrayType($Uint8, 10)), ""]]);
		writerOnly.methods = [["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0]];
		($ptrType(writerOnly)).methods = [["Write", "Write", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), 0]];
		writerOnly.init([["Writer", "", "", io.Writer, ""]]);
		($ptrType(expectContinueReader)).methods = [["Close", "Close", "", $funcType([], [$error], false), -1], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1]];
		expectContinueReader.init([["resp", "resp", "net/http", ($ptrType(response)), ""], ["readCloser", "readCloser", "net/http", io.ReadCloser, ""], ["closed", "closed", "net/http", $Bool, ""]]);
		extraHeader.methods = [["Write", "Write", "", $funcType([($ptrType(bufio.Writer))], [], false), -1]];
		($ptrType(extraHeader)).methods = [["Write", "Write", "", $funcType([($ptrType(bufio.Writer))], [], false), -1]];
		extraHeader.init([["contentType", "contentType", "net/http", $String, ""], ["connection", "connection", "net/http", $String, ""], ["transferEncoding", "transferEncoding", "net/http", $String, ""], ["date", "date", "net/http", ($sliceType($Uint8)), ""], ["contentLength", "contentLength", "net/http", ($sliceType($Uint8)), ""]]);
		HandlerFunc.methods = [["ServeHTTP", "ServeHTTP", "", $funcType([ResponseWriter, ($ptrType(Request))], [], false), -1]];
		($ptrType(HandlerFunc)).methods = [["ServeHTTP", "ServeHTTP", "", $funcType([ResponseWriter, ($ptrType(Request))], [], false), -1]];
		HandlerFunc.init([ResponseWriter, ($ptrType(Request))], [], false);
		($ptrType(redirectHandler)).methods = [["ServeHTTP", "ServeHTTP", "", $funcType([ResponseWriter, ($ptrType(Request))], [], false), -1]];
		redirectHandler.init([["url", "url", "net/http", $String, ""], ["code", "code", "net/http", $Int, ""]]);
		($ptrType(ServeMux)).methods = [["Handle", "Handle", "", $funcType([$String, Handler], [], false), -1], ["HandleFunc", "HandleFunc", "", $funcType([$String, ($funcType([ResponseWriter, ($ptrType(Request))], [], false))], [], false), -1], ["Handler", "Handler", "", $funcType([($ptrType(Request))], [Handler, $String], false), -1], ["ServeHTTP", "ServeHTTP", "", $funcType([ResponseWriter, ($ptrType(Request))], [], false), -1], ["handler", "handler", "net/http", $funcType([$String, $String], [Handler, $String], false), -1], ["match", "match", "net/http", $funcType([$String], [Handler, $String], false), -1]];
		ServeMux.init([["mu", "mu", "net/http", sync.RWMutex, ""], ["m", "m", "net/http", ($mapType($String, muxEntry)), ""], ["hosts", "hosts", "net/http", $Bool, ""]]);
		muxEntry.init([["explicit", "explicit", "net/http", $Bool, ""], ["h", "h", "net/http", Handler, ""], ["pattern", "pattern", "net/http", $String, ""]]);
		($ptrType(Server)).methods = [["ListenAndServe", "ListenAndServe", "", $funcType([], [$error], false), -1], ["ListenAndServeTLS", "ListenAndServeTLS", "", $funcType([$String, $String], [$error], false), -1], ["Serve", "Serve", "", $funcType([net.Listener], [$error], false), -1], ["SetKeepAlivesEnabled", "SetKeepAlivesEnabled", "", $funcType([$Bool], [], false), -1], ["doKeepAlives", "doKeepAlives", "net/http", $funcType([], [$Bool], false), -1], ["initialLimitedReaderSize", "initialLimitedReaderSize", "net/http", $funcType([], [$Int64], false), -1], ["logf", "logf", "net/http", $funcType([$String, ($sliceType($emptyInterface))], [], true), -1], ["maxHeaderBytes", "maxHeaderBytes", "net/http", $funcType([], [$Int], false), -1], ["newConn", "newConn", "net/http", $funcType([net.Conn], [($ptrType(conn)), $error], false), -1]];
		Server.init([["Addr", "Addr", "", $String, ""], ["Handler", "Handler", "", Handler, ""], ["ReadTimeout", "ReadTimeout", "", time.Duration, ""], ["WriteTimeout", "WriteTimeout", "", time.Duration, ""], ["MaxHeaderBytes", "MaxHeaderBytes", "", $Int, ""], ["TLSConfig", "TLSConfig", "", ($ptrType(tls.Config)), ""], ["TLSNextProto", "TLSNextProto", "", ($mapType($String, ($funcType([($ptrType(Server)), ($ptrType(tls.Conn)), Handler], [], false)))), ""], ["ConnState", "ConnState", "", ($funcType([net.Conn, ConnState], [], false)), ""], ["ErrorLog", "ErrorLog", "", ($ptrType(log.Logger)), ""], ["disableKeepAlives", "disableKeepAlives", "net/http", $Int32, ""]]);
		ConnState.methods = [["String", "String", "", $funcType([], [$String], false), -1]];
		($ptrType(ConnState)).methods = [["String", "String", "", $funcType([], [$String], false), -1]];
		serverHandler.methods = [["ServeHTTP", "ServeHTTP", "", $funcType([ResponseWriter, ($ptrType(Request))], [], false), -1]];
		($ptrType(serverHandler)).methods = [["ServeHTTP", "ServeHTTP", "", $funcType([ResponseWriter, ($ptrType(Request))], [], false), -1]];
		serverHandler.init([["srv", "srv", "net/http", ($ptrType(Server)), ""]]);
		tcpKeepAliveListener.methods = [["Accept", "Accept", "", $funcType([], [net.Conn, $error], false), -1], ["AcceptTCP", "AcceptTCP", "", $funcType([], [($ptrType(net.TCPConn)), $error], false), 0], ["Addr", "Addr", "", $funcType([], [net.Addr], false), 0], ["Close", "Close", "", $funcType([], [$error], false), 0], ["File", "File", "", $funcType([], [($ptrType(os.File)), $error], false), 0], ["SetDeadline", "SetDeadline", "", $funcType([time.Time], [$error], false), 0]];
		($ptrType(tcpKeepAliveListener)).methods = [["Accept", "Accept", "", $funcType([], [net.Conn, $error], false), -1], ["AcceptTCP", "AcceptTCP", "", $funcType([], [($ptrType(net.TCPConn)), $error], false), 0], ["Addr", "Addr", "", $funcType([], [net.Addr], false), 0], ["Close", "Close", "", $funcType([], [$error], false), 0], ["File", "File", "", $funcType([], [($ptrType(os.File)), $error], false), 0], ["SetDeadline", "SetDeadline", "", $funcType([time.Time], [$error], false), 0]];
		tcpKeepAliveListener.init([["TCPListener", "", "", ($ptrType(net.TCPListener)), ""]]);
		globalOptionsHandler.methods = [["ServeHTTP", "ServeHTTP", "", $funcType([ResponseWriter, ($ptrType(Request))], [], false), -1]];
		($ptrType(globalOptionsHandler)).methods = [["ServeHTTP", "ServeHTTP", "", $funcType([ResponseWriter, ($ptrType(Request))], [], false), -1]];
		globalOptionsHandler.init([]);
		eofReaderWithWriteTo.methods = [["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["WriteTo", "WriteTo", "", $funcType([io.Writer], [$Int64, $error], false), -1]];
		($ptrType(eofReaderWithWriteTo)).methods = [["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["WriteTo", "WriteTo", "", $funcType([io.Writer], [$Int64, $error], false), -1]];
		eofReaderWithWriteTo.init([]);
		initNPNRequest.methods = [["ServeHTTP", "ServeHTTP", "", $funcType([ResponseWriter, ($ptrType(Request))], [], false), -1]];
		($ptrType(initNPNRequest)).methods = [["ServeHTTP", "ServeHTTP", "", $funcType([ResponseWriter, ($ptrType(Request))], [], false), -1]];
		initNPNRequest.init([["c", "c", "net/http", ($ptrType(tls.Conn)), ""], ["h", "h", "net/http", serverHandler, ""]]);
		sniffSig.init([["match", "match", "net/http", $funcType([($sliceType($Uint8)), $Int], [$String], false)]]);
		($ptrType(exactSig)).methods = [["match", "match", "net/http", $funcType([($sliceType($Uint8)), $Int], [$String], false), -1]];
		exactSig.init([["sig", "sig", "net/http", ($sliceType($Uint8)), ""], ["ct", "ct", "net/http", $String, ""]]);
		($ptrType(maskedSig)).methods = [["match", "match", "net/http", $funcType([($sliceType($Uint8)), $Int], [$String], false), -1]];
		maskedSig.init([["mask", "mask", "net/http", ($sliceType($Uint8)), ""], ["pat", "pat", "net/http", ($sliceType($Uint8)), ""], ["skipWS", "skipWS", "net/http", $Bool, ""], ["ct", "ct", "net/http", $String, ""]]);
		htmlSig.methods = [["match", "match", "net/http", $funcType([($sliceType($Uint8)), $Int], [$String], false), -1]];
		($ptrType(htmlSig)).methods = [["match", "match", "net/http", $funcType([($sliceType($Uint8)), $Int], [$String], false), -1]];
		htmlSig.init($Uint8);
		textSig.methods = [["match", "match", "net/http", $funcType([($sliceType($Uint8)), $Int], [$String], false), -1]];
		($ptrType(textSig)).methods = [["match", "match", "net/http", $funcType([($sliceType($Uint8)), $Int], [$String], false), -1]];
		($ptrType(errorReader)).methods = [["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1]];
		errorReader.init([["err", "err", "net/http", $error, ""]]);
		($ptrType(transferWriter)).methods = [["WriteBody", "WriteBody", "", $funcType([io.Writer], [$error], false), -1], ["WriteHeader", "WriteHeader", "", $funcType([io.Writer], [$error], false), -1], ["shouldSendContentLength", "shouldSendContentLength", "net/http", $funcType([], [$Bool], false), -1]];
		transferWriter.init([["Method", "Method", "", $String, ""], ["Body", "Body", "", io.Reader, ""], ["BodyCloser", "BodyCloser", "", io.Closer, ""], ["ResponseToHEAD", "ResponseToHEAD", "", $Bool, ""], ["ContentLength", "ContentLength", "", $Int64, ""], ["Close", "Close", "", $Bool, ""], ["TransferEncoding", "TransferEncoding", "", ($sliceType($String)), ""], ["Trailer", "Trailer", "", Header, ""]]);
		transferReader.init([["Header", "Header", "", Header, ""], ["StatusCode", "StatusCode", "", $Int, ""], ["RequestMethod", "RequestMethod", "", $String, ""], ["ProtoMajor", "ProtoMajor", "", $Int, ""], ["ProtoMinor", "ProtoMinor", "", $Int, ""], ["Body", "Body", "", io.ReadCloser, ""], ["ContentLength", "ContentLength", "", $Int64, ""], ["TransferEncoding", "TransferEncoding", "", ($sliceType($String)), ""], ["Close", "Close", "", $Bool, ""], ["Trailer", "Trailer", "", Header, ""]]);
		($ptrType(body)).methods = [["Close", "Close", "", $funcType([], [$error], false), -1], ["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["readLocked", "readLocked", "net/http", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1], ["readTrailer", "readTrailer", "net/http", $funcType([], [$error], false), -1]];
		body.init([["src", "src", "net/http", io.Reader, ""], ["hdr", "hdr", "net/http", $emptyInterface, ""], ["r", "r", "net/http", ($ptrType(bufio.Reader)), ""], ["closing", "closing", "net/http", $Bool, ""], ["mu", "mu", "net/http", sync.Mutex, ""], ["closed", "closed", "net/http", $Bool, ""]]);
		bodyLocked.methods = [["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1]];
		($ptrType(bodyLocked)).methods = [["Read", "Read", "", $funcType([($sliceType($Uint8))], [$Int, $error], false), -1]];
		bodyLocked.init([["b", "b", "net/http", ($ptrType(body)), ""]]);
		textprotoReaderPool = new sync.Pool.Ptr();
		bufioReaderPool = new sync.Pool.Ptr();
		bufioWriter2kPool = new sync.Pool.Ptr();
		bufioWriter4kPool = new sync.Pool.Ptr();
		statusMu = new sync.RWMutex.Ptr();
		$pkg.ErrLineTooLong = errors.New("header line too long");
		cookieNameSanitizer = strings.NewReplacer(new ($sliceType($String))(["\n", "-", "\r", "-"]));
		errSeeker = errors.New("seeker can't seek");
		headerNewlineToSpace = strings.NewReplacer(new ($sliceType($String))(["\n", " ", "\r", " "]));
		headerSorterPool = new sync.Pool.Ptr(0, 0, ($sliceType($emptyInterface)).nil, (function() {
			return new headerSorter.Ptr();
		}));
		isTokenTable = $toNativeArray("Bool", [false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, true, true, true, true, false, false, true, true, false, true, true, false, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, true, false, true]);
		$pkg.ErrMissingFile = errors.New("http: no such file");
		$pkg.ErrUnexpectedTrailer = new ProtocolError.Ptr("trailer header without chunked transfer encoding");
		$pkg.ErrNotMultipart = new ProtocolError.Ptr("request Content-Type isn't multipart/form-data");
		$pkg.ErrMissingBoundary = new ProtocolError.Ptr("no multipart boundary param in Content-Type");
		reqWriteExcludeHeader = (_map = new $Map(), _key = "Host", _map[_key] = { k: _key, v: true }, _key = "User-Agent", _map[_key] = { k: _key, v: true }, _key = "Content-Length", _map[_key] = { k: _key, v: true }, _key = "Transfer-Encoding", _map[_key] = { k: _key, v: true }, _key = "Trailer", _map[_key] = { k: _key, v: true }, _map);
		$pkg.ErrNoCookie = errors.New("http: named cookie not present");
		multipartByReader = new multipart.Form.Ptr(new $Map(), new $Map());
		respExcludeHeader = (_map$1 = new $Map(), _key$1 = "Content-Length", _map$1[_key$1] = { k: _key$1, v: true }, _key$1 = "Transfer-Encoding", _map$1[_key$1] = { k: _key$1, v: true }, _key$1 = "Trailer", _map$1[_key$1] = { k: _key$1, v: true }, _map$1);
		$pkg.ErrNoLocation = errors.New("http: no Location header in response");
		$pkg.ErrWriteAfterFlush = errors.New("Conn.Write called after Flush");
		$pkg.ErrBodyNotAllowed = errors.New("http: request method or response status code does not allow body");
		$pkg.ErrHijacked = errors.New("Conn has been hijacked");
		$pkg.ErrContentLength = errors.New("Conn.Write wrote more than the declared Content-Length");
		crlf = new ($sliceType($Uint8))($stringToBytes("\r\n"));
		colonSpace = new ($sliceType($Uint8))($stringToBytes(": "));
		errTooLarge = errors.New("http: request too large");
		extraHeaderKeys = new ($sliceType(($sliceType($Uint8))))([new ($sliceType($Uint8))($stringToBytes("Content-Type")), new ($sliceType($Uint8))($stringToBytes("Connection")), new ($sliceType($Uint8))($stringToBytes("Transfer-Encoding"))]);
		headerContentLength = new ($sliceType($Uint8))($stringToBytes("Content-Length: "));
		headerDate = new ($sliceType($Uint8))($stringToBytes("Date: "));
		statusLines = new $Map();
		htmlReplacer = strings.NewReplacer(new ($sliceType($String))(["&", "&amp;", "<", "&lt;", ">", "&gt;", "\"", "&#34;", "'", "&#39;"]));
		$pkg.DefaultServeMux = NewServeMux();
		stateName = (_map$2 = new $Map(), _key$2 = 0, _map$2[_key$2] = { k: _key$2, v: "new" }, _key$2 = 1, _map$2[_key$2] = { k: _key$2, v: "active" }, _key$2 = 2, _map$2[_key$2] = { k: _key$2, v: "idle" }, _key$2 = 3, _map$2[_key$2] = { k: _key$2, v: "hijacked" }, _key$2 = 4, _map$2[_key$2] = { k: _key$2, v: "closed" }, _map$2);
		$pkg.ErrHandlerTimeout = errors.New("http: Handler timeout");
		eofReader = new ($structType([["eofReaderWithWriteTo", "", "net/http", eofReaderWithWriteTo, ""], ["Closer", "", "", io.Closer, ""]])).Ptr(new eofReaderWithWriteTo.Ptr(), ioutil.NopCloser($ifaceNil));
		uniqNameNext = new $Map();
		sniffSignatures = new ($sliceType(sniffSig))([new htmlSig($stringToBytes("<!DOCTYPE HTML")), new htmlSig($stringToBytes("<HTML")), new htmlSig($stringToBytes("<HEAD")), new htmlSig($stringToBytes("<SCRIPT")), new htmlSig($stringToBytes("<IFRAME")), new htmlSig($stringToBytes("<H1")), new htmlSig($stringToBytes("<DIV")), new htmlSig($stringToBytes("<FONT")), new htmlSig($stringToBytes("<TABLE")), new htmlSig($stringToBytes("<A")), new htmlSig($stringToBytes("<STYLE")), new htmlSig($stringToBytes("<TITLE")), new htmlSig($stringToBytes("<B")), new htmlSig($stringToBytes("<BODY")), new htmlSig($stringToBytes("<BR")), new htmlSig($stringToBytes("<P")), new htmlSig($stringToBytes("<!--")), new maskedSig.Ptr(new ($sliceType($Uint8))($stringToBytes("\xFF\xFF\xFF\xFF\xFF")), new ($sliceType($Uint8))($stringToBytes("<?xml")), true, "text/xml; charset=utf-8"), new exactSig.Ptr(new ($sliceType($Uint8))($stringToBytes("%PDF-")), "application/pdf"), new exactSig.Ptr(new ($sliceType($Uint8))($stringToBytes("%!PS-Adobe-")), "application/postscript"), new maskedSig.Ptr(new ($sliceType($Uint8))($stringToBytes("\xFF\xFF\x00\x00")), new ($sliceType($Uint8))($stringToBytes("\xFE\xFF\x00\x00")), false, "text/plain; charset=utf-16be"), new maskedSig.Ptr(new ($sliceType($Uint8))($stringToBytes("\xFF\xFF\x00\x00")), new ($sliceType($Uint8))($stringToBytes("\xFF\xFE\x00\x00")), false, "text/plain; charset=utf-16le"), new maskedSig.Ptr(new ($sliceType($Uint8))($stringToBytes("\xFF\xFF\xFF\x00")), new ($sliceType($Uint8))($stringToBytes("\xEF\xBB\xBF\x00")), false, "text/plain; charset=utf-8"), new exactSig.Ptr(new ($sliceType($Uint8))($stringToBytes("GIF87a")), "image/gif"), new exactSig.Ptr(new ($sliceType($Uint8))($stringToBytes("GIF89a")), "image/gif"), new exactSig.Ptr(new ($sliceType($Uint8))($stringToBytes("\x89PNG\r\n\x1A\n")), "image/png"), new exactSig.Ptr(new ($sliceType($Uint8))($stringToBytes("\xFF\xD8\xFF")), "image/jpeg"), new exactSig.Ptr(new ($sliceType($Uint8))($stringToBytes("BM")), "image/bmp"), new maskedSig.Ptr(new ($sliceType($Uint8))($stringToBytes("\xFF\xFF\xFF\xFF\x00\x00\x00\x00\xFF\xFF\xFF\xFF\xFF\xFF")), new ($sliceType($Uint8))($stringToBytes("RIFF\x00\x00\x00\x00WEBPVP")), false, "image/webp"), new exactSig.Ptr(new ($sliceType($Uint8))($stringToBytes("\x00\x00\x01\x00")), "image/vnd.microsoft.icon"), new exactSig.Ptr(new ($sliceType($Uint8))($stringToBytes("OggS\x00")), "application/ogg"), new maskedSig.Ptr(new ($sliceType($Uint8))($stringToBytes("\xFF\xFF\xFF\xFF\x00\x00\x00\x00\xFF\xFF\xFF\xFF")), new ($sliceType($Uint8))($stringToBytes("RIFF\x00\x00\x00\x00WAVE")), false, "audio/wave"), new exactSig.Ptr(new ($sliceType($Uint8))($stringToBytes("\x1AE\xDF\xA3")), "video/webm"), new exactSig.Ptr(new ($sliceType($Uint8))($stringToBytes("Rar \x1A\x07\x00")), "application/x-rar-compressed"), new exactSig.Ptr(new ($sliceType($Uint8))($stringToBytes("PK\x03\x04")), "application/zip"), new exactSig.Ptr(new ($sliceType($Uint8))($stringToBytes("\x1F\x8B\b")), "application/x-gzip"), new textSig(0)]);
		statusText = (_map$3 = new $Map(), _key$3 = 100, _map$3[_key$3] = { k: _key$3, v: "Continue" }, _key$3 = 101, _map$3[_key$3] = { k: _key$3, v: "Switching Protocols" }, _key$3 = 200, _map$3[_key$3] = { k: _key$3, v: "OK" }, _key$3 = 201, _map$3[_key$3] = { k: _key$3, v: "Created" }, _key$3 = 202, _map$3[_key$3] = { k: _key$3, v: "Accepted" }, _key$3 = 203, _map$3[_key$3] = { k: _key$3, v: "Non-Authoritative Information" }, _key$3 = 204, _map$3[_key$3] = { k: _key$3, v: "No Content" }, _key$3 = 205, _map$3[_key$3] = { k: _key$3, v: "Reset Content" }, _key$3 = 206, _map$3[_key$3] = { k: _key$3, v: "Partial Content" }, _key$3 = 300, _map$3[_key$3] = { k: _key$3, v: "Multiple Choices" }, _key$3 = 301, _map$3[_key$3] = { k: _key$3, v: "Moved Permanently" }, _key$3 = 302, _map$3[_key$3] = { k: _key$3, v: "Found" }, _key$3 = 303, _map$3[_key$3] = { k: _key$3, v: "See Other" }, _key$3 = 304, _map$3[_key$3] = { k: _key$3, v: "Not Modified" }, _key$3 = 305, _map$3[_key$3] = { k: _key$3, v: "Use Proxy" }, _key$3 = 307, _map$3[_key$3] = { k: _key$3, v: "Temporary Redirect" }, _key$3 = 400, _map$3[_key$3] = { k: _key$3, v: "Bad Request" }, _key$3 = 401, _map$3[_key$3] = { k: _key$3, v: "Unauthorized" }, _key$3 = 402, _map$3[_key$3] = { k: _key$3, v: "Payment Required" }, _key$3 = 403, _map$3[_key$3] = { k: _key$3, v: "Forbidden" }, _key$3 = 404, _map$3[_key$3] = { k: _key$3, v: "Not Found" }, _key$3 = 405, _map$3[_key$3] = { k: _key$3, v: "Method Not Allowed" }, _key$3 = 406, _map$3[_key$3] = { k: _key$3, v: "Not Acceptable" }, _key$3 = 407, _map$3[_key$3] = { k: _key$3, v: "Proxy Authentication Required" }, _key$3 = 408, _map$3[_key$3] = { k: _key$3, v: "Request Timeout" }, _key$3 = 409, _map$3[_key$3] = { k: _key$3, v: "Conflict" }, _key$3 = 410, _map$3[_key$3] = { k: _key$3, v: "Gone" }, _key$3 = 411, _map$3[_key$3] = { k: _key$3, v: "Length Required" }, _key$3 = 412, _map$3[_key$3] = { k: _key$3, v: "Precondition Failed" }, _key$3 = 413, _map$3[_key$3] = { k: _key$3, v: "Request Entity Too Large" }, _key$3 = 414, _map$3[_key$3] = { k: _key$3, v: "Request URI Too Long" }, _key$3 = 415, _map$3[_key$3] = { k: _key$3, v: "Unsupported Media Type" }, _key$3 = 416, _map$3[_key$3] = { k: _key$3, v: "Requested Range Not Satisfiable" }, _key$3 = 417, _map$3[_key$3] = { k: _key$3, v: "Expectation Failed" }, _key$3 = 418, _map$3[_key$3] = { k: _key$3, v: "I'm a teapot" }, _key$3 = 500, _map$3[_key$3] = { k: _key$3, v: "Internal Server Error" }, _key$3 = 501, _map$3[_key$3] = { k: _key$3, v: "Not Implemented" }, _key$3 = 502, _map$3[_key$3] = { k: _key$3, v: "Bad Gateway" }, _key$3 = 503, _map$3[_key$3] = { k: _key$3, v: "Service Unavailable" }, _key$3 = 504, _map$3[_key$3] = { k: _key$3, v: "Gateway Timeout" }, _key$3 = 505, _map$3[_key$3] = { k: _key$3, v: "HTTP Version Not Supported" }, _key$3 = 428, _map$3[_key$3] = { k: _key$3, v: "Precondition Required" }, _key$3 = 429, _map$3[_key$3] = { k: _key$3, v: "Too Many Requests" }, _key$3 = 431, _map$3[_key$3] = { k: _key$3, v: "Request Header Fields Too Large" }, _key$3 = 511, _map$3[_key$3] = { k: _key$3, v: "Network Authentication Required" }, _map$3);
		suppressedHeaders304 = new ($sliceType($String))(["Content-Type", "Content-Length", "Transfer-Encoding"]);
		suppressedHeadersNoBody = new ($sliceType($String))(["Content-Length", "Transfer-Encoding"]);
		$pkg.ErrBodyReadAfterClose = errors.New("http: invalid Read on closed Body");
		singleCRLF = new ($sliceType($Uint8))($stringToBytes("\r\n"));
		doubleCRLF = new ($sliceType($Uint8))($stringToBytes("\r\n\r\n"));
		errTrailerEOF = errors.New("http: unexpected EOF reading trailer");
	};
	return $pkg;
})();
$packages["net/http/httputil"] = (function() {
	var $pkg = {}, bufio = $packages["bufio"], bytes = $packages["bytes"], errors = $packages["errors"], fmt = $packages["fmt"], io = $packages["io"], ioutil = $packages["io/ioutil"], net = $packages["net"], http = $packages["net/http"], url = $packages["net/url"], strings = $packages["strings"], time = $packages["time"], textproto = $packages["net/textproto"], sync = $packages["sync"], log = $packages["log"], errNoBody, emptyBody, errClosed;
	$pkg.$init = function() {
		$pkg.ErrLineTooLong = errors.New("header line too long");
		errNoBody = errors.New("sentinel error value");
		emptyBody = ioutil.NopCloser(strings.NewReader(""));
		errClosed = errors.New("i/o operation on closed connection");
	};
	return $pkg;
})();
$packages["github.com/deepglint/go-dockerclient"] = (function() {
	var $pkg = {}, fmt = $packages["fmt"], bytes = $packages["bytes"], json = $packages["encoding/json"], errors = $packages["errors"], io = $packages["io"], ioutil = $packages["io/ioutil"], net = $packages["net"], http = $packages["net/http"], httputil = $packages["net/http/httputil"], url = $packages["net/url"], reflect = $packages["reflect"], strconv = $packages["strconv"], strings = $packages["strings"], log = $packages["log"], time = $packages["time"], math = $packages["math"], sync = $packages["sync"], atomic = $packages["sync/atomic"], base64 = $packages["encoding/base64"], os = $packages["os"], binary = $packages["encoding/binary"], ApiVersion, APIEvents, apiVersion_1_12, errInvalidStdHeader, _tuple, NewApiVersion;
	ApiVersion = $pkg.ApiVersion = $newType(12, "Slice", "docker.ApiVersion", "ApiVersion", "github.com/deepglint/go-dockerclient", null);
	APIEvents = $pkg.APIEvents = $newType(0, "Struct", "docker.APIEvents", "APIEvents", "github.com/deepglint/go-dockerclient", function(Status_, ID_, From_, Time_) {
		this.$val = this;
		this.Status = Status_ !== undefined ? Status_ : "";
		this.ID = ID_ !== undefined ? ID_ : "";
		this.From = From_ !== undefined ? From_ : "";
		this.Time = Time_ !== undefined ? Time_ : new $Int64(0, 0);
	});
	NewApiVersion = $pkg.NewApiVersion = function(input) {
		var arr, ret, err, _ref, _i, i, val, _tuple$1;
		if (!strings.Contains(input, ".")) {
			return [ApiVersion.nil, fmt.Errorf("Unable to parse version %q", new ($sliceType($emptyInterface))([new $String(input)]))];
		}
		arr = strings.Split(input, ".");
		ret = ApiVersion.make(arr.$length);
		err = $ifaceNil;
		_ref = arr;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			val = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			_tuple$1 = strconv.Atoi(val); (i < 0 || i >= ret.$length) ? $throwRuntimeError("index out of range") : ret.$array[ret.$offset + i] = _tuple$1[0]; err = _tuple$1[1];
			if (!($interfaceIsEqual(err, $ifaceNil))) {
				return [ApiVersion.nil, fmt.Errorf("Unable to parse version %q: %q is not an integer", new ($sliceType($emptyInterface))([new $String(input), new $String(val)]))];
			}
			_i++;
		}
		return [ret, $ifaceNil];
	};
	ApiVersion.prototype.String = function() {
		var version, str, _ref, _i, i, val;
		version = this;
		str = "";
		_ref = version;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			val = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			str = str + (strconv.Itoa(val));
			if (i < (version.$length - 1 >> 0)) {
				str = str + (".");
			}
			_i++;
		}
		return str;
	};
	$ptrType(ApiVersion).prototype.String = function() { return this.$get().String(); };
	ApiVersion.prototype.LessThan = function(other) {
		var version;
		version = this;
		return version.compare(other) < 0;
	};
	$ptrType(ApiVersion).prototype.LessThan = function(other) { return this.$get().LessThan(other); };
	ApiVersion.prototype.LessThanOrEqualTo = function(other) {
		var version;
		version = this;
		return version.compare(other) <= 0;
	};
	$ptrType(ApiVersion).prototype.LessThanOrEqualTo = function(other) { return this.$get().LessThanOrEqualTo(other); };
	ApiVersion.prototype.GreaterThan = function(other) {
		var version;
		version = this;
		return version.compare(other) > 0;
	};
	$ptrType(ApiVersion).prototype.GreaterThan = function(other) { return this.$get().GreaterThan(other); };
	ApiVersion.prototype.GreaterThanOrEqualTo = function(other) {
		var version;
		version = this;
		return version.compare(other) >= 0;
	};
	$ptrType(ApiVersion).prototype.GreaterThanOrEqualTo = function(other) { return this.$get().GreaterThanOrEqualTo(other); };
	ApiVersion.prototype.compare = function(other) {
		var version, _ref, _i, i, v, otherVersion;
		version = this;
		_ref = version;
		_i = 0;
		while (_i < _ref.$length) {
			i = _i;
			v = ((_i < 0 || _i >= _ref.$length) ? $throwRuntimeError("index out of range") : _ref.$array[_ref.$offset + _i]);
			if (i <= (other.$length - 1 >> 0)) {
				otherVersion = ((i < 0 || i >= other.$length) ? $throwRuntimeError("index out of range") : other.$array[other.$offset + i]);
				if (v < otherVersion) {
					return -1;
				} else if (v > otherVersion) {
					return 1;
				}
			}
			_i++;
		}
		if (version.$length > other.$length) {
			return 1;
		}
		if (version.$length < other.$length) {
			return -1;
		}
		return 0;
	};
	$ptrType(ApiVersion).prototype.compare = function(other) { return this.$get().compare(other); };
	$pkg.$init = function() {
		ApiVersion.methods = [["GreaterThan", "GreaterThan", "", $funcType([ApiVersion], [$Bool], false), -1], ["GreaterThanOrEqualTo", "GreaterThanOrEqualTo", "", $funcType([ApiVersion], [$Bool], false), -1], ["LessThan", "LessThan", "", $funcType([ApiVersion], [$Bool], false), -1], ["LessThanOrEqualTo", "LessThanOrEqualTo", "", $funcType([ApiVersion], [$Bool], false), -1], ["String", "String", "", $funcType([], [$String], false), -1], ["compare", "compare", "github.com/deepglint/go-dockerclient", $funcType([ApiVersion], [$Int], false), -1]];
		($ptrType(ApiVersion)).methods = [["GreaterThan", "GreaterThan", "", $funcType([ApiVersion], [$Bool], false), -1], ["GreaterThanOrEqualTo", "GreaterThanOrEqualTo", "", $funcType([ApiVersion], [$Bool], false), -1], ["LessThan", "LessThan", "", $funcType([ApiVersion], [$Bool], false), -1], ["LessThanOrEqualTo", "LessThanOrEqualTo", "", $funcType([ApiVersion], [$Bool], false), -1], ["String", "String", "", $funcType([], [$String], false), -1], ["compare", "compare", "github.com/deepglint/go-dockerclient", $funcType([ApiVersion], [$Int], false), -1]];
		ApiVersion.init($Int);
		APIEvents.init([["Status", "Status", "", $String, "json:\"Status,omitempty\" yaml:\"Status,omitempty\""], ["ID", "ID", "", $String, "json:\"ID,omitempty\" yaml:\"ID,omitempty\""], ["From", "From", "", $String, "json:\"From,omitempty\" yaml:\"From,omitempty\""], ["Time", "Time", "", $Int64, "json:\"Time,omitempty\" yaml:\"Time,omitempty\""]]);
		$pkg.ErrInvalidEndpoint = errors.New("invalid endpoint");
		$pkg.ErrConnectionRefused = errors.New("cannot connect to Docker endpoint");
		_tuple = NewApiVersion("1.12"); apiVersion_1_12 = _tuple[0];
		$pkg.ErrNoListeners = errors.New("no listeners present to receive event");
		$pkg.ErrListenerAlreadyExists = errors.New("listener already exists for docker events");
		$pkg.ErrNoSuchImage = errors.New("no such image");
		$pkg.ErrMissingRepo = errors.New("missing remote repository e.g. 'github.com/user/repo'");
		$pkg.ErrMissingOutputStream = errors.New("missing output stream");
		errInvalidStdHeader = errors.New("Unrecognized input header");
	};
	return $pkg;
})();
$packages["github.com/chengz0/xmuses/funcs"] = (function() {
	var $pkg = {}, docker = $packages["github.com/deepglint/go-dockerclient"], log = $packages["log"], strings = $packages["strings"];
	$pkg.$init = function() {
		$pkg.ContainersIN = false;
		$pkg.Listener = ($chanType(($ptrType(docker.APIEvents)), false, false)).nil;
	};
	return $pkg;
})();
$packages["github.com/gopherjs/jquery"] = (function() {
	var $pkg = {}, js = $packages["github.com/gopherjs/gopherjs/js"], JQuery, Event, JQueryCoordinates, NewJQuery;
	JQuery = $pkg.JQuery = $newType(0, "Struct", "jquery.JQuery", "JQuery", "github.com/gopherjs/jquery", function(o_, Jquery_, Selector_, Length_, Context_) {
		this.$val = this;
		this.o = o_ !== undefined ? o_ : $ifaceNil;
		this.Jquery = Jquery_ !== undefined ? Jquery_ : "";
		this.Selector = Selector_ !== undefined ? Selector_ : "";
		this.Length = Length_ !== undefined ? Length_ : 0;
		this.Context = Context_ !== undefined ? Context_ : "";
	});
	Event = $pkg.Event = $newType(0, "Struct", "jquery.Event", "Event", "github.com/gopherjs/jquery", function(Object_, KeyCode_, Target_, CurrentTarget_, DelegateTarget_, RelatedTarget_, Data_, Result_, Which_, Namespace_, MetaKey_, PageX_, PageY_, Type_) {
		this.$val = this;
		this.Object = Object_ !== undefined ? Object_ : $ifaceNil;
		this.KeyCode = KeyCode_ !== undefined ? KeyCode_ : 0;
		this.Target = Target_ !== undefined ? Target_ : $ifaceNil;
		this.CurrentTarget = CurrentTarget_ !== undefined ? CurrentTarget_ : $ifaceNil;
		this.DelegateTarget = DelegateTarget_ !== undefined ? DelegateTarget_ : $ifaceNil;
		this.RelatedTarget = RelatedTarget_ !== undefined ? RelatedTarget_ : $ifaceNil;
		this.Data = Data_ !== undefined ? Data_ : $ifaceNil;
		this.Result = Result_ !== undefined ? Result_ : $ifaceNil;
		this.Which = Which_ !== undefined ? Which_ : 0;
		this.Namespace = Namespace_ !== undefined ? Namespace_ : "";
		this.MetaKey = MetaKey_ !== undefined ? MetaKey_ : false;
		this.PageX = PageX_ !== undefined ? PageX_ : 0;
		this.PageY = PageY_ !== undefined ? PageY_ : 0;
		this.Type = Type_ !== undefined ? Type_ : "";
	});
	JQueryCoordinates = $pkg.JQueryCoordinates = $newType(0, "Struct", "jquery.JQueryCoordinates", "JQueryCoordinates", "github.com/gopherjs/jquery", function(Left_, Top_) {
		this.$val = this;
		this.Left = Left_ !== undefined ? Left_ : 0;
		this.Top = Top_ !== undefined ? Top_ : 0;
	});
	Event.Ptr.prototype.PreventDefault = function() {
		var event;
		event = this;
		event.Object.preventDefault();
	};
	Event.prototype.PreventDefault = function() { return this.$val.PreventDefault(); };
	Event.Ptr.prototype.IsDefaultPrevented = function() {
		var event;
		event = this;
		return !!(event.Object.isDefaultPrevented());
	};
	Event.prototype.IsDefaultPrevented = function() { return this.$val.IsDefaultPrevented(); };
	Event.Ptr.prototype.IsImmediatePropogationStopped = function() {
		var event;
		event = this;
		return !!(event.Object.isImmediatePropogationStopped());
	};
	Event.prototype.IsImmediatePropogationStopped = function() { return this.$val.IsImmediatePropogationStopped(); };
	Event.Ptr.prototype.IsPropagationStopped = function() {
		var event;
		event = this;
		return !!(event.Object.isPropagationStopped());
	};
	Event.prototype.IsPropagationStopped = function() { return this.$val.IsPropagationStopped(); };
	Event.Ptr.prototype.StopImmediatePropagation = function() {
		var event;
		event = this;
		event.Object.stopImmediatePropagation();
	};
	Event.prototype.StopImmediatePropagation = function() { return this.$val.StopImmediatePropagation(); };
	Event.Ptr.prototype.StopPropagation = function() {
		var event;
		event = this;
		event.Object.stopPropagation();
	};
	Event.prototype.StopPropagation = function() { return this.$val.StopPropagation(); };
	NewJQuery = $pkg.NewJQuery = function(args) {
		return new JQuery.Ptr(new ($global.Function.prototype.bind.apply($global.jQuery, [undefined].concat($externalize(args, ($sliceType($emptyInterface)))))), "", "", 0, "");
	};
	JQuery.Ptr.prototype.Each = function(fn) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.each($externalize((function(idx, elem) {
			fn(idx, $clone(NewJQuery(new ($sliceType($emptyInterface))([elem])), JQuery));
		}), ($funcType([$Int, js.Object], [], false))));
		return j;
	};
	JQuery.prototype.Each = function(fn) { return this.$val.Each(fn); };
	JQuery.Ptr.prototype.Underlying = function() {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return j.o;
	};
	JQuery.prototype.Underlying = function() { return this.$val.Underlying(); };
	JQuery.Ptr.prototype.Get = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return (obj = j.o, obj.get.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
	};
	JQuery.prototype.Get = function(i) { return this.$val.Get(i); };
	JQuery.Ptr.prototype.Append = function(i) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return j.dom2args("append", i);
	};
	JQuery.prototype.Append = function(i) { return this.$val.Append(i); };
	JQuery.Ptr.prototype.Empty = function() {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.empty();
		return j;
	};
	JQuery.prototype.Empty = function() { return this.$val.Empty(); };
	JQuery.Ptr.prototype.Detach = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.detach.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.Detach = function(i) { return this.$val.Detach(i); };
	JQuery.Ptr.prototype.Eq = function(idx) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.eq(idx);
		return j;
	};
	JQuery.prototype.Eq = function(idx) { return this.$val.Eq(idx); };
	JQuery.Ptr.prototype.FadeIn = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.fadeIn.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.FadeIn = function(i) { return this.$val.FadeIn(i); };
	JQuery.Ptr.prototype.Delay = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.delay.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.Delay = function(i) { return this.$val.Delay(i); };
	JQuery.Ptr.prototype.ToArray = function() {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return $assertType($internalize(j.o.toArray(), $emptyInterface), ($sliceType($emptyInterface)));
	};
	JQuery.prototype.ToArray = function() { return this.$val.ToArray(); };
	JQuery.Ptr.prototype.Remove = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.remove.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.Remove = function(i) { return this.$val.Remove(i); };
	JQuery.Ptr.prototype.Stop = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.stop.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.Stop = function(i) { return this.$val.Stop(i); };
	JQuery.Ptr.prototype.AddBack = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.addBack.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.AddBack = function(i) { return this.$val.AddBack(i); };
	JQuery.Ptr.prototype.Css = function(name) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return $internalize(j.o.css($externalize(name, $String)), $String);
	};
	JQuery.prototype.Css = function(name) { return this.$val.Css(name); };
	JQuery.Ptr.prototype.CssArray = function(arr) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return $assertType($internalize(j.o.css($externalize(arr, ($sliceType($String)))), $emptyInterface), ($mapType($String, $emptyInterface)));
	};
	JQuery.prototype.CssArray = function(arr) { return this.$val.CssArray(arr); };
	JQuery.Ptr.prototype.SetCss = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.css.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.SetCss = function(i) { return this.$val.SetCss(i); };
	JQuery.Ptr.prototype.Text = function() {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return $internalize(j.o.text(), $String);
	};
	JQuery.prototype.Text = function() { return this.$val.Text(); };
	JQuery.Ptr.prototype.SetText = function(i) {
		var j, _ref;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		_ref = i;
		if ($assertType(_ref, ($funcType([$Int, $String], [$String], false)), true)[1] || $assertType(_ref, $String, true)[1]) {
		} else {
			console.log("SetText Argument should be 'string' or 'func(int, string) string'");
		}
		j.o = j.o.text($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.SetText = function(i) { return this.$val.SetText(i); };
	JQuery.Ptr.prototype.Val = function() {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return $internalize(j.o.val(), $String);
	};
	JQuery.prototype.Val = function() { return this.$val.Val(); };
	JQuery.Ptr.prototype.SetVal = function(i) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o.val($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.SetVal = function(i) { return this.$val.SetVal(i); };
	JQuery.Ptr.prototype.Prop = function(property) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return $internalize(j.o.prop($externalize(property, $String)), $emptyInterface);
	};
	JQuery.prototype.Prop = function(property) { return this.$val.Prop(property); };
	JQuery.Ptr.prototype.SetProp = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.prop.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.SetProp = function(i) { return this.$val.SetProp(i); };
	JQuery.Ptr.prototype.RemoveProp = function(property) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.removeProp($externalize(property, $String));
		return j;
	};
	JQuery.prototype.RemoveProp = function(property) { return this.$val.RemoveProp(property); };
	JQuery.Ptr.prototype.Attr = function(property) {
		var j, attr;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		attr = j.o.attr($externalize(property, $String));
		if (attr === undefined) {
			return "";
		}
		return $internalize(attr, $String);
	};
	JQuery.prototype.Attr = function(property) { return this.$val.Attr(property); };
	JQuery.Ptr.prototype.SetAttr = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.attr.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.SetAttr = function(i) { return this.$val.SetAttr(i); };
	JQuery.Ptr.prototype.RemoveAttr = function(property) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.removeAttr($externalize(property, $String));
		return j;
	};
	JQuery.prototype.RemoveAttr = function(property) { return this.$val.RemoveAttr(property); };
	JQuery.Ptr.prototype.HasClass = function(class$1) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return !!(j.o.hasClass($externalize(class$1, $String)));
	};
	JQuery.prototype.HasClass = function(class$1) { return this.$val.HasClass(class$1); };
	JQuery.Ptr.prototype.AddClass = function(i) {
		var j, _ref;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		_ref = i;
		if ($assertType(_ref, ($funcType([$Int, $String], [$String], false)), true)[1] || $assertType(_ref, $String, true)[1]) {
		} else {
			console.log("addClass Argument should be 'string' or 'func(int, string) string'");
		}
		j.o = j.o.addClass($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.AddClass = function(i) { return this.$val.AddClass(i); };
	JQuery.Ptr.prototype.RemoveClass = function(property) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.removeClass($externalize(property, $String));
		return j;
	};
	JQuery.prototype.RemoveClass = function(property) { return this.$val.RemoveClass(property); };
	JQuery.Ptr.prototype.ToggleClass = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.toggleClass.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.ToggleClass = function(i) { return this.$val.ToggleClass(i); };
	JQuery.Ptr.prototype.Focus = function() {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.focus();
		return j;
	};
	JQuery.prototype.Focus = function() { return this.$val.Focus(); };
	JQuery.Ptr.prototype.Blur = function() {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.blur();
		return j;
	};
	JQuery.prototype.Blur = function() { return this.$val.Blur(); };
	JQuery.Ptr.prototype.ReplaceAll = function(i) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return j.dom1arg("replaceAll", i);
	};
	JQuery.prototype.ReplaceAll = function(i) { return this.$val.ReplaceAll(i); };
	JQuery.Ptr.prototype.ReplaceWith = function(i) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return j.dom1arg("replaceWith", i);
	};
	JQuery.prototype.ReplaceWith = function(i) { return this.$val.ReplaceWith(i); };
	JQuery.Ptr.prototype.After = function(i) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return j.dom2args("after", i);
	};
	JQuery.prototype.After = function(i) { return this.$val.After(i); };
	JQuery.Ptr.prototype.Before = function(i) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return j.dom2args("before", i);
	};
	JQuery.prototype.Before = function(i) { return this.$val.Before(i); };
	JQuery.Ptr.prototype.Prepend = function(i) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return j.dom2args("prepend", i);
	};
	JQuery.prototype.Prepend = function(i) { return this.$val.Prepend(i); };
	JQuery.Ptr.prototype.PrependTo = function(i) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return j.dom1arg("prependTo", i);
	};
	JQuery.prototype.PrependTo = function(i) { return this.$val.PrependTo(i); };
	JQuery.Ptr.prototype.AppendTo = function(i) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return j.dom1arg("appendTo", i);
	};
	JQuery.prototype.AppendTo = function(i) { return this.$val.AppendTo(i); };
	JQuery.Ptr.prototype.InsertAfter = function(i) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return j.dom1arg("insertAfter", i);
	};
	JQuery.prototype.InsertAfter = function(i) { return this.$val.InsertAfter(i); };
	JQuery.Ptr.prototype.InsertBefore = function(i) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return j.dom1arg("insertBefore", i);
	};
	JQuery.prototype.InsertBefore = function(i) { return this.$val.InsertBefore(i); };
	JQuery.Ptr.prototype.Show = function() {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.show();
		return j;
	};
	JQuery.prototype.Show = function() { return this.$val.Show(); };
	JQuery.Ptr.prototype.Hide = function() {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o.hide();
		return j;
	};
	JQuery.prototype.Hide = function() { return this.$val.Hide(); };
	JQuery.Ptr.prototype.Toggle = function(showOrHide) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.toggle($externalize(showOrHide, $Bool));
		return j;
	};
	JQuery.prototype.Toggle = function(showOrHide) { return this.$val.Toggle(showOrHide); };
	JQuery.Ptr.prototype.Contents = function() {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.contents();
		return j;
	};
	JQuery.prototype.Contents = function() { return this.$val.Contents(); };
	JQuery.Ptr.prototype.Html = function() {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return $internalize(j.o.html(), $String);
	};
	JQuery.prototype.Html = function() { return this.$val.Html(); };
	JQuery.Ptr.prototype.SetHtml = function(i) {
		var j, _ref;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		_ref = i;
		if ($assertType(_ref, ($funcType([$Int, $String], [$String], false)), true)[1] || $assertType(_ref, $String, true)[1]) {
		} else {
			console.log("SetHtml Argument should be 'string' or 'func(int, string) string'");
		}
		j.o = j.o.html($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.SetHtml = function(i) { return this.$val.SetHtml(i); };
	JQuery.Ptr.prototype.Closest = function(i) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return j.dom2args("closest", i);
	};
	JQuery.prototype.Closest = function(i) { return this.$val.Closest(i); };
	JQuery.Ptr.prototype.End = function() {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.end();
		return j;
	};
	JQuery.prototype.End = function() { return this.$val.End(); };
	JQuery.Ptr.prototype.Add = function(i) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return j.dom2args("add", i);
	};
	JQuery.prototype.Add = function(i) { return this.$val.Add(i); };
	JQuery.Ptr.prototype.Clone = function(b) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.clone.apply(obj, $externalize(b, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.Clone = function(b) { return this.$val.Clone(b); };
	JQuery.Ptr.prototype.Height = function() {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return $parseInt(j.o.height()) >> 0;
	};
	JQuery.prototype.Height = function() { return this.$val.Height(); };
	JQuery.Ptr.prototype.SetHeight = function(value) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.height($externalize(value, $String));
		return j;
	};
	JQuery.prototype.SetHeight = function(value) { return this.$val.SetHeight(value); };
	JQuery.Ptr.prototype.Width = function() {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return $parseInt(j.o.width()) >> 0;
	};
	JQuery.prototype.Width = function() { return this.$val.Width(); };
	JQuery.Ptr.prototype.SetWidth = function(i) {
		var j, _ref;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		_ref = i;
		if ($assertType(_ref, ($funcType([$Int, $String], [$String], false)), true)[1] || $assertType(_ref, $String, true)[1]) {
		} else {
			console.log("SetWidth Argument should be 'string' or 'func(int, string) string'");
		}
		j.o = j.o.width($externalize(i, $emptyInterface));
		return j;
	};
	JQuery.prototype.SetWidth = function(i) { return this.$val.SetWidth(i); };
	JQuery.Ptr.prototype.InnerHeight = function() {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return $parseInt(j.o.innerHeight()) >> 0;
	};
	JQuery.prototype.InnerHeight = function() { return this.$val.InnerHeight(); };
	JQuery.Ptr.prototype.InnerWidth = function() {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return $parseInt(j.o.innerWidth()) >> 0;
	};
	JQuery.prototype.InnerWidth = function() { return this.$val.InnerWidth(); };
	JQuery.Ptr.prototype.Offset = function() {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		obj = j.o.offset();
		return new JQueryCoordinates.Ptr($parseInt(obj.left) >> 0, $parseInt(obj.top) >> 0);
	};
	JQuery.prototype.Offset = function() { return this.$val.Offset(); };
	JQuery.Ptr.prototype.SetOffset = function(jc) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.offset($externalize(jc, JQueryCoordinates));
		return j;
	};
	JQuery.prototype.SetOffset = function(jc) { return this.$val.SetOffset(jc); };
	JQuery.Ptr.prototype.OuterHeight = function(includeMargin) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		if (includeMargin.$length === 0) {
			return $parseInt(j.o.outerHeight()) >> 0;
		}
		return $parseInt(j.o.outerHeight($externalize(((0 < 0 || 0 >= includeMargin.$length) ? $throwRuntimeError("index out of range") : includeMargin.$array[includeMargin.$offset + 0]), $Bool))) >> 0;
	};
	JQuery.prototype.OuterHeight = function(includeMargin) { return this.$val.OuterHeight(includeMargin); };
	JQuery.Ptr.prototype.OuterWidth = function(includeMargin) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		if (includeMargin.$length === 0) {
			return $parseInt(j.o.outerWidth()) >> 0;
		}
		return $parseInt(j.o.outerWidth($externalize(((0 < 0 || 0 >= includeMargin.$length) ? $throwRuntimeError("index out of range") : includeMargin.$array[includeMargin.$offset + 0]), $Bool))) >> 0;
	};
	JQuery.prototype.OuterWidth = function(includeMargin) { return this.$val.OuterWidth(includeMargin); };
	JQuery.Ptr.prototype.Position = function() {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		obj = j.o.position();
		return new JQueryCoordinates.Ptr($parseInt(obj.left) >> 0, $parseInt(obj.top) >> 0);
	};
	JQuery.prototype.Position = function() { return this.$val.Position(); };
	JQuery.Ptr.prototype.ScrollLeft = function() {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return $parseInt(j.o.scrollLeft()) >> 0;
	};
	JQuery.prototype.ScrollLeft = function() { return this.$val.ScrollLeft(); };
	JQuery.Ptr.prototype.SetScrollLeft = function(value) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.scrollLeft(value);
		return j;
	};
	JQuery.prototype.SetScrollLeft = function(value) { return this.$val.SetScrollLeft(value); };
	JQuery.Ptr.prototype.ScrollTop = function() {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return $parseInt(j.o.scrollTop()) >> 0;
	};
	JQuery.prototype.ScrollTop = function() { return this.$val.ScrollTop(); };
	JQuery.Ptr.prototype.SetScrollTop = function(value) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.scrollTop(value);
		return j;
	};
	JQuery.prototype.SetScrollTop = function(value) { return this.$val.SetScrollTop(value); };
	JQuery.Ptr.prototype.ClearQueue = function(queueName) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.clearQueue($externalize(queueName, $String));
		return j;
	};
	JQuery.prototype.ClearQueue = function(queueName) { return this.$val.ClearQueue(queueName); };
	JQuery.Ptr.prototype.SetData = function(key, value) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.data($externalize(key, $String), $externalize(value, $emptyInterface));
		return j;
	};
	JQuery.prototype.SetData = function(key, value) { return this.$val.SetData(key, value); };
	JQuery.Ptr.prototype.Data = function(key) {
		var j, result;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		result = j.o.data($externalize(key, $String));
		if (result === undefined) {
			return $ifaceNil;
		}
		return $internalize(result, $emptyInterface);
	};
	JQuery.prototype.Data = function(key) { return this.$val.Data(key); };
	JQuery.Ptr.prototype.Dequeue = function(queueName) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.dequeue($externalize(queueName, $String));
		return j;
	};
	JQuery.prototype.Dequeue = function(queueName) { return this.$val.Dequeue(queueName); };
	JQuery.Ptr.prototype.RemoveData = function(name) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.removeData($externalize(name, $String));
		return j;
	};
	JQuery.prototype.RemoveData = function(name) { return this.$val.RemoveData(name); };
	JQuery.Ptr.prototype.OffsetParent = function() {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.offsetParent();
		return j;
	};
	JQuery.prototype.OffsetParent = function() { return this.$val.OffsetParent(); };
	JQuery.Ptr.prototype.Parent = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.parent.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.Parent = function(i) { return this.$val.Parent(i); };
	JQuery.Ptr.prototype.Parents = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.parents.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.Parents = function(i) { return this.$val.Parents(i); };
	JQuery.Ptr.prototype.ParentsUntil = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.parentsUntil.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.ParentsUntil = function(i) { return this.$val.ParentsUntil(i); };
	JQuery.Ptr.prototype.Prev = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.prev.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.Prev = function(i) { return this.$val.Prev(i); };
	JQuery.Ptr.prototype.PrevAll = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.prevAll.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.PrevAll = function(i) { return this.$val.PrevAll(i); };
	JQuery.Ptr.prototype.PrevUntil = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.prevUntil.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.PrevUntil = function(i) { return this.$val.PrevUntil(i); };
	JQuery.Ptr.prototype.Siblings = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.siblings.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.Siblings = function(i) { return this.$val.Siblings(i); };
	JQuery.Ptr.prototype.Slice = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.slice.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.Slice = function(i) { return this.$val.Slice(i); };
	JQuery.Ptr.prototype.Children = function(selector) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.children($externalize(selector, $emptyInterface));
		return j;
	};
	JQuery.prototype.Children = function(selector) { return this.$val.Children(selector); };
	JQuery.Ptr.prototype.Unwrap = function() {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.unwrap();
		return j;
	};
	JQuery.prototype.Unwrap = function() { return this.$val.Unwrap(); };
	JQuery.Ptr.prototype.Wrap = function(obj) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.wrap($externalize(obj, $emptyInterface));
		return j;
	};
	JQuery.prototype.Wrap = function(obj) { return this.$val.Wrap(obj); };
	JQuery.Ptr.prototype.WrapAll = function(i) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return j.dom1arg("wrapAll", i);
	};
	JQuery.prototype.WrapAll = function(i) { return this.$val.WrapAll(i); };
	JQuery.Ptr.prototype.WrapInner = function(i) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return j.dom1arg("wrapInner", i);
	};
	JQuery.prototype.WrapInner = function(i) { return this.$val.WrapInner(i); };
	JQuery.Ptr.prototype.Next = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.next.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.Next = function(i) { return this.$val.Next(i); };
	JQuery.Ptr.prototype.NextAll = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.nextAll.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.NextAll = function(i) { return this.$val.NextAll(i); };
	JQuery.Ptr.prototype.NextUntil = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.nextUntil.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.NextUntil = function(i) { return this.$val.NextUntil(i); };
	JQuery.Ptr.prototype.Not = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.not.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.Not = function(i) { return this.$val.Not(i); };
	JQuery.Ptr.prototype.Filter = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.filter.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.Filter = function(i) { return this.$val.Filter(i); };
	JQuery.Ptr.prototype.Find = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.find.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.Find = function(i) { return this.$val.Find(i); };
	JQuery.Ptr.prototype.First = function() {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.first();
		return j;
	};
	JQuery.prototype.First = function() { return this.$val.First(); };
	JQuery.Ptr.prototype.Has = function(selector) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.has($externalize(selector, $String));
		return j;
	};
	JQuery.prototype.Has = function(selector) { return this.$val.Has(selector); };
	JQuery.Ptr.prototype.Is = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return !!((obj = j.o, obj.is.apply(obj, $externalize(i, ($sliceType($emptyInterface))))));
	};
	JQuery.prototype.Is = function(i) { return this.$val.Is(i); };
	JQuery.Ptr.prototype.Last = function() {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.last();
		return j;
	};
	JQuery.prototype.Last = function() { return this.$val.Last(); };
	JQuery.Ptr.prototype.Ready = function(handler) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = j.o.ready($externalize(handler, ($funcType([], [], false))));
		return j;
	};
	JQuery.prototype.Ready = function(handler) { return this.$val.Ready(handler); };
	JQuery.Ptr.prototype.Resize = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.resize.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.Resize = function(i) { return this.$val.Resize(i); };
	JQuery.Ptr.prototype.Scroll = function(i) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return j.handleEvent("scroll", i);
	};
	JQuery.prototype.Scroll = function(i) { return this.$val.Scroll(i); };
	JQuery.Ptr.prototype.FadeOut = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.fadeOut.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.FadeOut = function(i) { return this.$val.FadeOut(i); };
	JQuery.Ptr.prototype.Select = function(i) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return j.handleEvent("select", i);
	};
	JQuery.prototype.Select = function(i) { return this.$val.Select(i); };
	JQuery.Ptr.prototype.Submit = function(i) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return j.handleEvent("submit", i);
	};
	JQuery.prototype.Submit = function(i) { return this.$val.Submit(i); };
	JQuery.Ptr.prototype.handleEvent = function(evt, i) {
		var j, _ref;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		_ref = i.$length;
		if (_ref === 0) {
			j.o = j.o[$externalize(evt, $String)]();
		} else if (_ref === 1) {
			j.o = j.o[$externalize(evt, $String)]($externalize((function(e) {
				$assertType(((0 < 0 || 0 >= i.$length) ? $throwRuntimeError("index out of range") : i.$array[i.$offset + 0]), ($funcType([Event], [], false)))(new Event.Ptr(e, 0, $ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil, 0, "", false, 0, 0, ""));
			}), ($funcType([js.Object], [], false))));
		} else if (_ref === 2) {
			j.o = j.o[$externalize(evt, $String)]($externalize($assertType(((0 < 0 || 0 >= i.$length) ? $throwRuntimeError("index out of range") : i.$array[i.$offset + 0]), ($mapType($String, $emptyInterface))), ($mapType($String, $emptyInterface))), $externalize((function(e) {
				$assertType(((1 < 0 || 1 >= i.$length) ? $throwRuntimeError("index out of range") : i.$array[i.$offset + 1]), ($funcType([Event], [], false)))(new Event.Ptr(e, 0, $ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil, 0, "", false, 0, 0, ""));
			}), ($funcType([js.Object], [], false))));
		} else {
			console.log(evt + " event expects 0 to 2 arguments");
		}
		return j;
	};
	JQuery.prototype.handleEvent = function(evt, i) { return this.$val.handleEvent(evt, i); };
	JQuery.Ptr.prototype.Trigger = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.trigger.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.Trigger = function(i) { return this.$val.Trigger(i); };
	JQuery.Ptr.prototype.On = function(p) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return j.events("on", p);
	};
	JQuery.prototype.On = function(p) { return this.$val.On(p); };
	JQuery.Ptr.prototype.One = function(p) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return j.events("one", p);
	};
	JQuery.prototype.One = function(p) { return this.$val.One(p); };
	JQuery.Ptr.prototype.Off = function(p) {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return j.events("off", p);
	};
	JQuery.prototype.Off = function(p) { return this.$val.Off(p); };
	JQuery.Ptr.prototype.events = function(evt, p) {
		var j, count, isEventFunc, _ref, x, _ref$1, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		count = p.$length;
		isEventFunc = false;
		_ref = (x = p.$length - 1 >> 0, ((x < 0 || x >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + x]));
		if ($assertType(_ref, ($funcType([Event], [], false)), true)[1]) {
			isEventFunc = true;
		} else {
			isEventFunc = false;
		}
		_ref$1 = count;
		if (_ref$1 === 0) {
			j.o = j.o[$externalize(evt, $String)]();
			return j;
		} else if (_ref$1 === 1) {
			j.o = j.o[$externalize(evt, $String)]($externalize(((0 < 0 || 0 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]), $emptyInterface));
			return j;
		} else if (_ref$1 === 2) {
			if (isEventFunc) {
				j.o = j.o[$externalize(evt, $String)]($externalize(((0 < 0 || 0 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]), $emptyInterface), $externalize((function(e) {
					$assertType(((1 < 0 || 1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1]), ($funcType([Event], [], false)))(new Event.Ptr(e, 0, $ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil, 0, "", false, 0, 0, ""));
				}), ($funcType([js.Object], [], false))));
				return j;
			} else {
				j.o = j.o[$externalize(evt, $String)]($externalize(((0 < 0 || 0 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]), $emptyInterface), $externalize(((1 < 0 || 1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1]), $emptyInterface));
				return j;
			}
		} else if (_ref$1 === 3) {
			if (isEventFunc) {
				j.o = j.o[$externalize(evt, $String)]($externalize(((0 < 0 || 0 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]), $emptyInterface), $externalize(((1 < 0 || 1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1]), $emptyInterface), $externalize((function(e) {
					$assertType(((2 < 0 || 2 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2]), ($funcType([Event], [], false)))(new Event.Ptr(e, 0, $ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil, 0, "", false, 0, 0, ""));
				}), ($funcType([js.Object], [], false))));
				return j;
			} else {
				j.o = j.o[$externalize(evt, $String)]($externalize(((0 < 0 || 0 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]), $emptyInterface), $externalize(((1 < 0 || 1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1]), $emptyInterface), $externalize(((2 < 0 || 2 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2]), $emptyInterface));
				return j;
			}
		} else if (_ref$1 === 4) {
			if (isEventFunc) {
				j.o = j.o[$externalize(evt, $String)]($externalize(((0 < 0 || 0 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]), $emptyInterface), $externalize(((1 < 0 || 1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1]), $emptyInterface), $externalize(((2 < 0 || 2 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2]), $emptyInterface), $externalize((function(e) {
					$assertType(((3 < 0 || 3 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 3]), ($funcType([Event], [], false)))(new Event.Ptr(e, 0, $ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil, $ifaceNil, 0, "", false, 0, 0, ""));
				}), ($funcType([js.Object], [], false))));
				return j;
			} else {
				j.o = j.o[$externalize(evt, $String)]($externalize(((0 < 0 || 0 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 0]), $emptyInterface), $externalize(((1 < 0 || 1 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 1]), $emptyInterface), $externalize(((2 < 0 || 2 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 2]), $emptyInterface), $externalize(((3 < 0 || 3 >= p.$length) ? $throwRuntimeError("index out of range") : p.$array[p.$offset + 3]), $emptyInterface));
				return j;
			}
		} else {
			console.log(evt + " event should no have more than 4 arguments");
			j.o = (obj = j.o, obj[$externalize(evt, $String)].apply(obj, $externalize(p, ($sliceType($emptyInterface)))));
			return j;
		}
	};
	JQuery.prototype.events = function(evt, p) { return this.$val.events(evt, p); };
	JQuery.Ptr.prototype.dom2args = function(method, i) {
		var j, _ref, _tuple, selector, selOk, _tuple$1, context, ctxOk, _tuple$2, selector$1, selOk$1;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		_ref = i.$length;
		if (_ref === 2) {
			_tuple = $assertType(((0 < 0 || 0 >= i.$length) ? $throwRuntimeError("index out of range") : i.$array[i.$offset + 0]), JQuery, true); selector = new JQuery.Ptr(); $copy(selector, _tuple[0], JQuery); selOk = _tuple[1];
			_tuple$1 = $assertType(((1 < 0 || 1 >= i.$length) ? $throwRuntimeError("index out of range") : i.$array[i.$offset + 1]), JQuery, true); context = new JQuery.Ptr(); $copy(context, _tuple$1[0], JQuery); ctxOk = _tuple$1[1];
			if (!selOk && !ctxOk) {
				j.o = j.o[$externalize(method, $String)]($externalize(((0 < 0 || 0 >= i.$length) ? $throwRuntimeError("index out of range") : i.$array[i.$offset + 0]), $emptyInterface), $externalize(((1 < 0 || 1 >= i.$length) ? $throwRuntimeError("index out of range") : i.$array[i.$offset + 1]), $emptyInterface));
				return j;
			} else if (selOk && !ctxOk) {
				j.o = j.o[$externalize(method, $String)](selector.o, $externalize(((1 < 0 || 1 >= i.$length) ? $throwRuntimeError("index out of range") : i.$array[i.$offset + 1]), $emptyInterface));
				return j;
			} else if (!selOk && ctxOk) {
				j.o = j.o[$externalize(method, $String)]($externalize(((0 < 0 || 0 >= i.$length) ? $throwRuntimeError("index out of range") : i.$array[i.$offset + 0]), $emptyInterface), context.o);
				return j;
			}
			j.o = j.o[$externalize(method, $String)](selector.o, context.o);
			return j;
		} else if (_ref === 1) {
			_tuple$2 = $assertType(((0 < 0 || 0 >= i.$length) ? $throwRuntimeError("index out of range") : i.$array[i.$offset + 0]), JQuery, true); selector$1 = new JQuery.Ptr(); $copy(selector$1, _tuple$2[0], JQuery); selOk$1 = _tuple$2[1];
			if (!selOk$1) {
				j.o = j.o[$externalize(method, $String)]($externalize(((0 < 0 || 0 >= i.$length) ? $throwRuntimeError("index out of range") : i.$array[i.$offset + 0]), $emptyInterface));
				return j;
			}
			j.o = j.o[$externalize(method, $String)](selector$1.o);
			return j;
		} else {
			console.log(" only 1 or 2 parameters allowed for method ", method);
			return j;
		}
	};
	JQuery.prototype.dom2args = function(method, i) { return this.$val.dom2args(method, i); };
	JQuery.Ptr.prototype.dom1arg = function(method, i) {
		var j, _tuple, selector, selOk;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		_tuple = $assertType(i, JQuery, true); selector = new JQuery.Ptr(); $copy(selector, _tuple[0], JQuery); selOk = _tuple[1];
		if (!selOk) {
			j.o = j.o[$externalize(method, $String)]($externalize(i, $emptyInterface));
			return j;
		}
		j.o = j.o[$externalize(method, $String)](selector.o);
		return j;
	};
	JQuery.prototype.dom1arg = function(method, i) { return this.$val.dom1arg(method, i); };
	JQuery.Ptr.prototype.Load = function(i) {
		var j, obj;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		j.o = (obj = j.o, obj.load.apply(obj, $externalize(i, ($sliceType($emptyInterface)))));
		return j;
	};
	JQuery.prototype.Load = function(i) { return this.$val.Load(i); };
	JQuery.Ptr.prototype.Serialize = function() {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return $internalize(j.o.serialize(), $String);
	};
	JQuery.prototype.Serialize = function() { return this.$val.Serialize(); };
	JQuery.Ptr.prototype.SerializeArray = function() {
		var j;
		j = new JQuery.Ptr(); $copy(j, this, JQuery);
		return j.o.serializeArray();
	};
	JQuery.prototype.SerializeArray = function() { return this.$val.SerializeArray(); };
	$pkg.$init = function() {
		JQuery.methods = [["Add", "Add", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["AddBack", "AddBack", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["AddClass", "AddClass", "", $funcType([$emptyInterface], [JQuery], false), -1], ["After", "After", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Append", "Append", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["AppendTo", "AppendTo", "", $funcType([$emptyInterface], [JQuery], false), -1], ["Attr", "Attr", "", $funcType([$String], [$String], false), -1], ["Before", "Before", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Blur", "Blur", "", $funcType([], [JQuery], false), -1], ["Children", "Children", "", $funcType([$emptyInterface], [JQuery], false), -1], ["ClearQueue", "ClearQueue", "", $funcType([$String], [JQuery], false), -1], ["Clone", "Clone", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Closest", "Closest", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Contents", "Contents", "", $funcType([], [JQuery], false), -1], ["Css", "Css", "", $funcType([$String], [$String], false), -1], ["CssArray", "CssArray", "", $funcType([($sliceType($String))], [($mapType($String, $emptyInterface))], true), -1], ["Data", "Data", "", $funcType([$String], [$emptyInterface], false), -1], ["Delay", "Delay", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Dequeue", "Dequeue", "", $funcType([$String], [JQuery], false), -1], ["Detach", "Detach", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Each", "Each", "", $funcType([($funcType([$Int, JQuery], [], false))], [JQuery], false), -1], ["Empty", "Empty", "", $funcType([], [JQuery], false), -1], ["End", "End", "", $funcType([], [JQuery], false), -1], ["Eq", "Eq", "", $funcType([$Int], [JQuery], false), -1], ["FadeIn", "FadeIn", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["FadeOut", "FadeOut", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Filter", "Filter", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Find", "Find", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["First", "First", "", $funcType([], [JQuery], false), -1], ["Focus", "Focus", "", $funcType([], [JQuery], false), -1], ["Get", "Get", "", $funcType([($sliceType($emptyInterface))], [js.Object], true), -1], ["Has", "Has", "", $funcType([$String], [JQuery], false), -1], ["HasClass", "HasClass", "", $funcType([$String], [$Bool], false), -1], ["Height", "Height", "", $funcType([], [$Int], false), -1], ["Hide", "Hide", "", $funcType([], [JQuery], false), -1], ["Html", "Html", "", $funcType([], [$String], false), -1], ["InnerHeight", "InnerHeight", "", $funcType([], [$Int], false), -1], ["InnerWidth", "InnerWidth", "", $funcType([], [$Int], false), -1], ["InsertAfter", "InsertAfter", "", $funcType([$emptyInterface], [JQuery], false), -1], ["InsertBefore", "InsertBefore", "", $funcType([$emptyInterface], [JQuery], false), -1], ["Is", "Is", "", $funcType([($sliceType($emptyInterface))], [$Bool], true), -1], ["Last", "Last", "", $funcType([], [JQuery], false), -1], ["Load", "Load", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Next", "Next", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["NextAll", "NextAll", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["NextUntil", "NextUntil", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Not", "Not", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Off", "Off", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Offset", "Offset", "", $funcType([], [JQueryCoordinates], false), -1], ["OffsetParent", "OffsetParent", "", $funcType([], [JQuery], false), -1], ["On", "On", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["One", "One", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["OuterHeight", "OuterHeight", "", $funcType([($sliceType($Bool))], [$Int], true), -1], ["OuterWidth", "OuterWidth", "", $funcType([($sliceType($Bool))], [$Int], true), -1], ["Parent", "Parent", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Parents", "Parents", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["ParentsUntil", "ParentsUntil", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Position", "Position", "", $funcType([], [JQueryCoordinates], false), -1], ["Prepend", "Prepend", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["PrependTo", "PrependTo", "", $funcType([$emptyInterface], [JQuery], false), -1], ["Prev", "Prev", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["PrevAll", "PrevAll", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["PrevUntil", "PrevUntil", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Prop", "Prop", "", $funcType([$String], [$emptyInterface], false), -1], ["Ready", "Ready", "", $funcType([($funcType([], [], false))], [JQuery], false), -1], ["Remove", "Remove", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["RemoveAttr", "RemoveAttr", "", $funcType([$String], [JQuery], false), -1], ["RemoveClass", "RemoveClass", "", $funcType([$String], [JQuery], false), -1], ["RemoveData", "RemoveData", "", $funcType([$String], [JQuery], false), -1], ["RemoveProp", "RemoveProp", "", $funcType([$String], [JQuery], false), -1], ["ReplaceAll", "ReplaceAll", "", $funcType([$emptyInterface], [JQuery], false), -1], ["ReplaceWith", "ReplaceWith", "", $funcType([$emptyInterface], [JQuery], false), -1], ["Resize", "Resize", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Scroll", "Scroll", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["ScrollLeft", "ScrollLeft", "", $funcType([], [$Int], false), -1], ["ScrollTop", "ScrollTop", "", $funcType([], [$Int], false), -1], ["Select", "Select", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Serialize", "Serialize", "", $funcType([], [$String], false), -1], ["SerializeArray", "SerializeArray", "", $funcType([], [js.Object], false), -1], ["SetAttr", "SetAttr", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["SetCss", "SetCss", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["SetData", "SetData", "", $funcType([$String, $emptyInterface], [JQuery], false), -1], ["SetHeight", "SetHeight", "", $funcType([$String], [JQuery], false), -1], ["SetHtml", "SetHtml", "", $funcType([$emptyInterface], [JQuery], false), -1], ["SetOffset", "SetOffset", "", $funcType([JQueryCoordinates], [JQuery], false), -1], ["SetProp", "SetProp", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["SetScrollLeft", "SetScrollLeft", "", $funcType([$Int], [JQuery], false), -1], ["SetScrollTop", "SetScrollTop", "", $funcType([$Int], [JQuery], false), -1], ["SetText", "SetText", "", $funcType([$emptyInterface], [JQuery], false), -1], ["SetVal", "SetVal", "", $funcType([$emptyInterface], [JQuery], false), -1], ["SetWidth", "SetWidth", "", $funcType([$emptyInterface], [JQuery], false), -1], ["Show", "Show", "", $funcType([], [JQuery], false), -1], ["Siblings", "Siblings", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Slice", "Slice", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Stop", "Stop", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Submit", "Submit", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Text", "Text", "", $funcType([], [$String], false), -1], ["ToArray", "ToArray", "", $funcType([], [($sliceType($emptyInterface))], false), -1], ["Toggle", "Toggle", "", $funcType([$Bool], [JQuery], false), -1], ["ToggleClass", "ToggleClass", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Trigger", "Trigger", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Underlying", "Underlying", "", $funcType([], [js.Object], false), -1], ["Unwrap", "Unwrap", "", $funcType([], [JQuery], false), -1], ["Val", "Val", "", $funcType([], [$String], false), -1], ["Width", "Width", "", $funcType([], [$Int], false), -1], ["Wrap", "Wrap", "", $funcType([$emptyInterface], [JQuery], false), -1], ["WrapAll", "WrapAll", "", $funcType([$emptyInterface], [JQuery], false), -1], ["WrapInner", "WrapInner", "", $funcType([$emptyInterface], [JQuery], false), -1], ["dom1arg", "dom1arg", "github.com/gopherjs/jquery", $funcType([$String, $emptyInterface], [JQuery], false), -1], ["dom2args", "dom2args", "github.com/gopherjs/jquery", $funcType([$String, ($sliceType($emptyInterface))], [JQuery], true), -1], ["events", "events", "github.com/gopherjs/jquery", $funcType([$String, ($sliceType($emptyInterface))], [JQuery], true), -1], ["handleEvent", "handleEvent", "github.com/gopherjs/jquery", $funcType([$String, ($sliceType($emptyInterface))], [JQuery], true), -1]];
		($ptrType(JQuery)).methods = [["Add", "Add", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["AddBack", "AddBack", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["AddClass", "AddClass", "", $funcType([$emptyInterface], [JQuery], false), -1], ["After", "After", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Append", "Append", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["AppendTo", "AppendTo", "", $funcType([$emptyInterface], [JQuery], false), -1], ["Attr", "Attr", "", $funcType([$String], [$String], false), -1], ["Before", "Before", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Blur", "Blur", "", $funcType([], [JQuery], false), -1], ["Children", "Children", "", $funcType([$emptyInterface], [JQuery], false), -1], ["ClearQueue", "ClearQueue", "", $funcType([$String], [JQuery], false), -1], ["Clone", "Clone", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Closest", "Closest", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Contents", "Contents", "", $funcType([], [JQuery], false), -1], ["Css", "Css", "", $funcType([$String], [$String], false), -1], ["CssArray", "CssArray", "", $funcType([($sliceType($String))], [($mapType($String, $emptyInterface))], true), -1], ["Data", "Data", "", $funcType([$String], [$emptyInterface], false), -1], ["Delay", "Delay", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Dequeue", "Dequeue", "", $funcType([$String], [JQuery], false), -1], ["Detach", "Detach", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Each", "Each", "", $funcType([($funcType([$Int, JQuery], [], false))], [JQuery], false), -1], ["Empty", "Empty", "", $funcType([], [JQuery], false), -1], ["End", "End", "", $funcType([], [JQuery], false), -1], ["Eq", "Eq", "", $funcType([$Int], [JQuery], false), -1], ["FadeIn", "FadeIn", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["FadeOut", "FadeOut", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Filter", "Filter", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Find", "Find", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["First", "First", "", $funcType([], [JQuery], false), -1], ["Focus", "Focus", "", $funcType([], [JQuery], false), -1], ["Get", "Get", "", $funcType([($sliceType($emptyInterface))], [js.Object], true), -1], ["Has", "Has", "", $funcType([$String], [JQuery], false), -1], ["HasClass", "HasClass", "", $funcType([$String], [$Bool], false), -1], ["Height", "Height", "", $funcType([], [$Int], false), -1], ["Hide", "Hide", "", $funcType([], [JQuery], false), -1], ["Html", "Html", "", $funcType([], [$String], false), -1], ["InnerHeight", "InnerHeight", "", $funcType([], [$Int], false), -1], ["InnerWidth", "InnerWidth", "", $funcType([], [$Int], false), -1], ["InsertAfter", "InsertAfter", "", $funcType([$emptyInterface], [JQuery], false), -1], ["InsertBefore", "InsertBefore", "", $funcType([$emptyInterface], [JQuery], false), -1], ["Is", "Is", "", $funcType([($sliceType($emptyInterface))], [$Bool], true), -1], ["Last", "Last", "", $funcType([], [JQuery], false), -1], ["Load", "Load", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Next", "Next", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["NextAll", "NextAll", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["NextUntil", "NextUntil", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Not", "Not", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Off", "Off", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Offset", "Offset", "", $funcType([], [JQueryCoordinates], false), -1], ["OffsetParent", "OffsetParent", "", $funcType([], [JQuery], false), -1], ["On", "On", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["One", "One", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["OuterHeight", "OuterHeight", "", $funcType([($sliceType($Bool))], [$Int], true), -1], ["OuterWidth", "OuterWidth", "", $funcType([($sliceType($Bool))], [$Int], true), -1], ["Parent", "Parent", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Parents", "Parents", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["ParentsUntil", "ParentsUntil", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Position", "Position", "", $funcType([], [JQueryCoordinates], false), -1], ["Prepend", "Prepend", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["PrependTo", "PrependTo", "", $funcType([$emptyInterface], [JQuery], false), -1], ["Prev", "Prev", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["PrevAll", "PrevAll", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["PrevUntil", "PrevUntil", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Prop", "Prop", "", $funcType([$String], [$emptyInterface], false), -1], ["Ready", "Ready", "", $funcType([($funcType([], [], false))], [JQuery], false), -1], ["Remove", "Remove", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["RemoveAttr", "RemoveAttr", "", $funcType([$String], [JQuery], false), -1], ["RemoveClass", "RemoveClass", "", $funcType([$String], [JQuery], false), -1], ["RemoveData", "RemoveData", "", $funcType([$String], [JQuery], false), -1], ["RemoveProp", "RemoveProp", "", $funcType([$String], [JQuery], false), -1], ["ReplaceAll", "ReplaceAll", "", $funcType([$emptyInterface], [JQuery], false), -1], ["ReplaceWith", "ReplaceWith", "", $funcType([$emptyInterface], [JQuery], false), -1], ["Resize", "Resize", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Scroll", "Scroll", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["ScrollLeft", "ScrollLeft", "", $funcType([], [$Int], false), -1], ["ScrollTop", "ScrollTop", "", $funcType([], [$Int], false), -1], ["Select", "Select", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Serialize", "Serialize", "", $funcType([], [$String], false), -1], ["SerializeArray", "SerializeArray", "", $funcType([], [js.Object], false), -1], ["SetAttr", "SetAttr", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["SetCss", "SetCss", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["SetData", "SetData", "", $funcType([$String, $emptyInterface], [JQuery], false), -1], ["SetHeight", "SetHeight", "", $funcType([$String], [JQuery], false), -1], ["SetHtml", "SetHtml", "", $funcType([$emptyInterface], [JQuery], false), -1], ["SetOffset", "SetOffset", "", $funcType([JQueryCoordinates], [JQuery], false), -1], ["SetProp", "SetProp", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["SetScrollLeft", "SetScrollLeft", "", $funcType([$Int], [JQuery], false), -1], ["SetScrollTop", "SetScrollTop", "", $funcType([$Int], [JQuery], false), -1], ["SetText", "SetText", "", $funcType([$emptyInterface], [JQuery], false), -1], ["SetVal", "SetVal", "", $funcType([$emptyInterface], [JQuery], false), -1], ["SetWidth", "SetWidth", "", $funcType([$emptyInterface], [JQuery], false), -1], ["Show", "Show", "", $funcType([], [JQuery], false), -1], ["Siblings", "Siblings", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Slice", "Slice", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Stop", "Stop", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Submit", "Submit", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Text", "Text", "", $funcType([], [$String], false), -1], ["ToArray", "ToArray", "", $funcType([], [($sliceType($emptyInterface))], false), -1], ["Toggle", "Toggle", "", $funcType([$Bool], [JQuery], false), -1], ["ToggleClass", "ToggleClass", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Trigger", "Trigger", "", $funcType([($sliceType($emptyInterface))], [JQuery], true), -1], ["Underlying", "Underlying", "", $funcType([], [js.Object], false), -1], ["Unwrap", "Unwrap", "", $funcType([], [JQuery], false), -1], ["Val", "Val", "", $funcType([], [$String], false), -1], ["Width", "Width", "", $funcType([], [$Int], false), -1], ["Wrap", "Wrap", "", $funcType([$emptyInterface], [JQuery], false), -1], ["WrapAll", "WrapAll", "", $funcType([$emptyInterface], [JQuery], false), -1], ["WrapInner", "WrapInner", "", $funcType([$emptyInterface], [JQuery], false), -1], ["dom1arg", "dom1arg", "github.com/gopherjs/jquery", $funcType([$String, $emptyInterface], [JQuery], false), -1], ["dom2args", "dom2args", "github.com/gopherjs/jquery", $funcType([$String, ($sliceType($emptyInterface))], [JQuery], true), -1], ["events", "events", "github.com/gopherjs/jquery", $funcType([$String, ($sliceType($emptyInterface))], [JQuery], true), -1], ["handleEvent", "handleEvent", "github.com/gopherjs/jquery", $funcType([$String, ($sliceType($emptyInterface))], [JQuery], true), -1]];
		JQuery.init([["o", "o", "github.com/gopherjs/jquery", js.Object, ""], ["Jquery", "Jquery", "", $String, "js:\"jquery\""], ["Selector", "Selector", "", $String, "js:\"selector\""], ["Length", "Length", "", $Int, "js:\"length\""], ["Context", "Context", "", $String, "js:\"context\""]]);
		Event.methods = [["Bool", "Bool", "", $funcType([], [$Bool], false), 0], ["Call", "Call", "", $funcType([$String, ($sliceType($emptyInterface))], [js.Object], true), 0], ["Delete", "Delete", "", $funcType([$String], [], false), 0], ["Float", "Float", "", $funcType([], [$Float64], false), 0], ["Get", "Get", "", $funcType([$String], [js.Object], false), 0], ["Index", "Index", "", $funcType([$Int], [js.Object], false), 0], ["Int", "Int", "", $funcType([], [$Int], false), 0], ["Int64", "Int64", "", $funcType([], [$Int64], false), 0], ["Interface", "Interface", "", $funcType([], [$emptyInterface], false), 0], ["Invoke", "Invoke", "", $funcType([($sliceType($emptyInterface))], [js.Object], true), 0], ["IsNull", "IsNull", "", $funcType([], [$Bool], false), 0], ["IsUndefined", "IsUndefined", "", $funcType([], [$Bool], false), 0], ["Length", "Length", "", $funcType([], [$Int], false), 0], ["New", "New", "", $funcType([($sliceType($emptyInterface))], [js.Object], true), 0], ["Set", "Set", "", $funcType([$String, $emptyInterface], [], false), 0], ["SetIndex", "SetIndex", "", $funcType([$Int, $emptyInterface], [], false), 0], ["Str", "Str", "", $funcType([], [$String], false), 0], ["Uint64", "Uint64", "", $funcType([], [$Uint64], false), 0], ["Unsafe", "Unsafe", "", $funcType([], [$Uintptr], false), 0]];
		($ptrType(Event)).methods = [["Bool", "Bool", "", $funcType([], [$Bool], false), 0], ["Call", "Call", "", $funcType([$String, ($sliceType($emptyInterface))], [js.Object], true), 0], ["Delete", "Delete", "", $funcType([$String], [], false), 0], ["Float", "Float", "", $funcType([], [$Float64], false), 0], ["Get", "Get", "", $funcType([$String], [js.Object], false), 0], ["Index", "Index", "", $funcType([$Int], [js.Object], false), 0], ["Int", "Int", "", $funcType([], [$Int], false), 0], ["Int64", "Int64", "", $funcType([], [$Int64], false), 0], ["Interface", "Interface", "", $funcType([], [$emptyInterface], false), 0], ["Invoke", "Invoke", "", $funcType([($sliceType($emptyInterface))], [js.Object], true), 0], ["IsDefaultPrevented", "IsDefaultPrevented", "", $funcType([], [$Bool], false), -1], ["IsImmediatePropogationStopped", "IsImmediatePropogationStopped", "", $funcType([], [$Bool], false), -1], ["IsNull", "IsNull", "", $funcType([], [$Bool], false), 0], ["IsPropagationStopped", "IsPropagationStopped", "", $funcType([], [$Bool], false), -1], ["IsUndefined", "IsUndefined", "", $funcType([], [$Bool], false), 0], ["Length", "Length", "", $funcType([], [$Int], false), 0], ["New", "New", "", $funcType([($sliceType($emptyInterface))], [js.Object], true), 0], ["PreventDefault", "PreventDefault", "", $funcType([], [], false), -1], ["Set", "Set", "", $funcType([$String, $emptyInterface], [], false), 0], ["SetIndex", "SetIndex", "", $funcType([$Int, $emptyInterface], [], false), 0], ["StopImmediatePropagation", "StopImmediatePropagation", "", $funcType([], [], false), -1], ["StopPropagation", "StopPropagation", "", $funcType([], [], false), -1], ["Str", "Str", "", $funcType([], [$String], false), 0], ["Uint64", "Uint64", "", $funcType([], [$Uint64], false), 0], ["Unsafe", "Unsafe", "", $funcType([], [$Uintptr], false), 0]];
		Event.init([["Object", "", "", js.Object, ""], ["KeyCode", "KeyCode", "", $Int, "js:\"keyCode\""], ["Target", "Target", "", js.Object, "js:\"target\""], ["CurrentTarget", "CurrentTarget", "", js.Object, "js:\"currentTarget\""], ["DelegateTarget", "DelegateTarget", "", js.Object, "js:\"delegateTarget\""], ["RelatedTarget", "RelatedTarget", "", js.Object, "js:\"relatedTarget\""], ["Data", "Data", "", js.Object, "js:\"data\""], ["Result", "Result", "", js.Object, "js:\"result\""], ["Which", "Which", "", $Int, "js:\"which\""], ["Namespace", "Namespace", "", $String, "js:\"namespace\""], ["MetaKey", "MetaKey", "", $Bool, "js:\"metaKey\""], ["PageX", "PageX", "", $Int, "js:\"pageX\""], ["PageY", "PageY", "", $Int, "js:\"pageY\""], ["Type", "Type", "", $String, "js:\"type\""]]);
		JQueryCoordinates.init([["Left", "Left", "", $Int, ""], ["Top", "Top", "", $Int, ""]]);
	};
	return $pkg;
})();
$packages["main"] = (function() {
	var $pkg = {}, json = $packages["encoding/json"], funcs = $packages["github.com/chengz0/xmuses/funcs"], jquery = $packages["github.com/gopherjs/jquery"], log = $packages["log"], strings = $packages["strings"], time = $packages["time"], timeout, jQuery, main;
	main = function($b) {
		var $this = this, $args = arguments, $r, $s = 0, _selection, _r, msg, _tuple, body, err, _entry, curcontainer;
		/* */ if(!$b) { $nonblockingCall(); }; var $blocking_main = function() { s: while (true) { switch ($s) { case 0:
		log.Println(new ($sliceType($emptyInterface))([new $String($internalize(jQuery(new ($sliceType($emptyInterface))([])).o.jquery, $String))]));
		/* while (true) { */ case 1: if(!(true)) { $s = 2; continue; }
			_r = $select([[funcs.Listener], [timeout]], true); /* */ $s = 3; case 3: if (_r && _r.$blocking) { _r = _r(); }
			_selection = _r;
			switch (0) { default: if (_selection[0] === 0) {
				msg = _selection[1][0];
				_tuple = json.Marshal(msg); body = _tuple[0]; err = _tuple[1];
				if (!($interfaceIsEqual(err, $ifaceNil))) {
					log.Printf("Can not parse apievent: %s", new ($sliceType($emptyInterface))([new $String(err.Error())]));
					/* continue; */ $s = 1; continue;
				}
				log.Println(new ($sliceType($emptyInterface))([new $String($bytesToString(body))]));
				curcontainer = strings.ToUpper((_entry = funcs.ContainersIN[msg.ID], _entry !== undefined ? _entry.v : ""));
				jQuery(new ($sliceType($emptyInterface))([new $String(curcontainer)])).ToggleClass(new ($sliceType($emptyInterface))([new $String("running")]));
			} else if (_selection[0] === 1) {
				break;
			} }
		/* } */ $s = 1; continue; case 2:
		/* */ case -1: } return; } }; $blocking_main.$blocking = true; return $blocking_main;
	};
	$pkg.$run = function($b) {
		var $this = this, $args = arguments, $r, $s = 0;
		/* */ if(!$b) { $nonblockingCall(); }; var $f = function() { s: while (true) { switch ($s) { case 0:
		$packages["github.com/gopherjs/gopherjs/js"].$init();
		$packages["runtime"].$init();
		$packages["errors"].$init();
		$packages["sync/atomic"].$init();
		$packages["sync"].$init();
		$packages["io"].$init();
		$packages["unicode"].$init();
		$packages["unicode/utf8"].$init();
		$packages["bytes"].$init();
		$packages["encoding"].$init();
		$packages["math"].$init();
		$packages["strconv"].$init();
		$packages["strings"].$init();
		$packages["syscall"].$init();
		$packages["time"].$init();
		$packages["os"].$init();
		$packages["reflect"].$init();
		$packages["fmt"].$init();
		$packages["sort"].$init();
		$packages["flag"].$init();
		$packages["bufio"].$init();
		$packages["text/tabwriter"].$init();
		$packages["runtime/pprof"].$init();
		$r = $packages["testing"].$init(true); /* */ $s = 1; case 1: if ($r && $r.$blocking) { $r = $r(); }
		$packages["encoding/base64"].$init();
		$packages["unicode/utf16"].$init();
		$packages["encoding/json"].$init();
		$packages["encoding/binary"].$init();
		$packages["path/filepath"].$init();
		$packages["io/ioutil"].$init();
		$packages["log"].$init();
		$packages["math/rand"].$init();
		$packages["net"].$init();
		$packages["compress/flate"].$init();
		$packages["hash"].$init();
		$packages["hash/crc32"].$init();
		$packages["compress/gzip"].$init();
		$packages["container/list"].$init();
		$packages["crypto"].$init();
		$packages["crypto/subtle"].$init();
		$packages["crypto/cipher"].$init();
		$packages["crypto/aes"].$init();
		$packages["crypto/des"].$init();
		$packages["math/big"].$init();
		$packages["crypto/elliptic"].$init();
		$packages["crypto/ecdsa"].$init();
		$packages["crypto/hmac"].$init();
		$packages["crypto/md5"].$init();
		$packages["crypto/rand"].$init();
		$packages["crypto/rc4"].$init();
		$packages["crypto/rsa"].$init();
		$packages["crypto/sha1"].$init();
		$packages["crypto/sha256"].$init();
		$packages["crypto/dsa"].$init();
		$packages["crypto/sha512"].$init();
		$packages["encoding/asn1"].$init();
		$packages["crypto/x509/pkix"].$init();
		$packages["encoding/hex"].$init();
		$packages["encoding/pem"].$init();
		$packages["os/exec"].$init();
		$packages["crypto/x509"].$init();
		$packages["crypto/tls"].$init();
		$packages["mime"].$init();
		$packages["net/textproto"].$init();
		$packages["mime/multipart"].$init();
		$packages["net/url"].$init();
		$packages["path"].$init();
		$packages["net/http"].$init();
		$packages["net/http/httputil"].$init();
		$packages["github.com/deepglint/go-dockerclient"].$init();
		$packages["github.com/chengz0/xmuses/funcs"].$init();
		$packages["github.com/gopherjs/jquery"].$init();
		$pkg.$init();
		$r = main(true); /* */ $s = 2; case 2: if ($r && $r.$blocking) { $r = $r(); }
		/* */ case -1: } return; } }; $f.$blocking = true; return $f;
	};
	$pkg.$init = function() {
		timeout = time.After(new time.Duration(0, 1000000000));
		jQuery = jquery.NewJQuery;
	};
	return $pkg;
})();
$go($packages["main"].$run, [], true);

})();
//# sourceMappingURL=docker_event_js.js.map
